#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных


Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // для варианта внешнего отчета
Перем мВерсияОтчета Экспорт; // для варианта внешнего отчета


Перем СтруктураРеквизитовФормы; // структура реквизитов формы отчета

Перем ДокументСсылкаАлкоОтчет; // Документ.РегламентированныйОтчет к которому привязан отчет.

// Структура получаемая функцией ПолучитьСтруктуруСервисРегистров()
// модуля формы отчета.
Перем СтруктураСервисРегистров; 

Перем ОбъектЭтогоОтчета; // объект метаданных отчета

// Переменные, полученные из реквизитов формы отчета.
Перем СтруктураДанныхТитульный, мДеревоВыбранныхСтраниц, ДополнительныеДанные, 
	  НомерКорректировки, ДатаПодписи;

// Переменные, используемые при проверке и выгрузке отчета.
Перем ДеревоВыгрузки, ПараметрыВыгрузки, СтатусПроверки;

// Переменные, полученные из реквизитов формы отчета.
Перем ТаблицаСтраницыЛицензии, ТаблицаСтраницыРаздел1, ТаблицаСтраницыРаздел2;

// Вспомогательные таблицы значений, отражающие состав ресурсов регистров сведений
// по группам.
Перем ТабП0000000002, ТабП0000100003, ТабП0000200003;

// Таблица значений, в которую записываются найденные при проверке выгрузки ошибки.
Перем ТаблицаСообщений; 

// Таблица значений, в который записываются информационные сообщения при проверке выгрузки ошибки.
Перем ТаблицаСообщенийДляСведения;

// Предельное количество ошибок, по достижении которого дальнейшая проверка прекращается.
Перем МаксимальноеКоличествоОшибок;

// Данные обособленных подразделений Раздела 1.
Перем ДанныеОП_Раздел1;

// Данные производителей-импортеров и счетчик, который присваивается как ИД производителя-импортера.
Перем ДанныеПроизводителей, СчетчикИДПроизвИмп;

// Данные поставщиков и счетчик, который присваивается как ИД поставщика.
Перем ДанныеПоставщиков, СчетчикИдПоставщиков;

// Данные лицензий поставщиков и счетчик, который присваивается как ИД лицензии.
Перем ДанныеЛицензий, СчетчикИдЛицензий;

// Данные движений продукции с привязкой к производителю-импортеру.
Перем ДанныеДвижений;

// Вспомогательные переменные.
Перем ВсегоСтрокПоРазделу1, ВсегоСтрокПоРазделу2, НужноОбработатьСтрок, ОбработаноСтрок, КолСтрокПриПроверкеЗаполнения;

// Содержит процент выполнения процесса проверки или выгрузки, который соответсвует проверке заполнения разделов.
// Для процесса проверки с ошибками - 100%, проверка без ошибок - 90%, при выгрузке без ошибок - 84%.
Перем ПроцентБезЗавершающейПроверкиДанных, ПроцентБезКонвертацииАрхивации;

// Адрес временного хранилища для обмена вспомогательной информацией (процент выполнения, этап).
Перем ВспомогательныйАдрес;
// Содержит шаг информирования о проценте выполнения процесса.
Перем ШагИнформирования;

// Признак отсутствия ошибок при проверке
Перем НетОшибокПроверки;

// Версия БСП.
Перем ВерсияБСПЧислом;


#КонецОбласти


#Область ПрограммныйИнтерфейс


#Область ОбработкаПриЗаписиИзФормЗаписиРегистров

// В зависимости от имени регистра обрабатывает поля ресурсов записи и 
// вычисляет значения реквизитов при необходимости.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		Запись 						- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура ОбработкаЗаписи(ИмяРегистра, Запись) Экспорт
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил12Раздел1" Тогда
		
		// Производитель
		Запись.П000010000302 = СокрЛП(Запись.П000010000302);
		КодПродукции = Запись.П000010000302;
		
		Запись.П000010000303 = СокрЛП(Запись.П000010000303);
		Наименование = Запись.П000010000303;
		
		Запись.П000010000304 = СтрЗаменить(Запись.П000010000304, " ", "");
		ИНН = Запись.П000010000304;
		
		Запись.П000010000305 = СтрЗаменить(Запись.П000010000305, " ", "");
		КПП = Запись.П000010000305;
		
		СтруктураХешИдПроизводителя = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПроизводителя(КодПродукции, Наименование, 
																								ИНН, КПП);
		ЗаполнитьЗначенияСвойств(Запись, СтруктураХешИдПроизводителя);
		
		Если НЕ ЗначениеЗаполнено(Запись.ПроизводительИмпортер) Тогда		
			Запись.ПроизводительИмпортер = ОпределитьПроизводителяИмпортера(ИНН, КПП, Наименование, КодПродукции);		
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил12Раздел2" Тогда
		
		// Производитель
		Запись.П000020000302 = СокрЛП(Запись.П000020000302);
		КодПродукции = Запись.П000020000302;
		
		Запись.П000020000303 = СокрЛП(Запись.П000020000303);
		Наименование = Запись.П000020000303;
		
		Запись.П000020000304 = СтрЗаменить(Запись.П000020000304, " ", "");
		ИНН = Запись.П000020000304;
		
		Запись.П000020000305 = СтрЗаменить(Запись.П000020000305, " ", "");
		КПП = Запись.П000020000305;
		
		СтруктураХешИдПроизводителя = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПроизводителя(КодПродукции, Наименование, 
																								ИНН, КПП);
		ЗаполнитьЗначенияСвойств(Запись, СтруктураХешИдПроизводителя);		
		
		Если НЕ ЗначениеЗаполнено(Запись.ПроизводительИмпортер) Тогда		
			Запись.ПроизводительИмпортер = ОпределитьПроизводителяИмпортера(ИНН, КПП, Наименование, КодПродукции);		
		КонецЕсли;
		
		// Поставщик
		Запись.П000020000306 = СокрЛП(Запись.П000020000306);
		Наименование = Запись.П000020000306;
		
		Запись.П000020000307 = СтрЗаменить(Запись.П000020000307, " ", "");
		ИНН = Запись.П000020000307;
		
		Запись.П000020000308 = СтрЗаменить(Запись.П000020000308, " ", "");
		КПП = Запись.П000020000308;
		
		Если (НЕ ЗначениеЗаполнено(Запись.Поставщик)) и (НЕ Запись.ДокументПоступления = Неопределено) Тогда
		    Запись.Поставщик = Запись.ДокументПоступления.Контрагент;		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Запись.Поставщик) Тогда		
			Запись.Поставщик = ОпределитьПоставщика(ИНН, КПП, Наименование);		
		КонецЕсли;
		
		// Лицензии нет.
		Серия 			= "";
		Номер 			= "";		
		ДатаВыдачи 		= "";
		ДатаОкончания 	= "";
		КемВыдана 		= "";
		
		СтруктураСведений = Новый Структура;
		
		СтруктураСведений.Вставить("Наименование", 			Наименование);
		СтруктураСведений.Вставить("ИНН", 					ИНН);
		СтруктураСведений.Вставить("КПП", 					КПП);
		СтруктураСведений.Вставить("ПредставлениеАдреса", 	Неопределено);
		СтруктураСведений.Вставить("Номер", 				Номер);
		СтруктураСведений.Вставить("Серия", 				Серия);
		СтруктураСведений.Вставить("ДатаВыдачи", 			ДатаВыдачи);
		СтруктураСведений.Вставить("ДатаОкончания", 		ДатаОкончания);
		СтруктураСведений.Вставить("КемВыдана", 			КемВыдана);
		
		СтруктураХешИдПоставщика = РегламентированнаяОтчетностьАЛКО.ПолучитьВсеИдПоставщика(СтруктураСведений);
		
		ЗаполнитьЗначенияСвойств(Запись, СтруктураХешИдПоставщика);
		
	КонецЕсли;
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоЛицензии" Тогда
		
	    Запись.П000000000201 = СокрЛП(Запись.П000000000201);
		Запись.П000000000202 = СокрЛП(Запись.П000000000202);
	    Запись.П000000000203 = СокрЛП(Запись.П000000000203);
		Запись.П000000000204 = СокрЛП(Запись.П000000000204);
		Запись.П000000000205 = СокрЛП(Запись.П000000000205);
		Запись.П000000000206 = СокрЛП(Запись.П000000000206);
		Запись.П000000000207 = СокрЛП(Запись.П000000000207);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ОпределитьПроизводителяИмпортера(ИНН, КПП, ПолноеНаименование, КодПродукции) Экспорт
	
	СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции = "";
	РегламентированнаяОтчетностьПереопределяемый.СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции(
														СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции);
	СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво = "";
	РегламентированнаяОтчетностьПереопределяемый.СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво(
														СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);
			
	МетаданныеНоменклатуры = Метаданные.Справочники.Номенклатура;
	ЕстьПроизводитель = ОбщегоНазначения.ЕстьРеквизитОбъекта("Производитель", МетаданныеНоменклатуры);
	ЕстьИмпортер = ОбщегоНазначения.ЕстьРеквизитОбъекта("Импортер", МетаданныеНоменклатуры);
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	ЕстьНалоговыйНомер = ОбщегоНазначения.ЕстьРеквизитОбъекта("НалоговыйНомер", МетаданныеКонтрагенты);
	
	ВставитьКодПродукции = Ложь;
	
	ВариантЗапроса = 0;
	
	Если (НЕ ПустаяСтрока(СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции)) 
	    И (НЕ ПустаяСтрока(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво))
		И ЕстьПроизводитель И ЕстьИмпортер И ЕстьНалоговыйНомер Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПроизводителиИмпортеры.ПроизводительИмпортер Как Контрагент
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ВЫБОР
		               |			КОГДА СправочникНоменклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |				ТОГДА СправочникНоменклатура.Производитель
		               |			ИНАЧЕ СправочникНоменклатура.Импортер
		               |		КОНЕЦ КАК ПроизводительИмпортер
		               |	ИЗ
		               |		" + СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции + " КАК СведенияОбАлкогольнойПродукции
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		               |			ПО СведенияОбАлкогольнойПродукции.Номенклатура = СправочникНоменклатура.Ссылка
		               |	ГДЕ
		               |		СведенияОбАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(" 
					   + СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво + ")
		               |		И СведенияОбАлкогольнойПродукции.КодВида169 = &КодПродукции) КАК ПроизводителиИмпортеры
		               |ГДЕ
		               |	(ПроизводителиИмпортеры.ПроизводительИмпортер.ИНН = &ИНН 
					   |	ИЛИ ПроизводителиИмпортеры.ПроизводительИмпортер.НалоговыйНомер = &ИНН)
					   |	И ПроизводителиИмпортеры.ПроизводительИмпортер.НаименованиеПолное = &НаименованиеПолное";
					   
		ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
	               |	И ПроизводителиИмпортеры.ПроизводительИмпортер.КПП = &КПП", "");
					   
		ВставитьКодПродукции = Истина;
		ВариантЗапроса = 1;
					   
	ИначеЕсли ЕстьПроизводитель И ЕстьИмпортер И ЕстьНалоговыйНомер Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПроизводителиИмпортеры.ПроизводительИмпортер Как Контрагент
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ВЫБОР
		               |			КОГДА СправочникНоменклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |				ТОГДА СправочникНоменклатура.Производитель
		               |			ИНАЧЕ СправочникНоменклатура.Импортер
		               |		КОНЕЦ КАК ПроизводительИмпортер
		               |	ИЗ
		               |		Справочник.Номенклатура КАК СправочникНоменклатура
		               |			) КАК ПроизводителиИмпортеры
		               |ГДЕ
		               |	(ПроизводителиИмпортеры.ПроизводительИмпортер.ИНН = &ИНН 
					   |	ИЛИ ПроизводителиИмпортеры.ПроизводительИмпортер.НалоговыйНомер = &ИНН)
					   |	И ПроизводителиИмпортеры.ПроизводительИмпортер.НаименованиеПолное = &НаименованиеПолное";
					   
		ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
	               |	И ПроизводителиИмпортеры.ПроизводительИмпортер.КПП = &КПП", "");
		ВариантЗапроса = 2;
				   
	ИначеЕсли ЕстьНалоговыйНомер Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|Контрагенты.Ссылка Как Контрагент				
				|ИЗ
				|Справочник.Контрагенты КАК Контрагенты
				|
				|ГДЕ
				|
				|	(Контрагенты.ИНН = &ИНН ИЛИ Контрагенты.НалоговыйНомер = &ИНН)
				|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
				
		ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
	               |	И Контрагенты.КПП = &КПП", "");
				   
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|Контрагенты.Ссылка Как Контрагент				
				|ИЗ
				|Справочник.Контрагенты КАК Контрагенты
				|
				|ГДЕ
				|
				|	Контрагенты.ИНН = &ИНН
				|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
				
		ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
	               |	И Контрагенты.КПП = &КПП", "");		
		
	КонецЕсли; 
				   
	ЗапросПроизводительИмпортер = Новый Запрос;
	ЗапросПроизводительИмпортер.Текст = ТекстЗапроса;
		
	
	Если ВставитьКодПродукции Тогда
	    ЗапросПроизводительИмпортер.Параметры.Вставить("КодПродукции", КодПродукции);	
	КонецЕсли; 
	
	ЗапросПроизводительИмпортер.Параметры.Вставить("ИНН", ИНН);
	
	Если ЗначениеЗаполнено(КПП) Тогда
	    ЗапросПроизводительИмпортер.Параметры.Вставить("КПП", КПП);		
	КонецЕсли; 
	
	ЗапросПроизводительИмпортер.Параметры.Вставить("НаименованиеПолное", ПолноеНаименование);
	
	Результат = ЗапросПроизводительИмпортер.Выполнить().Выгрузить();
	
	ПроизводительИмпортер = ОпределитьКонтрагентаИзЗапроса(Результат, КПП, "Контрагент", ЕстьСтранаРегистрации);
	
	Если (ПроизводительИмпортер = Неопределено) И (НЕ ВариантЗапроса = 0) Тогда
		
		Если ЕстьНалоговыйНомер Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|Контрагенты.Ссылка Как Контрагент				
					|ИЗ
					|Справочник.Контрагенты КАК Контрагенты
					|
					|ГДЕ
					|
					|	(Контрагенты.ИНН = &ИНН ИЛИ Контрагенты.НалоговыйНомер = &ИНН)
					|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
					
			ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
		               |	И Контрагенты.КПП = &КПП", "");
					   
		Иначе
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|Контрагенты.Ссылка Как Контрагент				
					|ИЗ
					|Справочник.Контрагенты КАК Контрагенты
					|
					|ГДЕ
					|
					|	Контрагенты.ИНН = &ИНН
					|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
					
			ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
		               |	И Контрагенты.КПП = &КПП", "");		
			
		КонецЕсли; 
					   
		ЗапросПроизводительИмпортер = Новый Запрос;
		ЗапросПроизводительИмпортер.Текст = ТекстЗапроса;
		
		ЗапросПроизводительИмпортер.Параметры.Вставить("ИНН", ИНН);
		
		Если ЗначениеЗаполнено(КПП) Тогда
		    ЗапросПроизводительИмпортер.Параметры.Вставить("КПП", КПП);		
		КонецЕсли; 
		
		ЗапросПроизводительИмпортер.Параметры.Вставить("НаименованиеПолное", ПолноеНаименование);
		
		Результат = ЗапросПроизводительИмпортер.Выполнить().Выгрузить();
		
		ПроизводительИмпортер = ОпределитьКонтрагентаИзЗапроса(Результат, КПП, "Контрагент", ЕстьСтранаРегистрации);
			
	КонецЕсли;
	
	Возврат  ПроизводительИмпортер;
	
КонецФункции

Функция ОпределитьПоставщика(ИНН, КПП, ПолноеНаименование) Экспорт
	               
	СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции = "";
	РегламентированнаяОтчетностьПереопределяемый.СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции(
														СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции);
	СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво = "";
	РегламентированнаяОтчетностьПереопределяемый.СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво(
														СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);
				
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	ЕстьНалоговыйНомер = ОбщегоНазначения.ЕстьРеквизитОбъекта("НалоговыйНомер", МетаданныеКонтрагенты);
	
	ВариантЗапроса = 0;
	
	ИзмерениеПоставщик = "";
	Если СтрНайти(ВРег(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции), 
					  ВРег("РегистрСведений.")) > 0 Тогда
		ИзмерениеПоставщик = "Поставщик";
		
	ИначеЕсли СтрНайти(ВРег(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции), 
					  ВРег("Справочник.")) > 0 Тогда
		ИзмерениеПоставщик = "Владелец";
	Иначе
		// Непонятная ситуация, на всякий случай упростим запрос.
		СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции = "";
	КонецЕсли;
	
	Если (НЕ ПустаяСтрока(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции)) 
	    И (НЕ ПустаяСтрока(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво))
		И ЕстьНалоговыйНомер Тогда
				
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
           |	ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + " КАК Контрагент
           |ИЗ
           |	" + СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции 
		   + " КАК ЛицензииПоставщиковАлкогольнойПродукции
           |ГДЕ
           |	ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ("
		   + СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво + ")
           |	И (ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".ИНН = &ИНН
		   |	ИЛИ ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".НалоговыйНомер = &ИНН)
		   |	И ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".НаименованиеПолное = &НаименованиеПолное";
					   
		ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
	       |	И ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".КПП = &КПП", "");			   
		ВариантЗапроса = 1;
		
	ИначеЕсли ЕстьНалоговыйНомер Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|Контрагенты.Ссылка Как Контрагент				
				|ИЗ
				|Справочник.Контрагенты КАК Контрагенты
				|
				|ГДЕ
				|
				|	(Контрагенты.ИНН = &ИНН ИЛИ Контрагенты.НалоговыйНомер = &ИНН)
				|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
				
		ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
	               |	И Контрагенты.КПП = &КПП", "");
				   
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|Контрагенты.Ссылка Как Контрагент				
				|ИЗ
				|Справочник.Контрагенты КАК Контрагенты
				|
				|ГДЕ
				|
				|	Контрагенты.ИНН = &ИНН
				|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
				
		ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
	               |	И Контрагенты.КПП = &КПП", "");
				   
	КонецЕсли;
				   
	ЗапросПоставщика = Новый Запрос;
	ЗапросПоставщика.Текст = ТекстЗапроса;
	
	ЗапросПоставщика.Параметры.Вставить("ИНН", ИНН);
	
	Если ЗначениеЗаполнено(КПП) Тогда
	    ЗапросПоставщика.Параметры.Вставить("КПП", КПП);		
	КонецЕсли;
	
	ЗапросПоставщика.Параметры.Вставить("НаименованиеПолное", ПолноеНаименование);
	
	Результат = ЗапросПоставщика.Выполнить().Выгрузить();
	
	Поставщик = ОпределитьКонтрагентаИзЗапроса(Результат, КПП, "Контрагент", ЕстьСтранаРегистрации);
	
	Если (Поставщик = Неопределено) И (НЕ ВариантЗапроса = 0) Тогда
		
		Если ЕстьНалоговыйНомер Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|Контрагенты.Ссылка Как Контрагент				
					|ИЗ
					|Справочник.Контрагенты КАК Контрагенты
					|
					|ГДЕ
					|
					|	(Контрагенты.ИНН = &ИНН ИЛИ Контрагенты.НалоговыйНомер = &ИНН)
					|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
					
			ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
		               |	И Контрагенты.КПП = &КПП", "");
					   
		Иначе
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|Контрагенты.Ссылка Как Контрагент				
					|ИЗ
					|Справочник.Контрагенты КАК Контрагенты
					|
					|ГДЕ
					|
					|	Контрагенты.ИНН = &ИНН
					|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
					
			ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(КПП), "			   
		               |	И Контрагенты.КПП = &КПП", "");
					   
		КонецЕсли;
					   
		ЗапросПоставщика = Новый Запрос;
		ЗапросПоставщика.Текст = ТекстЗапроса;
		
		ЗапросПоставщика.Параметры.Вставить("ИНН", ИНН);
		
		Если ЗначениеЗаполнено(КПП) Тогда
		    ЗапросПоставщика.Параметры.Вставить("КПП", КПП);		
		КонецЕсли;
		
		ЗапросПоставщика.Параметры.Вставить("НаименованиеПолное", ПолноеНаименование);
		
		Результат = ЗапросПоставщика.Выполнить().Выгрузить();
		
		Поставщик = ОпределитьКонтрагентаИзЗапроса(Результат, КПП, "Контрагент", ЕстьСтранаРегистрации);
				
	КонецЕсли;
	
	Возврат  Поставщик;
	
КонецФункции

#КонецОбласти


#Область Расчет

// Производит расчет "по строке" полей ресурсов Записи. 
//
// Параметры:
//
//	 	ИдГруппы 				- Строка - Имя табличной группы, к которой относится регистр сведений.
// 		Запись 					- Запись регистра сведений	- Запись, которая обрабатывается.
//
Процедура Расчет(ИдГруппы, Запись) Экспорт

	Если ИдГруппы = "П0000100003" Тогда
		РасчетРаздел1(Запись);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область Служебные

Функция ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, ИмяМакета)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьМакетИзОбъектаАЛКО(ИмяМакета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	
КонецФункции

Функция ПолучитьНазваниеОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч = Неопределено)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьНазваниеОтчетаАЛКО(ИмяФормы, ОбъектЭтогоОтч);
	
КонецФункции

Функция ПолучитьМакетПечатнойФормы(ИмяФормыОбъекта, ИмяРаздела)
	
	ИмяПечатнойФормыРаздела = "Печатная" + Сред(Строка(ИмяФормыОбъекта), СтрНайти(Строка(ИмяФормыОбъекта), "ФормаОтчета")) 
								+ "_" + Строка(ИмяРаздела);
								
	Возврат ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, ИмяПечатнойФормыРаздела);
	
КонецФункции

Функция ЗначениеПоКлючуСтруктуры(Ключ, Структура)
	
	Значение = Неопределено;
	
	Структура.Свойство(Ключ, Значение);	
	
	Возврат Значение;
	
КонецФункции

Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках,	СтатусПроверкиОтчета = Ложь, СтруктураОшибки)
	
	РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения(ДокументСсылка, ТаблицаСообщенийОбОшибках, 
																		СтатусПроверкиОтчета, СтруктураОшибки);
			
КонецПроцедуры

Функция ПолучитьИмяРегистраСведений(ИдГруппы)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	
КонецФункции

Функция ПолучитьИндексСтраницыРегистра(ИдГруппы, ИндексСтраницы)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];
	
	Возврат СервисРегистровГруппы[ИндексСтраницы].ИндексСтраницыРегистра;

КонецФункции

Функция ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, ИндексСтраницы, БезПомеченныхНаУдаление = Истина)
	
	КоличествоСтрокНаСтранице = 0;
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];
	
	Если БезПомеченныхНаУдаление Тогда	
		Возврат СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок - СервисРегистровГруппы[ИндексСтраницы].КолвоСтрокПомНаУдаление;
	Иначе
		Возврат СервисРегистровГруппы[ИндексСтраницы].КоличествоСтрок;	
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппе(ИдГруппы, ИсключаяУдаленные = Истина)
	
	КолСтрокПоГруппе = 0;
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];			
	
	КолСтраницПоГруппе = СервисРегистровГруппы.Количество();
	
	Для Инд = 0 По КолСтраницПоГруппе - 1 Цикл
	    		
		КоличествоСтрокНастранице = СервисРегистровГруппы[Инд].КоличествоСтрок;
		
		КолСтрокПоГруппе = КолСтрокПоГруппе + КоличествоСтрокНастранице;
		
	КонецЦикла;
	
	Если ИсключаяУдаленные Тогда
		
		Для Инд = 0 По КолСтраницПоГруппе - 1 Цикл
		    		
			КоличествоСтрокНастраницеУд = СервисРегистровГруппы[Инд].КолвоСтрокПомНаУдаление;
						
			КолСтрокПоГруппе = КолСтрокПоГруппе - КоличествоСтрокНастраницеУд;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Возврат КолСтрокПоГруппе;
	
КонецФункции

Функция ДополнительныеДанныеПоАдресу(Данные, Адрес)
	
	Перем ЗначениеДанных;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ПозицияРазделителя = СтрНайти(Адрес, ".");
		Если ПозицияРазделителя = 0 Тогда
			АдресВерхнегоУровня = СокрЛП(Адрес);
			Данные.Свойство(АдресВерхнегоУровня, ЗначениеДанных);
		Иначе
			АдресВерхнегоУровня = СокрЛП(Лев(Адрес, ПозицияРазделителя - 1));
			ДанныеВерхнегоУровня = Неопределено;
			Если Данные.Свойство(АдресВерхнегоУровня, ДанныеВерхнегоУровня) Тогда
				АдресСледующегоУровня = СокрЛП(Сред(Адрес, ПозицияРазделителя + 1));
				ЗначениеДанных = ДополнительныеДанныеПоАдресу(ДанныеВерхнегоУровня, АдресСледующегоУровня);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеДанных;
	
КонецФункции

Функция СтрЗначениеПоКлючуСтруктуры(Ключ, Структура)
	
	Значение = Неопределено;
	
	Если Структура.Свойство(Ключ, Значение) Тогда 
		Возврат Строка(Значение);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормыОбъекта)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	ИмяМакета = "СхемаВыгрузки" + СтруктураРеквизитовФормы.мВерсияФормата;
		
	Макет = ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

#КонецОбласти 


#Область ОбработкаПриЗаполнении

Процедура ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистра, СтрокаТЗ) Экспорт
	
	ОбработкаЗаписи(ИмяРегистра, СтрокаТЗ);

КонецПроцедуры

Функция ОпределитьКонтрагентаИзЗапроса(Результат, КПП, ИмяКолонкиКонтрагент, ЕстьСтранаРегистрации)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ОпределитьКонтрагентаИзЗапросаАЛКО(Результат, КПП, ИмяКолонкиКонтрагент, ЕстьСтранаРегистрации);
	
КонецФункции

#КонецОбласти


#Область СлужебныеРасчет

Процедура РасчетРаздел1(Запись)
	
	Запись.П000010000306 = ?(Запись.П000010000306 = Неопределено, 0, Запись.П000010000306);
	
	Запись.П000010000307 = ?(Запись.П000010000307 = Неопределено, 0, Запись.П000010000307);
	Запись.П000010000308 = ?(Запись.П000010000308 = Неопределено, 0, Запись.П000010000308);
	Запись.П000010000309 = ?(Запись.П000010000309 = Неопределено, 0, Запись.П000010000309);
	
	Запись.П000010000311 = ?(Запись.П000010000311 = Неопределено, 0, Запись.П000010000311);
	Запись.П000010000312 = ?(Запись.П000010000312 = Неопределено, 0, Запись.П000010000312);
	
	Запись.П000010000314 = ?(Запись.П000010000314 = Неопределено, 0, Запись.П000010000314);
	Запись.П000010000315 = ?(Запись.П000010000315 = Неопределено, 0, Запись.П000010000315);
	Запись.П000010000316 = ?(Запись.П000010000316 = Неопределено, 0, Запись.П000010000316);
		
	Запись.П000010000310 = Запись.П000010000307 + Запись.П000010000308
										+ Запись.П000010000309;
	
	Запись.П000010000313 = Запись.П000010000310 + Запись.П000010000311
										+ Запись.П000010000312;
	
	Запись.П000010000317 = Запись.П000010000314 + Запись.П000010000315 
										+ Запись.П000010000316;
							
	Запись.П000010000318 = Запись.П000010000306 + Запись.П000010000313
										- Запись.П000010000317;

КонецПроцедуры
	
#КонецОбласти 


#Область ПроверитьВыгрузку 

Функция ПроверитьЗаполнениеТитульный(СтатусПроверки)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьЗаполнениеТитульный(
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, 
							СтатусПроверки, ПараметрыВыгрузки, Ложь);
		
КонецФункции

Функция ПроверитьЗаполнениеОП(ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, 
							СтруктураСведенийПроверки, СведенияОбОП = Неопределено)
							
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьЗаполнениеОП_АЛКО(
							ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверки, 
							СтруктураСведенийПроверки, СведенияОбОП);

КонецФункции

Функция ПроверкаИННКППвСтрокахТаблиц(ДокументСсылка, ТаблицаСообщенийОбОшибках,
									СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент)
									
		
	// В графе ИНН помимо собственно ИНН РФ (10 или 12 цифр) может указываться
	// Белоруссия - УНП - 9 цифр
	// Казахстан  - РНН или БИН или ИИН - все коды 12 цифр
	// Кыргызстан - ИНН - 14 цифр
	// Армения    - УНН - 8 цифр.
		
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверкаИННКППвСтрокахТаблицАЛКО(ДокументСсылка,  
									ТаблицаСообщенийОбОшибках, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент);
	    
КонецФункции

Процедура ПроверитьЗаполнениеРаздел1(СтатусПроверки)
	
	КПП_НеОбязателен = (Число(Лев(СтруктураРеквизитовФормы.мВерсияФормата, 3)) >= 431);
	ИмяРаздела = "Раздел1";
	СтрВКакомРазделе = "В Разделе 1";
	ПроверятьНаПустоту = Истина;
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
	
	// Инициация структуры Производителей.
	ДанныеПроизводителей = Новый Структура;
	СчетчикИДПроизвИмп = 0;
	// Инициация структуры Производителей из Раздела 1.
	ДанныеДвижений = Новый Структура;
	// Инициация структуры ОП.				
	ДанныеОП_Раздел1 = Новый Структура;
	
	ДанныеРаздела = ТаблицаСтраницыРаздел1;
	
	СервисРегистров = СтруктураСервисРегистров["СведенияРеглОтчетАлкоПрил12Раздел1"];
		
	ЕстьЗаполненныйЛистРаздела = Ложь;
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;
		НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерЛиста);
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		ДанныеОП   = ДанныеЛиста.ОбособленноеПодразделение;
		
		СтруктураСведенийПроверки = Новый Структура;						
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", 	ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", 			ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", 			НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", 			ЛистРаздела);
		СтруктураСведенийПроверки.Вставить("КПП_НеОбязателен", 		КПП_НеОбязателен);	
		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", 	ПроверятьНаПустоту);
		СведенияОбОП = Неопределено;
		
		ПроверитьЗаполнениеОП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
								СтруктураСведенийПроверки, СведенияОбОП);
				
		
		Если НЕ ПустаяСтрока(ДанныеОП) и (НЕ СокрЛП(ДанныеОП) = "Заполнить") Тогда
			ЕстьЗаполненныйЛистРаздела = Истина;
		КонецЕсли;
		
		ИндексСтраницыРегистраРаздел1 = СервисРегистров[НомерЛиста - 1].ИндексСтраницыРегистра;
		
		ИдОП = "";
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") 
			И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда
						
			Если ЗначениеЗаполнено(СведенияОбОП.КПП) или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда
									
				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);
				
				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если ДанныеОП_Раздел1.Свойство(ИдОП) Тогда
					
				    // Такое ОП уже есть.
					ЛистПовтора = ДанныеОП_Раздел1[ИдОП].НомерЛистаРаздел1;
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = "В Разделе 1 декларации страницы №№ " + ЛистПовтораСтроковый + ", " 
										+ НомерЛистаСтроковый + "  заполнены по одному и тому же обособленному подразделению: " 
										+ Наименование_ОП + ?(НЕ ПустаяСтрока(КПП_ОП), ", (КПП " + КПП_ОП + ")", "");
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Раздел1");
					СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
                						
				Иначе
					
					ДанныеОП_Раздел1.Вставить(ИдОП, Новый Структура);
					
					КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);
					
					ДанныеОП_Раздел1[ИдОП].Вставить("ОП", КопияСведенияОбОП);
					
					ДанныеОП_Раздел1[ИдОП].Вставить("НомерЛистаРаздел1", НомерЛиста);
					
					ДанныеОП_Раздел1[ИдОП].Вставить("ИндексСтраницыРегистраРаздел1", ИндексСтраницыРегистраРаздел1);
					
					ДанныеОП_Раздел1[ИдОП].Вставить("КолСтрокПоРазделу1", 0);
					ДанныеОП_Раздел1[ИдОП].Вставить("КолСтрокПоРазделу2", 0);
					
					ДанныеДвижений.Вставить(ИдОП, Новый Структура);
										
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка заполнения таблиц декларации.
		ДопДанные = Неопределено;		
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
			ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство(ИдГруппы, ДопДанные);
		КонецЕсли;
		
		ПроверитьЗаполнениеТаблицыРаздел1(СтатусПроверки, ИдГруппы, ДопДанные, 
													НомерЛиста, ИдОП, ЕстьЗаполненныйЛистРаздела);
		
		КолТабСообщений = ТаблицаСообщений.Количество();
			
		Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
			
			НетОшибокПроверки = Ложь;
		    ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			
		КонецЕсли; 
		
		Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
			
			ОбработаноСтрок = НужноОбработатьСтрок;
			ТекстОписанияОшибки = "Найдено " + МаксимальноеКоличествоОшибок + " и более ошибок. Дальнейшая проверка прекращена!";
					
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Раздел1");
			СтруктураОшибки.Вставить("Показатель", Неопределено);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "МногоОшибок");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
            
		    Возврат;
		КонецЕсли;
							
	КонецЦикла;
		
	Если НЕ ЕстьЗаполненныйЛистРаздела Тогда
		
		ТекстОписанияОшибки = "Не заполнен ни один лист декларации в Разделе 1!";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Раздел1");
		СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
		СтруктураОшибки.Вставить("ЛистРаздела", 1);
		СтруктураОшибки.Вставить("ТипОшибки", "НетДанныхРаздел1");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
        
	КонецЕсли;
		
КонецПроцедуры

Функция ЭтоТочноРоссийскийКонтрагент(Контрагент, ЕстьСтранаРегистрацииВКонфигурации = Неопределено, 
									СтранаРоссия = Неопределено, ИНН, КПП)
	Возврат РегламентированнаяОтчетностьАЛКО.ЭтоТочноРоссийскийКонтрагент(
								Контрагент, ЕстьСтранаРегистрацииВКонфигурации, СтранаРоссия, ИНН, КПП);								
									
КонецФункции

Процедура ПроверитьЗаполнениеТаблицыРаздел1(СтатусПроверки, ИдГруппы, ДополнительныеДанные, 
											НомерЛиста, ИдОП = "", ЕстьЗаполненныйЛистРаздела = Ложь)
	
	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ПрефиксИмени = ИдГруппы;
	
	ИмяТаблицы = Неопределено;
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	
	СтранаРоссия = Неопределено;
	Если ЕстьСтранаРегистрации Тогда
	    СтранаРоссия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");		
	КонецЕсли;
	
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));
		
	// Опеределим регистр сведений
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	
	ДанныеДвиженийПоОП = Неопределено;
	Если ЕстьИдОП Тогда	
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеОП_Раздел1[ИдОП].Вставить("ИДДокИндСтраницыРаздел1", ИДДокИндСтраницы);
	КонецЕсли;
	
	ТекстЗапросаДанныхСтрок = "
	|ВЫБРАТЬ ПЕРВЫЕ 3000
	|	РегистрСведенийАлкоПрил12Раздел1.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистраСведений + " КАК РегистрСведенийАлкоПрил12Раздел1
	|ГДЕ
	|	РегистрСведенийАлкоПрил12Раздел1.ИДДокИндСтраницы = &ИДДокИндСтраницы
	|   И РегистрСведенийАлкоПрил12Раздел1.Активно = Истина
	|	И РегистрСведенийАлкоПрил12Раздел1.ИндексСтроки > &ТекущийИндексСтроки";
	
	ЗапросДанныхСтрок = Новый Запрос;
	ЗапросДанныхСтрок.Текст = ТекстЗапросаДанныхСтрок;
	ТекущийИндексСтроки = 0;
	КолСтрокРаздел1 = 0;
	
	// Зафиксируем имена ключевых полей.
	ИмяКодаВидаПродукции = ПрефиксИмени + "02";
	ИмяНаименованияПроизводителя  = ПрефиксИмени + "03";
	ИмяИННПроизводителя = ПрефиксИмени + "04";
	ИмяКПППроизводителя = ПрефиксИмени + "05";
	
	Пока Истина Цикл
	
		ЗапросДанныхСтрок.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
		ЗапросДанныхСтрок.Параметры.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
						
		РезЗапросаДанных = ЗапросДанныхСтрок.Выполнить();
		
		Если РезЗапросаДанных.Пустой() Тогда		
			Прервать;			
		Иначе			
			СтрокаДекларации = РезЗапросаДанных.Выбрать();		
		КонецЕсли; 
				
		Пока СтрокаДекларации.Следующий() Цикл
					
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокРаздел1 = КолСтрокРаздел1 + 1;
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерСтроки);
			
			СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "02"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "03"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "08"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "09"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "10"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "11"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "12"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "13"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "14"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "15"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "16"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "17"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "18"]);
			Если НЕ СтрокаЗаполнена Тогда						  
				Продолжить;
			КонецЕсли;
					
			ЕстьЗаполненныйЛистРаздела = Истина;
			
			ИмяГрафы = ПрефиксИмени + "02";
			ИмяПоказателя = ПрефиксИмени + "02_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
			КодВидаПродукции = ЗначениеГрафы;
			Если ПустаяСтрока(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 1 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел1");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетКодаПродукции");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
         
			ИначеЕсли СтрДлина(ЗначениеГрафы) <> 3 Тогда
				ТекстОписанияОшибки = "В Разделе 1 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", неверно задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел1");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "КодПродукцииНе3");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				
			КонецЕсли;
			
			ИмяГрафы = ПрефиксИмени + "03";
			ИмяПоказателя = ПрефиксИмени + "03_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
			НаименованиеПроизводителя = ЗначениеГрафы;
			Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 1 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указано наименование производителя/импортера!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел1");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетНаименованияПроизводителя");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль ИНН-КПП.
			
			ИмяГрафыИНН = ПрефиксИмени + "04";
			ИмяПоказателяИНН = ПрефиксИмени + "04_" + НомерСтрокиСтроковый;
			ИННПроизводителя = СтрокаДекларации[ИмяГрафыИНН];
			ИНН = СокрЛП(ИННПроизводителя);
			ИННПроизводителя = ИНН;
			ДлинаИНН = СтрДлина(ИНН);
			
			ИмяГрафыКПП = ПрефиксИмени + "05";
			ИмяПоказателяКПП = ПрефиксИмени + "05_" + НомерСтрокиСтроковый;
			КПППроизводителя = СтрокаДекларации[ИмяГрафыКПП];
			КПП = СокрЛП(КПППроизводителя);
			КПППроизводителя = КПП;
			
			ИмяРаздела = "Раздел1";
			СтрВКакомРазделе = "В Разделе 1";
			РодПадежЧейИННКПП = "производителя/импортера";
						 
			РоссийскийКонтрагент = ЭтоТочноРоссийскийКонтрагент(СтрокаДекларации.ПроизводительИмпортер, 
											ЕстьСтранаРегистрации, СтранаРоссия, ИНН, КПП);			
			
			МожетБытьПустойИНН = Ложь;
			МожетБытьПустойКПП = Истина;
			
			СтруктураСведенийИННКПП = Новый Структура;
			
			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", 				ИмяРаздела);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерЛиста", 				НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", 	НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", 				ИмяТаблицы);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", 		ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", 					ИНН);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", 		ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", 					КПП);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", 		РодПадежЧейИННКПП);
				
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", 		МожетБытьПустойИНН);	
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", 		МожетБытьПустойКПП);
			
	
			ПроверкаИННКППвСтрокахТаблиц(ДокументСсылкаАлкоОтчет,  
										ТаблицаСообщений, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент);
						
			Если РоссийскийКонтрагент = Неопределено Тогда		
				РоссийскийКонтрагент = (ДлинаИНН = 12) или (ДлинаИНН = 10);			
			КонецЕсли;
			
			//
			////////////////////////////////////////////////////////////////////////////////
					
			// Заполняем Таблицу Производителей раздела 1.
			Если ЕстьИдОП Тогда
							    
				ИдКодПродПроизв 	= "Х" + СтрокаДекларации.ХешИдКодПродПроизв;				
				ИдПроизв 			= "Х" + СтрокаДекларации.ХешИдПроизводителя;
				
				Если НЕ ПустаяСтрока(КодВидаПродукции) Тогда
					
					// Вначале заполняем справочник Производителей.
					Если НЕ ДанныеПроизводителей.Свойство(ИдПроизв) Тогда
						
						СчетчикИДПроизвИмп = СчетчикИДПроизвИмп + 1;
						ДанныеПроизводителей.Вставить(ИдПроизв, Новый Структура);
						ДанныеПроизводителей[ИдПроизв].Вставить("ИДПроизвИмп", 		СчетчикИДПроизвИмп);
						ДанныеПроизводителей[ИдПроизв].Вставить("П000000000004", 	НаименованиеПроизводителя);
						ДанныеПроизводителей[ИдПроизв].Вставить("П000000000005", 	ИННПроизводителя);
						ДанныеПроизводителей[ИдПроизв].Вставить("П000000000006", 	КПППроизводителя);
						
					КонецЕсли;
					
					// Ведущие нули в строке вызывают ошибку при попытке назначения ключем.
					КодВидаПродукцииКлюч = "Х" + КодВидаПродукции;
					
					Если НЕ ДанныеДвиженийПоОП.Свойство(КодВидаПродукцииКлюч) Тогда
						
						ДанныеДвиженийПоОП.Вставить(КодВидаПродукцииКлюч, Новый Структура);
						ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].Вставить("КоличествоСтрокРаздел2ПоКоду", 0);
						ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].Вставить("КодПродПроизв", Новый Структура);
						
					КонецЕсли;
					ДанныеДвижений_ПоОП_ПоКоду = ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].КодПродПроизв;
					
					Если ДанныеДвижений_ПоОП_ПоКоду.Свойство(ИдКодПродПроизв) Тогда
						
						// Проверка на дублирование.
					    СтрокаПовтора = ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].НомерСтрокиРаздел1;
						СтрокаПовтораСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(СтрокаПовтора);
						
						АдресДубликата = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;
						
						ТекстОписанияОшибки = "В Разделе 1 декларации, на листе " + НомерЛистаСтроковый  
										+ ", повторяются сочетания кода вида продукции и реквизитов производителя/импортера в строках " 
										+ СтрокаПовтораСтроковый + " и " + НомерСтрокиСтроковый + "!";
								
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", "Раздел1");
						СтруктураОшибки.Вставить("Показатель", АдресДубликата);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "ПовторСочетанияКодПроизводительРаздел1");
						
						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				 
					Иначе
						
						ДанныеДвижений_ПоОП_ПоКоду.Вставить(ИдКодПродПроизв, Новый Структура);
						// Заполняем Движения.
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("НомерСтрокиРаздел1", 	НомерСтроки);						
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("ИдПроизв", 			ИдПроизв);
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("КоличествоСтрокРаздел2ПоКодПродПроизв", 0);
						ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("Поставщики", 			Новый Структура);
						
						// Нет смысла собирать данные по Движениям, если есть ошибки заполнения.
						Если ТаблицаСообщений.Количество() = 0 Тогда
														
							// ИДПроизвИмп.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("ИДПроизвИмп", 		 ДанныеПроизводителей[ИдПроизв].ИДПроизвИмп);
							// Остаток на начало.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000006",		 СтрокаДекларации[ПрефиксИмени + "06"]);
							// Поступление (закупки) от организаций- производителей.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000007",		 СтрокаДекларации[ПрефиксИмени + "07"]);
							// Поступление (закупки) от организаций оптовой торговли.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000008",		 СтрокаДекларации[ПрефиксИмени + "08"]);
							// Поступление (закупки) по импорту.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000009",		 СтрокаДекларации[ПрефиксИмени + "09"]);
							// Поступление (закупки) итого.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000010",		 СтрокаДекларации[ПрефиксИмени + "10"]);
							// Поступление (возврат от покупателей).
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000011",		 СтрокаДекларации[ПрефиксИмени + "11"]);
							// Прочие поступления.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000012",		 СтрокаДекларации[ПрефиксИмени + "12"]);
							// Поступление всего.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000013",		 СтрокаДекларации[ПрефиксИмени + "13"]);
							// Расход (объем розничной продажи).
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000014",		 СтрокаДекларации[ПрефиксИмени + "14"]);
							// Прочий расход.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000015",		 СтрокаДекларации[ПрефиксИмени + "15"]);
							// Возврат поставщику.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000016",		 СтрокаДекларации[ПрефиксИмени + "16"]);
							// Расход всего.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000017",		 СтрокаДекларации[ПрефиксИмени + "17"]);
							// Остаток продукции на конец отчетного периода - всего.
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Вставить("П100000000018",		 СтрокаДекларации[ПрефиксИмени + "18"]);
													
						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЕсли;
				 
			    
			КонецЕсли;
			
			КолТабСообщений = ТаблицаСообщений.Количество();
			
			Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
				НетОшибокПроверки = Ложь;
			    ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли; 
			
			Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
			    Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 1.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
					
	КонецЦикла; 
	
	Если ЕстьИдОП Тогда			
		ДанныеОП_Раздел1[ИдОП].Вставить("КолСтрокПоРазделу1", КолСтрокРаздел1);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеРаздел2(СтатусПроверки)
	
	КПП_НеОбязателен = (Число(Лев(СтруктураРеквизитовФормы.мВерсияФормата, 3)) >= 431);
	ИмяРаздела = "Раздел2";
	СтрВКакомРазделе = "В Разделе 2";
	ПроверятьНаПустоту = Ложь; // Раздел 2 может не заполняться
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы22;
	
	ДанныеРаздела = ТаблицаСтраницыРаздел2;
	
	// Данные обособленных подразделений по Разделу 2.
	ДанныеОП_Раздел2 = Новый Структура;
	
	ДанныеПоставщиков = Новый Структура;
	СчетчикИдПоставщиков = 0;
	
	ДанныеЛицензий = Новый Структура;
	СчетчикИдЛицензий = 0;
	
	СервисРегистров = СтруктураСервисРегистров["СведенияРеглОтчетАлкоПрил12Раздел2"];
			
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл
		
		НомерЛиста = НомерЛиста + 1;
		НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерЛиста);
		
		ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
		
		ДанныеОП   = ДанныеЛиста.ОбособленноеПодразделение;
		
		ЗаполненоОП = НЕ ПустаяСтрока(ДанныеОП) и (НЕ СокрЛП(ДанныеОП) = "Заполнить");
		ЕстьЗаполненныеСтроки = Ложь;
				
		СведенияОбОП = Неопределено;
		
		КолАктивныхСтрокНаСтранице = ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, НомерЛиста - 1, Истина);
		ПроверятьНаПустоту = (КолАктивныхСтрокНаСтранице > 0);
		
		СтруктураСведенийПроверки = Новый Структура;						
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", 	ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", 			ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", 			НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", 			ЛистРаздела);
		СтруктураСведенийПроверки.Вставить("КПП_НеОбязателен", 		КПП_НеОбязателен);	
		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", 	ПроверятьНаПустоту);
				
		ПроверитьЗаполнениеОП(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, 
								СтруктураСведенийПроверки, СведенияОбОП);
		
							
		ИндексСтраницыРегистраРаздел2 = СервисРегистров[НомерЛиста - 1].ИндексСтраницыРегистра;
		
		ИдОП = "";
		НужноПерекрестноПроверятьПроизводителей = Истина;
		
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") 
			И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда
						
			Если ЗначениеЗаполнено(СведенияОбОП.КПП) или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда
									
				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);
				
				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если ДанныеОП_Раздел2.Свойство(ИдОП) Тогда
					
				    // Такое ОП уже есть.
					ЛистПовтора = ДанныеОП_Раздел2[ИдОП];
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = "В Разделе 2 декларации страницы №№ " + ЛистПовтораСтроковый + ", " 
										+ НомерЛистаСтроковый + "  заполнены по одному и тому же обособленному подразделению: " 
										+ Наименование_ОП + ?(НЕ ПустаяСтрока(КПП_ОП), ", (КПП " + КПП_ОП + ")", "");
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Раздел2");
					СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				  
				Иначе
				    ДанныеОП_Раздел2.Вставить(ИдОП, НомерЛиста);					
				КонецЕсли;
				
				// Контроль на наличие в Разделе 1 всех ОП из Раздела 2.
				Если НЕ ДанныеОП_Раздел1.Свойство(ИдОП) Тогда
				    // Такого ОП нет в Разделе 1.
					
					ТекстОписанияОшибки = "В Разделе 2 декларации, на странице № " + НомерЛистаСтроковый 
										+ ", заполнены данные по обособленному подразделению " + Наименование_ОП 
										+ "," + ?(НЕ ПустаяСтрока(КПП_ОП), ", (КПП " + КПП_ОП + ")", "") 
										+ " но это обособленное подразделение не найдено в Разделе 1!";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", "Раздел2");
					СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеНайденОП");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
				   
					// ОП не найдено в Разделе 1 - непонятно со страницей какого ОП Раздела 1 сверять.
					НужноПерекрестноПроверятьПроизводителей = Ложь;
				Иначе
					ДанныеОП_Раздел1[ИдОП].Вставить("НомерЛистаРаздел2", НомерЛиста);
					ДанныеОП_Раздел1[ИдОП].Вставить("ИндексСтраницыРегистраРаздел2", ИндексСтраницыРегистраРаздел2);
				КонецЕсли;
			Иначе
				// ОП не заполнено - непонятно со страницей какого ОП Раздела 1 сверять.
				НужноПерекрестноПроверятьПроизводителей = Ложь;
			КонецЕсли;
		Иначе
			// ОП не заполнено - непонятно со страницей какого ОП Раздела 1 сверять.
			НужноПерекрестноПроверятьПроизводителей = Ложь;
		КонецЕсли;
		
		// Проверка заполнения таблиц декларации.
		ДопДанные = Неопределено;
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура") Тогда
			ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство(ИдГруппы, ДопДанные);
		КонецЕсли;
		
		ПроверитьЗаполнениеТаблицыРаздел2(СтатусПроверки, ИдГруппы, ДопДанные, НомерЛиста, 
											ИдОП, ЕстьЗаполненныеСтроки, НужноПерекрестноПроверятьПроизводителей);
		
		// Раздел 2 не обязателен к заполнению, но если есть заполненные строки при незаполненном ОП - нужно выдать ошибку.
		Если ЕстьЗаполненныеСтроки и (НЕ ЗаполненоОП)  Тогда
		    ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", не указаны реквизиты обособленного подразделения!";
					
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Раздел2");
			СтруктураОшибки.Вставить("Показатель", "ОбособленноеПодразделение");
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "НетДанныхОП");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			
		КонецЕсли; 
		
		КолТабСообщений = ТаблицаСообщений.Количество();
		
		Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
			
			НетОшибокПроверки = Ложь;
		    ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			
		КонецЕсли; 
		
		Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
			
			ОбработаноСтрок = НужноОбработатьСтрок;
			ТекстОписанияОшибки = "Найдено " + МаксимальноеКоличествоОшибок + " и более ошибок. Дальнейшая проверка прекращена!";
					
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
			СтруктураОшибки.Вставить("Раздел", "Раздел2");
			СтруктураОшибки.Вставить("Показатель", Неопределено);
			СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
			СтруктураОшибки.Вставить("ТипОшибки", "МногоОшибок");
			
			СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			
		    Возврат;
			
		КонецЕсли;
								
	КонецЦикла;
	
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыРаздел2(СтатусПроверки, ИдГруппы, ДополнительныеДанные, НомерЛиста, ИдОП = "", 
									ЕстьЗаполненныйЛистРаздела = Ложь, НужноПерекрестноПроверятьПроизводителей = Истина)
	
	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;
	
	ПрефиксИмени = ИдГруппы;
	
	ИмяТаблицы = Неопределено;
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	
	СтранаРоссия = Неопределено;
	Если ЕстьСтранаРегистрации Тогда
	    СтранаРоссия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");		
	КонецЕсли;
	
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));
	
	// Опеределим регистр сведений.
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	
	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);
	
	ДанныеДвиженийПоОП = Неопределено;
	Если НужноПерекрестноПроверятьПроизводителей Тогда	
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеОП_Раздел1[ИдОП].Вставить("ИДДокИндСтраницыРаздел2", ИДДокИндСтраницы);
	КонецЕсли;
		
	ТекстЗапросаДанныхСтрок = "
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СведенияРеглОтчетАлкоПрил12Раздел2.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистраСведений + " КАК СведенияРеглОтчетАлкоПрил12Раздел2
	|ГДЕ
	|	СведенияРеглОтчетАлкоПрил12Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
	|   И СведенияРеглОтчетАлкоПрил12Раздел2.Активно = Истина
	|	И СведенияРеглОтчетАлкоПрил12Раздел2.ИндексСтроки > &ТекущийИндексСтроки";
	
	ЗапросДанныхСтрок = Новый Запрос;
	ЗапросДанныхСтрок.Текст = ТекстЗапросаДанныхСтрок;
	ТекущийИндексСтроки = 0;
	КолСтрокРаздел2 = 0;
	
	Пока Истина Цикл
	
		ЗапросДанныхСтрок.Параметры.Вставить("ИДДокИндСтраницы", ИДДокИндСтраницы);
		ЗапросДанныхСтрок.Параметры.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
						
		РезЗапросаДанных = ЗапросДанныхСтрок.Выполнить();
		
		Если РезЗапросаДанных.Пустой() Тогда		
			Прервать;			
		Иначе			
			СтрокаДекларации = РезЗапросаДанных.Выбрать();		
		КонецЕсли;
		
	
		Пока СтрокаДекларации.Следующий() Цикл
						
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокРаздел2 = КолСтрокРаздел2 + 1;
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКО.СтрокаЧГ0(НомерСтроки);
			
			СтрокаЗаполнена = ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "02"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "03"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "04"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "05"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "06"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "07"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "08"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "09"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "10"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "11"])
			              ИЛИ ЗначениеЗаполнено(СтрокаДекларации[ПрефиксИмени + "12"]);
			Если НЕ СтрокаЗаполнена Тогда			
				Продолжить;
			КонецЕсли;
					
			ЕстьЗаполненныйЛистРаздела = Истина;
			
			ИмяГрафы = ПрефиксИмени + "02";
			ИмяПоказателя = ПрефиксИмени + "02_" + НомерСтрокиСтроковый;
			КодВидаПродукции = СокрЛП(СтрокаДекларации[ИмяГрафы]);
			
			Если ПустаяСтрока(КодВидаПродукции) Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетКодаПродукции");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			 
			ИначеЕсли СтрДлина(КодВидаПродукции) <> 3 Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", неверно задан код вида продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "КодПродукцииНе3");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			  
			КонецЕсли;
			
			ИмяГрафы = ПрефиксИмени + "03";
			ИмяПоказателя = ПрефиксИмени + "03_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
			НаименованиеПроизводителя = СокрЛП(ЗначениеГрафы);
			ИмяНаименованиеПроизводителя = ИмяПоказателя;
	        Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указано наименование производителя/импортера!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетНаименованияПроизводителя");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			   
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль ИНН-КПП.
			
			ИмяГрафыИНН = ПрефиксИмени + "04";
			ИмяПоказателяИНН = ПрефиксИмени + "04_" + НомерСтрокиСтроковый;
			ИНН = СокрЛП(СтрокаДекларации[ИмяГрафыИНН]);
			ИННПроизводителя = ИНН;
			ДлинаИНН = СтрДлина(ИНН);
			
			ИмяГрафыКПП = ПрефиксИмени + "05";
			ИмяПоказателяКПП = ПрефиксИмени + "05_" + НомерСтрокиСтроковый;
			КПП = СокрЛП(СтрокаДекларации[ИмяГрафыКПП]);
			КПППроизводителя = КПП;
							
			ИмяРаздела = "Раздел2";
			СтрВКакомРазделе = "В Разделе 2";
			РодПадежЧейИННКПП = "производителя/импортера";
			
			РоссийскийКонтрагент = ЭтоТочноРоссийскийКонтрагент(СтрокаДекларации.ПроизводительИмпортер, 
											ЕстьСтранаРегистрации, СтранаРоссия, ИНН, КПП); 
			
			МожетБытьПустойИНН = Ложь;
			МожетБытьПустойКПП = Истина;
			
			СтруктураСведенийИННКПП = Новый Структура;
			
			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", 				ИмяРаздела);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерЛиста", 				НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", 	НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", 				ИмяТаблицы);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", 		ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", 					ИНН);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", 		ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", 					КПП);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", 		РодПадежЧейИННКПП);
				
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", 		МожетБытьПустойИНН);	
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", 		МожетБытьПустойКПП);
			
	
			ПроверкаИННКППвСтрокахТаблиц(ДокументСсылкаАлкоОтчет,  
										ТаблицаСообщений, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент);
						
			Если РоссийскийКонтрагент = Неопределено Тогда		
				РоссийскийКонтрагент = (ДлинаИНН = 12) или (ДлинаИНН = 10);			
			КонецЕсли;
			
			//
			////////////////////////////////////////////////////////////////////////////////
	       
			// Контроль по наличию Производителей/Импортеров из Раздела 2 в Разделе 1.
			НетОшибкиПоКодуПродукцииПроизводителю = Истина;
			
			Если НужноПерекрестноПроверятьПроизводителей Тогда
								
				ИдКодПродПроизв = "Х" + СтрокаДекларации.ХешИдКодПродПроизв;
				
				Если НЕ ПустаяСтрока(КодВидаПродукции) Тогда
					
					// Ведущие нули в строке вызывают ошибку при попытке назначения ключем.
					КодВидаПродукцииКлюч = "Х" + КодВидаПродукции;
					
					Если НЕ ДанныеДвиженийПоОП.Свойство(КодВидаПродукцииКлюч) Тогда						
						НетОшибкиПоКодуПродукцииПроизводителю = Ложь;
					Иначе
						ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].КоличествоСтрокРаздел2ПоКоду = ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].КоличествоСтрокРаздел2ПоКоду + 1;
						ДанныеДвижений_ПоОП_ПоКоду = ДанныеДвиженийПоОП[КодВидаПродукцииКлюч].КодПродПроизв;
					КонецЕсли;
					
					Если НетОшибкиПоКодуПродукцииПроизводителю Тогда
					    Если НЕ ДанныеДвижений_ПоОП_ПоКоду.Свойство(ИдКодПродПроизв) Тогда
						    НетОшибкиПоКодуПродукцииПроизводителю = Ложь;
						Иначе
							ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].КоличествоСтрокРаздел2ПоКодПродПроизв = ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].КоличествоСтрокРаздел2ПоКодПродПроизв + 1;
					    КонецЕсли;
					КонецЕсли; 
					
					Если НЕ НетОшибкиПоКодуПродукцииПроизводителю Тогда
					
						// Нет по текущему коду продукции такого производителя в Разделе 1 по тому же ОП.
						ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", " 
												+ "указан Производитель/Импортер " + НаименованиеПроизводителя + " (" 
												+ ?(ПустаяСтрока(ИННПроизводителя),"ИНН незаполнен" ,"ИНН "+ ИННПроизводителя)
												+ ?(ПустаяСтрока(КПППроизводителя), "", ", КПП " + КПППроизводителя) 
												+ "), которого нет по тому же обособленному подразделению в Разделе 1 для кода продукции " 
												+ КодВидаПродукции + ".";
								
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", "Раздел2");
						СтруктураОшибки.Вставить("Показатель", ИмяНаименованиеПроизводителя);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "НетСочетанияКодПроизводительРаздел2");
						
						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			    					
					КонецЕсли; 
																	
				КонецЕсли;
				
			КонецЕсли;
			
			ИмяГрафы = ПрефиксИмени + "06";
			ИмяПоказателя = ПрефиксИмени + "06_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
			НаименованиеПоставщика = ЗначениеГрафы;
			Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указано наименование поставщика!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетНаименованияПоставщика");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			    
			КонецЕсли;
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Контроль ИНН-КПП
			
			ИмяГрафыИНН = ПрефиксИмени + "07";
			ИмяПоказателяИНН = ПрефиксИмени + "07_" + НомерСтрокиСтроковый;
			ИНН = СокрЛП(СтрокаДекларации[ИмяГрафыИНН]);
			ИННПоставщика = ИНН;
			ДлинаИНН = СтрДлина(ИНН);
			
			ИмяГрафыКПП = ПрефиксИмени + "08";
			ИмяПоказателяКПП = ПрефиксИмени + "08_" + НомерСтрокиСтроковый;
			КПП = СокрЛП(СтрокаДекларации[ИмяГрафыКПП]);
			КПППоставщика = КПП;
			
			ИмяРаздела = "Раздел2";
			СтрВКакомРазделе = "В Разделе 2";
			РодПадежЧейИННКПП = "поставщика";
			
			РоссийскийКонтрагент = ЭтоТочноРоссийскийКонтрагент(СтрокаДекларации.Поставщик, 
											ЕстьСтранаРегистрации, СтранаРоссия, ИНН, КПП);
											
			// По схеме выгрузки предполагается ЮЛ или ФЛ РФ, но пока оставим
			// возможность заполнения поставщиками из ТС - не резидентами РФ.			
			МожетБытьПустойИНН = Ложь;
			МожетБытьПустойКПП = Истина;
			
			СтруктураСведенийИННКПП = Новый Структура;
			
			СтруктураСведенийИННКПП.Вставить("ИмяРаздела", 				ИмяРаздела);
			СтруктураСведенийИННКПП.Вставить("СтрВКакомРазделе", 		СтрВКакомРазделе);
			СтруктураСведенийИННКПП.Вставить("НомерЛиста", 				НомерЛиста);
			СтруктураСведенийИННКПП.Вставить("НомерСтрокиСтроковый", 	НомерСтрокиСтроковый);
			СтруктураСведенийИННКПП.Вставить("ИмяТаблицы", 				ИмяТаблицы);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяИНН", 		ИмяПоказателяИНН);
			СтруктураСведенийИННКПП.Вставить("ИНН", 					ИНН);
			СтруктураСведенийИННКПП.Вставить("ИмяПоказателяКПП", 		ИмяПоказателяКПП);
			СтруктураСведенийИННКПП.Вставить("КПП", 					КПП);
			СтруктураСведенийИННКПП.Вставить("РодПадежЧейИННКПП", 		РодПадежЧейИННКПП);
				
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойИНН", 		МожетБытьПустойИНН);	
			СтруктураСведенийИННКПП.Вставить("МожетБытьПустойКПП", 		МожетБытьПустойКПП);
			
	
			НетПроблемИННКПП = ПроверкаИННКППвСтрокахТаблиц(ДокументСсылкаАлкоОтчет,  
										ТаблицаСообщений, СтатусПроверки, СтруктураСведенийИННКПП, РоссийскийКонтрагент);
						
			Если РоссийскийКонтрагент = Неопределено Тогда		
				РоссийскийКонтрагент = (ДлинаИНН = 12) или (ДлинаИНН = 10);			
			КонецЕсли;
			
			//
			////////////////////////////////////////////////////////////////////////////////
			
						
		    // Заполняем справочники Поставщиков и Лицензий поставщиков.
			Если НужноПерекрестноПроверятьПроизводителей и (ТаблицаСообщений.Количество() = 0) Тогда
			 
				ИдПоставщика = "Х" + СтрокаДекларации.ХешИдПоставщика;
			
			    Если НЕ ДанныеПоставщиков.Свойство(ИдПоставщика) Тогда
					
					СчетчикИдПоставщиков = СчетчикИдПоставщиков + 1;
					
					ДанныеПоставщиков.Вставить(ИдПоставщика, Новый Структура);
					
					ДанныеПоставщиков[ИдПоставщика].Вставить("ИдПостав", 		СчетчикИдПоставщиков);
					ДанныеПоставщиков[ИдПоставщика].Вставить("П000000000007", 	НаименованиеПоставщика);
				    ДанныеПоставщиков[ИдПоставщика].Вставить("П000000000009", 	ИННПоставщика);
					ДанныеПоставщиков[ИдПоставщика].Вставить("П000000000010", 	КПППоставщика);
					
				КонецЕсли;
				
				ТекущийПоставщик = ДанныеПоставщиков[ИдПоставщика];
				
				Если НЕ ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Поставщики.Свойство(ИдПоставщика) Тогда
					
					ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Поставщики.Вставить(ИдПоставщика, Новый Структура);
					
					СтруктураПоставщика = ДанныеДвижений_ПоОП_ПоКоду[ИдКодПродПроизв].Поставщики[ИдПоставщика];
					
					СтруктураПоставщика.Вставить("ХешИдПоставщика", СтрокаДекларации.ХешИдПоставщика);
					СтруктураПоставщика.Вставить("ИдПоставщика", 	ТекущийПоставщик.ИдПостав);					
					
				КонецЕсли;	
				
			КонецЕсли;
					
			ИмяГрафы = ПрефиксИмени + "09";
			ИмяПоказателя = ПрефиксИмени + "09_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
			Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указана дата закупки!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетДатыЗакупки");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			    
			КонецЕсли;
			
			ИмяГрафы = ПрефиксИмени + "10";
			ИмяПоказателя = ПрефиксИмени + "10_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СокрЛП(СтрокаДекларации[ИмяГрафы]);
			Если ПустаяСтрока(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указан номер товарно-транспортной накладной!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетТТН");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			    
			КонецЕсли;
			
			// Номер ГТД (11) всегда выгружается, но не всегда заполняется.
			// Не контролируем.
			
			ИмяГрафы = ПрефиксИмени + "12";
			ИмяПоказателя = ПрефиксИмени + "12_" + НомерСтрокиСтроковый;
			ЗначениеГрафы = СтрокаДекларации[ИмяГрафы];
			Если НЕ ЗначениеЗаполнено(ЗначениеГрафы) Тогда
				ТекстОписанияОшибки = "В Разделе 2 декларации, на листе " + НомерЛистаСтроковый + ", в строке " + НомерСтрокиСтроковый  + ", не указан объем закупленной продукции!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", "Раздел2");
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НетОбъемаЗакупки");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
			    
			КонецЕсли;
			
			КолТабСообщений = ТаблицаСообщений.Количество();
			
			Если НетОшибокПроверки и (КолТабСообщений > 0)  Тогда
				НетОшибокПроверки = Ложь;
			    ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли; 
			
			Если КолТабСообщений >  МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
			    Возврат;
			КонецЕсли;
			
		КонецЦикла;
				
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 2.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
				
	КонецЦикла;
	
	Если НужноПерекрестноПроверятьПроизводителей Тогда			
		ДанныеОП_Раздел1[ИдОП].Вставить("КолСтрокПоРазделу2", КолСтрокРаздел2);
	КонецЕсли;
		
КонецПроцедуры

Функция ОтчетЗаполненКорректно()
	
	СтатусПроверки = Истина;
	
	МаксимальноеКоличествоОшибок = 1000;
	
	ПроверитьЗаполнениеТитульный(СтатусПроверки);

	Если ТаблицаСообщений.Количество() <=  МаксимальноеКоличествоОшибок Тогда
				
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 1.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
		
		ПроверитьЗаполнениеРаздел1(СтатусПроверки);
		
	КонецЕсли;
	
		
	Если ТаблицаСообщений.Количество() <=  МаксимальноеКоличествоОшибок Тогда
		
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Раздел 2.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
		ПроверитьЗаполнениеРаздел2(СтатусПроверки);

	КонецЕсли;
		
	КолСтрокПриПроверкеЗаполнения = ОбработаноСтрок;
		
	Возврат СтатусПроверки;
	
КонецФункции


Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, Узел, 
						ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента);
	
КонецФункции 

Функция СкопироватьУзел(Родитель, Узел)
	
	Возврат РегламентированнаяОтчетностьАЛКО.СкопироватьУзелАЛКО(Родитель, Узел);
	
КонецФункции

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	Возврат РегламентированнаяОтчетностьАЛКО.НовыйУзелИзПрототипаАЛКО(ПрототипУзла);
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	РегламентированнаяОтчетностьАЛКО.УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента);
	
КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ИдентификаторОП_АЛКО(СведенияОП);
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	РегламентированнаяОтчетностьАЛКО.ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьДанныеАЛКО(Узел, 
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки);
		
КонецФункции


Процедура ЗаполнитьСправочникиДекларации(УзелСправочники)
	
	ПрототипУзла_ПроизводителиИмпортеры = ПолучитьПодчиненныйЭлемент(УзелСправочники, "ПроизводителиИмпортеры");
	
	Для Каждого ЭлементДанныеПроизводителей Из ДанныеПроизводителей Цикл
		
		СтрокаПроизводителяИмпортера = ЭлементДанныеПроизводителей.Значение;
		
		Узел_ПроизводителиИмпортеры = СкопироватьУзел(УзелСправочники, ПрототипУзла_ПроизводителиИмпортеры);
		
		УстановитьЗначениеЭлемента(Узел_ПроизводителиИмпортеры, "ИДПроизвИмп", СтрокаПроизводителяИмпортера.ИДПроизвИмп);
		УстановитьЗначениеЭлемента(Узел_ПроизводителиИмпортеры, "П000000000004", СтрокаПроизводителяИмпортера.П000000000004);
		
		УказанИНН = НЕ ПустаяСтрока(СтрокаПроизводителяИмпортера.П000000000005);
		УказанКПП = НЕ ПустаяСтрока(СтрокаПроизводителяИмпортера.П000000000006);
		
		Узел_ЮЛ = ПолучитьПодчиненныйЭлемент(Узел_ПроизводителиИмпортеры, "ЮЛ");
		Узел_ФЛ = ПолучитьПодчиненныйЭлемент(Узел_ПроизводителиИмпортеры, "ФЛ");
		Если УказанКПП Тогда
			УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000005", СтрокаПроизводителяИмпортера.П000000000005);
			УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000006", СтрокаПроизводителяИмпортера.П000000000006);
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ФЛ);
		Иначе			
			УстановитьЗначениеЭлемента(Узел_ФЛ, "П000000000005", СтрокаПроизводителяИмпортера.П000000000005);
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ЮЛ);
		КонецЕсли;
		
		ДанныеПроизводителей.Удалить(ЭлементДанныеПроизводителей.Ключ);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ПроизводителиИмпортеры);
	
	ПрототипУзла_Поставщики = ПолучитьПодчиненныйЭлемент(УзелСправочники, "Поставщики");
	
	Для Каждого ЭлементДанныеПоставщиков Из ДанныеПоставщиков Цикл
		
		СтрокаПоставщика = ЭлементДанныеПоставщиков.Значение;
		
		Узел_Поставщики = СкопироватьУзел(УзелСправочники, ПрототипУзла_Поставщики);
		
		УстановитьЗначениеЭлемента(Узел_Поставщики, "ИдПостав", СтрокаПоставщика.ИдПостав);
		УстановитьЗначениеЭлемента(Узел_Поставщики, "П000000000007", СтрокаПоставщика.П000000000007);
		
		УказанИНН = НЕ ПустаяСтрока(СтрокаПоставщика.П000000000009);
		УказанКПП = НЕ ПустаяСтрока(СтрокаПоставщика.П000000000010);
		
		Узел_ЮЛ = ПолучитьПодчиненныйЭлемент(Узел_Поставщики, "ЮЛ");
		Узел_ФЛ = ПолучитьПодчиненныйЭлемент(Узел_Поставщики, "ФЛ");
		Если УказанКПП Тогда
			УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000009", СтрокаПоставщика.П000000000009);
			УстановитьЗначениеЭлемента(Узел_ЮЛ, "П000000000010", СтрокаПоставщика.П000000000010);
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ФЛ);
		Иначе			
			УстановитьЗначениеЭлемента(Узел_ФЛ, "П000000000009", СтрокаПоставщика.П000000000009);
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ЮЛ);
		КонецЕсли;
		
		ДанныеПоставщиков.Удалить(ЭлементДанныеПоставщиков.Ключ);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Поставщики);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияДекларации(НовыйУзелОбъемОборота, ИдОП, ИДДокИндСтраницыРаздел2)
	
		
	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;
	ТекстЗапросаРаздел2 = "ВЫБРАТЬ
	                      |	РегистрСведенийАлкоПрил12Раздел2.Документ,
	                      |	РегистрСведенийАлкоПрил12Раздел2.ИндексСтраницы,
	                      |	РегистрСведенийАлкоПрил12Раздел2.ИндексСтроки,
	                      |	РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000301,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000302,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000303,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000304,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000305,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000306,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000307,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000308,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000309,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000310,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000311,
	                      |	РегистрСведенийАлкоПрил12Раздел2.П000020000312,
	                      |	РегистрСведенийАлкоПрил12Раздел2.Активно,
	                      |	РегистрСведенийАлкоПрил12Раздел2.ХешИдКодПродПроизв КАК ХешИдКодПродПроизв,
	                      |	РегистрСведенийАлкоПрил12Раздел2.ХешИдПоставщика
	                      |ИЗ
	                      |	РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2 КАК РегистрСведенийАлкоПрил12Раздел2
	                      |ГДЕ
	                      |	РегистрСведенийАлкоПрил12Раздел2.Активно = ИСТИНА
	                      |	И РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ХешИдКодПродПроизв,
	                      |	ХешИдПоставщика";
								  
	ТекстЗапросаРаздел2_КодПрод = "ВЫБРАТЬ
	                              |	РегистрСведенийАлкоПрил12Раздел2.Документ,
	                              |	РегистрСведенийАлкоПрил12Раздел2.ИндексСтраницы,
	                              |	РегистрСведенийАлкоПрил12Раздел2.ИндексСтроки,
	                              |	РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000301,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000302,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000303,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000304,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000305,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000306,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000307,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000308,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000309,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000310,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000311,
	                              |	РегистрСведенийАлкоПрил12Раздел2.П000020000312,
	                              |	РегистрСведенийАлкоПрил12Раздел2.Активно,
	                              |	РегистрСведенийАлкоПрил12Раздел2.ХешИдКодПродПроизв КАК ХешИдКодПродПроизв,
	                              |	РегистрСведенийАлкоПрил12Раздел2.ХешИдПоставщика
	                              |ИЗ
	                              |	РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2 КАК РегистрСведенийАлкоПрил12Раздел2
	                              |ГДЕ
	                              |	РегистрСведенийАлкоПрил12Раздел2.Активно = ИСТИНА
	                              |	И РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
	                              |	И РегистрСведенийАлкоПрил12Раздел2.П000020000302 = &КодПродукции
	                              |
	                              |УПОРЯДОЧИТЬ ПО
	                              |	ХешИдКодПродПроизв,
	                              |	ХешИдПоставщика";
	
	ТекстЗапросаРаздел2_КодПрод_Произв = "ВЫБРАТЬ
	                                     |	РегистрСведенийАлкоПрил12Раздел2.Документ,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.ИндексСтраницы,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.ИндексСтроки,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000301,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000302,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000303,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000304,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000305,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000306,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000307,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000308,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000309,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000310,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000311,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.П000020000312,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.Активно,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.ХешИдКодПродПроизв,
	                                     |	РегистрСведенийАлкоПрил12Раздел2.ХешИдПоставщика
	                                     |ИЗ
	                                     |	РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2 КАК РегистрСведенийАлкоПрил12Раздел2
	                                     |ГДЕ
	                                     |	РегистрСведенийАлкоПрил12Раздел2.Активно = ИСТИНА
	                                     |	И РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
	                                     |	И РегистрСведенийАлкоПрил12Раздел2.ХешИдКодПродПроизв = &ХешИдКодПродПроизв
	                                     |
	                                     |УПОРЯДОЧИТЬ ПО
	                                     |	ХешИдПоставщика";
	
	ТекстЗапросаРаздел2_КодПрод_Произв_Поставщик = "ВЫБРАТЬ
	                                                |	РегистрСведенийАлкоПрил12Раздел2.*
	                                                |ИЗ
	                                                |	РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2 КАК РегистрСведенийАлкоПрил12Раздел2
	                                                |ГДЕ
	                                                |	РегистрСведенийАлкоПрил12Раздел2.Активно = ИСТИНА
	                                                |	И РегистрСведенийАлкоПрил12Раздел2.ИДДокИндСтраницы = &ИДДокИндСтраницы
	                                                |	И РегистрСведенийАлкоПрил12Раздел2.ХешИдКодПродПроизв = &ХешИдКодПродПроизв
	                                                |	И РегистрСведенийАлкоПрил12Раздел2.ХешИдПоставщика = &ХешИдПоставщика";
	
	ЗапросРаздел2 = Новый Запрос;
		
	КолСтрокПоРазделу2 = ДанныеОП_Раздел1[ИдОП].КолСтрокПоРазделу2;
	
	ЗапросПоРазделу2НеВыполнен = Истина;
	Если (ВсегоСтрокПоРазделу1 + КолСтрокПоРазделу2 <= 60000) или (КолСтрокПоРазделу2 <= 30000) Тогда
	
		// есть смысл сразу считать
		ЗапросРаздел2.Текст = ТекстЗапросаРаздел2;
		ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", 	ИДДокИндСтраницыРаздел2);
	    
		ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
		// очищаем
		ЗапросРаздел2 = Новый Запрос;
		// выставляем признак
		ЗапросПоРазделу2НеВыполнен = Ложь;
	
	КонецЕсли; 
		
	ОбразецУзлаОборот = ПолучитьПодчиненныйЭлемент(НовыйУзелОбъемОборота, "Оборот");
	
	ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
	
	НомерППКодаВидаПродукции = 0;
	
	Для Каждого ЭлементДвиженияПоОП Из ДанныеДвиженийПоОП Цикл
	
		КодВидаПродукцииКлюч = ЭлементДвиженияПоОП.Ключ;
		КодВидаПродукции = Сред(КодВидаПродукцииКлюч, 2);
		
	    НовыйУзелОборот = СкопироватьУзел(НовыйУзелОбъемОборота, ОбразецУзлаОборот);
		
		НомерППКодаВидаПродукции = НомерППКодаВидаПродукции + 1;
		
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "ПN", НомерППКодаВидаПродукции);
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "П000000000003", КодВидаПродукции);
		
		ОбразецУзлаСведПроизвИмпорт = ПолучитьПодчиненныйЭлемент(НовыйУзелОборот, "СведПроизвИмпорт");
		
		КоличествоСтрокРаздел2ПоКоду = ЭлементДвиженияПоОП.Значение.КоличествоСтрокРаздел2ПоКоду;
		
		ЗапросПоКодуНеВыполнен = Истина;
		
		Если ЗапросПоРазделу2НеВыполнен 
			и ((ВсегоСтрокПоРазделу1 + КоличествоСтрокРаздел2ПоКоду <= 60000) или (КоличествоСтрокРаздел2ПоКоду <= 30000)) Тогда
			
		    // есть смысл сразу считать
			ЗапросРаздел2.Текст = ТекстЗапросаРаздел2_КодПрод;
			ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", 	ИДДокИндСтраницыРаздел2);
		    ЗапросРаздел2.Параметры.Вставить("КодПродукции", 		КодВидаПродукции);
			ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
			// очищаем
			ЗапросРаздел2 = Новый Запрос;
			// выставляем признак
			ЗапросПоКодуНеВыполнен = Ложь;
			
		КонецЕсли; 
		
		ДанныеДвижений_ПоОП_ПоКоду = ЭлементДвиженияПоОП.Значение.КодПродПроизв;
		
		НомерППСведенийОПроизводителеИмпортере = 0;
		
		Для Каждого Элемент_ДанныеДвижений_ПоОП_ПоКоду Из ДанныеДвижений_ПоОП_ПоКоду Цикл
			
			ИдКодПродПроизв		= Элемент_ДанныеДвижений_ПоОП_ПоКоду.Ключ;
			ХешИдКодПродПроизв 	= Сред(ИдКодПродПроизв, 2);
			
			СтрокаСведенийОПроизводителеИмпортере 	= Элемент_ДанныеДвижений_ПоОП_ПоКоду.Значение;
			
			КоличествоСтрокРаздел2ПоКодПродПроизв = СтрокаСведенийОПроизводителеИмпортере.КоличествоСтрокРаздел2ПоКодПродПроизв;
			
			ЗапросПоКодуПроизводителюНеВыполнен = Истина;
			Если ЗапросПоРазделу2НеВыполнен и ЗапросПоКодуНеВыполнен
				и ((ВсегоСтрокПоРазделу1 + КоличествоСтрокРаздел2ПоКодПродПроизв <= 60000) 
					или (КоличествоСтрокРаздел2ПоКодПродПроизв <= 30000)) Тогда
			     				    
				ЗапросРаздел2.Текст = ТекстЗапросаРаздел2_КодПрод_Произв;
				ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", 	ИДДокИндСтраницыРаздел2);
			    ЗапросРаздел2.Параметры.Вставить("ХешИдКодПродПроизв", 	ХешИдКодПродПроизв);
				ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
				// очищаем
				ЗапросРаздел2 = Новый Запрос;
				// выставляем признак
				ЗапросПоКодуПроизводителюНеВыполнен = Ложь;
				
			КонецЕсли;
			
			НовыйУзелСведПроизвИмпорт = СкопироватьУзел(НовыйУзелОборот, ОбразецУзлаСведПроизвИмпорт);
			
			НомерППСведенийОПроизводителеИмпортере = НомерППСведенийОПроизводителеИмпортере + 1;
			
			ИдПроизвИмп = СтрокаСведенийОПроизводителеИмпортере.ИдПроизвИмп;
			
			УстановитьЗначениеЭлемента(НовыйУзелСведПроизвИмпорт, "ПN", НомерППСведенийОПроизводителеИмпортере);
			УстановитьЗначениеЭлемента(НовыйУзелСведПроизвИмпорт, "ИдПроизвИмп", ИдПроизвИмп);
			
			// Сведения о поставщиках.
			ОбразецУзлаПоставщик = ПолучитьПодчиненныйЭлемент(НовыйУзелСведПроизвИмпорт, "Поставщик");
			
			Поставщики = СтрокаСведенийОПроизводителеИмпортере.Поставщики;
			НомерПППоставщика = 0;
			
			Для Каждого ЭлементПоставщика Из Поставщики Цикл
			
				НовыйУзелПоставщик = СкопироватьУзел(НовыйУзелСведПроизвИмпорт, ОбразецУзлаПоставщик);
				
				НомерПППоставщика = НомерПППоставщика + 1;
				
				СтруктураПоставщика = ЭлементПоставщика.Значение;
								
				ИдПоставщика			= СтруктураПоставщика.ИдПоставщика;
				ХешИдПоставщика 		= СтруктураПоставщика.ХешИдПоставщика;				
				
				УстановитьЗначениеЭлемента(НовыйУзелПоставщик, "ПN", НомерПППоставщика);
				УстановитьЗначениеЭлемента(НовыйУзелПоставщик, "ИдПоставщика", ИдПоставщика);
				
				// Сведения о поставках продукции.
				ОбразецУзлаПродукция = ПолучитьПодчиненныйЭлемент(НовыйУзелПоставщик, "Продукция");
				
				Если ЗапросПоРазделу2НеВыполнен и ЗапросПоКодуНеВыполнен и ЗапросПоКодуПроизводителюНеВыполнен Тогда
				
					// Выполняем запрос	по поставщику.
					ЗапросРаздел2.Текст = ТекстЗапросаРаздел2_КодПрод_Произв_Поставщик;
					ЗапросРаздел2.Параметры.Вставить("ИДДокИндСтраницы", 	ИДДокИндСтраницыРаздел2);
				    ЗапросРаздел2.Параметры.Вставить("ХешИдКодПродПроизв", 	ХешИдКодПродПроизв);
					ЗапросРаздел2.Параметры.Вставить("ХешИдПоставщика", 	ХешИдПоставщика);
					ТаблицаЗапроса = ЗапросРаздел2.Выполнить().Выгрузить();
					НайденныеСтроки = ТаблицаЗапроса;
					// Очищаем.
					ЗапросРаздел2 = Новый Запрос;
					
				ИначеЕсли НЕ ЗапросПоКодуПроизводителюНеВыполнен Тогда
					
					// Отбираем строки по поставщику,
					// отберется только один Поставщик.
					УсловияОтбора = Новый Структура;
					УсловияОтбора.Вставить("ХешИдПоставщика", ХешИдПоставщика);
					НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(УсловияОтбора);
					
				Иначе
					
					// Был запрос по Разделу2 по данному ОП или запрос по коду продукции из Раздела2 по данному ОП
					// отбор для этих запросов одинаковый, поскольку ХешИдКодПродПроизв включает пару Код-Производитель
					// и отдельно отбирать по коду не надо.
					// Отбираем строки связанному ИдКодПродПроизводителя и ИдПоставщика.					
				    УсловияОтбора = Новый Структура;
					УсловияОтбора.Вставить("ХешИдКодПродПроизв", 	ХешИдКодПродПроизв);
					УсловияОтбора.Вставить("ХешИдПоставщика", 		ХешИдПоставщика);
					НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(УсловияОтбора);
									
				КонецЕсли; 
				
				Для Каждого СтрокаПродукции Из НайденныеСтроки Цикл
				
					НовыйУзелПродукция = СкопироватьУзел(НовыйУзелПоставщик, ОбразецУзлаПродукция);
					
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000013", СтрокаПродукции.П000020000309);
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000014", СтрокаПродукции.П000020000310);
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000015", СтрокаПродукции.П000020000311);
					УстановитьЗначениеЭлемента(НовыйУзелПродукция, "П200000000016", СтрокаПродукции.П000020000312);
					// Удалим отработанные.
					ТаблицаЗапроса.Удалить(СтрокаПродукции);
					
					ОбработаноСтрок = ОбработаноСтрок + 1;
					
				КонецЦикла; 
			 					
				НайденныеСтроки = Неопределено;				
				РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаПродукция);
				
				Поставщики.Удалить(ЭлементПоставщика.Ключ);
			
			КонецЦикла;
			
			РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаПоставщик);
			СтрокаСведенийОПроизводителеИмпортере.Удалить("Поставщики");
			
			// Сведения о движениях.
			ОбразецУзлаДвижение = ПолучитьПодчиненныйЭлемент(НовыйУзелСведПроизвИмпорт, "Движение");
			
			// Движение по связке Код продукции - производитель/импортер может быть только одно
			НомерППДвижения = 1;
			НовыйУзелДвижение = СкопироватьУзел(НовыйУзелСведПроизвИмпорт, ОбразецУзлаДвижение);
		    УстановитьЗначениеЭлемента(НовыйУзелДвижение, "ПN", НомерППДвижения);
			
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000006", СтрокаСведенийОПроизводителеИмпортере.П100000000006);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000007", СтрокаСведенийОПроизводителеИмпортере.П100000000007);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000008", СтрокаСведенийОПроизводителеИмпортере.П100000000008);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000009", СтрокаСведенийОПроизводителеИмпортере.П100000000009);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000010", СтрокаСведенийОПроизводителеИмпортере.П100000000010);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000011", СтрокаСведенийОПроизводителеИмпортере.П100000000011);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000012", СтрокаСведенийОПроизводителеИмпортере.П100000000012);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000013", СтрокаСведенийОПроизводителеИмпортере.П100000000013);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000014", СтрокаСведенийОПроизводителеИмпортере.П100000000014);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000015", СтрокаСведенийОПроизводителеИмпортере.П100000000015);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000016", СтрокаСведенийОПроизводителеИмпортере.П100000000016);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000017", СтрокаСведенийОПроизводителеИмпортере.П100000000017);
			УстановитьЗначениеЭлемента(НовыйУзелДвижение, "П100000000018", СтрокаСведенийОПроизводителеИмпортере.П100000000018);
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
			
			РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаДвижение);
			
			ДанныеДвижений_ПоОП_ПоКоду.Удалить(ИдКодПродПроизв);
			
		КонецЦикла;
				
		РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаСведПроизвИмпорт);
		ДанныеДвиженийПоОП.Удалить(КодВидаПродукцииКлюч);
		
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
			
		КонецЕсли;
	
	КонецЦикла; 
	
	РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаОборот);
		
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел, ПараметрыВыгрузки)
		
	УзелСправочники = ПолучитьПодчиненныйЭлемент(КорневойУзел, "Справочники");
	Узел_Документ = УзелРодитель;
	
	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
				
	ПрототипУзла_ОбъемОборота = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ОбъемОборота");
			
	Для Каждого ЭлементОП Из ДанныеОП_Раздел1 Цикл
	
		ИдОП		= ЭлементОП.Ключ;
		СтруктураОП = ЭлементОП.Значение;
		
		СведенияОбОП = СтруктураОП.ОП;
		
		ИндексСтраницыРегистраРаздел1 = СтруктураОП.ИндексСтраницыРегистраРаздел1;
		Если СтруктураОП.Свойство("ИДДокИндСтраницыРаздел2") Тогда
		    ИДДокИндСтраницыРаздел2 = СтруктураОП.ИДДокИндСтраницыРаздел2;
		Иначе	
		    ИДДокИндСтраницыРаздел2 = "";
		КонецЕсли;
		
		// заполняем сведения по ОП
		НазваниеОрганизации = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;
		
		Если ПустаяСтрока(НазваниеОрганизации) И ПустаяСтрока(КПП) Тогда
			Продолжить;
		КонецЕсли;
		
		Узел_ОбъемОборота = НовыйУзелИзПрототипа(ПрототипУзла_ОбъемОборота);
		
		Если СтруктураРеквизитовФормы.мВерсияФормата = "431" Тогда		
			// формат 4.31
			УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "Наим", НазваниеОрганизации);			
		Иначе			
			// формат 4.30
			УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаимЮЛ", НазваниеОрганизации);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(КПП) Тогда
		    УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "КППЮЛ", КПП);		
		КонецЕсли;		
				
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  "643");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера",     СведенияОбОП.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      СведенияОбОП.Квартира);
		
	    ЗаполнитьСведенияДекларации(Узел_ОбъемОборота, ИдОП, ИДДокИндСтраницыРаздел2);
		
		Узел_Оборот = ПолучитьПодчиненныйЭлемент(Узел_ОбъемОборота, "Оборот");
		ЕстьОборот = (Узел_Оборот <> Неопределено);
		УстановитьЗначениеЭлемента(Узел_ОбъемОборота, "НаличиеОборота", ?(ЕстьОборот, "true", "false"));
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ОбъемОборота);
	
	ЗаполнитьСправочникиДекларации(УзелСправочники); 
	
	КолСтрокЗаполнено = ОбработаноСтрок - КолСтрокПриПроверкеЗаполнения;
	
	Если КолСтрокЗаполнено <> КолСтрокПриПроверкеЗаполнения Тогда
		
	    // выгружено не то количество, что есть по данным заполнения отчета
		ТекстОписанияОшибки = "В выгрузку попало меньшее количество строк, чем заполнено по разделам Раздел 1 и Раздел 2!
							|Немедленно свяжитесь с техподдержкой, желательно выслать выгрузку 
							|Вашей информационной базы в виде файла .dt";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Титульный");
		СтруктураОшибки.Вставить("Показатель", "Организация");
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеВсяИнформацияПопалаВВыгрузку");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки);
								
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанными()
	
	Если НужноОбработатьСтрок > 0 Тогда
	 	
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
		
	КонецЕсли; 
	
		
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	
	Если НужноОбработатьСтрок > 0 Тогда
	 
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
	
	КонецЕсли;
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	Если НужноОбработатьСтрок > 0 Тогда
	    		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ПроцентБезЗавершающейПроверкиДанных, 100);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка = Ложь) Экспорт
	
	ВерсияБСПЧислом = РегламентированнаяОтчетностьАлко.ПолучитьВерсиюБСПЧислом();
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	ПараметрыВыгрузки			= ПараметрыДокумента.ПараметрыВыгрузки;	
		
	
	// Таблица результата
	ТаблицаСообщений = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	ТаблицаСообщенийДляСведения = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	
	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыРаздел1  = ПараметрыФормы.ТаблицаСтраницыРаздел1;
	ТаблицаСтраницыРаздел2  = ПараметрыФормы.ТаблицаСтраницыРаздел2;
	
	ТабП0000000002 = ПараметрыФормы.ТабП0000000002;
	ТабП0000100003 = ПараметрыФормы.ТабП0000100003;
	ТабП0000200003 = ПараметрыФормы.ТабП0000200003;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормыОбъекта);
	
	ВсегоСтрокПоРазделу1 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	ВсегоСтрокПоРазделу2 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы22, Истина);
	
	// один проход при проверке заполнения,
	// второй - при заполнении выгрузки - все вместе 90%
	// на завершающую проверку данных отводим 10%
	НужноОбработатьСтрок = 2*(ВсегоСтрокПоРазделу1 + ВсегоСтрокПоРазделу2);
	// при выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%
	// при проверке выгрузки - примерно 90% от общего времени выполнения.
	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
	ОбработаноСтрок = 0;
	ШагИнформирования = 3000;
	НетОшибокПроверки = Истина;
	
	Если НЕ ОтчетЗаполненКорректно() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
		
	КонецЕсли;

	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных);
		
	КонецЕсли;
	
	ЗаполнитьДанными();
	
	Если ТаблицаСообщений.Количество() > 0 Тогда
	    
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
			
	КонецЕсли; 
	
	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка данных по схеме выгрузки.", ПроцентБезЗавершающейПроверкиДанных, 
										100);
										
	КонецЕсли;
		
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		// информируем о ходе выполнения
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100);										 
			
		КонецЕсли;
				
		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;
		
	КонецЕсли;
	
	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(?(ЭтоВыгрузка, "Запись выгрузки в XML.", ""), ?(ЭтоВыгрузка, 93, 100), 100);
		
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
	Возврат Результат;
	
КонецФункции

Функция СформироватьПредставлениеОшибок(ТаблСообщений, ИмяФормыОбъекта, ТолькоДляСведения = Ложь) Экспорт
	
	
	МакетОформления = ПолучитьМакетИзОбъекта(ИмяФормыОбъекта, "ШаблоныСообщенийОбОшибках2014Кв1");
	
	НаименованиеДекларации = ПолучитьНазваниеОтчетаАЛКО(ИмяФормыОбъекта);
	
	Секция_ВерхнийОтступ   = МакетОформления.ПолучитьОбласть("ВерхнийОтступ");
	Секция_ЗаголовокОтчета = МакетОформления.ПолучитьОбласть("ЗаголовокОтчета");
	Секция_РазрывСекций    = МакетОформления.ПолучитьОбласть("РазрывСекций");
	Секция_ОтступПередОшибками = МакетОформления.ПолучитьОбласть("ОтступПередОшибками");
	
	ПредставлениеОшибок = Новый ТабличныйДокумент;
	ПредставлениеОшибок.Вывести(Секция_ВерхнийОтступ);
	
	Секция_ЗаголовокОтчета.Параметры.НаименованиеДекларации = НаименованиеДекларации;
	ПредставлениеОшибок.Вывести(Секция_ЗаголовокОтчета);
	ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
	
	КоличествоОшибок = ТаблСообщений.Количество();
	
	Если КоличествоОшибок = 0 Тогда
		
		Секция_БезОшибок = МакетОформления.ПолучитьОбласть("БезОшибок");
		ПредставлениеОшибок.Вывести(Секция_БезОшибок);
		
	Иначе
		
		// Если есть ошибки разработки - их в первую очередь.
		
		ТипОшибки = "НеВсяИнформацияПопалаВВыгрузку";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
			
		    // Такая ошибка может быть только одна.
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			// Ничего не сворачиваем, выдаем сразу.
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
			ТаблСообщений.Удалить(ОшибкиРазработки[0]);
			
		КонецЕсли; 
		
		ТипОшибки = "НеУдалосьВычислить";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
					    
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
						
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.НачатьГруппуСтрок();			
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
			
			Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
			
			Для каждого Ошибка Из ОшибкиРазработки Цикл
			
				ПозицияПерехода = Новый Структура;
				ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
				ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
				ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
				
				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
				
				ТаблСообщений.Удалить(Ошибка);
				
			КонецЦикла; 
			
			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
		КонецЕсли;
		
		ТипОшибки = "ОшибкаФорматаXML";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
					    
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
						
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.НачатьГруппуСтрок();			
			ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
			
			Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
			
			Для каждого Ошибка Из ОшибкиРазработки Цикл
			
				ПозицияПерехода = Новый Структура;
				ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
				ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
				ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
				
				Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
				Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
				ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
				
				ТаблСообщений.Удалить(Ошибка);
				
			КонецЦикла; 
			
			ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
		КонецЕсли;
		
		// Отдельно - слишком много ошибок
		ТипОшибки = "МногоОшибок";
		ОшибкиРазработки = ТаблСообщений.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		Если ОшибкиРазработки.Количество() > 0 Тогда
			
		    // Такая ошибка может быть только одна.
			Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
			ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
			// Ничего не сворачиваем, выдаем сразу.
			Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
			ТаблСообщений.Удалить(ОшибкиРазработки[0]);
			
		КонецЕсли;
		
		// Ошибки заполнения Титульного листа.
		РазделОшибок = "Титульный";
		ОшибкиТитульного = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиТитульного = ТаблСообщений.Скопировать(ОшибкиТитульного);
		
		Если ОшибкиТитульного.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
			
				Секция_ЗаголовокОшибкиТитульногоЛиста = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиТитульногоЛиста");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибкиТитульногоЛиста);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибкиТитульногоЛиста = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиТитульногоЛиста");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибкиТитульногоЛиста);	
			
			КонецЕсли; 
						
			ВывестиОшибки(ОшибкиТитульного, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли; 
		
		// Ошибки заполнения Лицензии.
		РазделОшибок = "Лицензии";
		ОшибкиЛицензии = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиЛицензии = ТаблСообщений.Скопировать(ОшибкиЛицензии);
		
		Если ОшибкиЛицензии.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
				
				Секция_ЗаголовокОшибкиЛицензии = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиЛицензии");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибкиЛицензии);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибкиЛицензии = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиЛицензии");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибкиЛицензии);
			КонецЕсли;
			
			ВывестиОшибки(ОшибкиЛицензии, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли;
		
		// Ошибки заполнения Раздел 1.
		РазделОшибок = "Раздел1";
		ОшибкиРаздела = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиРаздела = ТаблСообщений.Скопировать(ОшибкиРаздела);
		
		Если ОшибкиРаздела.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
				
				Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиРаздел1");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиРаздел1");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
				
			КонецЕсли;
			
			ВывестиОшибки(ОшибкиРаздела, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли;
		
		// Ошибки заполнения Раздел 2.
		РазделОшибок = "Раздел2";
		ОшибкиРаздела = ТаблСообщений.НайтиСтроки(Новый Структура("Раздел", РазделОшибок));
		ОшибкиРаздела = ТаблСообщений.Скопировать(ОшибкиРаздела);
		
		Если ОшибкиРаздела.Количество() > 0 Тогда
		
			// Выводим общий заголовок.
			Если НЕ ТолькоДляСведения Тогда
				
				Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("ЗаголовокОшибкиРаздел2");
				ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
				
				ПредставлениеОшибок.НачатьГруппуСтрок();			
				ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
				
				Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("ИсправлениеОшибкиРаздел2");
			    ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
				
			КонецЕсли;
			
			ВывестиОшибки(ОшибкиРаздела, МакетОформления, ПредставлениеОшибок);
			
			Если НЕ ТолькоДляСведения Тогда
				ПредставлениеОшибок.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеОшибок;
	
КонецФункции

Процедура ВывестиОшибки(ТаблОшибок, МакетОформления, ПредставлениеОшибок)

	Секция_СтандартнаяОшибка = МакетОформления.ПолучитьОбласть("СтандартнаяОшибка");
	Секция_РазрывСекций    = МакетОформления.ПолучитьОбласть("РазрывСекций");
	Секция_ОтступПередОшибками = МакетОформления.ПолучитьОбласть("ОтступПередОшибками");
	
	Пока ТаблОшибок.Количество() > 0 Цикл
	    		
		ТипОшибки = ТаблОшибок[0].ТипОшибки;
		
		ОшибкиПоТипу = ТаблОшибок.НайтиСтроки(Новый Структура("ТипОшибки", ТипОшибки));
		
		Секция_ЗаголовокОшибки = МакетОформления.ПолучитьОбласть("Заголовок" + ТипОшибки);
		ПредставлениеОшибок.Вывести(Секция_ЗаголовокОшибки);
		
		ПредставлениеОшибок.НачатьГруппуСтрок(); // описание исправления ошибки сворачивается вместе с контрагентами
		
		Секция_ИсправлениеОшибки = МакетОформления.ПолучитьОбласть("Исправление" + ТипОшибки);
		ПредставлениеОшибок.Вывести(Секция_ИсправлениеОшибки);
		
		ПредставлениеОшибок.Вывести(Секция_ОтступПередОшибками);
		
		Для каждого Ошибка Из ОшибкиПоТипу Цикл
		
			ПозицияПерехода = Новый Структура;
			ПозицияПерехода.Вставить("Раздел", Ошибка.Раздел);
			ПозицияПерехода.Вставить("Показатель", Ошибка.ИмяЯчейки);
			ПозицияПерехода.Вставить("Страница", Ошибка.Страница);
			
			Секция_СтандартнаяОшибка.Параметры.ПредставлениеОшибки = Ошибка.Описание;
			Секция_СтандартнаяОшибка.Параметры.ПозицияПерехода     = ПозицияПерехода;
			ПредставлениеОшибок.Вывести(Секция_СтандартнаяОшибка);
			
			ТаблОшибок.Удалить(Ошибка);
		
		КонецЦикла; 
		
		ПредставлениеОшибок.ЗакончитьГруппуСтрок();
		ПредставлениеОшибок.Вывести(Секция_РазрывСекций);
		
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти


#Область Выгрузка

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML = Неопределено)
	
	Кодировка = "windows-1251";
		
    // пишем в строку или в файл, если передано имя файла XML
	ПотокXML = РегламентированнаяОтчетностьАЛКО.СоздатьНовыйПотокXML(Кодировка, ИмяФайлаXML);
		
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	
	СтрокаИмениФайла = Символы.ПС + "<!-- ИдФайл=""" + ПараметрыВыгрузки.ИдФайл + """ -->";
	ПотокXML.ЗаписатьБезОбработки(СтрокаИмениФайла);
		
	// Получаем текст XML или закрываем файл.
	// В случае записи в файл возвращается пустая строка.
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) 
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ВыгрузитьОтчет(ПараметрыДокумента) Экспорт

	ЭтоВыгрузка = Истина;
	
	Результат = ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка);
	
	Если Результат.ТаблицаСообщений.Количество() > 0 Тогда
		
	    // Есть сообщения о ошибках
		Возврат Результат;
	
	КонецЕсли; 
	
	// Все хорошо, проверка прошла успешно
	// Если объеданных большой - пишем XML в файл, иначе в строку
	ИмяФайлаXML = Неопределено;
	ВсегоСтрокВОтчете = ВсегоСтрокПоРазделу1 + ВсегоСтрокПоРазделу2;
	
	// расширение по умолчанию - .tmp
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();	
	
	Текст = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML);
	
	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100);
		
	КонецЕсли;
	
	Результат.Вставить("ИмяФайлаXML", ИмяФайлаXML);
	
	Возврат Результат;
		
КонецФункции
 
#КонецОбласти 


#Область Печать

Функция ПечататьРаздел(СтрокаРаздела, ЧтоИскать = Неопределено)
	Перем КлючФизЛица;
	
	Если ЧтоИскать <> Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПечатьОтчета(ПараметрыДокумента)  Экспорт
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	
	ВидПечати					= ПараметрыДокумента.ВидПечати;
	
	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыРаздел1  = ПараметрыФормы.ТаблицаСтраницыРаздел1;
	ТаблицаСтраницыРаздел2  = ПараметрыФормы.ТаблицаСтраницыРаздел2;
	
	ТабП0000000002 				= ПараметрыФормы.ТабП0000000002;
	ТабП0000100003 				= ПараметрыФормы.ТабП0000100003;
	ТабП0000200003 				= ПараметрыФормы.ТабП0000200003;
	СтруктураСервисРегистров 	= ПараметрыФормы.СтруктураСервисРегистров;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	
	ВсегоСтрокПоЛицензиям = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы01, Истина);
	ВсегоСтрокПоРазделу1 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	ВсегоСтрокПоРазделу2 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы22, Истина);
	
	// Один проход при выводе в целом по организации,
	// второй - при выводе по ОП
	// Лицензии выводятся один раз.
	// Все это в 2 кратном размере, поскольку сначала вся информация отбирается в запросе.
	НужноОбработатьСтрок = (2*(ВсегоСтрокПоРазделу1 + ВсегоСтрокПоРазделу2) + ВсегоСтрокПоЛицензиям)*2;
	
	ОбработаноСтрок = 0;
	
	Если ВидПечати = "ПечатьФайлZIP" Тогда
		
	    ТипЭкспорта = СтруктураРеквизитовФормы.ТипЭкспорта;
		
		Если ТипЭкспорта = ТипФайлаТабличногоДокумента.PDF Тогда
		    ПроцентБезКонвертацииАрхивации = 14;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.XLSX Тогда
			ПроцентБезКонвертацииАрхивации = 55;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.MXL Тогда
			// Только сжать.
			ПроцентБезКонвертацииАрхивации = 95;
		ИначеЕсли ТипЭкспорта = ТипФайлаТабличногоДокумента.HTML Тогда
			ПроцентБезКонвертацииАрхивации = 20;
		КонецЕсли; 
		
	Иначе
		ПроцентБезКонвертацииАрхивации = 100;
	КонецЕсли; 
	
	СтруктураДанныхТитульный = ПараметрыФормы.СтруктураДанныхТитульный;
	мДеревоВыбранныхСтраниц  = ПараметрыФормы.мДеревоВыбранныхСтраниц;
	НомерКорректировки		 = ПараметрыФормы.НомерКорректировки;
	ДополнительныеДанные	 = ПараметрыФормы.ДополнительныеДанные;
	ДатаПодписи				 = ПараметрыФормы.ДатаПодписи;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Пометка = ПечататьРаздел(СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяФормыОбъекта",    ИмяФормыОбъекта);

		
		Если ИмяСтраницыПанели = "Титульный" Тогда
			
			ВывестиНаПечатьТитульный(СтруктураПараметров);	
			
		ИначеЕсли ИмяСтраницыПанели = "Раздел1" Тогда
			
			ВывестиНаПечатьРаздел1(СтруктураПараметров);
			
		ИначеЕсли ИмяСтраницыПанели = "Раздел2" Тогда
			
			ВывестиНаПечатьРаздел2(СтруктураПараметров);
			
		ИначеЕсли ИмяСтраницыПанели = "Лицензии" Тогда
			
			ВывестиНаПечатьРазделЛицензии(СтруктураПараметров);
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
		?(ВидПечати = "ПечатьФайлZIP" , "Конвертация в выбранный формат и архивация.", ""), 
		НужноОбработатьСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Процедура ВывестиПолеЦеликом(ОбластьМакета, ИмяОбласти, ВыводимоеЗначение);

	ОбластьМакета.Области[ИмяОбласти].Значение = ВыводимоеЗначение;

КонецПроцедуры

Процедура ВывестиВКвадратики(ОбластьМакета, ИмяОбласти, СтрВыводимоеЗначение)
	
	Если Не ПустаяСтрока(СтрВыводимоеЗначение) Тогда
		
		// Вывод либо ИНН КПП страницы, либо ИНН, КПП, Почтовый Индекс, КодРегиона ДопСтрок
		
		// ИмяОбласти для ИНН КПП страницы - ИНН1, КПП1
		// Областьмакета имеет именованные области ИНН1_1, ИНН1_2.. ИНН1_10
		
		// ИмяОбласти для ИНН, КПП, Почтовый Индекс, КодРегиона ДопСтрок - вида П000000000201_3
		// где П000000000201 имя поля, _3 - номер ДопСтроки на печатном листе
		// Областьмакета имеет именованную область П000000000201_2_3
		// где П000000000201 имя поля, _2 - номер символа, _3 - номер ДопСтроки на печатном листе
		
		Если СтрНайти(ИмяОбласти, "_") = 0 Тогда
		    // ИНН1, КПП1
			Если СтрНайти(ИмяОбласти, "ИНН") > 0 или СтрНайти(ИмяОбласти, "КПП") > 0 Тогда
			
				Для Ном = 1 По СтрДлина(СтрВыводимоеЗначение) Цикл
					ОбластьМакета.Области[ИмяОбласти + "_" + Ном].Значение = Сред(СтрВыводимоеЗначение, Ном, 1);
				КонецЦикла;	
				
			Иначе
				
				Для Ном = 1 По СтрДлина(СтрВыводимоеЗначение) Цикл
					ОбластьМакета.Области[ИмяОбласти + Ном].Значение = Сред(СтрВыводимоеЗначение, Ном, 1);
				КонецЦикла;
			
			КонецЕсли; 
			
			
		Иначе
			
			Для Ном = 1 По СтрДлина(СтрВыводимоеЗначение) Цикл
				ОбластьМакета.Области[Лев(ИмяОбласти, 14) + Ном + "_" + Прав(ИмяОбласти, 1)].Значение = Сред(СтрВыводимоеЗначение, Ном, 1);
			КонецЦикла;	
		
		КонецЕсли; 
		
	КонецЕсли;
					
КонецПроцедуры

Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы)
	
	ИмяФормыОбъекта = СтруктураПараметровСтраницы.ИмяФормыОбъекта;
	
	МакетПечати = ПолучитьМакетПечатнойФормы(ИмяФормыОбъекта, "Титульный_20140101");
		
	Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
	Область_Ограничители = МакетПечати.ПолучитьОбласть("Ограничители");
	
	ИНН = СтрЗначениеПоКлючуСтруктуры("ИНН1", СтруктураДанныхТитульный);
	Если СтрДлина(ИНН) = 10 Тогда	
		ИНН = "00" + ИНН;	
	КонецЕсли; 
	
	КПП = СтрЗначениеПоКлючуСтруктуры("КПП1", СтруктураДанныхТитульный);
		
		
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		
	Область_ОсновнаяЧасть = МакетПечати.ПолучитьОбласть("ОсновнаяЧасть");
			
	// Выводим ИНН, КПП и сведения по лицензии
	ВывестиВКвадратики(Область_ОсновнаяЧасть, "ИНН1", ИНН);
	ВывестиВКвадратики(Область_ОсновнаяЧасть, "КПП1", КПП);
	
	// Вид документа и номер корректировки	
	Если НомерКорректировки > 0 Тогда
	    ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ВидДокументаКорректирующий", "V");
	Иначе	
	    ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ВидДокументаПервичный", "V");
	КонецЕсли;
	
	СтрНомерКорректировки = Формат(НомерКорректировки, "ЧЦ=2; ЧВН=");
	ВывестиВКвадратики(Область_ОсновнаяЧасть, "НомКорр", СтрНомерКорректировки);
	
	// Отчетный период
	Для Кв = 1 По 4 Цикл
	    		
		ТекОтчетныйПериод = СтрЗначениеПоКлючуСтруктуры("ОтчетныйПериод" + Кв + "Кв", СтруктураДанныхТитульный); 
	    Если ТекОтчетныйПериод = "V" Тогда
				
			ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ОтчетныйПериод" + Кв + "Кв", "V");
								
		КонецЕсли;
	
	КонецЦикла; 
	
	// Отчетный Год, хранится уже в виде строки, форматировать не надо. (4 клетки)
	ОтчетныйГод = СтрЗначениеПоКлючуСтруктуры("ОтчетныйГод", СтруктураДанныхТитульный);	
	ВывестиВКвадратики(Область_ОсновнаяЧасть, "ОтчетныйГод", ОтчетныйГод);
	
	// ОргИМНС
	ОрганизацияИМНС = СтрЗначениеПоКлючуСтруктуры("ОргИМНС", СтруктураДанныхТитульный);
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ОргИМНС", ОрганизацияИМНС);
	
	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда	
		ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ПоМестуИндивидуальногоПредпринимателя", "V");
	Иначе
		ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ПоМестуОрганизации", "V");	
	КонецЕсли; 
	
						
	// ОргНазв
	ОрганизацияНазв = СтрЗначениеПоКлючуСтруктуры("ОргНазв", СтруктураДанныхТитульный);
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ОргНазв", ОрганизацияНазв);
	
	// Адрес организации
	ПредставлениеАдресаОрганизации = СтруктураДанныхТитульный.ПредставлениеАдресаОрганизации;
	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда	
		ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "АдресИндивидуальногоПредпринимателя", ПредставлениеАдресаОрганизации);
	Иначе
		ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "АдресОрганизации", ПредставлениеАдресаОрганизации);	
	КонецЕсли;
	
	// Адрес места деятельности организации
	ПредставлениеАдресаМестаДеятельности = СтруктураДанныхТитульный.МестоДеятельности;
	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда	
		ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "МестоДеятельностиИП", ПредставлениеАдресаМестаДеятельности);
	Иначе
		ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "МестоДеятельностиОрганизации", ПредставлениеАдресаМестаДеятельности);	
	КонецЕсли;
	
	// ТелОрганизации
	ТелОрганизации = СтрЗначениеПоКлючуСтруктуры("ТелОрганизации", СтруктураДанныхТитульный);
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ТелОрганизации", ТелОрганизации);
	
	// ЭлектроннаяПочта
	ЭлектроннаяПочта = СтрЗначениеПоКлючуСтруктуры("ЭлектроннаяПочта", СтруктураДанныхТитульный);
	ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ЭлектроннаяПочта", ЭлектроннаяПочта);
	
	// Количество приложений Прил (3 клетки)
	КолПрил = ЗначениеПоКлючуСтруктуры("Прил", СтруктураДанныхТитульный);
	КолПрил = ?(КолПрил = Неопределено, 0, КолПрил);
	
	Если НЕ ( ТипЗнч(КолПрил) = Тип("Строка") или ТипЗнч(КолПрил) = Тип("Булево") или ТипЗнч(КолПрил) = Тип("Число") ) Тогда
	    КолПрил = 0;
	ИначеЕсли ТипЗнч(КолПрил) = Тип("Строка") Тогда
		
		КолПрил = СтрЗаменить(КолПрил, " ", "");
		КолПрил = СтрЗаменить(КолПрил, "-", "");
		КолПрил = СтрЗаменить(КолПрил, "+", "");
		
		Если НЕ РегламентированнаяОтчетностьАЛКО.ВСтрокеВсеЦифры(КолПрил) Тогда
		    КолПрил = 0;		
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Число(КолПрил) > 0 Тогда
	
		СтрКолПрил	  = Формат(Число(КолПрил), "ЧЦ=3; ЧВН=");
		
		ВывестиВКвадратики(Область_ОсновнаяЧасть, "Прил", СтрКолПрил);	
	
	КонецЕсли; 
	
	// ОргДиректор и подписи.	
	ОргДиректор = СтрЗначениеПоКлючуСтруктуры("ОргДиректор", СтруктураДанныхТитульный);
	
	// Дата подписи  ДатаПодписиРук и ДатаПодписиБух (8 клеток)
	СтрДатаПодписи = Строка(СтруктураДанныхТитульный.ДатаПодписи);		
	СтрДатаПодписи = Лев(СтрЗаменить(СтрДатаПодписи, ".", ""), 8);
	СтрДатаПодписи = ?(СтрДатаПодписи = "01010001", "        ", СтрДатаПодписи);
	
	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		
		ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ОргИндивидуальныйПредприниматель", ОргДиректор);
		
		Если ЗначениеЗаполнено(ОргДиректор) Тогда
		    ВывестиВКвадратики(Область_ОсновнаяЧасть, "ДатаПодписиИП", СтрДатаПодписи);	
		КонецЕсли;
		
	Иначе
		
		ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ОргДиректор", ОргДиректор);
		
		Если ЗначениеЗаполнено(ОргДиректор) Тогда
		    ВывестиВКвадратики(Область_ОсновнаяЧасть, "ДатаПодписиРук", СтрДатаПодписи);	
		КонецЕсли;
		
		// ОргБухгалтер только для организаций.
		ОргБухгалтер = СтрЗначениеПоКлючуСтруктуры("ОргБухгалтер", СтруктураДанныхТитульный);
		ВывестиПолеЦеликом(Область_ОсновнаяЧасть, "ОргБухгалтер", ОргБухгалтер);
		
		Если ЗначениеЗаполнено(ОргБухгалтер) Тогда
		    ВывестиВКвадратики(Область_ОсновнаяЧасть, "ДатаПодписиБух", СтрДатаПодписи);	
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывод сформированного листа
	ПечатнаяФорма.Вывести(Область_ОсновнаяЧасть);
	ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
	ПечатнаяФорма.Вывести(Область_Ограничители);
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
								
КонецПроцедуры

Функция ЗаполнитьПоСтраницеЛицензии(ИндексСтраницы)
	
	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;
		
	// Удалим колонки которых нет в таблице по организации в целом.
	// Это колонки 13 и 18.
	
	ТекстЗапросаЛицензии = "
	|ВЫБРАТЬ
	|АлкоПрил12Лицензии.П000000000201,
	|АлкоПрил12Лицензии.П000000000202,
	|АлкоПрил12Лицензии.П000000000203,
	|АлкоПрил12Лицензии.П000000000204,
	|АлкоПрил12Лицензии.П000000000205,
	|АлкоПрил12Лицензии.П000000000206,
	|АлкоПрил12Лицензии.П000000000207
	|
	|ИЗ
	|РегистрСведений.СведенияРеглОтчетАлкоЛицензии КАК АлкоПрил12Лицензии
	|
	|ГДЕ (АлкоПрил12Лицензии.Документ = &Документ) 
	|И (АлкоПрил12Лицензии.Активно = Истина)
	|И (АлкоПрил12Лицензии.ИндексСтраницы = &ИндексСтраницы )
	|";
	
	
	ЗапросЛицензии = Новый Запрос;
	ЗапросЛицензии.Текст = ТекстЗапросаЛицензии;	
			
	ЗапросЛицензии.Параметры.Вставить("Документ", ДокОтчета);
	
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы01;	
	ИндексСтраницыРегистра = ПолучитьИндексСтраницыРегистра(ИдГруппы, ИндексСтраницы);
	 
	ЗапросЛицензии.Параметры.Вставить("ИндексСтраницы", ИндексСтраницыРегистра);	
							
	Результат = ЗапросЛицензии.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы)
	
	ИмяФормыОбъекта = СтруктураПараметровСтраницы.ИмяФормыОбъекта;
	
	МакетПечати = ПолучитьМакетПечатнойФормы(ИмяФормыОбъекта, "Лицензии");
		
	Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
	Область_Ограничители = МакетПечати.ПолучитьОбласть("Ограничители");
	
	КолДопСтрокНаПечатномЛисте = 6;
	
	ИНН = СтруктураДанныхТитульный.ИНН1;
	Если СтрДлина(ИНН) = 10 Тогда	
		ИНН = "00" + ИНН;	
	КонецЕсли;
	КПП = СтруктураДанныхТитульный.КПП1;
			
	ИндексЛиста = -1;
	Для Каждого ЛистЛицензий Из ТаблицаСтраницыЛицензии Цикл
		
		ИндексЛиста = ИндексЛиста + 1;
				
		ТаблицаДопСтрок = ЗаполнитьПоСтраницеЛицензии(ИндексЛиста);
		
		ОбработаноСтрок = ОбработаноСтрок + ТаблицаДопСтрок.Количество();
	
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Адреса мест осуществления деятельности.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
			
		КонецЕсли;
		
		СтруктураДанныеЛиста = ЛистЛицензий.Данные[0].Значение;
		
		// На каждой печатной странице - только 6 строк многострочной части
		КолДопСтрок = ТаблицаДопСтрок.Количество();
		КолПечатныхЛистов = Цел(КолДопСтрок / КолДопСтрокНаПечатномЛисте) 
					+ ?(КолДопСтрок % КолДопСтрокНаПечатномЛисте = 0, 0, 1);
		// Минимум всегда хотя бы 1 лист			
		КолПечатныхЛистов = ?(КолПечатныхЛистов = 0, 1, КолПечатныхЛистов);
		
		ОсталосьДопСтрок = КолДопСтрок;
		
		Для ИндПечЛиста = 1 По КолПечатныхЛистов Цикл
			
			ПечатнаяФорма = Новый ТабличныйДокумент();
			ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
			ПечатнаяФорма.ОтображатьСетку     = Ложь;
			ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
			ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
			ПечатнаяФорма.Автомасштаб         = Истина;
			ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		
			Область_ОсновнаяЧасть = МакетПечати.ПолучитьОбласть("ОсновнаяЧасть");
			
			
			// Выводим ИНН, КПП и сведения по лицензии
			ВывестиВКвадратики(Область_ОсновнаяЧасть, "ИНН1", ИНН);
			ВывестиВКвадратики(Область_ОсновнаяЧасть, "КПП1", КПП);
						
		    
			// Выводим ДопСтроки, их на Печатном листе 6
			Для НомПечСтроки = 1 По КолДопСтрокНаПечатномЛисте Цикл
			
				Если ОсталосьДопСтрок > 0 Тогда
				    					
					ТекущийИндексДопСтроки = КолДопСтрок - ОсталосьДопСтрок;
					ТекущаяСтрока = ТаблицаДопСтрок[ТекущийИндексДопСтроки];
					
					// в строке 7 полей
					Для Ном = 1 По 7 Цикл
					
						ИмяРеквизита = "П00000000020" + Ном;
						ЗначениеРеквизита = ТекущаяСтрока[ИмяРеквизита];
						
						// ИмяОбласти вида П000000000201_3
						// где П000000000201 имя поля, _3 - номер ДопСтроки на печатном листе
						ИмяОбласти = ИмяРеквизита + "_" + НомПечСтроки;
						
						// первые 3 поля - вывод в квадратики
						Если Ном <= 3 Тогда						
							ВывестиВКвадратики(Область_ОсновнаяЧасть, ИмяОбласти, ЗначениеРеквизита);
						Иначе
							ВывестиПолеЦеликом(Область_ОсновнаяЧасть, ИмяОбласти, ЗначениеРеквизита);						
						КонецЕсли; 
					
					КонецЦикла; 
					
				    ОсталосьДопСтрок = ОсталосьДопСтрок - 1;
					
					ОбработаноСтрок = ОбработаноСтрок + 1;
		            
				КонецЕсли; 
			
			КонецЦикла;
			
			// Информируем о ходе выполнения.
			Если НужноОбработатьСтрок > 0 Тогда
				
				РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
					"Печать раздела Адреса мест осуществления деятельности.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
				
			КонецЕсли;
		
			// Вывод сформированного листа
			ПечатнаяФорма.Вывести(Область_ОсновнаяЧасть);
			ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
			ПечатнаяФорма.Вывести(Область_Ограничители);
			
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);			
			// Вывод следующего печатного листа, относящегося к текущему листу раздела Лицензий		
		КонецЦикла;
				
		// Вывод следующего листа раздела Лицензий	
	КонецЦикла;
				
КонецПроцедуры

Функция ЗаполнитьПоВсейОрганизацииРаздел1()

	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	// Удалим колонки которых нет в таблице по организации в целом.
	// Это колонки 13 и 18.
	
	ТекстЗапросаРаздел1 = "
	|ВЫБРАТЬ
	|АлкоПрил12Раздел1.П000010000301 КАК П000010000101,
	|АлкоПрил12Раздел1.П000010000302 КАК П000010000102,
	|АлкоПрил12Раздел1.П000010000303 КАК П000010000103,
	|АлкоПрил12Раздел1.П000010000304 КАК П000010000104,
	|АлкоПрил12Раздел1.П000010000305 КАК П000010000105,
	|
	|СУММА(АлкоПрил12Раздел1.П000010000306) КАК П000010000106,
	|СУММА(АлкоПрил12Раздел1.П000010000307) КАК П000010000107,
	|СУММА(АлкоПрил12Раздел1.П000010000308) КАК П000010000108,
	|СУММА(АлкоПрил12Раздел1.П000010000309) КАК П000010000109,
	|СУММА(АлкоПрил12Раздел1.П000010000310) КАК П000010000110,
	|СУММА(АлкоПрил12Раздел1.П000010000311) КАК П000010000111,
	|СУММА(АлкоПрил12Раздел1.П000010000312) КАК П000010000112,
	|СУММА(АлкоПрил12Раздел1.П000010000313) КАК П000010000113,
	|СУММА(АлкоПрил12Раздел1.П000010000314) КАК П000010000114,
	|СУММА(АлкоПрил12Раздел1.П000010000315) КАК П000010000115,
	|СУММА(АлкоПрил12Раздел1.П000010000316) КАК П000010000116,
	|СУММА(АлкоПрил12Раздел1.П000010000317) КАК П000010000117,
	|
	|СУММА(АлкоПрил12Раздел1.П000010000318) КАК П000010000118
	|
	|ИЗ
	|	
	|(ВЫБРАТЬ
	|РегистрСведенийАлкоПрил12Раздел1.*
	|
	|ИЗ
	|РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел1 КАК РегистрСведенийАлкоПрил12Раздел1
	|
	|ГДЕ (РегистрСведенийАлкоПрил12Раздел1.Документ = &Документ) 
	|И (РегистрСведенийАлкоПрил12Раздел1.Активно = Истина)
	|И (РегистрСведенийАлкоПрил12Раздел1.ИндексСтраницы В (&МассивИндексовСтраниц))) КАК АлкоПрил12Раздел1
	|	
    |СГРУППИРОВАТЬ ПО 
	|АлкоПрил12Раздел1.П000010000301, 
	|АлкоПрил12Раздел1.П000010000302, 
	|АлкоПрил12Раздел1.П000010000303, 
	|АлкоПрил12Раздел1.П000010000304, 
	|АлкоПрил12Раздел1.П000010000305
	|
	|УПОРЯДОЧИТЬ ПО
	|АлкоПрил12Раздел1.П000010000301 ВОЗР, 
	|АлкоПрил12Раздел1.П000010000302 ВОЗР, 
	|АлкоПрил12Раздел1.П000010000303 ВОЗР, 
	|АлкоПрил12Раздел1.П000010000304 ВОЗР, 
	|АлкоПрил12Раздел1.П000010000305 ВОЗР
	|";
	
	ЗапросРаздел1 = Новый Запрос;
	ЗапросРаздел1.Текст = ТекстЗапросаРаздел1;
		
	ЗапросРаздел1.Параметры.Вставить("Документ", ДокОтчета);
	
	СервисРегистровРаздел1 = СтруктураСервисРегистров["СведенияРеглОтчетАлкоПрил12Раздел1"];
	МассивИндексовСтраниц = СервисРегистровРаздел1.ВыгрузитьКолонку("ИндексСтраницыРегистра");
	
	ЗапросРаздел1.Параметры.Вставить("МассивИндексовСтраниц", МассивИндексовСтраниц);
	
	Результат = ЗапросРаздел1.Выполнить().Выгрузить();
		
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьПоПодразделениюРаздел1(ИндексСтраницы)
	
	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	ТекстЗапросаРаздел1 = "
	|ВЫБРАТЬ
	|АлкоПрил12Раздел1.*
	|
	|ИЗ
	|РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел1 КАК АлкоПрил12Раздел1
	|
	|ГДЕ (АлкоПрил12Раздел1.Документ = &Документ)
	|И (АлкоПрил12Раздел1.Активно = Истина)
	|И (АлкоПрил12Раздел1.ИндексСтраницы = &ИндексСтраницыРегистра)
	|";
	
	
	ЗапросРаздел1 = Новый Запрос;
	ЗапросРаздел1.Текст = ТекстЗапросаРаздел1;	
			
	ЗапросРаздел1.Параметры.Вставить("Документ", ДокОтчета);
	
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;	
	ИндексСтраницыРегистра = ПолучитьИндексСтраницыРегистра(ИдГруппы, ИндексСтраницы);
		
	ЗапросРаздел1.Параметры.Вставить("ИндексСтраницыРегистра", ИндексСтраницыРегистра);	
							
	Результат = ЗапросРаздел1.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиНаПечатьРаздел1(СтруктураПараметровСтраницы)
	
	ИмяФормыОбъекта = СтруктураПараметровСтраницы.ИмяФормыОбъекта;
	
	МакетПечати = ПолучитьМакетПечатнойФормы(ИмяФормыОбъекта, "Раздел1_20140101");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
	Область_Шапка = МакетПечати.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(Область_Шапка);
	
	Область_РеквизитыОрганизации = МакетПечати.ПолучитьОбласть("РеквизитыОрганизации");
	Область_РеквизитыОрганизации.Области.ЗаголовокРеквизитов.Текст = "Сведения по организации";
	Наименование = СокрЛП(СтруктураДанныхТитульный.ОргНазв);
	ИНН = СтруктураДанныхТитульный.ИНН1;
	КПП = СтруктураДанныхТитульный.КПП1;
	АдресОрганизации = Неопределено;
	Адрес = Неопределено;
	ДополнительныеДанные.Титульный.Свойство("АдресОрганизации", АдресОрганизации);
	Если АдресОрганизации <> Неопределено Тогда
		АдресОрганизации.Свойство("Адрес", Адрес);
	КонецЕсли;
	Если Адрес = Неопределено Тогда
		Сведения = "АдрЮР";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
		Адрес = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрЮр);
	КонецЕсли;
	ТекстРеквизитов = Наименование + ", ИНН " + ИНН + ", КПП " + КПП + ", Адрес: " + Адрес;
	Область_РеквизитыОрганизации.Области.Реквизиты.Текст = ТекстРеквизитов;
	ПечатнаяФорма.Вывести(Область_РеквизитыОрганизации);
	
	// Формируем строки по организации в целом
	
	ДанныеПоОрганизации = ЗаполнитьПоВсейОрганизацииРаздел1();
	
	ОбработаноСтрок = ОбработаноСтрок + ДанныеПоОрганизации.Количество();
	
	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
			"Печать раздела Раздел 1.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
		
	КонецЕсли;
	
	НС = 1;
	ИмяКолонкиМакетаНС = "П000010000300";
		
	Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
		Область_Строка = МакетПечати.ПолучитьОбласть("Строка");
		Для Каждого Колонка Из ДанныеПоОрганизации.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000100001", "П0000100003");
			Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
				Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		
		// Выводим номер строки
		Область_Строка.Области[ИмяКолонкиМакетаНС].Значение = НС;

		ПечатнаяФорма.Вывести(Область_Строка);
		
		НС = НС + 1;
		
		ОбработаноСтрок = ОбработаноСтрок + 1;
		
		Если (НужноОбработатьСтрок > 0) и (ОбработаноСтрок % 3000 = 0) Тогда
		
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Раздел 1.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
			"Печать раздела Раздел 1.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
		
	КонецЕсли;
	
	// Для пустой декларации надо вывести просто пустую форму.
	Если ДанныеПоОрганизации.Количество() = 0 Тогда
		
	    Область_Строка = МакетПечати.ПолучитьОбласть("Строка");
		Область_Строка.Области[ИмяКолонкиМакетаНС].Значение = 1;
		
		ПечатнаяФорма.Вывести(Область_Строка);
	
	КонецЕсли;
	
	
	ДанныеПоОрганизации.Свернуть("П000010000102", "П000010000106, П000010000107, П000010000108, П000010000109,
		|П000010000110, П000010000111, П000010000112, П000010000113, П000010000114, П000010000115, П000010000116, П000010000117, П000010000118");
	Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
		Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
		Область_Строка.Области.ОписаниеИтого.Текст = "Итого по коду " + СтрокаДанных.П000010000102;
		Для Каждого Колонка Из ДанныеПоОрганизации.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000100001", "П0000100004");
			Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
				Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(Область_Строка);
	КонецЦикла;
	
	// Для пустой декларации надо вывести просто пустую форму.
	Если ДанныеПоОрганизации.Количество() = 0 Тогда
		
	    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
		Область_Строка.Области.ОписаниеИтого.Текст = "Итого по коду";
		
		ПечатнаяФорма.Вывести(Область_Строка);
	
	КонецЕсли;
	
	ДанныеПоОрганизации.Свернуть( , "П000010000106, П000010000107, П000010000108, П000010000109,
		|П000010000110, П000010000111, П000010000112, П000010000113, П000010000114, П000010000115, П000010000116, П000010000117, П000010000118");
	Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
		Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
		Область_Строка.Области.ОписаниеИтого.Текст = "ИТОГО";
		Для Каждого Колонка Из ДанныеПоОрганизации.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000100001", "П0000100004");
			Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
				Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(Область_Строка);
	КонецЦикла;
	
	// Для пустой декларации надо вывести просто пустую форму.
	Если ДанныеПоОрганизации.Количество() = 0 Тогда
		
	    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
		Область_Строка.Области.ОписаниеИтого.Текст = "ИТОГО";
		
		ПечатнаяФорма.Вывести(Область_Строка);
	
	КонецЕсли;
	
	ДанныеПоОрганизации.Очистить();
	
	ТаблицаСтраниц = ТаблицаСтраницыРаздел1;
		
	ИндексЛиста = 0;
	Для Каждого Лист Из ТаблицаСтраниц Цикл
		
		Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
		ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
		
		ДанныеЛиста = Лист.Данные[0].Значение;
				
		ДанныеПоПодразделению = ЗаполнитьПоПодразделениюРаздел1(ИндексЛиста);
		
		ОбработаноСтрок = ОбработаноСтрок + ДанныеПоПодразделению.Количество();
	
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Раздел 1.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
			
		КонецЕсли;
		
		Область_РеквизитыОрганизации = МакетПечати.ПолучитьОбласть("РеквизитыОрганизации");
		Область_РеквизитыОрганизации.Области.ЗаголовокРеквизитов.Текст = "Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса)";
		
		Реквизиты = ?(ЗначениеЗаполнено(ДанныеЛиста.ОбособленноеПодразделение) 
					  и ДанныеЛиста.ОбособленноеПодразделение <> "Заполнить", ДанныеЛиста.ОбособленноеПодразделение, ""); 
		Область_РеквизитыОрганизации.Области.Реквизиты.Текст = Реквизиты;
		
		ПечатнаяФорма.Вывести(Область_РеквизитыОрганизации);
		
		НС = 1;
				
		Для Каждого СтрокаДанных Из ДанныеПоПодразделению Цикл
			
			СтрокаЗаполнена = Ложь;
			
			Область_Строка = МакетПечати.ПолучитьОбласть("Строка");
			Для Каждого Колонка Из ДанныеПоПодразделению.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИмяКолонкиМакета = ИмяКолонки;
				Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
					Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
					СтрокаЗаполнена = СтрокаЗаполнена или ЗначениеЗаполнено(СтрокаДанных[ИмяКолонки]);
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаЗаполнена Тогда
			    Продолжить;
			КонецЕсли; 
			
			// Присвоим номер строки.
			Область_Строка.Области[ИмяКолонкиМакетаНС].Значение = НС;
				
			ПечатнаяФорма.Вывести(Область_Строка);
			
			НС = НС + 1;
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
		
			Если (НужноОбработатьСтрок > 0) и (ОбработаноСтрок % 3000 = 0) Тогда
			
				РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
					"Печать раздела Раздел 1.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
				
			КонецЕсли;
			    
		КонецЦикла;
		
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Раздел 1.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
				
		КонецЕсли;
		
		// Для пустой декларации надо вывести просто пустую форму.
		Если ДанныеПоПодразделению.Количество() = 0 Тогда
			
		    Область_Строка = МакетПечати.ПолучитьОбласть("Строка");
			Область_Строка.Области[ИмяКолонкиМакетаНС].Значение = 1;
			
			ПечатнаяФорма.Вывести(Область_Строка);
		
		КонецЕсли;
		
		ДанныеПоПодразделению.Свернуть("П000010000302", "П000010000306, П000010000307, П000010000308, П000010000309,
			|П000010000310, П000010000311, П000010000312, П000010000313, П000010000314, П000010000315, П000010000316, П000010000317, П000010000318");
		Для Каждого СтрокаДанных Из ДанныеПоПодразделению Цикл
				
			СтрокаЗаполнена = Ложь;
			
			Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
			Область_Строка.Области.ОписаниеИтого.Текст = "Итого по коду " + СтрокаДанных.П000010000302;
			Для Каждого Колонка Из ДанныеПоПодразделению.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000100003", "П0000100004");
				Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
					Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
					СтрокаЗаполнена = СтрокаЗаполнена или ЗначениеЗаполнено(СтрокаДанных[ИмяКолонки]);
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаЗаполнена Тогда
			    Продолжить;
			КонецЕсли; 
			
			ПечатнаяФорма.Вывести(Область_Строка);
		КонецЦикла;
		
		// Для пустой декларации надо вывести просто пустую форму.
		Если ДанныеПоПодразделению.Количество() = 0 Тогда
			
		    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
			Область_Строка.Области.ОписаниеИтого.Текст = "Итого по коду";
			ПечатнаяФорма.Вывести(Область_Строка);
		
		КонецЕсли; 
		
		ДанныеПоПодразделению.Свернуть( , "П000010000306, П000010000307, П000010000308, П000010000309,
			|П000010000310, П000010000311, П000010000312, П000010000313, П000010000314, П000010000315, П000010000316, П000010000317, П000010000318");
		Для Каждого СтрокаДанных Из ДанныеПоПодразделению Цикл
			
			СтрокаЗаполнена = Ложь;
			
			Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
			Область_Строка.Области.ОписаниеИтого.Текст = "ИТОГО";
			Для Каждого Колонка Из ДанныеПоПодразделению.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000100003", "П0000100004");
				Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
					Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
					СтрокаЗаполнена = СтрокаЗаполнена или ЗначениеЗаполнено(СтрокаДанных[ИмяКолонки]);
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаЗаполнена Тогда
			    Продолжить;
			КонецЕсли; 
			
			ПечатнаяФорма.Вывести(Область_Строка);
		КонецЦикла;
		
		// Для пустой декларации надо вывести просто пустую форму.
		Если ДанныеПоПодразделению.Количество() = 0 Тогда
			
		    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
			Область_Строка.Области.ОписаниеИтого.Текст = "ИТОГО";
			ПечатнаяФорма.Вывести(Область_Строка);
		
		КонецЕсли;
		
		ИндексЛиста = ИндексЛиста + 1;
	
	КонецЦикла;
	
	ДанныеПоПодразделению.Очистить();
	
	Область_Подвал = МакетПечати.ПолучитьОбласть("Подвал");
	
	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		
		Область_Подвал.Области.ИндивидуальныйПредприниматель.Значение = СтруктураРеквизитовФормы.Руководитель;
		
	Иначе
		
		Область_Подвал.Области.Руководитель.Значение = СтруктураРеквизитовФормы.Руководитель;
		Область_Подвал.Области.Бухгалтер.Значение = СтруктураРеквизитовФормы.Бухгалтер;
		
	КонецЕсли;
		
	ПечатнаяФорма.Вывести(Область_Подвал);
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
	
КонецПроцедуры

Функция ЗаполнитьПоВсейОрганизацииРаздел2()

	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	ТекстЗапросаРаздел2 = "
	|ВЫБРАТЬ
	|АлкоПрил12Раздел2.П000020000301 КАК П000020000101,
	|АлкоПрил12Раздел2.П000020000302 КАК П000020000102,
	|АлкоПрил12Раздел2.П000020000303 КАК П000020000103,
	|АлкоПрил12Раздел2.П000020000304 КАК П000020000104,
	|АлкоПрил12Раздел2.П000020000305 КАК П000020000105,
	|АлкоПрил12Раздел2.П000020000306 КАК П000020000106,
	|АлкоПрил12Раздел2.П000020000307 КАК П000020000107,
	|АлкоПрил12Раздел2.П000020000308 КАК П000020000108,
	|АлкоПрил12Раздел2.П000020000309 КАК П000020000109,
	|АлкоПрил12Раздел2.П000020000310 КАК П000020000110,
	|АлкоПрил12Раздел2.П000020000311 КАК П000020000111,
	|АлкоПрил12Раздел2.П000020000312 КАК П000020000112
	|
	|ИЗ
	|РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2 КАК АлкоПрил12Раздел2
	|
	|ГДЕ (АлкоПрил12Раздел2.Документ = &Документ) 
	|И (АлкоПрил12Раздел2.Активно = Истина)
	|И (АлкоПрил12Раздел2.ИндексСтраницы В (&МассивИндексовСтраниц))
	|
    |УПОРЯДОЧИТЬ ПО
	|П000020000101 ВОЗР, 
	|П000020000102 ВОЗР, 
	|П000020000103 ВОЗР, 
	|П000020000104 ВОЗР, 
	|П000020000106 ВОЗР,
	|П000020000107 ВОЗР,
	|П000020000109 ВОЗР,
	|П000020000110 ВОЗР
	|";
	
	
	ЗапросРаздел2 = Новый Запрос;
	ЗапросРаздел2.Текст = ТекстЗапросаРаздел2;	
			
	ЗапросРаздел2.Параметры.Вставить("Документ", ДокОтчета);
	
	СервисРегистровРаздел2 = СтруктураСервисРегистров["СведенияРеглОтчетАлкоПрил12Раздел2"];
	МассивИндексовСтраниц = СервисРегистровРаздел2.ВыгрузитьКолонку("ИндексСтраницыРегистра");
	
	ЗапросРаздел2.Параметры.Вставить("МассивИндексовСтраниц", МассивИндексовСтраниц);
								
	Результат = ЗапросРаздел2.Выполнить().Выгрузить();
		
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьПоПодразделениюРаздел2(ИндексСтраницы)
	
	ДокОтчета = СтруктураРеквизитовФормы.мСохраненныйДок;
	// ДопСтроки будем получать через запросы
		
	ТекстЗапросаРаздел2 = "
	|ВЫБРАТЬ
	|АлкоПрил12Раздел2.*
	|
	|ИЗ
	|РегистрСведений.СведенияРеглОтчетАлкоПрил12Раздел2 КАК АлкоПрил12Раздел2
	|
	|ГДЕ (АлкоПрил12Раздел2.Документ = &Документ)
	|И (АлкоПрил12Раздел2.Активно = Истина)
	|И (АлкоПрил12Раздел2.ИндексСтраницы = &ИндексСтраницыРегистра)
	|";
	
	
	ЗапросРаздел2 = Новый Запрос;
	ЗапросРаздел2.Текст = ТекстЗапросаРаздел2;	
			
	ЗапросРаздел2.Параметры.Вставить("Документ", ДокОтчета);
	
	ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы22;	
	ИндексСтраницыРегистра = ПолучитьИндексСтраницыРегистра(ИдГруппы, ИндексСтраницы);
		
	ЗапросРаздел2.Параметры.Вставить("ИндексСтраницыРегистра", ИндексСтраницыРегистра);	
							
	Результат = ЗапросРаздел2.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиНаПечатьРаздел2(СтруктураПараметровСтраницы)
	
	ИмяФормыОбъекта = СтруктураПараметровСтраницы.ИмяФормыОбъекта;
	
	МакетПечати = ПолучитьМакетПечатнойФормы(ИмяФормыОбъекта, "Раздел2");
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
	Область_Шапка = МакетПечати.ПолучитьОбласть("Шапка");
	ПечатнаяФорма.Вывести(Область_Шапка);
	
	Область_РеквизитыОрганизации = МакетПечати.ПолучитьОбласть("РеквизитыОрганизации");
	Область_РеквизитыОрганизации.Области.ЗаголовокРеквизитов.Текст = "Сведения по организации";
	Наименование = СокрЛП(СтруктураДанныхТитульный.ОргНазв);
	ИНН = СтруктураДанныхТитульный.ИНН1;
	КПП = СтруктураДанныхТитульный.КПП1;
	АдресОрганизации = Неопределено;
	Адрес = Неопределено;
	ДополнительныеДанные.Титульный.Свойство("АдресОрганизации", АдресОрганизации);
	Если АдресОрганизации <> Неопределено Тогда
		АдресОрганизации.Свойство("Адрес", Адрес);
	КонецЕсли;
	Если Адрес= Неопределено Тогда
		Сведения = "АдрЮР";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);
		Адрес = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрЮр);
	КонецЕсли;
	ТекстРеквизитов = Наименование + ", ИНН " + ИНН + ", КПП " + КПП + ", Адрес: " + Адрес;
	Область_РеквизитыОрганизации.Области.Реквизиты.Текст = ТекстРеквизитов;
	ПечатнаяФорма.Вывести(Область_РеквизитыОрганизации);
		
	ДанныеПоОрганизации = ЗаполнитьПоВсейОрганизацииРаздел2();
	
	ОбработаноСтрок = ОбработаноСтрок + ДанныеПоОрганизации.Количество();
	
	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда
		
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
			"Печать раздела Раздел 2.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
		
	КонецЕсли;

	НС = 1;
	ИмяКолонкиМакетаНС = "П000020000300";
		
	Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
		Область_Строка = МакетПечати.ПолучитьОбласть("Строка");
		Для Каждого Колонка Из ДанныеПоОрганизации.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000200001", "П0000200003");
			Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
				Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		
		// Выводим номер строки.
		Область_Строка.Области[ИмяКолонкиМакетаНС].Значение = НС;
		
		ПечатнаяФорма.Вывести(Область_Строка);
		
		НС = НС + 1;
		
		ОбработаноСтрок = ОбработаноСтрок + 1;
		
		Если (НужноОбработатьСтрок > 0) и (ОбработаноСтрок % 3000 = 0) Тогда
		
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Раздел 2.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Для пустой декларации надо вывести просто пустую форму.
	Если ДанныеПоОрганизации.Количество() = 0 Тогда
		
	    Область_Строка = МакетПечати.ПолучитьОбласть("Строка");
		Область_Строка.Области[ИмяКолонкиМакетаНС].Значение = 1;
		
		ПечатнаяФорма.Вывести(Область_Строка);
	
	КонецЕсли;
	
	ДанныеПоОрганизации.Свернуть("П000020000102", "П000020000112");
	Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
		Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
		Область_Строка.Области.ОписаниеИтого.Текст = "Итого по коду " + СтрокаДанных.П000020000102;
		Для Каждого Колонка Из ДанныеПоОрганизации.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000200001", "П0000200004");
			Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
				Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		ПечатнаяФорма.Вывести(Область_Строка);
	КонецЦикла;
	
	// Для пустой декларации надо вывести просто пустую форму.
	Если ДанныеПоОрганизации.Количество() = 0 Тогда
		
	    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
		Область_Строка.Области.ОписаниеИтого.Текст = "Итого по коду";
		
		ПечатнаяФорма.Вывести(Область_Строка);
	
	КонецЕсли;
	
	ДанныеПоОрганизации.Свернуть( , "П000020000112");
	Для Каждого СтрокаДанных Из ДанныеПоОрганизации Цикл
		Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
		Область_Строка.Области.ОписаниеИтого.Текст = "ИТОГО";
		Для Каждого Колонка Из ДанныеПоОрганизации.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000200001", "П0000200004");
			Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
				Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		ПечатнаяФорма.Вывести(Область_Строка);
	КонецЦикла;
	
	// Для пустой декларации надо вывести просто пустую форму.
	Если ДанныеПоОрганизации.Количество() = 0 Тогда
		
	    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
		Область_Строка.Области.ОписаниеИтого.Текст = "ИТОГО";
		
		ПечатнаяФорма.Вывести(Область_Строка);
	
	КонецЕсли;
	
	ДанныеПоОрганизации.Очистить();
	
	ТаблицаСтраниц = ТаблицаСтраницыРаздел2;
		
	ИндексЛиста = 0;
	Для Каждого Лист Из ТаблицаСтраниц Цикл
		
		Область_ПустаяСтрока = МакетПечати.ПолучитьОбласть("ПустаяСтрока");
		ПечатнаяФорма.Вывести(Область_ПустаяСтрока);
		
		ДанныеЛиста = Лист.Данные[0].Значение;
				
		ДанныеПоПодразделению = ЗаполнитьПоПодразделениюРаздел2(ИндексЛиста);
		
		ОбработаноСтрок = ОбработаноСтрок + ДанныеПоПодразделению.Количество();
		
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Раздел 2.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
			
		КонецЕсли;
			
		Область_РеквизитыОрганизации = МакетПечати.ПолучитьОбласть("РеквизитыОрганизации");
		Область_РеквизитыОрганизации.Области.ЗаголовокРеквизитов.Текст = "Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса)";
		
		Реквизиты = ?(ЗначениеЗаполнено(ДанныеЛиста.ОбособленноеПодразделение) 
					  и ДанныеЛиста.ОбособленноеПодразделение <> "Заполнить", ДанныеЛиста.ОбособленноеПодразделение, ""); 
		Область_РеквизитыОрганизации.Области.Реквизиты.Текст = Реквизиты;
		
		ПечатнаяФорма.Вывести(Область_РеквизитыОрганизации);
		
		НС = 1;
		
		Для Каждого СтрокаДанных Из ДанныеПоПодразделению Цикл
			
			СтрокаЗаполнена = Ложь;
			
			Область_Строка = МакетПечати.ПолучитьОбласть("Строка");
			Для Каждого Колонка Из ДанныеПоПодразделению.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИмяКолонкиМакета = ИмяКолонки;
				Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
					Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
					СтрокаЗаполнена = СтрокаЗаполнена или ЗначениеЗаполнено(СтрокаДанных[ИмяКолонки]);
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаЗаполнена Тогда
			    Продолжить;
			КонецЕсли;
			
			// Присвоим номер строки.
			Область_Строка.Области[ИмяКолонкиМакетаНС].Значение = НС;
				
			ПечатнаяФорма.Вывести(Область_Строка);
			
			НС = НС + 1;
			
			ОбработаноСтрок = ОбработаноСтрок + 1;
		
			Если (НужноОбработатьСтрок > 0) и (ОбработаноСтрок % 3000 = 0) Тогда
			
				РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
					"Печать раздела Раздел 2.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				"Печать раздела Раздел 2.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации);
				
		КонецЕсли;
		
		// Для пустой декларации надо вывести просто пустую форму.
		Если ДанныеПоПодразделению.Количество() = 0 Тогда
			
		    Область_Строка = МакетПечати.ПолучитьОбласть("Строка");
			Область_Строка.Области[ИмяКолонкиМакетаНС].Значение = 1;
			
			ПечатнаяФорма.Вывести(Область_Строка);
		
		КонецЕсли;
		
		ДанныеПоПодразделению.Свернуть("П000020000302", "П000020000312");
		Для Каждого СтрокаДанных Из ДанныеПоПодразделению Цикл
			
			СтрокаЗаполнена = Ложь;
			
			Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
			Область_Строка.Области.ОписаниеИтого.Текст = "Итого по коду " + СтрокаДанных.П000020000302;
			Для Каждого Колонка Из ДанныеПоПодразделению.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000200003", "П0000200004");
				Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
					Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
					СтрокаЗаполнена = СтрокаЗаполнена или ЗначениеЗаполнено(СтрокаДанных[ИмяКолонки]);
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаЗаполнена Тогда
			    Продолжить;
			КонецЕсли;

			ПечатнаяФорма.Вывести(Область_Строка);
		КонецЦикла;
		
		// Для пустой декларации надо вывести просто пустую форму.
		Если ДанныеПоПодразделению.Количество() = 0 Тогда
			
		    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
			Область_Строка.Области.ОписаниеИтого.Текст = "Итого по коду";
			ПечатнаяФорма.Вывести(Область_Строка);
		
		КонецЕсли;
		
		ДанныеПоПодразделению.Свернуть( , "П000020000312");
		Для Каждого СтрокаДанных Из ДанныеПоПодразделению Цикл
			
			СтрокаЗаполнена = Ложь;
			
			Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
			Область_Строка.Области.ОписаниеИтого.Текст = "ИТОГО";
			Для Каждого Колонка Из ДанныеПоПодразделению.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ИмяКолонкиМакета = СтрЗаменить(ИмяКолонки, "П0000200003", "П0000200004");
				Если Область_Строка.Области.Найти(ИмяКолонкиМакета) <> Неопределено Тогда
					Область_Строка.Области[ИмяКолонкиМакета].Значение = СтрокаДанных[ИмяКолонки];
					СтрокаЗаполнена = СтрокаЗаполнена или ЗначениеЗаполнено(СтрокаДанных[ИмяКолонки]);
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаЗаполнена Тогда
			    Продолжить;
			КонецЕсли;

			ПечатнаяФорма.Вывести(Область_Строка);
		КонецЦикла;
		
		// Для пустой декларации надо вывести просто пустую форму.
		Если ДанныеПоПодразделению.Количество() = 0 Тогда
			
		    Область_Строка = МакетПечати.ПолучитьОбласть("СтрокаИтого");
			Область_Строка.Области.ОписаниеИтого.Текст = "ИТОГО";
			ПечатнаяФорма.Вывести(Область_Строка);
		
		КонецЕсли;
		
		ИндексЛиста = ИндексЛиста + 1;
		
	КонецЦикла;
	
	ДанныеПоПодразделению.Очистить();
	
	Область_Подвал = МакетПечати.ПолучитьОбласть("Подвал");
	
	Если СтруктураДанныхТитульный.ЭтоПБОЮЛ Тогда
		
		Область_Подвал.Области.ИндивидуальныйПредприниматель.Значение = СтруктураРеквизитовФормы.Руководитель;
		
	Иначе
		
		Область_Подвал.Области.Руководитель.Значение = СтруктураРеквизитовФормы.Руководитель;
		Область_Подвал.Области.Бухгалтер.Значение = СтруктураРеквизитовФормы.Бухгалтер;
		
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(Область_Подвал);
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровСтраницы.НаименованиеЛиста);
	
КонецПроцедуры

#КонецОбласти 


#Область ВнешнийОтчет

// Процедуры и функции этой области используются только в случае
// публикации в виде внешнего отчета.

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОписаниеТиповСтрока, "Редакция формы", 20);
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2012Кв3";
	НоваяФорма.ОписаниеОтчета     = "Приложение № 12 к Правилам представления деклараций об объеме производства, оборота и (или) использования этилового спирта, алкогольной и спиртосодержащей продукции, об использовании производственных мощностей (Утверждено ПП РФ от 09.08.2012 № 815).";
	НоваяФорма.РедакцияФормы	  = "от 09.08.2012 № 815.";
	НоваяФорма.ДатаНачалоДействия = '20120101';
	НоваяФорма.ДатаКонецДействия  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

 мВерсияОтчета = "БПКОРП 3.0.42.54.4";
 
#КонецОбласти 


#КонецОбласти






 

#КонецЕсли
