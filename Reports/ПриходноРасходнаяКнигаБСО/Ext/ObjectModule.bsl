Перем мСписокОтбора;
Перем ПостроительОстаткиБСО;
Перем ПостроительГлавный;

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаполнитьНастройки();
	ДокументРезультат.Вывести(СформироватьОтчет());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНастройки()
	ПостроительОстаткиБСО.Текст =
	"ВЫБРАТЬ
	|	БланкиСтрогойОтчетности.Склад КАК Склад,
	|	БланкиСтрогойОтчетности.Номенклатура КАК Номенклатура,
	|	БланкиСтрогойОтчетности.Тип КАК Тип,
	|	БланкиСтрогойОтчетности.Серия КАК Серия,
	|	БланкиСтрогойОтчетности.Номер КАК Номер,
	|	БланкиСтрогойОтчетности.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.БланкиСтрогойОтчетности.Остатки(&Дата, {(Склад).* КАК Склад, (ФизическоеЛицо).* КАК ФизическоеЛицо, (Номенклатура).* КАК Номенклатура, (Тип).* КАК Тип, (Серия) КАК Серия}) КАК БланкиСтрогойОтчетности
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Тип,
	|	Серия,
	|	Номер
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Для Каждого ЭлементСписка Из мСписокОтбора Цикл
		Если ПостроительОстаткиБСО.Отбор.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			ПостроительОстаткиБСО.Отбор.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПостроительГлавный.Текст =
	"ВЫБРАТЬ
	|	БланкиСтрогойОтчетностиОбороты.Регистратор.Дата КАК ДатаОперации,
	|	БланкиСтрогойОтчетностиОбороты.Регистратор КАК ДокументДвижения,
	|	ПРЕДСТАВЛЕНИЕ(БланкиСтрогойОтчетностиОбороты.Регистратор) КАК ДокументДвиженияПредставление,
	|	ВЫБОР
	|		КОГДА БланкиСтрогойОтчетностиОбороты.КоличествоПриход > 0
	|			ТОГДА ""Приход""
	|		ИНАЧЕ ""Расход""
	|	КОНЕЦ КАК ТипДвижения,
	|	ВЫРАЗИТЬ(БланкиСтрогойОтчетностиОбороты.Регистратор КАК Документ.СписаниеИзЭксплуатации).ТипСписанныхБСО КАК ТипСписанныхБСО,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(БланкиСтрогойОтчетностиОбороты.Регистратор) = ТИП(Документ.СписаниеИзЭксплуатации)
	|				ИЛИ ТИПЗНАЧЕНИЯ(БланкиСтрогойОтчетностиОбороты.Регистратор) = ТИП(Документ.ВнутреннееПотреблениеТоваров)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСписание,
	|	БланкиСтрогойОтчетностиОбороты.Склад КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(БланкиСтрогойОтчетностиОбороты.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(БланкиСтрогойОтчетностиОбороты.Склад.ТекущийОтветственный) КАК СкладТекущийОтветственный,
	|	БланкиСтрогойОтчетностиОбороты.Номенклатура КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(БланкиСтрогойОтчетностиОбороты.Номенклатура) КАК НоменклатураПредставление,
	|	БланкиСтрогойОтчетностиОбороты.Тип КАК Тип,
	|	ПРЕДСТАВЛЕНИЕ(БланкиСтрогойОтчетностиОбороты.Тип) КАК ТипПредставление,
	|	БланкиСтрогойОтчетностиОбороты.Серия КАК Серия,
	|	БланкиСтрогойОтчетностиОбороты.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА БланкиСтрогойОтчетностиОбороты.КоличествоПриход <> 0
	|			ТОГДА БланкиСтрогойОтчетностиОбороты.КоличествоПриход
	|		ИНАЧЕ БланкиСтрогойОтчетностиОбороты.КоличествоРасход
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(БланкиСтрогойОтчетностиОбороты.Регистратор) = ТИП(Документ.ПеремещениеТоваров)
	|			ТОГДА БланкиСтрогойОтчетностиОбороты.Регистратор.СкладПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(БланкиСтрогойОтчетностиОбороты.Регистратор) = ТИП(Документ.ВозвратТоваровПоставщику)
	|			ТОГДА БланкиСтрогойОтчетностиОбороты.Регистратор.Контрагент
	|		КОГДА ТИПЗНАЧЕНИЯ(БланкиСтрогойОтчетностиОбороты.Регистратор) = ТИП(Документ.ОприходованиеИзлишковТоваров)
	|			ТОГДА БланкиСтрогойОтчетностиОбороты.Регистратор.Склад
	|		КОГДА ТИПЗНАЧЕНИЯ(БланкиСтрогойОтчетностиОбороты.Регистратор) = ТИП(Документ.ПоступлениеТоваровУслуг)
	|			ТОГДА БланкиСтрогойОтчетностиОбороты.Регистратор.Склад
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Кому,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(БланкиСтрогойОтчетностиОбороты.Регистратор) = ТИП(Документ.ПеремещениеТоваров)
	|			ТОГДА БланкиСтрогойОтчетностиОбороты.Регистратор.СкладОтправитель
	|		КОГДА ТИПЗНАЧЕНИЯ(БланкиСтрогойОтчетностиОбороты.Регистратор) = ТИП(Документ.ВозвратТоваровПоставщику)
	|			ТОГДА БланкиСтрогойОтчетностиОбороты.Регистратор.Склад
	|		КОГДА ТИПЗНАЧЕНИЯ(БланкиСтрогойОтчетностиОбороты.Регистратор) = ТИП(Документ.СписаниеИзЭксплуатации)
	|			ТОГДА """"
	|		КОГДА ТИПЗНАЧЕНИЯ(БланкиСтрогойОтчетностиОбороты.Регистратор) = ТИП(Документ.ПоступлениеТоваровУслуг)
	|			ТОГДА БланкиСтрогойОтчетностиОбороты.Регистратор.Контрагент
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОтКого,
	|	БланкиСтрогойОтчетностиОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(БланкиСтрогойОтчетностиОбороты.ФизическоеЛицо) КАК ФизическоеЛицоПредставление
	|ИЗ
	|	РегистрНакопления.БланкиСтрогойОтчетности.Обороты(&ДатаНач, &ДатаКон, Регистратор, {(Склад).* КАК Склад, (ФизическоеЛицо).* КАК ФизическоеЛицо, (Номенклатура).* КАК Номенклатура, (Тип).* КАК Тип, (Серия) КАК Серия}) КАК БланкиСтрогойОтчетностиОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Тип,
	|	БланкиСтрогойОтчетностиОбороты.Регистратор.МоментВремени,
	|	Серия,
	|	Номер
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Номенклатура,
	|	ДокументДвижения
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Для Каждого ЭлементСписка Из мСписокОтбора Цикл
		Если ПостроительГлавный.Отбор.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			ПостроительГлавный.Отбор.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ПостроительГлавный.Отбор.Склад.Значение = Склад;
		ПостроительГлавный.Отбор.Склад.Использование = Истина;
		ПостроительОстаткиБСО.Отбор.Склад.Значение = Склад;
		ПостроительОстаткиБСО.Отбор.Склад.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ПостроительГлавный.Отбор.Номенклатура.Значение = Номенклатура;
		ПостроительГлавный.Отбор.Номенклатура.Использование = Истина;
		ПостроительОстаткиБСО.Отбор.Номенклатура.Значение = Номенклатура;
		ПостроительОстаткиБСО.Отбор.Номенклатура.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ПостроительГлавный.Отбор.ФизическоеЛицо.Значение = ФизическоеЛицо;
		ПостроительГлавный.Отбор.ФизическоеЛицо.Использование = Истина;
		ПостроительОстаткиБСО.Отбор.ФизическоеЛицо.Значение = ФизическоеЛицо;
		ПостроительОстаткиБСО.Отбор.ФизическоеЛицо.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Серия) Тогда
		ПостроительГлавный.Отбор.Серия.Значение = Серия;
		ПостроительГлавный.Отбор.Серия.Использование = Истина;
		ПостроительОстаткиБСО.Отбор.Серия.Значение = Серия;
		ПостроительОстаткиБСО.Отбор.Серия.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тип) Тогда
		ПостроительГлавный.Отбор.Тип.Значение = Тип;
		ПостроительГлавный.Отбор.Тип.Использование = Истина;
		ПостроительОстаткиБСО.Отбор.Тип.Значение = Тип;
		ПостроительОстаткиБСО.Отбор.Тип.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

Функция СформироватьОтчет()
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_ПриходноРасходнаяКнигаБСО";
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСлева = 10;
	ТабДок.ПолеСнизу = 5;
	ТабДок.ПолеСправа = 5;
	
	Макет = ПолучитьМакет("ПриходноРасходнаяКнига");
	
	НачДата = НачалоДня(ДатаНачала);
	КонДата = ?(ЗначениеЗаполнено(ДатаОкончания), КонецДня(ДатаОкончания), ТекущаяДата());
	
	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, НачДата);
	
	ПолучаемаяТаблица = УчетБланковСтрогойОтчетностиСервер.СтруктураСлужебнойТаблицыБСО();
	ПолучаемаяТаблица.Колонки.Добавить("ЭтоСписание");
	ПолучаемаяТаблица.Колонки.Добавить("ТипДвижения");
	ПолучаемаяТаблица.Колонки.Добавить("ТипСписанныхБСО");
	ПолучаемаяТаблица.Колонки.Добавить("Кому");
	ПолучаемаяТаблица.Колонки.Добавить("ОтКого");
	
	ПостроительОстаткиБСО.Параметры.Вставить("Дата", НачДата);
	ПостроительОстаткиБСО.Выполнить();
	ТЗОстаткиНач = ПостроительОстаткиБСО.Результат.Выгрузить();
	ТЗОстаткиНач = СвернутьТаблицуПоИнтервалу(ТЗОстаткиНач);
	
	ПостроительОстаткиБСО.Параметры.Вставить("Дата", Новый Граница(КонДата, ВидГраницы.Включая));
	ПостроительОстаткиБСО.Выполнить();
	ТЗОстаткиКон = ПостроительОстаткиБСО.Результат.Выгрузить();
	ТЗОстаткиКон = СвернутьТаблицуПоИнтервалу(ТЗОстаткиКон);
	
	// приход и расход
	ПостроительГлавный.Параметры.Вставить("ДатаНач", НачДата);
	ПостроительГлавный.Параметры.Вставить("ДатаКон", КонДата);
	ПостроительГлавный.Выполнить();
	РезультатЗапроса = ПостроительГлавный.Результат;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьБланк = Макет.ПолучитьОбласть("НаименованиеБланка");
	ОбластьСклад = Макет.ПолучитьОбласть("Склад");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	НовыйБланк = Истина;
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		Если Не НовыйБланк Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НовыйБланк = Ложь;
		
		ОбластьЗаголовок.Параметры.ОписаниеПериода = ПредставлениеПериода(НачДата, КонДата);
		ОбластьЗаголовок.Параметры.Организация = Организация.НаименованиеПолное;
		ТабДок.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(Склад) Тогда
			ВыборкаДокумент = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаДокумент.Следующий();
			Выборка = ВыборкаДокумент.Выбрать();
			Выборка.Следующий();
			
			ОбластьСклад.Параметры.Склад = Выборка.СкладПредставление + ?(ЗначениеЗаполнено(Выборка.СкладТекущийОтветственный), " (" + Выборка.СкладТекущийОтветственный + ")", "");
			ТабДок.Вывести(ОбластьСклад);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			ВыборкаДокумент = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаДокумент.Следующий();
			Выборка = ВыборкаДокумент.Выбрать();
			Выборка.Следующий();
			
			ОбластьСклад.Параметры.Склад = Выборка.ФизическоеЛицоПредставление;
			ТабДок.Вывести(ОбластьСклад);
		КонецЕсли;
		
		ОбластьБланк.Параметры.НаименованиеБланка = ВыборкаНоменклатура.НоменклатураПредставление;
		
		ТабДок.Вывести(ОбластьБланк);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		
		// Остаток на начало
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ВыборкаНоменклатура.Номенклатура);
		НачальныйОстаток = ТЗОстаткиНач.Скопировать(Отбор);
		
		ТекстБланки = "";
		Количество = 0;
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		Для Каждого СтрокаТЗ Из НачальныйОстаток Цикл
			Количество = Количество + СтрокаТЗ.Количество;
			ТекстБланки = ТекстБланки + СтрокаТЗ.Серия + " " + СтрокаТЗ.НачальныйНомерБСО + " - " + СтрокаТЗ.КонечныйНомерБСО + ", ";
		КонецЦикла;
		ТекстБланки = Лев(ТекстБланки, СтрДлина(ТекстБланки) - 2);
		
		ОбластьСтрока.Параметры.ДатаОперации = НачДата;
		ОбластьСтрока.Параметры.ОстатокКнижек = Количество;
		ОбластьСтрока.Параметры.ОстатокСерияНомер = ТекстБланки;
		ОбластьСтрока.Параметры.Основание = "Остаток";
		ТабДок.Вывести(ОбластьСтрока);
		// Остаток на начало
		
		ВыборкаДокумент = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокумент.Следующий() Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ЗаполнитьЗначенияСвойств(ОбластьСтрока, ВыборкаДокумент);
			ОбластьСтрока.Параметры.Основание = Лев(ВыборкаДокумент.ДокументДвиженияПредставление, СтрДлина(ВыборкаДокумент.ДокументДвиженияПредставление) - 9);
			ОбластьСтрока.Параметры.ДокументДвижения = ВыборкаДокумент.ДокументДвижения;
			ОбластьСтрока.Параметры.ДатаОперации = ВыборкаДокумент.ДатаОперации;
			
			Выборка = ВыборкаДокумент.Выбрать();
			ПолучаемаяТаблица.Очистить();
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ПолучаемаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Серия = СокрЛП(Выборка.Серия);
			КонецЦикла;
			
			Если ПолучаемаяТаблица.Количество() > 0 Тогда
				ПолучаемаяТаблица = УчетБланковСтрогойОтчетностиСервер.СвернутьТаблицуБСО(ПолучаемаяТаблица, Ложь);
			КонецЕсли;
			
			Для Каждого СтрокаТЗ Из ПолучаемаяТаблица Цикл
				ТекстБланки = СтрокаТЗ.Серия + " " + СтрокаТЗ.НачальныйНомерБСО + " - " + СтрокаТЗ.КонечныйНомерБСО;
				
				Если СтрокаТЗ.ТипДвижения = "Приход" Тогда
					ОбластьСтрока.Параметры.ПолученоКнижек = СтрокаТЗ.Количество;
					ОбластьСтрока.Параметры.ПолученоСерияНомер = ТекстБланки;
				ИначеЕсли СтрокаТЗ.ТипДвижения = "Расход" Тогда
					Если СтрокаТЗ.ЭтоСписание Тогда
						Если СтрокаТЗ.ТипСписанныхБСО = Перечисления.ВидыСписанияБСО.Испорчены Тогда
							ОбластьСтрока.Параметры.СписаноИспорченных = ТекстБланки;
						ИначеЕсли СтрокаТЗ.ТипСписанныхБСО = Перечисления.ВидыСписанияБСО.Использованы Тогда
							ОбластьСтрока.Параметры.СписаноКорешки = ТекстБланки;
						ИначеЕсли СтрокаТЗ.ТипСписанныхБСО = Перечисления.ВидыСписанияБСО.Утеряны Тогда
							ОбластьСтрока.Параметры.СписаноУтерянных = ТекстБланки;
						Иначе
							ОбластьСтрока.Параметры.СписаноНеиспользованных = ТекстБланки;
						КонецЕсли;
					Иначе
						ОбластьСтрока.Параметры.ВыданоКнижек = СтрокаТЗ.Количество;
						ОбластьСтрока.Параметры.ВыданоСерияНомер = ТекстБланки;
					КонецЕсли;
				КонецЕсли;
				
				ОбластьСтрока.Параметры.ПолучательОтправитель = "" + ?(СтрокаТЗ.Кому <> "", "Кому: " + СтрокаТЗ.Кому + " ", "") + ?(СтрокаТЗ.ОтКого <> "", "От кого: " + СтрокаТЗ.ОтКого, "");
				ТабДок.Вывести(ОбластьСтрока);
			КонецЦикла;
		КонецЦикла;
		
		// Остаток на конец
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ВыборкаНоменклатура.Номенклатура);
		КонечныйОстаток = ТЗОстаткиКон.Скопировать(Отбор);
		
		ТекстБланки = "";
		Количество = 0;
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		Для Каждого СтрокаТЗ Из КонечныйОстаток Цикл
			Количество = Количество + СтрокаТЗ.Количество;
			ТекстБланки = ТекстБланки + СтрокаТЗ.Серия + " " + СтрокаТЗ.НачальныйНомерБСО + " - " + СтрокаТЗ.КонечныйНомерБСО + ", ";
		КонецЦикла;
		ТекстБланки = Лев(ТекстБланки, СтрДлина(ТекстБланки) - 2);
		
		ОбластьСтрока.Параметры.ДатаОперации = КонДата;
		ОбластьСтрока.Параметры.ОстатокКнижек = Количество;
		ОбластьСтрока.Параметры.ОстатокСерияНомер = ТекстБланки;
		ОбластьСтрока.Параметры.Основание = "Остаток";
		ТабДок.Вывести(ОбластьСтрока);
		// Остаток на конец
		
		ОбластьПодвал.Параметры.ФИОРуководитель = ОтветственныеЛица.РуководительПредставление;
		ОбластьПодвал.Параметры.ФИОГлБухгалтер = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
		ТабДок.Вывести(ОбластьПодвал);
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции

Функция СвернутьТаблицуПоИнтервалу(ИсходнаяТаблица)
	ТЗ = УчетБланковСтрогойОтчетностиСервер.СтруктураСлужебнойТаблицыБСО();
	Для каждого Стр Из ИсходнаяТаблица Цикл
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.Серия = СокрЛП(Стр.Серия);
	КонецЦикла;
	
	Если ТЗ.Количество() > 0 Тогда
		ТЗ = УчетБланковСтрогойОтчетностиСервер.СвернутьТаблицуБСО(ТЗ, Ложь);
	КонецЕсли;
	
	Возврат ТЗ;
КонецФункции

#КонецОбласти

#КонецЕсли

мСписокОтбора = Новый СписокЗначений;
мСписокОтбора.Добавить("Склад");
мСписокОтбора.Добавить("ФизическоеЛицо");
мСписокОтбора.Добавить("Номенклатура");
мСписокОтбора.Добавить("Тип");
мСписокОтбора.Добавить("Серия");

ПостроительОстаткиБСО = Новый ПостроительОтчета;
ПостроительГлавный = Новый ПостроительОтчета;