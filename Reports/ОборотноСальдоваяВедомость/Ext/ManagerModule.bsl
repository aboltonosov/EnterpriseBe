#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура   - флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьПередВыводомЭлементаРезультата", Истина);

	Возврат Результат;

КонецФункции

// Формирует текст, выводимый в заголовке отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  ОрганизацияВНачале - Булево - флаг, используемый для вывода представления организации в начале текста,
//                                если организацию нужно выводить в тексте заголовка.
//
// Возвращаемое значение:
//   Строка      - текст заголовка с учётом периода.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Оборотно-сальдовая ведомость %1'"),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ПараметрыАлгоритма = ПараметрыАлгоритма();
	
	ПодготовитьНаборыДанных(ПараметрыОтчета, ПараметрыАлгоритма);
	
	// Для развернутого сальдо модифицируем выражения полей итога, а также укажем группировки, по которым они должны рассчитываться.
	Если ПараметрыАлгоритма.ВыводитьРазвернутоеСальдо Тогда
		
		СоздатьИтогиРазвернутогоСальдо(ПараметрыАлгоритма);
		
	КонецЕсли;
	
	БухгалтерскиеОтчеты.УстановитьМинимальнуюШиринуПоказателей(ПараметрыАлгоритма.Схема, ПолучитьНаборПоказателей());
	
	Схема = ПараметрыАлгоритма.Схема;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	Для Каждого Параметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Использование = Истина;
	КонецЦикла;
	
	// Проверим список исключаемых счетов: возможно некоторые субсчета стоит из него исключить.
	// Запрос детализации строится с указанием конкретных видов субконто в параметре виртуальной таблицы.
	// Поэтому, если у какого-либо субсчета детализируемого счета нет нужного набора субконто, 
	// он будет исключен из запроса детализации. Такие субсчета не нужно исключать из запроса по счетам.
	СчетаИсключенныеИзЗапросаПоСчетам = СчетаИсключенныеИзЗапросаПоСчетам(ПараметрыАлгоритма.СчетаИсключенныеИзЗапросаПоСчетам, ПараметрыАлгоритма.КоличествоСубконтоДетализацииПоСчетам);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаИсключенныеИзЗапросаПоСчетам", СчетаИсключенныеИзЗапросаПоСчетам);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВыводитьЗабалансовыеСчета", ПараметрыОтчета.ВыводитьЗабалансовыеСчета);
	
	// Формирование структуры отчета
	ПараметрыАлгоритма.Вставить("СписокСчетовПоСубсчетам", БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПоСубсчетам(ПараметрыАлгоритма.НастройкаГруппировки));
	СформироватьСтруктуруОтчета(КомпоновщикНастроек, ПараметрыОтчета, ПараметрыАлгоритма);	
	
КонецПроцедуры

// В процедуре можно уточнить особенности вывода данных в отчет.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - описание выводимых данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт

	// Определим количество группировок по субконто
	КоличествоГруппировок = 0;
	
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.Группировка Цикл
		Если СтрокаТаблицы.Использование Тогда
			КоличествоСубконто = СтрЧислоВхождений(СтрокаТаблицы.ПоСубконто, "+");
			КоличествоГруппировок = Макс(КоличествоГруппировок, КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;

	// Для того чтобы отобразить сумму в валюте после каждой группировки подставляется еще групировка по валюте,
	// удваивая тем самым общее количество группировок отчета. Это нужно учесть.
	КоличествоГруппировок = КоличествоГруппировок + ?(ПараметрыОтчета.ПоказательВалютнаяСумма, КоличествоГруппировок, 0);

	КоличествоСтрокШапки = Макс(КоличествоГруппировок, 1);
	ПараметрыОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки + 1);

	// Обработка шапки отчета
	// Шапка отчета состоит и 4 макетов, макет шапки таблицы, и 3 макета группировок колонок.
	// Поместим ссылки на них в массив для дальнейшей обработки.
	МакетШапкиТаблицы = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетШапки(МакетКомпоновки);
	
	МакетыШапкиОтчета = Новый Массив;
	МакетыШапкиОтчета.Добавить(МакетШапкиТаблицы.Имя);

	Для Каждого Колонка Из МакетКомпоновки.Тело[0].Колонки Цикл

		Для Каждого ТелоГруппировки Из Колонка.Тело Цикл
			МакетыШапкиОтчета.Добавить(ТелоГруппировки.Макет);
		КонецЦикла;

	КонецЦикла;

	// Удалим лишние строки из шапки отчета.
	МассивДляУдаления = Новый Массив;
	
	Для Каждого ИмяМакетаШапкиОтчета Из МакетыШапкиОтчета Цикл
		
		МакетШапкиОтчета = МакетКомпоновки.Макеты[ИмяМакетаШапкиОтчета];
		
		
		Для Индекс = КоличествоСтрокШапки + 1 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
			
			МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
			
		КонецЦикла;
		
		Для Каждого Элемент Из МассивДляУдаления Цикл
			МакетШапкиОтчета.Макет.Удалить(Элемент);
		КонецЦикла;
		
		// Если группировка только по счету, объединим ячейки заголовка таблицы
		Если МакетШапкиОтчета = МакетШапкиТаблицы И КоличествоСтрокШапки = 1 Тогда
			
			Для Каждого Ячейка Из МакетШапкиОтчета.Макет[МакетШапкиОтчета.Макет.Количество() - 1].Ячейки Цикл
				
				Оформление = Ячейка.Оформление.Элементы.Найти("ОбъединятьПоВертикали");
				Оформление.Значение = Истина;
				Оформление.Использование = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Для обработки итогов запомним имена различных макетов.
	МакетГруппировкиСчет = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет");
	МакетыРесурсовПодвалаОтчета 		= Новый Массив;
	МакетыРесурсовСчета 				= Новый Массив;
	
	// Соответствие макетов колонкам отчета понадобится позже для подсчета итогов
	СоответствиеМакетовКолонкамОтчета = Новый Соответствие;
	
	ЗаполнитьМакетыРесурсовПодвалаОтчета(МакетКомпоновки.Тело[0], МакетыРесурсовПодвалаОтчета, СоответствиеМакетовКолонкамОтчета);
	ЗаполнитьМакетыРесурсовГруппировки(МакетКомпоновки.Тело[0].Строки, МакетыРесурсовСчета, СоответствиеМакетовКолонкамОтчета, "Счет");
	
	МассивИменМакетовСчет = Новый Массив;
	Для Каждого МакетСчет Из МакетГруппировкиСчет Цикл
		МассивИменМакетовСчет.Добавить(МакетСчет.Имя);
	КонецЦикла;

	// Макеты группировки и ресурсов группировки по валюте будем использовать для определения принадлежности элемента Макет макета компоновки.
	МакетГруппировкиВалюта = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта");
	МакетРесурсовГруппировкиВалюта = Новый Массив;
	
	МассивИменМакетовВалюта = Новый Массив;
	Для Каждого МакетВалюта Из МакетГруппировкиВалюта Цикл
		МассивИменМакетовВалюта.Добавить(МакетВалюта.Имя);
	КонецЦикла;
	
	ЗаполнитьМакетыРесурсовГруппировки(МакетКомпоновки.Тело[0].Строки, МакетРесурсовГруппировкиВалюта, СоответствиеМакетовКолонкамОтчета, "Валюта", Истина);

	// Если в отчете включена валютная сумма, то ее нужно показывать только по тем счетам, где есть валюта.
	// Для того чтобы убрать вывод показателя валюта, там где он не нужен, переберем все макеты и удалим строки,
	// предназначенные для вывода валютных сумм, у всех макетов кроме макетов группировки по валюте и макетов ресурсов
	// группировки по валюте.
	Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
			// Пропускаем макеты шапки
			Если МакетыШапкиОтчета.Найти(Макет.Имя) = Неопределено Тогда
				
				Если МассивИменМакетовВалюта.Найти(Макет.Имя) <> Неопределено ИЛИ МакетРесурсовГруппировкиВалюта.Найти(Макет.Имя) <> Неопределено Тогда
					
					Если ПараметрыОтчета.ПоказательКонтроль Тогда
						Макет.Макет.Удалить(Макет.Макет.Количество() - 2);
					КонецЕсли;
					
				ИначеЕсли Макет.Макет.Количество() > 1 Тогда // Последний не удаляем
					
					Макет.Макет.Удалить(Макет.Макет.Количество() - 1);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Создадим структуру для хранения итогов
	ЗначенияПоказателей = Новый Структура();
	
	// Определим количество показателей выводимых в отчет
	КоличествоПоказателей 	= БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	// На верхнем уровне структура. Ключу структуры соответсвует имя макета колонки, значению - 2-х мерный массив.
	// Размерность первого измерения массива соответсвует количеству показателей отчета.
	// Размерность второго измерения равна 2, что соответсвует дебету и кредиту.
	Для Каждого Колонка Из МакетКомпоновки.Тело[0].Колонки Цикл
		
		// Создаем структуру
		ЗначенияПоказателей.Вставить(Колонка.Тело[0].Макет, Новый Массив(КоличествоПоказателей, 2));
		
		// Заполняем значения массива нолями
		Для Каждого Массив Из ЗначенияПоказателей[Колонка.Тело[0].Макет] Цикл
			Для Индекс = 0 По 1 Цикл
				Массив[Индекс] = 0;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;

	// Создадим структуру для хранения временных данных, которые нужны для расчета итогов при выводе отчета.
	ВременныеДанныеОтчета = Новый Структура;

	// Упаковываем временные данные в структуру
	ВременныеДанныеОтчета.Вставить("МакетыРесурсовСчета"					, МакетыРесурсовСчета);
	ВременныеДанныеОтчета.Вставить("МакетыРесурсовПодвалаОтчета"			, МакетыРесурсовПодвалаОтчета);
	ВременныеДанныеОтчета.Вставить("СоответствиеМакетовКолонкамОтчета"		, СоответствиеМакетовКолонкамОтчета);
	ВременныеДанныеОтчета.Вставить("МакетВалюта"							, МассивИменМакетовВалюта);
	ВременныеДанныеОтчета.Вставить("МакетШапкиОтчета"						, МакетыШапкиОтчета);
	ВременныеДанныеОтчета.Вставить("МакетСчет"								, МассивИменМакетовСчет);
	ВременныеДанныеОтчета.Вставить("КоличествоПоказателей"					, КоличествоПоказателей);
	ВременныеДанныеОтчета.Вставить("ЗначенияПоказателей"					, ЗначенияПоказателей);
	ВременныеДанныеОтчета.Вставить("ТекущийСчет"							, Неопределено);
	
	ПараметрыОтчета.Вставить("ВременныеДанныеОтчета", ВременныеДанныеОтчета);
	
КонецПроцедуры

// В процедуре можно уточнить особенности вывода в отчет отдельного элемента в структуре данных.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - описание выводимых данных.
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - описание расшифровки для элемента в структуре данных.
//  ЭлементРезультата - ЭлементРезультатаКомпоновкиДанных - описание элемента в структуре данных.
//  Отказ        - Булево - если Истина, то не выводить эти данные в отчет.
//
Процедура ПередВыводомЭлементаРезультата(ПараметрыОтчета, МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт
	
	// Отсекаем валютные группировки на счетах, по которым не ведется
	// валютный учет
	Если ЭлементРезультата.ЗначенияПараметров.Количество() > 0
		И ЭлементРезультата.ЗначенияПараметров.Найти("П1") <> Неопределено
		И ЗначениеЗаполнено(ЭлементРезультата.Макет)
		И ПараметрыОтчета.ВременныеДанныеОтчета.МакетВалюта.Найти(ЭлементРезультата.Макет) <> Неопределено
		И ЭлементРезультата.ЗначенияПараметров.П1.Значение = Null Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ПараметрыОтчета.ПоказательВалютнаяСумма
		И ПараметрыОтчета.ВременныеДанныеОтчета.КоличествоПоказателей > 1 Тогда
		КоличествоПоказателей = ПараметрыОтчета.ВременныеДанныеОтчета.КоличествоПоказателей - 1;
	Иначе
		КоличествоПоказателей = ПараметрыОтчета.ВременныеДанныеОтчета.КоличествоПоказателей;
	КонецЕсли;

	// Обрабатываем элементы, содержащие корневые счета
	Если ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
		И ЭлементРезультата.ЗначенияПараметров.Найти("П1") <> Неопределено
		И ЗначениеЗаполнено(ЭлементРезультата.Макет)
		И ПараметрыОтчета.ВременныеДанныеОтчета.МакетШапкиОтчета.Найти(ЭлементРезультата.Макет) = Неопределено
		И ПараметрыОтчета.ВременныеДанныеОтчета.МакетыРесурсовПодвалаОтчета.Найти(ЭлементРезультата.Макет) = Неопределено Тогда

		// Запомним значение счета
		Если ПараметрыОтчета.ВременныеДанныеОтчета.МакетСчет.Найти(ЭлементРезультата.Макет) <> Неопределено Тогда
			
			ПараметрыОтчета.ВременныеДанныеОтчета.ТекущийСчет = Неопределено;
			
			Для Каждого Параметр Из ЭлементРезультата.ЗначенияПараметров Цикл
				Если ТипЗнч(Параметр.Значение) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					
					ПараметрыОтчета.ВременныеДанныеОтчета.ТекущийСчет = ДанныеРасшифровки.Элементы[Параметр.Значение].ПолучитьПоля()[0].Значение;;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Накапливаем суммы по корневым счетам
		Если ПараметрыОтчета.ВременныеДанныеОтчета.МакетыРесурсовСчета.Найти(ЭлементРезультата.Макет) <> Неопределено И ЗначениеЗаполнено(ПараметрыОтчета.ВременныеДанныеОтчета.ТекущийСчет) Тогда
			Если Не ЗначениеЗаполнено(ПараметрыОтчета.ВременныеДанныеОтчета.ТекущийСчет.Родитель) И МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Макет.Количество() > 0 Тогда
				
				Для ИндексЭлемента = 0 По КоличествоПоказателей - 1 Цикл
					
					СтрокаМакета = МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Макет[ИндексЭлемента];
					
					Для Каждого Ячейка Из СтрокаМакета.Ячейки Цикл
						
						Если Ячейка.Элементы.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого Элемент Из Ячейка.Элементы Цикл
							
							ИмяПараметра = Строка(Элемент.Значение);
							ПараметрРезультата = ЭлементРезультата.ЗначенияПараметров.Найти(ИмяПараметра);
							
							Значение = 0;

							Если НЕ (Не ПараметрыОтчета.ВременныеДанныеОтчета.ТекущийСчет.НалоговыйУчет И ИндексЭлемента = (КоличествоПоказателей - 1)
								И ПараметрыОтчета.ПоказательКонтроль) И ПараметрРезультата <> Неопределено Тогда
								Если ПараметрРезультата.Значение <> Null Тогда
									Значение = ПараметрРезультата.Значение;
								КонецЕсли;
							КонецЕсли;
							
							КолонкаРезультата = ПараметрыОтчета.ВременныеДанныеОтчета.СоответствиеМакетовКолонкамОтчета.Получить(ЭлементРезультата.Макет);
							
							Если КолонкаРезультата <> Неопределено Тогда
								
								ИндексЯчейки = СтрокаМакета.Ячейки.Индекс(Ячейка);
								ТекущееЗначениеИтога = ПараметрыОтчета.ВременныеДанныеОтчета.ЗначенияПоказателей[КолонкаРезультата][ИндексЭлемента][ИндексЯчейки];
								ПараметрыОтчета.ВременныеДанныеОтчета.ЗначенияПоказателей[КолонкаРезультата][ИндексЭлемента][ИндексЯчейки] = ТекущееЗначениеИтога + Значение;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли; 

	// Проставляем накопленные суммы в подвал отчета
	ИначеЕсли ПараметрыОтчета.ВременныеДанныеОтчета.МакетыРесурсовПодвалаОтчета.Найти(ЭлементРезультата.Макет) <> Неопределено Тогда

		КолонкаРезультата = ПараметрыОтчета.ВременныеДанныеОтчета.СоответствиеМакетовКолонкамОтчета.Получить(ЭлементРезультата.Макет);

		Если КолонкаРезультата <> Неопределено Тогда

			Для Каждого СтрокаМакета Из МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Макет Цикл

				ИндексЭлемента = МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Макет.Индекс(СтрокаМакета);

				Для Каждого Ячейка Из СтрокаМакета.Ячейки Цикл

					ИндексЯчейки =  СтрокаМакета.Ячейки.Индекс(Ячейка);

					Для Каждого Элемент Из Ячейка.Элементы Цикл

						ИмяПараметра = Строка(Элемент.Значение);
						ПараметрЭлемента = ЭлементРезультата.ЗначенияПараметров.Найти(ИмяПараметра);

						// Если параметр определен в макете но его нет в элементе результата
						Если ПараметрЭлемента = Неопределено тогда
							
							// Добавляем параметра в элемент результата
							ПараметрЭлемента = ЭлементРезультата.ЗначенияПараметров.Добавить();
							ПараметрЭлемента.Имя = ИмяПараметра;
							
						КонецЕсли;
						
						ПараметрЭлемента.Значение = ПараметрыОтчета.ВременныеДанныеОтчета.ЗначенияПоказателей[КолонкаРезультата][ИндексЭлемента][ИндексЯчейки];
						
					КонецЦикла;

				КонецЦикла;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// В процедуре можно изменить табличный документ после вывода в него данных.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	Результат.ФиксацияСлева = 0;
	
КонецПроцедуры

// Задает набор показателей, которые поволяет анализировать отчет.
//
// Возвращаемое значение:
//   Массив      - основные суммовые показатели отчета.
//
Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	НаборПоказателей.Добавить("Контроль");
	НаборПоказателей.Добавить("ВалютнаяСумма");
	
	Возврат НаборПоказателей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьСтруктуруОтчета(КомпоновщикНастроек, ПараметрыОтчета, ПараметрыАлгоритма)
	
	// Очищаем структуру отчета, для того чтобы сформировать ее по установленным настройкам.
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор, "Счет");
	
	// Основой структуры отчета будет таблица
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

	// Далее добавляем колонки в таблицу
	СоздатьКолонкиОтчета(Структура.Колонки, ПараметрыОтчета);
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = НСтр("ru = 'Уменьшенный автоотступ'") Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = НСтр("ru = 'Уменьшенный автоотступ'");
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	// Добавим в структуру отчета 2 группировки по счету с разным отбором и параметрами.
	// Группировка по балансовым счетам
	ГруппировкаПоБалансовымСчетам = Структура.Строки.Добавить();
	
	// Заполняем основные параметры группировки
	ПолеГруппировки = ГруппировкаПоБалансовымСчетам.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ГруппировкаПоБалансовымСчетам.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаПоБалансовымСчетам.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	// Добавим автоотступ
	ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
	ПолеОформления.Поле = ПолеГруппировки.Поле;

	// Установка отбора на выводимый уровень иерархии счета
	ГруппаЭлементовОтбора = ГруппировкаПоБалансовымСчетам.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
	ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "ПараметрыДанных.ПоСубсчетам", Истина);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "СистемныеПоля.УровеньВГруппировке", 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "Счет", ПараметрыАлгоритма.СписокСчетовПоСубсчетам, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ПараметрыАлгоритма.СписокСчетовПоСубсчетам.Количество() > 0);
	
	// Устанавливаем отбор по признаку Забалансовый
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппировкаПоБалансовымСчетам.Отбор, "Счет.Забалансовый", Ложь);
	
	// Отключим вывод отбора
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(ГруппировкаПоБалансовымСчетам, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	// Группировка по забалансовым счетам
	ГруппировкаПоЗабалансовымСчетам = Структура.Строки.Добавить();
	
	// Заполняем основные параметры группировки
	ПолеГруппировки = ГруппировкаПоЗабалансовымСчетам.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ГруппировкаПоЗабалансовымСчетам.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаПоЗабалансовымСчетам.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	// Добавим автоотступ
	ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
	ПолеОформления.Поле = ПолеГруппировки.Поле;
	
	// Установка отбора на выводимый уровень иерархии счета
	ГруппаЭлементовОтбора = ГруппировкаПоЗабалансовымСчетам.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
	ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "ПараметрыДанных.ПоСубсчетам", Истина);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "СистемныеПоля.УровеньВГруппировке", 1);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "Счет", ПараметрыАлгоритма.СписокСчетовПоСубсчетам, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ПараметрыАлгоритма.СписокСчетовПоСубсчетам.Количество() > 0);
	
	// Устанавливаем отбор по признаку Забалансовый
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппировкаПоЗабалансовымСчетам.Отбор, "Счет.Забалансовый", Истина);
	
	// Отключим вывод отбора и итогов
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(ГруппировкаПоЗабалансовымСчетам, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(ГруппировкаПоЗабалансовымСчетам, "РасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПоСубсчетам", ПараметрыОтчета.ПоСубсчетам);
	
	// Добавленные группировки сложим в массив для удобства дальнейшей доработки структуры.
	ГруппировкиПоСчетам = Новый Массив;
	ГруппировкиПоСчетам.Добавить(ГруппировкаПоБалансовымСчетам);
	ГруппировкиПоСчетам.Добавить(ГруппировкаПоЗабалансовымСчетам);
	
	// Для валютных сумм, добавляем группировку по валюте
	Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
		
		Для Каждого Группировка Из ГруппировкиПоСчетам Цикл
			
			Структура = Группировка.Структура.Добавить();
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			// Устанавливаем отбор по признаку Валютный
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "Счет.Валютный", Истина);
			// Отключим вывод отбора и итогов
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Поле = ПолеГруппировки.Поле;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавляем группировки для разворота по субконто
	Если ПараметрыАлгоритма.ЕстьДетализацияПоСубконто Тогда
		
		Для Каждого Группировка Из ГруппировкиПоСчетам Цикл
			
			Структура = Группировка;
			
			Для Индекс = 1 По ПараметрыАлгоритма.КоличествоСубконтоДетализации Цикл 
				
				Структура = Структура.Структура.Добавить();
				ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование  = Истина;
				ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Субконто" + Индекс);
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				
				Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, ПолеГруппировки.Поле,"", ВидСравненияКомпоновкиДанных.Заполнено);
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
				
				ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
				ПолеОформления.Поле = ПолеГруппировки.Поле;
				
				Если ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
					ГруппировкаПоВалюте = Структура.Структура.Добавить();
					ПолеГруппировки = ГруппировкаПоВалюте.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					ПолеГруппировки.Использование  = Истина;
					ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
					
					ГруппировкаПоВалюте.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
					ГруппировкаПоВалюте.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
					
					// Устанавливаем отбор по признаку Валютный
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппировкаПоВалюте.Отбор, "Счет.Валютный", Истина);
					
					// Отключим вывод отбора и итогов
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(ГруппировкаПоВалюте, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
					
					ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
					ПолеОформления.Поле = ПолеГруппировки.Поле;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Добавляем отбор по организации
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборДляПоказателяКонтроль(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Добавляем отбор по ресурсам отчета
	ДобавитьОтборПоРесурсам(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Оформление итогов
	ДобавитьОформлениеИтогов(ПараметрыОтчета, КомпоновщикНастроек);
	
	// У счетов по которым не ведется налоговый учет, уберем показатели НУ,ПР, ВР и контроль.
	// Для этого условным оформлением установим высоту строк для этих показателе равной 1.
	// Позже при обработке таблицы результата такие строки будут удалены.
	// Добавляем элемент условного оформления
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	// Указываем оформляемые поля
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Показатели.НУ");
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Показатели.ПР");
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Показатели.ВР");
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Показатели.Контроль");
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	
	// Отключим использование этого элемента условного оформления в общих итогах
	УсловноеОформление.ИспользоватьВОбщемИтоге = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловноеОформление.Отбор, "Счет.НалоговыйУчет", Ложь);
	
	// Устанавливаем параметр оформления
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
	
	Если УсловноеОформлениеАвтоотступа.Поля.Элементы.Количество() = 0 Тогда
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
	КонецЕсли;

КонецПроцедуры

Функция СчетаИсключенныеИзЗапросаПоСчетам(СчетаИсключенныеИзЗапросаПоСчетам, КоличествоСубконтоДетализацииПоСчетам);

	Если СчетаИсключенныеИзЗапросаПоСчетам.Количество() = 0 Тогда
		Возврат СчетаИсключенныеИзЗапросаПоСчетам;
	Конецесли;
	
	ШаблонЗапроса = "ВЫБРАТЬ
		|	ХозрасчетныйВидыСубконто.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&[Счет])
		|	И ХозрасчетныйВидыСубконто.Ссылка <> (&[Счет])
		|	И (ХозрасчетныйВидыСубконто.НомерСтроки = 1
		|				И ХозрасчетныйВидыСубконто.ВидСубконто = &[ВидСубконто1]
		|			ИЛИ ХозрасчетныйВидыСубконто.НомерСтроки = 2
		|				И ХозрасчетныйВидыСубконто.ВидСубконто = &[ВидСубконто2]
		|			ИЛИ ХозрасчетныйВидыСубконто.НомерСтроки = 3
		|				И ХозрасчетныйВидыСубконто.ВидСубконто = &[ВидСубконто3])
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйВидыСубконто.Ссылка
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ХозрасчетныйВидыСубконто.Ссылка) = &[КоличествоСубконто]";
		
		
	СчетаИсключение = Новый Массив;
		
	Разделитель = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	Запрос = Новый Запрос;
	
	НужноВыполнятьЗапрос = Ложь;
	
	ВспомогательныйЗапрос = Новый Запрос;
	ВспомогательныйЗапрос.Текст = "ВЫБРАТЬ
		|	ХозрасчетныйВидыСубконто.ВидСубконто.Ссылка КАК ВидСубконто,
		|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто,
		|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|ГДЕ
		|	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаИсключенныеИзЗапросаПоСчетам)";
		
	ВспомогательныйЗапрос.УстановитьПараметр("СчетаИсключенныеИзЗапросаПоСчетам", СчетаИсключенныеИзЗапросаПоСчетам);
	
	СчетаИСубконто = ВспомогательныйЗапрос.Выполнить().Выгрузить();
	СчетаИСубконто.Индексы.Добавить("Счет");
	
	Для Каждого ИсключенныйСчет Из СчетаИсключенныеИзЗапросаПоСчетам Цикл
		
		Счет = ИсключенныйСчет.Значение;
		
		ВидыСубконто = КоличествоСубконтоДетализацииПоСчетам.Получить(Счет);
		
		Если ВидыСубконто = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Если Счет.ЗапретитьИспользоватьВПроводках Тогда
			
			ИндексСчета = СчетаИсключенныеИзЗапросаПоСчетам.Индекс(ИсключенныйСчет);
			
			Запрос.УстановитьПараметр("Счет" + ИндексСчета, Счет);
			
			ПараметрыШаблона = Новый Структура();
			ПараметрыШаблона.Вставить("Счет", "Счет" + ИндексСчета);
			
			ВидыСубконтоСчета = СчетаИСубконто.НайтиСтроки(Новый Структура("Счет", Счет));
			
			Для Каждого ВидСубконто ИЗ ВидыСубконтоСчета Цикл
				
				Если ВидыСубконто.НайтиПоЗначению(ВидСубконто.ВидСубконто) <> Неопределено Тогда
					
					Запрос.УстановитьПараметр("ВидСубконто" + ВидСубконто.НомерСубконто + "_" + ИндексСчета, ВидСубконто.ВидСубконто);
					ПараметрыШаблона.Вставить("ВидСубконто" + ВидСубконто.НомерСубконто, "ВидСубконто" + ВидСубконто.НомерСубконто + "_" + ИндексСчета);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Запрос.УстановитьПараметр("КоличествоСубконто_" + ИндексСчета, ВидыСубконто.Количество());
			ПараметрыШаблона.Вставить("КоличествоСубконто", "КоличествоСубконто_" + ИндексСчета);
			
			Запрос.Текст = Запрос.Текст + СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЗапроса, ПараметрыШаблона) + Разделитель;
			
			НужноВыполнятьЗапрос = Истина;
			
		Иначе
			
			СчетаИсключение.Добавить(Счет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ВидСубконто1, ВидСубконто2, ВидСубконто3", "ВидСубконто1", "ВидСубконто2", "ВидСубконто3");
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Запрос.Текст, СтруктураПараметров);
	Запрос.УстановитьПараметр("ВидСубконто1", Неопределено);
	Запрос.УстановитьПараметр("ВидСубконто2", Неопределено);
	Запрос.УстановитьПараметр("ВидСубконто3", Неопределено);
	
	СписокСчетов = Новый СписокЗначений;
	
	Если НужноВыполнятьЗапрос Тогда
		
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 17);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			СписокСчетов.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Счет Из СчетаИсключение Цикл
		
		СписокСчетов.Добавить(Счет);
		
	КонецЦикла;
		
	Возврат СписокСчетов;
	
КонецФункции

Функция ЗаполнитьМакетыРесурсовГруппировки(Таблица, МассивМакетов, СоответствиеМакетовКолонкамОтчета, ПолеГруппировки = Неопределено, ВключатьМакетыВложенныхГруппировок = Ложь, ПрочитатьМакетыРесурсов = Ложь)
	
	// Перебираем все элементы макета.
	Для Каждого Группировка Из Таблица Цикл
		
		Если ТипЗнч(Группировка) = Тип("ГруппировкаТаблицыМакетаКомпоновкиДанных") Тогда
			// Если это группировка проверим поле группировки
			Если ПолеГруппировки = Неопределено ИЛИ Группировка.Группировка[0].ИмяПоля = ПолеГруппировки Тогда
				
				Если ВключатьМакетыВложенныхГруппировок Тогда
					// Перебираем вложенные группировки. Условие по полю группировки в них не накладываем.
					ЗаполнитьМакетыРесурсовГруппировки(Группировка.Тело, МассивМакетов, СоответствиеМакетовКолонкамОтчета,,,Истина);
				Иначе
					ЗаполнитьМакетыРесурсовГруппировки(Группировка.Тело, МассивМакетов, СоответствиеМакетовКолонкамОтчета, ПолеГруппировки, ВключатьМакетыВложенныхГруппировок, Истина);
				КонецЕсли;
				
				// Перебираем иерархию группировки
				Для Каждого ТелоИерархии Из Группировка.ТелоИерархии Цикл
					
					Если ТипЗнч(ТелоИерархии) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
						
						Для Каждого МакетРесурсов Из ТелоИерархии.МакетРесурсов Цикл
							// Помещаем макеты в массив
							МассивМакетов.Добавить(МакетРесурсов.Макет);
							// Добавляем соответствие макетов ресурсов и колонок отчета
							СоответствиеМакетовКолонкамОтчета.Вставить(МакетРесурсов.Макет, МакетРесурсов.МакетГруппировки);
							
						КонецЦикла;
						
					КонецЕсли;
				
				КонецЦикла;
				
			Иначе
				// Если эта группировка не подошла по условию проверим вложенные группировки
				ЗаполнитьМакетыРесурсовГруппировки(Группировка.Тело, МассивМакетов, СоответствиеМакетовКолонкамОтчета, ПолеГруппировки, ВключатьМакетыВложенныхГруппировок);

			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Группировка) = Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") И ПрочитатьМакетыРесурсов Тогда
			
			Для Каждого МакетРесурсов Из Группировка.МакетРесурсов Цикл
				
				// Помещаем макеты в массив
				МассивМакетов.Добавить(МакетРесурсов.Макет);
				// Добавляем соответствие макетов ресурсов и колонок отчета
				СоответствиеМакетовКолонкамОтчета.Вставить(МакетРесурсов.Макет, МакетРесурсов.МакетГруппировки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ЗаполнитьМакетыРесурсовПодвалаОтчета(Таблица, МассивМакетов, СоответствиеМакетовКолонкамОтчета)

	Для Каждого Группировка Из Таблица.Строки Цикл

		Для Каждого МакетРесурсов Из Группировка.МакетПодвала.МакетРесурсов Цикл

			МассивМакетов.Добавить(МакетРесурсов.Макет);

			СоответствиеМакетовКолонкамОтчета.Вставить(МакетРесурсов.Макет, МакетРесурсов.МакетГруппировки);

		КонецЦикла;

	КонецЦикла;

КонецФункции

Процедура ДобавитьОтборПоРесурсам(ПараметрыОтчета, КомпоновщикНастроек)
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	// Указываем оформляемые поля
	Поле = УсловноеОформление.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Счет");
	
	УсловноеОформление.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	УсловноеОформление.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	
	// Устанавливаем параметр оформления
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
	
	Группа = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Для Каждого ИмяПоказателя Из ПолучитьНаборПоказателей() Цикл
		
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Группа, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.Равно);
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Группа, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.Равно);
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Группа, "СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.Равно);
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Группа, "СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.Равно);
					
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Группа, "ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт", 0, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Группа, "ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт", 0, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОформлениеИтогов(ПараметрыОтчета, КомпоновщикНастроек)
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	УсловноеОформление.ИспользоватьВЗаголовке 					= ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	УсловноеОформление.ИспользоватьВЗаголовкеПолей 				= ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	УсловноеОформление.ИспользоватьВГруппировке 				= ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	УсловноеОформление.ИспользоватьВЗаголовке 					= ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	УсловноеОформление.ИспользоватьВЗаголовкеПолей 				= ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	УсловноеОформление.ИспользоватьВИерархическойГруппировке 	= ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	УсловноеОформление.ИспользоватьВОтборе 						= ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	УсловноеОформление.ИспользоватьВПараметрах 					= ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	
	ЖирныйШрифт = Новый Шрифт(,10,Истина);
	
	// Устанавливаем параметр оформления
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "Шрифт", ЖирныйШрифт);
КонецПроцедуры

Функция СчетаВИерархии(СчетГруппа)
	
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

Функция ИерархияСчетовСписка(Счета)
	
	Иерархия = Новый Соответствие;
	
	Для Каждого ПроверяемыйСчет Из Счета Цикл
		Для Каждого Счет Из Счета Цикл
			Если ПроверяемыйСчет.ПринадлежитЭлементу(Счет) Тогда
				Иерархия.Вставить(Счет, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПроверяемыйСчет));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Иерархия;
	
КонецФункции

Процедура СоздатьКолонкиОтчета(КолонкиСтруктурыОтчета, ПараметрыОтчета)
	
	// Если нужно, добавляем отдельную колонку для показателей (БУ,НУ,ПР,ВР и т.д.)
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	Если КоличествоПоказателей > 1 Тогда
		
		Колонка = КолонкиСтруктурыОтчета.Добавить();
		Колонка.Имя = "Показатели";
		ГруппаПоказатели = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = БухгалтерскиеОтчеты.ЗаголовокГруппыПоказателей();
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Для начального сальдо, оборотов и конечного сальдо, создадим по отдельной колонке
	// в каждой колонке будет 2 ячейки дебет и кредит.
	
	// Колонка Начальное сальдо
	Колонка = КолонкиСтруктурыОтчета.Добавить();
	Колонка.Имя = "СальдоНаНачалоПериода";
	ГруппаСальдоНаНачало = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачало.Заголовок     = НСтр("ru = 'Сальдо на начало периода'");
	ГруппаСальдоНаНачало.Использование = Истина;
	ГруппаСальдоНаНачалоДт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаСальдоНаНачалоДт.Использование = Истина;
	ГруппаСальдоНаНачалоДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаНачалоКт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаСальдоНаНачалоКт.Использование = Истина;
	ГруппаСальдоНаНачалоКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	// Колонка Обороты
	Колонка = КолонкиСтруктурыОтчета.Добавить();
	Колонка.Имя = "ОборотыЗаПериод";
	ГруппаОбороты = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = НСтр("ru = 'Обороты за период'");
	ГруппаОбороты.Использование = Истина;
	ГруппаОборотыДт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаОборотыДт.Использование = Истина;
	ГруппаОборотыДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаОборотыКт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаОборотыКт.Использование = Истина;
	ГруппаОборотыКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	// Колонка Конечное сальдо
	Колонка = КолонкиСтруктурыОтчета.Добавить();
	Колонка.Имя = "СальдоНаКонецПериода";
	ГруппаСальдоНаКонец = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонец.Заголовок     = НСтр("ru = 'Сальдо на конец периода'");
	ГруппаСальдоНаКонец.Использование = Истина;
	ГруппаСальдоНаКонецДт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаСальдоНаКонецДт.Использование = Истина;
	ГруппаСальдоНаКонецДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаКонецКт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаСальдоНаКонецКт.Использование = Истина;
	ГруппаСальдоНаКонецКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	// Заполняем созданные колонки показателями
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ИмяПоказателя + "ОборотДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ИмяПоказателя + "ОборотКт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "КонечныйОстатокДт");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "КонечныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьГруппировкиПоляИтога(ПолеИтога)
	
	ПолеИтога.Группировки.Добавить("Счет");
	ПолеИтога.Группировки.Добавить("Счет Иерархия");
	ПолеИтога.Группировки.Добавить("Валюта");
	
КонецПроцедуры

Процедура СоздатьИтогиРазвернутогоСальдо(ПараметрыАлгоритма)
	
	Схема = ПараметрыАлгоритма.Схема;
	
	ПоляИтогаОтчета = Схема.ПоляИтога;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("ВР");
	
	ТекстУсловие = ПараметрыАлгоритма.ТекстУсловие;
		
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		
		ПолеИтога = ПоляИтогаОтчета.Найти("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт");
		ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт) Иначе Сумма(СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт) Конец";
		ЗаполнитьГруппировкиПоляИтога(ПолеИтога);
		
		ПолеИтога = ПоляИтогаОтчета.Найти("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт");
		ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт) Иначе Сумма(СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт) Конец";
		ЗаполнитьГруппировкиПоляИтога(ПолеИтога);
		
		ПолеИтога = ПоляИтогаОтчета.Найти("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт");
		ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт) Иначе Сумма(СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт) Конец";
		ЗаполнитьГруппировкиПоляИтога(ПолеИтога);
		
		ПолеИтога = ПоляИтогаОтчета.Найти("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт");
		ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт) Иначе Сумма(СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт) Конец";
		ЗаполнитьГруппировкиПоляИтога(ПолеИтога);
		
	КонецЦикла;
	
	// Показатель контроль обрабатываем отдельно
	ПолеИтога = ПоляИтогаОтчета.Найти("СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт");
	ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(Выбор Когда СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокДт - СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокКт = 0 Тогда 0 
		|Иначе СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокДт Конец) Иначе Сумма(Выбор Когда СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт - СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт = 0 Тогда 0 
		|Иначе СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт Конец) Конец";
	ЗаполнитьГруппировкиПоляИтога(ПолеИтога);
		
	ПолеИтога = ПоляИтогаОтчета.Найти("СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт");
	ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(Выбор Когда СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокДт - СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокКт = 0 Тогда 0 
		|Иначе СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокКт Конец) Иначе Сумма(Выбор Когда СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт - СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт = 0 Тогда 0 
		|Иначе СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт Конец) Конец";
	ЗаполнитьГруппировкиПоляИтога(ПолеИтога);
	
	ПолеИтога = ПоляИтогаОтчета.Найти("СальдоНаКонецПериода.КонтрольКонечныйОстатокДт");
	ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(Выбор Когда СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокДт - СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокКт = 0 Тогда 0 
		|Иначе СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокДт Конец) Иначе Сумма(Выбор Когда СальдоНаКонецПериода.КонтрольКонечныйОстатокДт - СальдоНаКонецПериода.КонтрольКонечныйОстатокКт = 0 Тогда 0 
		|Иначе СальдоНаКонецПериода.КонтрольКонечныйОстатокДт Конец) Конец";
	ЗаполнитьГруппировкиПоляИтога(ПолеИтога);
		
	ПолеИтога = ПоляИтогаОтчета.Найти("СальдоНаКонецПериода.КонтрольКонечныйОстатокКт");
	ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(Выбор Когда СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокДт - СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокКт = 0 Тогда 0 
		|Иначе СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокКт Конец) Иначе Сумма(Выбор Когда СальдоНаКонецПериода.КонтрольКонечныйОстатокДт - СальдоНаКонецПериода.КонтрольКонечныйОстатокКт = 0 Тогда 0 
		|Иначе СальдоНаКонецПериода.КонтрольКонечныйОстатокКт Конец) Конец";
	ЗаполнитьГруппировкиПоляИтога(ПолеИтога);
	
	// Для каждого субконто добавляем свои поля итогов, которые рассчитываются только по конкретному субконто.
	Для СчетчикСубконто = 1 По 3 Цикл
		
		ТекстУсловие = "Ложь ИЛИ ";
		СчетчикСчетов = 1;
		// Составим текст условия для субконто <СчетчикСубконто>
		Для Каждого СчетСразворотом Из ПараметрыАлгоритма.СчетаСРазворотомПоСубконто[СчетчикСубконто - 1] Цикл
			
			ТекстУсловие = ТекстУсловие + "Счет = &СчетСРазворотомПоСубконто" + СчетчикСубконто + "_" + СчетчикСчетов + " ИЛИ ";
			
			// Установка параметра СчетСРазворотомПоСубконто
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(Схема, "СчетСРазворотомПоСубконто" + + СчетчикСубконто + "_" + СчетчикСчетов, "СчетСРазворотомПоСубконто", СчетСразворотом);
			
			СчетчикСчетов = СчетчикСчетов + 1;
			
		КонецЦикла;
		
		ТекстУсловие = Лев(ТекстУсловие, СтрДлина(ТекстУсловие) - 4);
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			
			ПолеИтогаНачалоПериодаДт = ПоляИтогаОтчета.Добавить();
			ПолеИтогаНачалоПериодаДт.ПутьКДанным = "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт";
			ПолеИтогаНачалоПериодаДт.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт) Иначе Сумма(СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт) Конец";
			
			ПолеИтогаНачалоПериодаКт = ПоляИтогаОтчета.Добавить();
			ПолеИтогаНачалоПериодаКт.ПутьКДанным = "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт";
			ПолеИтогаНачалоПериодаКт.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт) Иначе Сумма(СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт) Конец";
			
			ПолеИтогаКонецПериодаДт = ПоляИтогаОтчета.Добавить();
			ПолеИтогаКонецПериодаДт.ПутьКДанным = "СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт";
			ПолеИтогаКонецПериодаДт.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт) Иначе Сумма(СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт) Конец";
			
			ПолеИтогаКонецПериодаКт = ПоляИтогаОтчета.Добавить();
			ПолеИтогаКонецПериодаКт.ПутьКДанным = "СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт";
			ПолеИтогаКонецПериодаКт.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт) Иначе Сумма(СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт) Конец";
			
			ПолеИтогаНачалоПериодаДт.Группировки.Добавить("Субконто" + СчетчикСубконто);
			ПолеИтогаНачалоПериодаКт.Группировки.Добавить("Субконто" + СчетчикСубконто);
			ПолеИтогаКонецПериодаДт.Группировки.Добавить("Субконто" + СчетчикСубконто);
			ПолеИтогаКонецПериодаКт.Группировки.Добавить("Субконто" + СчетчикСубконто);
			
		КонецЦикла;
		
		// Показатель контроль обрабатываем отдельно
		ПолеИтогаНачалоПериодаДт = ПоляИтогаОтчета.Добавить();
		ПолеИтогаНачалоПериодаДт.ПутьКДанным = "СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт";
		ПолеИтогаНачалоПериодаДт.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(Выбор Когда СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокДт - СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокКт = 0 Тогда 0 
			|Иначе СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокДт Конец) Иначе Сумма(Выбор Когда СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт - СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт = 0 Тогда 0 
			|Иначе СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт Конец) Конец";
		
		ПолеИтогаНачалоПериодаКт = ПоляИтогаОтчета.Добавить();
		ПолеИтогаНачалоПериодаКт.ПутьКДанным = "СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт";
		ПолеИтогаНачалоПериодаКт.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(Выбор Когда СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокДт - СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокКт = 0 Тогда 0 
			|Иначе СальдоНаНачалоПериода.КонтрольНачальныйРазвернутыйОстатокКт Конец) Иначе Сумма(Выбор Когда СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт - СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт = 0 Тогда 0 
			|Иначе СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт Конец) Конец";
		
		ПолеИтогаКонецПериодаДт = ПоляИтогаОтчета.Добавить();
		ПолеИтогаКонецПериодаДт.ПутьКДанным = "СальдоНаКонецПериода.КонтрольКонечныйОстатокДт";
		ПолеИтогаКонецПериодаДт.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(Выбор Когда СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокДт - СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокКт = 0 Тогда 0 
			|Иначе СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокДт Конец) Иначе Сумма(Выбор Когда СальдоНаКонецПериода.КонтрольКонечныйОстатокДт - СальдоНаКонецПериода.КонтрольКонечныйОстатокКт = 0 Тогда 0 
			|Иначе СальдоНаКонецПериода.КонтрольКонечныйОстатокДт Конец) Конец";
		
		ПолеИтогаКонецПериодаКт = ПоляИтогаОтчета.Добавить();
		ПолеИтогаКонецПериодаКт.ПутьКДанным = "СальдоНаКонецПериода.КонтрольКонечныйОстатокКт";
		ПолеИтогаКонецПериодаКт.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(Выбор Когда СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокДт - СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокКт = 0 Тогда 0 
			|Иначе СальдоНаКонецПериода.КонтрольКонечныйРазвернутыйОстатокКт Конец) Иначе Сумма(Выбор Когда СальдоНаКонецПериода.КонтрольКонечныйОстатокДт - СальдоНаКонецПериода.КонтрольКонечныйОстатокКт = 0 Тогда 0 
			|Иначе СальдоНаКонецПериода.КонтрольКонечныйОстатокКт Конец) Конец";
		
		ПолеИтогаНачалоПериодаДт.Группировки.Добавить("Субконто" + СчетчикСубконто);
		ПолеИтогаНачалоПериодаКт.Группировки.Добавить("Субконто" + СчетчикСубконто);
		ПолеИтогаКонецПериодаДт.Группировки.Добавить("Субконто" + СчетчикСубконто);
		ПолеИтогаКонецПериодаКт.Группировки.Добавить("Субконто" + СчетчикСубконто);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыАлгоритма()

	ПараметрыАлгоритма = Новый Структура;
	ПараметрыАлгоритма.Вставить("Схема",                             ПолучитьМакет("СхемаКомпоновкиДанных")); // Получаем схему компоновки - эталон
	ПараметрыАлгоритма.Вставить("СчетаИсключенныеИзЗапросаПоСчетам", Новый СписокЗначений);
	ПараметрыАлгоритма.Вставить("СписокВсехСчетовРазвернутоеСальдо", Новый СписокЗначений);
	ПараметрыАлгоритма.Вставить("ЕстьДетализацияПоСубконто",         Ложь);
	ПараметрыАлгоритма.Вставить("ЕстьРазворотПоСубконто",            Ложь);
	ПараметрыАлгоритма.Вставить("ВыводитьРазвернутоеСальдо",         Ложь);
	ПараметрыАлгоритма.Вставить("НастройкаГруппировки",              Неопределено);
	ПараметрыАлгоритма.Вставить("ТекстУсловие",                      "Ложь ИЛИ ");
	
	// Для настройки развернутого сальдо может понадобиться информация о счетах и
	// количестве субконто, по которым нужна детализация
	ПараметрыАлгоритма.Вставить("КоличествоСубконтоДетализации",         0);
	ПараметрыАлгоритма.Вставить("КоличествоСубконтоДетализацииПоСчетам", Новый Соответствие);	
	
	// Создадим массив, в который будем складывать счета, по которым хотим видеть развернутое сальдо
	// по разным субконто. Этот массив будем использовать для генерации выражений полей итогов СКД.
	СчетаСРазворотомПоСубконто = Новый Массив;
	Для инд = 1 По 3 Цикл
		СчетаСРазворотомПоСубконто.Добавить(Новый Массив);
	КонецЦикла;
	ПараметрыАлгоритма.Вставить("СчетаСРазворотомПоСубконто", СчетаСРазворотомПоСубконто);	
	ПараметрыАлгоритма.Вставить("СчетаДляОтдельногоЗапроса",  Новый Массив);

	Возврат ПараметрыАлгоритма;
	
КонецФункции

Процедура ПодготовитьНаборыДанных(ПараметрыОтчета, ПараметрыАлгоритма)
	
	ДоработатьНаборДанных_ПоСубконто(ПараметрыОтчета, ПараметрыАлгоритма);	
	
	ДоработатьНаборДанных_ПоСубконтоРазвернутое(ПараметрыОтчета, ПараметрыАлгоритма);
	
	Схема = ПараметрыАлгоритма.Схема;
	
	Если Не ПараметрыАлгоритма.ЕстьДетализацияПоСубконто Тогда
		Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.Удалить(Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконто);
	КонецЕсли;
	Если Не ПараметрыАлгоритма.ВыводитьРазвернутоеСальдо
	 Или (НЕ ПараметрыАлгоритма.ЕстьРазворотПоСубконто И ПараметрыАлгоритма.СчетаДляОтдельногоЗапроса.Количество() = 0) Тогда
		Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.Удалить(Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконтоРазвернутое);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоработатьНаборДанных_ПоСубконто(ПараметрыОтчета, ПараметрыАлгоритма)
	
	НаборДанных = ПараметрыАлгоритма.Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконто; // Набор "ПоСубконто"
	ТекстЗапроса = НаборДанных.Запрос;
	НаборДанных.Запрос = "";
	
	// Определим текст запроса СКД который далее заменим.
	СтарыйТекстЗапросаСКД = "{ВЫБРАТЬ
							|	Субконто1Представление,
							|	Субконто2Представление,
							|	Субконто3Представление}";
	ТекстЗапросДетализацииПоСубконто       = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало ЗапросПоСубконто Детализация", "//Конец ЗапросПоСубконто Детализация");
	ТекстУсловиеСчетаДетализацииПоСубконто = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало УсловиеСчета Детализация", "//Конец УсловиеСчета Детализация");
	ТекстСубконтоДетализацииПоСубконто     = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало Субконто Детализация", "//Конец Субконто Детализация");
	
	// Определяем параметры, на основании которых будем формировать тексты запросов.
	ПараметрыФормируемыхЗапросов = Новый ТаблицаЗначений;
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("Счет",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоДетализации",  Новый ОписаниеТипов("СписокЗначений"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоДетализации1", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоДетализации2", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоДетализации3", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("ПоСубсчетам",          Новый ОписаниеТипов("Булево"));
	
	СписокВсехСчетовГруппировка  = Новый СписокЗначений;
	СчетаИсключенныеИзЗапросаПоСчетам = ПараметрыАлгоритма.СчетаИсключенныеИзЗапросаПоСчетам;
	НастройкаГруппировки = НастройкиОтчетаПоСчетам(ПараметрыОтчета.Группировка);
	Для Каждого СтрокаТаблицы Из НастройкаГруппировки Цикл
		
		СубконтоДетализации = Новый СписокЗначений;
		СубконтоДетализацииИндекс = Новый Массив;
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда	
			
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
			
			КоличествоСубконто = СтрДлина(СтрокаТаблицы.ПоСубконто) / 2;
			Для Индекс = 1 По КоличествоСубконто Цикл
				
				ПозицияНомераСубконтоВКоде = Индекс * 2;
				ВидСубконтоСчета           = ДанныеСчета["ВидСубконто" + Сред(СтрокаТаблицы.ПоСубконто, ПозицияНомераСубконтоВКоде, 1)];
				НужнаДетализацияПоСубконто = (Сред(СтрокаТаблицы.ПоСубконто, ПозицияНомераСубконтоВКоде - 1, 1) = "+");
				
				Если НужнаДетализацияПоСубконто Тогда
					СубконтоДетализации.Добавить(ВидСубконтоСчета);
					СубконтоДетализацииИндекс.Добавить(Индекс);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СубконтоДетализации.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПодзапроса = ПараметрыФормируемыхЗапросов.Добавить();
		ОписаниеПодзапроса.Счет                = СтрокаТаблицы.Счет;
		ОписаниеПодзапроса.ПоСубсчетам         = СтрокаТаблицы.ПоСубсчетам;
		ОписаниеПодзапроса.СубконтоДетализации = СубконтоДетализации.Скопировать();
		Для Каждого ИндексПсевдонима Из СубконтоДетализацииИндекс Цикл
			ОписаниеПодзапроса["СубконтоДетализации" + ИндексПсевдонима] = ДанныеСчета["ВидСубконто" + ИндексПсевдонима];
		КонецЦикла; 
		
		СписокВсехСчетовГруппировка.Добавить(СтрокаТаблицы.Счет);
	
	КонецЦикла;

	// Сворачиваем копию таблицы запросов, получая тем самым минимальный набор запросов которые надо выполнить.
	Колонки = "ПоСубсчетам,СубконтоДетализации1,СубконтоДетализации2,СубконтоДетализации3";
	ЗапросыДляФормирования = ПараметрыФормируемыхЗапросов.Скопировать(, Колонки);
	ЗапросыДляФормирования.Свернуть(Колонки);
	
	ДействующиеСтрокиГруппировки = НастройкаГруппировки.НайтиСтроки(Новый Структура("Использование", Истина));
	
	СчетаГруппировки = Новый Массив;
	Для Каждого СтрокаГруппировки Из ДействующиеСтрокиГруппировки Цикл
		
		СчетаГруппировки.Добавить(СтрокаГруппировки.Счет);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаИсключенныеИзЗапросаПоСчетам, СчетаВИерархии(СчетаГруппировки));
	
	ИерархияСчетовНастройкиГруппировка = ИерархияСчетовСписка(СчетаГруппировки);
	
	// Формируем тексты запросов.
	КоличествоСубконтоДетализацииПоСчетам = ПараметрыАлгоритма.КоличествоСубконтоДетализацииПоСчетам;
	НужноКорректироватьЗапросСКД = Ложь;
	ОтборСтрок = Новый Структура(Колонки);
	ИндексПодзапроса = 0;
	Для Каждого ОписаниеПодзапроса Из ЗапросыДляФормирования Цикл
		
		// Формируем список счетов по которым будет выполнен запрос
		СчетаПодзапроса = Новый Массив;
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ОписаниеПодзапроса, Колонки);
		СтрокиДетализацииСПодходящимиПараметрами = ПараметрыФормируемыхЗапросов.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаДетализации Из СтрокиДетализацииСПодходящимиПараметрами Цикл
			СчетаПодзапроса.Добавить(СтрокаДетализации.Счет);
		КонецЦикла;
		
		// Список субконто возьмем из нулевой строки. Он одинаковый у всех.
		СубконтоДетализации = СтрокиДетализацииСПодходящимиПараметрами[0].СубконтоДетализации;
		
		ИндексПодзапроса = ИндексПодзапроса + 1;
		
		Если ОписаниеПодзапроса.ПоСубсчетам ИЛИ ПараметрыОтчета.ПоСубсчетам Тогда
			
			Для Каждого Счет Из БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаПодзапроса) Цикл
				КоличествоСубконтоДетализацииПоСчетам.Вставить(Счет, СубконтоДетализации);
			КонецЦикла;
			
		Иначе
			
			Для каждого Счет Из СчетаПодзапроса Цикл
				КоличествоСубконтоДетализацииПоСчетам.Вставить(Счет, СубконтоДетализации);
			КонецЦикла;
			
		КонецЕсли;
		ПараметрыАлгоритма.Вставить("КоличествоСубконтоДетализации", Макс(ПараметрыАлгоритма.КоличествоСубконтоДетализации, СубконтоДетализации.Количество()));

		// Формируем текст параметра УсловиеСчета запроса детализации по субконто
		ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто = "Счет В (&СчетДетализации" + ИндексПодзапроса + ")
												   |				И (НЕ Счет.Забалансовый
												   |					ИЛИ &ВыводитьЗабалансовыеСчета)";
										  
		// Формируем текст параметра Субконто запроса детализации по субконто
		ТекстДляПодстановкиСубконтоДетализацииПоСубконто = "&СубконтоДетализации" + ИндексПодзапроса;
		
		// Формируем текст запроса для счета детализации
		ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстЗапросДетализацииПоСубконто, ТекстУсловиеСчетаДетализацииПоСубконто, ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто);
		ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ТекстСубконтоДетализацииПоСубконто, ТекстДляПодстановкиСубконтоДетализацииПоСубконто);
		
		// Доработка текста запроса СКД
		// Для первого запроса секция "{Выбрать..." должна быть 
		Если НужноКорректироватьзапросСКД Тогда
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, СтарыйТекстЗапросаСКД, "");
		Иначе
			// для последующих запросов секцию "{Выбрать..." нужно убирать
			НужноКорректироватьзапросСКД = Истина;
		КонецЕсли;
		
		// Корректировка текста запроса в зависимости от количества указанных видов субконто.
		Если ИндексПодзапроса > 1 Тогда
			// В первом запросе объединения должны присутствовать псевдонимы полей. Для последующих запросов удаляем псевдонимы.
			Для ИндексПсевдонима = 1 По 3 Цикл
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима + "Представление", "");
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима, "");
			КонецЦикла;
			
			// Обнуляем субконто и его представление не указанные в запросе
			Для ИндексСубконто = СубконтоДетализации.Количество() + 1 По 3 Цикл
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиИОбороты.Субконто" + ИндексСубконто + ")", """""");
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ОстаткиИОбороты.Субконто" + ИндексСубконто, "Null");
			КонецЦикла;
			
		Иначе
			// Обнуляем субконто и его представление не указанные в запросе
			Для ИндексСубконто = СубконтоДетализации.Количество() + 1 По 3 Цикл
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиИОбороты.Субконто" + ИндексСубконто + ") КАК Субконто" + ИндексСубконто + "Представление" , """"" КАК Субконто" + ИндексСубконто + "Представление");
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ОстаткиИОбороты.Субконто" + ИндексСубконто + " КАК Субконто" + ИндексСубконто, "Null КАК Субконто" + ИндексСубконто);
			КонецЦикла;
		КонецЕсли;
		
		// Если среди субсчетов, есть счета со свойствами отличными от счета верхнего уровня, то удалим эти субсчета.
		СчетаИсключенныеИзЗапросаГруппировка = ОбщегоНазначенияКлиентСервер.СократитьМассив(СписокВсехСчетовГруппировка.ВыгрузитьЗначения(), СчетаПодзапроса);
		Для каждого Счет Из СчетаПодзапроса Цикл
			Исключения = ИерархияСчетовНастройкиГруппировка.Получить(Счет);
			Если Исключения <> Неопределено Тогда
				Для Каждого СчетИсключения Из Исключения Цикл
					// Если параметры группировки настроены так,
					// что счет и его субсчет могут быть отнесены к одному подзапросу,
					// то исключать субсчет не следует
					Если СчетаПодзапроса.Найти(СчетИсключения) = Неопределено Тогда
						СчетаИсключенныеИзЗапросаГруппировка.Добавить(СчетИсключения);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		СчетаГруппировки = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаПодзапроса);

		СубсчетаПодзапроса = ОбщегоНазначенияКлиентСервер.СократитьМассив(СчетаГруппировки, СчетаИсключенныеИзЗапросаГруппировка);
		
		СубсчетаСписок = Новый СписокЗначений;
		СубсчетаСписок.ЗагрузитьЗначения(СубсчетаПодзапроса);
		
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетДетализации" + ИндексПодзапроса, "СчетДетализации", СубсчетаСписок);
		
		// Добавление и установка значения параметра СубконтоДетализации{Индекс}
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СубконтоДетализации" + ИндексПодзапроса, "СубконтоДетализации", СубконтоДетализации);

		// Доработка запроса набора данных
		НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросДетализацииПоСубконто
												+ Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
												
												
	
		СписокСчетовГруппировки = Новый СписокЗначений;
		СписокСчетовГруппировки.ЗагрузитьЗначения(СчетаПодзапроса);
		
		// У некоторых субсчетов может быть отличный состав субконто от родительского счета. Определим такие счета
		// и создадим для них отдельный запрос.
		СчетаСПодходящимСоставомСубконто = СчетаИсключенныеИзЗапросаПоСчетам(СписокСчетовГруппировки, КоличествоСубконтоДетализацииПоСчетам);
		
		// Подготовим список счетов для отдельного запроса Возьмем список всех счетов группировки,
		// включая их субсчета.
		СчетаДляОтдельногоЗапроса = СчетаВИерархии(СчетаПодзапроса);
		// Вычтем из них сами счета с развернутым сальдо.
		СчетаДляОтдельногоЗапроса = ОбщегоНазначенияКлиентСервер.СократитьМассив(СчетаДляОтдельногоЗапроса, СчетаПодзапроса);
		// Из оставшихся субсчетов вычитаем счета с подходящим составом субконто.
		СчетаДляОтдельногоЗапроса = ОбщегоНазначенияКлиентСервер.СократитьМассив(СчетаДляОтдельногоЗапроса, СчетаСПодходящимСоставомСубконто.ВыгрузитьЗначения());
	
		// Сформируем отдельный запрос для таких счетов
		Если СчетаДляОтдельногоЗапроса.Количество() > 0 Тогда
			
			// Формируем текст параметра УсловиеСчета запроса детализации по субконто
			ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто = "Счет В (&СчетДетализации_БезСубконто)
				|				И (НЕ Счет.Забалансовый
				|					ИЛИ &ВыводитьЗабалансовыеСчета)";
			
			// Формируем текст параметра Субконто запроса детализации по субконто
			ТекстДляПодстановкиСубконтоДетализацииПоСубконто = "";
			
			// Формируем текст запроса для счета детализации
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстЗапросДетализацииПоСубконто, ТекстУсловиеСчетаДетализацииПоСубконто, ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто);
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ТекстСубконтоДетализацииПоСубконто, ТекстДляПодстановкиСубконтоДетализацииПоСубконто);
			
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, СтарыйТекстЗапросаСКД, "");
			
			// Корректировка текста запроса в зависимости от количества указанных видов субконто.
			// В первом запросе объединения должны присутствовать псевдонимы полей. Для последующих запросов удаляем псевдонимы.
			Для ИндексПсевдонима = 1 По 3 Цикл
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима + "Представление", "");
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима, "");
			КонецЦикла;
			
			СубсчетаСписок = Новый СписокЗначений;
			СубсчетаСписок.ЗагрузитьЗначения(СчетаДляОтдельногоЗапроса);
			
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетДетализации_БезСубконто", "СчетДетализации", СубсчетаСписок);
			
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросДетализацииПоСубконто
					+ Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			
		КонецЕсли;

	КонецЦикла;
	
	// Дорабатываем текст запроса СКД в соответствии с количеством детализируемых субконто.
	ТекстЗапросаСКД = "{ВЫБРАТЬ ";
	Для Индекс = 1 По ПараметрыАлгоритма.КоличествоСубконтоДетализации Цикл
		
		ТекстЗапросаСКД = ТекстЗапросаСКД + "Субконто"+ Индекс +"Представление" +", ";
		
	КонецЦикла;
	
	ТекстЗапросаСКД = Лев(ТекстЗапросаСКД, СтрДлина(ТекстЗапросаСКД) - 2) + "}";
	
	НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, СтарыйТекстЗапросаСКД, ТекстЗапросаСКД);
	
	// Удаляем Ключевую фразу " ОБЪЕДИНИТЬ ВСЕ " в конце запроса
	НаборДанных.Запрос = Лев(НаборДанных.Запрос, СтрДлина(НаборДанных.Запрос) - 16);
	
	ПараметрыАлгоритма.ЕстьДетализацияПоСубконто = (ЗапросыДляФормирования.Количество() > 0);
	ПараметрыАлгоритма.НастройкаГруппировки      = НастройкаГруппировки;
	
КонецПроцедуры

Процедура ДоработатьНаборДанных_ПоСубконтоРазвернутое(ПараметрыОтчета, ПараметрыАлгоритма)
	
	НаборДанных = ПараметрыАлгоритма.Схема.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконтоРазвернутое; // Набор "ПоСубконтоРазвернутое"
	СчетаИсключенныеИзЗапросаПоСчетам = ПараметрыАлгоритма.СчетаИсключенныеИзЗапросаПоСчетам;
	ТекстЗапроса = НаборДанных.Запрос;
	НаборДанных.Запрос = "";
	
	ТекстЗапросПоСубконтоРазвернутое       = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало ЗапросПоСубконто РазвернутоеСальдо", "//Конец ЗапросПоСубконто РазвернутоеСальдо");
	ТекстУсловиеСчетаПоСубконтоРазвернутое = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало УсловиеСчета РазвернутоеСальдо"    , "//Конец УсловиеСчета РазвернутоеСальдо");
	ТекстСубконтоПоСубконтоРазвернутое     = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало Субконто РазвернутоеСальдо"        , "//Конец Субконто РазвернутоеСальдо");
	
	НастройкаРазвернутоеСальдо = НастройкиОтчетаПоСчетам(ПараметрыОтчета.РазвернутоеСальдо);
	СписокВсехСчетовРазвернутоеСальдо  = ПараметрыАлгоритма.СписокВсехСчетовРазвернутоеСальдо;
	СчетаБезСубконтоСразвернутымСальдо = Новый Массив;
	ЕстьРазворотПоСубконто             = Ложь;

	// Определяем параметры, на основании которых будем формировать тексты запросов.
	ПараметрыФормируемыхЗапросов = Новый ТаблицаЗначений;
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("Счет",                                   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоРазвернутоеСальдо",              Новый ОписаниеТипов("СписокЗначений"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоРазвернутоеСальдо1",             Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоРазвернутоеСальдо2",             Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("СубконтоРазвернутоеСальдо3",             Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("ПоСубсчетам",                            Новый ОписаниеТипов("Булево"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("ЕстьРазворотПоСубконтоТекущегоСчета",    Новый ОписаниеТипов("Булево"));
	ПараметрыФормируемыхЗапросов.Колонки.Добавить("КоличествоСубконтоДетализируемыхПоСчету",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	
	// Массив, в который будем складывать счета, по которым хотим видеть развернутое сальдо
	// по разным субконто. Этот массив будем использовать для генерации выражений полей итогов СКД.
	СчетаСРазворотомПоСубконто = ПараметрыАлгоритма.СчетаСРазворотомПоСубконто;
	
	Для Каждого СтрокаТаблицы Из НастройкаРазвернутоеСальдо Цикл
		
		Если Не СтрокаТаблицы.Использование Или Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПодзапроса = ПараметрыФормируемыхЗапросов.Добавить();
		ОписаниеПодзапроса.Счет        = СтрокаТаблицы.Счет;
		ОписаниеПодзапроса.ПоСубсчетам = СтрокаТаблицы.ПоСубсчетам;

		СубконтоРазвернутоеСальдо = Новый СписокЗначений;
		ЕстьРазворотПоСубконтоТекущегоСчета = Ложь;
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
		Для ИндексСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
			Если СтрНайти(СтрокаТаблицы.ПоСубконто, "+" + ИндексСубконто) = 0 Тогда // не нужен разворот по субконто
				Продолжить;
			КонецЕсли;
			
			// Дополняем список счетов с разворотом по определенному субконто.
			Если СтрокаТаблицы.ПоСубсчетам Тогда
				Для Каждого Счет Из БухгалтерскийУчетПовтИсп.СчетаВИерархии(СтрокаТаблицы.Счет) Цикл
					СчетаСразворотомПоСубконто[ИндексСубконто - 1].Добавить(Счет);
				КонецЦикла;
			Иначе
				СчетаСразворотомПоСубконто[ИндексСубконто - 1].Добавить(СтрокаТаблицы.Счет);
			КонецЕсли;
			
			// Задаем набор субконто необходимый для разворота.
			СубконтоРазвернутоеСальдо.Очистить();
			Для ИндексПсевдонима = 1 По ИндексСубконто Цикл
				СубконтоРазвернутоеСальдо.Добавить(ДанныеСчета["ВидСубконто" + ИндексПсевдонима]);
				ОписаниеПодзапроса["СубконтоРазвернутоеСальдо" + ИндексПсевдонима] = ДанныеСчета["ВидСубконто" + ИндексПсевдонима];
			КонецЦикла;
			
			ЕстьРазворотПоСубконтоТекущегоСчета = Истина;
			ЕстьРазворотПоСубконто = Истина;
			
		КонецЦикла;
		
		СубконтоДетализируемыеПоСчету = ПараметрыАлгоритма.КоличествоСубконтоДетализацииПоСчетам.Получить(СтрокаТаблицы.Счет);
		КоличествоСубконтоДетализируемыхПоСчету = ?(СубконтоДетализируемыеПоСчету = Неопределено, 0, СубконтоДетализируемыеПоСчету.Количество());
		
		ОписаниеПодзапроса.КоличествоСубконтоДетализируемыхПоСчету = КоличествоСубконтоДетализируемыхПоСчету;
		ОписаниеПодзапроса.СубконтоРазвернутоеСальдо               = СубконтоРазвернутоеСальдо.Скопировать();
		ОписаниеПодзапроса.ЕстьРазворотПоСубконтоТекущегоСчета     = ЕстьРазворотПоСубконтоТекущегоСчета;
		
		СписокВсехСчетовРазвернутоеСальдо.Добавить(СтрокаТаблицы.Счет);
		
		СчетаИсключенныеИзЗапросаПоСчетам.Добавить(СтрокаТаблицы.Счет);
		
	КонецЦикла;
	
	// Сворачиваем копию таблицы запросов, получая тем самым минимальный набор запросов которые надо выполнить.
	Колонки = "ПоСубсчетам,ЕстьРазворотПоСубконтоТекущегоСчета,КоличествоСубконтоДетализируемыхПоСчету,СубконтоРазвернутоеСальдо1,СубконтоРазвернутоеСальдо2,СубконтоРазвернутоеСальдо3";
	ЗапросыДляФормирования = ПараметрыФормируемыхЗапросов.Скопировать(, Колонки);
	ЗапросыДляФормирования.Свернуть(Колонки);	
	
	ПолныйСписокСубконтоДетализацииПоСчетам = Новый Соответствие;
	
	ДействующиеСтрокиРазвернутогоСальдо = НастройкаРазвернутоеСальдо.НайтиСтроки(Новый Структура("Использование", Истина));
	
	СчетаРазвернутогоСальдо = Новый Массив;
	Для Каждого СтрокаРазвернутогоСальдо Из ДействующиеСтрокиРазвернутогоСальдо Цикл
		
		СчетаРазвернутогоСальдо.Добавить(СтрокаРазвернутогоСальдо.Счет);
		
	КонецЦикла;
	
	ИерархияСчетовНастройкиРазвернутогоСальдо = ИерархияСчетовСписка(СчетаРазвернутогоСальдо);
	
	ТекстУсловие = ПараметрыАлгоритма.ТекстУсловие;
	ОтборСтрок = Новый Структура(Колонки);
	ИндексПодзапроса = 0;
	Для Каждого ОписаниеПодзапроса Из ЗапросыДляФормирования Цикл
		
		// Формируем список счетов по которым будет выполнен запрос
		СчетаПодзапроса = Новый Массив;
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ОписаниеПодзапроса, Колонки);
		СтрокиРазвернутогоСальдоСПодходящимиПараметрами = ПараметрыФормируемыхЗапросов.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаРазвернутогоСальдо Из СтрокиРазвернутогоСальдоСПодходящимиПараметрами Цикл
			СчетаПодзапроса.Добавить(СтрокаРазвернутогоСальдо.Счет);
		КонецЦикла;
		
		// Субсчета для параметра СчетРазвернутоеСальдо (пока что без учета исключений)
		СчетаРазвернутоеСальдо = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаПодзапроса);
		
		// Список субконто возьмем из нулевой строки. Он одинаковый у всех.
		СубконтоРазвернутоеСальдо = СтрокиРазвернутогоСальдоСПодходящимиПараметрами[0].СубконтоРазвернутоеСальдо;
		СубконтоРазвернутоеСальдоКоличество = СубконтоРазвернутоеСальдо.Количество();
		
		ИндексПодзапроса = ИндексПодзапроса + 1;
		
		// Тексты для итогов по ресурсам
		ИндексСубСчета = 0;
		СчетаИтогов = ?(ОписаниеПодзапроса.ПоСубсчетам, СчетаРазвернутоеСальдо, СчетаПодзапроса);
		Для Каждого Счет Из СчетаИтогов Цикл
			
			ПолныйСписокСубконтоДетализацииПоСчетам.Вставить(Счет, СубконтоРазвернутоеСальдо);
			
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетРазвернутоеСальдоИтоги" + ИндексПодзапроса  + "_" + ИндексСубСчета, "СчетРазвернутоеСальдоИтоги", Счет);
			ТекстУсловие = ТекстУсловие + "Счет = &СчетРазвернутоеСальдоИтоги" + ИндексПодзапроса + "_" + ИндексСубСчета + " ИЛИ ";
			ИндексСубСчета = ИндексСубСчета + 1;
			
		КонецЦикла;
		
		// Счета без разворота по субконто будут обработаны общим запросом, поэтому отдельный запрос не формируем.
		// Модифицируема текст условия для вычисления развернутого сальдо и добавляем соответсвующий параметр.
		Если Не ОписаниеПодзапроса.ЕстьРазворотПоСубконтоТекущегоСчета Тогда
			// Счета, по которым нужно развернутое сальдо, но не в разрезе субконто, нельзя исключать из запроса по счетам. Запомним их.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаБезСубконтоСразвернутымСальдо,
				?(ОписаниеПодзапроса.ПоСубсчетам, СчетаВИерархии(СчетаПодзапроса), СчетаПодзапроса));

			СубсчетаСписок = Новый СписокЗначений;
			СубсчетаСписок.ЗагрузитьЗначения(СчетаРазвернутоеСальдо);
			БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетРазвернутоеСальдо" + ИндексПодзапроса, "СчетРазвернутоеСальдо", СубсчетаСписок);
			Продолжить;
		КонецЕсли;
					
		// Формируем текст параметра УсловиеСчета запроса детализации по субконто
		ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое = "Счет В (&СчетРазвернутоеСальдо" + ИндексПодзапроса + ")
													|				И (НЕ Счет.Забалансовый
													|					ИЛИ &ВыводитьЗабалансовыеСчета)";
		
		// Формируем текст параметра Субконто запроса по субконто развернутое
		ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое = "&СубконтоРазвернутый" + ИндексПодзапроса;
		
		// Если среди субсчетов, есть счета со свойствами отличными от счета верхнего уровня, то удалим эти субсчета.
		СчетаИсключенныеИзЗапросаПоСчетамРазвернутое = ОбщегоНазначенияКлиентСервер.СократитьМассив(СписокВсехСчетовРазвернутоеСальдо.ВыгрузитьЗначения(), СчетаПодзапроса);
		Для каждого Счет Из СчетаПодзапроса Цикл
			Исключения = ИерархияСчетовНастройкиРазвернутогоСальдо.Получить(Счет);
			Если Исключения <> Неопределено Тогда
				Для Каждого СчетИсключения Из Исключения Цикл
					// Если параметры развернутого сальдо настроены так,
					// что счет и его субсчет могут быть отнесены к одному подзапросу,
					// то исключать субсчет не следует
					Если СчетаПодзапроса.Найти(СчетИсключения) = Неопределено Тогда
						СчетаИсключенныеИзЗапросаПоСчетамРазвернутое.Добавить(СчетИсключения);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		СчетаРазвернутоеСальдо = ОбщегоНазначенияКлиентСервер.СократитьМассив(СчетаРазвернутоеСальдо, СчетаИсключенныеИзЗапросаПоСчетамРазвернутое);
		
		// Установка параметра СчетРазвернутоеСальдо
		СубсчетаСписок = Новый СписокЗначений;
		СубсчетаСписок.ЗагрузитьЗначения(СчетаРазвернутоеСальдо);
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетРазвернутоеСальдо" + ИндексПодзапроса, "СчетРазвернутоеСальдо", СубсчетаСписок);
		
		// Установка параметра "СубконтоДетализацииРазвернутый
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СубконтоРазвернутый" + ИндексПодзапроса, "СубконтоРазвернутый", СубконтоРазвернутоеСальдо);
		
		// Формируем текст запроса для счета детализации
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = ТекстЗапросПоСубконтоРазвернутое;
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстУсловиеСчетаПоСубконтоРазвернутое, ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое);
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстСубконтоПоСубконтоРазвернутое, ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое);
		
		// Для разворота сальдо по нужному количеству субконто, включим их во вложенном запросе.
		Для ИндексСубконто = 1 По СубконтоРазвернутоеСальдоКоличество Цикл
			
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое,
															"//Null КАК Субконто" + ИндексСубконто,
															"ОстаткиИОбороты.Субконто" + ИндексСубконто + " КАК Субконто" + ИндексСубконто);
			
		КонецЦикла;
		
		// Для детализации могут потребоваться не все субконто по которым разворачиваем
		// Поэтому в конечном запросе берем КоличествоСубконтоДетализации
		Для ИндексСубконто = 1 По ПараметрыАлгоритма.КоличествоСубконтоДетализации Цикл
			
			Если ИндексСубконто > ОписаниеПодзапроса.КоличествоСубконтоДетализируемыхПоСчету
			 Или ИндексСубконто > СубконтоРазвернутоеСальдоКоличество Тогда
				ТекстПодстановки = "Null КАК Субконто" + ИндексСубконто;
			Иначе
				ТекстПодстановки = "ВложенныйЗапрос.Субконто" + ИндексСубконто + " КАК Субконто" + ИндексСубконто;
			КонецЕсли;
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, "//Null КАК ВложенныйЗапрос.Субконто" + ИндексСубконто, ТекстПодстановки);
			
		КонецЦикла;
		
		// Доработка запроса набора данных
		НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросПоСубконтоРазвернутое
												+ Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			
	КонецЦикла;
	
	// Вычтем из счетов без развернутого сальдо по субконто те, по которым развернутое сальдо по субконто все-таки включено
	// отдельной настройкой
	Для ИндексСубконто = 0 По 2 Цикл
		СчетаБезСубконтоСРазвернутымСальдо = ОбщегоНазначенияКлиентСервер.СократитьМассив(СчетаБезСубконтоСРазвернутымСальдо, СчетаСРазворотомПоСубконто[ИндексСубконто]);
	КонецЦикла;
	
	// Среди счетов с развернутым сальдо могут быть субсчета, по которым не удасться получить развернутое сальдо.
	// У некоторых субсчетов может быть отличный состав субконто от родительского счета. Определим такие счета
	// и создадим для них отдельный запрос.
	СчетаСПодходящимСоставомСубконто = СчетаИсключенныеИзЗапросаПоСчетам(СписокВсехСчетовРазвернутоеСальдо, ПолныйСписокСубконтоДетализацииПоСчетам);
	
	// Подготовим список счетов для отдельного запроса по развернутому сальдо. Возьмем список всех счетов с развернутым
	// сальдо, включая их субсчета.
	СчетаДляОтдельногоЗапроса = СчетаВИерархии(СписокВсехСчетовРазвернутоеСальдо.ВыгрузитьЗначения());
	// Вычтем из них сами счета с развернутым сальдо.
	СчетаДляОтдельногоЗапроса = ОбщегоНазначенияКлиентСервер.СократитьМассив(СчетаДляОтдельногоЗапроса, СписокВсехСчетовРазвернутоеСальдо.ВыгрузитьЗначения());
	// Из оставшихся субсчетов вычитаем счета с подходящим составом субконто.
	СчетаДляОтдельногоЗапроса = ОбщегоНазначенияКлиентСервер.СократитьМассив(СчетаДляОтдельногоЗапроса, СчетаСПодходящимСоставомСубконто.ВыгрузитьЗначения());
	// Добавляем счета, у которых явно указано что сальдо не разворачивается по субконто.
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаДляОтдельногоЗапроса, СчетаБезСубконтоСРазвернутымСальдо);
	
	// Сформируем отдельный запрос для таких счетов
	Если СчетаДляОтдельногоЗапроса.Количество() > 0 Тогда
		
		СписокСчетаБезСубконтоСРазвернутымСальдо = Новый СписокЗначений;
		СписокСчетаБезСубконтоСРазвернутымСальдо.ЗагрузитьЗначения(СчетаДляОтдельногоЗапроса);
		
		// Установка параметра СчетРазвернутоеСальдо
		БухгалтерскиеОтчетыВызовСервера.СкопироватьПараметрСхемыКомпоновкиДанных(ПараметрыАлгоритма.Схема, "СчетРазвернутоеСальдо_БезСубконто", "СчетРазвернутоеСальдо", СписокСчетаБезСубконтоСРазвернутымСальдо);
		
		// Формируем текст параметра УсловиеСчета запроса детализации по субконто
		ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое = "Счет В ИЕРАРХИИ (&СчетРазвернутоеСальдо_БезСубконто)
													|				И (НЕ Счет.Забалансовый
													|					ИЛИ &ВыводитьЗабалансовыеСчета)";
		
		// Формируем текст параметра Субконто запроса по субконто развернутое
		ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое = "";
		
		// Формируем текст запроса для счета детализации
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = ТекстЗапросПоСубконтоРазвернутое;
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстУсловиеСчетаПоСубконтоРазвернутое, ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое);
		ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстСубконтоПоСубконтоРазвернутое, ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое);
		
		// Добавляем нужное количество субконто
		Для Индекс = 1 По ПараметрыАлгоритма.КоличествоСубконтоДетализации Цикл
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, "//Null КАК ВложенныйЗапрос.Субконто" + Индекс, "Null КАК Субконто" + Индекс);
		КонецЦикла;
		
		// Доработка запроса набора данных
		НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросПоСубконтоРазвернутое;
		
	Иначе
		
		// Удаляем Ключевую фразу " ОБЪЕДИНИТЬ ВСЕ " в конце запроса
		НаборДанных.Запрос = Лев(НаборДанных.Запрос, СтрДлина(НаборДанных.Запрос) - 16);
	
	КонецЕсли;
	
	ПараметрыАлгоритма.ТекстУсловие              = Лев(ТекстУсловие, СтрДлина(ТекстУсловие) - 4);
	ПараметрыАлгоритма.ВыводитьРазвернутоеСальдо = (ЗапросыДляФормирования.Количество() > 0);
	ПараметрыАлгоритма.ЕстьРазворотПоСубконто    = ЕстьРазворотПоСубконто;
	ПараметрыАлгоритма.СчетаДляОтдельногоЗапроса = СчетаДляОтдельногоЗапроса;
	
КонецПроцедуры

Функция НастройкиОтчетаПоСчетам(ГруппировкиОтчета)
	
	// Создаем таблицу из которой дальше будем считывать настройки группировки.
	НастройкаГруппировки = ГруппировкиОтчета.Скопировать();
	
	// Подготовим таблицу настроек, для этого создадим ее копию и убедимся, что в ней каждый счет упоминается не более 1 раза.
	СчетаГруппировки = ГруппировкиОтчета.Скопировать();
	СчетаГруппировки.Свернуть("Счет");
	
	Если СчетаГруппировки.Количество() <> ГруппировкиОтчета.Количество() Тогда
		
		НастройкаГруппировки.Индексы.Добавить("Счет");
		ОтборПоСчету = Новый Структура("Счет");
		
		// Удалим дублирующиеся настройки счетов из таблицы
		Для Каждого Счет Из СчетаГруппировки.ВыгрузитьКолонку("Счет") Цикл
			
			// Ищем строки с таким счетом
			ОтборПоСчету.Счет = Счет;
			СтрокиГруппировки = НастройкаГруппировки.НайтиСтроки(ОтборПоСчету);
			
			// Удаляем все найденные строки с таким счетом кроме первой
			Для Сч = 1 По СтрокиГруппировки.ВГраница() Цикл
				НастройкаГруппировки.Удалить(СтрокиГруппировки[Сч]);
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НастройкаГруппировки;
	
КонецФункции

#КонецОбласти

#Область РасшифровкаСтандартныхОтчетов

// Заполняет настройки расшифровки (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки) для переданного экземпляра отчета
//
// Параметры:
//  Настройки				 - Структура								 - Настройки расшифровки отчета, которые нужно заполнить (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки)
//  Объект					 - ОтчетОбъект								 - Отчет из данных которого нудно собрать универсалные настройки
//  ДанныеРасшифровки		 - ДанныеРасшифровкиКомпоновкиДанных		 - Данные расшифровки отчета
//  ИдентификаторРасшифровки - ИдентификаторРасшифровкиКомпоновкиДанных  - Идентификатор расшифровки из ячейки для которой вызвана расшифровка
//  РеквизитыРасшифровки	 - Структура								 - Реквизиты отчета полученные из контекста расшифровываемой ячейки
//
Процедура ЗаполнитьНастройкиРасшифровки(Настройки, Объект, ДанныеРасшифровки, ИдентификаторРасшифровки, РеквизитыРасшифровки) Экспорт

	БухгалтерскиеОтчетыРасшифровка.ЗаполнитьНастройкиРасшифровкиПоДаннымСтандартногоОтчета(Настройки, ДанныеРасшифровки, ИдентификаторРасшифровки, Объект, РеквизитыРасшифровки);

	Счет = Неопределено;
	Настройки.ТаблицаГруппировка.Очистить();
	Если Настройки.Свойство("Счет", Счет) Тогда
		НужноПоменятьНумерациюСубконто = Ложь;
		СтрокаГруппировкиПоСчету = Объект.Группировка.Найти(Счет, "Счет");
		
		Если СтрокаГруппировкиПоСчету = Неопределено Тогда
			
			СтрокаГруппировкиПоСчету = Объект.Группировка.Найти(Счет.Родитель, "Счет");
			НужноПоменятьНумерациюСубконто = Истина;
			
		КонецЕсли;
		
		Если СтрокаГруппировкиПоСчету <> Неопределено Тогда
			
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
			
			СтрокаПоСубконто = СтрокаГруппировкиПоСчету.ПоСубконто;
			
			// В СтрокаПоСубконто, храниться порядок и признак использования видов субконто счета, в следующем виде:
			// "+1-2" - значение приведенной строки указывает на то, что у счета 2 вида субконто и Субконто1 используется,
			// а у Субконто2 флаг использования снят.
			// Ниже произведем анализ подобной строки и устанвим группировки в соответсвии с ее содержанием
			
			КартаВидовСубконто = Новый Соответствие;
			НомерСубконтоВЗапросе = 1;
			ТипЧисло = Новый ОписаниеТипов("Число");
			КоличествоСубконто = СтрДлина(СтрокаПоСубконто) / 2; 
			Для Индекс = 1 По КоличествоСубконто Цикл
				ИндексСубконто = Сред(СтрокаПоСубконто, Индекс*2, 1);
				Если ИндексСубконто = "0" Тогда
					
					СтрокаГруппировки = БухгалтерскиеОтчетыКлиентСервер.НовыйСтрокаГруппировки();
					СтрокаГруппировки.Поле = 			"Подразделение";
					СтрокаГруппировки.Представление = 	"Подразделение";
					СтрокаГруппировки.Использование = 	?(Сред(СтрокаПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь);
					СтрокаГруппировки.ТипГруппировки = 	0;
					
					Настройки.ТаблицаГруппировка.Добавить(СтрокаГруппировки);
					
				Иначе
					НомерСубконто = Сред(СтрокаПоСубконто, Индекс*2, 1);
					СтрокаГруппировки = БухгалтерскиеОтчетыКлиентСервер.НовыйСтрокаГруппировки();
					СтрокаГруппировки.Поле = 			"Субконто" + НомерСубконто;
					СтрокаГруппировки.Представление = 	ДанныеСчета["ВидСубконто" + Сред(СтрокаПоСубконто, Индекс*2, 1) + "Наименование"];
					СтрокаГруппировки.Использование = 	?(Сред(СтрокаПоСубконто, Индекс * 2 - 1, 1) = "+", Истина, Ложь);
					СтрокаГруппировки.ТипГруппировки = 	0;
					
					Настройки.ТаблицаГруппировка.Добавить(СтрокаГруппировки);
					
					НомерСубконтоЧислом = ТипЧисло.ПривестиЗначение(НомерСубконто);
					
					Если СтрокаГруппировки.Использование И НомерСубконтоЧислом <> 0 Тогда
						КартаВидовСубконто.Вставить(НомерСубконтоВЗапросе, НомерСубконто);
						НомерСубконтоВЗапросе = НомерСубконтоВЗапросе + 1;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Если НужноПоменятьНумерациюСубконто Тогда
				
				БухгалтерскиеОтчетырасшифровка.ПоменятьНумерациюСубконтоВТабличнойЧасти("ТаблицаГруппировка", Настройки, Счет.Родитель, Счет);
				
			КонецЕсли;
			
			БухгалтерскиеОтчетыРасшифровка.ПоменятьНумерациюСубконтоВОтборе(Настройки, Счет, КартаВидовСубконто);
			
		КонецЕсли;
		
		СтрокаРазвернутогоСальдоПоСчету = Объект.РазвернутоеСальдо.Найти(Счет, "Счет");
		
		Если СтрокаРазвернутогоСальдоПоСчету = Неопределено Тогда
			
			СтрокаРазвернутогоСальдоПоСчету = Объект.РазвернутоеСальдо.Найти(Счет.Родитель, "Счет");
			
		КонецЕсли;
		
		Если СтрокаРазвернутогоСальдоПоСчету <> Неопределено И СтрокаРазвернутогоСальдоПоСчету.Использование Тогда
			
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
			Настройки.РазвернутоеСальдо = СвойстваСчета.Вид = ВидСчета.АктивноПассивный;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Адаптирует переданные настройки для данного вида отчетов.
// Перед применением настроек расшифровки может возникнуть необходимость учесть особенности этого вида отчетов.
//
// Параметры:
//  Настройки	 - Структура - Настройки которые нужно адаптировать (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки)
//
Процедура АдаптироватьНастройки(Настройки) Экспорт
	
КонецПроцедуры

// Устанавливает какими отчетами и при каких условиях может быть расшифрован этот вид отчетов
//
// Параметры:
//  Правила - ТаблицаЗначений с правилами расшифровки этого отчета см. БухгалтерскиеОтчетыРасшифровка.НовыйПравилаРасшифровки
//
Процедура ЗаполнитьПравилаРасшифровки(Правила) Экспорт
	
	Правило = Правила.Добавить();
	Правило.Отчет = "ОборотноСальдоваяВедомостьПоСчету";
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "Счет", "Счет");
	Правило.ШаблонПредставления = НСтр("ru = 'ОСВ по счету [Счет]'");
	
	Правило = Правила.Добавить();
	Правило.Отчет = "КарточкаСчета";
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "Счет", "Счет");
	Правило.ШаблонПредставления = НСтр("ru = 'Карточка счета [Счет]'");
	
	Правило = Правила.Добавить();
	Правило.Отчет = "АнализСчета";
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "Счет", "Счет");
	Правило.ШаблонПредставления = НСтр("ru = 'Анализ счета [Счет]'");
	
	Правило = Правила.Добавить();
	Правило.Отчет = "ОборотыСчета";
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "Счет", "Счет");
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "Периодичность", "", 9);
	Правило.ШаблонПредставления = НСтр("ru = 'Обороты счета [Счет] по месяцам'");
	
	Правило = Правила.Добавить();
	Правило.Отчет = "ОборотыСчета";
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "Счет", "Счет");
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "Периодичность", "", 6);
	Правило.ШаблонПредставления = НСтр("ru = 'Обороты счета [Счет] по дням'");
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли