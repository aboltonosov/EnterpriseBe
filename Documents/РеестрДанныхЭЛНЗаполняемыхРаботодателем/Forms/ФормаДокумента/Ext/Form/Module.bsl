#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", 
			"Объект.Организация",
			"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере("Объект");
		
		ОбновитьВторичныеДанныеДокумента(Ложь, Ложь);
		
		Объект.СтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ВРаботе;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Перед записью переадресуем сообщения с полей объекта на поля формы
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	Для Каждого Сообщение Из Сообщения Цикл
		Если Найти(Сообщение.Поле, "].ЛистокНетрудоспособности") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоНомераСтроки = Найти(Сообщение.Поле, "[");
		ОкончаниеНомераСтроки = Найти(Сообщение.Поле, "]");
		Если НачалоНомераСтроки > 0
			И ОкончаниеНомераСтроки > 0 Тогда
			НачалоНомераСтроки = НачалоНомераСтроки + 1;
			НомерСтроки = Сред(Сообщение.Поле, НачалоНомераСтроки, ОкончаниеНомераСтроки - НачалоНомераСтроки);
			ЛистокНетрудоспособности = Объект.ДанныеЭЛН[Число(НомерСтроки)].ЛистокНетрудоспособности;
			Если ЗначениеЗаполнено(ЛистокНетрудоспособности) Тогда
				Сообщение.КлючДанных = ЛистокНетрудоспособности;
				Сообщение.Поле = Прав(Сообщение.Поле, СтрДлина(Сообщение.Поле) - (ОкончаниеНомераСтроки + 1));
				Сообщение.ПутьКДанным = "Объект";
			Иначе
				Сообщение.Поле = Лев(Сообщение.Поле, Найти(Сообщение.Поле, "]")) + ".ЛистокНетрудоспособности";
			КонецЕсли;
		КонецЕсли;
		Отказ = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РеестрДанныхЭЛНЗаполняемыхРаботодателем", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	ОбновитьВторичныеДанныеДокумента(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеЭЛН

&НаКлиенте
Процедура ДанныеЭЛНПослеУдаления(Элемент)
	ДанныеЭЛНПослеУдаленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДанныеЭЛНПриОкончанииРедактированияНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = ИменаРеквизитовСтрокиНаФорме();
	СписокРеквизитов.Добавить("НомерСтроки");
	СписокРеквизитов.Добавить("ЛистокНетрудоспособности");
	СтруктураДанныеЭЛН = Новый Структура;
	Для Каждого ЭлементСписка Из СписокРеквизитов Цикл
		СтруктураДанныеЭЛН.Вставить(ЭлементСписка.Значение, ТекущиеДанные[ЭлементСписка.Значение]);
	КонецЦикла;
	
	ИнформацияОДокументе = Новый Структура;
	ИнформацияОДокументе.Вставить("ЭтоНовый", Объект.Ссылка.Пустая());
	ИнформацияОДокументе.Вставить("Номер", Объект.Номер);
	ИнформацияОДокументе.Вставить("Дата", Объект.Дата);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеЭЛН", СтруктураДанныеЭЛН);
	ПараметрыФормы.Вставить("ИнформацияОДокументе", ИнформацияОДокументе);
	
	Оповещение = Новый ОписаниеОповещения("ДанныеЭЛНВыборЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.Форма.СведенияОЛисткеНетрудоспособности", ПараметрыФормы, ЭтотОбъект, , , , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНЛистокНетрудоспособностиПриИзменении(Элемент)
	ЗаполнитьСтрокуСведений(Элементы.ДанныеЭЛН.ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ОбновитьВторичныеДанныеДокумента(Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРеестрДанныхЭЛНВСервисФСС(Команда)
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Отправка реестра ЭЛН в ФСС...'"));
	
	СтруктураПараметровЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Если Не Записать(СтруктураПараметровЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыгрузки = ВыгрузитьЗапросДляОтправкиРеестраЭЛННаСервере(Ложь);
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СтруктураПараметровЗаписи", СтруктураПараметровЗаписи);
	Контекст.Вставить("Организация", РезультатВыгрузки.Организация);
	Контекст.Вставить("ИспользоватьШифрование", Истина);
	Оповещение = Новый ОписаниеОповещения("ОтправитьРеестрДанныхЭЛНВСервисФССПослеПодписиSOAP", ЭтотОбъект, Контекст);
	
	// Подписание реестра.
	ЭлектронныйДокументооборотСФССКлиент.АдресПодписанногоSOAPЗагрузкиЭЛНВФСС(
		Оповещение,
		РезультатВыгрузки.Организация,
		РезультатВыгрузки.РегистрационныйНомерФСС,
		РезультатВыгрузки.ТекстЗапроса,
		Контекст.ИспользоватьШифрование);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлРеестра(Команда)
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли;
	
	СтруктураПараметровЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Если Не Записать(СтруктураПараметровЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыгрузки = ВыгрузитьЗапросДляОтправкиРеестраЭЛННаСервере(Истина);
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Для выгрузки файла рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
	Обработчик = Новый ОписаниеОповещения("ЗаписатьФайлРеестраПослеУстановкиРасширенияРаботыСФайлами", ЭтотОбъект, РезультатВыгрузки);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик, ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФайлРеестра(Команда)
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли;
	
	СтруктураПараметровЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Если Не Записать(СтруктураПараметровЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыгрузки = ВыгрузитьЗапросДляОтправкиРеестраЭЛННаСервере(Ложь);
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВыгрузкуРеестра(РезультатВыгрузки);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с формой.

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат РеквизитФормыВЗначение("Объект").ОбъектЗафиксирован();
КонецФункции

&НаСервере
Процедура ДополнитьФорму()
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеДокумента(ОбновитьТаблицуЭЛН, ОчищатьЗначения)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ЕстьИзменения = ДокументОбъект.ОбновитьВторичныеДанныеДокумента(ОбновитьТаблицуЭЛН, ОчищатьЗначения);
	Если ЕстьИзменения Тогда
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание команд формы.

&НаКлиенте
Процедура ОтправитьРеестрДанныхЭЛНВСервисФССПослеПодписиSOAP(АдресПодписанногоSOAP, Контекст) Экспорт
	Если Не ЗначениеЗаполнено(АдресПодписанногоSOAP) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Отправка реестра ЭЛН в ФСС...'"));
	
	АдресЗашифрованногоОтветаSOAP = Неопределено;
	// Отправка реестра.
	ОбменВыполненУспешно = ОтправитьРеестрДанныхЭЛНВСервисФССНаСервере(АдресПодписанногоSOAP, АдресЗашифрованногоОтветаSOAP, Истина, Ложь);
	Если Не ОбменВыполненУспешно Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьРеестрДанныхЭЛНВСервисФССПослеПроверкиПодписиSOAP", ЭтотОбъект, Контекст);
	ЭлектронныйДокументооборотСФССКлиент.ПроверитьПодписьSOAPОтветаЭЛНВФСС(
		Оповещение,
		Контекст.Организация,
		АдресЗашифрованногоОтветаSOAP,
		Контекст.ИспользоватьШифрование);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРеестрДанныхЭЛНВСервисФССПослеПроверкиПодписиSOAP(Результат, Контекст) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ПодписьВалидна = Ложь Тогда
		// Выводим сообщение, но продолжаем обмен (данные-то мы получили).
		ТекстОшибки = НСтр("ru = 'Подпись результатов отправки недействительна.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Отправка реестра ЭЛН в ФСС...'"));
	
	// Обработка результата.
	ОбменВыполненУспешно = ОтправитьРеестрДанныхЭЛНВСервисФССНаСервере(Неопределено, Результат.АдресРасшифрованногоОтветаSOAP, Ложь, Истина);
	Если ОбменВыполненУспешно Тогда
		Записать(Контекст.СтруктураПараметровЗаписи);
		Состояние();
		ПоказатьОповещениеПользователя(Нстр("ru = 'Реестр ЭЛН отправлен в ФСС.'"), , , БиблиотекаКартинок.Успешно32);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьЗапросДляОтправкиРеестраЭЛННаСервере(ПомещатьВФайл)
	Документ = РеквизитФормыВЗначение("Объект");
	Результат = ОбменЛисткамиНетрудоспособностиФСС.ВыгрузитьЗапросДляОбменаЭЛН(Документ, "prParseReestrFile");
	Если Результат <> Неопределено Тогда
		ЗначениеВРеквизитФормы(Документ, "Объект");
		Если ПомещатьВФайл Тогда
			Результат.Вставить("Адрес", ПоместитьТекстВоВременноеХранилище(Результат.ТекстЗапроса, "xml", УникальныйИдентификатор));
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьТекстВоВременноеХранилище(Текст, Расширение, ИдентификаторФормы)
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	ТекстовыйДокумент.Записать(ПолноеИмяФайла);
	ТекстовыйДокумент = Неопределено;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	
	СтандартныеПодсистемыСервер.ОчиститьКаталогВременныхФайлов(ПолноеИмяФайла);
	
	Возврат Адрес;
КонецФункции

&НаСервере
Функция ОтправитьРеестрДанныхЭЛНВСервисФССНаСервере(Знач АдресЗашифрованногоЗапросаSOAP, АдресЗашифрованногоОтветаSOAP,
	Знач ВыполнитьОбмен, Знач ОбработатьРезультаты)
	
	Документ = РеквизитФормыВЗначение("Объект");
	
	ОбменВыполненУспешно = ОбменЛисткамиНетрудоспособностиФСС.ВыполнитьОбменДаннымиЭЛН(
		Документ,
		"prParseReestrFile",
		АдресЗашифрованногоЗапросаSOAP,
		АдресЗашифрованногоОтветаSOAP,
		ВыполнитьОбмен,
		ОбработатьРезультаты);
	
	Если ОбработатьРезультаты И ОбменВыполненУспешно Тогда
		ЗначениеВРеквизитФормы(Документ, "Объект");
	КонецЕсли;
	
	Возврат ОбменВыполненУспешно;
КонецФункции

&НаКлиенте
Процедура ЗаписатьФайлРеестраПослеУстановкиРасширенияРаботыСФайлами(Подключено, РезультатВыгрузки) Экспорт
	Если Не Подключено Тогда
		ПоказатьВыгрузкуРеестра(РезультатВыгрузки);
		Возврат;
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Реестр ЭЛН от %1'"),
		Формат(Объект.Дата, "ДЛФ=D"));
	ДиалогСохраненияФайла.Фильтр = НСтр("ru = 'Файлы XML (*.xml)|*.xml'");
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");
	
	Обработчик = Новый ОписаниеОповещения("ЗаписатьФайлРеестраПослеВыбораФайла", ЭтотОбъект, РезультатВыгрузки);
	ДиалогСохраненияФайла.Показать(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлРеестраПослеВыбораФайла(ВыбранныеФайлы, РезультатВыгрузки) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ВыбранныеФайлы[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, РезультатВыгрузки.Адрес));
	
	Обработчик = Новый ОписаниеОповещения("ОбработкаРезультатаНеТребуется", ЭтотОбъект);
	НачатьПолучениеФайлов(Обработчик, ПолучаемыеФайлы, ПолноеИмяФайла, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаНеТребуется(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Возврат; // Обработка результата не требуется.
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыгрузкуРеестра(РезультатВыгрузки)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(РезультатВыгрузки.ТекстЗапроса);
	ТекстовыйДокумент.Показать(, Нстр("ru = 'Файл сведений'"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание табличной части ДанныеЭЛН.

&НаСервере
Процедура ДанныеЭЛНПослеУдаленияНаСервере()
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДанныеЭЛНПриОкончанииРедактированияНаСервере()
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтобранныеСтроки = Объект.ДанныеЭЛН.НайтиСтроки(Новый Структура("НомерСтроки", Результат.НомерСтроки));
	Результат.Удалить("НомерСтроки");
	Если ОтобранныеСтроки.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(ОтобранныеСтроки[0], Результат);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение документа.

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	ДополнитьФорму();
	ОбновитьВторичныеДанныеДокумента(Истина, Ложь);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицаЗначений = Документы.БольничныйЛист.ДанныеДляРеестраЭЛН(, ДокументОбъект);
	ДокументОбъект.ДанныеЭЛН.Загрузить(ТаблицаЗначений);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуСведений(Идентификатор)
	ТекущаяСтрока = Объект.ДанныеЭЛН.НайтиПоИдентификатору(Идентификатор);
	
	СписокРеквизитов = ИменаРеквизитовСтрокиНаФорме();
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		ТекущаяСтрока[Реквизит.Значение] = Неопределено;
	КонецЦикла;
	
	ТаблицаЗначений = Документы.БольничныйЛист.ДанныеДляРеестраЭЛН(ТекущаяСтрока.ЛистокНетрудоспособности);
	Если ТаблицаЗначений.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТаблицаЗначений[0]);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаРеквизитовСтрокиНаФорме()
	СписокРеквизитов = Новый СписокЗначений;
	
	СписокРеквизитов.Добавить("НомерЛисткаНетрудоспособности");
	СписокРеквизитов.Добавить("Сотрудник");
	СписокРеквизитов.Добавить("ВидЗанятости");
	СписокРеквизитов.Добавить("СНИЛС");
	СписокРеквизитов.Добавить("ИНН");
	СписокРеквизитов.Добавить("СтажЛет");
	СписокРеквизитов.Добавить("СтажМесяцев");
	СписокРеквизитов.Добавить("СтажРасширенныйЛет");
	СписокРеквизитов.Добавить("СтажРасширенныйМесяцев");
	СписокРеквизитов.Добавить("УсловияИсчисленияКод1");
	СписокРеквизитов.Добавить("УсловияИсчисленияКод2");
	СписокРеквизитов.Добавить("УсловияИсчисленияКод3");
	СписокРеквизитов.Добавить("ДатаАктаН1");
	СписокРеквизитов.Добавить("ДатаНачалаРаботы");
	СписокРеквизитов.Добавить("ПриступитьКРаботеС");
	СписокРеквизитов.Добавить("ДатаНачалаОплаты");
	СписокРеквизитов.Добавить("ДатаОкончанияОплаты");
	СписокРеквизитов.Добавить("ДатаНачалаОплатыФСС");
	СписокРеквизитов.Добавить("ДатаОкончанияОплатыФСС");
	СписокРеквизитов.Добавить("БазаДляРасчетаСреднегоЗаработка");
	СписокРеквизитов.Добавить("СреднийДневнойЗаработок");
	СписокРеквизитов.Добавить("СуммаОплатыЗаСчетРаботодателя");
	СписокРеквизитов.Добавить("СуммаОплатыЗаСчетФСС");
	СписокРеквизитов.Добавить("ИдентификаторСтрокиФикс");
	СписокРеквизитов.Добавить("ФинансированиеФедеральнымБюджетом");
	СписокРеквизитов.Добавить("Хеш");
	
	Возврат СписокРеквизитов;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Ключевые реквизиты заполнения формы.

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.ДанныеЭЛН");
	Возврат Массив
КонецФункции

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", Нстр("ru = 'организации'")));
	Возврат Массив
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подключаемые команды.

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


#КонецОбласти
