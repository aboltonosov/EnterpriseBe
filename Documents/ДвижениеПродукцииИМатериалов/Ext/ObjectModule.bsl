#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыДвиженияПродукцииИМатериалов[НовыйСтатус];
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
		
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ПроизводствоСервер.ЗаполнитьИлиОчиститьРаспоряжениеВТабличнойЧасти(Товары, Распоряжение, ПоРаспоряжениям);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Округление количества если движение не через кладовые
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Склады")
			И ЗначениеЗаполнено(Отправитель)
			И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отправитель, "ЦеховаяКладовая")
		ИЛИ ТипЗнч(Получатель) = Тип("СправочникСсылка.Склады")
			И ЗначениеЗаполнено(Получатель)
			И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ЦеховаяКладовая") Тогда
		ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий);
	
	// Заполнение ТЧ ВидыЗапасов
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация, Отправитель, Получатель, Неопределено);
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерийОтправитель");
		ИменаПолей.Вставить("Назначение", "НазначениеОтправителя");
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета, ИменаПолей);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		
		ЗаполнитьВидыЗапасов(Отказ);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМ_УТ.ЕстьМаркируемаяПродукцияГИСМ(Товары);
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ОбъектыОснований") Тогда
		
		ДокументОснование = ДанныеЗаполнения.ОбъектыОснований[0];
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
			
			Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
				ЗаполнитьПередачуМатериаловНаОснованииЗаказаДавальца(ДанныеЗаполнения.ОбъектыОснований);
			ИначеЕсли ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой Тогда
				ЗаполнитьВыпускПродукцииНаОснованииЗаказаДавальца(ДанныеЗаполнения.ОбъектыОснований);
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Заполнение на основании документа %1 с хозяйственной операцией
					|""%2"" не предусмотрено. Обратитесь к администратору.'"), ДокументОснование, ДанныеЗаполнения.ХозяйственнаяОперация);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			ЗаполнитьВыпускПродукцииНаОснованииЗаказаКлиента(ДокументОснование);
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеСырьяОтДавальца") Тогда
			
			ЗаполнитьПередачуМатериаловНаОснованииПоступленияСырьяОтДавальца(ДанныеЗаполнения.ОбъектыОснований);
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			ЗаполнитьПередачуМатериаловНаОснованииПоступления(ДанныеЗаполнения.ОбъектыОснований);
			
		ИначеЕсли (ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
					Или ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства)
				И (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство")
					Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЭтапПроизводства2_2")) Тогда
			
			СтруктураЗаполнения = Новый Структура("МассивЗаказов",  ДанныеЗаполнения.ОбъектыОснований);
			СтруктураЗаполнения.Вставить("ХозяйственнаяОперация", ДанныеЗаполнения.ХозяйственнаяОперация);
			ЗаполнитьПоРаспоряжениям(СтруктураЗаполнения);
			
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Заполнение на основании документа %1 не предусмотрено. Обратитесь к администратору.'"), ДокументОснование);
		КонецЕсли; 
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Товары") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
		
		Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.НазначениеОтправителя = НоваяСтрока.Назначение;
		КонецЦикла;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов);
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий, Ложь);
		
	Иначе
		
		// Заполнение по распоряжениям.
		
		СтруктураЗаполнения = Неопределено;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда // команда ввода на основании
			
			СтруктураЗаполнения = Новый Структура("МассивЗаказов", ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			Если ДанныеЗаполнения.Свойство("ОпределитьРаспоряжения") Тогда
				
				СтруктураЗаполнения = ДанныеЗаполнения;
				СтруктураЗаполнения.Вставить("МассивЗаказов", ОпределитьРаспоряжения(ДанныеЗаполнения.РеквизитыШапки));
				
			ИначеЕсли ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда // из спец. формы оформления накладных
				
				СтруктураЗаполнения = ДанныеЗаполнения;
				
			ИначеЕсли ДанныеЗаполнения.Свойство("РеквизитыШапки") Тогда
				
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
				
			Иначе
				
				ЗаполнитьПоОтбору(ДанныеЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураЗаполнения <> Неопределено Тогда
			
			ЗаполнитьПоРаспоряжениям(СтруктураЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Дата, Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Отправитель");
	МассивНепроверяемыхРеквизитов.Добавить("Получатель");
	МассивНепроверяемыхРеквизитов.Добавить("Товары");
	
	ОтключитьПроверкуЗаполненияПоХозяйственнойОперации(МассивНепроверяемыхРеквизитов);
	
	МенеджерВременныхТаблиц = СформироватьВременныеТаблицыДляПроверки();
	ПредставлениеПолей = Документы.ДвижениеПродукцииИМатериалов.ПредставлениеПолей(ЭтотОбъект);
	
	ПроверитьРеквизитыШапки(ПредставлениеПолей, Отказ);
	ПроверитьТовары(ПредставлениеПолей, Отказ);
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ПроверитьВозможностьОкругления = 
		ТипЗнч(Отправитель) = Тип("СправочникСсылка.Склады")
			И ЗначениеЗаполнено(Отправитель)
			И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отправитель, "ЦеховаяКладовая")
		ИЛИ ТипЗнч(Получатель) = Тип("СправочникСсылка.Склады")
			И ЗначениеЗаполнено(Получатель)
			И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ЦеховаяКладовая");
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	// Проверка заполнения серий в т.ч. серии.
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
	
	Если Не Справочники.УчетныеПолитикиОрганизаций.ИспользуетсяВыпускПоПлановойСтоимости(Организация, Дата)
		Или (ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ДвижениеПродукцииИМатериалов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыМатериаловВПроизводство(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	РегистрыНакопления.ТоварыКОформлениюПоступления.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеПроизводством.ОтразитьРаспоряженияНаПередачуИзПроизводства(ДополнительныеСвойства, Движения, Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус = Перечисления.СтатусыДвиженияПродукцииИМатериалов.Отгружено;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	ЕстьМаркируемаяПродукцияГИСМ = Ложь;
	
	ВидыЗапасовУказаныВручную = Ложь;
	ВидыЗапасов.Очистить();
	Серии.Очистить();
	
	Документы.ДвижениеПродукцииИМатериалов.ОтвязатьОтРаспоряжений(ЭтотОбъект);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ИдентификаторСтроки = "";
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыДвиженийПродукцииИМатериалов") Тогда
		Статус = Перечисления.СтатусыДвиженияПродукцииИМатериалов.Принято;
	КонецЕсли;
	
	ПредставлениеПолей = Документы.ДвижениеПродукцииИМатериалов.ПредставлениеПолей(ЭтотОбъект);
	Если ПредставлениеПолей.ТипОтправителя = "Подразделение" Тогда
		Отправитель = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Отправитель);
	ИначеЕсли ПредставлениеПолей.ТипОтправителя = "Кладовая" Тогда
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный);
		Отправитель = ЗначениеНастроекПовтИсп.ПолучитьЦеховуюКладовуюПоУмолчанию(Подразделение, Отправитель);
	Иначе
		Отправитель = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Отправитель);
	КонецЕсли;
	
	Если ПредставлениеПолей.ТипПолучателя = "Подразделение" Тогда
		Получатель = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Получатель);
	ИначеЕсли ПредставлениеПолей.ТипПолучателя = "Кладовая" Тогда
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный);
		Получатель = ЗначениеНастроекПовтИсп.ПолучитьЦеховуюКладовуюПоУмолчанию(Подразделение, Получатель);
	Иначе
		Получатель = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Получатель);
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		ВидЦены = Справочники.Склады.УчетныйВидЦены(Отправитель);
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство Тогда
		ПоРаспоряжениям = Истина;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеВПроизводстве Тогда
		ПоРаспоряжениям = Ложь;
	КонецЕсли;
	
	НалогообложениеНДСОрганизации = Документы.ДвижениеПродукцииИМатериалов.НалогообложениеНДС(ЭтотОбъект);
	
	УчетНДСУТ.ПроверитьКорректностьДеятельностиНДСПотребления(
		НалогообложениеНДС,
		Организация,
		Дата,
		ХозяйственнаяОперация);
	
	Если НалогообложениеНДС.Пустая() Тогда
		НалогообложениеНДС = НалогообложениеНДСОрганизации;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьРаспоряжения(РеквизитыШапки)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОстатки.Распоряжение
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(
	|			,
	|			Подразделение = &Подразделение
	|				И Склад = &Склад) КАК ТаблицаОстатки
	|ГДЕ
	|	ТаблицаОстатки.Распоряжение.Организация = &Организация
	|	И ТаблицаОстатки.КОформлениюОстаток <> 0";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", РеквизитыШапки.Организация);
	Запрос.УстановитьПараметр("Подразделение", РеквизитыШапки.Получатель);
	Запрос.УстановитьПараметр("Склад", РеквизитыШапки.Отправитель);
	
	МассивЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Распоряжение");
	
	Возврат МассивЗаказов;

КонецФункции

Процедура ЗаполнитьПоОтбору(СтруктураОтбора)
	
	Если СтруктураОтбора.Свойство("Организация") Тогда
		Организация = СтруктураОтбора.Организация;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Отправитель") Тогда
		Отправитель = СтруктураОтбора.Отправитель;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Получатель") Тогда
		Получатель = СтруктураОтбора.Получатель;
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = СтруктураОтбора.ХозяйственнаяОперация;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРаспоряжениям(СтруктураЗаполнения)
	
	Если СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		И СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую
		И СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		И СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
		И СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
		И СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Заполнение по распоряжениям для операции ""%1"" не предусмотрено.'"), СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураЗаполнения.РеквизитыШапки);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыДвиженийПродукцииИМатериалов") Тогда
		Статус = Перечисления.СтатусыДвиженияПродукцииИМатериалов.Отгружено;
	Иначе
		Статус = Перечисления.СтатусыДвиженияПродукцииИМатериалов.Принято;
	КонецЕсли;

	ПараметрыЗаполнения = Документы.ДвижениеПродукцииИМатериалов.ПараметрыЗаполненияДокумента();
	ПараметрыЗаполнения.РеквизитыШапки = СтруктураЗаполнения.РеквизитыШапки;
	
	Если СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		ПараметрыЗаполнения.Склад = Отправитель;
	Иначе
		ПараметрыЗаполнения.Склад = Получатель;
	КонецЕсли; 
	
	Если СтруктураЗаполнения.Свойство("ЗаполнятьПоОрдеру") Тогда
		ПараметрыЗаполнения.ЗаполнятьПоОрдеру = СтруктураЗаполнения.ЗаполнятьПоОрдеру;
	ИначеЕсли СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		ИспользоватьОрдернуюСхему = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(ПараметрыЗаполнения.Склад, ТекущаяДатаСеанса());
		ПорядокОформления = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить();
		СначалаОрдера = (ПорядокОформления = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера);
		
		ПараметрыЗаполнения.ЗаполнятьПоОрдеру = ИспользоватьОрдернуюСхему И СначалаОрдера;
	КонецЕсли;
	
	ТаблицаНакладная = Товары.Выгрузить();
	
	ДопОтборы = Новый Структура();
	ДопОтборы.Вставить("Склад",                 ПараметрыЗаполнения.Склад);
	ДопОтборы.Вставить("Получатель",            Получатель);
	ДопОтборы.Вставить("ХозяйственнаяОперация", СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация);
	
	Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьПоЗаказамОрдерам(ТаблицаНакладная, Ссылка, СтруктураЗаполнения.МассивЗаказов, ПараметрыЗаполнения, ДопОтборы);
	
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		ТаблицаНакладная.Колонки.Количество.Имя        = "КоличествоДоИзменения";
		ТаблицаНакладная.Колонки.КоличествоВОрдере.Имя = "Количество";
	Иначе
		ТаблицаНакладная.Колонки.Количество.Имя        = "КоличествоДоИзменения";
		ТаблицаНакладная.Колонки.КоличествоВЗаказе.Имя = "Количество";
	КонецЕсли;
	
	НакладныеСервер.УдалитьПустыеСтроки(ТаблицаНакладная, "Количество");
	
	Товары.Загрузить(ТаблицаНакладная);
	
	Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьШапкуДокументаПоЗаказу(
			ЭтотОбъект, 
			ПараметрыЗаполнения, 
			СтруктураЗаполнения.МассивЗаказов);
	
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		Если СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
			Или СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
			Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьСерииПоОтгрузке(ЭтотОбъект);
		КонецЕсли; 
	ИначеЕсли СтруктураЗаполнения.РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства Тогда
		Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьСерииПоЭтапамПроизводства(ЭтотОбъект);
	КонецЕсли;
	
	Документы.ДвижениеПродукцииИМатериалов.ОбновитьЗависимыеРеквизитыТабличнойЧасти(Товары, ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПередачуМатериаловНаОснованииПоступления(МассивЗаказов)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую) КАК ХозяйственнаяОперация,
		|	МАКСИМУМ(ТаблицаДокумента.Организация),
		|	МАКСИМУМ(ТаблицаТовары.Склад) КАК Отправитель,
		|	МИНИМУМ(ТаблицаДокумента.Проведен) КАК Проведен,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокумента.Организация) КАК КоличествоОрганизаций,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаТовары.Склад) КАК КоличествоСкладов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|			И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В (&МассивЗаказов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика,
		|	ПоступлениеТоваровУслугТовары.Упаковка,
		|	ПоступлениеТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
		|	ПоступлениеТоваровУслугТовары.Серия
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка В (&МассивЗаказов)
		|	И ПоступлениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоступлениеТоваровУслугСерии.Серия,
		|	ПоступлениеТоваровУслугСерии.Количество,
		|	ПоступлениеТоваровУслугСерии.Номенклатура,
		|	ПоступлениеТоваровУслугСерии.Характеристика
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Серии КАК ПоступлениеТоваровУслугСерии
		|ГДЕ
		|	ПоступлениеТоваровУслугСерии.Ссылка В (&МассивЗаказов)
		|	И ПоступлениеТоваровУслугСерии.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))");
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРеквизиты = РезультатЗапроса[0].Выбрать();
	Если Не ВыборкаРеквизиты.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса[1].Пустой() Тогда
		ТекстОшибки = НСтр("ru='Поступление не содержит товаров. Ввод на основании невозможен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если ВыборкаРеквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов по разным организациям.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	Если ВыборкаРеквизиты.КоличествоСкладов > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, т.к материалы поступили на разные склады.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаРеквизиты);
	
	ТаблицаТовары = РезультатЗапроса[1].Выгрузить();
	Товары.Загрузить(ТаблицаТовары);
	Серии.Загрузить(РезультатЗапроса[2].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьПередачуМатериаловНаОснованииЗаказаДавальца(МассивЗаказов)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую) КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ЗаказДавальца.Организация) КАК Организация,
	|	МАКСИМУМ(ЗаказДавальца.Подразделение) КАК Получатель,
	|	МАКСИМУМ(ЗаказДавальца.СкладПоступления) КАК Отправитель,
	|	МАКСИМУМ(ЗаказДавальца.НалогообложениеНДС) КАК ПотреблениеДляДеятельности,
	|	МАКСИМУМ(НЕ ЗаказДавальца.Проведен) КАК ЕстьОшибкиПроведен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаказДавальца.Статус В (&МассивДопустимыхСтатусов)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьОшибкиСтатус,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Организация) КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Подразделение) КАК КоличествоПодразделений,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.СкладПоступления) КАК КоличествоСкладов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.НалогообложениеНДС) КАК КоличествоВариантовНалогообложения
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказДавальца
	|ГДЕ
	|	ЗаказДавальца.Ссылка В(&ЗаказыДавальца)
	|;
	|
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура         КАК Номенклатура,
	|	Товары.Характеристика       КАК Характеристика,
	|	Товары.Склад                КАК Склад,
	|	Товары.Назначение           КАК Назначение,
	|	0                           КАК Количество,
	|	
	|	МИНИМУМ(Товары.Упаковка)    КАК Упаковка,
	|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|	
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&ЗаказыДавальца)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура, Товары.Характеристика, Товары.Склад, Товары.Назначение
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Склад, Назначение
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Номенклатура   КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.Склад          КАК Склад,
	|	ТаблицаОстатки.Назначение     КАК Назначение,
	|	ТаблицаОстатки.НаличиеПодЗаказОстаток КАК Количество
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
	|		(Номенклатура, Характеристика, Склад, Назначение) В(
	|			ВЫБРАТЬ
	|				Товары.Номенклатура   КАК Номенклатура,
	|				Товары.Характеристика КАК Характеристика,
	|				Товары.Склад          КАК Склад,
	|				Товары.Назначение     КАК Назначение
	|			ИЗ
	|				ВтТовары КАК Товары)) КАК ТаблицаОстатки
	|ГДЕ
	|	ТаблицаОстатки.НаличиеПодЗаказОстаток > 0
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Склад, Назначение
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Номенклатура   КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.Склад          КАК Склад,
	|	ТаблицаОстатки.Назначение     КАК Назначение,
	|	ТаблицаОстатки.Назначение     КАК НазначениеОтправителя,
	|	
	|	ВЫБОР КОГДА Товары.Количество > 0 И ТаблицаОстатки.Количество > Товары.Количество ТОГДА // передается не более чем количество, указанное в заказе.
	|				Товары.Количество
	|			ИНАЧЕ
	|				ТаблицаОстатки.Количество
	|		КОНЕЦ                     КАК Количество,
	|	
	|	Товары.Упаковка               КАК Упаковка,
	|	Товары.НомерСтроки            КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА Товары.Количество > 0 И ТаблицаОстатки.Количество > Товары.Количество ТОГДА // передается не более чем количество, указанное в заказе.
	|				Товары.Количество
	|			ИНАЧЕ
	|				ТаблицаОстатки.Количество
	|		КОНЕЦ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок
	|ИЗ
	|	ВтОстатки КАК ТаблицаОстатки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТовары КАК Товары
	|		ПО Товары.Номенклатура   = ТаблицаОстатки.Номенклатура
	|		 И Товары.Характеристика = ТаблицаОстатки.Характеристика
	|		 И Товары.Склад          = ТаблицаОстатки.Склад
	|		 И Товары.Назначение     = ТаблицаОстатки.Назначение
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	Запрос.УстановитьПараметр("ЗаказыДавальца", МассивЗаказов);
	Запрос.УстановитьПараметр("МассивДопустимыхСтатусов", МассивДопустимыхСтатусов);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	Реквизиты = Результат[0].Выбрать();
	
	Если Не Реквизиты.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов по разным организациям.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоСкладов > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, т.к. материалы поступили на разные склады.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоПодразделений > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. материал требуется передать в разные подразделения.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.ЕстьОшибкиСтатус Тогда
		ТекстОшибки = НСтр("ru = 'Для оформления передачи в производстово заказ должен быть в статусе ""К производству"", ""К отгрузке"" или ""Закрыт"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Результат[3].Пустой() Тогда
		ТекстОшибки = НСтр("ru='Поступление сырья от давальца не оформлено или все материалы уже переданы. Ввод на основании невозможен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоВариантовНалогообложения > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. выбранные заказы оформлены под разную деятельность по НДС.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	Товары.Загрузить(Результат[3].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьВыпускПродукцииНаОснованииЗаказаДавальца(МассивЗаказов)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзКладовой) КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ЗаказДавальца.Организация)        КАК Организация,
	|	МАКСИМУМ(ЗаказДавальца.Подразделение)      КАК Отправитель,
	|	МАКСИМУМ(ЗаказДавальца.Склад)              КАК Получатель,
	|	
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА ЗаказДавальца.НаправлениеДеятельности.УчетЗатрат ТОГДА
	|					ЗаказДавальца.НаправлениеДеятельности
	|				ИНАЧЕ
	|					ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			КОНЕЦ)                             КАК НаправлениеДеятельности,
	|	
	|	МАКСИМУМ(ЗаказДавальца.НалогообложениеНДС) КАК ВыпускПодДеятельность,
	|	МАКСИМУМ(НЕ ЗаказДавальца.Проведен)        КАК ЕстьОшибкиПроведен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаказДавальца.Статус В (&МассивДопустимыхСтатусов)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьОшибкиСтатус,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Организация)   КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Подразделение) КАК КоличествоПодразделений,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Склад)         КАК КоличествоСкладов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.НалогообложениеНДС) КАК КоличествоВариантовНалогообложения,
	|	
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ 
	|		ВЫБОР КОГДА ЗаказДавальца.НаправлениеДеятельности.УчетЗатрат ТОГДА
	|					ЗаказДавальца.НаправлениеДеятельности
	|				ИНАЧЕ
	|					ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			КОНЕЦ)                                    КАК КоличествоНаправленийДеятельности
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказДавальца
	|ГДЕ
	|	ЗаказДавальца.Ссылка В(&ЗаказыДавальца)
	|;
	|
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура         КАК Номенклатура,
	|	Товары.Характеристика       КАК Характеристика,
	|	Товары.Склад                КАК Склад,
	|	ТабДокументы.Назначение     КАК Назначение,
	|	0                           КАК Количество,
	|	
	|	МИНИМУМ(Товары.Упаковка)     КАК Упаковка,
	|	МИНИМУМ(Товары.НомерСтроки)  КАК НомерСтроки
	|	
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК Товары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ТабДокументы
	|		ПО ТабДокументы.Ссылка = Товары.Ссылка
	|ГДЕ
	|	Товары.Ссылка В(&ЗаказыДавальца)
	|	И НЕ Товары.Отменено
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура, Товары.Характеристика, Товары.Склад, ТабДокументы.Назначение
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Склад, Назначение
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Номенклатура   КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.Склад          КАК Склад,
	|	ТаблицаОстатки.Назначение     КАК Назначение,
	|	ТаблицаОстатки.КЗаказуОстаток КАК Количество
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
	|		(Номенклатура, Характеристика, Склад, Назначение) В(
	|			ВЫБРАТЬ
	|				Товары.Номенклатура   КАК Номенклатура,
	|				Товары.Характеристика КАК Характеристика,
	|				Товары.Склад          КАК Склад,
	|				Товары.Назначение     КАК Назначение
	|			ИЗ
	|				ВтТовары КАК Товары)) КАК ТаблицаОстатки
	|ГДЕ
	|	ТаблицаОстатки.КЗаказуОстаток > 0
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Склад, Назначение
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Номенклатура   КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.Склад          КАК Склад,
	|	ТаблицаОстатки.Назначение     КАК Назначение,
	|	ТаблицаОстатки.Назначение     КАК НазначениеОтправителя,
	|	
	|	ВЫБОР КОГДА Товары.Количество > 0 И ТаблицаОстатки.Количество > Товары.Количество ТОГДА // передается не более чем количество, указанное в заказе.
	|				Товары.Количество
	|			ИНАЧЕ
	|				ТаблицаОстатки.Количество
	|		КОНЕЦ                     КАК Количество,
	|	
	|	Товары.Упаковка               КАК Упаковка,
	|	Товары.НомерСтроки            КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА Товары.Количество > 0 И ТаблицаОстатки.Количество > Товары.Количество ТОГДА // передается не более чем количество, указанное в заказе.
	|				Товары.Количество
	|			ИНАЧЕ
	|				ТаблицаОстатки.Количество
	|		КОНЕЦ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок
	|ИЗ
	|	ВтОстатки КАК ТаблицаОстатки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТовары КАК Товары
	|		ПО Товары.Номенклатура   = ТаблицаОстатки.Номенклатура
	|		 И Товары.Характеристика = ТаблицаОстатки.Характеристика
	|		 И Товары.Склад          = ТаблицаОстатки.Склад
	|		 И Товары.Назначение     = ТаблицаОстатки.Назначение
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	Запрос.УстановитьПараметр("ЗаказыДавальца", МассивЗаказов);
	Запрос.УстановитьПараметр("МассивДопустимыхСтатусов", МассивДопустимыхСтатусов);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	Реквизиты = Результат[0].Выбрать();
	
	Если Не Реквизиты.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить выпуск продукции по разным организациям.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоСкладов > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. продукция должна быть выпущена на разные склады.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоПодразделений > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. продукцию выпускают разные подразделения.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.ЕстьОшибкиСтатус Тогда
		ТекстОшибки = НСтр("ru = 'Для оформления выпуска продукции заказ должен быть в статусе ""К производству"", ""К отгрузке"" или ""Закрыт"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Результат[3].Пустой() Тогда
		ТекстОшибки = НСтр("ru='Вся продукция уже выпущена, ввод на основании не требуется.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоВариантовНалогообложения > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. выбранные заказы оформлены под разную деятельность по НДС.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоНаправленийДеятельности > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. выбранные заказы оформлены под разные направления деятельности.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	Товары.Загрузить(Результат[3].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьПередачуМатериаловНаОснованииПоступленияСырьяОтДавальца(ПоступленияСырья)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую) КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ПоступлениеСырьяОтДавальца.Организация) КАК Организация,
	|	МАКСИМУМ(ПоступлениеСырьяОтДавальца.Подразделение) КАК Получатель,
	|	МАКСИМУМ(ПоступлениеСырьяОтДавальца.Склад) КАК Отправитель,
	|	МАКСИМУМ(ПоступлениеСырьяОтДавальцаТовары.ЗаказДавальца.НалогообложениеНДС) КАК ПотреблениеДляДеятельности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеСырьяОтДавальца.Организация) КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеСырьяОтДавальца.Подразделение) КАК КоличествоПодразделений,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеСырьяОтДавальца.Склад) КАК КоличествоСкладов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеСырьяОтДавальцаТовары.ЗаказДавальца.НалогообложениеНДС) КАК КоличествоВариантовНалогообложения
	|ИЗ
	|	Документ.ПоступлениеСырьяОтДавальца.Товары КАК ПоступлениеСырьяОтДавальцаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеСырьяОтДавальца КАК ПоступлениеСырьяОтДавальца
	|		ПО ПоступлениеСырьяОтДавальцаТовары.Ссылка = ПоступлениеСырьяОтДавальца.Ссылка
	|ГДЕ
	|	ПоступлениеСырьяОтДавальца.Ссылка В(&ПоступленияСырья)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура         КАК Номенклатура,
	|	Товары.Характеристика       КАК Характеристика,
	|	Товары.Склад                КАК Склад,
	|	Товары.Назначение           КАК Назначение,
	|	СУММА(Товары.Количество)    КАК Количество,
	|	МИНИМУМ(Товары.Упаковка)    КАК Упаковка,
	|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.ПоступлениеСырьяОтДавальца.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&ПоступленияСырья)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура, Товары.Характеристика, Товары.Склад, Товары.Назначение
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Склад, Назначение
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Номенклатура   КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.Склад          КАК Склад,
	|	ТаблицаОстатки.Назначение     КАК Назначение,
	|	ТаблицаОстатки.НаличиеПодЗаказОстаток КАК Количество
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
	|		(Номенклатура, Характеристика, Склад, Назначение) В(
	|			ВЫБРАТЬ
	|				Товары.Номенклатура   КАК Номенклатура,
	|				Товары.Характеристика КАК Характеристика,
	|				Товары.Склад          КАК Склад,
	|				Товары.Назначение     КАК Назначение
	|			ИЗ
	|				ВтТовары КАК Товары)) КАК ТаблицаОстатки
	|ГДЕ
	|	ТаблицаОстатки.НаличиеПодЗаказОстаток > 0
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Номенклатура   КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.Склад          КАК Склад,
	|	ТаблицаОстатки.Назначение     КАК Назначение,
	|	ТаблицаОстатки.Назначение     КАК НазначениеОтправителя,
	|	ВЫБОР КОГДА ТаблицаОстатки.Количество < Товары.Количество ТОГДА
	|				ТаблицаОстатки.Количество
	|			ИНАЧЕ
	|				Товары.Количество
	|		КОНЕЦ                     КАК Количество,
	|	
	|	Товары.Упаковка               КАК Упаковка,
	|	Товары.НомерСтроки            КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаОстатки.Количество < Товары.Количество ТОГДА
	|				ТаблицаОстатки.Количество
	|			ИНАЧЕ
	|				Товары.Количество
	|		КОНЕЦ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок
	|ИЗ
	|	ВтОстатки КАК ТаблицаОстатки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТовары КАК Товары
	|		ПО Товары.Номенклатура   = ТаблицаОстатки.Номенклатура
	|		 И Товары.Характеристика = ТаблицаОстатки.Характеристика
	|		 И Товары.Склад          = ТаблицаОстатки.Склад
	|		 И Товары.Назначение     = ТаблицаОстатки.Назначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ПоступленияСырья", ПоступленияСырья);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	Реквизиты = Результат[0].Выбрать();
	
	Если Не Реквизиты.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов по разным организациям.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоСкладов > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить передачу материалов, т.к. материалы поступили на разные склады.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоПодразделений > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. материал требуется передать в разные подразделения.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоВариантовНалогообложения > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. материал передается под разную деятельность по НДС.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Результат[3].Пустой() Тогда
		ТекстОшибки = НСтр("ru='Поступление сырья от давальца не оформлено или все материалы уже переданы. Ввод на основании невозможен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	Товары.Загрузить(Результат[3].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьВыпускПродукцииНаОснованииЗаказаКлиента(ЗаказКлиента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзКладовой) КАК ХозяйственнаяОперация,
	|	ЗаказКлиента.Организация          КАК Организация,
	|	ЗаказКлиента.Склад                КАК Получатель,
	|	ЗаказКлиента.НалогообложениеНДС   КАК ВыпускПодДеятельность,
	|	НЕ ЗаказКлиента.Проведен          КАК ЕстьОшибкиПроведен,
	|	
	|	ВЫБОР КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат ТОГДА
	|			ЗаказКлиента.НаправлениеДеятельности
	|		КОНЕЦ КАК НаправлениеДеятельности,
	|	
	|	ЗаказКлиента.Статус КАК СтатусДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		Реквизиты.ЕстьОшибкиПроведен,
		Истина);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	ТаблицаТовары = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента);
	
	Товары.Загрузить(ТаблицаТовары);
	
	Для каждого ДанныеСтроки Из Товары Цикл
		ДанныеСтроки.НазначениеОтправителя = ДанныеСтроки.Назначение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	ТекстЗапроса = 	
	"ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&Склад КАК Склад,
	|	Неопределено КАК Партнер,
	|	Неопределено КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
	|	Ложь КАК ЕстьСделкиВТабличнойЧасти,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Получатель
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка
	|	
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|	ПО
	|		СтруктураПредприятия.Ссылка = &Получатель
	|
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Назначение КАК НазначениеПолучателя,
	|	ТаблицаТоваров.НазначениеОтправителя КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТоваров.Распоряжение КАК Заказ,
	|	ТаблицаТоваров.КодСтроки КАК КодСтроки,
	|	ТаблицаТоваров.ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	&Склад КАК Склад,
	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	ТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	ТаблицаТоваров.НазначениеПолучателя КАК НазначениеПолучателя,
	|	ТаблицаТоваров.ГруппаПродукции,
	|	ИСТИНА КАК ПодбиратьВидыЗапасов
	|	
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	&Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаВидыЗапасов.Серия,
	|	ТаблицаВидыЗапасов.ГруппаПродукции,
	|	ТаблицаВидыЗапасов.НазначениеПолучателя,
	|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ТаблицаВидыЗапасов.СкладОтгрузки КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад КАК Склад,
	|	ТаблицаВидыЗапасов.Сделка КАК Сделка,
	|	ТаблицаВидыЗапасов.Серия КАК СерияПолучатель,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную,
	|	ТаблицаВидыЗапасов.НазначениеПолучателя КАК НазначениеПолучателя,
	|	ТаблицаВидыЗапасов.ГруппаПродукции КАК ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Отправитель);
	Запрос.УстановитьПараметр("Менеджер", Ответственный);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("ПоРаспоряжениям", ПоРаспоряжениям);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(Товары.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если ВидыЗапасовУказаныВручную Тогда
		ДополнительныеСвойства.Вставить("ИгнорироватьОперативныеОстатки", Истина);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Отправитель КАК Склад,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(ДанныеДокумента.Получатель КАК Справочник.СтруктураПредприятия).ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		ДанныеДокумента.Получатель
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(ДанныеДокумента.Получатель КАК Справочник.СтруктураПредприятия).ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		ДанныеДокумента.Ответственный
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка
	|
	|ПОМЕСТИТЬ СохраненныеДанныеДокумента
	|ИЗ
	|	Документ.ДвижениеПродукцииИМатериалов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Организация <> СохраненныеДанные.Организация ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Дата <> СохраненныеДанные.Дата ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Склад <> СохраненныеДанные.Склад ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Подразделение <> СохраненныеДанные.Подразделение ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Менеджер <> СохраненныеДанные.Менеджер ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Сделка <> СохраненныеДанные.Сделка ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК РеквизитыИзменены
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СохраненныеДанныеДокумента КАК СохраненныеДанные
	|	ПО
	|		Истина
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыИзменены = Выборка.РеквизитыИзменены;
	Иначе
		РеквизитыИзменены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		И Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой Тогда
		ЗапасыСервер.ВидыЗапасовНеОбособленныеИОбособленные(
			Организация,
			Справочники.СделкиСКлиентами.ПустаяСсылка(),
			Ответственный,
			Получатель,
			МенеджерВременныхТаблиц);
	Иначе
			
		Запрос = Новый Запрос("
		|// Собственные виды запасов
		|ВЫБРАТЬ
		|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
		|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца,
		|	ВидыЗапасов.Предназначение КАК Предназначение,
		|	ВидыЗапасов.Сделка КАК Сделка,
		|	ВидыЗапасов.Менеджер КАК Менеджер,
		|	ВидыЗапасов.Подразделение КАК Подразделение
		|
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Справочник.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	Не ВидыЗапасов.РеализацияЗапасовДругойОрганизации
		|	И ВидыЗапасов.Организация = &Организация
		|	И Не ВидыЗапасов.ПометкаУдаления
		|	И ВидыЗапасов.ТипЗапасов В (ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар),
		|								ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|
		|// Не обособленные виды запасов
		|ВЫБРАТЬ
		|	ВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
		|	ВидыЗапасов.ВидЗапасовПродавца КАК ВидЗапасовПродавца
		|
		|ПОМЕСТИТЬ ДоступныеВидыЗапасов
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ТипыПредназначенияВидовЗапасов.ПредназначениеНеОграничено)
		|	ИЛИ ВидыЗапасов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ТипыПредназначенияВидовЗапасов.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Обособленные виды запасов по сделке
		|ВЫБРАТЬ
		|	ВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
		|	ВидыЗапасов.ВидЗапасовПродавца КАК ВидЗапасовПродавца
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ТипыПредназначенияВидовЗапасов.ПредназначенДляСделки)
		|	И ВидыЗапасов.Сделка В (&Сделки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Обособленные виды запасов по менеджеру
		|ВЫБРАТЬ
		|	ВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
		|	ВидыЗапасов.ВидЗапасовПродавца КАК ВидЗапасовПродавца
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ТипыПредназначенияВидовЗапасов.ПредназначенДляМенеджера)
		|	И ВидыЗапасов.Менеджер = &Менеджер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Обособленные виды запасов по подразделению
		|ВЫБРАТЬ
		|	ВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
		|	ВидыЗапасов.ВидЗапасовПродавца КАК ВидЗапасовПродавца
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ТипыПредназначенияВидовЗапасов.ПредназначенДляПодразделения)
		|	И ВидыЗапасов.Подразделение = &Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Обособленные виды запасов по заказам
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
		|	ВидыЗапасов.ВидЗапасовПродавца КАК ВидЗапасовПродавца
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Предназначение = ЗНАЧЕНИЕ(Перечисление.ТипыПредназначенияВидовЗапасов.ПредназначенДляЗаказа)
		|");
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Сделки", ОбщегоНазначенияУТКлиентСервер.Массив(Справочники.СделкиСКлиентами.ПустаяСсылка()));
		Запрос.УстановитьПараметр("Менеджер", Ответственный);
		Запрос.УстановитьПараметр("Подразделение", Получатель);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
	КонецЕсли;
			
КонецПроцедуры

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
		
		ШаблонСообщения = НСтр("ru = 'Передача в производство превышает остаток товара организации %1 на складе %2 %3 %4'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			Организация,
			Отправитель,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект);
		
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3 с указанными номерами ГТД'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика,, СтрокаТаблицы.Серия),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	
	Если Не Проведен
		Или ПерезаполнитьВидыЗапасов
		Или ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
		Или ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц) Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой Тогда
			
			// Если на склад приходуется продукция, произведенная без заказов, заполняем виды запасов без проверки
			
			ТаблицаТоваров = ВидыЗапасов.ВыгрузитьКолонки();
			ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаТоваров.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
			
			Для Каждого ТекСтрока Из Товары Цикл
				НоваяСтрока = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.Назначение = ТекСтрока.НазначениеОтправителя;
				НоваяСтрока.НазначениеПолучателя = ТекСтрока.Назначение;
				Если Не ТекСтрока.СтатусУказанияСерийПолучатель = 14 Тогда
					НоваяСтрока.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ТаблицаТоваров.НомерСтроки		КАК НомерСтроки,
				|	ТаблицаТоваров.Номенклатура		КАК Номенклатура,
				|	ТаблицаТоваров.ВидЗапасов		КАК ВидЗапасов,
				|	ВЫБОР
				|		КОГДА НЕ &ПартионныйУчетВерсии22
				|			ТОГДА ТаблицаТоваров.ГруппаПродукции
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ							КАК ГруппаПродукции,
				|	ТаблицаТоваров.Назначение		КАК Назначение
				|ПОМЕСТИТЬ ТаблицаТоваровДокумента
				|ИЗ
				|	&ТаблицаТоваров КАК ТаблицаТоваров
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТоваров.НомерСтроки									КАК НомерСтроки,
				|	ТаблицаТоваров.Номенклатура									КАК Номенклатура,
				|	ЛОЖЬ														КАК ЭтоВозвратнаяТара,
				|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)			КАК Сделка,
				|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)				КАК Менеджер,
				|	&Подразделение												КАК Подразделение,
				|	ТаблицаТоваров.Назначение									КАК Назначение,
				|	&Организация												КАК Организация,
				|	ВЫБОР
				|		КОГДА НЕ ЕСТЬNULL(Назначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья) 
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
				|	КОНЕЦ														КАК ХозяйственнаяОперация,
				|	ВЫБОР
				|		КОГДА НЕ ЕСТЬNULL(Назначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
				|	КОНЕЦ														КАК ТипЗапасов, 
				|	ВЫБОР
				|		КОГДА НЕ ЕСТЬNULL(Назначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|			ТОГДА Назначения.Партнер
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ														КАК Поставщик, 
				|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)	КАК Соглашение,
				|	ЕСТЬNULL(Назначения.Договор.Контрагент, ВЫРАЗИТЬ(Назначения.Заказ КАК Документ.ЗаказДавальца).Контрагент)	КАК Контрагент,
				|	ЕСТЬNULL(Назначения.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))						КАК Договор,
				|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)					КАК Валюта,
				|	ВЫБОР
				|		КОГДА &ИспользоватьРаздельныйУчетПоНалогообложению И Не &ПартионныйУчетВерсии22
				|			ТОГДА &НалогообложениеНДС
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
				|	КОНЕЦ КАК НалогообложениеНДС,
				|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
				|	ТаблицаТоваров.ГруппаПродукции КАК ГруппаПродукции
				|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
				|ИЗ
				|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|		Справочник.Назначения КАК Назначения
				|	ПО
				|		ТаблицаТоваров.Назначение = Назначения.Ссылка
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|		Справочник.ВидыЗапасов КАК ВидыЗапасов
				|	ПО
				|		ТаблицаТоваров.ВидЗапасов = ВидыЗапасов.Ссылка
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|		Справочник.Номенклатура КАК СпрНоменклатура
				|	ПО
				|		СпрНоменклатура.Ссылка = ТаблицаТоваров.Номенклатура
				|
				|ГДЕ
				|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
				|	ИЛИ ВидыЗапасов.Организация <> &Организация
				|	ИЛИ ВидыЗапасов.ТипЗапасов <> 
				|		ВЫБОР
				|			КОГДА НЕ ЕСТЬNULL(Назначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
				|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
				|		КОНЕЦ
				|	ИЛИ (&ИспользоватьРаздельныйУчетПоНалогообложению
				|		И ВидыЗапасов.НалогообложениеНДС <> &НалогообложениеНДС
				|		И &НалогообложениеНДС <> &НалогообложениеОрганизации
				|		И &НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
				|		И ВидыЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
				|");
				
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ТаблицаТоваров",				ТаблицаТоваров);
			Запрос.УстановитьПараметр("Организация",				Организация);
			Запрос.УстановитьПараметр("Подразделение",				Отправитель.Подразделение);
			Запрос.УстановитьПараметр("НалогообложениеНДС",			НалогообложениеНДС);
			Запрос.УстановитьПараметр("НалогообложениеОрганизации",	Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
			Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению", ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
			Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(Дата)));
			
			Запрос.Выполнить();
			
			ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, ТаблицаТоваров);
			
			ВидыЗапасов.Загрузить(ТаблицаТоваров);
			
		Иначе
		
			СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
				ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
				ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(Ссылка, Организация, Дата, ДополнительныеСвойства, МенеджерВременныхТаблиц);
				ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
				
			ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
				МенеджерВременныхТаблиц,
				ДополнительныеСвойства,
				ВидыЗапасов,
				ТаблицаОшибок,
				Отказ);
			
			ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД", "Количество");
			
			СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
			
			Если Не Отказ Тогда
				ЗаполнитьАналитикуПолучателяВидовЗапасов(МенеджерВременныхТаблиц);
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьРеквизитыШапки(ПредставлениеПолей, Отказ)

	Если НЕ ЗначениеЗаполнено(Отправитель) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"), ПредставлениеПолей.Отправитель);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Отправитель",, Отказ); 
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"), ПредставлениеПолей.Получатель);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Получатель",, Отказ); 
	КонецЕсли; 
	Если Товары.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не введено ни одной строки в список ""%1""'"), ПредставлениеПолей.Товары);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Товары",, Отказ); 
	КонецЕсли;
	
	Если Отправитель = Получатель И ЗначениеЗаполнено(Отправитель) Тогда
		Если ПредставлениеПолей.ТипОтправителя = "Склад" 
				И ПредставлениеПолей.ТипПолучателя = "Кладовая"
			ИЛИ ПредставлениеПолей.ТипОтправителя = "Кладовая" 
				И ПредставлениеПолей.ТипПолучателя = "Склад" Тогда
			ТекстСообщения = НСтр("ru = 'Склад и цеховая кладовая должны быть разными'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отправитель и получатель должны быть разными'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Отправитель",, Отказ); 
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой Тогда
		ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект,Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТовары(ПредставлениеПолей, Отказ)
	
	ПроверятьКодСтроки = ПоРаспоряжениям
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство);
	
	ШаблонСообщения = НСтр("ru='Не допускается превышение запланированного количества товара по этапу в строке %1 списка ""%2"".'");
	ШаблонСообщенияПустоеРаспоряжение = НСтр("ru = 'В строке %1 списка ""%2"" не заполнено распоряжение.'");
	
	Для Каждого ДанныеСтроки Из Товары Цикл
		Если ПроверятьКодСтроки
			И ДанныеСтроки.КодСтроки = 0
			И ЗначениеЗаполнено(ДанныеСтроки.Распоряжение) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(ДанныеСтроки.НомерСтроки, "ЧГ="), ПредставлениеПолей.Товары);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ДанныеСтроки.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
		КонецЕсли;
		Если ПоРаспоряжениям
			И Не ЗначениеЗаполнено(ДанныеСтроки.Распоряжение) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщенияПустоеРаспоряжение, Формат(ДанныеСтроки.НомерСтроки, "ЧГ="), ПредставлениеПолей.Товары);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ДанныеСтроки.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "", Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьПроверкуЗаполненияПоХозяйственнойОперации(МассивНепроверяемыхРеквизитов)

	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		// Если реквизит не используется для хозяйственной операции, исключаем данный реквизит из проверки.
		Если МассивРеквизитовОперации.Найти(ЭлементМассива) = Неопределено Тогда
			МассивНепроверяемыхРеквизитов.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьВременныеТаблицыДляПроверки()

	СписокРеквизитов = "НомерСтроки,Назначение,НазначениеОтправителя,Распоряжение,КодСтроки";
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	" + СписокРеквизитов + "
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК ТабличнаяЧасть";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(, СписокРеквизитов));
	
	Результат = Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;

КонецФункции

#КонецОбласти

#Область Прочее

// См. описание в комментарии к одноименной процедуре в модуле УправлениеДоступом.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Организация;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Отправитель;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Получатель;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	
	// Контроль при перепроведении и отмене проведения
	Если ПоРаспоряжениям Или Не ДополнительныеСвойства.ЭтоНовый Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
			Массив.Добавить(Движения.ТоварыКОтгрузке);
		КонецЕсли;
	КонецЕсли;

	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	// Если выпуск без заказа разрешен в подразделении, то не контролируем
	Если Не ДополнительныеСвойства.ЭтоНовый
		И (ПоРаспоряжениям
			ИЛИ Не (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
					Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой)
			ИЛИ Не Отправитель.Подразделение.ПроизводствоБезЗаказов) Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ПоРаспоряжениям 
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства) Тогда
		Массив.Добавить(Движения.РаспоряженияНаПередачуИзПроизводства);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.ЗаказыМатериаловВПроизводство);
		
		// Если выпуск без заказа разрешен в подразделении, то не контролируем
		Если ПоРаспоряжениям
			ИЛИ Не (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
					ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой)
			ИЛИ Не Отправитель.Подразделение.ПроизводствоБезЗаказов Тогда
			Массив.Добавить(Движения.СвободныеОстатки);
			Массив.Добавить(Движения.ОбеспечениеЗаказов);
			
			Если НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ДвижениеПродукцииИМатериалов).ИспользоватьСерииНоменклатуры Тогда
				Массив.Добавить(Движения.ТоварыНаСкладах);
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

// Функция проверят изменение табличной части "Товары" относительно табличной части "Виды запасов" документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//
// Возвращаемое значение:
//	Булево - Истина - товары изменены
//           Ложь - товары не изменены
//
Функция ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.Назначение КАК Назначение,
	|		ТаблицаТоваров.ГруппаПродукции КАК ГруппаПродукции,
	|		(ВЫБОР ТаблицаТоваров.СтатусУказанияСерийПолучатель
	|			КОГДА 14 ТОГДА ТаблицаТоваров.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КОНЕЦ) КАК Серия,
	|		ТаблицаТоваров.Количество КАК Количество
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|		ТаблицаВидыЗапасов.ГруппаПродукции КАК ГруппаПродукции,
	|		ТаблицаВидыЗапасов.СерияПолучатель КАК Серия,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.ГруппаПродукции,
	|	ТаблицаТоваров.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

Процедура ЗаполнитьАналитикуПолучателяВидовЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.НазначениеПолучателя КАК НазначениеПолучателя,
	|	ТаблицаТоваров.ГруппаПродукции КАК ГруппаПродукции,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТоваров.НазначениеПолучателя,
	|	ТаблицаТоваров.ГруппаПродукции
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	Количество УБЫВ";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	ОтборТоваров = Новый Структура("АналитикаУчетаНоменклатуры");
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		КоличествоТоваров = ВыборкаТовары.Количество;
		
		ЗаполнитьЗначенияСвойств(ОтборТоваров, ВыборкаТовары);
		
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(ОтборТоваров) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары, "Серия, ГруппаПродукции, НазначениеПолучателя");
			НоваяСтрока.Количество = Количество;
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли