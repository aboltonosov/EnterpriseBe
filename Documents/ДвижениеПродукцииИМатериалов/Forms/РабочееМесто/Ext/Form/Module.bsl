#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // используется для фоновых заданий

&НаКлиенте
Перем ФормаДлительнойОперации; // используется для фоновых заданий

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализацияФормыПриСозданииНаСервере();
	
	#Область СтандартныеМеханизмы
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокОформлениеПередачиМатериалов.Дата", Элементы.СписокОформлениеПередачиМатериаловДата.Имя);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокОформлениеПередачиИзПодразделения.Дата", Элементы.СписокОформлениеПередачиИзПодразделенияДата.Имя);
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЭтапПроизводства2_2"
		Или ИмяСобытия = "Запись_ДвижениеПродукцииИМатериалов"
		Или ИмяСобытия = "Запись_ЗаказМатериаловВПроизводство"
		Или ИмяСобытия = "Запись_ПриходныйОрдерНаТовары"
		Или ИмяСобытия = "Запись_РасходныйОрдерНаТовары"
		Или ИмяСобытия = "Принять_ФормаСозданныеДокументы" Тогда
		
		ОбновитьДанные();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ЗагрузитьНастройкиОтбораПоОперации(Настройки);
	
	УстановитьОтборПоПодразделению(ЭтаФорма);
	УстановитьОтборПоОперации(ЭтаФорма);
	УстановитьОтборПоОтветственному(ЭтаФорма);
	УстановитьОтборПоСтатусу(ЭтаФорма);
	УстановитьОтборПоСостояниюНакладной(ЭтаФорма);
	УстановитьОтборПоСостояниюРасходногоОрдера(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПоПодразделению(ЭтаФорма);
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций", ДоступныеХозяйственныеОперации), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОперацияПриИзменении(Элемент)
	
	УстановитьОтборПоОперации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОперацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		ДоступныеХозяйственныеОперации = ВыбранноеЗначение;
		УстановитьОтборПоОперации(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОперацияОчистка(Элемент, СтандартнаяОбработка)
	
	ДоступныеХозяйственныеОперации.ЗаполнитьПометки(Ложь);
	УстановитьОтборПоОперации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	УстановитьОтборПоСтатусу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	
	УстановитьОтборПоОтветственному(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНакладнойПриИзменении(Элемент)
	
	УстановитьОтборПоСостояниюНакладной(ЭтаФорма);
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеРасходногоОрдераПриИзменении(Элемент)
	
	УстановитьОтборПоСостояниюРасходногоОрдера(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриходногоОрдераПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаОформлениеПередачиИзПроизводства
		И НЕ ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПодключитьОбработчикОжидания("ОбновитьДанные", 0.2, Истина);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОформлениеПередачиМатериалов

&НаКлиенте
Процедура СписокОформлениеПередачиМатериаловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Распоряжение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОформлениеПередачиМатериалов

&НаКлиенте
Процедура СписокОформлениеПередачиИзПодразделенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Распоряжение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьВозвратМатериаловИзПроизводства(Команда)
	
	ПроизводствоКлиент.СоздатьДвижениеПродукцииИМатериалов(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства"),
		ОтборПодразделение);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СоздатьВозвратМатериаловИзКладовой(Команда)
	
	ПроизводствоКлиент.СоздатьДвижениеПродукцииИМатериалов(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзКладовой"),
		ОтборПодразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПередачуПродукцииИзПроизводства(Команда)
	
	ПроизводствоКлиент.СоздатьДвижениеПродукцииИМатериалов(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства"),
		ОтборПодразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПередачуПродукцииИзКладовой(Команда)
	
	ПроизводствоКлиент.СоздатьДвижениеПродукцииИМатериалов(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзКладовой"),
		ОтборПодразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПередачуМатериаловВКладовую(Команда)
	
	ПроизводствоКлиент.СоздатьДвижениеПродукцииИМатериалов(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую"),
		,
		ОтборПодразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПередачуМатериаловВПроизводство(Команда)
	
	ПроизводствоКлиент.СоздатьДвижениеПродукцииИМатериалов(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство"),
		,
		ОтборПодразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеВПроизводстве(Команда)
	
	ПроизводствоКлиент.СоздатьДвижениеПродукцииИМатериалов(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеремещениеВПроизводстве"),
		ОтборПодразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПередачуМатериаловПоРаспоряжениям(Команда)
	
	ОформитьДвижениеПродукцииИМатериалов(Ложь, Элементы.СписокОформлениеПередачиМатериалов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПередачуМатериаловПоОтгрузке(Команда)
	
	ОформитьДвижениеПродукцииИМатериалов(Истина, Элементы.СписокОформлениеПередачиМатериалов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПередачуПродукцииПоРаспоряжениям(Команда)
	
	ОформитьДвижениеПродукцииИМатериалов(Ложь, Элементы.СписокОформлениеПередачиИзПодразделения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПередачуПродукцииПоПриемке(Команда)
	
	ОформитьДвижениеПродукцииИМатериалов(Истина, Элементы.СписокОформлениеПередачиИзПодразделения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтгружено(Команда)
	
	УстановитьСтатус("Отгружено", НСтр("ru = 'Отгружено (не принято)'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПринято(Команда)
	
	УстановитьСтатус("Принято", НСтр("ru = 'Принято'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ДвижениеПродукцииИМатериалов.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ПоказатьЗначение(, МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеПередачиМатериаловПоРаспоряжениям

// Заполняет список для отбора распоряжений, исходя из состояния оформления накладных по распоряжениям.
// Используется в формах списков распоряжений на отгрузку.
//
// Параметры:
//  СписокВыбора - СписокЗначений - список, который будет заполнен сосояниями оформления.
//
Процедура ЗаполнитьСписокСостоянийОформленияНакладной(СписокВыбора)
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Все оформлено'"),          Ложь, БиблиотекаКартинок.ВыполненоУспешно);
	СписокВыбора.Добавить("1", НСтр("ru='Создать накладную'"),      Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2", НСтр("ru='Дооформить накладную'"),   Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	СписокВыбора.Добавить("4", НСтр("ru='Не используются заказы'"), Ложь, БиблиотекаКартинок.ПустаяКартинка);
	
КонецПроцедуры

// Заполняет список для отбора распоряжений, исходя из состояния оформления ордеров по распоряжениям.
// Используется в формах списков распоряжений на отгрузку.
//
// Параметры:
//  СписокВыбора - СписокЗначений - список, который будет заполнен сосояниями оформления.
//
Процедура ЗаполнитьСписокСоответствияОрдеров(СписокВыбора)
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Соответствуют накладным'"),        Ложь, БиблиотекаКартинок.ВыполненоУспешно);
	СписокВыбора.Добавить("1", НСтр("ru='Не оформлены'"),                   Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3", НСтр("ru='Не соответствуют накладным'"),     Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	СписокВыбора.Добавить("4", НСтр("ru='Не используется ордерная схема'"), Ложь, БиблиотекаКартинок.ПустаяКартинка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеТипыЗаказовИТипыНакладных()
	
	ОтборТипов = Новый Структура();
	ОтборТипов.Вставить("Накладная", Ложь);
	ОтборТипов.Вставить("ИспользуетсяРаспоряжение", Истина);
	
	ВыделенныеХозяйственныеОперации = ВыделенныеХозяйственныеОперации();
	
	ТипыЗаказов.ЗагрузитьЗначения(ИспользуемыеТипыДокументовПоОперациям(
		ВыделенныеХозяйственныеОперации, ОтборТипов));
	
	ОтборТипов = Новый Структура();
	ОтборТипов.Вставить("Накладная", Истина);
	
	ТипыНакладных.ЗагрузитьЗначения(ИспользуемыеТипыДокументовПоОперациям(
		ВыделенныеХозяйственныеОперации, ОтборТипов));
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДвижениеПродукцииИМатериалов(ПоОрдерам, ЭлементСписок)
	
	Если НЕ ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(ЭлементСписок) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДанныеВыделенныхСтрок = ДанныеВыделенныхСтрок(ЭлементСписок);
	
	// Выбор варианта действия и возврат резульата в виде имени формы которую необходимо открыть и ее входящих параметров
	ПараметрыСозданныхДокументов = ОформитьДвижениеПродукцииИМатериаловНаСервере(ПоОрдерам, ДанныеВыделенныхСтрок);
	ПараметрыСозданныхДокументов.Вставить("ЭлементСписок", ЭлементСписок);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОформитьДвижениеПродукцииИМатериаловНаСервере(ПоОрдерам, ДанныеВыделенныхСтрок)
	
	Перем СписокОшибок;
	
	СтруктураСозданныеНакладные = Новый Структура("СозданныеНакладные, ИмяФормы, ПараметрыФормы, Ошибки");
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = ПодготовитьДанныеРаспоряжений(ДанныеВыделенныхСтрок, ПоОрдерам, СписокОшибок);
	
	Если ДокументыПоТипамНакладных.Количество() > 0 Тогда
		Если ПоОрдерам Тогда
			
			// Если выделен один документ и есть хотя бы одна накладная - открывается форма перезаполнения накладной
			// Если нет накладных и документы можно сгруппировать в одну накладную - открывается форма новой накладной
			// Если нет накладных и документы нельзя сгруппировать - открывается форма списка созданных накладных
			
			ЕстьНакладная = ЕстьНакладная(ДокументыПоТипамНакладных);
			ЕстьОрдер = ЕстьОрдер(ДокументыПоТипамНакладных);
			ЕстьЗаказ = ЕстьЗаказ(ДокументыПоТипамНакладных, ТипыЗаказов.ВыгрузитьЗначения());
			
			ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
			Если ВсегоТаблиц > 1 Тогда
				
				Если ЕстьНакладная Тогда
					// Пакетно с исключением накладных и сообщением об исключенных документах
					// Распоряжения-накладные исключаются, т.к. должны быть обработаны индивидульно - нельзя ввести новую накладную 
					// по распоряжению-накладной
					
					ИсключитьЗаказыСНакладными(ДокументыПоТипамНакладных, СписокОшибок);
					ОсталосьТаблиц = ДокументыПоТипамНакладных.Количество();
					Если ОсталосьТаблиц > 0 Тогда
						ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
					КонецЕсли;
					
					Если ОсталосьТаблиц = 0 Тогда
						ТекстОшибки = НСтр("ru = 'Операция не выполнена.'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокОформлениеПередачиМатериалов",ТекстОшибки, Неопределено);
					ИначеЕсли ВсегоТаблиц <> ОсталосьТаблиц Тогда
						ТекстОшибки = НСтр("ru = 'Операция выполнена с ошибками.'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокОформлениеПередачиМатериалов",ТекстОшибки, Неопределено);
					КонецЕсли;
					
				Иначе
					// Пакетно если нет накладных
					ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
				КонецЕсли;
				
			ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
				// Индивидуально
				
				// Проверка наличия накладных
				// Если текущее распоряжение это заказ, и по нему есть накладные, открыть форму перезаполнения
				Если ЕстьНакладная И ЕстьЗаказ Тогда
					//Открытие формы перезаполнения
					ПараметрыФормы = ОформитьЧерезФормуПерезаполнения(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
				Иначе
					// При попытке заполнить накладную по отсутствующему ордеру, накладная будет очищена - задаем вопрос пользователю
					Если ЕстьНакладная И Не ЕстьОрдер И Не РежимБезВопросов Тогда
						ТекстВопроса = НСтр("ru = 'Накладная будет очищена, поскольку не создано ни одного ордера. Продолжить?'");
						ПараметрыФормы = Новый Структура();
						ПараметрыФормы.Вставить("ПоОрдерам", ПоОрдерам);
						ПараметрыФормы.Вставить("ТекстВопросаПользователю", ТекстВопроса);
						ПараметрыФормы.Вставить("ПроцедураОбработкиОтветаПользователя", "ОчиститьНакладнуюЗавершение");
					Иначе
						// Если это распоряжение-накладная, или заказ без накладной - открытие формы накладной, существующей или новой
						ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// При оформлении по заказам всегда создается новая накладная
			
			// Открывается форма созданной накладной, в случае если совпали ключевые поля выделенных строк, и позволяет функциональная опция
			// В ином случае открывается форма со списком созданных накладных
			
			Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
				// Пакетно
				ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
			ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
				// Индивидуально
				ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ДанныеВыделенныхСтрок.Количество() > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		Если ПоОрдерам Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по отгрузке (приемке)'"));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокОформлениеПередачиМатериалов",ТекстОшибки, Неопределено);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	КонецЕсли;
	
	РежимБезВопросов = Ложь;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьНакладнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		РежимБезВопросов = Ложь;
		Возврат;
	КонецЕсли;
	
	РежимБезВопросов = Истина;
	
	ОформитьДвижениеПродукцииИМатериалов(ДополнительныеПараметры.ПоОрдерам, ДополнительныеПараметры.ЭлементСписок);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаСписокОформлениеПередачиМатериалов()

	СписокОформлениеПередачиМатериалов.ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКОформлению.Распоряжение КАК Распоряжение,
	|	ЗаказыКОформлению.Ссылка КАК Ссылка,
	|	ЗаказыКОформлению.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаказыКОформлению.Номер КАК Номер,
	|	ЗаказыКОформлению.ДатаДокумента КАК Дата,
	|	ВЫБОР
	|		КОГДА ЗаказыКОформлению.ТипРаспоряжения = ТИП(Документ.ДвижениеПродукцииИМатериалов)
	|				ТОГДА ВЫРАЗИТЬ(&ПередачаВПроизводствоПредставление КАК СТРОКА(100))
	|			ИНАЧЕ ЗаказыКОформлению.ТипРаспоряжения 
	|	КОНЕЦ КАК ТипРаспоряжения,
	|	ЗаказыКОформлению.Проведен КАК Проведен,
	|	ЗаказыКОформлению.Организация КАК Организация,
	|	ЗаказыКОформлению.Отправитель,
	|	ЗаказыКОформлению.Получатель,
	|	ЗаказыКОформлению.Подразделение,
	|	ЗаказыКОформлению.ХозяйственнаяОперация,
	|	ЗаказыКОформлению.Ответственный,
	|	ВЫБОР
	|		КОГДА СУММА(ЗаказыКОформлению.КОформлениюРасход) = 0
	|				И СУММА(ЗаказыКОформлению.КОформлениюОстаток) > 0
	|			ТОГДА 1 //Требуется создание накладной
	|		КОГДА СУММА(ЗаказыКОформлению.КОформлениюОстаток) > 0
	|			ТОГДА 2 //Дополнить накладную
	|		ИНАЧЕ 0 //ОК
	|	КОНЕЦ КАК СостояниеНакладной,
	|	МАКСИМУМ(ЗаказыКОформлению.СостояниеОрдера) КАК СостояниеОрдера
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыМатериалов.Распоряжение КАК Распоряжение,
	|		ЗаказыМатериалов.Распоряжение КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ЗаказыМатериалов.Распоряжение ССЫЛКА Документ.ЗаказМатериаловВПроизводство ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство)
	|		КОНЕЦ КАК ХозяйственнаяОперация,
	|		ЗаказыМатериалов.Распоряжение.ПометкаУдаления КАК ПометкаУдаления,
	|		ЗаказыМатериалов.Распоряжение.Номер КАК Номер,
	|		ЗаказыМатериалов.Распоряжение.Дата КАК ДатаДокумента,
	|		ТИПЗНАЧЕНИЯ(ЗаказыМатериалов.Распоряжение) КАК ТипРаспоряжения,
	|		ЗаказыМатериалов.Распоряжение.Проведен КАК Проведен,
	|		ЗаказыМатериалов.Распоряжение.Организация КАК Организация,
	|		ЗаказыМатериалов.Распоряжение.Ответственный КАК Ответственный,
	|		ЗаказыМатериалов.Склад КАК Отправитель,
	|		ЗаказыМатериалов.Получатель КАК Получатель,
	|		ЗаказыМатериалов.Подразделение КАК Подразделение,
	|		ЗаказыМатериалов.Номенклатура КАК Номенклатура,
	|		ЗаказыМатериалов.Характеристика КАК ХарактеристикаНоменклатуры,
	|		ЗаказыМатериалов.Серия КАК Серия,
	|		ЗаказыМатериалов.КОформлениюКонечныйОстаток КАК КОформлениюОстаток,
	|		ЗаказыМатериалов.КОформлениюРасход КАК КОформлениюРасход,
	|		ВЫБОР
	|			КОГДА НЕ ЗаказыМатериалов.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|					ИЛИ ЗаказыМатериалов.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|						И ЗаказыМатериалов.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке > &ТекущаяДата
	|				ТОГДА 4 
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СостояниеОрдера
	|	ИЗ
	|		РегистрНакопления.ЗаказыМатериаловВПроизводство.ОстаткиИОбороты(
	|					,
	|					,
	|					,
	|					,
	|					(Подразделение = &Подразделение
	|						ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|					И (Распоряжение ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|							И Получатель ССЫЛКА Справочник.Склады
	|						ИЛИ Распоряжение ССЫЛКА Документ.ЭтапПроизводства2_2)
	|		) КАК ЗаказыМатериалов
	|	ГДЕ
	|		ЗаказыМатериалов.КОформлениюКонечныйОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,
	|		ТоварыКОтгрузке.ДокументОтгрузки КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.Получатель ССЫЛКА Справочник.Склады ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство)
	|		КОНЕЦ КАК ХозяйственнаяОперация,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).ПометкаУдаления
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ДвижениеПродукцииИМатериалов).ПометкаУдаления
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЭтапПроизводства2_2).ПометкаУдаления
	|		КОНЕЦ КАК ПометкаУдаления,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Номер
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ДвижениеПродукцииИМатериалов).Номер
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЭтапПроизводства2_2).Номер
	|		КОНЕЦ КАК Номер,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Дата
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ДвижениеПродукцииИМатериалов).Дата
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЭтапПроизводства2_2).Дата
	|		КОНЕЦ КАК ДатаДокумента,
	|		ТИПЗНАЧЕНИЯ(ТоварыКОтгрузке.ДокументОтгрузки) КАК ТипРаспоряжения,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Проведен
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ДвижениеПродукцииИМатериалов).Проведен
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЭтапПроизводства2_2).Проведен
	|		КОНЕЦ КАК Проведен,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Организация
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ДвижениеПродукцииИМатериалов).Организация
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЭтапПроизводства2_2).Организация
	|		КОНЕЦ КАК Организация,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Ответственный
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ДвижениеПродукцииИМатериалов).Ответственный
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЭтапПроизводства2_2).Ответственный
	|		КОНЕЦ КАК Ответственный,
	|		ТоварыКОтгрузке.Склад КАК Склад,
	|		ТоварыКОтгрузке.Получатель КАК Получатель,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Подразделение
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|				ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ДвижениеПродукцииИМатериалов).Получатель КАК Справочник.Склады).Подразделение
	|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЭтапПроизводства2_2).Подразделение
	|		КОНЕЦ КАК Подразделение,
	|		ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|		ТоварыКОтгрузке.Характеристика КАК ХарактеристикаНоменклатуры,
	|		ТоварыКОтгрузке.Серия КАК Серия,
	|		0 КАК КОформлениюРасход,
	|		0 КАК КОформлениюОстаток,
	|		ВЫБОР
	|			КОГДА НЕ ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|					ИЛИ ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|						И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке > &ТекущаяДата
	|				ТОГДА 4
	|
	|		КОГДА ЕСТЬNULL(ТоварыКОтгрузкеОстаткиИОбороты.СобраноПриход, 0) + ЕСТЬNULL(ТоварыКОтгрузкеОстаткиИОбороты.КОтгрузкеРасход, 0) = 0 
	|			И (ЕСТЬNULL(ТоварыКОтгрузкеОстаткиИОбороты.КОформлениюПриход,0)>0 
	|				ИЛИ ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов) ТОГДА
	|				1 //Ордер не оформлен
	|		КОГДА ТоварыКОтгрузке.КОформлениюПриход > 0
	|					И (ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|						ИЛИ ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2)
	|					И ТоварыКОтгрузке.СобраноПриход + ТоварыКОтгрузке.КОтгрузкеРасход <> ТоварыКОтгрузке.КОформлениюРасход
	|				ИЛИ ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|					И ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток <> 0
	|				ТОГДА 3 //Ордер частично оформлен
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СостояниеОрдера
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
	|				,
	|				,
	|				,
	|				,
	|				(ВЫБОР
	|					КОГДА ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|						ТОГДА ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Подразделение
	|					КОГДА ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|						ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ДвижениеПродукцииИМатериалов).Получатель КАК Справочник.Склады).Подразделение
	|					КОГДА ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|						ТОГДА ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЭтапПроизводства2_2).Подразделение
	|					КОНЕЦ = &Подразделение
	|					ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|				И (ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|						И Получатель ССЫЛКА Справочник.Склады
	|					ИЛИ ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|					ИЛИ ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов)) КАК ТоварыКОтгрузке
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
	|					,
	|					,
	|					,
	|					,
	|					(ВЫБОР
	|						КОГДА ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|							ТОГДА ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказМатериаловВПроизводство).Подразделение
	|						КОГДА ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|							ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ДвижениеПродукцииИМатериалов).Получатель КАК Справочник.Склады).Подразделение
	|						КОГДА ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|							ТОГДА ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЭтапПроизводства2_2).Подразделение
	|						КОНЕЦ = &Подразделение
	|						ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|					И (ДокументОтгрузки ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|							И Получатель ССЫЛКА Справочник.Склады
	|						ИЛИ ДокументОтгрузки ССЫЛКА Документ.ЭтапПроизводства2_2
	|						ИЛИ ДокументОтгрузки ССЫЛКА Документ.ДвижениеПродукцииИМатериалов)) КАК ТоварыКОтгрузкеОстаткиИОбороты
	|			ПО ТоварыКОтгрузке.ДокументОтгрузки = ТоварыКОтгрузкеОстаткиИОбороты.ДокументОтгрузки
	|				И ТоварыКОтгрузке.Склад = ТоварыКОтгрузкеОстаткиИОбороты.Склад
	|				И ТоварыКОтгрузке.Получатель = ТоварыКОтгрузкеОстаткиИОбороты.Получатель
	|	ГДЕ
	|		(ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток - ТоварыКОтгрузке.СобраноКонечныйОстаток > 0
	|				ИЛИ ТоварыКОтгрузке.КОформлениюКонечныйОстаток > 0)
	|		И ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|		И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
	|
	|	) КАК ЗаказыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКОформлению.Распоряжение,
	|	ЗаказыКОформлению.Ссылка,
	|	ЗаказыКОформлению.ПометкаУдаления,
	|	ЗаказыКОформлению.Номер,
	|	ЗаказыКОформлению.ДатаДокумента,
	|	ЗаказыКОформлению.ТипРаспоряжения,
	|	ЗаказыКОформлению.Проведен,
	|	ЗаказыКОформлению.Организация,
	|	ЗаказыКОформлению.Отправитель,
	|	ЗаказыКОформлению.Получатель,
	|	ЗаказыКОформлению.Подразделение,
	|	ЗаказыКОформлению.ХозяйственнаяОперация,
	|	ЗаказыКОформлению.Ответственный";

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСостояниюНакладной(Форма)

	ОтборСостояниеНакладной = ?(ЗначениеЗаполнено(Форма.ОтборСостояниеНакладной), Число(Форма.ОтборСостояниеНакладной), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокОформлениеПередачиМатериалов,
		"СостояниеНакладной",
		ОтборСостояниеНакладной,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Форма.ОтборСостояниеНакладной <> "");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСостояниюРасходногоОрдера(Форма)

	ОтборСостояниеРасходногоОрдера = ?(ЗначениеЗаполнено(Форма.ОтборСостояниеРасходногоОрдера), Число(Форма.ОтборСостояниеРасходногоОрдера), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокОформлениеПередачиМатериалов,
		"СостояниеОрдера",
		ОтборСостояниеРасходногоОрдера,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Форма.ОтборСостояниеРасходногоОрдера <> "");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьНакладная(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			// Состояние "1" - накладная не создана. Остальные состояния подразумевают наличие накладной, либо накладную без заказа (состояние 4)
			Если Строка.СостояниеНакладной <> 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОрдер(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			// Состояние "1" - ордер не создан. Остальные состояния подразумевают наличие ордера, либо что ордер не требуется (состояние 4)
			Если Строка.СостояниеОрдера <> 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьЗаказ(ДокументыПоТипамНакладных, ТипыЗаказов)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			ТипРаспоряжения = ТипЗнч(Строка.Ссылка);
			Если ТипыЗаказов.Найти(ТипРаспоряжения) <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СтруктураПараметров = Новый Структура();
	ПараметрыФормы = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.ФормаСозданныеДокументы");
	СозданныеДокументы = Новый СписокЗначений();
	
	МетаданныеНакладной = Метаданные.Документы.ДвижениеПродукцииИМатериалов;
	МенеджерНакладной = Документы.ДвижениеПродукцииИМатериалов;
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		Если ПерваяСтрока.СостояниеНакладной > 0 Тогда
			
			ДокументОбъект = МенеджерНакладной.СоздатьДокумент();
			
			Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
			
			Если ПерваяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство Тогда
				ОтборСтрок = Таблица.ВыгрузитьКолонку("Отправитель");
			Иначе
				ОтборСтрок = Таблица.ВыгрузитьКолонку("Получатель");
			КонецЕсли;
			
			РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Заказы, ПерваяСтрока.ХозяйственнаяОперация, ОтборСтрок);
			
			ПараметрыЗаполнения = МенеджерНакладной.ПараметрыЗаполненияДокумента();
			ПараметрыЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
			ПараметрыЗаполнения.Вставить("ФормаОткрыта", Ложь);
			ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
			ПараметрыЗаполнения.Вставить("МассивЗаказов", Заказы);
			
			ДокументОбъект = МенеджерНакладной.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыЗаполнения);
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				// Добавить запись в историю работы пользователя.
				ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
				СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ТекстОшибки = НСтр("ru = 'Не удалось провести документ'");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
						ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
				КонецПопытки;
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Не удалось создать документ %1 на основании документа %2'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, МетаданныеНакладной.Синоним, Заказы[0]);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
					ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СозданныеДокументы.ВыгрузитьЗначения(), "ВнутреннееТовародвижениеФормаСозданныеДокументы");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	МетаданныеНакладной = Метаданные.Документы.ДвижениеПродукцииИМатериалов;
	МенеджерНакладной = Документы.ДвижениеПродукцииИМатериалов;
	
	ИмяФормыНакладной = "Документ." + МетаданныеНакладной.Имя + ".Форма.ФормаДокумента";
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыНакладной);
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	РаспоряженияНакладные = Новый Массив();
	Для Каждого Распоряжение Из Заказы Цикл
		Если ТипыНакладных.НайтиПоЗначению(ТипЗнч(Распоряжение)) <> Неопределено Тогда
			РаспоряженияНакладные.Добавить(Распоряжение);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
	Если ПоОрдерам И РаспоряженияНакладные.Количество() > 0 Тогда
		// Для существующих распоряжений-накладных не перезаполняется шапка документа
		ПерезаполняемаяНакладная = РаспоряженияНакладные[0];
		ЗначенияЗаполнения = Новый Структура("ЗаполнятьПоОрдеру, МассивЗаказов", Истина, Заказы);
		
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
		ПараметрыФормы.Вставить("МассивЗаказов", Заказы);
	Иначе
		// Требуется создать новые накладные - нужно получить данные шапки документа и проверить их
		Если ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
			Или ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
			ОтборСтрок = ТаблицаДокументов.ВыгрузитьКолонку("Отправитель");
		Иначе
			ОтборСтрок = ТаблицаДокументов.ВыгрузитьКолонку("Получатель");
		КонецЕсли;
		ОтборСтрок = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ОтборСтрок);
		РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Заказы, ВыделеннаяСтрока.ХозяйственнаяОперация, ОтборСтрок);
		
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
		ПараметрыФормы.Вставить("РеквизитыШапки", РеквизитыШапки);
		ПараметрыФормы.Вставить("МассивЗаказов", Заказы);
		
	КонецЕсли;
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	Если ЗначениеЗаполнено(ПерезаполняемаяНакладная) Тогда
		ПараметрыСОснованием.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыСОснованием.Вставить("Ключ", ПерезаполняемаяНакладная);
	КонецЕсли;
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОформитьЧерезФормуПерезаполнения(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	МетаданныеНакладной = Метаданные.Документы.ДвижениеПродукцииИМатериалов;
	МенеджерНакладной = Документы.ДвижениеПродукцииИМатериалов;
	
	Если ПравоДоступа("Добавление", МетаданныеНакладной) Или ПравоДоступа("Изменение", МетаданныеНакладной) Тогда
		
		Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
		Если ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство Тогда
			ОтборСтрок = ТаблицаДокументов.ВыгрузитьКолонку("Отправитель");
		Иначе
			ОтборСтрок = ТаблицаДокументов.ВыгрузитьКолонку("Получатель");
		КонецЕсли;
		
		ИмяФормыНакладной = "Документ." + МетаданныеНакладной.Имя + ".Форма.ФормаДокумента";
		
		НастройкиФормы = НакладныеСервер.НастройкиФормыПереоформленияНакладных();
		НастройкиФормы.Заголовок = НСтр("ru = 'Переоформление списаний товаров по выбранным распоряжениям'");
		НастройкиФормы.ИмяФормыНакладной = ИмяФормыНакладной;
		
		НастройкиФормы.ИспользоватьНакладныеПоНесколькимЗаказам = Истина;
		НастройкиФормы.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
		
		РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Заказы, ВыделеннаяСтрока.ХозяйственнаяОперация, ОтборСтрок);
		
		Если ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
			Или ВыделеннаяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства Тогда
			
			НастройкиФормы.НакладнаяНаОтгрузку = Ложь;
			НастройкиФормы.НакладнаяНаПриемку = Истина;
			
			РеквизитыШапки.Склад = ВыделеннаяСтрока.Получатель;
		Иначе
			
			НастройкиФормы.НакладнаяНаОтгрузку = Истина;
			НастройкиФормы.НакладнаяНаПриемку = Ложь;
			
			РеквизитыШапки.Склад = ВыделеннаяСтрока.Отправитель;
		КонецЕсли; 
		
		РезультатПроверки = МенеджерНакладной.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
		
		ПараметрыИИмяФормы = Новый Структура("ЕстьОшибки, ИмяФормы, Параметры", Ложь);
		
		ПараметрыИИмяФормы.ИмяФормы = "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям";
		
		ПараметрыИИмяФормы.Параметры = Новый Структура;
		ПараметрыИИмяФормы.Параметры.Вставить("Заказы", Заказы);
		ПараметрыИИмяФормы.Параметры.Вставить("Склад", РеквизитыШапки.Склад);
		ПараметрыИИмяФормы.Параметры.Вставить("РеквизитыШапки", РеквизитыШапки);
		ПараметрыИИмяФормы.Параметры.Вставить("НастройкиФормы", НастройкиФормы);
		
		Возврат ПараметрыИИмяФормы;
		
	Иначе
		ОшибкаДоступа = СтрШаблон(НСтр("ru = 'Нет прав на добавление/изменение документа ""%1""'"), МетаданныеНакладной.Синоним);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
			ОшибкаДоступа, Неопределено);
			
		Возврат Новый Структура(); // Нет прав
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИсключитьЗаказыСНакладными(ДокументыПоТипамНакладных, СписокОшибок)
	
	МассивКУдалению = Новый Массив();
	МассивТипыНакладных = ТипыНакладных.ВыгрузитьЗначения();
	
	ИзначальноеКоличество = ДокументыПоТипамНакладных.Количество();
	Для н = 1 По ИзначальноеКоличество Цикл
		Индекс = ИзначальноеКоличество - н;
		Таблица = ДокументыПоТипамНакладных[Индекс];
		
		Исключить = Ложь;
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			Если СтрокаТаблицы.СостояниеНакладной <> 1 И СтрокаТаблицы.СостояниеНакладной <> 4 Тогда
				Исключить = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Исключить Тогда
			
			Для Каждого Строка Из Таблица Цикл
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 действие не выполнено, так как по выбранным распоряжениям такой аналитики уже имеются накладные.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
			КонецЦикла;
			
			ДокументыПоТипамНакладных.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыделенныеХозяйственныеОперации()
	
	Массив = Новый Массив();
	
	Для Каждого Строка Из ДоступныеХозяйственныеОперации Цикл
		Если Строка.Пометка Тогда
			Массив.Добавить(Строка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Пустой массив означает отсутствие отбора. Отсутствие отбора равнозначно всем выбранным элементам
	Если Массив.Количество() = 0 Тогда
		Массив = ДоступныеХозяйственныеОперации.ВыгрузитьЗначения();
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеРаспоряжений(СписокРаспоряжений, ПоОрдерам, СписокОшибок)
	
	ДанныеРаспоряжений = Новый ТаблицаЗначений;
	ТипыСсылки = "ДокументСсылка.ДвижениеПродукцииИМатериалов,ДокументСсылка.ЗаказМатериаловВПроизводство,ДокументСсылка.ЭтапПроизводства2_2";
	ДанныеРаспоряжений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(ТипыСсылки));
	ДанныеРаспоряжений.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ДанныеРаспоряжений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеРаспоряжений.Колонки.Добавить("Отправитель", Новый ОписаниеТипов("СправочникСсылка.Склады,СправочникСсылка.СтруктураПредприятия"));
	ДанныеРаспоряжений.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Склады,СправочникСсылка.СтруктураПредприятия"));
	ДанныеРаспоряжений.Колонки.Добавить("СостояниеНакладной", Новый ОписаниеТипов("Число"));
	ДанныеРаспоряжений.Колонки.Добавить("СостояниеОрдера", Новый ОписаниеТипов("Число"));
	
	ПакетныйРежим = СписокРаспоряжений.Количество() > 1;
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		ТекстОшибки = "";
		ПрерватьОбработкуСтроки = Ложь;
		
		Если ПакетныйРежим И ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов") Тогда
			
			ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную вместе с другими распоряжениями. Выберите распоряжение отдельно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			
		ИначеЕсли ПоОрдерам Тогда
			
			НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Неопределено);
			
			ОперацияОтгрузки = (Строка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство
				Или Строка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство);
			
			Если ОперацияОтгрузки И Строка.СостояниеОрдера = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную по отгрузке т.к. ордера сооветствуют накладным.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли ОперацияОтгрузки И Строка.СостояниеОрдера = 4 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную по отгрузке т.к. склад не использует ордерную схему.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Не ОперацияОтгрузки И Строка.СостояниеОрдера = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную по приемке т.к. ордера сооветствуют накладным.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Не ОперацияОтгрузки И Строка.СостояниеОрдера = 4 И НакладнаяЯвляетсяРаспоряжением Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную по приемке, т.к. используется порядок 
										|оформления приходного ордера ""После оформления накладной"".'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Не ОперацияОтгрузки И Строка.СостояниеОрдера = 4 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную по приемке т.к. склад не использует ордерную схему.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		Иначе // оформление по заказам
			
			Если Строка.СостояниеНакладной = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 уже создана накладная'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Строка.СостояниеНакладной = 4 Тогда
				
				ТекстОшибки = НСтр("ru = 'Распоряжение %1 явлется накладной. Невозможно создать накладную по накладной.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеРаспоряжений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.СостояниеОрдера = Строка.СостояниеОрдера;
		
	КонецЦикла;
	
	МассивТаблиц = Новый Массив();
	ПоляГруппировки = "ХозяйственнаяОперация,Организация,Отправитель,Получатель";
	ДанныеРаспоряженийПоГрупппам = ДанныеРаспоряжений.Скопировать();
	ДанныеРаспоряженийПоГрупппам.Свернуть(ПоляГруппировки);
	Для каждого ДанныеГруппы Из ДанныеРаспоряженийПоГрупппам Цикл
		СтруктураПоиска = Новый Структура(ПоляГруппировки);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеГруппы);
		МассивТаблиц.Добавить(ДанныеРаспоряжений.Скопировать(СтруктураПоиска));
	КонецЦикла; 
	
	Возврат МассивТаблиц;
	
КонецФункции

&НаКлиенте
Функция ДанныеВыделенныхСтрок(ЭлементСписок)

	ДанныеВыделенныхСтрок = Новый Массив();
	Для Каждого Идентификатор Из ЭлементСписок.ВыделенныеСтроки Цикл
		Если ТипЗнч(Идентификатор) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСтроки = ЭлементСписок.ДанныеСтроки(Идентификатор);
		ДанныеСтрокиСтруктура = Новый Структура("ХозяйственнаяОперация,Организация,Отправитель,Получатель,
												|СостояниеОрдера,СостояниеНакладной,Ссылка");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиСтруктура, ДанныеСтроки);
		ДанныеВыделенныхСтрок.Добавить(ДанныеСтрокиСтруктура);
	КонецЦикла;
	
	Возврат ДанныеВыделенныхСтрок;

КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеМетаданныхНакладныхПоОперациям(МассивХозяйственныхОпераций)
	
	ТаблицаОперацииНакладные = ОписаниеМетаданныхНакладных();
	ОтобраннаяТаблица = ТаблицаОперацииНакладные.СкопироватьКолонки();
	
	Для Каждого Операция Из МассивХозяйственныхОпераций Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("ХозяйственнаяОперация", Операция);
		
		НайденныеСтроки = ТаблицаОперацииНакладные.НайтиСтроки(Отбор);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Строка = ОтобраннаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОтобраннаяТаблица;
	
КонецФункции

// Полная таблица соответствий ХозяйственнаяОперация - ТипДокумента, где в качестве типа указаны как накладные, так и заказы по накладным
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция ОписаниеМетаданныхНакладных()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	ТаблицаЗначений.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ТаблицаЗначений.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Тип"));
	ТаблицаЗначений.Колонки.Добавить("ТипНакладной", Новый ОписаниеТипов("Тип"));
	ТаблицаЗначений.Колонки.Добавить("ОбъектМетаданныхДокумента", Новый ОписаниеТипов("ОбъектМетаданных"));
	ТаблицаЗначений.Колонки.Добавить("Накладная", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("ИспользуютсяСтатусы", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("ИспользуетсяРаспоряжение", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("ПоНесколькимЗаказам", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("ПриходныйОрдерНевозможен", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("КомандаСозданияФормы", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("РазделятьДокументыПоПодразделению", Новый ОписаниеТипов("Булево"));
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Накладные с заказами:
	
	// Передача в производство.
		
	// Накладная на передачу материалов в производство.
	Строка = ТаблицаЗначений.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов");
	Строка.ТипНакладной 				= Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов");
	Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ДвижениеПродукцииИМатериалов;
	Строка.Накладная					= Истина;
	Строка.ИспользуютсяСтатусы			= Истина;
	Строка.ИспользуетсяРаспоряжение		= Истина;
	Строка.КомандаСозданияФормы			= "СписокСоздатьПередачуМатериаловВПроизводство";
	Строка.РазделятьДокументыПоПодразделению = Истина;
	
	// Заказ на передачу материалов в производство.
	Строка = ТаблицаЗначений.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.ЗаказМатериаловВПроизводство");
	Строка.ТипНакладной 				= Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов");
	Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ЗаказМатериаловВПроизводство;
	Строка.ИспользуетсяРаспоряжение		= Истина;
	Строка.ПоНесколькимЗаказам			= Истина;
	Строка.РазделятьДокументыПоПодразделению = Истина;
		
	// Передача из производства материалов.
	Строка = ТаблицаЗначений.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.ЭтапПроизводства2_2");
	Строка.ТипНакладной 				= Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов");
	Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ЭтапПроизводства2_2;
	Строка.ИспользуетсяРаспоряжение		= Истина;
	Строка.РазделятьДокументыПоПодразделению = Истина;
	
	// Передача из производства продукции.
	Строка = ТаблицаЗначений.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.ЭтапПроизводства2_2");
	Строка.ТипНакладной 				= Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов");
	Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ЭтапПроизводства2_2;
	Строка.ИспользуетсяРаспоряжение		= Истина;
	Строка.РазделятьДокументыПоПодразделению = Истина;
	
	// Удаление из результирующей таблицы объектов метаданных к которым нет доступа
	МассивКУдалению = Новый Массив();
	Для Каждого Строка Из ТаблицаЗначений Цикл
		Если Не ПравоДоступа("Чтение", Строка.ОбъектМетаданныхДокумента) Тогда
			МассивКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из МассивКУдалению Цикл
		ТаблицаЗначений.Удалить(Строка);
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Массив типов документов, используемых в переданном массиве хозяйственных операций
//
// Параметры:
//  МассивХозяйственныхОпераций - Массив - 
//  Отбор 						- Структура - Структура отбора по таблице ОписаниеМетаданныхНакладных
// 
// Возвращаемое значение:
//   - Массив
//
&НаСервереБезКонтекста
Функция ИспользуемыеТипыДокументовПоОперациям(МассивХозяйственныхОпераций, Отбор = Неопределено)
	
	ТипыДокументов = Новый Массив();
	
	ТаблицаОперацииНакладные = ОписаниеМетаданныхНакладныхПоОперациям(МассивХозяйственныхОпераций);
		
	Если Отбор <> Неопределено Тогда
		НайденныеСтроки = ТаблицаОперацииНакладные.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			ТипыДокументов.Добавить(Строка.ТипДокумента);
		КонецЦикла;
	Иначе
		
		ТипыДокументов = ТаблицаОперацииНакладные.ВыгрузитьКолонку("ТипДокумента");
		
	КонецЕсли;
	
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТипыДокументов);
	
	Возврат ТипыДокументов;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоОперации(Настройки)
	
	НастройкиДоступныеХозяйственныеОперации = Настройки.Получить("ДоступныеХозяйственныеОперации");
	Если НастройкиДоступныеХозяйственныеОперации <> Неопределено Тогда
		
		ДоступныеХозяйственныеОперации = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
		
		Для Каждого Элемент Из НастройкиДоступныеХозяйственныеОперации Цикл
			
			НовыйЭлементСписка = ДоступныеХозяйственныеОперации.НайтиПоЗначению(Элемент.Значение);
			Если НовыйЭлементСписка <> Неопределено Тогда
				
				НовыйЭлементСписка.Пометка = Элемент.Пометка;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	Документы.ДвижениеПродукцииИМатериалов.УстановитьУсловноеОформлениеОперации(Список.УсловноеОформление);
	
	Документы.ДвижениеПродукцииИМатериалов.УстановитьУсловноеОформлениеОперации(
		УсловноеОформление, 
		"СписокОформлениеПередачиИзПодразделенияХозяйственнаяОперация", 
		"СписокОформлениеПередачиИзПодразделения.ХозяйственнаяОперация");

КонецПроцедуры

&НаСервере
Процедура ИнициализацияФормыПриСозданииНаСервере()

	ДоступныеХозяйственныеОперации = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();

	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Элементы.СтраницаОформлениеПередачиВПроизводство.Заголовок = НСтр("ru = 'К оформлению'");
		Элементы.ОтборСостояниеНакладной2.Видимость = Ложь;
		Элементы.ОтборСостояниеПриходногоОрдера.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяТекущейСтраницы") Тогда
		ТекущийЭлемент = Элементы[Параметры.ИмяТекущейСтраницы];
	КонецЕсли;
	
	УстановитьТекстЗапросаСписокОформлениеПередачиМатериалов();
	
	ЗаполнитьСписокСостоянийОформленияНакладной(Элементы.ОтборСостояниеНакладной1.СписокВыбора);
	ЗаполнитьСписокСостоянийОформленияНакладной(Элементы.ОтборСостояниеНакладной2.СписокВыбора);
	ЗаполнитьСписокСоответствияОрдеров(Элементы.ОтборСостояниеРасходногоОрдера.СписокВыбора);
	ЗаполнитьСписокСоответствияОрдеров(Элементы.ОтборСостояниеПриходногоОрдера.СписокВыбора);
	
	ЗаполнитьДоступныеТипыЗаказовИТипыНакладных();
	
	УстановитьОтборПоПодразделению(ЭтаФорма); //Для инициализации параметров дин списка.
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.ОтборОтветственный.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.ДвижениеПродукцииИМатериалов));
		
	Элементы.СписокОформлениеПередачиМатериаловСостояниеОрдера.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
	
	Элементы.СписокОформлениеПередачиИзПодразделенияСостояниеОрдера.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении");
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокОформлениеПередачиМатериалов,
		"ТекущаяДата",
		ТекущаяДатаСеанса());

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокОформлениеПередачиМатериалов,
		"ПередачаВПроизводствоПредставление",
		ДоступныеХозяйственныеОперации.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую).Представление);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные()
	
	Элементы.СписокОформлениеПередачиМатериалов.Обновить();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаОформлениеПередачиИзПроизводства Тогда
		АдресХранилища = "";
		Возврат;
	КонецЕсли;
	
	РезультатРасчета = ПолучитьДанныеСПомощьюФоновогоЗадания();
	
	Если РезультатРасчета.ЗаданиеВыполнено Тогда
		
		АдресХранилища = РезультатРасчета.АдресХранилища;
		ЗагрузитьДанныеНаСервере();
		
	Иначе
		
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилища       = РезультатРасчета.АдресХранилища;
		
		ОткрытьФормуДлительнойОперации();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ЗагрузитьДанныеНаСервере();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
					
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()

	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	// Уменьшим шаг увеличения времени опроса выполнения задания
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСПомощьюФоновогоЗадания()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ОтборПодразделение", ОтборПодразделение);
	ПараметрыЗадания.Вставить("ОтборСостояниеНакладной", ОтборСостояниеНакладной);
	ПараметрыЗадания.Вставить("ОтборСостояниеПриходногоОрдера", ОтборСостояниеПриходногоОрдера);
	
	НаименованиеЗадания = НСтр("ru = 'Получение данных для рабочего места ""Движение продукции и материалов""'");
	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"Документы.ДвижениеПродукцииИМатериалов.ПолучитьДанныеРабочегоМеста",
						ПараметрыЗадания,
						НаименованиеЗадания);
						
	Возврат РезультатРасчета;

КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеНаСервере()
	
	ДанныеТекущейСтроки = Неопределено;
	Если Элементы.СписокОформлениеПередачиИзПодразделения.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = СписокОформлениеПередачиИзПодразделения.НайтиПоИдентификатору(Элементы.СписокОформлениеПередачиИзПодразделения.ТекущаяСтрока);
		ДанныеТекущейСтроки = Новый Структура("Распоряжение,ХозяйственнаяОперация");
		ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ТекущиеДанные)
	КонецЕсли;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	СписокОформлениеПередачиИзПодразделения.Загрузить(СтруктураДанных.СписокОформлениеПередачиИзПодразделения);
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Распоряжение,ХозяйственнаяОперация");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеТекущейСтроки);
  		СписокСтрок = СписокОформлениеПередачиИзПодразделения.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.СписокОформлениеПередачиИзПодразделения.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПодразделению(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.Список,
		"ПолучательИлиОтправитель",
		Форма.ОтборПодразделение);

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.Список,
		"ИспользоватьПолучательИлиОтправитель",
		НЕ Форма.ОтборПодразделение.Пустая());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокОформлениеПередачиМатериалов,
		"Подразделение",
		Форма.ОтборПодразделение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОперации(Форма)

	ЗаполнитьПредставлениеОтбораПоОперации(Форма);
	
	ВыбранныеОперации = Новый СписокЗначений;
	Для каждого ЭлементКоллекции Из Форма.ДоступныеХозяйственныеОперации Цикл
		Если ЭлементКоллекции.Пометка Тогда
			ВыбранныеОперации.Добавить(ЭлементКоллекции.Значение);
		КонецЕсли; 
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"ХозяйственнаяОперация",
		ВыбранныеОперации,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ВыбранныеОперации.Количество() <> 0);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОтветственному(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Ответственный",
		Форма.ОтборОтветственный,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Форма.ОтборОтветственный));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСтатусу(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Статус",
		Форма.ОтборСтатус,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Форма.ОтборСтатус));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеОтбораПоОперации(Форма)
	
	Форма.ОтборОперация = "";
	Для Каждого ЭлементСписка Из Форма.ДоступныеХозяйственныеОперации Цикл
		Если ЭлементСписка.Пометка Тогда
			Представление = ?(ПустаяСтрока(ЭлементСписка.Представление), ЭлементСписка.Значение, ЭлементСписка.Представление);
			Форма.ОтборОперация = Форма.ОтборОперация +
				?(ЗначениеЗаполнено(Форма.ОтборОперация), ", ", "") + Представление;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус(ЗначениеСтатуса, ПредставлениеСтатуса)

	ВыделенныеСсылки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      ЗначениеСтатуса);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     ВыделенныеСсылки);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	ТекстВопроса = СтрШаблон(НСтр("ru='У выделенных в списке документов будет установлен статус ""%1"". Продолжить?'"), ПредставлениеСтатуса);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
										ДополнительныеПараметры.ВыделенныеСсылки, 
										ДополнительныеПараметры.ЗначениеСтатуса);
										
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Элементы.Список, 
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
