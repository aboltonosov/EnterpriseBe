#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
	ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("ЗаполнятьПоОрдеру") Тогда
		
		ПерезаполнитьПоЗаказамОрдерам(Параметры.ЗначенияЗаполнения.МассивЗаказов);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство") Тогда
		ДоступноИзменение = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказМатериаловВПроизводство);
	Иначе
		ДоступноИзменение = ПравоДоступа("Изменение", Метаданные.Документы.ЭтапПроизводства2_2);
	КонецЕсли;
	
	Элементы.ЗакрытьЗаказ.Доступность  = ДоступноИзменение;
	Элементы.ЗакрытьЗаказы.Доступность = ДоступноИзменение;
	
	ЗаполнитьСписокОпераций();
	УстановитьДоступностьКомандБуфераОбмена();
	ОбновитьУчетНДСПоФактическомуИспользованию();
	
	#Область УниверсальныеМеханизмы
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	#КонецОбласти
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	УстановитьВидимостьКомандВводаНаОсновании();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбновитьПриОткрытии Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	СообщитьОРезультатахЗаполнения();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаголовокФормы();
	
	ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
	// ИнтеграцияГИСМ
	СформироватьНадписьМаркировкаПродукции();
	// Конец ИнтеграцияГИСМ
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда
		
		Если ВРег(ВыполняемаяОперация) = ВРег("ПодборТоваровИзЗаказа") Тогда
			ОбработкаПодбораТоваровИзЗаказа(ВыбранноеЗначение.АдресВХранилище);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда	
		
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
		Объект.ВидыЗапасовУказаныВручную = ИсточникВыбора.ВидыЗапасовУказаныВручную;
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	Иначе
		
		ОбработкаВыбораНоменклатурыНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_МаркировкаТоваровГИСМ"
		И Параметр = Объект.Ссылка Тогда
		
		СформироватьНадписьМаркировкаПродукции();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ДвижениеПродукцииИМатериалов", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую"))
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И Не Объект.ПоРаспоряжениям Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтаФорма,
			"Товары",
			"Номенклатура,Характеристика,Количество",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		СтатусПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если ХозОперацияДоИзменения = Объект.ХозяйственнаяОперация Тогда
		Возврат;
	КонецЕсли;
	
	ПоРаспоряжениямДоИзменения = Объект.ПоРаспоряжениям;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство") Тогда
		Объект.ПоРаспоряжениям = Истина;
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзКладовой")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзКладовой")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеремещениеВПроизводстве") Тогда
		Объект.ПоРаспоряжениям = Ложь;
	КонецЕсли;
	
	Если Объект.ПоРаспоряжениям И НачатаОтгрузка Тогда
		
		ТекстПредупреждения = НСтр("ru = 'По данному документу уже начата отгрузка.
										|Изменять хоз.операцию не допускается.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Объект.ПоРаспоряжениям = ПоРаспоряжениямДоИзменения;
		Объект.ХозяйственнаяОперация = ХозОперацияДоИзменения;
		Возврат;
		
	ИначеЕсли ПоРаспоряжениямДоИзменения Тогда
		
		ОтвязатьДокументОтРаспоряжений = Не Объект.ПоРаспоряжениям
			Или ХозОперацияДоИзменения = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую");
		
		Если ОтвязатьДокументОтРаспоряжений
			И ЕстьСтрокиПривязанныеКЗаказу() Тогда
			
			Если ЗначениеЗаполнено(Объект.Распоряжение) Тогда
				ТекстВопроса = НСтр("ru='Строки документа перестанут быть связанными со строками распоряжения. Продолжить?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки документа перестанут быть связанными со строками распоряжений. Продолжить?'");
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ХозОперацияПриИзмененииЗавершение", ЭтотОбъект, ПоРаспоряжениямДоИзменения);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ХозяйственнаяОперацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоРаспоряжениямПриИзменении(Элемент)
	
	Если Объект.ПоРаспоряжениям Тогда
		
		Если НачатаОтгрузка Тогда
			ТекстПредупреждения = НСтр("ru = 'По данному документу уже начата отгрузка. 
											|Изменять признак ""По распоряжению"" не допускается.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Объект.ПоРаспоряжениям = Ложь;
			Возврат;
		КонецЕсли; 
		
	Иначе
		
		Если ЕстьСтрокиПривязанныеКЗаказу() Тогда
			
			Если ЗначениеЗаполнено(Объект.Распоряжение) Тогда
				ТекстВопроса = НСтр("ru='Строки документа перестанут быть связанными со строками распоряжения. Продолжить?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки документа перестанут быть связанными со строками распоряжений. Продолжить?'");
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПоРаспоряжениямПриИзмененииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоРаспоряжениямПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	
	Если Объект.Отправитель <> ОтправительДоИзменения 
		И (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую"))
		И Объект.ПоРаспоряжениям И Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Список ""Материалы"" будет очищен. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправительПриИзмененииЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить и продолжить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
        Возврат;
		
	КонецЕсли; 
	
	ОтправительПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРаспоряженияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокДокументов", СписокРаспоряжений);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Распоряжения (%КоличествоДокументов%)'"));
	ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстМаркировкаТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Объект.Ссылка, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьМаркировкуТоваров" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.МаркировкаТоваровГИСМ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры
//Конец ИнтеграцияГИСМ

&НаКлиенте
Процедура ЗакрытьЭтап(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЭтапЗавершение", ЭтотОбъект),
						НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?'"),РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗакрытьЭтапФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтапЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьЭтапФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтапФрагмент()
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ДвижениеПродукцииИМатериалов.ФормаДокумента.Команда.ЗакрытьЭтапФрагмент");
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Распоряжение) Тогда
		СписокЗаказовКЗакрытию.Добавить(Объект.Распоряжение)
	Иначе
		СписокЗаказовКЗакрытию.ЗагрузитьЗначения(СписокРаспоряжений.ВыгрузитьЗначения())
	КонецЕсли;
	
	СтруктураЗакрытия = ЗаказыКлиентСервер.ПараметрыПомощникаЗакрытияЗаказов();
	СтруктураЗакрытия.Заказы                               = СписокЗаказовКЗакрытию;
	СтруктураЗакрытия.ДокументИнициатор                    = Объект.Ссылка;
	СтруктураЗакрытия.СкорректироватьМерныеТоварыПоПриемке = Истина;
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные; 
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ОбновитьОтклоненияОтРаспоряженияВСтроке(ТекущаяСтрока, Объект.ПоРаспоряжениям, Объект.ХозяйственнаяОперация);
		
		ОбновитьИнформациюОбОтклоненииОтРаспоряжений(
			Объект.Товары,
			НадписьРасхождение, 
			Элементы.КартинкаРасхождение1,
			Элементы.КартинкаРасхождение2);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	                                
	СкладыКлиент.ОбновитьКешированныеЗначения(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);	
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	ОбновитьИнформациюОбОтклоненииОтРаспоряжений(
		Объект.Товары,
		НадписьРасхождение, 
		Элементы.КартинкаРасхождение1,
		Элементы.КартинкаРасхождение2);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Истина);
	ТоварыПослеУдаленияСервер(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения);
	Если НеобходимоОбновитьСтатусыСерий Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(ПредставлениеПолей));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ЭтаФорма, ТекущаяСтрока, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзКладовой") Тогда
		
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", Новый Структура("Подразделение,Дата", Объект.Отправитель, Объект.Дата)); 
		
	КонецЕсли;
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	ОбеспечениеКлиентСервер.СтруктураДействийВставитьПриИзмененииНазначения(СтруктураДействий);
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ПредставлениеПолей);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущиеДанные.НазначениеОтправителя = ТекущиеДанные.Назначение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую") Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Отправитель) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Склад"" не заполнено'"), Объект.Ссылка, "Объект.Отправитель");
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Склад",                                     Объект.Отправитель);
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
		ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
		ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                   Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор товаров'"));
		ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
		ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
		ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
		
		ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
		
	Иначе
		
		// В остальных случаях открывается простая форма выбора
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
				ПараметрыФормы, 
				ЭтаФорма, 
				УникальныйИдентификатор,,,, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыПоЗаказамОрдерам(Команда)
	
	ОткрытьПодборПоРаспоряжениямОрдерам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
		
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ПредставлениеПолей);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)
	
	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказа(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество()>0 Тогда
		
		ОтвязатьОтРаспоряженияВыбранныеСтроки();
		
		ОповеститьОбОкончанииОтвязкиСтрок(ВыделенныеСтроки.Количество());
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru='Выберите строки, которые необходимо отвязать от распоряжений.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFO(Команда)
	
	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		
		НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO(
			Новый ОписаниеОповещения("ЗаполнитьСерииПоFEFOЗавершение", ЭтотОбъект));
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЗапасов(Команда)

	Перем АдресТоваровВХранилище;
	Перем АдресВидовЗапасовВХранилище;
	
	ПоместитьТоварыИВидыЗапасовВХранилище(
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище);
	
	ФинансыКлиент.ОткрытьВидыЗапасов(
		Объект,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачествоНоменклатуры(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ЭтаФорма, ТекущаяСтрока, СтруктураДействий);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьДоЦелойУпаковки(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоСтрок = 0;
	Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Цел(ДанныеСтроки.КоличествоУпаковок) = ДанныеСтроки.КоличествоУпаковок Тогда
			Продолжить;
		КонецЕсли;
		ВсегоСтрок = ВсегоСтрок + 1;
	КонецЦикла;
	
	Если ВсегоСтрок = 0 Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Округление не требуется'"),, 
			НСтр("ru = 'В выбранных строках уже целое количество единиц.'"),
			БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'В выбранных строках количество будет округлено до целых единиц. 
							|Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкруглитьДоЦелойУпаковкиЗавершение", ЭтотОбъект);
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)

	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	АктуализироватьНалогообложениеНДС("Организация");
	
	ОбновитьУчетНДСПоФактическомуИспользованию();
	
	УстановитьИспользованиеПлановойСтоимости();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОпределитьНаличиеОрдернойСхемы();
	АктуализироватьНалогообложениеНДС("Дата");
	ЗаполнитьСтатусыУказанияСерийСервер(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Объект.ХозяйственнаяОперация = Элементы.ХозяйственнаяОперация.СписокВыбора[0].Значение;
	КонецЕсли; 
	СписокИзмененныхРеквизитов = "ХозяйственнаяОперация";
	
	Если НЕ ДоступенВыборПоРаспоряжению(Объект, УправлениеПредприятием) Тогда
		Документы.ДвижениеПродукцииИМатериалов.ОтвязатьОтРаспоряжений(Объект);
		СписокИзмененныхРеквизитов = СписокИзмененныхРеквизитов + ",ПоРаспоряжениям";
	КонецЕсли; 
	
	ПоменятьМестамиОтправителяИПолучателяПриИзмененииОперации(СписокИзмененныхРеквизитов);
	
	// Нужно окрулить количество если до этого оно не округлялось
	Если ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ПеремещениеВПроизводстве
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеремещениеВПроизводстве Тогда
		ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(Объект);
	КонецЕсли;
	
	Объект.Отправитель = Элементы.Отправитель.ОграничениеТипа.ПривестиЗначение(Объект.Отправитель);
	Объект.Получатель = Элементы.Получатель.ОграничениеТипа.ПривестиЗначение(Объект.Получатель);

	Если НЕ ИспользоватьНесколькоСкладов Тогда
		Если ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.Склады") Тогда
			Объект.Получатель = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Получатель);
		ИначеЕсли ТипЗнч(Объект.Отправитель) = Тип("СправочникСсылка.Склады") Тогда
			Объект.Отправитель = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Отправитель);
		КонецЕсли; 
	КонецЕсли; 
	
	АктуализироватьНалогообложениеНДС("ХозяйственнаяОперация");
	НастроитьЗависимыеЭлементыФормы(СписокИзмененныхРеквизитов);
	ЗаполнитьСтатусыУказанияСерийСервер(Истина);
	ОбновитьИнформациюПоЗаказам();
	ОбновитьИнформациюОбОтклоненииОтРаспоряженийСервер();
	
	ПослеИзмененияСтрокПрограммноНаСервере(Ложь);
	
	ХозОперацияДоИзменения = Объект.ХозяйственнаяОперация;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПоменятьМестамиОтправителяИПолучателяПриИзмененииОперации(СписокИзмененныхРеквизитов)

	СтарыйОтправитель = Объект.Отправитель;
	СтарыйПолучатель  = Объект.Получатель;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеВПроизводстве
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой)
			И (ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
				Или ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую)
			
		// Сначала вернули на склад теперь обратно передаем
		Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую)
			И (ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
				Или ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой)
			
		// Сначала передали теперь возвращаем
		Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой)
			И (ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
				Или ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую)
		Тогда
		
		Объект.Отправитель = СтарыйПолучатель;
		СписокИзмененныхРеквизитов = СписокИзмененныхРеквизитов + ",Отправитель";
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую)
			И (ХозОперацияДоИзменения = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеВПроизводстве
				Или ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
				Или ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой)
				
		// Сначала вернули на склад теперь обратно передаем
		Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую)
			И (ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
				Или ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой)
			
		// Сначала передали теперь возвращаем
		Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой)
			И (ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
				Или ХозОперацияДоИзменения = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую)
		Тогда
		
		Объект.Получатель = СтарыйОтправитель;
		СписокИзмененныхРеквизитов = СписокИзмененныхРеквизитов + ",Получатель";
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ОтправительПриИзмененииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		
		ЗаполнитьВидЦеныПоСкладу();
		ОпределитьНаличиеОрдернойСхемы();
		
		Если Объект.ПоРаспоряжениям И Объект.Товары.Количество() > 0  Тогда
			Объект.Товары.Очистить();
			ОбновитьИнформациюПоЗаказам();
		КонецЕсли;
		
		АктуализироватьНалогообложениеНДС("Отправитель");
		
	КонецЕсли; 
	
	ЗаполнитьСтатусыУказанияСерийСервер(Истина);
	
	НастроитьЗависимыеЭлементыФормы("Отправитель");
	
	ОтправительДоИзменения = Объект.Отправитель;
	
КонецПроцедуры

Процедура ЗаполнитьВидЦеныПоСкладу()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Отправитель);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.УчетныйВидЦены КАК УчетныйВидЦены
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.УчетныйВидЦены) Тогда
		Объект.ВидЦены = Выборка.УчетныйВидЦены;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучательПриИзмененииСервер()

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой Тогда
		ОрдернаяСхема = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.Получатель, Объект.Дата);
	КонецЕсли; 
	
	АктуализироватьНалогообложениеНДС("Получатель");
	ЗаполнитьСтатусыУказанияСерийСервер(Истина);
	
	НастроитьЗависимыеЭлементыФормы("Получатель");

КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения)

	Если НеобходимоОбновитьСтатусыСерий Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаказам();
	
	ОбновитьИнформациюОбОтклоненииОтРаспоряженийСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОтправительПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Объект.Отправитель = ОтправительДоИзменения;
        Возврат;
    КонецЕсли;
    
    ОтправительПриИзмененииСервер();

КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОткрытьПодборПоРаспоряжениямОрдерам()
	
	РеквизитыШапки = Новый Структура("Организация, Получатель, Отправитель, ХозяйственнаяОперация, Ссылка");
	ЗаполнитьЗначенияСвойств(РеквизитыШапки, Объект);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РеквизитыШапки",              РеквизитыШапки);
	ПараметрыФормы.Вставить("Заказ",                       Объект.Распоряжение);
	ПараметрыФормы.Вставить("ОрдернаяСхемаПриОтгрузке",    ОрдернаяСхема);
	ПараметрыФормы.Вставить("ОрдернаяСхемаПриПоступлении", ОрдернаяСхема);
	ПараметрыФормы.Вставить("НакладнаяПоЗаказам",          Объект.ПоРаспоряжениям);
	ПараметрыФормы.Вставить("АдресТовары",                 АдресТоварыНакладной());
	ПараметрыФормы.Вставить("Накладная",                   Объект.Ссылка);
	ПараметрыФормы.Вставить("ИспользоватьНакладныеПоНесколькимЗаказам", Истина);
	ПараметрыФормы.Вставить("ИспользуютсяЗаказы",          Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПодборТоваровИзЗаказа",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция АдресТоварыНакладной()
	
	Колонки = "Количество, КоличествоУпаковок, НомерСтроки, Номенклатура, Характеристика, ГруппаПродукции,
	          |Назначение, НазначениеОтправителя, Серия, КодСтроки, Упаковка, Распоряжение";
	ТоварыНакладной = Объект.Товары.Выгрузить(,Колонки);
	ТоварыНакладной.Колонки.Добавить("ДатаОтгрузки",  Новый ОписаниеТипов("Дата"));
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыНакладной);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок, Серия");
		
		ОбработатьДобавленнуюПрограммноСтроку(ТекущаяСтрока, КэшированныеЗначения, Истина);
		
	КонецЦикла;

	ПослеИзмененияСтрокПрограммноНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНоменклатурыНаСервере(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		ОбработатьДобавленнуюПрограммноСтроку(ТекущаяСтрока, КэшированныеЗначения);
		
	КонецЦикла;

	ПослеИзмененияСтрокПрограммноНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ПредставлениеПолей);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
	ОбновитьИнформациюОбОтклоненииОтРаспоряжений(
		Объект.Товары,
		НадписьРасхождение, 
		Элементы.КартинкаРасхождение1,
		Элементы.КартинкаРасхождение2);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровИзЗаказа(АдресВХранилище)
	
	Объект.ПоРаспоряжениям = Истина;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ЗаполнитьТоварыПодобраннымиИзЗаказа(СтруктураДанных.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПодобраннымиИзЗаказа(Таблица)
	
	Если Таблица.Колонки.Найти("ОтвязатьОтЗаказа") = Неопределено Тогда
		Таблица.Колонки.Добавить("ОтвязатьОтЗаказа", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ИменаПолей = "КодСтроки, Номенклатура, Характеристика, Распоряжение";
	СтруктураПоиска = Новый Структура(ИменаПолей);
	Таблица.Сортировать(ИменаПолей);
	
	// Группировка таблицы по ключам строк.
	ДеревоСтрок = Новый Массив();
	ПустойЗаказ = Неопределено;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если ОбеспечениеКлиентСервер.ИзменилсяКлюч(СтруктураПоиска, СтрокаТаблицы) Тогда
			
			МассивСтрок = Новый Массив();
			ДеревоСтрок.Добавить(МассивСтрок);
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	ПоляСвязиСЗаказом = Новый Структура("КодСтроки, Распоряжение", 0, Неопределено);
	ДобавленныеСтроки = НакладныеСервер.ЗаполнитьТоварыПодобраннымиИзЗаказа(ДеревоСтрок, ИменаПолей, Объект.Товары, ПоляСвязиСЗаказом);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ПредставлениеПолей);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ЗаполнитьСтатусыСерий = Истина;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства Тогда
		Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьСерииПоЭтапамПроизводства(Объект);
		ЗаполнитьСтатусыСерий = Ложь;
	КонецЕсли;
	
	ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(Объект.Распоряжение, Объект.Товары, "Распоряжение");
	
	ПослеИзмененияСтрокПрограммноНаСервере(Истина, ЗаполнитьСтатусыСерий);
	
	ОбновитьИнформациюПоЗаказам();
	
	НастроитьЗависимыеЭлементыФормы("ПоРаспоряжениям");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ОбработатьДобавленнуюПрограммноСтроку(ТекущаяСтрока, КэшированныеЗначения, Истина);
		
	КонецЦикла;
	
	ПослеИзмененияСтрокПрограммноНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	ДоступностьКоманд = НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки");
	
	Элементы.ТоварыВставитьСтроки.Доступность = ДоступностьКоманд;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьКоманд;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Не Объект.ПоРаспоряжениям;
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ЭтаФорма, Неопределено, СтруктураДействийСДобавленнымиСтроками);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, ПредставлениеПолей);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками, ПредставлениеПолей);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект,СтруктураПараметровДействия,КэшированныеЗначения);
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()

	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.Товары);

КонецФункции

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFOЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()

	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.Товары) Тогда
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость  = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость         = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыЗаполнитьСерииПоFEFO.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыСерия.Видимость                = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
		ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер(ОбновитьПараметрыУказанияСерий = Ложь)
	
	Если ОбновитьПараметрыУказанияСерий Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ДвижениеПродукцииИМатериалов));
		УстановитьВидимостьЭлементовСерий();
	КонецЕсли; 
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;

		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", 
														ЭтотОбъект, 
														Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий));
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,
						ПараметрыФормыУказанияСерий,ЭтаФорма,,,, 
						ОписаниеОповещения,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоРаспоряжениямПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоРаспоряжениямПриИзмененииНаСервере();
	Иначе
		Объект.ПоРаспоряжениям = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоРаспоряжениямПриИзмененииНаСервере()

	ИзмененныеРеквизиты = "ПоРаспоряжениям";
	
	Если Объект.ПоРаспоряжениям Тогда
		
		Если Объект.Товары.Количество() > 0 Тогда
			ПривязатьСтрокиКРаспоряжениям();
			ПослеИзмененияСтрокПрограммноНаСервере(Истина);
		КонецЕсли;
		
	Иначе
		
		ОтвязатьДокументОтРаспоряжений();
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты);
	
	Объект.Отправитель = Элементы.Отправитель.ОграничениеТипа.ПривестиЗначение(Объект.Отправитель);
	Объект.Получатель = Элементы.Получатель.ОграничениеТипа.ПривестиЗначение(Объект.Получатель);
	
КонецПроцедуры

#КонецОбласти

#Область Распоряжения

&НаСервере
Процедура ОтвязатьОтРаспоряженияВыбранныеСтроки()
	
	Перем КэшированныеЗначения;
	
	КоллекцияСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Для Каждого ТекСтрока Из КоллекцияСтрок Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
		НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(СтрокаТаблицы,КэшированныеЗначения,ПараметрыУказанияСерий);
		
		СтрокаТаблицы.КодСтроки = 0;
		СтрокаТаблицы.Назначение = Справочники.Назначения.ПустаяСсылка();
		СтрокаТаблицы.НазначениеОтправителя = Справочники.Назначения.ПустаяСсылка();
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
			СтрокаТаблицы.РасхождениеЗаказ = 1;
		КонецЕсли;
		
		// Переподчиним строки серий
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,ПараметрыУказанияСерий,ТекСтрока,КэшированныеЗначения);
		
	КонецЦикла;
	
	ОбновитьИнформациюОбОтклоненииОтРаспоряженийСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтвязатьДокументОтРаспоряжений()
	
	СписокРаспоряжений.Очистить();
	Документы.ДвижениеПродукцииИМатериалов.ОтвязатьОтРаспоряжений(Объект);
	ПослеИзмененияСтрокПрограммноНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьСтрокиКРаспоряжениям()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.Номенклатура    КАК Номенклатура,
		|	Товары.Характеристика  КАК Характеристика
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.КодСтроки = 0
		|	И Товары.Распоряжение В(&ПустыеЗначенияЗаказов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЗаказы.Распоряжение          КАК Распоряжение,
		|	ТаблицаЗаказы.Номенклатура          КАК Номенклатура,
		|	ТаблицаЗаказы.Характеристика        КАК Характеристика,
		|	ТаблицаЗаказы.Назначение            КАК Назначение,
		|	ТаблицаЗаказы.НазначениеОтправителя КАК НазначениеОтправителя,
		|	ТаблицаЗаказы.КодСтроки             КАК КодСтроки,
		|	СУММА(ТаблицаЗаказы.КОформлению)    КАК КОформлениюОстаток
		|ПОМЕСТИТЬ ЗаказыМатериаловВПроизводство
		|ИЗ
		|	(ВЫБРАТЬ
		|		Заказы.Распоряжение          КАК Распоряжение,
		|		Заказы.Номенклатура          КАК Номенклатура,
		|		Заказы.Характеристика        КАК Характеристика,
		|		Заказы.Назначение            КАК Назначение,
		|		Заказы.НазначениеОтправителя КАК НазначениеОтправителя,
		|		Заказы.КодСтроки             КАК КодСтроки,
		|		Заказы.КОформлениюОстаток    КАК КОформлению
		|	ИЗ
		|		РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(
		|				,
		|					Склад = &Отправитель
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							Товары.Номенклатура КАК Номенклатура,
		|							Товары.Характеристика КАК Характеристика
		|						ИЗ
		|							Товары КАК Товары)
		|					И (Подразделение = &Получатель
		|						ИЛИ Получатель = &Получатель)) КАК Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство КАК ЗаказМатериаловВПроизводство
		|		ПО Заказы.Распоряжение = ЗаказМатериаловВПроизводство.Ссылка
		|	ГДЕ
		|		Заказы.Распоряжение.Организация = &Организация
		|		И ЕСТЬNULL(ЗаказМатериаловВПроизводство.УправлениеПроизводством2_2, ИСТИНА)
		|		//ДопУсловияЗапросОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказыДвижения.Распоряжение,
		|		ЗаказыДвижения.Номенклатура,
		|		ЗаказыДвижения.Характеристика,
		|		ЗаказыДвижения.Назначение,
		|		ЗаказыДвижения.НазначениеОтправителя,
		|		ЗаказыДвижения.КодСтроки,
		|		ВЫБОР
		|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЗаказыДвижения.КОформлению
		|			ИНАЧЕ ЗаказыДвижения.КОформлению
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.ЗаказыМатериаловВПроизводство КАК ЗаказыДвижения
		|	ГДЕ
		|		ЗаказыДвижения.Регистратор = &Регистратор
		|		И ЗаказыДвижения.Распоряжение.Организация = &Организация
		|		И ЗаказыДвижения.Склад = &Отправитель
		|		И ЗаказыДвижения.Активность
		|		И (ЗаказыДвижения.Номенклатура, ЗаказыДвижения.Характеристика) В
		|				(ВЫБРАТЬ
		|					Товары.Номенклатура КАК Номенклатура,
		|					Товары.Характеристика КАК Характеристика
		|				ИЗ
		|					Товары КАК Товары)
		|		И (ЗаказыДвижения.Подразделение = &Получатель
		|			ИЛИ ЗаказыДвижения.Получатель = &Получатель)
		|		//ДопУсловияЗапросДвижения
		|	) КАК ТаблицаЗаказы
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказы.Номенклатура,
		|	ТаблицаЗаказы.Характеристика,
		|	ТаблицаЗаказы.Назначение,
		|	ТаблицаЗаказы.НазначениеОтправителя,
		|	ТаблицаЗаказы.КодСтроки,
		|	ТаблицаЗаказы.Распоряжение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаЗаказы.КОформлению) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*)                                 КАК КоличествоДублей,
		|	ЗаказыМатериаловВПроизводство.Номенклатура    КАК Номенклатура,
		|	ЗаказыМатериаловВПроизводство.Характеристика  КАК Характеристика
		|ПОМЕСТИТЬ ДублиТоваров
		|ИЗ
		|	ЗаказыМатериаловВПроизводство КАК ЗаказыМатериаловВПроизводство
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыМатериаловВПроизводство.Номенклатура,
		|	ЗаказыМатериаловВПроизводство.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заказы.Распоряжение            КАК Распоряжение,
		|	Заказы.Номенклатура            КАК Номенклатура,
		|	Заказы.Характеристика          КАК Характеристика,
		|	Заказы.Назначение              КАК Назначение,
		|	Заказы.НазначениеОтправителя   КАК НазначениеОтправителя,
		|	Заказы.КодСтроки               КАК КодСтроки,
		|	Заказы.КОформлениюОстаток      КАК КОформлениюОстаток,
		|	0                              КАК Распределено,
		|	ДублиТоваров.КоличествоДублей  КАК КоличествоДублей
		|ИЗ
		|	ЗаказыМатериаловВПроизводство КАК Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДублиТоваров КАК ДублиТоваров
		|		ПО Заказы.Номенклатура = ДублиТоваров.Номенклатура
		|			И Заказы.Характеристика = ДублиТоваров.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство.Товары КАК ЗаказМатериаловТовары
		|		ПО (ЗаказМатериаловТовары.Ссылка = Заказы.Распоряжение)
		|			И (ЗаказМатериаловТовары.КодСтроки = Заказы.КодСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ЭтапОбеспечение
		|		ПО (ЭтапОбеспечение.Ссылка = Заказы.Распоряжение)
		|			И (ЭтапОбеспечение.КодСтроки = Заказы.КодСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Распоряжение";
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.Номенклатура    КАК Номенклатура,
		|	Товары.Характеристика  КАК Характеристика
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.КодСтроки = 0
		|	И Товары.Распоряжение В(&ПустыеЗначенияЗаказов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЗаказы.Распоряжение          КАК Распоряжение,
		|	ТаблицаЗаказы.Номенклатура          КАК Номенклатура,
		|	ТаблицаЗаказы.Характеристика        КАК Характеристика,
		|	ТаблицаЗаказы.Назначение            КАК Назначение,
		|	ТаблицаЗаказы.НазначениеОтправителя КАК НазначениеОтправителя,
		|	ТаблицаЗаказы.КодСтроки             КАК КодСтроки,
		|	СУММА(ТаблицаЗаказы.КОформлению)    КАК КОформлениюОстаток
		|ПОМЕСТИТЬ РаспоряженияНаПередачуИзПроизводства
		|ИЗ
		|	(ВЫБРАТЬ
		|		Заказы.Распоряжение          КАК Распоряжение,
		|		Заказы.Номенклатура          КАК Номенклатура,
		|		Заказы.Характеристика        КАК Характеристика,
		|		Заказы.Назначение            КАК Назначение,
		|		Заказы.НазначениеОтправителя КАК НазначениеОтправителя,
		|		Заказы.КодСтроки             КАК КодСтроки,
		|		Заказы.КоличествоОстаток     КАК КОформлению
		|	ИЗ
		|		РегистрНакопления.РаспоряженияНаПередачуИзПроизводства.Остатки(
		|				,
		|				Отправитель = &Отправитель
		|					И Получатель = &Получатель
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							Товары.Номенклатура КАК Номенклатура,
		|							Товары.Характеристика КАК Характеристика
		|						ИЗ
		|							Товары КАК Товары)) КАК Заказы
		|	ГДЕ
		|		Заказы.Распоряжение.Организация = &Организация
		|		//ДопУсловияЗапросОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказыДвижения.Распоряжение,
		|		ЗаказыДвижения.Номенклатура,
		|		ЗаказыДвижения.Характеристика,
		|		ЗаказыДвижения.Назначение,
		|		ЗаказыДвижения.НазначениеОтправителя,
		|		ЗаказыДвижения.КодСтроки,
		|		ВЫБОР
		|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЗаказыДвижения.Количество
		|			ИНАЧЕ ЗаказыДвижения.Количество
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.РаспоряженияНаПередачуИзПроизводства КАК ЗаказыДвижения
		|	ГДЕ
		|		ЗаказыДвижения.Регистратор = &Регистратор
		|		И ЗаказыДвижения.Получатель = &Получатель
		|		И ЗаказыДвижения.Отправитель = &Отправитель
		|		И ЗаказыДвижения.Распоряжение.Организация = &Организация
		|		И ЗаказыДвижения.Активность
		|		И (ЗаказыДвижения.Номенклатура, ЗаказыДвижения.Характеристика) В
		|				(ВЫБРАТЬ
		|					Товары.Номенклатура КАК Номенклатура,
		|					Товары.Характеристика КАК Характеристика
		|				ИЗ
		|					Товары КАК Товары)
		|		//ДопУсловияЗапросДвижения
		|		) КАК ТаблицаЗаказы
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказы.Номенклатура,
		|	ТаблицаЗаказы.Характеристика,
		|	ТаблицаЗаказы.Назначение,
		|	ТаблицаЗаказы.НазначениеОтправителя,
		|	ТаблицаЗаказы.КодСтроки,
		|	ТаблицаЗаказы.Распоряжение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаЗаказы.КОформлению) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*)                                        КАК КоличествоДублей,
		|	РаспоряженияНаПередачуИзПроизводства.Номенклатура    КАК Номенклатура,
		|	РаспоряженияНаПередачуИзПроизводства.Характеристика  КАК Характеристика
		|ПОМЕСТИТЬ ДублиТоваров
		|ИЗ
		|	РаспоряженияНаПередачуИзПроизводства КАК РаспоряженияНаПередачуИзПроизводства
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияНаПередачуИзПроизводства.Номенклатура,
		|	РаспоряженияНаПередачуИзПроизводства.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заказы.Распоряжение            КАК Распоряжение,
		|	Заказы.Номенклатура            КАК Номенклатура,
		|	Заказы.Характеристика          КАК Характеристика,
		|	Заказы.Назначение              КАК Назначение,
		|	Заказы.НазначениеОтправителя   КАК НазначениеОтправителя,
		|	Заказы.КодСтроки               КАК КодСтроки,
		|	Заказы.КОформлениюОстаток      КАК КОформлениюОстаток,
		|	0                              КАК Распределено,
		|	ДублиТоваров.КоличествоДублей  КАК КоличествоДублей
		|ИЗ
		|	РаспоряженияНаПередачуИзПроизводства КАК Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДублиТоваров КАК ДублиТоваров
		|		ПО Заказы.Номенклатура = ДублиТоваров.Номенклатура
		|			И Заказы.Характеристика = ДублиТоваров.Характеристика
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Распоряжение";
	Иначе
		Возврат;
	КонецЕсли;
	
	ДопУсловияЗапросОстатки = "";
	ДопУсловияЗапросДвижения = "";
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство Тогда
		ДопУсловияЗапросОстатки = "И Заказы.Распоряжение ССЫЛКА Документ.ЭтапПроизводства2_2";
		ДопУсловияЗапросДвижения = "И ЗаказыДвижения.Распоряжение ССЫЛКА Документ.ЭтапПроизводства2_2";
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		ДопУсловияЗапросОстатки = "И Заказы.Распоряжение ССЫЛКА Документ.ЗаказМатериаловВПроизводство";
		ДопУсловияЗапросДвижения = "И ЗаказыДвижения.Распоряжение ССЫЛКА Документ.ЗаказМатериаловВПроизводство";
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства Тогда
		ДопУсловияЗапросОстатки = "И Заказы.Операция = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства)";
		ДопУсловияЗапросДвижения = "И ЗаказыДвижения.Операция = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства)";
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства Тогда
		ДопУсловияЗапросОстатки = "И Заказы.Операция = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства)";
		ДопУсловияЗапросДвижения = "И ЗаказыДвижения.Операция = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства)";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДопУсловияЗапросОстатки", ДопУсловияЗапросОстатки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДопУсловияЗапросДвижения", ДопУсловияЗапросДвижения);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Заказ",                 Объект.Распоряжение);
	Запрос.УстановитьПараметр("Организация",           Объект.Организация);
	Запрос.УстановитьПараметр("Отправитель",           Объект.Отправитель);
	Запрос.УстановитьПараметр("Получатель",            Объект.Получатель);
	Запрос.УстановитьПараметр("Регистратор",           Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустыеЗначенияЗаказов", Документы.ДвижениеПродукцииИМатериалов.ПустыеЗначенияЗаказов());
	
	Запрос.УстановитьПараметр("Товары",  Объект.Товары.Выгрузить(,"КодСтроки,Номенклатура,Характеристика,Распоряжение"));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	
	ТаблицаНераспределенныхТоваров = Новый ТаблицаЗначений();
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Характеристика");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Распоряжение");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("КодСтроки");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Количество");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Назначение");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("НазначениеОтправителя");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("КодСтроки",      0);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		НераспределенноеКоличество = Выборка.КОформлениюОстаток;
		
		// Если дублей нет, распределяем строку заказа по строкам накладной
		Если Выборка.КоличествоДублей < 2 Тогда
		
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,Распоряжение,Назначение,НазначениеОтправителя");
				НераспределенноеКоличество = НераспределенноеКоличество - ТекСтрока.Количество;
				Если НераспределенноеКоличество <= 0 Тогда
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
		// Если дубли есть, распределяем строки заказов по строкам накладной с учетом количества
		Иначе
			
			// На первом проходе заполним только если количество в строке заказа и накладной совпадают
			
			НайденаПодходящаяСтрока = Ложь;
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ТекСтрока.Количество = Выборка.КОформлениюОстаток Тогда
					
					НайденаПодходящаяСтрока = Истина;
					ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,Распоряжение,Назначение,НазначениеОтправителя");
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не НайденаПодходящаяСтрока Тогда
				
				НоваяСтрока = ТаблицаНераспределенныхТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = НераспределенноеКоличество;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределим дубли товаров, нераспределенные на первом проходе
	Если ТаблицаНераспределенныхТоваров.Количество() > 0 Тогда
	
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("КодСтроки", 0);
		СтруктураПоиска.Вставить("Распоряжение", Неопределено);
		
		СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТовары Из СтрокиТовары Цикл
			
			// Найдем нужные строки в таблице нераспределенных товаров
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТовары.Характеристика);
			
			НайденныеСтроки = ТаблицаНераспределенныхТоваров.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ТекСтрока.Номенклатура = СтрокаТовары.Номенклатура
					И ТекСтрока.Характеристика = СтрокаТовары.Характеристика
					И ТекСтрока.Количество > 0 Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокаТовары, ТекСтрока, "КодСтроки,Распоряжение,Назначение,НазначениеОтправителя");
					
					// Уменьшим нераспределенное количество в таблице
					ТекСтрока.Количество = ТекСтрока.Количество - СтрокаТовары.Количество;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПослеИзмененияСтрокПрограммноНаСервере(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	Если НЕ ДоступенВыборПоРаспоряжению(Объект, УправлениеПредприятием) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновления = ЗаказыСервер.ПараметрыОбновленияИнформацииПоЗаказамВФорме();
	
	ПараметрыОбновления.ИмяРеквизитаСписокЗаказов         = "СписокРаспоряжений";
	ПараметрыОбновления.ПутьЗаказаВШапке                  = "Объект.Распоряжение";
	ПараметрыОбновления.ИмяНадписиЗаголовка               = "НадписьРаспоряжения";
	ПараметрыОбновления.ИмяГруппыКолонокВТабличнойЧасти   = "ТоварыГруппаРаспоряжение";
	ПараметрыОбновления.ИмяЗаказаВТабличнойЧасти          = "Распоряжение";
	ПараметрыОбновления.ИспользоватьЗаказыВТабличнойЧасти = Истина;
	ПараметрыОбновления.НадписьВсегоЗаказов               = НСтр("ru = 'Всего распоряжений'");
	
	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(ЭтаФорма, Объект.Товары, ПараметрыОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОРезультатахЗаполнения()
	
	Если РезультатыЗаполнения <> Неопределено Тогда
		
		Если РезультатыЗаполнения.ЕстьНесобранные Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Количество перезаполнено'"),,
				НСтр("ru='В строках перезаполнено количество с учетом собирающихся на складе товаров.'"),
				БиблиотекаКартинок.Информация32);
			
		Иначе
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Количество перезаполнено'"),,
				НСтр("ru='В строках перезаполнено количество.'"),
			БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтклоненияОтРаспоряжений

&НаСервере
Процедура ОбновитьИнформациюОбОтклоненииОтРаспоряженийСервер()
	
	Если НЕ ДоступенВыборПоРаспоряжению(Объект, УправлениеПредприятием) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 
		ИЛИ НЕ Объект.ПоРаспоряжениям Тогда
		
		Элементы.КартинкаРасхождение1.Картинка = Новый Картинка();
		Элементы.КартинкаРасхождение2.Картинка = Новый Картинка();
		НадписьРасхождение = "";
		
	Иначе
	
		ОбновитьИнформациюОбОтклоненииОтРаспоряжений(
			Объект.Товары,
			НадписьРасхождение,
			Элементы.КартинкаРасхождение1, 
			Элементы.КартинкаРасхождение2);
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИнформациюОбОтклоненииОтРаспоряжений(Товары, НадписьРасхождение, КартинкаРасхождениеЗаказ, КартинкаРасхождениеЗаказы)
	
	КоличествоРасхождений = Товары.Итог("РасхождениеЗаказ");
	
	Если КоличествоРасхождений > 0 Тогда
		КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		НадписьРасхождение = СтрЗаменить(НСтр("ru='Строк сверх распоряжения: %КоличествоРасхождений%'"), "%КоличествоРасхождений%", КоличествоРасхождений);
	Иначе
		КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
		КартинкаРасхождениеЗаказы.Картинка = Новый Картинка();
		НадписьРасхождение = "";
		КоличествоРасхождений = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтработанныхСтрок, СтрокиОтвязаны = Истина)

	Если СтрокиОтвязаны Тогда
		
		ТекстОповещения = НСтр("ru='В документе от распоряжений отвязано строк (%%Количество%%).'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Количество%%", КоличествоОтработанныхСтрок);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки отвязаны'"),
			,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32);
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отвязаны'"),
			,
			НСтр("ru='Ни одна строка не была отвязана.'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтклоненияОтРаспоряжения()
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ОбновитьОтклоненияОтРаспоряженияВСтроке(ТекущаяСтрока, Объект.ПоРаспоряжениям, Объект.ХозяйственнаяОперация);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтРаспоряженияВСтроке(ТекущаяСтрока, ПоРаспоряжениям, ХозОперация)
	
	Если ХозОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую")
		И ПоРаспоряжениям
		И ТекущаяСтрока.КодСтроки = 0 Тогда
		ТекущаяСтрока.РасхождениеЗаказ = 1;
	Иначе
		ТекущаяСтрока.РасхождениеЗаказ = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНачатаОтгрузка()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		НачатаОтгрузка = НакладныеСервер.ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(Объект.Ссылка);
	Иначе
		НачатаОтгрузка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

&НаСервере
Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище)
	
	ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
		Объект.Товары,
		Объект.ВидыЗапасов,
		УникальныйИдентификатор,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище);
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВидовЗапасовВХранилище)
	
	Объект.ВидыЗапасов.Загрузить(ПолучитьИзВременногоХранилища(АдресВидовЗапасовВХранилище));
	
КонецПроцедуры

#КонецОбласти

#Область Тара

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийИзмененныеСтроки);
		
	ПослеИзмененияСтрокПрограммноНаСервере(Истина, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ЕстьСтрокиПривязанныеКЗаказу()
	
	Для каждого Строка Из Объект.Товары Цикл
		Если Строка.КодСтроки <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьУсловноеОформление();
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	УправлениеПредприятием = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	ХозОперацияДоИзменения = Объект.ХозяйственнаяОперация;
	ОтправительДоИзменения = Объект.Отправитель;
	
	ОпределитьНаличиеОрдернойСхемы();
	
	УстановитьИспользованиеПлановойСтоимости();
	
	ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ДвижениеПродукцииИМатериалов));
	УстановитьВидимостьЭлементовСерий();
	
	ОпределитьНачатаОтгрузка();
	
	ОбновитьИнформациюПоЗаказам();
	
	АктуализироватьНалогообложениеНДС();
	НастроитьЗависимыеЭлементыФормы();
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
	ОбновитьИнформациюОбОтклоненииОтРаспоряжений(
		Объект.Товары,
		НадписьРасхождение, 
		Элементы.КартинкаРасхождение1,
		Элементы.КартинкаРасхождение2);
		
	// ИнтеграцияГИСМ
	СформироватьНадписьМаркировкаПродукции();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Стандартное оформление
	#Область СтандартноеОформление
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма);	
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства Тогда
		НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Ложь);
	Иначе
		НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииПриПланированииОтгрузкиУказываютсяВТЧТовары");
	КонецЕсли;
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь);
	#КонецОбласти
	
	// Проверка заполнения поля Распоряжение
	#Область ТоварыРаспоряжениеОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРаспоряжение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоРаспоряжениям");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Распоряжение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Распоряжение не заполнено'"));
	#КонецОбласти
	
	#Область ТоварыРаспоряжениеТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРаспоряжение.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Распоряжение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРаспоряжение.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Распоряжение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Видимость поля Распоряжение
	#Область ТоварыРаспоряжениеВидимость
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОперацииБезРаспоряжений = Новый СписокЗначений();
	ОперацииБезРаспоряжений.Добавить(Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой);
	ОперацииБезРаспоряжений.Добавить(Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой);
	ОперацииБезРаспоряжений.Добавить(Перечисления.ХозяйственныеОперации.ПеремещениеВПроизводстве);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРаспоряжение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ОперацииБезРаспоряжений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	// Текст "Сверх распоряжения, распоряжение не выбрано" в поле Распоряжение для операции "Передача материалов в кладовую",
	// когда взведен флаг "По распоряжениям".
	#Область ТоварыРаспоряжениеТекст
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРаспоряжение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоРаспоряжениям");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Распоряжение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Распоряжение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сверх распоряжения, распоряжение не выбрано'"));
	#КонецОбласти
	
	// ОтметкаНезаполненного для поля ПотреблениеДляДеятельности
	#Область ПотреблениеДляДеятельностиОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалогообложениеНДС.Имя);
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = МассивОпераций;
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетНДСПоФактИспользованию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВсеСтатьиРаспределяются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
		
	// Текст "<без назначения>"
	#Область ТоварыНазначениеТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНазначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.РасхождениеЗаказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоРаспоряжениям");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без назначения>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	#КонецОбласти
	
	// Запрет редактирования назначения
	#Область ТоварыНазначениеТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНазначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоРаспоряжениям");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Видимость полей плановой стоимости
	#Область ПлановаяСтоимость
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПлановуюСтоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормы(СписокРеквизитов = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(СписокРеквизитов);
	
	ПредставлениеПолей = Новый ФиксированнаяСтруктура(Документы.ДвижениеПродукцииИМатериалов.ПредставлениеПолей(Объект));
	
	УстановитьВидимостьПриИзмененииРеквизитов(СтруктураИзмененныхРеквизитов);
	УстановитьЗаголовкиПриИзмененииРеквизитов(СтруктураИзмененныхРеквизитов);
	УстановитьПрочиеСвойстваПриИзмененииРеквизитов(СтруктураИзмененныхРеквизитов);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПриИзмененииРеквизитов(СтруктураИзмененныхРеквизитов)

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	ВсеРеквизиты = (СтруктураИзмененныхРеквизитов.Количество() = 0); 
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПоРаспоряжениям") 
		Или СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		Или ВсеРеквизиты Тогда
		ДоступныСтрокиСверхЗаказа = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
		// КОМАНДЫ ТАБЛИЧНОЙ ЧАСТИ
		// Нужно скрыть все команды которые могут добавить строки не привязанные к этапу
		Элементы.ТоварыОтвязатьОтЗаказа.Видимость              = Объект.ПоРаспоряжениям И ДоступныСтрокиСверхЗаказа;
		Элементы.ТоварыВставитьСтроки.Видимость                = Не Объект.ПоРаспоряжениям Или ДоступныСтрокиСверхЗаказа;
		Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Видимость = Не Объект.ПоРаспоряжениям Или ДоступныСтрокиСверхЗаказа;
		Элементы.ТоварыПоискПоШтрихкоду.Видимость              = Не Объект.ПоРаспоряжениям Или ДоступныСтрокиСверхЗаказа;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость          = Не Объект.ПоРаспоряжениям Или ДоступныСтрокиСверхЗаказа;
		Элементы.ТоварыПодобратьТовары.Видимость               = Не Объект.ПоРаспоряжениям Или ДоступныСтрокиСверхЗаказа;
		Элементы.ТоварыДополнитьМногооборотнойТарой.Видимость  = Не Объект.ПоРаспоряжениям Или ДоступныСтрокиСверхЗаказа;
		Элементы.ТоварыЗаполнитьСерииПоFEFO.Видимость          = Не Объект.ПоРаспоряжениям Или ДоступныСтрокиСверхЗаказа;
		Элементы.ТоварыИзменитьКачество.Видимость              = Не Объект.ПоРаспоряжениям Или ДоступныСтрокиСверхЗаказа;
		
		// ЭЛЕМЕНТЫ ТАБЛИЧНОЙ ЧАСТИ
		Элементы.ТоварыНазначение.Видимость = ПредставлениеПолей.ТипПолучателя <> "Подразделение";
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПоРаспоряжениям") ИЛИ ВсеРеквизиты Тогда
		// ЭЛЕМЕНТЫ ТАБЛИЧНОЙ ЧАСТИ
		Элементы.ТоварыКодСтроки.Видимость = Объект.ПоРаспоряжениям;
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		Или СтруктураИзмененныхРеквизитов.Свойство("ИспользоватьПлановуюСтоимость")
		Или ВсеРеквизиты Тогда
		
		Элементы.ВидЦены.Видимость = (
			ИспользоватьПлановуюСтоимость
				И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
					Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой)
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") ИЛИ ВсеРеквизиты Тогда
		
		Если НЕ ИспользоватьНесколькоСкладов Тогда
			Элементы.Отправитель.Видимость = (ПредставлениеПолей.ТипОтправителя = "Подразделение");
			Элементы.Получатель.Видимость = (ПредставлениеПолей.ТипПолучателя = "Подразделение");
		КонецЕсли;
		
		Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
			Объект.ХозяйственнаяОперация, 
			МассивВсехРеквизитов, 
			МассивРеквизитовОперации);
			
		ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
			Элементы,
			МассивВсехРеквизитов,
			МассивРеквизитовОперации);
		
		// КОМАНДЫ ВВОДА НА ОСНОВАНИИ
		Если НЕ ВсеРеквизиты Тогда
			УстановитьВидимостьКомандВводаНаОсновании();
		КонецЕсли;
		
		// КОМАНДЫ ТАБЛИЧНОЙ ЧАСТИ
		
		Элементы.ОкруглитьДоЦелойУпаковки.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
													Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
		
		Элементы.ТоварыПодобратьТоварыПоЗаказамОрдерам.Видимость = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
																	Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
																	Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
																	Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;
																	
		Элементы.ТоварыЗаполнитьРаспоряжения.Видимость			 = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
																	Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
																	Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
																	Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		Элементы.ПоРаспоряжению.Видимость  = Истина;
		Элементы.ПоРаспоряжениям.Видимость = Истина;
		
		Элементы.Распоряжение.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.НадписьРаспоряжения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		Элементы.ПоРаспоряжению.Видимость  = Ложь;
		Элементы.ПоРаспоряжениям.Видимость = Ложь;
		
		Элементы.Распоряжение.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.НадписьРаспоряжения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Распоряжение) И СписокРаспоряжений.Количество() = 0 Тогда
		Элементы.ЗакрытьЗаказ.Видимость = Ложь;
		Элементы.ЗакрытьЗаказы.Видимость = Ложь;
	Иначе
		Элементы.ЗакрытьЗаказ.Видимость = Истина;
		Элементы.ЗакрытьЗаказы.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиПриИзмененииРеквизитов(СтруктураИзмененныхРеквизитов)

	ВсеРеквизиты = (СтруктураИзмененныхРеквизитов.Количество() = 0); 
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПоРаспоряжениям") 
		ИЛИ ВсеРеквизиты  Тогда
		
		Элементы.Отправитель.Заголовок = ПредставлениеПолей.Отправитель;
		Элементы.Получатель.Заголовок = ПредставлениеПолей.Получатель;
		Элементы.Отправитель.Подсказка = ПредставлениеПолей.ОтправительПодсказка;
		Элементы.Получатель.Подсказка = ПредставлениеПолей.ПолучательПодсказка;
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") ИЛИ ВсеРеквизиты  Тогда
		
		//
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой Тогда
			НалогообложениеНДСЗаголовок = НСтр("ru = 'Выпуск под деятельность'");
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
			НалогообложениеНДСЗаголовок = НСтр("ru = 'Потребление для деятельности'");
		Иначе
			НалогообложениеНДСЗаголовок = Элементы.НалогообложениеНДС.Заголовок;
		КонецЕсли;
		Элементы.НалогообложениеНДС.Заголовок = НалогообложениеНДСЗаголовок;
		
		//
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой Тогда
			Элементы.ТоварыПодобратьТовары.Заголовок = НСтр("ru = 'Подобрать продукцию'");
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой Тогда
			Элементы.ТоварыПодобратьТовары.Заголовок = НСтр("ru = 'Подобрать материалы'");
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
			Элементы.ТоварыПодобратьТовары.Заголовок = НСтр("ru = 'Подобрать материалы'");
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеВПроизводстве Тогда
			Элементы.ТоварыПодобратьТовары.Заголовок = НСтр("ru = 'Подобрать материалы'");
		КонецЕсли;

		//
		Элементы.ГруппаТовары.Заголовок = ПредставлениеПолей.Товары;
		
		ОбновитьЗаголовокФормы();
		
	КонецЕсли;
	
	ЗаголовокКоманды = Неопределено;
	Если (СтруктураИзмененныхРеквизитов.Свойство("Отправитель") ИЛИ ВсеРеквизиты)
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую) Тогда
		Если ОрдернаяСхема Тогда
			ЗаголовокКоманды = НСтр("ru = 'Подобрать по распоряжениям/ордерам'");
		Иначе
			ЗаголовокКоманды = НСтр("ru = 'Подобрать по распоряжениям'");
		КонецЕсли; 
	ИначеЕсли (СтруктураИзмененныхРеквизитов.Свойство("Получатель") ИЛИ ВсеРеквизиты)
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой)Тогда
		Если ОрдернаяСхема Тогда
			ЗаголовокКоманды = НСтр("ru = 'Подобрать по распоряжениям/ордерам'");
		Иначе
			ЗаголовокКоманды = НСтр("ru = 'Подобрать по распоряжениям'");
		КонецЕсли; 
	КонецЕсли; 
	Если ЗаголовокКоманды <> Неопределено Тогда
		Элементы.ТоварыПодобратьТоварыПоЗаказамОрдерам.Заголовок = ЗаголовокКоманды;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПрочиеСвойстваПриИзмененииРеквизитов(СтруктураИзмененныхРеквизитов)

	ВсеРеквизиты = (СтруктураИзмененныхРеквизитов.Количество() = 0); 
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПоРаспоряжениям")
		ИЛИ ВсеРеквизиты Тогда
		
		Если ПредставлениеПолей.ТипОтправителя = "Склад" ИЛИ ПредставлениеПолей.ТипОтправителя = "Кладовая" Тогда
			Элементы.Отправитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Иначе
			Элементы.Отправитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		КонецЕсли; 
		Если ПредставлениеПолей.ТипПолучателя = "Склад" ИЛИ ПредставлениеПолей.ТипПолучателя = "Кладовая" Тогда
			Элементы.Получатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Иначе
			Элементы.Получатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
			Элементы.ТоварыРаспоряжение.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗаказМатериаловВПроизводство");
		Иначе
			Элементы.ТоварыРаспоряжение.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
		КонецЕсли;
		
		// Параметры выбора - НаправлениеДеятельности
		МассивПараметровВыбора = Новый Массив;
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой Тогда
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.УчетЗатрат", Истина));
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыНаправленияДеятельности.Используется));
		КонецЕсли;
		Элементы.НаправлениеДеятельности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		// Параметры выбора - Отправитель
		МассивПараметровВыбора = Новый Массив;
		Если ПредставлениеПолей.ТипОтправителя = "Склад" Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Перечисления.ТипыСкладов.ОптовыйСклад);
			МассивТипов.Добавить(Перечисления.ТипыСкладов.РозничныйМагазин);
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипСклада", Новый ФиксированныйМассив(МассивТипов)));
		ИначеЕсли ПредставлениеПолей.ТипОтправителя = "Кладовая" Тогда
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЦеховаяКладовая", Истина));
		ИначеЕсли ПредставлениеПолей.ТипОтправителя = "Подразделение" Тогда
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПроизводственноеПодразделение", Истина));
		КонецЕсли; 
		Элементы.Отправитель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		// Параметры выбора - Получатель
		МассивПараметровВыбора = Новый Массив;
		Если ПредставлениеПолей.ТипПолучателя = "Склад" Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Перечисления.ТипыСкладов.ОптовыйСклад);
			МассивТипов.Добавить(Перечисления.ТипыСкладов.РозничныйМагазин);
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипСклада", Новый ФиксированныйМассив(МассивТипов)));
		ИначеЕсли ПредставлениеПолей.ТипПолучателя = "Кладовая" Тогда
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЦеховаяКладовая", Истина));
		ИначеЕсли ПредставлениеПолей.ТипПолучателя = "Подразделение" Тогда
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПроизводственноеПодразделение", Истина));
		КонецЕсли; 
		Элементы.Получатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		//
		ДоступенВыборПоРаспоряжению = ДоступенВыборПоРаспоряжению(Объект, УправлениеПредприятием);
		Если ДоступенВыборПоРаспоряжению И СписокРаспоряжений.Количество() > 1 Тогда
			Элементы.СтраницыЗаказ.ТекущаяСтраница = Элементы.СтраницаЗаказы;
		ИначеЕсли ДоступенВыборПоРаспоряжению Тогда
			Элементы.СтраницыЗаказ.ТекущаяСтраница = Элементы.СтраницаЗаказ;
		Иначе
			Элементы.СтраницыЗаказ.ТекущаяСтраница = Элементы.СтраницаБезРаспоряжений;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура АктуализироватьНалогообложениеНДС(ИмяРеквизита = "")
	
	// Реквизиты, при изменении которых требуется перезаполнить НалогообложениеНДС
	Реквизиты = Новый Структура("Организация, Дата, ХозяйственнаяОперация");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		
		Если ИмяРеквизита <> "" И Реквизиты.Свойство(ИмяРеквизита) Тогда
			Объект.НалогообложениеНДС = Документы.ДвижениеПродукцииИМатериалов.НалогообложениеНДС(Объект);
		КонецЕсли;
		
		УчетНДСУТ.ЗаполнитьСписокВыбораДеятельностиНДСПотребления(
			Элементы.НалогообложениеНДС,
			Объект.Организация,
			Объект.Дата,
			Объект.ХозяйственнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандВводаНаОсновании()

	ВидимостьКоманды = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
						Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
						Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
						Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой;
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "Документ.ПриходныйОрдерНаТовары", ВидимостьКоманды);
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "Документ.УстановкаЦенНоменклатуры", ВидимостьКоманды);
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "ОпределитьСправочноеРазмещениеПоЯчейкам", ВидимостьКоманды);
	
	ВидимостьКоманды = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "СоздатьНаОснованииРасходныйОрдерНаТовары", ВидимостьКоманды);
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "СоздатьНаОснованииВозвратМатериалов", ВидимостьКоманды);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Шаблон = НСтр("ru='%1 %2 от %3'");
	Иначе
		Шаблон = НСтр("ru='%1 (создание)'");
	КонецЕсли;
	ПредставлениеОперации = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций().НайтиПоЗначению(Объект.ХозяйственнаяОперация);
	Если ПредставлениеОперации <> Неопределено Тогда
		ПредставлениеОперации = ПредставлениеОперации.Представление;
	Иначе
		ПредставлениеОперации = Объект.ХозяйственнаяОперация;
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон, ПредставлениеОперации, Объект.Номер, Объект.Дата);

КонецПроцедуры

&НаСервере
Процедура ОбновитьУчетНДСПоФактическомуИспользованию()
	
	ТекущаяДеятельность = Справочники.Организации.ЗакупкаПодДеятельность(
		Объект.Организация,
		Объект.Отправитель,
		Объект.Дата);
	
	УчетНДСПоФактИспользованию = (ТекущаяДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ПредставлениеПолей)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(ПредставлениеПолей));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, СтруктураДействий)

	Если ТекущаяСтрока <> Неопределено Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	Иначе
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу");
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(Форма.ПредставлениеПолей));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
	ПараметрыПроверкиСерий.Склад = Новый Структура("Отправитель, Получатель", Форма.Объект.Отправитель, Форма.Объект.Получатель);
	ПараметрыПроверкиСерий.ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		Форма.ИмяФормы, "Товары"));
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(Форма, СтруктураДействий);
	ОбеспечениеКлиентСервер.СтруктураДействийВставитьПриИзмененииНазначения(СтруктураДействий);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПересчетаКоличестваЕдиниц(ПредставлениеПолей)

	Если ПредставлениеПолей.ТипОтправителя <> "Склад" И ПредставлениеПолей.ТипПолучателя <> "Склад" Тогда
		Возврат Новый Структура("НужноОкруглять", Ложь);
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличнойЧасти()
	
	ОбновитьОтклоненияОтРаспоряжения();
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОпераций()
	
	Элементы.ХозяйственнаяОперация.СписокВыбора.Очистить();
	СписокОпераций = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
	Для каждого ЭлементКоллекции Из СписокОпераций Цикл
		Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(ЭлементКоллекции.Значение, ЭлементКоллекции.Представление);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

// Процедуру следует использовать, если строки были добавлены программно (не интерактивно), например, при вставке из буфера, при подборе из заказов.
// Процедура выполняет действия которые зависят от данных в строках
//
&НаСервере
Процедура ПослеИзмененияСтрокПрограммноНаСервере(ЗаполнитьСлужебныеРеквизиты = Ложь, ЗаполнитьСтатусыУказанияСерий = Истина)

	Если ЗаполнитьСтатусыУказанияСерий Тогда
		ЗаполнитьСтатусыУказанияСерийСервер();
	КонецЕсли;
	
	ИзмененныеРеквизиты = "";
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую
		И Не Объект.ПоРаспоряжениям Тогда
		
		УказаноРаспоряжение = Ложь;
		Для Каждого Строка Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(Строка.Распоряжение) Тогда
				УказаноРаспоряжение = Истина;
				ИзмененныеРеквизиты = "ПоРаспоряжениям";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Объект.ПоРаспоряжениям = УказаноРаспоряжение;

	КонецЕсли;
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ОбновитьОтклоненияОтРаспоряжения();
	ОбновитьИнформациюПоЗаказам();
	ОбновитьИнформациюОбОтклоненииОтРаспоряженийСервер();
	
	Если ЗаполнитьСлужебныеРеквизиты Тогда
		ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИзмененныеРеквизиты) Тогда
		НастроитьЗависимыеЭлементыФормы(ИзмененныеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДобавленнуюПрограммноСтроку(ТекущаяСтрока, КэшированныеЗначения, ПересчитатьКоличествоЕдиниц = Ложь)
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ЭтаФорма, ТекущаяСтрока, СтруктураДействий);
	
	СтруктураДействий.Удалить("ПроверитьСериюРассчитатьСтатус"); // это действие можно выполнять только при интерактивном редактировании
	
	Если НЕ ПересчитатьКоличествоЕдиниц Тогда
		СтруктураДействий.Удалить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую
		И Объект.ПоРаспоряжениям
		И ТекущаяСтрока.КодСтроки = 0 Тогда
		ТекущаяСтрока.РасхождениеЗаказ = 1;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Перем КэшированныеЗначения;
	
	СтрокиТЧ = НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
	СтруктураДействий = Новый Структура();
	ОбеспечениеКлиентСервер.СтруктураДействийВставитьПриИзмененииНазначения(СтруктураДействий);
	Для Каждого ТекущаяСтрока Из СтрокиТЧ Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступенВыборПоРаспоряжению(Объект, УправлениеПредприятием)

	Возврат УправлениеПредприятием
			И (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство")
				Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую")
				Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства")
				Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства"));

КонецФункции

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	ЗаполнитьСтатусыУказанияСерийСервер(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеОрдернойСхемы()

	ОрдернаяСхема = Ложь;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		ОрдернаяСхема = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Объект.Отправитель, Объект.Дата);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой Тогда
		ОрдернаяСхема = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.Получатель, Объект.Дата);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьДоЦелойУпаковкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОкруглитьДоЦелойУпаковкиНаСервере(КэшированныеЗначения);
	ТекстОповещения = НСтр("ru = 'В выбранных строках выполнено округление до целых единиц.'");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Выполнено округление'"),, ТекстОповещения, БиблиотекаКартинок.Успешно32);
	
КонецПроцедуры

&НаСервере
Процедура ОкруглитьДоЦелойУпаковкиНаСервере(КэшированныеЗначения)

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ПредставлениеПолей);
	
	Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Цел(ДанныеСтроки.КоличествоУпаковок) = ДанныеСтроки.КоличествоУпаковок Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСтроки.КоличествоУпаковок = Цел(ДанныеСтроки.КоличествоУпаковок) + 1;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;

	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеПлановойСтоимости()
	
	НоваяИспользоватьПлановуюСтоимость = Справочники.УчетныеПолитикиОрганизаций.ИспользуетсяВыпускПоПлановойСтоимости(
		Объект.Организация, Объект.Дата);
	
	Если ИспользоватьПлановуюСтоимость <> НоваяИспользоватьПлановуюСтоимость Тогда
		ИспользоватьПлановуюСтоимость = НоваяИспользоватьПлановуюСтоимость;
		НастроитьЗависимыеЭлементыФормы("ИспользоватьПлановуюСтоимость");
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаСервере
Процедура СформироватьНадписьМаркировкаПродукции()
	
	Элементы.ТекстМаркировкаТоваров.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой);
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ 
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой) Тогда
		
		Возврат;
	КонецЕсли;
	
	МетаданныеМаркировки = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеМаркировки);
	ПравоЧтения          = ПравоДоступа("Чтение", МетаданныеМаркировки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи = НСтр("ru = 'Оформить маркировку товаров'");
		ИмяКоманды   = "ОформитьМаркировкуТоваров";
	Иначе
		ТекстНадписи = НСтр("ru = 'Маркировка товаров не создана'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МаркировкаТоваровГИСМ.Ссылка,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ КАК МаркировкаТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = МаркировкаТоваровГИСМ.Ссылка)
	|ГДЕ
	|	МаркировкаТоваровГИСМ.Основание = &ОснованиеСсылка
	|	И НЕ МаркировкаТоваровГИСМ.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОснованиеСсылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Маркировка товаров: %1'"), НРег (Строка(Выборка.Статус)));
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	ТекстМаркировкаТоваров = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		ЦветаСтиля.ЦветГиперссылки,
		,
		ИмяКоманды);
	
КонецПроцедуры 
// Конец ИнтеграцияГИСМ

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
&НаКлиенте
Процедура ХозОперацияПриИзмененииЗавершение(РезультатВопроса, ПоРаспоряжениямДоИзменения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ХозяйственнаяОперацияПриИзмененииНаСервере();
		ОтвязатьДокументОтРаспоряжений();
	Иначе
		Объект.ХозяйственнаяОперация = ХозОперацияДоИзменения;
		Объект.ПоРаспоряжениям = ПоРаспоряжениямДоИзменения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьКРаспоряжениям(Команда)
	
	ПривязатьСтрокиКРаспоряжениямНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьСтрокиКРаспоряжениямНаСервере()
	
	ПривязатьСтрокиКРаспоряжениям();
	ПослеИзмененияСтрокПрограммноНаСервере(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Ордера

// Процедура - Перезаполнить по заказам ордерам
//
// Параметры:
//  МассивЗаказов		 - Массив - 
//  ЗаполнятьПоОрдеру	 - Булево - Всегда "Истина" для перезаполнения из рабочих мест.
//
&НаСервере
Процедура ПерезаполнитьПоЗаказамОрдерам(МассивЗаказов, ЗаполнятьПоОрдеру = Истина)
	
	ПараметрыЗаполнения = Документы.ДвижениеПродукцииИМатериалов.ПараметрыЗаполненияДокумента();
	ПараметрыЗаполнения.Вставить("ФормаОткрыта", Истина);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру", ЗаполнятьПоОрдеру);
	
	ТаблицаНакладная = Объект.Товары.Выгрузить();
	
	ДопОтборы = Новый Структура();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		ДопОтборы.Вставить("Склад", Объект.Отправитель);
	Иначе
		ДопОтборы.Вставить("Склад", Объект.Получатель);
	КонецЕсли;
	
	ДопОтборы.Вставить("Получатель",            Объект.Получатель);
	ДопОтборы.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьПоЗаказамОрдерам(ТаблицаНакладная, Объект.Ссылка, МассивЗаказов, ПараметрыЗаполнения, ДопОтборы);
	
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		ТаблицаНакладная.Колонки.Количество.Имя        = "КоличествоДоИзменения";
		ТаблицаНакладная.Колонки.КоличествоВОрдере.Имя = "Количество";
	Иначе
		ТаблицаНакладная.Колонки.Количество.Имя        = "КоличествоДоИзменения";
		ТаблицаНакладная.Колонки.КоличествоВЗаказе.Имя = "Количество";
	КонецЕсли;
	
	НакладныеСервер.УдалитьПустыеСтроки(ТаблицаНакладная, "Количество");
	
	Объект.Товары.Загрузить(ТаблицаНакладная);
	
	// Пересчет поля КоличествоУпаковок
	Документы.ДвижениеПродукцииИМатериалов.ОбновитьЗависимыеРеквизитыТабличнойЧасти(Объект.Товары, ПараметрыЗаполнения);
	
	// Постобработка индивидуальная для документа
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую Тогда
		Документы.ДвижениеПродукцииИМатериалов.ЗаполнитьСерииПоОтгрузке(Объект);
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ОбновитьИнформациюПоЗаказам();
	
	ОбновитьИнформациюОбОтклоненииОтРаспоряжений(
		Объект.Товары,
		НадписьРасхождение, 
		Элементы.КартинкаРасхождение1,
		Элементы.КартинкаРасхождение2);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти
