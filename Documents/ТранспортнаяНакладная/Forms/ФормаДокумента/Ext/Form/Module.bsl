// 4D:ERP для Беларуси
// {
// Форма изменена
// }
// 4D

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ВыводДанныхОТоварномСоставе) Тогда
		
		// 4D:ERP для Беларуси, Дмитрий, 03.12.2015 16:59:30 
		// у нас постоянно выводится товарный состав
		// {
		Объект.ВыводДанныхОТоварномСоставе = Истина;
		// }
		// 4D
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	// 4D:ERP для Беларуси, ВладимирР, 02.03.2016 20:05:21 
	// Серия и номер БСО в накладных, №11113
	// {
	УчетБланковСтрогойОтчетностиСервер.ДобавитьРеквизитыИспользованныеБСО(ЭтаФорма);
	// }
	// 4D
	
	// 4D:ERP для Беларуси, Юлия, 18.12.2017 14:40:45 
	// Документ "Транспортная накладная". Форма Документа, № 16540
	// {
	Объект.ДоверенностьВыдана = Объект.Грузополучатель;
	Объект.ПогрузкаИсполнитель = "Грузоотправитель";
	Объект.РазгрузкаИсполнитель = "Грузополучатель";
	
	СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Грузоотправитель, Объект.Дата, ,);
	
	СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Грузополучатель, Объект.Дата, ,);
	
	Если Не ЗначениеЗаполнено(Объект.АдресПогрузки) Тогда
		СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Грузоотправитель, Объект.Дата, ,);
		Объект.АдресПогрузки = СведенияОГрузоотправителе.ЮридическийАдрес;
		Объект.АдресПогрузкиЗначенияПолей = СведенияОГрузоотправителе.ЮридическийАдресЗначенияПолей;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Грузополучатель, Объект.Дата, ,);
		Объект.АдресДоставки = СведенияОГрузополучателе.ЮридическийАдрес;
		Объект.АдресДоставкиЗначенияПолей = СведенияОГрузополучателе.ЮридическийАдресЗначенияПолей;
	КонецЕсли;
	// }
	// 4D
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриЧтенииСозданииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОчиститьСообщения();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ТранспортнаяНакладная");
	
	// 4D:ERP для Беларуси, ВладимирР, 02.03.2016 20:05:21 
	// Серия и номер БСО в накладных, №11113
	// {
	Для каждого ТЧ Из Объект.ДокументыОснования Цикл
		УчетБланковСтрогойОтчетностиКлиент.ПеречитатьДанныеОткрытойФормы(ТЧ.ДокументОснование);
	КонецЦикла;
	// }
	// 4D
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если Объект.ПометкаУдаления Тогда
		Оповестить("Запись_ТранспортнаяНакладная");
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОбъектОснование) Тогда
		ОснованиеИзменено = (СокрЛП(Объект.Основание) <> СокрЛП(ОбъектОснование));
	Иначе
		ОснованиеИзменено = Ложь;
	КонецЕсли;
	ОбъектОснование = Объект.Основание;
	
	ВыбранныеОснования = ТаблицаОснованийДляПечати.НайтиСтроки(Новый Структура("Основание", СокрЛП(Объект.Основание)));
	Если ВыбранныеОснования.Количество() > 0 Тогда
		ВыбранноеОснование = ВыбранныеОснования.Получить(0);
		ОснованиеНомер = ВыбранноеОснование.ОснованиеНомер;
		ОснованиеДата  = ВыбранноеОснование.ОснованиеДата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНомерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОбъектОснованиеНомер)Тогда
		ОснованиеИзменено = (СокрЛП(Объект.ОснованиеНомер) <> СокрЛП(ОбъектОснованиеНомер));
	Иначе
		ОснованиеИзменено = Ложь;
	КонецЕсли;
	ОбъектОснованиеНомер = Объект.ОснованиеНомер;
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОбъектОснованиеДата) Тогда
		ОснованиеИзменено = (СокрЛП(Объект.ОснованиеДата) <> СокрЛП(ОбъектОснованиеДата));
	Иначе
		ОснованиеИзменено = Ложь;
	КонецЕсли;
	ОбъектОснованиеДата = Объект.ОснованиеДата;
КонецПроцедуры

&НаКлиенте
Процедура ВодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение.Свойство("Водитель", 				Объект.Водитель);
	ВыбранноеЗначение.Свойство("УдостоверениеСерия", 	Объект.УдостоверениеСерия);
	ВыбранноеЗначение.Свойство("УдостоверениеНомер",	Объект.УдостоверениеНомер);
КонецПроцедуры

&НаКлиенте
Процедура ВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ВодительЗаписан = Ложь;	
	Для Каждого ИнформацияВодителя Из Элемент.СписокВыбора Цикл
		Если ИнформацияВодителя.Значение.Водитель = Текст Тогда 
			ВодительЗаписан = Истина
		КонецЕсли;
	КонецЦикла;
	Если Не ВодительЗаписан Тогда
		Объект.УдостоверениеНомер = "";
		Объект.УдостоверениеСерия  = "";
		Объект.Водитель			  = Текст;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильГосударственныйНомерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение.Свойство("АвтомобильМарка",							Объект.АвтомобильМарка);
	ВыбранноеЗначение.Свойство("АвтомобильГосударственныйНомер",			Объект.АвтомобильГосударственныйНомер);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаВид",					Объект.ЛицензионнаяКарточкаВид);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаНомер",					Объект.ЛицензионнаяКарточкаНомер);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаРегистрационныйНомер",	Объект.ЛицензионнаяКарточкаРегистрационныйНомер);
	ВыбранноеЗначение.Свойство("ЛицензионнаяКарточкаСерия",					Объект.ЛицензионнаяКарточкаСерия);
	ВыбранноеЗначение.Свойство("Прицеп",									Объект.Прицеп);
	ВыбранноеЗначение.Свойство("ГосударственныйНомерПрицепа",				Объект.ГосударственныйНомерПрицепа);
	ВыбранноеЗначение.Свойство("ВидПеревозки",								Объект.ВидПеревозки);
	ВыбранноеЗначение.Свойство("АвтомобильВместимостьВКубическихМетрах",	Объект.АвтомобильВместимостьВКубическихМетрах);
	ВыбранноеЗначение.Свойство("АвтомобильГрузоподъемностьВТоннах",			Объект.АвтомобильГрузоподъемностьВТоннах);
	ВыбранноеЗначение.Свойство("АвтомобильТип",								Объект.АвтомобильТип);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	
	ГрузоотправительПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ГрузоотправительПриИзмененииНаСервере()
	
	Документы.ТранспортнаяНакладная.УстановитьСписокВыбораФИОВодителей(Элементы.Водитель, Объект.Грузоотправитель);
	Документы.ТранспортнаяНакладная.УстановитьСписокВыбораТранспортныхСредств(Элементы.АвтомобильГосударственныйНомер, Объект.Грузоотправитель);
	Документы.ТранспортнаяНакладная.УстановитьСписокВыбораТиповТранспортныхСредств(Элементы.АвтомобильТип, Объект.Грузоотправитель);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресПогрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		"АдресПогрузки",
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресПогрузкиПриИзменении(Элемент)
		
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект.АдресПогрузки,
		Объект.АдресПогрузкиЗначенияПолей);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресПогрузкиОчистка(Элемент, СтандартнаяОбработка)
	 АдресПогрузкиПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АдресПогрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	АдресПогрузкиПриИзменении(Элемент);	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
		Элемент,
		Объект.АдресДоставки,
		Объект.АдресДоставкиЗначенияПолей);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		"АдресДоставки",
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	АдресДоставкиПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	АдресДоставкиПриИзменении(Элемент);	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	ЗаполнитьОснованиеДляПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПеревозкиПриИзменении(Элемент)
	
	// 4D:ERP для Беларуси, Дмитрий, 03.12.2015 16:59:30 
	// Заполним основания для печати
	// {
	ЗаполнитьОснованиеДляПечати();
	// }
	// 4D
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикПриИзменении(Элемент)
		
	УстановитьБанковскийСчетПлательщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	УстановитьБанковскийСчетПеревозчика();
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаГрузополучателяПриИзменении(Элемент)
	Объект.БанковскийСчетГрузополучателя = БанковскийСчетКонтрагентаГрузополучателя;
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетОрганизацииГрузополучателяПриИзменении(Элемент)
	Объект.БанковскийСчетГрузополучателя = БанковскийСчетОрганизацииГрузополучателя;
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаЗаказчикаПеревозкиПриИзменении(Элемент)
	Объект.БанковскийСчетЗаказчикаПеревозки = БанковскийСчетКонтрагентаЗаказчикаПеревозки;
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетОрганизацииЗаказчикаПеревозкиПриИзменении(Элемент)
	Объект.БанковскийСчетЗаказчикаПеревозки = БанковскийСчетОрганизацииЗаказчикаПеревозки;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильТипОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбранноеЗначение.Свойство("АвтомобильВместимостьВКубическихМетрах",	Объект.АвтомобильВместимостьВКубическихМетрах);
	ВыбранноеЗначение.Свойство("АвтомобильГрузоподъемностьВТоннах",			Объект.АвтомобильГрузоподъемностьВТоннах);
	ВыбранноеЗначение.Свойство("АвтомобильТип",								Объект.АвтомобильТип);
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильТипОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ТранспортноеСредствоЗаписано = Ложь;	
	Для Каждого ИнформацияТранспорногоСредства Из Элемент.СписокВыбора Цикл
		Если ИнформацияТранспорногоСредства.Значение.АвтомобильТип = Текст Тогда 
			ТранспортноеСредствоЗаписано = Истина
		КонецЕсли;
	КонецЦикла;
	Если Не ТранспортноеСредствоЗаписано Тогда
		Объект.АвтомобильГрузоподъемностьВТоннах  		= "";
		Объект.АвтомобильВместимостьВКубическихМетрах  	= "";
		Объект.АвтомобильТип							= Текст;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПослеУдаления(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеПриИзменении(Элемент)
		
	Если Элемент.Родитель.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элементы.ДокументыОснования.ТекущаяСтрока); 
	
	НайденныеСтроки = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекущаяСтрока.ДокументОснование));
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		
		Объект.ДокументыОснования.Удалить(НайденныеСтроки[1]);
		Элементы.ДокументыОснования.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	// 4D:ERP для Беларуси, ВладимирР, 10.10.2016 16:08:00 
	// Ошибка при создании док. Товарно-транспортная накладная, №12812
	// {
	Документы.ТранспортнаяНакладная.УстановитьСписокВыбораФИОВодителей(Элементы.Водитель, Объект.Грузоотправитель);
	
	Документы.ТранспортнаяНакладная.УстановитьСписокВыбораТранспортныхСредств(Элементы.АвтомобильГосударственныйНомер, Объект.Грузоотправитель);
	
	Элементы.ЗаданиеНаПеревозку.Видимость = ЗначениеЗаполнено(Объект.ЗаданиеНаПеревозку);
	
	Если ТипЗнч(Объект.Грузополучатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПродажиСервер.ЗаполнитьСписокВыбораАдреса(Элементы.АдресДоставки, Объект.Грузополучатель, Истина);
		ПродажиСервер.ЗаполнитьСписокВыбораАдреса(Элементы.АдресДоставки, Объект.Грузополучатель.Партнер, Ложь);
	КонецЕсли;
	
	Если ТипЗнч(Объект.Грузоотправитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПродажиСервер.ЗаполнитьСписокВыбораАдреса(Элементы.АдресПогрузки, Объект.Грузоотправитель, Истина);
		ПродажиСервер.ЗаполнитьСписокВыбораАдреса(Элементы.АдресДоставки, Объект.Грузоотправитель.Партнер, Ложь);
	КонецЕсли;
	
	ЗаполнитьОснованиеДляПечати();
	
	ЗаполнитьСписокВыбораОснование();
	// }
	// 4D
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(Форма)
	
	// 4D:ERP для Беларуси, Дмитрий, 03.12.2015 16:59:30 
	// у нас постоянно выводится товарный состав
	// {
	Возврат;
	// }
	// 4D
																							
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументОснованиеПоЗаказу(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ПоЗаказам
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.РеализацияПоЗаказам
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.ПеремещениеПоЗаказам
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Документ.ПередачаСырьяПереработчику КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Документ.ПередачаДавальцу КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВозвратСырьяДавальцу КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	//-- НЕ УТКА
	//-- НЕ УТ
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ПоЗаказам;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВыбораФИОВодителей(Грузоотправитель)
	
	Запрос =  Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	Водители.Водитель КАК Водитель,
	|	Водители.УдостоверениеСерия КАК УдостоверениеСерия,
	|	Водители.УдостоверениеНомер КАК УдостоверениеНомер,
	|	Водители.Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТранспортнаяНакладная.Водитель КАК Водитель,
	|		ТранспортнаяНакладная.УдостоверениеСерия КАК УдостоверениеСерия,
	|		ТранспортнаяНакладная.УдостоверениеНомер КАК УдостоверениеНомер,
	|		МАКСИМУМ(ТранспортнаяНакладная.Дата) КАК Дата
	|	ИЗ
	|		Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
	|	ГДЕ
	|		ТранспортнаяНакладная.Водитель <> """"
	|		И ТранспортнаяНакладная.Грузоотправитель = &Грузоотправитель
	|		И &ГрузоотправительЗаполнен
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТранспортнаяНакладная.Водитель,
	|		ТранспортнаяНакладная.УдостоверениеСерия,
	|		ТранспортнаяНакладная.УдостоверениеНомер) КАК Водители
	|
	|УПОРЯДОЧИТЬ ПО
	|	Водители.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Грузоотправитель", Грузоотправитель);
	Запрос.УстановитьПараметр("ГрузоотправительЗаполнен", ЗначениеЗаполнено(Грузоотправитель));
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	СписокВыбора = Новый СписокЗначений;
		
	Пока РезультатЗапроса.Следующий() Цикл
		ИнформацияВодителя = Новый Структура("Водитель, УдостоверениеСерия, УдостоверениеНомер");
		ЗаполнитьЗначенияСвойств(ИнформацияВодителя, РезультатЗапроса);
		СписокВыбора.Добавить(ИнформацияВодителя, РезультатЗапроса.Водитель);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВыбораТранспортныхСредств(Грузоотправитель)
	
	Запрос =  Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	ТранспортныеСредства.АвтомобильМарка КАК АвтомобильМарка,
	|	ТранспортныеСредства.АвтомобильГосударственныйНомер КАК АвтомобильГосударственныйНомер,
	|	ТранспортныеСредства.ЛицензионнаяКарточкаВид КАК ЛицензионнаяКарточкаВид,
	|	ТранспортныеСредства.ЛицензионнаяКарточкаНомер КАК ЛицензионнаяКарточкаНомер,
	|	ТранспортныеСредства.ЛицензионнаяКарточкаРегистрационныйНомер КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ТранспортныеСредства.ЛицензионнаяКарточкаСерия КАК ЛицензионнаяКарточкаСерия,
	|	ТранспортныеСредства.Прицеп КАК Прицеп,
	|	ТранспортныеСредства.ГосударственныйНомерПрицепа КАК ГосударственныйНомерПрицепа,
	|	ТранспортныеСредства.ВидПеревозки КАК ВидПеревозки,
	|	ТранспортныеСредства.АвтомобильГрузоподъемностьВТоннах,
	|	ТранспортныеСредства.АвтомобильВместимостьВКубическихМетрах,
	|	ТранспортныеСредства.АвтомобильТип
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТранспортнаяНакладная.АвтомобильМарка КАК АвтомобильМарка,
	|		ТранспортнаяНакладная.АвтомобильГосударственныйНомер КАК АвтомобильГосударственныйНомер,
	|		ТранспортнаяНакладная.ЛицензионнаяКарточкаВид КАК ЛицензионнаяКарточкаВид,
	|		ТранспортнаяНакладная.ЛицензионнаяКарточкаНомер КАК ЛицензионнаяКарточкаНомер,
	|		ТранспортнаяНакладная.ЛицензионнаяКарточкаРегистрационныйНомер КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|		ТранспортнаяНакладная.ЛицензионнаяКарточкаСерия КАК ЛицензионнаяКарточкаСерия,
	|		ТранспортнаяНакладная.Прицеп КАК Прицеп,
	|		ТранспортнаяНакладная.ГосударственныйНомерПрицепа КАК ГосударственныйНомерПрицепа,
	|		ТранспортнаяНакладная.ВидПеревозки КАК ВидПеревозки,
	|		МАКСИМУМ(ТранспортнаяНакладная.Дата) КАК Дата,
	|		ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах КАК АвтомобильГрузоподъемностьВТоннах,
	|		ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах КАК АвтомобильВместимостьВКубическихМетрах,
	|		ТранспортнаяНакладная.АвтомобильТип КАК АвтомобильТип
	|	ИЗ
	|		Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
	|	ГДЕ
	|		ТранспортнаяНакладная.АвтомобильГосударственныйНомер <> """"
	|		И ТранспортнаяНакладная.Грузоотправитель = &Грузоотправитель
	|		И &ГрузоотправительЗаполнен
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТранспортнаяНакладная.АвтомобильМарка,
	|		ТранспортнаяНакладная.АвтомобильГосударственныйНомер,
	|		ТранспортнаяНакладная.ЛицензионнаяКарточкаВид,
	|		ТранспортнаяНакладная.ЛицензионнаяКарточкаНомер,
	|		ТранспортнаяНакладная.ЛицензионнаяКарточкаРегистрационныйНомер,
	|		ТранспортнаяНакладная.ЛицензионнаяКарточкаСерия,
	|		ТранспортнаяНакладная.Прицеп,
	|		ТранспортнаяНакладная.ГосударственныйНомерПрицепа,
	|		ТранспортнаяНакладная.ВидПеревозки,
	|		ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах,
	|		ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах,
	|		ТранспортнаяНакладная.АвтомобильТип) КАК ТранспортныеСредства
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТранспортныеСредства.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Грузоотправитель", Грузоотправитель);
	Запрос.УстановитьПараметр("ГрузоотправительЗаполнен", ЗначениеЗаполнено(Грузоотправитель));
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	СписокВыбора = Новый СписокЗначений;
		
	Пока РезультатЗапроса.Следующий() Цикл
		ИнформацияТранспортногоСредства = Новый Структура("АвтомобильГосударственныйНомер, АвтомобильМарка, АвтомобильТип, АвтомобильГрузоподъемностьВТоннах, АвтомобильВместимостьВКубическихМетрах, ЛицензионнаяКарточкаВид, ЛицензионнаяКарточкаНомер, ЛицензионнаяКарточкаРегистрационныйНомер, ЛицензионнаяКарточкаСерия, Прицеп, ГосударственныйНомерПрицепа, ВидПеревозки");
		ЗаполнитьЗначенияСвойств(ИнформацияТранспортногоСредства, РезультатЗапроса);
		СписокВыбора.Добавить(ИнформацияТранспортногоСредства, РезультатЗапроса.АвтомобильГосударственныйНомер);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаСервере
Функция СписокВыбораТиповТранспортныхСредств(Грузоотправитель)
	
	Запрос =  Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТранспортныеСредства.АвтомобильГрузоподъемностьВТоннах,
	|	ТранспортныеСредства.АвтомобильВместимостьВКубическихМетрах,
	|	ТранспортныеСредства.АвтомобильТип
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ТранспортнаяНакладная.Дата) КАК Дата,
	|		ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах КАК АвтомобильГрузоподъемностьВТоннах,
	|		ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах КАК АвтомобильВместимостьВКубическихМетрах,
	|		ТранспортнаяНакладная.АвтомобильТип КАК АвтомобильТип
	|	ИЗ
	|		Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
	|	ГДЕ
	|		ТранспортнаяНакладная.АвтомобильГосударственныйНомер = """"
	|		И ТранспортнаяНакладная.АвтомобильТип <> """"	
	|		И (ТранспортнаяНакладная.Грузоотправитель = &Грузоотправитель
	|				ИЛИ НЕ &ГрузоотправительЗаполнен)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах,
	|		ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах,
	|		ТранспортнаяНакладная.АвтомобильТип) КАК ТранспортныеСредства
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТранспортныеСредства.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Грузоотправитель", Грузоотправитель);
	Запрос.УстановитьПараметр("ГрузоотправительЗаполнен", ЗначениеЗаполнено(Грузоотправитель));
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	СписокВыбора = Новый СписокЗначений;
		
	Пока РезультатЗапроса.Следующий() Цикл
		ИнформацияТранспортногоСредства = Новый Структура("АвтомобильТип, АвтомобильГрузоподъемностьВТоннах, АвтомобильВместимостьВКубическихМетрах");
		ЗаполнитьЗначенияСвойств(ИнформацияТранспортногоСредства, РезультатЗапроса);
		СписокВыбора.Добавить(ИнформацияТранспортногоСредства, РезультатЗапроса.АвтомобильТип);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
КонецПроцедуры

&НаСервере
Процедура УстановитьБанковскийСчетПлательщика()
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетПлательщика) Тогда	
		Если ЗначениеЗаполнено(Объект.Плательщик) Тогда
			Если  ТипЗнч(Объект.Плательщик) = Тип("СправочникСсылка.Контрагенты") Тогда
				Объект.БанковскийСчетПлательщика = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Плательщик);
			Иначе
				СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
				СтруктураПараметров.Организация    		= Объект.Плательщик;
				Объект.БанковскийСчетПлательщика = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБанковскийСчетЗаказчикаПеревозки()
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетЗаказчикаПеревозки) Тогда	
		Если ЗначениеЗаполнено(Объект.ЗаказчикПеревозки) Тогда
			Если  ТипЗнч(Объект.ЗаказчикПеревозки) = Тип("СправочникСсылка.Контрагенты") Тогда
				Объект.БанковскийСчетЗаказчикаПеревозки = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.ЗаказчикПеревозки);
			Иначе
				СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
				СтруктураПараметров.Организация    		= Объект.ЗаказчикПеревозки;
				Объект.БанковскийСчетЗаказчикаПеревозки = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры	
	
&НаСервере
Процедура УстановитьБанковскийСчетПеревозчика()
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетПеревозчика) Тогда	
		Если ЗначениеЗаполнено(Объект.Перевозчик) Тогда		
			Объект.БанковскийСчетПеревозчика = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Перевозчик);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОснованиеДляПечати()
	
	Для Каждого СтрокаТаблицы ИЗ Объект.ДокументыОснования Цикл 
		
		// 4D:ERP для Беларуси, ВладимирР, 27.09.2017 16:33:35 
		// Тестирование релиза, №15631
		// {
		Если ТипЗнч(СтрокаТаблицы.ДокументОснование) <> Тип("ДокументСсылка.ПеремещениеТоваров")
			И ТипЗнч(СтрокаТаблицы.ДокументОснование) <> Тип("ДокументСсылка.ВозвратСырьяДавальцу") Тогда
		// }
		// 4D
		
			СтруктураОснования = Документы[СтрокаТаблицы.ДокументОснование.Метаданные().Имя].СтруктураОснованияДляПечати(СтрокаТаблицы.ДокументОснование);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураОснования);
			ТаблицаОснованийДляПечати.Загрузить(Документы[СтрокаТаблицы.ДокументОснование.Метаданные().Имя].ПолучитьТаблицуОснованийДляПечати(СтрокаТаблицы.ДокументОснование));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОснование()
	
	Для Каждого СтрокаТаблицы Из ТаблицаОснованийДляПечати Цикл 
		Элементы.Основание.СписокВыбора.Добавить(СтрокаТаблицы.Основание);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеНомер) Тогда
			Элементы.ОснованиеНомер.СписокВыбора.Добавить(СтрокаТаблицы.ОснованиеНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеДата) Тогда
			Элементы.ОснованиеДата.СписокВыбора.Добавить(СтрокаТаблицы.ОснованиеДата,Формат(СтрокаТаблицы.ОснованиеДата,"ДЛФ=D"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

// 4D:ERP для Беларуси, ВладимирР, 29.12.2015 15:55:20 
// Выбор адресов в поле Пункт разгрузки док.Транспортная накладная, №10165
// {
#Область БыстрыйВыборКонтактнойИнформации

&НаСервереБезКонтекста
Функция СписокПартнер(МассивОснований)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования";
	Табл = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из МассивОснований Цикл
		НоваяСтрока = Табл.Добавить();
		НоваяСтрока.ДокументОснование = Стр;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.ДокументОснование
	|ПОМЕСТИТЬ ТДок
	|ИЗ
	|	&Табл КАК Док
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТДок.ДокументОснование) = ТИП(Документ.ПередачаДавальцу)
	|			ТОГДА ВЫРАЗИТЬ(ТДок.ДокументОснование КАК Документ.ПередачаДавальцу).Партнер
	|		КОГДА ТИПЗНАЧЕНИЯ(ТДок.ДокументОснование) = ТИП(Документ.ВозвратТоваровПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(ТДок.ДокументОснование КАК Документ.ВозвратТоваровПоставщику).Партнер
	|		КОГДА ТИПЗНАЧЕНИЯ(ТДок.ДокументОснование) = ТИП(Документ.ПеремещениеТоваров)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТИПЗНАЧЕНИЯ(ТДок.ДокументОснование) = ТИП(Документ.ВозвратСырьяДавальцу)
	|			ТОГДА ВЫРАЗИТЬ(ТДок.ДокументОснование КАК Документ.ВозвратСырьяДавальцу).Партнер
	|		КОГДА ТИПЗНАЧЕНИЯ(ТДок.ДокументОснование) = ТИП(Документ.КорректировкаРеализации)
	|			ТОГДА ВЫРАЗИТЬ(ТДок.ДокументОснование КАК Документ.КорректировкаРеализации).Партнер
	|		КОГДА ТИПЗНАЧЕНИЯ(ТДок.ДокументОснование) = ТИП(Документ.РеализацияТоваровУслуг)
	|			ТОГДА ВЫРАЗИТЬ(ТДок.ДокументОснование КАК Документ.РеализацияТоваровУслуг).Партнер
	|		КОГДА ТИПЗНАЧЕНИЯ(ТДок.ДокументОснование) = ТИП(Документ.ПередачаСырьяПереработчику)
	|			ТОГДА ВЫРАЗИТЬ(ТДок.ДокументОснование КАК Документ.ПередачаСырьяПереработчику).Партнер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Партнер
	|ИЗ
	|	ТДок КАК ТДок";
	Запрос.УстановитьПараметр("Табл", Табл);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партнер");
КонецФункции

&НаКлиенте
Процедура КомандаЗаполнитьАдресДоставки(Команда)
	МассивОснований = Новый Массив;
	Для каждого Стр Из Объект.ДокументыОснования Цикл
		МассивОснований.Добавить(Стр.ДокументОснование);
	КонецЦикла;
	
	МассивИсточников = СписокПартнер(МассивОснований);
	МассивИсточников.Добавить(Объект.Грузополучатель);
	
	Результат = СписокАдресовОбъекта(МассивИсточников);
	Если Результат.СписокПредставлений.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюАдресДоставки", ЭтотОбъект, Результат);
		ПоказатьВыборИзМеню(Оповещение, Результат.СписокПредставлений, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюАдресДоставки(ЭлементВыбора, РезультатВыбора) Экспорт
	Если ТипЗнч(ЭлементВыбора) = Тип("ЭлементСпискаЗначений") Тогда
		Объект.АдресДоставки = ЭлементВыбора.Представление;
		Объект.АдресДоставкиЗначенияПолей = РезультатВыбора.МассивЗначенияПолей[ЭлементВыбора.Значение];
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьАдресПогрузки(Команда)
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(Объект.Грузоотправитель);
	
	Результат = СписокАдресовОбъекта(МассивИсточников);
	Если Результат.СписокПредставлений.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюАдресПогрузки", ЭтотОбъект, Результат);
		ПоказатьВыборИзМеню(Оповещение, Результат.СписокПредставлений, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюАдресПогрузки(ЭлементВыбора, РезультатВыбора) Экспорт
	Если ТипЗнч(ЭлементВыбора) = Тип("ЭлементСпискаЗначений") Тогда
		Объект.АдресПогрузки = ЭлементВыбора.Представление;
		Объект.АдресПогрузкиЗначенияПолей = РезультатВыбора.МассивЗначенияПолей[ЭлементВыбора.Значение];
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАдресовОбъекта(МассивКонтрагентов)
	Список = Новый СписокЗначений;
	МассивЗначенияПолей = Новый Массив;
	МассивПредставлений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Представление,
	|	ПартнерыКонтактнаяИнформация.ЗначенияПолей
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка В(&МассивКонтрагентов)
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Представление,
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка В(&МассивКонтрагентов)
	|	И ОрганизацииКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление,
	|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка В(&МассивКонтрагентов)
	|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	
	Индекс = 0;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если МассивПредставлений.Найти(Выборка.Представление) = Неопределено Тогда
			Список.Добавить(Индекс, Выборка.Представление);
			МассивЗначенияПолей.Добавить(Выборка.ЗначенияПолей);
			МассивПредставлений.Добавить(Выборка.Представление);
			
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("СписокПредставлений", Список);
	Результат.Вставить("МассивЗначенияПолей", МассивЗначенияПолей);
	
	Возврат Результат;
КонецФункции

#КонецОбласти
// }
// 4D

// 4D:ERP для Беларуси, ВладимирР, 02.03.2016 20:05:21 
// Серия и номер БСО в накладных, №11113
// {
#Область СерияНомерБСО

// Связать с формой!!!

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "БСО_ОтобразитьИзменениеДанных" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
КонецПроцедуры

// Связать с формой!!!

#КонецОбласти
// }
// 4D

// 4D:ERP для Беларуси, Юлия, 20.12.2017 22:09:52 
// ТТН-1, № 16893
// {
Функция СписокВыбораМаркиАвтомобиля()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортныеСредства.Ссылка,
	|	ТранспортныеСредства.Марка,
	|	ТранспортныеСредства.Код
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства";
	
	СписокМарокАвтомобиля = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Элементы.АвтомобильМарка.СписокВыбора.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		СписокМарокАвтомобиля.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат СписокМарокАвтомобиля;
	
КонецФункции

&НаКлиенте
Процедура АвтомобильМаркаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора = СписокВыбораМаркиАвтомобиля();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильМаркаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.АвтомобильМарка = АвтомобильМаркаОбработкаВыбораНаСервере(ВыбранноеЗначение);

КонецПроцедуры

&НаСервере
Функция АвтомобильМаркаОбработкаВыбораНаСервере(ВыбранноеЗначение)

	Объект.АвтомобильГосударственныйНомер = ВыбранноеЗначение.Код;
	Объект.Прицеп = ВыбранноеЗначение.Прицеп;
	Объект.ГосударственныйНомерПрицепа = ВыбранноеЗначение.ГосударственныйНомерПрицепа;
	
	Возврат ВыбранноеЗначение.Марка
	
КонецФункции
// }
// 4D


