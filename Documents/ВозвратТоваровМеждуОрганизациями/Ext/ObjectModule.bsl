#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьОрганизации(Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не РасчетыЧерезОтдельногоКонтрагента Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	Если ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
	КонецЕсли;
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаСНДС");
	КонецЕсли;

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями Тогда
		СуммаПроверки = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Товары,ЦенаВключаетНДС);
		ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиПлатежа(ЭтотОбъект,СуммаПроверки,ХозяйственнаяОперация,Отказ);
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВозвратТоваровМеждуОрганизациями),
												Отказ,
												МассивНепроверяемыхРеквизитов);
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект,ПроверяемыеРеквизиты,Отказ);

	Если ЗначениеЗаполнено(НаправлениеДеятельности) 
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ПроверитьЗаполнениеСумм(Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект,РежимЗаписи,РежимПроведения);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи",РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,
														НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВозвратТоваровМеждуОрганизациями));
	
	СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Товары,ЦенаВключаетНДС);
	
	Документы.СчетФактураВыданный.ПроверитьРеквизитыСчетФактурыПередЗаписьюОснования(ЭтотОбъект);
	
	Документы.СчетФактураПолученный.ПроверитьРеквизитыСчетФактуры(Ссылка, ПометкаУдаления, ОрганизацияПолучатель);
	
	Если Не РасчетыЧерезОтдельногоКонтрагента Тогда
		Партнер = Неопределено;
		Контрагент = Неопределено;
		БанковскийСчетКонтрагента = Неопределено;
		ДатаВходящегоДокумента = Неопределено;
		НомерВходящегоДокумента = "";
	КонецЕсли;
	
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		Если ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями Тогда
			РасшифровкаПлатежа.Очистить();
		Иначе
			СтрокаРасшифровки = Неопределено;
			Если РасшифровкаПлатежа.Количество()=0 Тогда
				СтрокаРасшифровки = РасшифровкаПлатежа.Добавить();
			ИначеЕсли РасшифровкаПлатежа.Количество()= 1 И Не ЗначениеЗаполнено(РасшифровкаПлатежа[0].Заказ) Тогда
				СтрокаРасшифровки = РасшифровкаПлатежа[0];
			КонецЕсли;
			Если СтрокаРасшифровки <> Неопределено Тогда
				СтрокаРасшифровки.Сумма = СуммаДокумента;
				Если ЗначениеЗаполнено(Договор)
					И Договор.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					СтрокаРасшифровки.Заказ = Договор;
				Иначе
					СтрокаРасшифровки.Заказ = ДокументПоступления;
				КонецЕсли;
			КонецЕсли;
			ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(Валюта,Дата,РасшифровкаПлатежа);
		КонецЕсли;
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация, Склад, Подразделение, Партнер);
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);
		
		ВидыЗапасовУказаныВручную = ВидыЗапасовУказаныВручную И ИзмененияВидовЗапасовРазрешены();
		ЗаполнитьВидыЗапасов(Отказ);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасов);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	// ИнтеграцияЕГАИС
	ИнтеграцияЕГАИСУТ.ЗаполнитьПризнакиЕстьАлкогольнаяПродукция(ЭтотОбъект);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект, Ложь, ТребуетсяСчетФактураВыданный());
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ВозвратТоваровМеждуОрганизациями.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства,Движения,Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства,Движения,Отказ);

	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПереданныеНаКомиссию(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);

	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьВыручкуИСебестоимостьПродаж(ДополнительныеСвойства, Движения, Отказ);
	
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСПредъявленный(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	
	//++ НЕ УТ
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТ
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект, Истина, ТребуетсяСчетФактураВыданный());
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Документы.ВозвратТоваровМеждуОрганизациями.ЗаполнитьРеквизитыПоУмолчанию(ЭтотОбъект);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЗаполнятьПоСхеме") Тогда
		
		Организация				= ДанныеЗаполнения.Организация;
		ОрганизацияПолучатель	= ДанныеЗаполнения.ОрганизацияПолучатель;
		Склад					= ДанныеЗаполнения.Склад;
		ХозяйственнаяОперация	= ДанныеЗаполнения.ХозяйственнаяОперация;
		ПоТоварамКОформлению	= ДанныеЗаполнения.ЗаполнятьПоСхеме;
		Если ДанныеЗаполнения.Свойство("Договор") Тогда
			Договор = ДанныеЗаполнения.Договор;
			
			ИменаПолей = "НаправлениеДеятельности, НаименованиеДляПечати, Номер, Дата, ВалютаВзаиморасчетов";
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ИменаПолей);
			НаправлениеДеятельности = РеквизитыДоговора.НаправлениеДеятельности;
			Основание = РеквизитыДоговора.НаименованиеДляПечати;
			ОснованиеНомер = РеквизитыДоговора.Номер;
			ОснованиеДата = РеквизитыДоговора.Дата;
			Валюта = РеквизитыДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ВидЦены") Тогда
			ВидЦены = ДанныеЗаполнения.ВидЦены;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Валюта")
			И ДанныеЗаполнения.Валюта Тогда
			Валюта = ДанныеЗаполнения.Валюта;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Дата)
		 И ЗначениеЗаполнено(ДанныеЗаполнения.КонецПериода)
		 И ДанныеЗаполнения.КонецПериода < ТекущаяДатаСеанса() Тогда
			Дата = ДанныеЗаполнения.КонецПериода;
		КонецЕсли;
		Документы.ВозвратТоваровМеждуОрганизациями.ЗаполнитьТоварыПоОстаткамКВозврату(
			ЭтотОбъект,
			ДанныеЗаполнения.НачалоПериода,
			ДанныеЗаполнения.КонецПериода);
		Документы.ВозвратТоваровМеждуОрганизациями.ЗаполнитьНалогобложениеИЦеныПоУмолчанию(ЭтотОбъект);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда	
		ЗаполнитьПоПередачеТоваров(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСчетФактураПолученный = 
		((ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
			И РасчетыЧерезОтдельногоКонтрагента);
	
	Документы.СчетФактураПолученный.АктуализироватьСчетФактуру(ЭтотОбъект.Ссылка, ЭтотОбъект.Проведен, ТребуетсяСчетФактураПолученный);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// ИнтеграцияЕГАИС
	ИнтеграцияЕГАИСУТ.ОчиститьПризнакиЕстьАлкогольнаяПродукция(ЭтотОбъект);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоПередачеТоваров(Знач ДокументОснование)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОрганизацияПолучатель               КАК Организация,
	|	ДанныеДокумента.Организация                         КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Склад                               КАК Склад,
	|	ДанныеДокумента.Валюта                              КАК Валюта,
	|	ДанныеДокумента.Договор                             КАК Договор,
	|	ДанныеДокумента.ДоговорПродажи                      КАК ДоговорПокупки,
	|	ДанныеДокумента.ДоговорПокупки                      КАК ДоговорПродажи,
	|	ДанныеДокумента.ВидЦены                             КАК ВидЦены,
	|	ДанныеДокумента.ЦенаВключаетНДС                     КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизации           КАК БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.Подразделение                       КАК Подразделение,
	|	ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента   КАК РасчетыЧерезОтдельногоКонтрагента,
	|	ДанныеДокумента.Партнер                             КАК Партнер,
	|	ДанныеДокумента.Контрагент                          КАК Контрагент,
	|	ДанныеДокумента.БанковскийСчетКонтрагента           КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Ссылка                              КАК ДокументПоступления,
	|	(ВЫБОР ДанныеДокумента.ХозяйственнаяОперация
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями)
	|	КОНЕЦ)                                              КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ГруппаФинансовогоУчета              КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.НаправлениеДеятельности             КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Основание                           КАК Основание,
	|	ДанныеДокумента.ОснованиеДата                       КАК ОснованиеДата,
	|	ДанныеДокумента.ОснованиеНомер                      КАК ОснованиеНомер
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ЭтотОбъект[Колонка.Имя] = Выборка[Колонка.Имя];
		КонецЦикла
	КонецЕсли;
	
	// Заполним данные табличной части "Товары" документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.ВидЦены,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаСНДС,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.СтатусУказанияСерий,
	|	ТаблицаТовары.Назначение
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = ТаблицаТовары.Номенклатура
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И СпрНоменклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	РеквизитыИзменены = РеквизитыИзменены(МенеджерВременныхТаблиц);
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	
	Если ПоТоварамКОформлению Тогда
		Строка = ВидыЗапасов.Найти(Справочники.ВидыЗапасов.ПустаяСсылка(), "ВидЗапасовПолучателя");
		ПерезаполнитьВидыЗапасов = (Строка <> Неопределено);
		ДополнительныеСвойства.Вставить("КонтролироватьОстаткиТоваровОрганизаций");
	КонецЕсли;
	
	Если Не Проведен
	 Или ПерезаполнитьВидыЗапасов
	 Или РеквизитыИзменены
	 Или ЗапасыСервер.ПроверитьИзменениеТоваровПоКоличествуИСумме(МенеджерВременныхТаблиц) Тогда
	
		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
		Если ПоТоварамКОформлению Тогда
			ЗапасыСервер.ТаблицаОстатковТоваровКПередаче(
				Ссылка,
				ОрганизацияПолучатель,
				Склад,
				Перечисления.ВидыКонтроляТоваровОрганизаций.ДатаКонтроля(Дата),
				МенеджерВременныхТаблиц);
			ДополнительныеСвойства.Вставить("ЗаполнятьВидЗапасовПолучателя", ОрганизацияПолучатель);
		Иначе
			ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
			ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(
				Ссылка, Организация, Дата, ДополнительныеСвойства, МенеджерВременныхТаблиц);
		КонецЕсли;
		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
		ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
			МенеджерВременныхТаблиц, ДополнительныеСвойства, ВидыЗапасов, ТаблицаОшибок, Отказ);
			
		ВидыЗапасов.Свернуть(
			"АналитикаУчетаНоменклатуры, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, СтавкаНДС",
			"Количество, СуммаСНДС, СуммаНДС");
		
		Если Не ПоТоварамКОформлению Тогда
			ЗаполнитьВидЗапасовПолучателя();
		КонецЕсли;
		
		ЗаполнитьДопКолонкиВидовЗапасов();
		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок);
	КонецЕсли;
	Если ВидыЗапасов.Найти(Документы.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка(), "ДокументРеализации") <> Неопределено Тогда
		ЗапасыСервер.ДополнитьВидыЗапасовДокументомРеализации(
			Ссылка,
			ОрганизацияПолучатель,
			Организация,
			Дата,
			Справочники.СоглашенияСКлиентами.ПустаяСсылка(),
			ВидыЗапасов);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок)
	Если ДополнительныеСвойства.Свойство("Ошибки_СопоставитьВидыЗапасов") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возврат превышает количество товара, ранее переданного от организации <%1> в организацию <%2>.
				|Укажите вручную виды запасов и номера ГТД получателя.'"),
			ОрганизацияПолучатель, Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка);
	ИначеЕсли ТаблицаОшибок.Количество() > 0 Тогда
		Если ПоТоварамКОформлению Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возврат превышает количество товара в распоряжении к оформлению возврата на складе <%1> по налогообложению <%2>.'"),
				Склад, НалогообложениеНДС);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возврат превышает остаток товара организации <%1> на складе <%2> по налогообложению <%3>.'"),
				Организация, Склад, НалогообложениеНДС);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка);
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура <%1>, превышение на %2 %3'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
				СтрокаТаблицы.Количество, СтрокаТаблицы.ЕдиницаИзмерения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка);
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	Запрос = Новый Запрос("
		// по товарам к оформлению
		|ВЫБРАТЬ
		|	ВидыЗапасовВладельца.Ссылка КАК ВидЗапасов,
		|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
		|ПОМЕСТИТЬ
		|	ДоступныеВидыЗапасов
		|ИЗ
		|	Справочник.ВидыЗапасов КАК ВидыЗапасов
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовВладельца
		|		ПО ВидыЗапасовВладельца.Ссылка = ВидыЗапасов.ВидЗапасовВладельца
		|ГДЕ
		|	&ПоТоварамКОформлению
		|	И ВидыЗапасов.Организация = &Организация И ВидыЗапасов.РеализацияЗапасовДругойОрганизации
		|	И (
		|		НЕ &ВозвратПоКомиссии И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|		ИЛИ
		|		&ВозвратПоКомиссии И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|	)
		|	И (
		|		ВидыЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			И ВидыЗапасовВладельца.НалогообложениеНДС = &НалогообложениеНДС
		|		ИЛИ
		|		ВидыЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|			И &НалогообложениеПолучателя = &НалогообложениеНДС
		|	)
		// обычный возврат между организациями
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
		|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
		|ИЗ
		|	Справочник.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	НЕ &ПоТоварамКОформлению И НЕ &ВозвратПоКомиссии
		|	И ВидыЗапасов.Организация = &Организация И НЕ ВидыЗапасов.РеализацияЗапасовДругойОрганизации
		|	И (
		|		ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|			И &НалогообложениеПолучателя = &НалогообложениеНДС
		|		ИЛИ
		|		ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			И ВидыЗапасов.НалогообложениеНДС = &НалогообложениеНДС
		|	)
		// возврат по комиссии
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
		|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
		|ИЗ
		|	Справочник.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	НЕ &ПоТоварамКОформлению И &ВозвратПоКомиссии
		|	И ВидыЗапасов.Организация = &Организация И НЕ ВидыЗапасов.РеализацияЗапасовДругойОрганизации
		|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|	И ВидыЗапасов.НалогообложениеНДС = &НалогообложениеНДС
		|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоТоварамКОформлению", ПоТоварамКОформлению);
	Запрос.УстановитьПараметр("ВозвратПоКомиссии",
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("НалогообложениеПолучателя",
		Справочники.Организации.НалогообложениеНДС(ОрганизацияПолучатель, Неопределено, Дата));
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
КонецПроцедуры

Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Склад,
	|
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|	ТаблицаТоваров.Сделка КАК Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|
	|	ТаблицаТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|;
	|");
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ВременныеТаблицыДанныхДокумента() Экспорт
	Запрос = Новый Запрос("
		// ТаблицаДанныхДокумента - Реквизиты объекта
		|ВЫБРАТЬ
		|	&Дата КАК Дата,
		|	&Организация КАК Организация,
		|	&Склад КАК Склад,
		|	&НалогообложениеНДС КАК НалогообложениеНДС,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	&ДокументПоступления КАК ДокументПоступления,
		|	Ложь КАК ЕстьСделкиВТабличнойЧасти,
		|	&ОрганизацияПолучатель КАК ОрганизацияПолучатель,
		|	&РасчетыЧерезОтдельногоКонтрагента КАК РасчетыЧерезОтдельногоКонтрагента,
		|	&Партнер КАК Партнер,
		|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	&Контрагент КАК Контрагент,
		|	&ПоТоварамКОформлению КАК ПоТоварамКОформлению,
		|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
		|ПОМЕСТИТЬ ТаблицаДанныхДокумента
		|;
		|/////////////////////////////////////////////////////
		// ВтВидыЗапасов - Табчасть ВидыЗапасов
		|ВЫБРАТЬ
		|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
		|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ТаблицаВидыЗапасов.Количество КАК Количество,
		|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
		|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаВознаграждения,
		|	0 КАК СуммаНДСВознаграждения,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
		|	&Склад КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) как Сделка,
		|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
		|ПОМЕСТИТЬ ВтВидыЗапасов
		|ИЗ
		|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры
		|;
		|//////////////////////////////////////////////////////
		// ТаблицаВидыЗапасов - Табчасть ВидыЗапасов
		|ВЫБРАТЬ
		|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Характеристика КАК Характеристика,
		|	Аналитика.Серия КАК Серия,
		|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
		|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасовПолучателя,
		|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ТаблицаВидыЗапасов.Количество КАК Количество,
		|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
		|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
		|	ТаблицаВидыЗапасов.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ТаблицаВидыЗапасов.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
		|	ТаблицаВидыЗапасов.СкладОтгрузки КАК СкладОтгрузки,
		|	ТаблицаВидыЗапасов.Склад КАК Склад,
		|	ТаблицаВидыЗапасов.Сделка как Сделка,
		|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
		|ПОМЕСТИТЬ ТаблицаВидыЗапасов
		|ИЗ
		|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|	ПО
		|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры
		|;
		|/////////////////////////////////////////////////////
		// ТаблицаТоваров - Табчасть Товары
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Серия КАК Серия,
		|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаТоваров.Количество КАК Количество,
		|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаСНДС КАК СуммаСНДС,
		|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаВознаграждения,
		|	0 КАК СуммаНДСВознаграждения,
		|	&Склад КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) как Сделка,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ИСТИНА КАК ПодбиратьВидыЗапасов
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|/////////////////////////////////////////////////////
		|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("РасчетыЧерезОтдельногоКонтрагента", РасчетыЧерезОтдельногоКонтрагента);
	Запрос.УстановитьПараметр("ПоТоварамКОформлению", ПоТоварамКОформлению);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ТаблицаТоваров",
		ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(Товары.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",
		ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	Возврат МенеджерВременныхТаблиц;
КонецФункции

Функция РеквизитыИзменены(МенеджерВременныхТаблиц)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.Организация <> СохраненныеДанные.Организация ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.Склад <> СохраненныеДанные.Склад ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> СохраненныеДанные.ХозяйственнаяОперация ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.НалогообложениеНДС <> СохраненныеДанные.НалогообложениеНДС ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.ДокументПоступления <> СохраненныеДанные.ДокументПоступления ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.ВидыЗапасовУказаныВручную <> СохраненныеДанные.ВидыЗапасовУказаныВручную ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.Партнер <> СохраненныеДанные.Партнер ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.ОрганизацияПолучатель <> СохраненныеДанные.ОрганизацияПолучатель ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.Контрагент <> СохраненныеДанные.Контрагент ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РеквизитыИзменены
		|ИЗ
		|	ТаблицаДанныхДокумента КАК ДанныеДокумента
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК СохраненныеДанные
		|		ПО СохраненныеДанные.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий() И Выборка.РеквизитыИзменены;
КонецФункции

Процедура ЗаполнитьДопКолонкиВидовЗапасов() Экспорт
	
	ТаблицаТовары = Товары.Выгрузить(, "АналитикаУчетаНоменклатуры, Упаковка, Количество, КоличествоУпаковок");
	ТаблицаТовары.Свернуть("АналитикаУчетаНоменклатуры, Упаковка", "Количество, КоличествоУпаковок");
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		КоличествоТоваров = СтрокаТоваров.Количество;
		КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.Упаковка = СтрокаТоваров.Упаковка;
			НоваяСтрока.КоличествоУпаковок = ?(КоличествоТоваров <> 0, КоличествоУпаковок * Количество / КоличествоТоваров, 0);
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.СуммаСНДС = ?(СтрокаЗапасов.Количество <> 0, Количество * СтрокаЗапасов.СуммаСНДС / СтрокаЗапасов.Количество, 0);
			НоваяСтрока.СуммаНДС = ?(СтрокаЗапасов.Количество <> 0, Количество * СтрокаЗапасов.СуммаНДС / СтрокаЗапасов.Количество, 0);
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			СтрокаЗапасов.СуммаСНДС = СтрокаЗапасов.СуммаСНДС - НоваяСтрока.СуммаСНДС;
			СтрокаЗапасов.СуммаНДС = СтрокаЗапасов.СуммаНДС - НоваяСтрока.СуммаНДС;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			КоличествоУпаковок = КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Заполняем ВидыЗапасов.ВидЗапасовПолучателя
Процедура ЗаполнитьВидЗапасовПолучателя()
	Для Каждого Запас Из ВидыЗапасов Цикл
		Если ЗначениеЗаполнено(Запас.ВидЗапасовПолучателя) Тогда
			Запас.ВидЗапасовПолучателя = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД");
	
	Остатки = ОстаткиПереданныхТоваров();
	СтрокОстатков = Остатки.Количество();
	ИндексОстатка = 0;
	
	Пока ИндексОстатка < СтрокОстатков Цикл
		Остаток = Остатки[ИндексОстатка];
		ИндексОстатка = ИндексОстатка + 1;
		Если Отбор.НомерГТД <> Остаток.НомерГТД Или Отбор.ВидЗапасов <> Остаток.ВидЗапасов
			Или Отбор.АналитикаУчетаНоменклатуры <> Остаток.АналитикаУчетаНоменклатуры
		Тогда
			ЗаполнитьЗначенияСвойств(Отбор, Остаток);
			Запасы = ВидыЗапасов.НайтиСтроки(Отбор);
			СтрокЗапасов = Запасы.Количество();
			ИндексЗапаса = 0;
		КонецЕсли;
		
		Распределить = Остаток.Количество;
		Пока ИндексЗапаса < СтрокЗапасов Цикл
			Запас = Запасы[ИндексЗапаса];
			ИндексЗапаса = ИндексЗапаса + 1;
			Если ЗначениеЗаполнено(Запас.ВидЗапасовПолучателя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Распределить >= Запас.Количество Тогда
				Запас.ВидЗапасовПолучателя = Остаток.ВидЗапасовПолучателя;
				Распределить = Распределить - Запас.Количество;
			ИначеЕсли Распределить > 0. И Распределить < Запас.Количество Тогда
				НовыйЗапас = ВидыЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЗапас, Запас,
					"АналитикаУчетаНоменклатуры, НомерГТД, СтавкаНДС, ВидЗапасов");
				ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Запас.СтавкаНДС);
				
				НовыйЗапас.Количество = Запас.Количество - Распределить;
				НовыйЗапас.СуммаСНДС = НовыйЗапас.Количество * Запас.СуммаСНДС / Запас.Количество;
				НовыйЗапас.СуммаНДС =
					ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НовыйЗапас.СуммаСНДС, ПроцентНДС, ЦенаВключаетНДС);
				// запаса получателя не хватает, новый запас будет заполнен следующим запасом получателя
				Запасы.Добавить(НовыйЗапас);
				СтрокЗапасов = СтрокЗапасов + 1;
				
				Запас.Количество = Распределить;
				Запас.СуммаСНДС = Запас.СуммаСНДС - НовыйЗапас.СуммаСНДС;
				Запас.СуммаНДС = Запас.СуммаНДС - НовыйЗапас.СуммаНДС;
				Запас.ВидЗапасовПолучателя = Остаток.ВидЗапасовПолучателя;
				
				Распределить = 0.;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВидЗапасовПоУмолчанию =
		Справочники.ВидыЗапасов.ВидЗапасовДокумента(ОрганизацияПолучатель, ХозяйственнаяОперация);
	Для Каждого Запас Из ВидыЗапасов Цикл
		Если Не ЗначениеЗаполнено(Запас.ВидЗапасовПолучателя) Тогда
			Запас.ВидЗапасовПолучателя = ВидЗапасовПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Поля {АналитикаУчетаНоменклатуры, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, Период, Количество}
// Порядок {АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, Период УБЫВ}
Функция ОстаткиПереданныхТоваров()
	Строки = ВидыЗапасов.Выгрузить(, "АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД");
	Строки.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД");
	Запрос = Новый Запрос("
		// полностью подобранные виды запасов отправителя возврата, записи уникальны
		|ВЫБРАТЬ
		|	Строки.АналитикаУчетаНоменклатуры,
		|	Строки.ВидЗапасов,
		|	Строки.НомерГТД
		|ПОМЕСТИТЬ ИсходныеСтроки
		|ИЗ
		|	&Строки КАК Строки
		|;
		|ВЫБРАТЬ
		|	Строки.АналитикаУчетаНоменклатуры,
		|	Аналитика.Номенклатура,
		|	Аналитика.Характеристика,
		|	Аналитика.Назначение,
		|	Аналитика.Серия,
		|	Строки.ВидЗапасов,
		|	Строки.НомерГТД
		|ПОМЕСТИТЬ Строки
		|ИЗ
		|	ИсходныеСтроки КАК Строки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
		|		ПО Аналитика.Ссылка = Строки.АналитикаУчетаНоменклатуры
		|;
		// собираем объем переданных товаров за вычетом возвращенных товаров
		|ВЫБРАТЬ
		|	Движения.АналитикаУчетаНоменклатуры,
		|	Движения.ВидЗапасов,
		|	Движения.ВидЗапасовПолучателя,
		|	Движения.НомерГТД,
		|	МАКСИМУМ(Движения.Период) КАК Период,
		|	СУММА(Движения.Количество) КАК Количество
		|ИЗ (
		|	ВЫБРАТЬ
		|		Строки.АналитикаУчетаНоменклатуры,
		|		Движения.КорВидЗапасов КАК ВидЗапасов,
		|		Движения.ВидЗапасов КАК ВидЗапасовПолучателя,
		|		Движения.НомерГТД,
		|		Движения.Период,
		|		Движения.Количество КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыОрганизаций КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК Передачи
		|			ПО Передачи.Ссылка = Движения.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|			ПО Аналитика.КлючАналитики = Движения.АналитикаУчетаНоменклатуры	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Строки КАК Строки
		|			ПО Строки.Номенклатура = Аналитика.Номенклатура
		|			И Строки.Характеристика = Аналитика.Характеристика
		|			И Строки.Назначение = Аналитика.Назначение
		|			И Строки.Серия = Аналитика.Серия
		//++ НЕ УТ 
		|			И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
		//-- НЕ УТ
		|			И Строки.ВидЗапасов = Движения.КорВидЗапасов
		|			И Строки.НомерГТД = Движения.НомерГТД
		|	ГДЕ
		|		Движения.Период <= &ДатаОстатков И Движения.Активность
		|		И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И Передачи.Организация = &ОрганизацияПолучатель
		|		И Передачи.ОрганизацияПолучатель = &Организация
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		Строки.АналитикаУчетаНоменклатуры,
		|		Движения.ВидЗапасов,
		|		Движения.КорВидЗапасов КАК ВидЗапасовПолучателя,
		|		Движения.НомерГТД,
		|		Движения.Период,
		|		- Движения.Количество КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыОрганизаций КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК Возвраты
		|			ПО Возвраты.Ссылка = Движения.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|			ПО Аналитика.КлючАналитики = Движения.АналитикаУчетаНоменклатуры		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Строки КАК Строки
		|			ПО Строки.Номенклатура = Аналитика.Номенклатура
		|			И Строки.Характеристика = Аналитика.Характеристика
		|			И Строки.Назначение = Аналитика.Назначение
		//++ НЕ УТ 
		|			И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
		//-- НЕ УТ
		|			И Строки.Серия = Аналитика.Серия
		|			И Строки.ВидЗапасов = Движения.ВидЗапасов
		|			И Строки.НомерГТД = Движения.НомерГТД
		|	ГДЕ
		|		Движения.Период <= &ДатаОстатков И Движения.Активность
		|		И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И Возвраты.Ссылка <> &Ссылка
		|		И Возвраты.Организация = &Организация
		|		И Возвраты.ОрганизацияПолучатель = &ОрганизацияПолучатель
		|) КАК Движения
		|СГРУППИРОВАТЬ ПО
		|	Движения.АналитикаУчетаНоменклатуры,
		|	Движения.ВидЗапасов,
		|	Движения.ВидЗапасовПолучателя,
		|	Движения.НомерГТД
		|ИМЕЮЩИЕ
		|	СУММА(Движения.Количество) > 0
		|УПОРЯДОЧИТЬ ПО
		|	Движения.АналитикаУчетаНоменклатуры,
		|	Движения.ВидЗапасов,
		|	Движения.НомерГТД,
		|	МАКСИМУМ(Движения.Период) УБЫВ
		|");
	Запрос.УстановитьПараметр("Строки", Строки);
	Запрос.УстановитьПараметр("ДатаОстатков", Перечисления.ВидыКонтроляТоваровОрганизаций.ДатаКонтроля(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область Прочее

Функция ИзмененияВидовЗапасовРазрешены()
	// Дублирование метода с методом формы сознательное
	Возврат
		Не ПоТоварамКОформлению
		И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями;
КонецФункции

Процедура ПроверитьОрганизации(Отказ)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
		
		Если Организация = ОрганизацияПолучатель Тогда
			
			Текст = НСтр("ru = 'Одна и та же организация не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"Организация",
				,
				Отказ);
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
			И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
			
			Текст = НСтр("ru = 'Организация-получатель не должна быть взаимосвязана с организацией-отправителем по организационной структуре.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ОрганизацияПолучатель",
				,
				Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	Массив = Новый Массив;
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	Таблица.ЗаказКлиента
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|	ИЗ
	|		Документ.ЗаказКлиента КАК ЗаказКлиента
	|	ГДЕ
	|		ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказКлиента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|	ГДЕ
	|		ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказКлиента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасшифровкаПлатежа.Заказ КАК ЗаказКлиента
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ГДЕ
	|		РасшифровкаПлатежа.Ссылка = &Ссылка
	|		И ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) = ТИП(Документ.ЗаказКлиента)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		РасшифровкаПлатежа.Заказ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасшифровкаПлатежа.Заказ КАК ЗаказКлиента
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ГДЕ
	|		РасшифровкаПлатежа.Ссылка = &Ссылка
	|		И ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		РасшифровкаПлатежа.Заказ
	|
	|	) КАК Таблица
	|;
	|//////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ЗаказПоставщику КАК ЗаказПоставщику
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(&МассивЗаказов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасшифровкаПлатежа.Заказ КАК ЗаказКлиента
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ГДЕ
	|		РасшифровкаПлатежа.Ссылка = &Ссылка
	|		И ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) = ТИП(Документ.ЗаказПоставщику)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		РасшифровкаПлатежа.Заказ
	|
	|	) КАК Таблица
	|";
	
	Запрос.УстановитьПараметр("МассивЗаказов", ЭтотОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	
	МассивЗависимыхЗаказов = Результат[0].Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
	МассивЗависимыхЗаказов = Результат[1].Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовПоставщикам", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

Функция ТребуетсяСчетФактураВыданный()
	
	Возврат (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
	
КонецФункции

Процедура ПроверитьЗаполнениеСумм(Отказ)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТоварыОбъекта.НомерСтроки,
	|	ТоварыОбъекта.Номенклатура,
	|	ТоварыОбъекта.Цена,
	|	ТоварыОбъекта.Сумма,
	|	ТоварыОбъекта.СуммаСНДС
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыОбъекта КАК ТоварыОбъекта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|
	|	ВЫБОР КОГДА Товары.Цена = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаЦена,
	|
	|	ВЫБОР КОГДА Товары.Сумма = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаСумма,
	|
	|	ВЫБОР КОГДА Товары.СуммаСНДС = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаСуммаСНДС
	|ИЗ
	|	Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И (Товары.Цена = 0 ИЛИ Товары.Сумма = 0 ИЛИ Товары.СуммаСНДС = 0)
	|");
	
	Запрос.УстановитьПараметр("ТоварыОбъекта", Товары.Выгрузить(,"НомерСтроки, Номенклатура, Цена, Сумма, СуммаСНДС"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонТекстаОшибки = НСтр("ru='Не заполнена ""%ИмяКолонки%"" в строке %НомерСтроки% списка ""Товары""'");
		ШаблонТекстаОшибки = СтрЗаменить(ШаблонТекстаОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		
		Если Выборка.НеЗаполненаЦена Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "Цена", "Цена", Отказ);
		КонецЕсли;
		Если Выборка.НеЗаполненаСумма Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "Сумма", "Сумма", Отказ);
		КонецЕсли;
		Если Выборка.НеЗаполненаСуммаСНДС Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "СуммаСНДС", НСтр("ru='Сумма с НДС'"), Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, НомерСтроки, ИмяПоля, ЗаголовокПоля, Отказ)
	ТекстОшибки = СтрЗаменить(ШаблонТекстаОшибки, "%ИмяКолонки%", ЗаголовокПоля);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки, ЭтотОбъект,
		ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, ИмяПоля), , Отказ);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
