&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбраннаяСтрока") Тогда
		
		ИдентификаторАктивнойСтроки = НайтиСтрокуПоДаннымСтроки(Параметры.ВыбраннаяСтрока)
		
	КонецЕсли;
	
	#Область УниверсальныеМеханизмы
	
	// Документ основание
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Настройка команд буфера обмена
	УстановитьДоступностьКомандБуфераОбмена();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИдентификаторАктивнойСтроки <> Неопределено Тогда
		
		Элементы.Содержание.ТекущаяСтраница = Элементы.СтраницаПродукция;
		Элементы.Продукция.ТекущаяСтрока = ИдентификаторАктивнойСтроки;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ПродукцияОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказДавальца.Форма.ФормаВыбораЗаказа" Тогда
		
		ПродукцияОбработкаВыбораПодборПоЗаказамДавальцаНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = "Запись_ОсновныеСпецификации" Тогда
		
		Если Параметр = Неопределено ИЛИ Параметр.Номенклатура = Неопределено Тогда
			
			ЗаполнитьСлужебныеРеквизитыПоСпецификации();
			
		Иначе
			
			ЗаполнитьСлужебныеРеквизитыПоСпецификации(Параметр.Номенклатура);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаказНаПроизводство", Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КоманднаяПанельФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруЗаказаДействие(Команда)
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Провести и продолжить?'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Для перехода в рабочее место ""Структура заказа"" необходимо провести документ.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСтруктуруЗаказаДействиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		
	Иначе
		
		ОткрытьСтруктуруЗаказа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруЗаказаДействиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПринудительноЗакрытьФорму = Ложь;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Записать(ПараметрыЗаписи) Тогда
		ОткрытьСтруктуруЗаказа();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПродукция

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
		
	Иначе
		
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'заказ на производство'"));
		
	КонецЕсли;
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         	 Истина);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    	 Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",          	 Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 	 ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                     	 Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                 	 Объект.Ссылка);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                       Новый ФиксированныйМассив(МассивТиповНоменклатуры));
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам",                          Истина);
		
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПоЗаказамДавальца(Команда)
	
	ПараметрыОтбора = Новый Структура("Организация, НаправлениеДеятельности, Партнер, Договор");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);
	ПараметрыОтбора.Вставить("УправлениеПроизводством2_2", Истина);
	ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Истина);
	ОткрытьФорму("Документ.ЗаказДавальца.Форма.ФормаВыбораЗаказа",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	Если Элементы.Продукция.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(Объект.Продукция, Элементы.Продукция, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущиеДанные, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(МассивСтрок, СтруктураДействий);

КонецПроцедуры

&НаКлиенте
Процедура Спецификации_НазначитьОсновной(Команда)
	
	ОчиститьСообщения();
	
	КоллекцияДанных = Новый Массив;
	НачалоПроизводства = ПериодНачалаПроизводства(Объект.НачатьНеРанее);
	
	Для каждого ИдентификаторСтроки Из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущиеДанные = Неопределено 
			ИЛИ ТекущиеДанные.Номенклатура.Пустая() 
			ИЛИ ТекущиеДанные.Спецификация.Пустая() Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеСтроки = Новый Структура;
		
		ДанныеСтроки.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
		ДанныеСтроки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ДанныеСтроки.Вставить("Спецификация",   ТекущиеДанные.Спецификация);
		ДанныеСтроки.Вставить("НачатьНеРанее",  НачалоПроизводства);
		ДанныеСтроки.Вставить("НомерСтроки",    ТекущиеДанные.НомерСтроки);
		
		КоллекцияДанных.Добавить(ДанныеСтроки);
		
	КонецЦикла; 
	
	// В зависимости от количества выбранных строк вызовем нужную обработку
	Если КоллекцияДанных.Количество() = 1 Тогда
		
		// Выбрана одна строка, поэтому лучше вызывать стандартную обработку
		УправлениеДаннымиОбИзделияхКлиент.НазначитьОсновнойСпецификацией(Объект.Подразделение,
																		КоллекцияДанных[0].Номенклатура, 
																		КоллекцияДанных[0].Характеристика,
																		КоллекцияДанных[0].Спецификация);
		
	ИначеЕсли КоллекцияДанных.Количество() <> 0 Тогда
		
		// Выбрано несколько строк, поэтому вызовем специальную обработку
		Результат = НазначитьСпецификациюОсновнойНаСервере(КоллекцияДанных);
			УправлениеДаннымиОбИзделияхКлиент.ОповеститьОЗаписиОсновнойСпецификации();
		
		Если НЕ Результат Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не все спецификации назначены основными.'"),,
				НСтр("ru = 'Назначить стандартную спецификацию основной'")); 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Спецификации_ЗаполнитьПоОсновной(Команда)
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() > 0 Тогда
		
		ЗаполнитьСпецификациюВСтроках(Элементы.Продукция.ВыделенныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Истина, МинимальныйСтатус);
	ИначеЕсли Модифицированность Или Не СтруктураОбъектаОснования.Проведен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ.'"));
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		Иначе
			СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Продукция_СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, МинимальныйСтатус);
	ИначеЕсли Модифицированность Или Не СтруктураОбъектаОснования.Проведен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ.'"));
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		Иначе
			СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеМеханизмы

#Область ВводНаОсновании

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

#КонецОбласти

#Область МенюОтчеты

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

#КонецОбласти

#Область ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область ИнтеграцияС1СДокументооборотом

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область БуферОбмена

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Продукция.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Продукция.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Продукция.ТекущаяСтрока) Тогда
		
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(
			Элементы.Продукция.ВыделенныеСтроки.Количество());
			
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура СодержаниеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыОсновное

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
		
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Статус");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыПродукция

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ВСтрокеВыбранаРабота(ТекущаяСтрока) Тогда
		ТекущаяСтрока.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Иначе
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КонецЕсли;
	
	ПродукцияСтрокаЗаполнитьСпецификацию(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродукцияСтрокаЗаполнитьСпецификацию(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Продукция.ТекущиеДанные;
	ДанныеСтроки.ВыбранаОсновнаяСпецификация = ВыбранаОсновнаяСпецификация(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияОчистка(Элемент, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.Продукция.ТекущиеДанные;
	ДанныеСтроки.ВыбранаОсновнаяСпецификация = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

#Область НоменклатураХарактеристика

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
		"ПродукцияЕдиницаИзмерения", 
		"Объект.Продукция.Упаковка");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
		"ПродукцияХарактеристика",
		"Объект.Продукция.ХарактеристикиИспользуются");
		
#КонецОбласти

	// оформление склада и подразделения
#Область Получатель

	// отключение видимости склада, если работа или услуга
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// отключение видимости подразделения, если товар или тара

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// поясняющая надпись для подразделения, если Ф.О. "Несколько складов" не используется

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для работ>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
#КонецОбласти

	// оформление размещения выпуска
#Область РазмещениеВыпуска

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеВыпуска.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
#КонецОбласти

	// приоритет
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтаФорма);
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
#Область ТабличнаяЧастьПродукция

#Область Назначение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СобственноеПроизводство;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
#КонецОбласти

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Элементы.НачатьНеРанее.ФорматРедактирования = ФорматДатыГрафика;
	Элементы.ДатаПотребности.ФорматРедактирования = ФорматДатыГрафика;
	Элементы.РазмещениеВыпуска.Видимость = ПланируетсяГрафикПроизводства;
	
	Если ИспользоватьНесколькоСкладов Тогда
		Элементы.ПродукцияГруппаПолучатель.Заголовок = НСтр("ru = 'Получатель'");
	Иначе
		Элементы.ПродукцияГруппаПолучатель.Заголовок = НСтр("ru = 'Подразделение-получатель'");
	КонецЕсли;
	Элементы.ПродукцияСклад.Видимость = ИспользоватьНесколькоСкладов;
	
	Элементы.ХозяйственнаяОперация.Видимость = Ложь;
	Элементы.ХозяйственнаяОперация.Видимость = ИспользоватьПроизводствоИзДавальческогоСырья;
	ЗаполнитьСписокВыбораОпераций(Элементы);
	
	#Область УправлениеДоступом
	
	#Область Спецификация
	
	ВидимостьСпецификаций = ПравоДоступа("Чтение", Метаданные.Справочники.РесурсныеСпецификации)
								И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОсновныеСпецификации);

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПродукцияСпецификацииЗаполнитьПоОсновной");
	МассивЭлементов.Добавить("ПродукцияСпецификацииНазначитьОсновной");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		ВидимостьСпецификаций);
	
	#КонецОбласти

	#Область СтруктураЗаказа
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ФормаСтруктураЗаказа");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ПравоДоступа(
			"Просмотр", 
			Метаданные.Отчеты.СтруктураЗаказаНаПроизводство2_2));
	
	#КонецОбласти
	
	#Область ВводКорректировкиНазначения
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров) Тогда
		Элементы.Продукция_СоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.Продукция_СоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	#КонецОбласти

	#Область ТолькоПросмотр_ЗаказЗапланирован
	
	ЗаказЗапланирован = ЗаказЗапланирован();
	
	Элементы.Номер.ТолькоПросмотр = ЗаказЗапланирован;
	Элементы.Организация.ТолькоПросмотр = ЗаказЗапланирован;
	Элементы.Подразделение.ТолькоПросмотр = ЗаказЗапланирован;
	Элементы.ЗаказПодДеятельность.ТолькоПросмотр = ЗаказЗапланирован;
	Элементы.НаправлениеДеятельности.ТолькоПросмотр = ЗаказЗапланирован;
	
	#КонецОбласти
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ХозяйственнаяОперация") 
		Или Инициализация Тогда
		
		ЗначениеБулево = Объект.ХозяйственнаяОперация
			= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья");
		
		Элементы.Договор.Видимость = ЗначениеБулево;
		Элементы.Партнер.Видимость = ЗначениеБулево;
		Элементы.ПродукцияОткрытьПодбор.Видимость = Не ЗначениеБулево;
		Элементы.ПродукцияЗаполнитьПоЗаказамДавальца.Видимость = ЗначениеБулево;
		
		// Установка параметров выбора направлений деятельности.
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.УчетЗатрат", Истина));
		СтатусИспользуется = ПредопределенноеЗначение("Перечисление.СтатусыНаправленияДеятельности.Используется");
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Статус", СтатусИспользуется));
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья") Тогда
			
			СписокВариантовОбособления = Новый СписокЗначений();
			СписокВариантовОбособления.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбособленияПоНаправлениюДеятельности.ПоЗаказамНаправления"));
			СписокВариантовОбособления.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбособленияПоНаправлениюДеятельности.ПустаяСсылка"));
			
			НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ВариантОбособления", СписокВариантовОбособления));
			
		КонецЕсли;
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.НаправлениеДеятельности.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Партнер")
			Или СтруктураРеквизитов.Свойство("Договор")
			Или СтруктураРеквизитов.Свойство("ХозяйственнаяОперация")
			Или Инициализация Тогда
			
			УстановитьПараметрыВыбораНазначенияПродукции(Объект.ХозяйственнаяОперация, Элементы.ПродукцияНазначение);
			
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству")
			ИЛИ Объект.ВариантОбособления = ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства") Тогда
			Элементы.Продукция_СоздатьКорректировкуНазначенияСнятиеРезерва.Доступность = Ложь;
			Элементы.Продукция_СоздатьКорректировкуНазначенияРезервирование.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСтраницыОсновное

&НаСервере
Процедура ПриИзмененииДатыСервер()
	
	АктуализироватьЗаказПодДеятельность();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		АктуализироватьЗаказПодДеятельность();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗаказПодДеятельность(Заполнить = Истина)
	
	Если Заполнить Тогда 
		Объект.ЗаказПодДеятельность = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Объект.Организация,, Объект.Дата);
	КонецЕсли;
	
	УчетНДСУТ.ЗаполнитьСписокВыбораДеятельностиНДСПотребления(
		Элементы.ЗаказПодДеятельность, 
		Объект.Организация,
		Объект.Дата);
	
КонецПроцедуры
	
&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииНаСервере()
	
	ОбновитьРеквизитНазначениеВТаблицеПродукции();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	ОбновитьРеквизитНазначениеВТаблицеПродукции();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Партнер");
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	ОбновитьРеквизитНазначениеВТаблицеПродукции();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Договор");
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииНаСервере();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство Тогда
		
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Объект.Партнер = Справочники.Партнеры.ПустаяСсылка();
		
	КонецЕсли;
	
	ОбновитьРеквизитНазначениеВТаблицеПродукции();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ХозяйственнаяОперация");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитНазначениеВТаблицеПродукции()
	
	ТолкающееНазначение = НаправленияДеятельностиСервер.ТолкающееНазначение(Объект.НаправлениеДеятельности);
	
	// Для собственного производства общая механика заполнения назначения в табличной части, если направление деятельности толкающее.
	НаправленияДеятельностиКэшированныеЗначения.НазначениеПоУмолчанию = Справочники.Назначения.ПустаяСсылка();
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство
			И ЗначениеЗаполнено(ТолкающееНазначение) Тогда
			
			НаправленияДеятельностиКэшированныеЗначения.НазначениеПоУмолчанию = ТолкающееНазначение;
			
			Для Каждого СтрокаТаблицы Из Объект.Продукция Цикл
				
				СтрокаТаблицы.Назначение = ТолкающееНазначение;
				
			КонецЦикла;
			
			Возврат;
			
	КонецЕсли;
	
	// При установке ХО Давальческое производство нужно очистить направление деятельности если оно толкающее.
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
		
		Если ЗначениеЗаполнено(ТолкающееНазначение) Тогда
			
			Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Очистка некорректных назначений.
	ШаблонНазначения = Новый Структура("НаправлениеДеятельности, Партнер, Договор");
	ШаблонНазначения.Договор = Объект.Договор;
	ШаблонНазначения.Партнер = Объект.Партнер;
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	Ссылки = Объект.Продукция.Выгрузить(, "Назначение").ВыгрузитьКолонку("Назначение");
	Шаблоны = Справочники.Назначения.ШаблоныИзСсылок(Ссылки);
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Для Каждого Строка Из Объект.Продукция Цикл
		
		Шаблон = Шаблоны.Получить(Строка.Назначение);
		Если Шаблон = Неопределено
				Или ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности)
					И ШаблонНазначения.НаправлениеДеятельности <> Шаблон.НаправлениеДеятельности
				Или ШаблонНазначения.Партнер <> Шаблон.Партнер
				Или ШаблонНазначения.Договор <> Шаблон.Договор Тогда
			
			Строка.Назначение = ПустоеНазначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораОпераций(Элементы)
	
	СписокВыбора = Элементы.ХозяйственнаяОперация.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СобственноеПроизводство"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораНазначенияПродукции(ХозяйственнаяОперация, ПолеНазначение)
	
	НовыйМассив = Новый Массив();
	
	НовыйПараметрВыбора = Новый ПараметрВыбора("РежимВыбораНазначений", "Расширенный");
	НовыйМассив.Добавить(НовыйПараметрВыбора);
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СобственноеПроизводство") Тогда
		
		НовыйПараметрВыбора = Новый ПараметрВыбора("ВключатьЗаказыДавальцев", Ложь);
		НовыйМассив.Добавить(НовыйПараметрВыбора);
		
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
	ПолеНазначение.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСтраницыПродукция

&НаСервере
Процедура ПродукцияОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	МассивДанныхПоНоменклатуре = Новый Массив;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакОсновнаяСпецификация");

	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивНовыхСтрок = Новый Массив;
	Для каждого СтрокаТовара из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |КоличествоУпаковок,
															  |Склад");
		
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ДанныеПоНоменклатуре = УправлениеПроизводствомКлиентСервер.СтруктураПодбораСпецификаций();
		ДанныеПоНоменклатуре.Подразделение      = Объект.Подразделение;
		ДанныеПоНоменклатуре.Номенклатура       = ТекущаяСтрока.Номенклатура;
		ДанныеПоНоменклатуре.Характеристика     = ТекущаяСтрока.Характеристика;
		ДанныеПоНоменклатуре.НачалоПроизводства = Объект.НачатьНеРанее;
		
		МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре);
		МассивНовыхСтрок.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивНовыхСтрок, МассивДанныхПоНоменклатуре);
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(МассивНовыхСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияОбработкаВыбораПодборПоЗаказамДавальцаНаСервере(ВыбранноеЗначение)
	
	Результат = Документы.ЗаказНаПроизводство2_2.ОстаткиПродукцииКОбеспечениюДавальцу(ВыбранноеЗначение, Объект.Ссылка);
	Объект.Продукция.Загрузить(Результат.Выгрузить());
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(КоллекцияСтрок = Неопределено, СтруктураРанееВыполненныхДействий = Неопределено)

	МассивСтрок = ПолучитьМассивСтрокПоКоллекцииСтрокТЧ(КоллекцияСтрок);
	
	Если СтруктураРанееВыполненныхДействий = Неопределено Тогда
		СтруктураРанееВыполненныхДействий = Новый Структура;
	КонецЕсли;
	
	Если НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакАртикул")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры") Тогда
		
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(МассивСтрок);
		Иначе
			ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакОсновнаяСпецификация") Тогда
		
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьСлужебныеРеквизитыПоСпецификации(МассивСтрок);
		Иначе
			ЗаполнитьСлужебныеРеквизитыПоСпецификации();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСкладПоУмолчаниюВКоллекции(ЭтаФорма, ?(МассивСтрок.Количество() > 0, МассивСтрок, Объект.Продукция));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСтрокПоКоллекцииСтрокТЧ(КоллекцияСтрок)
	
	МассивСтрок = Новый Массив;
	
	Если ЗначениеЗаполнено(КоллекцияСтрок) Тогда
		
		Если ТипЗнч(КоллекцияСтрок[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
			
			Для Каждого ЭлементКоллекции Из КоллекцияСтрок Цикл
				
				ДанныеСтроки = Объект.Продукция.НайтиПоИдентификатору(ЭлементКоллекции);
				
				Если ДанныеСтроки <> Неопределено Тогда
					МассивСтрок.Добавить(ДанныеСтроки);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Возврат КоллекцияСтрок;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСтрок;

КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтрокиЗаполнения = Неопределено)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Продукция, 
		СтруктураДействий, 
		СтрокиЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоСпецификации(СтрокиЗаполнения = Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Таблица.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(&Подразделение КАК Справочник.СтруктураПредприятия) КАК Подразделение,
		|	ВЫРАЗИТЬ(&НачалоПроизводства КАК ДАТА) КАК НачалоПроизводства
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ
		|	&КоллекцияДанных КАК Таблица
		|ГДЕ
		|	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Подразделение");
		
	Если ЗначениеЗаполнено(СтрокиЗаполнения) Тогда
		
		Если ТипЗнч(СтрокиЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда 
			
			СтрокиПродукции = Объект.Продукция.НайтиСтроки(Новый Структура("Номенклатура", СтрокиЗаполнения));
			
		Иначе
			
			СтрокиПродукции = СтрокиЗаполнения;
			
		КонецЕсли;
		
		КоллекцияДанных = Объект.Продукция.Выгрузить(СтрокиПродукции, "Номенклатура, Характеристика");
		
	Иначе
		
		СтрокиПродукции = Объект.Продукция;
		КоллекцияДанных = Объект.Продукция.Выгрузить(, "Номенклатура, Характеристика");
		
	КонецЕсли;
	
	НачалоПроизводства = ПериодНачалаПроизводства(Объект.НачатьНеРанее);
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных);
	
	СтруктураКлючаПоискаСтроки = Новый Структура("Номенклатура,
												 |Характеристика",
												 "Номенклатура",
												 "Характеристика");
												 
	УстановитьПривилегированныйРежим(Истина);
												 
	УправлениеДаннымиОбИзделиях.ЗаполнитьОсновныеСпецификацииВКоллекции(Запрос,
																		Объект.Продукция,
																		СтруктураКлючаПоискаСтроки);
																		
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ДанныеСтроки из СтрокиПродукции Цикл
		
		ДанныеСтроки.ВыбранаОсновнаяСпецификация = ВыбранаОсновнаяСпецификация(ДанныеСтроки);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Функция ПродукцияСтрокаЗаполнитьСпецификацию(ДанныеСтроки)
	
	Если ДанныеСтроки.Номенклатура.Пустая() Тогда
		
		ДанныеСтроки.Спецификация                = Неопределено;
		ДанныеСтроки.ОсновнаяСпецификация        = Неопределено;
		ДанныеСтроки.ВыбранаОсновнаяСпецификация = Ложь;
		
		Возврат Истина;
		
	КонецЕсли;
	
	НачалоПроизводства = ПериодНачалаПроизводства(Объект.НачатьНеРанее);
	
	ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
											Объект.Подразделение,
											ДанныеСтроки.Номенклатура,
											ДанныеСтроки.Характеристика,
											НачалоПроизводства,
											ДанныеСтроки.Спецификация);
											
	СпецификацияИзменилась = Ложь;
	
	Если ДанныеСпецификации = Неопределено Тогда
		
		ДанныеСтроки.Спецификация = Неопределено;
		ДанныеСтроки.ВыбранаОсновнаяСпецификация = Ложь;
		
		СпецификацияИзменилась = Истина;
		
	Иначе
		
		Если ДанныеСпецификации.Спецификация <> ДанныеСтроки.Спецификация Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСпецификации);
			СпецификацияИзменилась = Истина;
		Иначе
			ДанныеСтроки.ОсновнаяСпецификация        = ДанныеСпецификации.ОсновнаяСпецификация;
			ДанныеСтроки.ВыбранаОсновнаяСпецификация = ДанныеСпецификации.ВыбранаОсновнаяСпецификация;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СпецификацияИзменилась;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, СтруктураДействий)
	
	ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущаяСтрока, "Продукция");
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранаОсновнаяСпецификация(ДанныеСтроки)
	
	Возврат ДанныеСтроки.Спецификация = ДанныеСтроки.ОсновнаяСпецификация
				И НЕ ДанныеСтроки.ОсновнаяСпецификация.Пустая();
	
КонецФункции

&НаСервере
Функция НазначитьСпецификациюОсновнойНаСервере(КоллекцияДанных)
	
	Перем МассивОшибок;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Номенклатура");
	ТаблицаДанных.Колонки.Добавить("Характеристика");
	ТаблицаДанных.Колонки.Добавить("Спецификация");
	ТаблицаДанных.Колонки.Добавить("НачатьНеРанее");
	ТаблицаДанных.Колонки.Добавить("НомерСтроки");
	
	СтруктураОтбора = Новый Структура("Номенклатура,Характеристика,Спецификация,НачатьНеРанее");
	
	// Сформируем таблицу из уникальных значений
	Для каждого ТекущиеДанные Из КоллекцияДанных Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
		
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), ТекущиеДанные);
			
		Иначе
			
			НайденныеСтроки[0].НомерСтроки = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ЕстьОшибки = Ложь;
	
	// Назначим спецификации основными
	
	МассивДанных = Новый Массив;
	
	Для каждого ТекущиеДанные Из ТаблицаДанных Цикл
		
		СтруктураЗаписи = РегистрыСведений.ОсновныеСпецификации.СтруктураЗаписи();
		
		СтруктураЗаписи.Подразделение  = Объект.Подразделение;
		СтруктураЗаписи.Период         = ТекущиеДанные.НачатьНеРанее;
		СтруктураЗаписи.Номенклатура   = ТекущиеДанные.Номенклатура;
		СтруктураЗаписи.Характеристика = ТекущиеДанные.Характеристика;
		СтруктураЗаписи.Спецификация   = ТекущиеДанные.Спецификация;
		
		СтруктураЗаписи.Вставить("НомерСтроки", ТекущиеДанные.НомерСтроки);
		
		МассивДанных.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если НЕ УправлениеДаннымиОбИзделияхВызовСервера.НазначитьОсновныеСпецификацииДляИзделий(МассивДанных, МассивОшибок) Тогда
		
		Для каждого ОписаниеОшибки Из МассивОшибок Цикл
			
			Если ОписаниеОшибки.Свойство("НомерСтроки") И ОписаниеОшибки.Свойство("СтруктураОшибки") Тогда
				
				Если ОписаниеОшибки.СтруктураОшибки.Свойство("ТекстОшибки") Тогда
					ТекстОшибки = ОписаниеОшибки.СтруктураОшибки.ТекстОшибки;
				Иначе
					ТекстОшибки = НСтр("ru = 'Ошибка назначения основной спецификации.'");
				КонецЕсли;
				
				ПутьКСтроке = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Продукция", ОписаниеОшибки.НомерСтроки, "Спецификация");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки
					,
					,
					ПутьКСтроке);
				
			КонецЕсли;
			
		КонецЦикла;
		ЕстьОшибки = Истина;
		
	КонецЕсли;

	// Обновим служебные реквизиты
	ТаблицаДанных.Свернуть("Номенклатура");
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущиеДанные Из ТаблицаДанных Цикл
		НайденныеСтроки = Объект.Продукция.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Номенклатура));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			МассивСтрок.Добавить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоСпецификации(МассивСтрок);
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпецификациюВСтроках(Знач Идентификаторы)
	
	Модифицированность = Истина;
	
	МассивСтрок = Новый Массив;
	МассивДанныхПоНоменклатуре = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из Идентификаторы Цикл
		
		ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ДанныеПоНоменклатуре = УправлениеПроизводствомКлиентСервер.СтруктураПодбораСпецификаций();
		ДанныеПоНоменклатуре.Подразделение      = Объект.Подразделение;
		ДанныеПоНоменклатуре.Номенклатура       = ТекущаяСтрока.Номенклатура;
		ДанныеПоНоменклатуре.Характеристика     = ТекущаяСтрока.Характеристика;
		ДанныеПоНоменклатуре.НачалоПроизводства = Объект.НачатьНеРанее;
		
		МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре);
		МассивСтрок.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанныхПоНоменклатуре);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСкладПоУмолчаниюВКоллекции(Форма, МассивСтрок)
	
	Если Форма.ИспользоватьНесколькоСкладов Тогда
		Возврат;
	КонецЕсли; 

	Для каждого Строка Из МассивСтрок Цикл
		Строка.Склад = Форма.СкладПоУмолчанию;
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСкладПоУмолчаниюВСтроке(Форма, Строка)
	
	Если Форма.ИспользоватьНесколькоСкладов Тогда
		Возврат;
	КонецЕсли; 
	
	Строка.Склад = Форма.СкладПоУмолчанию;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВСтрокеВыбранаРабота(Строка)
	
	Возврат (Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
КонецФункции

&НаСервере
Функция НайтиСтрокуПоДаннымСтроки(ДанныеСтроки)
	
	Идентификатор = -1;
	
	ЕстьСпецификация = ДанныеСтроки.Свойство("Спецификация") И ЗначениеЗаполнено(ДанныеСтроки.Спецификация);
	ЕстьСкладПодразделение = ДанныеСтроки.Свойство("Склад") И ЗначениеЗаполнено(ДанныеСтроки.Склад)
		ИЛИ ДанныеСтроки.Свойство("Подразделение") И ЗначениеЗаполнено(ДанныеСтроки.Подразделение);
	
	Для каждого Строка Из Объект.Продукция Цикл
		
		Если Строка.Номенклатура = ДанныеСтроки.Номенклатура
			И Строка.Характеристика = ДанныеСтроки.Характеристика
			
			И Строка.Назначение = ДанныеСтроки.Назначение
			
			И (ЕстьСпецификация И Строка.Спецификация = ДанныеСтроки.Спецификация
				ИЛИ Не ЕстьСпецификация)
			
			И (ЕстьСкладПодразделение 
				И (Строка.Склад = ДанныеСтроки.Склад 
					ИЛИ Строка.Подразделение = ДанныеСтроки.Подразделение)
				ИЛИ Не ЕстьСкладПодразделение) Тогда
				
			Идентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#Область УниверсальныеМеханизмы

#Область ДополнительныеОтчетыИОбработки 

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область Свойства

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Печать

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Продукция.ВыделенныеСтроки,
		Объект.Продукция);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	МассивДанныхПоНоменклатуре = Новый Массив;
	МассивНовыхСтрок = Новый Массив;
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакОсновнаяСпецификация");
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	Для каждого СтрокаТовара из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Продукция.Добавить();
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
	
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ДанныеПоНоменклатуре = УправлениеПроизводствомКлиентСервер.СтруктураПодбораСпецификаций();
		ДанныеПоНоменклатуре.Подразделение      = Объект.Подразделение;
		ДанныеПоНоменклатуре.Номенклатура       = ТекущаяСтрока.Номенклатура;
		ДанныеПоНоменклатуре.Характеристика     = ТекущаяСтрока.Характеристика;
		ДанныеПоНоменклатуре.НачалоПроизводства = Объект.НачатьНеРанее;
		
		МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре);
		МассивНовыхСтрок.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивНовыхСтрок, МассивДанныхПоНоменклатуре);
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(МассивНовыхСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Обеспечение

&НаСервере
Функция ПолучитьОбъектОснования()
	
	ОбъектОснования = Объект.Ссылка;
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("ОбъектОснования", ОбъектОснования);
	СтруктураОтвета.Вставить("Проведен", ОбъектОснования.Проведен);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.ПолучитьНазначениеЗаказа(Объект.Ссылка);
	Возврат Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОтсутствииТовараКОбособленномуОбеспечению() Экспорт
	
	ТекстОшибки = НСтр("ru = 'В этапах нет ни одного материала с действием ""Обеспечивать обособленно""'");
	
	ПоказатьПредупреждение(, ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСлужебныеРеквизиты();
	
	АктуализироватьЗаказПодДеятельность(Ложь);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПодсистемыПроизводство);
	
	ХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	ИспользоватьПроизводствоИзДавальческогоСырья = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья");
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Тип("ДокументСсылка.ЗаказНаПроизводство2_2"));
	
	ЗаполнитьСкладПоУмолчанию();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьСлужебныеРеквизитыПоСпецификации();
	
КонецПроцедуры

&НаСервере
Функция ЗаказЗапланирован()
	
	Если Объект.Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется Тогда
		Возврат Документы.ЗаказНаПроизводство2_2.ЗаказЗапланирован(Объект.Ссылка);
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПериодНачалаПроизводства(Знач НачатьНеРанее = '00010101')
	
	Если ЗначениеЗаполнено(НачатьНеРанее) Тогда
		Возврат НачатьНеРанее;
	КонецЕсли;
	
	Возврат НачалоДня(ТекущаяДатаСеанса());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСкладПоУмолчанию()
	
	Если ИспользоватьНесколькоСкладов Тогда
		СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	Иначе
		СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруЗаказа()
	
	Заказы = Новый Массив;
	Заказы.Добавить(Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Заказы", Заказы);
	
	ОткрытьФорму(
		"Отчет.СтруктураЗаказаНаПроизводство2_2.Форма.СтруктураЗаказа",
		ПараметрыФормы,
		,
		Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОчередьЗаказов(Команда)
	
	УправлениеПроизводствомКлиент.ОткрытьОчередьЗаказов(, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
