&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	#Область СписокЗаказы
	
	СтруктураОтборов = Неопределено;
	
	Если Параметры.Свойство("СтруктураОтборов", СтруктураОтборов) 
		И ЗначениеЗаполнено(СтруктураОтборов) Тогда
		
		СтруктураБыстрогоОтбора = Новый Структура;
		
		Если СтруктураОтборов.Свойство("Приоритет", Приоритет) Тогда
			СтруктураБыстрогоОтбора.Вставить("Приоритет", Приоритет);
		КонецЕсли;
		
		Если СтруктураОтборов.Свойство("Подразделение", Подразделение) Тогда
			СтруктураБыстрогоОтбора.Вставить("Подразделение", Подразделение);
		КонецЕсли;
		
		Если СтруктураОтборов.Свойство("Ответственный", Ответственный) Тогда
			СтруктураБыстрогоОтбора.Вставить("Ответственный", Ответственный);
		КонецЕсли;
		
	Иначе
		
		Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		
	КонецЕсли;
	
	Если Параметры.Свойство("ТекущаяСтрока") Тогда
		
		Элементы.Список.ТекущаяСтрока = Параметры.ТекущаяСтрока;
		
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ЗаполнитьСписокВыбораОтбораПоАктуальности(Элементы.ДатаПотребностиОтбор.СписокВыбора);
	
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, ДатаСобытия, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Приоритет", Приоритет, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Подразделение", Подразделение, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Ответственный", Ответственный, СтруктураБыстрогоОтбора);
	
	УстановитьПериод();
	
	Список.Параметры.УстановитьЗначениеПараметра("ПланируетсяГрафикПроизводства", ПланируетсяГрафикПроизводства);
	
	Список.Параметры.УстановитьЗначениеПараметра("СтатусКПроизводству", Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству);
	
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеТребуетсяПроверитьЭтапы", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяПроверитьЭтапы);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеТребуетсяСформироватьЭтапы", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяСформироватьЭтапы);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеТребуетсяПередатьЭтапыКВыполнению", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяПередатьЭтапыКВыполнению);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеТребуетсяОбеспечение", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.ТребуетсяОбеспечение);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеНарушенаДатаПотребности", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.НарушенаДатаПотребности);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеВыполнен", Перечисления.СостоянияЗаказовНаПроизводствоВОчереди.Выполнен);
	
	#КонецОбласти
	
	#Область УниверсальныеМеханизмы
	
	ТекущиеДелаПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Список);
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.ОтветственныйОтбор.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.ЗаказНаПроизводство2_2));
		
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанельГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	#КонецОбласти
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Настройки.Удалить("Подразделение");
		Настройки.Удалить("Ответственный");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ДопПанельСвернута") = Истина Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДопПанель");
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "Подразделение", Подразделение, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "Ответственный", Ответственный, СтруктураБыстрогоОтбора, Настройки);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборПодразделение, ОтборОтветственный");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказНаПроизводство"
		ИЛИ ИмяСобытия = "Запись_ГрафикПроизводства" Тогда
		
		ОбновитьДанные();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжиданияОбновитьДанные();
	ПодключитьОбработчикОжиданияОбновитьГиперссылки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КоманднаяПанельЗаказы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПроизводство2_2.УправлениеОчередьюЗаказов.Команда.ОбновитьСписок");
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьЗаказВОчереди(ВыбранныеЗаказы[0], -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьЗаказВОчереди(ВыбранныеЗаказы[0], 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭтапыПроизводства(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьПараметрыИСформироватьЭтапы(ВыбранныеЗаказы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИСформироватьЭтапы(Распоряжения)
	
	ПараметрыФормы = УправлениеПроизводствомКлиентСервер.ПараметрыФормыИсполнениеЗаказа();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьПараметрыИСформироватьЭтапыЗавершение", 
			ЭтотОбъект, Распоряжения);
	
	ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", 
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИСформироватьЭтапыЗавершение(Результат, Распоряжения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Распоряжения", Распоряжения);
	ПараметрыЗадания.Вставить("ВариантыОбеспечения", Результат.ПереченьВариантов);
	
	ЗапуститьФоновоеЗадание("СформироватьЭтапыПроизводства", ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьЭтапыКВыполнению(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Распоряжения", ВыбранныеЗаказы);
	
	ЗапуститьФоновоеЗадание("ПередатьЭтапыКВыполнению", ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭтапыПроизводства(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЭтапыПроизводстваЗавершение", ЭтаФорма, ВыбранныеЗаказы);
	
	Если ВыбранныеЗаказы.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Пометить на удаление все этапы выбранных заказов?'");
	Иначе
		Представление = УправлениеПроизводствомВызовСервера.ПредставлениеЗаказа(ВыбранныеЗаказы[0],"");
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить на удаление все этапы заказа %1?'"), Представление);
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЭтапыПроизводстваЗавершение(РезультатВопроса, ПараметрыЗадания) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ЗапуститьФоновоеЗадание("ПометитьНаУдалениеЭтапыПроизводства", ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиспетчированиеЭтапов(Команда)
	
	Перем Распоряжение;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Распоряжение = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ОткрытьДиспетчированиеЭтапов(Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьТекущий(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПланированияЗаказа(ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПланироватьВыбранные(Команда)
	
	ВыбранныеЗаказы = ВыбранныеЗаказы();
	Если ВыбранныеЗаказы.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьПараметрыИЗапланировать(ВыбранныеЗаказы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьОчередьПоТекущий(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОчередьПланирования = ОчередьПланирования(ТекущиеДанные.Ссылка, Подразделение);
	
	ОпределитьПараметрыИЗапланировать(ОчередьПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИЗапланировать(Распоряжения)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Распоряжения", Распоряжения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьПараметрыИЗапланироватьЗавершение", 
			ЭтотОбъект, Распоряжения);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.НастройкиПланированияСпискаРаспоряженийИЭтапов", 
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИЗапланироватьЗавершение(Результат, Распоряжения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Распоряжения", Распоряжения);
	
	Для Каждого КлючИЗначение Из Результат Цикл
		ПараметрыЗадания.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ЗапуститьФоновоеЗадание("ПланироватьГрафикПроизводства", ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказов(Команда)
	
	ОткрытьПланированиеПолуфабрикатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеЦеховыхКладовых(Команда)
	
	ОткрытьОбеспечениеЦеховыхКладовых();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЖелаемыеДатыОбеспечения(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Распоряжение", ТекущиеДанные.Ссылка);
	
	ОткрытьФорму("Обработка.ПереносЖелаемойДатыОбеспеченияЭтаповПроизводства.Форма",
		ПараметрыФормы, ЭтаФорма, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыт(Команда)
	
	ВыделенныеСтроки = ВыбранныеЗаказы();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""Закрыт"". Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтатусЗакрытЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрытЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Закрыт", Новый Структура("КонтрольВыполненияЗаказа"));
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Закрыт'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПанельДопОтборовЗаказы

&НаКлиенте
Процедура ФормирующиесяЗаказы(Команда)
	
	ОткрытьФормирующиесяЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыеЗаказы(Команда)
	
	ОткрытьЗакрытыеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДопПанель(Команда)
	
	ДопПанельСвернута = Ложь;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДопПанель");
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДопПанель(Команда)
	
	ДопПанельСвернута = Истина;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ДопПанель");
	
КонецПроцедуры

#КонецОбласти

#Область Универсальные

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область Шапка

&НаКлиенте
Процедура ОтборДатаПотребностиПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборДатаПотребности");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаПотребностиОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СтандартнаяОбработка);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборДатаПотребности");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаПотребностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.ПриВыбореОтбораПоАктуальности(
		ВыбранноеЗначение, 
		СтандартнаяОбработка, 
		ЭтаФорма,
		Список, 
		"Актуальность", 
		"ДатаСобытия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетОтборПриИзменении(Элемент)
	
	УстановитьОтборПриоритет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОтборПриИзменении(Элемент)
	
	УстановитьОтборПодразделение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОтборПриИзменении(Элемент)
	
	УстановитьОтборОтветственный();
	
КонецПроцедуры

#КонецОбласти

#Область КоманднаяПанельЗаказы

#КонецОбласти

#Область ПанельДопОтборовЗаказы

&НаКлиенте
Процедура ОтборПоСостояниюПриИзменении(Элемент)
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

#КонецОбласти

#Область СписокЗаказы

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СостояниеЭтаповИГрафикаПроизводства" Тогда
	
		СтандартнаяОбработка = Ложь;
		
		КодСостояния = Элемент.ТекущиеДанные.СостояниеЭтаповИГрафикаПроизводства;
		
		ОбработкаВыбораСостояниеЭтаповИГрафикаПроизводства(КодСостояния, ВыбраннаяСтрока);
		
	ИначеЕсли Поле.Имя = "СостояниеОбеспечения" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КодСостояния = Элемент.ТекущиеДанные.СостояниеОбеспечения;
		
		ОбработкаВыбораСостояниеОбеспечения(КодСостояния, ВыбраннаяСтрока);
		
	ИначеЕсли Поле.Имя = "СостояниеВыпускаПродукции" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КодСостояния = Элемент.ТекущиеДанные.СостояниеВыпускаПродукции;
		
		ОбработкаВыбораСостояниеВыпускаПродукции(КодСостояния, ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСостояниеЭтаповИГрафикаПроизводства(КодСостояния, ВыбраннаяСтрока)

	Если КодСостояния = 1 Тогда
		
		Распоряжения = МассивСсылок(ВыбраннаяСтрока);
		ОпределитьПараметрыИСформироватьЭтапы(Распоряжения);
		
	ИначеЕсли КодСостояния = 2 Тогда
		
		СтруктураОтборов = Новый Структура("ТребуетсяУточнение", Истина);
		ОткрытьДиспетчированиеЭтапов(ВыбраннаяСтрока, СтруктураОтборов);
		
	ИначеЕсли КодСостояния = 3 Тогда
		
		ОткрытьФормуПланированияЗаказа(ВыбраннаяСтрока);
		
	ИначеЕсли КодСостояния = 4 Тогда
		
		ПараметрыЗадания = ПараметрыЗапускаЗаданийПоЗаказу(ВыбраннаяСтрока);
		ЗапуститьФоновоеЗадание("ПередатьЭтапыКВыполнению", ПараметрыЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСостояниеОбеспечения(КодСостояния, ВыбраннаяСтрока)
	
	Если КодСостояния = 1 Тогда
		
		СтруктураОтборов = Новый Структура("ТребуетсяОбеспечение", Истина);
		ОткрытьДиспетчированиеЭтапов(ВыбраннаяСтрока, СтруктураОтборов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСостояниеВыпускаПродукции(КодСостояния, ВыбраннаяСтрока)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если РазрешеноПеретаскивание(ПараметрыПеретаскивания.Значение, Строка) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(НоваяПозицияВОчереди) И ПараметрыПеретаскивания.Значение.ВГраница() = 0 Тогда
		
		ВставитьДокументВОчередь(ПараметрыПеретаскивания.Значение[0], НоваяПозицияВОчереди);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбслуживаниеФормы

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	// Настройки видимости/доступности

	ИспользуетсяНесколькоПодразделений = Справочники.СтруктураПредприятия.ИспользуетсяНесколькоПодразделенийДиспетчеров();
	Элементы.ПодразделениеОтбор.Видимость = ИспользуетсяНесколькоПодразделений;
	
	Элементы.ПланироватьТекущий.Видимость   = ПланируетсяГрафикПроизводства;
	Элементы.ПланироватьВыбранные.Видимость = ПланируетсяГрафикПроизводства;
	
	Элементы.КонтекстноеМенюПланироватьТекущий.Видимость   = ПланируетсяГрафикПроизводства;
	Элементы.КонтекстноеМенюПланироватьВыбранные.Видимость = ПланируетсяГрафикПроизводства;
	
	Элементы.ПланироватьОчередьПоТекущий.Видимость                = ПланируетсяГрафикПроизводства;
	Элементы.КонтекстноеМенюПланироватьОчередьПоТекущий.Видимость = ПланируетсяГрафикПроизводства;
	
	Элементы.ГруппаОтборПланироватьГрафик.Видимость       = ПланируетсяГрафикПроизводства;
	Элементы.ГруппаОтборНарушенаДатаПотребности.Видимость = ПланируетсяГрафикПроизводства;

	Элементы.ДиспетчированиеЭтапов.Видимость = Документы.ЭтапПроизводства2_2.ДоступноДиспетчированиеЭтапов();
	
	НастроитьЭлементыФормыПоПравам();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПоПравам()

	ДоступноОбеспечениеПотребностей = ПравоДоступа("Просмотр", Метаданные.Обработки.ОбеспечениеПотребностей);
	
	ДоступноФормированиеЗаказовМатериалов = 
			ДоступноОбеспечениеПотребностей 
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказМатериаловВПроизводство);
			
	ДоступноФормированиеЗаказовНаЗакупку = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") 
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПоставщику);
			
	ДоступноФормированиеЗаказовНаСборку = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку")
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаСборку);
					
	ДоступноФормированиеЗаказовНаПеремещение = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаПеремещение);
					
	ДоступноФормированиеЗаказовПереработчику = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне")
			И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПереработчику);
					
	ДоступноОбеспечениеКладовых = 
			ДоступноОбеспечениеПотребностей
			И (ДоступноФормированиеЗаказовМатериалов
				ИЛИ ДоступноФормированиеЗаказовНаЗакупку
				ИЛИ ДоступноФормированиеЗаказовНаСборку
				ИЛИ ДоступноФормированиеЗаказовНаПеремещение
				ИЛИ ДоступноФормированиеЗаказовПереработчику);
	
	Элементы.КартинкаЗапланироватьПолуфабрикаты.Видимость = ДоступноОбеспечениеПотребностей;
	Элементы.ЗапланироватьПолуфабрикаты.Видимость = ДоступноОбеспечениеПотребностей;
	
	Элементы.КартинкаОбеспечениеЦеховыхКладовых.Видимость = ДоступноОбеспечениеКладовых;
	Элементы.ОбеспечениеЦеховыхКладовых.Видимость = ДоступноОбеспечениеКладовых;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	// Отбор по приоритету
	Если СтруктураРеквизитов.Свойство("ОтборПриоритет") ИЛИ Инициализация Тогда
		
		Элементы.Приоритет.Видимость = НЕ ЗначениеЗаполнено(Форма.Приоритет);
		
	КонецЕсли;
	
	// Отбор по подразделению-диспетчеру
	Если СтруктураРеквизитов.Свойство("ОтборПодразделение") ИЛИ Инициализация Тогда
		
		Элементы.Подразделение.Видимость = Элементы.ПодразделениеОтбор.Видимость 
											И НЕ ЗначениеЗаполнено(Форма.Подразделение);
		
	КонецЕсли;
	
	// Отбор по ответственному
	Если СтруктураРеквизитов.Свойство("ОтборОтветственный") ИЛИ Инициализация Тогда
		
		Элементы.Ответственный.Видимость = НЕ ЗначениеЗаполнено(Форма.Ответственный);
		
	КонецЕсли;
	
	// Доступность элементов управления очередью
	Если СтруктураРеквизитов.Свойство("ОтборПриоритет")
		ИЛИ СтруктураРеквизитов.Свойство("ОтборОтветственный")
		ИЛИ СтруктураРеквизитов.Свойство("ОтборДатаПотребности")
		ИЛИ СтруктураРеквизитов.Свойство("ОтборПоСостоянию")
		ИЛИ Инициализация Тогда
		
		ОчередьДоступна = ОчередьДоступна(Форма);
		
		Элементы.Список.РазрешитьНачалоПеретаскивания = ОчередьДоступна;
		Элементы.Список.РазрешитьПеретаскивание       = ОчередьДоступна;
		
		Элементы.ПереместитьВниз.Доступность  = ОчередьДоступна;
		Элементы.ПереместитьВверх.Доступность = ОчередьДоступна;
		
		Элементы.ПланироватьОчередьПоТекущий.Доступность                = ОчередьДоступна;
		Элементы.КонтекстноеМенюПланироватьОчередьПоТекущий.Доступность = ОчередьДоступна;
		
	КонецЕсли;
	
	// Настройка элементов расположенных на доп. панеле отборов
	Если СтруктураРеквизитов.Свойство("ДопПанель")
		ИЛИ Инициализация Тогда
		
		Элементы.ЗапланироватьПолуфабрикаты.Видимость    = НЕ Форма.ДопПанельСвернута И Форма.ДоступноОбеспечениеПотребностей;
		Элементы.ОбеспечениеЦеховыхКладовых.Видимость    = НЕ Форма.ДопПанельСвернута И Форма.ДоступноОбеспечениеКладовых;
		Элементы.ФормирующиесяЗаказы.Видимость           = НЕ Форма.ДопПанельСвернута;
		Элементы.ФормирующиесяЗаказыСвернутая.Видимость  = Форма.ДопПанельСвернута;
		
		Элементы.РазвернутьДопПанель.Видимость   = Форма.ДопПанельСвернута;
		Элементы.СвернутьДопПанель.Видимость     = НЕ Форма.ДопПанельСвернута;
		Элементы.ОткрытьЗакрытыеЗаказы.Видимость = НЕ Форма.ДопПанельСвернута;
		
		Элементы.ДекорацияОтобратьЗаказы.Заголовок = 
				?(Форма.ДопПанельСвернута, НСтр("ru='Отобрать'"), 
					НСтр("ru='Отобрать заказы, для которых требуется'"));
		
		Элементы.ДекорацияОтобратьЗаказыПродолжение.Заголовок = 
				?(НЕ Форма.ДопПанельСвернута, НСтр("ru='Или по которым'"), "");
			
		ТекущееОтображениеПодсказки = ?(Форма.ДопПанельСвернута, 
											ОтображениеПодсказки.Всплывающая,
											ОтображениеПодсказки.ОтображатьСправа);
		
		МассивЭлементов = Новый Массив;
		
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборТребуетсяСформироватьЭтапы);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборТребуетсяПроверитьЭтапы);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборТребуетсяПланированиеГрафика);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборТребуетсяПередатьКВыполнению);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборТребуетсяОбеспечение);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборНарушенаДатаПотребности);
		МассивЭлементов.Добавить(Элементы.ДекорацияДопОтборВыполнен);
		
		Для Каждого ТекущийЭлемент Из МассивЭлементов Цикл
			
			ТекущийЭлемент.ОтображениеПодсказки = ТекущееОтображениеПодсказки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// приоритет
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляПриоритет(ЭтотОбъект, "Список", "ПриоритетОчередь", "Приоритет", Истина, "Приоритет", "ПриоритетОтбор");
	
	// начало производства
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляДатаПроизводства(ЭтотОбъект, "Список", "НачалоПроизводства");
	
	// дата потребности
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляДатаПроизводства(ЭтотОбъект, "Список", "ДатаПотребности");
	
	// дата
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
	// выделение цветом просроченного заказа
	#Область ПросроченныеЗаказы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаПотребности");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Просрочен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ПланируетсяГрафикПроизводства = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	
	ФоновоеЗадание = Новый Структура("
		|ИмяЗадания,
		|ИдентификаторЗадания,
		|АдресХранилища");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСписка

&НаСервере
Процедура УстановитьПериод()
	
	ТекущаяДата      = ТекущаяДатаСеанса();
	ДатаАктуальности = НачалоДня(ТекущаяДата);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруОсновныхОтборов(Форма, ТолькоЗаполненные = Истина)
	
	СтруктураОтборов = Новый Структура;
	
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(Форма.Приоритет) Тогда
		СтруктураОтборов.Вставить("Приоритет", Форма.Приоритет);
	КонецЕсли;
	
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(Форма.Подразделение) Тогда
		СтруктураОтборов.Вставить("Подразделение", Форма.Подразделение);
	КонецЕсли;
	
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(Форма.Ответственный) Тогда
		СтруктураОтборов.Вставить("Ответственный", Форма.Ответственный);
	КонецЕсли;

	Возврат СтруктураОтборов;

КонецФункции

&НаСервере
Процедура УстановитьОтборПриоритет()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Приоритет", Приоритет, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Приоритет));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборПриоритет");
	
	ОбновитьГиперссылки(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПодразделение()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Подразделение", Подразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Подразделение));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборПодразделение");
	
	ОбновитьГиперссылки(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОтветственный()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборОтветственный");
	
	ОбновитьГиперссылки(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСостоянию()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Список.Отбор,, "ГруппаОтбораПоСостоянию");
	
	ОтборПоСостояниюЭтаповИГрафика = СписокДоступныхСостоянийЭтаповИГрафика();
	ОтборПоСостояниюВыпуска        = СписокДоступныхСостоянийВыпуска();
	
	Если ОтборПоСостояниюЭтаповИГрафика.Количество() > 0
		ИЛИ ОтборТребуетсяОбеспечение
		ИЛИ ОтборПоСостояниюВыпуска.Количество() > 0 Тогда
		
		ГруппаОтбораПоСостоянию = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.Отбор.Элементы, "ГруппаОтбораПоСостоянию", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаОтбораПоСостоянию, "СостояниеЭтаповИГрафикаПроизводства", ОтборПоСостояниюЭтаповИГрафика, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(ОтборПоСостояниюЭтаповИГрафика));
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаОтбораПоСостоянию, "СостояниеОбеспечения", ОтборТребуетсяОбеспечение, ВидСравненияКомпоновкиДанных.Равно,, ОтборТребуетсяОбеспечение);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ГруппаОтбораПоСостоянию, "СостояниеВыпускаПродукции", ОтборПоСостояниюВыпуска, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(ОтборПоСостояниюВыпуска));
		
		ГруппаОтбораПоСостоянию.Использование = Истина;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтборПоСостоянию");

КонецПроцедуры

&НаСервере
Функция СписокДоступныхСостоянийЭтаповИГрафика()

	Результат = Новый Массив;
	
	Если ОтборТребуетсяСформироватьЭтапы Тогда
		Результат.Добавить(1);
	КонецЕсли;
	
	Если ОтборТребуетсяПроверитьЭтапы Тогда
		Результат.Добавить(2);
	КонецЕсли;
	
	Если ОтборТребуетсяПланированиеГрафика Тогда
		Результат.Добавить(3);
	КонецЕсли;
	
	Если ОтборТребуетсяПередатьЭтапыКВыполнению Тогда
		Результат.Добавить(4);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СписокДоступныхСостоянийВыпуска()

	Результат = Новый Массив;
	
	Если ОтборНарушенаДатаПотребности Тогда
		Результат.Добавить(1);
	КонецЕсли;
	
	Если ОтборВыполнен Тогда
		Результат.Добавить(2);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДанных

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновитьДанные()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанные", 60, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбработчикОжиданияОбновитьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанные");

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновитьГиперссылки()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьГиперссылки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновитьДанныеПриАктивизации()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанные", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьГиперссылки()
	
	ОбновитьГиперссылки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанные()
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьГиперссылки(Форма)
	
	Элементы = Форма.Элементы;
	
	ПараметрыОтбора = ПолучитьСтруктуруОсновныхОтборов(Форма);
	ПараметрыОтбора.Вставить("Статус", СтатусЗаказаФормируется());
	
	КоличествоЗаказов = КоличествоЗаказов(ПараметрыОтбора);
	КоличествоЗаказовСтрокой = Формат(КоличествоЗаказов, "ЧН=0; ЧГ=0");
	
	Элементы.ФормирующиесяЗаказы.Заголовок = СтрШаблон(НСтр("ru = 'Формирующиеся заказы (%1)'"), КоличествоЗаказовСтрокой);
	Элементы.ФормирующиесяЗаказыСвернутая.Заголовок = СтрШаблон(НСтр("ru = '(%1)'"), КоличествоЗаказовСтрокой);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(ОбновлениеПоРасписанию = Ложь)
	
	Если НЕ ОбновлениеПоРасписанию Тогда
		ОтключитьОбработчикОжиданияОбновитьДанные();
	КонецЕсли;
	
	Если ВводДоступен() Тогда
		
		ОбновитьДанныеНаСервере();
		ПодключитьОбработчикОжиданияОбновитьДанные();
		
	Иначе
		
		ПодключитьОбработчикОжиданияОбновитьДанныеПриАктивизации();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	ОбновитьГиперссылки(ЭтаФорма);
	
	УстановитьПериод();
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область Очередь

&НаКлиентеНаСервереБезКонтекста
Функция ОчередьДоступна(Форма)
	
	Возврат НЕ (ЗначениеЗаполнено(Форма.ДатаСобытия)
			ИЛИ ЗначениеЗаполнено(Форма.Приоритет)
			ИЛИ ЗначениеЗаполнено(Форма.Ответственный)
			ИЛИ ЗначениеЗаполнено(Форма.Актуальность)
			ИЛИ Форма.ОтборТребуетсяСформироватьЭтапы
			ИЛИ Форма.ОтборТребуетсяПроверитьЭтапы
			ИЛИ Форма.ОтборТребуетсяПланированиеГрафика
			ИЛИ Форма.ОтборТребуетсяПередатьЭтапыКВыполнению
			ИЛИ Форма.ОтборТребуетсяОбеспечение
			ИЛИ Форма.ОтборНарушенаДатаПотребности
			ИЛИ Форма.ОтборВыполнен
	);
	
КонецФункции

&НаКлиенте
Функция РазрешеноПеретаскивание(МассивЗаказов, ПроверяемаяПозиция)
	
	Если ПроверяемаяПозиция <> Неопределено 
		И ТипЗнч(МассивЗаказов) = Тип("Массив") И МассивЗаказов.ВГраница() = 0 
		И ТипЗнч(МассивЗаказов[0]) = Тип("ДокументСсылка.ЗаказНаПроизводство2_2")
		И МожноВставитьДокументВОчередь(МассивЗаказов[0], ПроверяемаяПозиция) Тогда
		
		НоваяПозицияВОчереди = ПроверяемаяПозиция;
		
	Иначе
		
		НоваяПозицияВОчереди = Неопределено;
		
	КонецЕсли;
	
	Возврат (НоваяПозицияВОчереди <> Неопределено);
	
КонецФункции

&НаСервереБезКонтекста
Функция МожноВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозицияВОчереди)
	
	Возврат МенеджерОбъекта().МожноВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозицияВОчереди);
	
КонецФункции

&НаСервере
Процедура ВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозицияВОчереди)
	
	ЗаблокироватьДанныеДляРедактирования(ТекущийЗаказ);
	ЗаблокироватьДанныеДляРедактирования(НоваяПозицияВОчереди);
	
	МенеджерОбъекта().ВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозицияВОчереди);
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьЗаказВОчереди(ТекущийЗаказ, Направление)
	
	Если НЕ МенеджерОбъекта().МожноПереместитьДокументВОчереди(ТекущийЗаказ, Направление) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(ТекущийЗаказ);

	МенеджерОбъекта().ПереместитьДокументВОчереди(ТекущийЗаказ, Направление);
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОчередьПланирования(ТекущийЗаказ, ПодразделениеДиспетчер)
	
	Возврат МенеджерОбъекта().ОчередьПланирования(ТекущийЗаказ, ПодразделениеДиспетчер);
	
КонецФункции

#КонецОбласти

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ИмяЗадания, ПараметрыЗадания)
	
	ЗаданиеВыполнено = ЗапуститьФоновоеЗаданиеНаСервере(ИмяЗадания, ПараметрыЗадания);
	
	Если ЗаданиеВыполнено Тогда
		ОбработатьЗавершениеЗаданияНаКлиенте();
	Иначе
		ОткрытьФормуДлительнойОперации();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(Знач ИмяЗадания, Знач ПараметрыЗадания)
	
	Если ИмяЗадания = "СформироватьЭтапыПроизводства" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеСформироватьЭтапыПроизводства(ПараметрыЗадания);
		
	ИначеЕсли ИмяЗадания = "ПередатьЭтапыКВыполнению" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеПередатьЭтапыКВыполнению(ПараметрыЗадания);
		
	ИначеЕсли ИмяЗадания = "ПометитьНаУдалениеЭтапыПроизводства" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеПометитьНаУдалениеЭтапыПроизводства(ПараметрыЗадания);
		
	ИначеЕсли ИмяЗадания = "ПланироватьГрафикПроизводства" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеПланироватьГрафикПроизводства(ПараметрыЗадания);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Неизвестное задание ""%1""'"),
							ИмяЗадания);
	КонецЕсли;
	
	ФоновоеЗадание.ИмяЗадания           = ИмяЗадания;
	ФоновоеЗадание.ИдентификаторЗадания = РезультатЗапускаЗадания.ИдентификаторЗадания;
	ФоновоеЗадание.АдресХранилища       = РезультатЗапускаЗадания.АдресХранилища;
	
	Возврат РезультатЗапускаЗадания.ЗаданиеВыполнено;

КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗаданияНаКлиенте()

	Если ФоновоеЗадание.ИмяЗадания = "СформироватьЭтапыПроизводства" Тогда
		ЗавершениеЗаданияСформироватьЭтапыПроизводства(ФоновоеЗадание.АдресХранилища);
	ИначеЕсли ФоновоеЗадание.ИмяЗадания = "ПередатьЭтапыКВыполнению" Тогда
		ЗавершениеЗаданияПередатьЭтапыКВыполнению(ФоновоеЗадание.АдресХранилища);
	ИначеЕсли ФоновоеЗадание.ИмяЗадания = "ПометитьНаУдалениеЭтапыПроизводства" Тогда
		ЗавершениеЗаданияПометитьНаУдалениеЭтапыПроизводства(ФоновоеЗадание.АдресХранилища);
	ИначеЕсли ФоновоеЗадание.ИмяЗадания = "ПланироватьГрафикПроизводства" Тогда
		ЗавершениеЗаданияПланироватьГрафикПроизводства(ФоновоеЗадание.АдресХранилища);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(
		ЭтаФорма, ФоновоеЗадание.ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() Тогда
			
			Если ЗаданиеВыполнено(ФоновоеЗадание.ИдентификаторЗадания) Тогда
				ОбработатьЗавершениеЗаданияНаКлиенте();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#Область ВыполнениеЗаданий

&НаСервере
Функция ЗапуститьЗаданиеСформироватьЭтапыПроизводства(ПараметрыЗадания)
	
	НаименованиеЗадания = НСтр("ru = 'Формирование этапов производства'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Документы.ЭтапПроизводства2_2.ОбеспечитьПотребностиПроизводстваВПродукцииИПолуфабрикатах",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаСервере
Функция ЗапуститьЗаданиеПередатьЭтапыКВыполнению(ПараметрыЗадания)
	
	НаименованиеЗадания = НСтр("ru = 'Передача этапов к выполнению'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Документы.ЭтапПроизводства2_2.ПередатьЭтапыКВыполнениюОтложенно",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаСервере
Функция ЗапуститьЗаданиеПометитьНаУдалениеЭтапыПроизводства(ПараметрыЗадания)
	
	НаименованиеЗадания = НСтр("ru = 'Пометка на удаление этапов производства'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Документы.ЭтапПроизводства2_2.ПометитьНаУдалениеЭтапыОтложенно",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаСервере
Функция ЗапуститьЗаданиеПланироватьГрафикПроизводства(ПараметрыЗадания)
	
	НаименованиеЗадания = НСтр("ru = 'Планирование графика производства'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьРабочийГрафикРаспоряжений",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаКлиенте
Процедура ЗавершениеЗаданияСформироватьЭтапыПроизводства(АдресХранилища)
	
	Результат = ЗавершениеЗаданияНаСервере(АдресХранилища);
	
	УправлениеПроизводствомКлиент.ОповеститьПользователяОФормированииЭтаповПроизводства(
			Результат, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗаданияПередатьЭтапыКВыполнению(АдресХранилища)
	
	Результат = ЗавершениеЗаданияНаСервере(АдресХранилища);
	
	УправлениеПроизводствомКлиент.ОповеститьПользователяОПередачиЭтаповКВыполнению(
			Результат, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗаданияПометитьНаУдалениеЭтапыПроизводства(АдресХранилища)
	
	Результат = ЗавершениеЗаданияНаСервере(АдресХранилища);
	УправлениеПроизводствомКлиент.ОповеститьПользователяОПометкеНаУдалениеЭтаповПроизводства(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗаданияПланироватьГрафикПроизводства(АдресХранилища)
	
	Результат = ЗавершениеЗаданияНаСервере(АдресХранилища);
	
	УправлениеПроизводствомКлиент.ОповеститьПользователяОПланированииГрафикаПроизводства(
			Результат, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ЗавершениеЗаданияНаСервере(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ОбновитьДанныеНаСервере();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОткрытьДиспетчированиеЭтапов(Распоряжение, ДополнительныеОтборы = Неопределено)
	
	Отборы = Новый Структура;
	
	Отборы.Вставить("ПодразделениеДиспетчер", Подразделение);
	Отборы.Вставить("Распоряжение",           Распоряжение);
	
	Если ДополнительныеОтборы <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Отборы, ДополнительныеОтборы);
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.Диспетчирование",
		Новый Структура("СтруктураОтборов", Отборы), ЭтаФорма);
	
	Оповестить(УправлениеПроизводствомКлиентСервер.ИмяСобытияОбновитьДиспетчированиеЭтапов(),
		Отборы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПланированияЗаказа(Распоряжение)
	
	ПараметрыФормы = Новый Структура("Распоряжение", Распоряжение);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.ПланированиеГрафикаЗаказа", 
		ПараметрыФормы,, Распоряжение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланированиеПолуфабрикатов()
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыОткрытияФормыОбработкиОбеспечениеПотребностей();
	
	ПараметрыФормы.ОтборПоТипуОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Производство");
	ПараметрыФормы.ОтборПоПодразделению   = Подразделение;
	
	ПараметрыФормы.ЕстьШагЗапасы = Ложь;
	
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбеспечениеЦеховыхКладовых()
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыОткрытияФормыОбработкиОбеспечениеПотребностей();
	ПараметрыФормы.ОтборПоПодразделению   = Подразделение;
	ПараметрыФормы.ОтборПоЦеховымКладовым = Истина;
	
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормирующиесяЗаказы()
	
	СтруктураОтборов = ПолучитьСтруктуруОсновныхОтборов(ЭтаФорма, Ложь);
	СтруктураОтборов.Вставить("Статус", СтатусЗаказаФормируется());
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаСписка", 
		Новый Структура("СтруктураОтборов", СтруктураОтборов));

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗакрытыеЗаказы()
	
	СтруктураОтборов = ПолучитьСтруктуруОсновныхОтборов(ЭтаФорма, Ложь);
	СтруктураОтборов.Вставить("Статус", СтатусЗаказаЗакрыт());
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаСписка",
		Новый Структура("СтруктураОтборов", СтруктураОтборов));

КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоЗаказов(Знач ПараметрыОтбора)
	
	Возврат Документы.ЗаказНаПроизводство2_2.КоличествоЗаказов(ПараметрыОтбора);
	
КонецФункции

&НаКлиенте
Функция ВыбранныеЗаказы()

	Возврат ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивСсылок(Ссылка = Неопределено)
	
	МассивСсылок = Новый Массив;
	
	Если Ссылка <> Неопределено Тогда
		МассивСсылок.Добавить(Ссылка);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗапускаЗаданийПоЗаказу(ВыбраннаяСтрока)
	
	МассивСсылок = МассивСсылок(ВыбраннаяСтрока);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Распоряжения", МассивСсылок);
	
	Возврат ПараметрыОбработки;

КонецФункции

&НаСервереБезКонтекста
Функция МенеджерОбъекта()
	
	Возврат Документы.ЗаказНаПроизводство2_2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусЗаказаФормируется()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусЗаказаЗакрыт()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт");
	
КонецФункции

#КонецОбласти

#КонецОбласти
