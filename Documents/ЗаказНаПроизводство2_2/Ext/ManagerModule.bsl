#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Команды

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт

КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат УправлениеПроизводством.ДобавитьКомандуСоздатьНаОснованииЗаказ(КомандыСоздатьНаОсновании);
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуГрафикПроизводстваЗаказа(КомандыОтчетов);

КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область Очередь

// Возвращает новый номер в очереди заказов на производство.
// 
// Возвращаемое значение:
//   - Число - новый номер в очереди
//
Функция НовыйНомерОчереди() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	(Т.Очередь + 1) КАК НовыйНомерОчереди
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Очередь УБЫВ");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		НовыйНомерОчереди = 1;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НовыйНомерОчереди = Выборка.НовыйНомерОчереди;
		
	КонецЕсли;
	
	Возврат НовыйНомерОчереди;
	
КонецФункции

// Определяет можно ли переместить документ в очереди на одну позицию
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ 
//  Направление	 - число - -1, перемещает заказ вверх по очереди
//                         +1, перемещает заказ вниз по очереди
// 
// Возвращаемое значение:
//   - Булево - Истина, если документ можно переместить в очереди на одну позицию
//
Функция МожноПереместитьДокументВОчереди(ТекущийЗаказ, Направление) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
		|
		|		ПО ТекущийЗаказНаПроизводство.Ссылка    = &ТекущийЗаказ
		|			И ЗаказНаПроизводство.Приоритет     = ТекущийЗаказНаПроизводство.Приоритет
		|			И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
		|			И ЗаказНаПроизводство.Статус        = &СтатусКПроизводству
		|			И &Направление
		|			И ЗаказНаПроизводство.Проведен";
	
	Если Направление < 0 Тогда
		
		ТекстНаправление = "ЗаказНаПроизводство.Очередь < ТекущийЗаказНаПроизводство.Очередь";
		
	ИначеЕсли Направление > 0 Тогда
		
		ТекстНаправление = "ЗаказНаПроизводство.Очередь > ТекущийЗаказНаПроизводство.Очередь";
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Направление", ТекстНаправление);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Перемещает документ в очереди заказов на одну позицию
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ 
//  Направление	 - число - -1, перемещает заказ вверх по очереди
//                         +1, перемещает заказ вниз по очереди
// 
Процедура ПереместитьДокументВОчереди(ТекущийЗаказ, Направление) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ТекущийЗаказ);
	Исключение
		ШаблонОшибки = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
		Возврат;
	КонецПопытки;
		
	Запрос = Новый Запрос;
	
	Если Направление > 0 Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
			|		Т.ОчередьМаксимум + 1
			|	ИНАЧЕ
			|		Т.ОчередьСреднее
			|	КОНЕЦ КАК НовыйНомерОчереди
			|
			|ИЗ
			|	(ВЫБРАТЬ
			|		МИНИМУМ(Т.Очередь) КАК ОчередьМинимум,
			|		СРЕДНЕЕ(Т.Очередь) КАК ОчередьСреднее,
			|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
			|	ИЗ
			|		(ВЫБРАТЬ ПЕРВЫЕ 2
			|			ЗаказНаПроизводство.Очередь КАК Очередь
			|		ИЗ
			|			Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
			|
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
			|
			|				ПО ТекущийЗаказНаПроизводство.Ссылка    = &ТекущийЗаказ
			|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
			|					И ЗаказНаПроизводство.Приоритет     = ТекущийЗаказНаПроизводство.Приоритет
			|					И ЗаказНаПроизводство.Статус        = &СтатусКПроизводству
			|					И ЗаказНаПроизводство.Очередь       > ТекущийЗаказНаПроизводство.Очередь
			|					И ЗаказНаПроизводство.Проведен
			|	
			|		УПОРЯДОЧИТЬ ПО
			|			Очередь
			|		) КАК Т
			|	) КАК Т
			|
			|ГДЕ
			|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
			|		Т.ОчередьСреднее + 1
			|	ИНАЧЕ
			|		Т.ОчередьСреднее
			|	КОНЕЦ ЕСТЬ NULL ";
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМинимум ТОГДА
			|		Т.ОчередьМинимум / 2
			|	ИНАЧЕ
			|		Т.ОчередьСреднее
			|	КОНЕЦ КАК НовыйНомерОчереди
			|
			|ИЗ
			|	(ВЫБРАТЬ
			|		МИНИМУМ(Т.Очередь) КАК ОчередьМинимум,
			|		СРЕДНЕЕ(Т.Очередь) КАК ОчередьСреднее,
			|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
			|	ИЗ
			|		(ВЫБРАТЬ ПЕРВЫЕ 2
			|			ЗаказНаПроизводство.Очередь КАК Очередь
			|
			|		ИЗ
			|			Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
			|
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
			|
			|				ПО ТекущийЗаказНаПроизводство.Ссылка    = &ТекущийЗаказ
			|					И ЗаказНаПроизводство.Приоритет     = ТекущийЗаказНаПроизводство.Приоритет
			|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
			|					И ЗаказНаПроизводство.Статус        = &СтатусКПроизводству
			|					И ЗаказНаПроизводство.Очередь       < ТекущийЗаказНаПроизводство.Очередь
			|					И ЗаказНаПроизводство.Проведен
			|	
			|		УПОРЯДОЧИТЬ ПО
			|			Очередь УБЫВ
			|		) КАК Т
			|	) КАК Т
			|
			|ГДЕ
			|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
			|		Т.ОчередьСреднее + 1
			|	ИНАЧЕ
			|		Т.ОчередьСреднее
			|	КОНЕЦ ЕСТЬ NULL";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущийЗаказ",        ТекущийЗаказ);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаказОбъект = ТекущийЗаказ.ПолучитьОбъект();
			ЗаказОбъект.Очередь = Выборка.НовыйНомерОчереди;
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ШаблонОшибки = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
			
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет можно ли вставить документ в очередь
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ 
//  НоваяПозиция - ДокументСсылка.ЗаказНаПроизводство2_2 - новая позиция в очереди 
// 
// Возвращаемое значение:
//   - Булево - Истина, если документ можно вставить в указанную позицию очереди
//
Функция МожноВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозиция) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ИСТИНА 
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК НоваяПозиция
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказ
		|		ПО  ТекущийЗаказ.Ссылка          = &ТекущийЗаказ
		|			И НоваяПозиция.Ссылка        = &НоваяПозиция
		|			И НоваяПозиция.Приоритет     = ТекущийЗаказ.Приоритет
		|			И НоваяПозиция.Подразделение = ТекущийЗаказ.Подразделение
		|			И НоваяПозиция.Статус        = &СтатусКПроизводству
		|			И ТекущийЗаказ.Статус        = &СтатусКПроизводству
		|			И НоваяПозиция.Проведен
		|			И ТекущийЗаказ.Проведен");
		
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	Запрос.УстановитьПараметр("НоваяПозиция", НоваяПозиция);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Вставляет документ в очередь заказов
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ
//  НоваяПозиция - ДокументСсылка.ЗаказНаПроизводство2_2 - новая позиция в очереди
//
Процедура ВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозиция) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ТекущийЗаказ);
	Исключение
		ШаблонОшибки = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМинимум ТОГДА
		|		Т.ОчередьМинимум / 2
		|	ИНАЧЕ
		|		Т.ОчередьСреднее
		|	КОНЕЦ КАК НовыйНомерОчереди
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		МИНИМУМ(Т.Очередь) КАК ОчередьМинимум,
		|		СРЕДНЕЕ(Т.Очередь) КАК ОчередьСреднее,
		|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
		|	ИЗ
		|		(ВЫБРАТЬ ПЕРВЫЕ 2
		|			ЗаказНаПроизводство.Очередь КАК Очередь
		|
		|		ИЗ
		|			Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
		|
		|				ПО ТекущийЗаказНаПроизводство.Ссылка    = &НоваяПозиция
		|					И ЗаказНаПроизводство.Приоритет     = ТекущийЗаказНаПроизводство.Приоритет
		|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
		|					И ЗаказНаПроизводство.Статус        = &СтатусКПроизводству
		|					И ЗаказНаПроизводство.Очередь       <= ТекущийЗаказНаПроизводство.Очередь
		|					И ЗаказНаПроизводство.Проведен
		|	
		|		УПОРЯДОЧИТЬ ПО
		|			Очередь УБЫВ
		|		) КАК Т
		|	) КАК Т
		|
		|ГДЕ
		|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
		|		Т.ОчередьСреднее + 1
		|	ИНАЧЕ
		|		Т.ОчередьСреднее
		|	КОНЕЦ ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("НоваяПозиция", НоваяПозиция);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НачатьТранзакцию();
		Попытка
			
			ЗаказОбъект = ТекущийЗаказ.ПолучитьОбъект();
			ЗаказОбъект.Очередь = Выборка.НовыйНомерОчереди;
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ШаблонОшибки = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
			
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
			Возврат;
			
		КонецПопытки
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает номер очереди для вставки перед документами
//
// Параметры:
//  Заказы - Массив - заказы на производство
// 
// Возвращаемое значение:
//   - Число - номер очереди для вставки перед документами
//
Функция НомерОчередиДляВставкиПередДокументами(Заказы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Граница.Приоритет     КАК Приоритет,
		|	Граница.Подразделение КАК Подразделение,
		|	Граница.Статус        КАК Статус,
		|	Граница.Очередь       КАК Очередь
		|ПОМЕСТИТЬ ВТГраница
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Граница
		|ГДЕ
		|	Граница.Ссылка В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				Т.Ссылка КАК Ссылка
		|			ИЗ
		|				Документ.ЗаказНаПроизводство2_2 КАК Т
		|			ГДЕ
		|				Т.Ссылка В (&Заказы)
		|				И Т.Статус = &СтатусКПроизводству
		|				И Т.Проведен
		|			УПОРЯДОЧИТЬ ПО
		|				-Т.Приоритет.РеквизитДопУпорядочивания УБЫВ,
		|				Т.Подразделение.РеквизитДопУпорядочивания,
		|				Т.Очередь)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМинимум ТОГДА
		|		Т.ОчередьМинимум / 2
		|	ИНАЧЕ
		|		Т.ОчередьСреднее
		|	КОНЕЦ КАК НомерОчереди
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		МИНИМУМ(Т.Очередь)  КАК ОчередьМинимум,
		|		СРЕДНЕЕ(Т.Очередь)  КАК ОчередьСреднее,
		|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
		|	ИЗ
		|		(ВЫБРАТЬ ПЕРВЫЕ 2
		|			ЗаказНаПроизводство.Очередь КАК Очередь
		|
		|		ИЗ
		|			Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГраница КАК Граница
		|
		|				ПО ЗаказНаПроизводство.Приоритет        = Граница.Приоритет
		|					И ЗаказНаПроизводство.Подразделение = Граница.Подразделение
		|					И ЗаказНаПроизводство.Статус        = Граница.Статус
		|					И ЗаказНаПроизводство.Очередь      <= Граница.Очередь
		|					И ЗаказНаПроизводство.Проведен
		|	
		|		УПОРЯДОЧИТЬ ПО
		|			Очередь УБЫВ
		|		) КАК Т
		|	) КАК Т
		|
		|ГДЕ
		|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
		|		Т.ОчередьСреднее + 1
		|	ИНАЧЕ
		|		Т.ОчередьСреднее
		|	КОНЕЦ ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Заказы",              Заказы);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НомерОчереди = 0;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НомерОчереди = Выборка.НомерОчереди;
		
	КонецЕсли;
	
	Возврат НомерОчереди;

КонецФункции

// Возвращает очередь заказов для планирования по указанный заказ
//
// Параметры:
//  ТекущийЗаказ			 - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ
//  ПодразделениеДиспетчер	 - СправочникСсылка.СтруктураПредприятия - для какого подразделения-диспетчера нужно получить очередь заказов
// 
// Возвращаемое значение:
//   - Массив - очередь планирования
//
Функция ОчередьПланирования(ТекущийЗаказ, ПодразделениеДиспетчер = Неопределено) Экспорт
	
	Запрос = Новый Запрос( 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаПроизводство.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
		|		ПО (ТекущийЗаказНаПроизводство.Ссылка = &ТекущийЗаказ)
		|			И (ЗаказНаПроизводство.Проведен)
		|			И (ЗаказНаПроизводство.Статус = &СтатусКПроизводству)
		|			И (НЕ &ЕстьОтборПоПодразделению
		|				ИЛИ &ЕстьОтборПоПодразделению
		|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение)
		|			И (ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|				ИЛИ НЕ &ЕстьОтборПоПодразделению
		|					И ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|					И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания
		|				ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|					И (&ЕстьОтборПоПодразделению
		|						ИЛИ НЕ &ЕстьОтборПоПодразделению
		|							И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания)
		|					И ЗаказНаПроизводство.Очередь <= ТекущийЗаказНаПроизводство.Очередь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
		|	ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
		|	ЗаказНаПроизводство.Очередь");
	
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	Запрос.УстановитьПараметр("ПодразделениеДиспетчер", ПодразделениеДиспетчер);
	Запрос.УстановитьПараметр("ЕстьОтборПоПодразделению", ЗначениеЗаполнено(ПодразделениеДиспетчер));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Формирует временную таблицу с заказами, приоритет которых выше чем у заданного заказа.
// Выбираются проведенные документы во всех статусах кроме Завершен/Закрыт.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в который будет помещена
//		сформированная временная таблица.
//  ИмяВременнойТаблицы	- Строка - имя сформированной временной таблицы.
//  Заказ - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ, относительно которого требуется получить
//		более приоритетные заказы.
//
Процедура СоздатьВТЗаказыСБольшимПриоритетом(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, Заказ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетНомер,
	|	ЗаказНаПроизводство2_2.Подразделение.РеквизитДопУпорядочивания КАК ПодразделениеНомер,
	|	ЗаказНаПроизводство2_2.Очередь КАК Очередь
	|ПОМЕСТИТЬ ВТДанныеРаспоряжения
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	|ГДЕ
	|	ЗаказНаПроизводство2_2.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство2_2.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаказыСБольшимПриоритетом
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРаспоряжения КАК ВТДанныеРаспоряжения
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказНаПроизводство2_2.Проведен
	|	И ЗаказНаПроизводство2_2.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|	И (ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания < ВТДанныеРаспоряжения.ПриоритетНомер
	|			ИЛИ ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПриоритетНомер
	|				И ЗаказНаПроизводство2_2.Подразделение.РеквизитДопУпорядочивания < ВТДанныеРаспоряжения.ПодразделениеНомер
	|			ИЛИ ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПриоритетНомер
	|				И ЗаказНаПроизводство2_2.Подразделение.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПодразделениеНомер
	|				И ЗаказНаПроизводство2_2.Очередь < ВТДанныеРаспоряжения.Очередь)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРаспоряжения КАК ВТДанныеРаспоряжения
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказНаПроизводство.Проведен
	|	И ЗаказНаПроизводство.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|	И (ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ВТДанныеРаспоряжения.ПриоритетНомер
	|			ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПриоритетНомер
	|				И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания <= ВТДанныеРаспоряжения.ПодразделениеНомер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗаказыСБольшимПриоритетом", ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СхемыОбособления 

// Создает временную таблицу схем обособления продукции в производстве
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц
//  Распоряжения			 - Массив					 - список заказов на производство
//
Процедура СоздатьВтСхемыОбособленияВПроизводстве(МенеджерВременныхТаблиц, Распоряжения) Экспорт
	
	ТекстЗапроса = ТекстЗапросаСхемыОбособленияВПроизводстве();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПОМЕСТИТЬ", "ПОМЕСТИТЬ") + " ИНДЕКСИРОВАТЬ ПО Распоряжение, Назначение ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

// Получает схемы обособления продукции заказа на производство
//
// Параметры:
//  Распоряжения - Массив	 - список заказов на производство
// 
// Возвращаемое значение:
//   ТаблицаЗначений - схемы обособления продукции заказа на производство
//    * Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//    * Назначение   - СправочникСсылка.Назначения - назначение продукции заказа на производство
//
//    * Обособленно - Булево - Истина, если производственный процесс должен быть разделен по назначениям
//
//    * НазначениеПродукция - СправочникСсылка.Назначения - разделитель учета (целевое назначение продукции)
//    * НазначениеМатериалы - СправочникСсылка.Назначения - назначение обособленного обеспечения этапов материалами и работами
//
Функция СхемыОбособленияПоЗаказам(Распоряжения) Экспорт
	
	ТекстЗапроса = ТекстЗапросаСхемыОбособленияВПроизводстве();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемыОбособления = Запрос.Выполнить().Выгрузить();
	СхемыОбособления.Индексы.Добавить("Распоряжение,Назначение");
	
	Возврат СхемыОбособления;
	
КонецФункции

// Получает схему обособления продукции по ключу
//
// Параметры:
//  КлючСхемы	 - Структура - см. УправлениеПроизводствомКлиентСервер.КлючСхемыОбособления()
// 
// Возвращаемое значение:
//   Структура - схема обособления
//    * Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//    * Назначение   - СправочникСсылка.Назначения - назначение продукции заказа на производство
//
//    * Обособленно - Булево - Истина, если производственный процесс должен быть разделен по назначениям
//
//    * НазначениеПродукция - СправочникСсылка.Назначения - разделитель учета (целевое назначение продукции)
//    * НазначениеМатериалы - СправочникСсылка.Назначения - назначение обособленного обеспечения этапов материалами и работами
//
Функция СхемаОбособленияПоКлючу(КлючСхемы) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	(" + ТекстЗапросаСхемыОбособленияВПроизводстве() + ") КАК Схемы
		|ГДЕ
		|	Схемы.Назначение = &Назначение");
	
	Запрос.УстановитьПараметр("Распоряжения", КлючСхемы.Распоряжение);
	Запрос.УстановитьПараметр("Назначение",   КлючСхемы.Назначение);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	УстановитьПривилегированныйРежим(Ложь);
	
	СхемаОбособления = Новый Структура("
		|Распоряжение,
		|Назначение,
		|
		|Обособленно,
		|
		|НазначениеПродукция,
		|НазначениеМатериалы");
	ЗаполнитьЗначенияСвойств(СхемаОбособления,Выборка);
	Возврат СхемаОбособления;
	
КонецФункции

// Проверяет использование варианта обособления материалов и работ по этапам производства
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
// 
// Возвращаемое значение:
//   - Булево - Истина, если используется обособление материалов и работ под этапы
//
Функция ИспользуетсяОбособлениеПоЭтапамПроизводства(Ссылка) Экспорт
	
	ВариантОбособления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВариантОбособления");
	
	Возврат ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства
			ИЛИ Не ЗначениеЗаполнено(ВариантОбособления);
	
КонецФункции

// Возвращает текст поля проверки использования варианта обособления материалов и работ по этапам производства
// 
// Возвращаемое значение:
//   - Строка - текст поля запроса проверке использования варианта обособления материалов и работ по этапам производства
//
Функция ТекстПоляИспользуетсяОбособлениеПоЭтапамПроизводства(СинонимТаблицыЗаказы = "Заказы") Экспорт
	
	Возврат СинонимТаблицыЗаказы + ".ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства)";
	
КонецФункции

#КонецОбласти

#Область УправлениеЗаказами

// Выполняет замену спецификаций в заказах
//  Поддерживается замена спецификаций для продукции
//
// Параметры:
//  ДанныеЗамены			 - Массив	 - содержит структуру параметров замены:
//  	** Заказ - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  	** НомерСтроки - Число - номер строки заказа на производство
//  	** Спецификация - СправочникСсылка.РесурсныеСпецификации - исходная спецификация
//  	** НоваяСпецификация - СправочникСсылка.РесурсныеСпецификации - новая спецификация
//  ДоступнаЧастичнаяЗамена	 - Булево	 - Признак, доступна частичная замена
// 
// Возвращаемое значение:
//   - Структура - результат замены
//
Функция ЗаменитьСпецификации(ДанныеЗамены, ДоступнаЧастичнаяЗамена = Ложь) Экспорт
	
	Заказы = Новый Массив;
	Замены = Новый Соответствие;
	
	Для каждого Данные Из ДанныеЗамены Цикл
		
		Замена = Новый Структура("НомерСтроки, Спецификация, НоваяСпецификация");
		ЗаполнитьЗначенияСвойств(Замена, Данные);
		
		Если Замены[Данные.Заказ] <> Неопределено Тогда
			Замены[Данные.Заказ].Добавить(Замена);
		Иначе
			Замены.Вставить(Данные.Заказ, УправлениеПроизводствомКлиентСервер.МассивЗначений(Замена));
			Заказы.Добавить(Данные.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура("ЕстьОшибки, Ошибки, ВыполненоЗамен", Ложь, Новый Массив, 0);
	
	Для каждого Заказ Из Заказы Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказНаПроизводство2_2");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Заказ);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПродукцияИПолуфабрикатыВПроизводстве");
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Заказ);
			
			Блокировка.Заблокировать();
			
			ЗаказОбъект = Заказ.ПолучитьОбъект();
			Если ЗаказОбъект = Неопределено ИЛИ ЗаказЗапланирован(Заказ) Тогда
				
				Результат.Ошибки.Добавить(Заказ);
				
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			ЗаменыЗаказа = Замены[Заказ];
			ВыполненоЗаменВЗаказе = 0;
			
			Для каждого Строка Из ЗаказОбъект.Продукция Цикл
				
				КоличествоЗамен = ЗаменыЗаказа.Количество();
				Если КоличествоЗамен = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Для Индекс = -КоличествоЗамен + 1 По 0 Цикл
					
					Замена = ЗаменыЗаказа[-Индекс];
					
					Если Замена.НомерСтроки = Строка.НомерСтроки
						И (Замена.Спецификация = Строка.Спецификация
							ИЛИ Не ЗначениеЗаполнено(Замена.Спецификация)) Тогда
						
						Строка.Спецификация = Замена.НоваяСпецификация;
						ВыполненоЗаменВЗаказе = ВыполненоЗаменВЗаказе + 1;
						
						ЗаменыЗаказа.Удалить(-Индекс);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ЗаменаЗавершена = Ложь;
			Если (ВыполненоЗаменВЗаказе > 0 И ДоступнаЧастичнаяЗамена) ИЛИ ЗаменыЗаказа.ВГраница() = -1 Тогда
				
				Если ЗаказОбъект.ПроверитьЗаполнение() Тогда
					
					Если ЗаказОбъект.Проведен Тогда
						ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Иначе
						ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
					ЗаменаЗавершена = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗаменаЗавершена Тогда
				Результат.Ошибки.Добавить(Заказ);
				ВыполненоЗаменВЗаказе = 0;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
			Результат.ВыполненоЗамен = Результат.ВыполненоЗамен + ВыполненоЗаменВЗаказе;
			
		Исключение
			
			Результат.Ошибки.Добавить(Заказ);
			
			ОтменитьТранзакцию();
			
			СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеЗаменаСпецификаций();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать документ: %1 по причине: %2'"),
								Заказ,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Заказ.Метаданные(), Заказ, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Результат.ЕстьОшибки = Результат.Ошибки.Количество() > 0;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусДокумента

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаПроизводство2_2[НовыйСтатус];
	
	ТекстыЗапроса = Новый Массив;
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса = РегистрыНакопления.ПродукцияИПолуфабрикатыВПроизводстве.ТекстЗапросаКонтрольЗакрытияЗаказа();
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		ТекстВыборки = 
			"ВЫБРАТЬ
			|	ТаблицаДокументов.Ссылка КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
			|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
			|	ВЫБОР
			|		КОГДА ТаблицаДокументов.Статус = &Статус
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СтатусСовпадает,
			|	ТаблицаДокументов.Проведен КАК Проведен,
			|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
			|	ИСТИНА КАК ЗаписьПроведением,
			|	ВЫБОР
			|		КОГДА ВтОстаткиПоЗаказам.Заказ ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
			|ИЗ
			|	Документ.ЗаказНаПроизводство2_2 КАК ТаблицаДокументов
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	ВтОстаткиПоЗаказам
			|ПО
			|	ВтОстаткиПоЗаказам.Заказ = ТаблицаДокументов.Ссылка
			|ГДЕ
			|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
		
	Иначе
		
		ТекстВыборки =
			"ВЫБРАТЬ
			|	ТаблицаДокументов.Ссылка КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
			|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
			|	ВЫБОР
			|		КОГДА ТаблицаДокументов.Статус = &Статус
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СтатусСовпадает,
			|	ТаблицаДокументов.Проведен КАК Проведен,
			|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
			|	ИСТИНА КАК ЗаписьПроведением
			|ИЗ
			|	Документ.ЗаказНаПроизводство2_2 КАК ТаблицаДокументов
			|ГДЕ
			|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
		
	КонецЕсли;
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству Тогда
		ТекстВыборки = ТекстВыборки + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаДокументов.ДатаПотребности
			|";
	КонецЕсли;
	ТекстыЗапроса.Добавить(ТекстВыборки);
	
	НеЗакрыватьБезПолнойОтработки = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПроизводствоБезПолнойОтработки");
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	ТекстЗапроса = УправлениеПроизводством.ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.УстановитьПараметр("НеЗакрыватьБезПолнойОтработки", НеЗакрыватьБезПолнойОтработки);
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонение);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")
		И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ отработан не полностью'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#Область Представление

// Формирует представление заказа на производство.
// Формат: "Заказ № %1 от %2".
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  Префикс	 - Строка								 - префикс
// 
// Возвращаемое значение:
//  Строка - представление заказа на производство.
//
Функция ПредставлениеЗаказа(Ссылка, Префикс = Неопределено) Экспорт
	
	ШаблонПрефикс = ?(Префикс <> Неопределено, Префикс, НСтр("ru = 'Заказ'"));
	Шаблон = ШаблонПрефикс + ?(ПустаяСтрока(ШаблонПрефикс),""," ") + НСтр("ru = '№ %1 от %2'");
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,"Номер,Дата");
	
	НомерЗаказа     = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыЗаказа.Номер, Ложь, Истина);
	ДатаЗаказа      = Формат(РеквизитыЗаказа.Дата, "ДЛФ=D");
	
	Возврат СтрШаблон(Шаблон, НомерЗаказа, ДатаЗаказа);
	
КонецФункции

// Формирует полное представление заказа на производство.
// Формат: "Заказ № %1 от %2, дата потребности %3".
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  Префикс	 - Строка								 - префикс
// 
// Возвращаемое значение:
//  Строка - полное представление заказа на производство.
//
Функция ПолноеПредставлениеЗаказа(Ссылка, Префикс = Неопределено) Экспорт
	
	ШаблонПрефикс = ?(Префикс <> Неопределено, Префикс, НСтр("ru = 'Заказ'"));
	Шаблон = ШаблонПрефикс + ?(ПустаяСтрока(ШаблонПрефикс),""," ") + НСтр("ru = '№ %1 от %2, дата потребности %3'");
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,"Номер,Дата,ДатаПотребности");
	
	НомерЗаказа     = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыЗаказа.Номер, Ложь, Истина);
	ДатаЗаказа      = Формат(РеквизитыЗаказа.Дата, "ДЛФ=D");
	ДатаПотребности = Формат(РеквизитыЗаказа.ДатаПотребности, "ДЛФ=D");
	
	Возврат СтрШаблон(Шаблон, НомерЗаказа, ДатаЗаказа, ДатаПотребности);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Определяет есть ли право доступа на добавление документа
// 
// Возвращаемое значение:
//   - Булево - Истина, если есть право доступа на добавление
//
Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство2_2);
	
КонецФункции

// Определяет есть ли право доступа на изменение документа
// 
// Возвращаемое значение:
//   - Булево - Истина, если есть право доступа на изменение
//
Функция ПравоДоступаИзменение() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПроизводство2_2);
	
КонецФункции

// Определяет наличие права доступа "УправлениеОчередьюЗаказовНаПроизводство" для текущего пользователя
// 
// Возвращаемое значение:
//   - Булево - Истина, если управление очередью доступно
//
Функция ДоступноУправлениеОчередью() Экспорт
	
	Возврат Пользователи.РолиДоступны("УправлениеОчередьюЗаказовНаПроизводство");
	
КонецФункции

// Функция проверяет, запланированы ли этапы заказа
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаказНаПроизводство2_2 - Заказ на производство
// 
// Возвращаемое значение:
//   - Истина - этапы заказа запланированы
//
Функция ЗаказЗапланирован(Ссылка) Экспорт
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	
	ЗаказыЗапланированы = РегистрыНакопления.ПродукцияИПолуфабрикатыВПроизводстве.ЗаказыЗапланированы(МассивСсылок);
	Возврат ЗаказыЗапланированы[Ссылка] = Истина;
	
КонецФункции

// Функция проверяет, требуется ли сформировать этапы для заказа
//
// Параметры:
//  Заказы - ДокументСсылка.ЗаказНаПроизводство2_2, Массив - Заказы на производство
// 
// Возвращаемое значение:
//   - Истина - требуется сформировать этапы
//
Функция ТребуетсяСформироватьЭтапы(Заказы) Экспорт
	
	Если Документы.ЭтапПроизводства2_2.ТребуетсяУточнитьЭтапы(Заказы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РегистрыНакопления.ПродукцияИПолуфабрикатыВПроизводстве.ТребуетсяСформироватьЭтапы(Заказы)
	
КонецФункции

// Функция рассчитывает количество заказов на производство по структуре отбора
//
// Параметры:
//  СтруктураОтборов - Структура - Структура отборов
//   *Статус
//   *Подразделение
//   *Приоритет
//   *Ответственный
// 
// Возвращаемое значение:
//   - Число - Количество заказов в определенном статусе
//
Функция КоличествоЗаказов(СтруктураОтборов = Неопределено) Экспорт
	
	КоличествоЗаказов = 0;
	
	Запрос = Новый Запрос;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Заказы.Ссылка) КАК Количество
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Проведен");
		
	ОператорВыбораЗаказов = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	
	Если СтруктураОтборов.Свойство("Статус") Тогда
		
		Запрос.УстановитьПараметр("Статус", СтруктураОтборов.Статус);
		ОператорВыбораЗаказов.Отбор.Добавить("Статус = &Статус");
		
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Подразделение") Тогда
		
		Запрос.УстановитьПараметр("Подразделение", СтруктураОтборов.Подразделение);
		ОператорВыбораЗаказов.Отбор.Добавить("Подразделение = &Подразделение");
		
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Приоритет") Тогда
		
		Запрос.УстановитьПараметр("Приоритет", СтруктураОтборов.Приоритет);
		ОператорВыбораЗаказов.Отбор.Добавить("Приоритет = &Приоритет");
		
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Ответственный") Тогда
		
		Запрос.УстановитьПараметр("Ответственный", СтруктураОтборов.Ответственный);
		ОператорВыбораЗаказов.Отбор.Добавить("Ответственный = &Ответственный");
		
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		КоличествоЗаказов = Выборка.Количество;
		
	КонецЕсли;
	
	Возврат КоличествоЗаказов;
	
КонецФункции

// Возвращает список назначений указанных в таблице "Продукция"
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаказНаПроизводство2_2 - Заказ на производство
// 
// Возвращаемое значение:
//   - Массив - список назначений указанных в таблице "Продукция"
//
Функция НазначенияПродукции(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Назначение КАК Назначение
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК Таблица
		|ГДЕ
		|	Таблица.Назначение <> &ПустоеНазначение");
	
	Запрос.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Формирует массив заказов на производство подходящих под параметры поиска
//
// Параметры:
//  Текст	 - Строка	 - текст поиска
// 
// Возвращаемое значение:
//  Массив - массив, содержащий заказы на производство
//
Функция АвтоПодборЗаказовНаПроизводство(Текст) Экспорт
	
	Запрос = Новый Запрос( 
		"ВЫБРАТЬ ПЕРВЫЕ 7
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И Таблица.Номер ПОДОБНО &Текст
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка");
		
	Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
// 
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Собственное              = "ИСТИНА";
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ДавальческаяПродукция2_2 = "ИСТИНА";
	
	// Потребности в продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Продукция.Склад";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.Продукция.Подразделение";
	
	// Потребности в продукции на всех складах.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	
	Возврат МакетФормы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

#Область НаправленияДеятельности

Функция ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ЭтоИсточникПотребности = Истина;
	СтруктураОбъекта.ОформляетсяПоЗаказу = Ложь;
	
	ФильтрХозОперация = Новый Массив();
	ФильтрХозОперация.Добавить("ПОСТУПЛЕНИЕ");
	ОписаниеТабЧасти = Новый Структура("ФильтрХозОперация, ОформляетсяПоЗаказу", ФильтрХозОперация, Ложь);
	
	СтруктураОбъекта.ТабЧасти = Новый Структура();
	СтруктураОбъекта.ТабЧасти.Вставить("Продукция", ОписаниеТабЧасти);
	
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#Область Обеспечение

#КонецОбласти

#КонецОбласти

#Область Проведение

#Область Инициализация

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаПродукцияИПолуфабрикатыВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры);
	
	// Исполнение запроса и выгрузка полученных таблиц для движений.
	ПроведениеСерверУТ.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНаПроизводство.Дата            КАК Период,
		|	ЗаказНаПроизводство.Организация     КАК Организация,
		|	ЗаказНаПроизводство.Статус          КАК Статус,
		|	ЗаказНаПроизводство.Подразделение   КАК Подразделение,
		|	ЗаказНаПроизводство.ДатаПотребности КАК ДатаПотребности,
		|	ЗаказНаПроизводство.НачатьНеРанее   КАК НачатьНеРанее
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",           Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",      Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтатусДокумента",  Реквизиты.Статус);
	Запрос.УстановитьПараметр("Подразделение",    Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ДатаПотребности",  Реквизиты.ДатаПотребности);
	Запрос.УстановитьПараметр("НачатьНеРанее",    Реквизиты.НачатьНеРанее);
	
	Запрос.УстановитьПараметр("ПустаяСсылкаНазначение",    Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаСклад",         Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("СтатусФормируется",   Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется);
	Запрос.УстановитьПараметр("СтатусКПроизводству", Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству);
	Запрос.УстановитьПараметр("СтатусЗакрыт",        Перечисления.СтатусыЗаказовНаПроизводство2_2.Закрыт);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовПроведения

Функция ТекстЗапросаТаблицаПродукцияИПолуфабрикатыВПроизводстве(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПродукцияИПолуфабрикатыВПроизводстве";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
		//Формирование потребности
		"ВЫБРАТЬ
		|	&ДатаПотребности                       КАК Период,
		|	ТаблицаПродукция.НомерСтроки           КАК НомерСтроки,
		|
		|	&Ссылка                                КАК Распоряжение,
		|	ТаблицаПродукция.Назначение            КАК Назначение,
		|	ТаблицаПродукция.Номенклатура          КАК Номенклатура,
		|	ТаблицаПродукция.Характеристика        КАК Характеристика,
		|	ТаблицаПродукция.Спецификация          КАК Спецификация,
		|
		|	ВЫБОР КОГДА ТаблицаПродукция.Склад = &ПустаяСсылкаСклад Тогда
		|		ТаблицаПродукция.Подразделение
		|	ИНАЧЕ
		|		ТаблицаПродукция.Склад
		|	КОНЕЦ                                  КАК Получатель,
		|
		|	ТаблицаПродукция.Количество            КАК Требуется,
		|	0                                      КАК Запланировано,
		|	0                                      КАК ПереданоКПроизводству,
		|	0                                      КАК ОжидаетПроизводства,
		|	0                                      КАК Производится,
		|	0                                      КАК Произведено
		|
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТаблицаПродукция
		|ГДЕ
		|	ТаблицаПродукция.Ссылка = &Ссылка
		|	И &СтатусДокумента В (
		|		&СтатусКПроизводству,
		|		&СтатусЗакрыт)";
			
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
		// График поступления выходных изделий.
		"ВЫБРАТЬ
		|	&ДатаПотребности                       КАК Период,
		|	&Ссылка                                КАК Распоряжение,
		|	ТаблицаПродукция.Назначение            КАК Назначение,
		|	ТаблицаПродукция.Номенклатура          КАК Номенклатура,
		|	ТаблицаПродукция.Характеристика        КАК Характеристика,
		|	ТаблицаПродукция.Склад                 КАК Склад,
		|	
		|	0                                      КАК ПланируемоеПоступление,
		|	0                                      КАК ПланируемоеПоступлениеПодЗаказ,
		|	
		|	ВЫБОР КОГДА ТаблицаПродукция.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТаблицаПродукция.Количество
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ                              КАК ПланируемоеПоступлениеСНеподтвержденными,
		|	
		|	ВЫБОР КОГДА ТаблицаПродукция.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				0
		|			ИНАЧЕ
		|				ТаблицаПродукция.Количество
		|		КОНЕЦ                              КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными,
		|	&Период                                КАК ДатаРаспоряжения
		|	
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТаблицаПродукция
		|ГДЕ
		|	ТаблицаПродукция.Ссылка = &Ссылка
		|	И НЕ ТаблицаПродукция.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И &СтатусДокумента В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт))";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказовРаботами";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ДатаПотребности                        КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
		|	ТабличнаяЧасть.Подразделение            КАК Подразделение,
		|	ТабличнаяЧасть.Номенклатура             КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика           КАК Характеристика,
		|	ТабличнаяЧасть.Назначение               КАК Назначение,
		|	ТабличнаяЧасть.Количество               КАК КОбеспечению
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
		|
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|	И ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|	И &СтатусДокумента В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ЗаказНаПроизводство2_2";
	СинонимТаблицыДокумента = "ТаблицаПродукция";
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("СтатусДокумента", "ТаблицаПродукция.Ссылка.Статус");
	ПереопределениеРасчетаПараметров.Вставить("СтатусФормируется", "ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется)");
	ПереопределениеРасчетаПараметров.Вставить("СтатусКПроизводству", "ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)");
	ПереопределениеРасчетаПараметров.Вставить("СтатусЗакрыт", "ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)");
	
	Если ИмяРегистра = "ДвижениеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваровДляОбновленияИБ() Экспорт
	
	ТекстЗапроса =
		// График поступления выходных изделий.
		"ВЫБРАТЬ
		|	&Ссылка                         КАК Распоряжение,
		|	ТаблицаПродукция.Назначение     КАК Назначение,
		|	ТаблицаПродукция.Номенклатура   КАК Номенклатура,
		|	ТаблицаПродукция.Характеристика КАК Характеристика,
		|	ТаблицаПродукция.Склад          КАК Склад,
		|	
		|	0                               КАК ПланируемоеПоступлениеПодЗаказ,
		|	ТаблицаПродукция.Количество     КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|	
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТаблицаПродукция
		|ГДЕ
		|	ТаблицаПродукция.Ссылка.Проведен
		|	И НЕ ТаблицаПродукция.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И НЕ ТаблицаПродукция.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт))";
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Ссылка", "ТаблицаПродукция.Ссылка");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Статус", "ТаблицаПродукция.Ссылка.Статус");
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СхемыОбособления 

Функция ТекстЗапросаСхемыОбособленияВПроизводстве()
	
	// Текст запроса модифицируется программно
	//  - создание временной таблицы ВтСхемыОбособленияВПроизводстве
	//  - подстановка параметров
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	СхемыОбособления.Распоряжение КАК Распоряжение,
	|	СхемыОбособления.Назначение   КАК Назначение,
	|
	|	СхемыОбособления.Обособленно КАК Обособленно,
	|
	|	СхемыОбособления.НазначениеПродукция КАК НазначениеПродукция,
	|	СхемыОбособления.НазначениеМатериалы КАК НазначениеМатериалы
	|
	|//ПОМЕСТИТЬ ВтСхемыОбособленияВПроизводстве
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		// настройки для обособленных строк
	|
	|		Товары.Ссылка КАК Распоряжение,
	|		Товары.Назначение КАК Назначение,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Обособленно,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА Товары.Назначение
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ КАК НазначениеПродукция,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА Товары.Назначение
	|			ИНАЧЕ ВЫБОР
	|					КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции), 
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство))
	|						ТОГДА Заказы.Назначение
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		КОНЕЦ КАК НазначениеМатериалы
	|
	|	ИЗ
	|		Документ.ЗаказНаПроизводство2_2.Продукция КАК Товары
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК ТолкающиеНаправленияДеятельности
	|					ПО Заказы.НаправлениеДеятельности = ТолкающиеНаправленияДеятельности.Ссылка
	|					И (ТолкающиеНаправленияДеятельности.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияПоНаправлениюДеятельности.ПоНаправлениюВЦелом))
	|
	|			ПО Товары.Ссылка = Заказы.Ссылка
	|	ГДЕ
	|		Товары.Ссылка В(&Распоряжения) 
	|		И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ // настройки для необособленных строк
	|	
	|	ВЫБРАТЬ
	|		Заказы.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|		ВЫБОР
	|			КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции), 
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство))
	|				ТОГДА Заказы.Назначение
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ
	|
	|	ИЗ
	|		Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК ТолкающиеНаправленияДеятельности
	|				ПО Заказы.НаправлениеДеятельности = ТолкающиеНаправленияДеятельности.Ссылка
	|				И (ТолкающиеНаправленияДеятельности.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияПоНаправлениюДеятельности.ПоНаправлениюВЦелом))
	|	ГДЕ
	|		Заказы.Ссылка В(&Распоряжения)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ // настройки для полуфабрикатов в процессе
	|	
	|	ВЫБРАТЬ
	|		Заказы.Ссылка,
	|		Заказы.Назначение,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|		Заказы.Назначение
	|	ИЗ
	|		Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК ТолкающиеНаправленияДеятельности
	|				ПО Заказы.НаправлениеДеятельности = ТолкающиеНаправленияДеятельности.Ссылка
	|				И (ТолкающиеНаправленияДеятельности.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияПоНаправлениюДеятельности.ПоНаправлениюВЦелом))
	|	ГДЕ
	|		Заказы.Ссылка В(&Распоряжения)
	|		И Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции), 
	|										ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство))
	|
	|) КАК СхемыОбособления";
		
	ТекстОбособленноеПроизводство = "
	|	Заказы.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции)
	|	И НЕ (
	|			Заказы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)
	|				И НЕ ТолкающиеНаправленияДеятельности.Ссылка ЕСТЬ NULL
	|			ИЛИ Заказы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	|		)
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбособленно", ТекстОбособленноеПроизводство);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроизводствоПоЗаказуДавальца

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	ЗаказДавальца - ДокументСсылка.ЗаказДавальца - Заказ давальца, для которого необходимо создать/перезаполнить заказ на производство продукции по заказу давальца.
//	ТекущийДокумент - ДокументСсылка.ЗаказНаПроизводство - Заказ на производство, который необходимо перезаполнить продукцией.
//
// Вовращаемое значение:
//	Результат запроса - результат запроса для заполнения табличной части продукции заказа на производство по заказу давальца.
//
Функция ОстаткиПродукцииКОбеспечениюДавальцу(МассивЗаказов, ТекущийДокумент = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура      КАК Номенклатура,
		|	Таблица.Характеристика    КАК Характеристика,
		|	Таблица.Ссылка.Назначение КАК Назначение,
		|	Таблица.Склад             КАК Склад,
		|	СУММА(Таблица.Количество) КАК Количество,
		|	МАКСИМУМ(Таблица.Спецификация) КАК Спецификация,
		|	МАКСИМУМ(Таблица.Упаковка)     КАК Упаковка,
		|	
		|	МИНИМУМ(ВЫБОР КОГДА Таблица.Ссылка.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1,1,1) ТОГДА
		|				Таблица.ДатаОтгрузки
		|			ИНАЧЕ
		|				Таблица.Ссылка.ЖелаемаяДатаОтгрузки
		|		КОНЕЦ)                     КАК ДатаПотребности
		|ПОМЕСТИТЬ ВтЗаказДавальца
		|ИЗ
		|	Документ.ЗаказДавальца.Продукция КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|	И НЕ Таблица.Отменено
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад, Таблица.Ссылка.Назначение
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Назначение     КАК Назначение,
		|	Набор.Номенклатура   КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад          КАК Склад,
		|	СУММА(Набор.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаОстатков.Назначение     КАК Назначение,
		|		ТаблицаОстатков.Номенклатура   КАК Номенклатура,
		|		ТаблицаОстатков.Характеристика КАК Характеристика,
		|		ТаблицаОстатков.Склад          КАК Склад,
		|		ТаблицаОстатков.КЗаказуОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|			(Номенклатура, Характеристика, Склад, Назначение) В(
		|				ВЫБРАТЬ
		|					Таблица.Номенклатура   КАК Номенклатура,
		|					Таблица.Характеристика КАК Характеристика,
		|					Таблица.Склад          КАК Склад,
		|					Таблица.Назначение     КАК Назначение
		|				ИЗ
		|					ВтЗаказДавальца КАК Таблица)) КАК ТаблицаОстатков
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		Движения.Назначение     КАК Назначение,
		|		Движения.Номенклатура   КАК Номенклатура,
		|		Движения.Характеристика КАК Характеристика,
		|		Движения.Склад          КАК Склад,
		|		-ВЫБОР КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.КЗаказу
		|				ИНАЧЕ
		|					-Движения.КЗаказу
		|			КОНЕЦ               КАК Количество
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов КАК Движения
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаказДавальца КАК Фильтр
		|			ПО Фильтр.Номенклатура        = Движения.Номенклатура
		|			 И Фильтр.Характеристика = Движения.Характеристика
		|			 И Фильтр.Склад          = Движения.Склад
		|			 И Фильтр.Назначение     = Движения.Назначение
		|		
		|	ГДЕ
		|		Движения.Активность
		|		И Движения.Регистратор = &ТекущийДокумент
		|		И НЕ Фильтр.Назначение ЕСТЬ NULL) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад, Набор.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказТовары.Назначение      КАК Назначение,
		|	ЗаказТовары.Номенклатура    КАК Номенклатура,
		|	ЗаказТовары.Характеристика  КАК Характеристика,
		|	ЗаказТовары.Склад           КАК Склад,
		|	
		|	ВЫБОР КОГДА ЗаказТовары.Количество <= ТаблицаОстатки.Количество ТОГДА
		|				ЗаказТовары.Количество
		|			ИНАЧЕ
		|				ЕСТЬNULL(ТаблицаОстатки.Количество, 0)
		|		КОНЕЦ                   КАК Количество,
		|	
		|	ВЫБОР КОГДА ЗаказТовары.Количество <= ТаблицаОстатки.Количество ТОГДА
		|				ЗаказТовары.Количество
		|			ИНАЧЕ
		|				ЕСТЬNULL(ТаблицаОстатки.Количество, 0)
		|		КОНЕЦ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок,
		|	
		|	ЗаказТовары.Спецификация    КАК Спецификация,
		|	ЗаказТовары.Упаковка        КАК Упаковка,
		|	
		|	ЗаказТовары.ДатаПотребности КАК ДатаПотребности,
		|	
		|	ЛОЖЬ               КАК ИзмененияЗапрещены,
		|	&РазмещениеВыпуска КАК РазмещениеВыпуска,
		|	&НачатьНеРанее     КАК НачатьНеРанее
		|ИЗ
		|	ВтЗаказДавальца КАК ЗаказТовары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстатки КАК ТаблицаОстатки
		|		ПО ТаблицаОстатки.Номенклатура   = ЗаказТовары.Номенклатура
		|		 И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
		|		 И ТаблицаОстатки.Склад          = ЗаказТовары.Склад
		|		 И ТаблицаОстатки.Назначение     = ЗаказТовары.Назначение
		|ГДЕ
		|	НЕ ТаблицаОстатки.Номенклатура ЕСТЬ NULL";
	
	Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ЗаказТовары.Упаковка", "ЗаказТовары.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки", Подстановка);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивЗаказов",     МассивЗаказов);
	Запрос.УстановитьПараметр("НачатьНеРанее",     НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("РазмещениеВыпуска", Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу);
	Запрос.УстановитьПараметр("ТекущийДокумент",   ТекущийДокумент);
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

#КонецОбласти

#Область Прочее

// Возврашает шаблон для генерации назначения документа
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказНаПроизводство2_2 - заказ
// 
// Возвращаемое значение:
//  Структура - (см. функцию Справочники.Назначения.ШаблонНового)
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если Объект.ВариантОбособления <> Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства
		И Не Объект.ВариантОбособления.Пустая() Тогда
		
		Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
			ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		КонецЕсли;
		
		ШаблонНазначения.Партнер = Объект.Партнер;
		ШаблонНазначения.Договор = Объект.Договор;
		
		// в режиме производства по целевым назначениям из давальческого сырья и по направлению деятельности, 
		//  назначение не детализируется до заказа
		Если Объект.ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции
			И ( // давальческая схема
				Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья
				// производство по толкающим направлениям деятельности
				ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство
					И НаправленияДеятельностиСервер.ЭтоТолкающееНаправлениеДеятельности(Объект.НаправлениеДеятельности)
				) Тогда
			
			ШаблонНазначения.Заказ = Неопределено;
		Иначе
			
			ШаблонНазначения.Заказ = Объект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

Функция СтатусЗаказаКПроизводству()
	
	Возврат Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству;
	
КонецФункции

#КонецОбласти 

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
	|ГДЕ
	|	(
	|		Таблица.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется)
	|		И Таблица.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ПустаяСсылка)
	|	)
	|");
	
	Данные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ЗаполнитьПустойРеквизитЗначениемПоУмолчанию(
		Параметры,
		"Документ.ЗаказНаПроизводство2_2", "ВариантОбособления", Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

