
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//								Конструктор структуры: ЗаказыСервер.ПолучитьСтруктуруКорректировкиСтрокЗаказа().
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаПроизводство2_2[НовыйСтатус];
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Реквизиты используются при заполнении заказа, поэтому получим их заранее
	
	Ответственный = Пользователи.ТекущийПользователь();
	Подразделение = ЗначениеНастроекПовтИсп.ПолучитьПодразделениеДиспетчерПоУмолчанию(Подразделение, Ответственный);
	НачатьНеРанее = НачалоДня(ТекущаяДатаСеанса());
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("РеквизитыШапки") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АдресПродукция") Тогда
			ЗаполнитьПоТаблицеТовары(ДанныеЗаполнения.АдресПродукция);
		ИначеЕсли ДанныеЗаполнения.Свойство("Товары") Тогда
			ЗаполнитьПоТаблицеТовары(ДанныеЗаполнения.Товары);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Источник") Тогда
			Если ДанныеЗаполнения.Источник = "ФормированиеЗаказовНаПроизводствоПоПлану" Тогда
				УстановитьНовыйНомерОчередиПоДатеПотребности();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		ЗаполнитьПоЗаказуДавальца(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ЗаполнитьПоЗаказуНаПеремещение(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкаНаВозврат(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		ЗаполнитьПоЗаказуНаВнутреннееПотребление(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаРемонт") Тогда
		ЗаполнитьПоЗаказуНаРемонт(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		ЗаполнитьПоЗаказуНаСборку(ДанныеЗаполнения);
	КонецЕсли;
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверитьЗаполнениеРеквизитовШапки(МассивНепроверяемыхРеквизитов, Отказ);
	ПроверитьЗаполнениеТаблицыПродукция(МассивНепроверяемыхРеквизитов, Отказ);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	Если Не НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Тип("ДокументСсылка.ЗаказНаПроизводство")) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.Назначение");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	УстановитьНовыйНомерОчереди();
	УстановитьВариантОбособления();
	
	#Область ЗаполнениеНазначений
	
	ШаблонНазначения = Документы.ЗаказНаПроизводство2_2.ШаблонНазначения(ЭтотОбъект);
	Если Справочники.Назначения.ПустойШаблон(ШаблонНазначения) Тогда
		Назначение = Справочники.Назначения.ПустаяСсылка();
	Иначе
		Справочники.Назначения.ПередЗаписьюДокумента(Назначение, ШаблонНазначения);
	КонецЕсли;
	
	#КонецОбласти
	
	Если НеобходимоОбновитьСостояниеЗаказа(РежимЗаписи) Тогда
		ДополнительныеСвойства.Вставить("ОбновитьСостояниеЗаказа");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	#Область ЗаполнениеНазначений
	
	ШаблонНазначения = Документы.ЗаказНаПроизводство2_2.ШаблонНазначения(ЭтотОбъект);
	Если Не Справочники.Назначения.ПустойШаблон(ШаблонНазначения) Тогда
		
		РеквизитыДокумента = Новый Структура("Номер, Дата, ПометкаУдаления, Партнер");
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ЭтотОбъект);
		РеквизитыДокумента.Партнер = Подразделение;
		
		Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, РеквизитыДокумента);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	МетаданныеРеквизиты = Метаданные().Реквизиты;
	
	ЭтотОбъект.ДокументОснование = Неопределено;
	
	ЭтотОбъект.Назначение = Неопределено;
	ЭтотОбъект.ВариантОбособления = Неопределено;
	
	ЭтотОбъект.Статус = МетаданныеРеквизиты.Статус.ЗначениеЗаполнения;
	ЭтотОбъект.Очередь = МетаданныеРеквизиты.Очередь.ЗначениеЗаполнения;
	
	ЭтотОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	УчетНДСУТ.ПроверитьКорректностьДеятельностиНДСПотребления(
		ЗаказПодДеятельность, 
		Организация, 
		Дата);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЗаказНаПроизводство2_2.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗаполнитьДвиженияДокумента(Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	ВыполнитьКонтрольЗаказаПослеПроведения(Отказ);
	
	Если ДополнительныеСвойства.Свойство("ОбновитьСостояниеЗаказа") Тогда
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(
			ЭтотОбъект.Ссылка);
	КонецЕсли;
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ВыполнитьКонтрольЭтаповПроизводства(Отказ, Истина);
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовНаПроизводство.ОчиститьСостояние(
		ЭтотОбъект.Ссылка);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

Процедура ЗаполнитьПоТаблицеТовары(АдресПродукция)
	
	Если ЭтоАдресВременногоХранилища(АдресПродукция) Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресПродукция);
		УдалитьИзВременногоХранилища(АдресПродукция);
	Иначе
		ТаблицаТоваров = АдресПродукция; //для заполнения была передана таблица значений.
	КонецЕсли;
	
	Продукция.Очистить();
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНачатьНеРанее = ТаблицаТоваров.Колонки.Найти("НачатьНеРанее") <> Неопределено;
	ЕстьДатаПотребности = ТаблицаТоваров.Колонки.Найти("ДатаПотребности") <> Неопределено;
	ЕстьЗаказыКОбеспечению = ТаблицаТоваров.Колонки.Найти("Заказ") <> Неопределено;
	
	ЗаказыКОбеспечению = Новый Массив;
	Если ЕстьНачатьНеРанее ИЛИ ЕстьДатаПотребности ИЛИ ЕстьЗаказыКОбеспечению Тогда
		
		НачатьНеРанееМинимальная = Неопределено;
		ДатаПотребностиМинимальная = Неопределено;
		
		Для Каждого Строка Из ТаблицаТоваров Цикл
			Если ЕстьНачатьНеРанее Тогда
				Если НачатьНеРанееМинимальная <> Неопределено Тогда
					НачатьНеРанееМинимальная = Мин(Строка.НачатьНеРанее,НачатьНеРанееМинимальная);
				Иначе
					НачатьНеРанееМинимальная = Строка.НачатьНеРанее;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьДатаПотребности Тогда
				Если ДатаПотребностиМинимальная <> Неопределено Тогда
					ДатаПотребностиМинимальная = Мин(Строка.ДатаПотребности,ДатаПотребностиМинимальная);
				Иначе
					ДатаПотребностиМинимальная = Строка.ДатаПотребности;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьЗаказыКОбеспечению Тогда
				Если ЗначениеЗаполнено(Строка.Заказ) 
					И ЗаказыКОбеспечению.Найти(Строка.Заказ) = Неопределено Тогда
					ЗаказыКОбеспечению.Добавить(Строка.Заказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НачатьНеРанееМинимальная) Тогда
			НачатьНеРанее = НачатьНеРанееМинимальная;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаПотребностиМинимальная) Тогда
			ДатаПотребности = ДатаПотребностиМинимальная;
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппируемыеПоля = "Номенклатура,Характеристика"
		+ ?(ТаблицаТоваров.Колонки.Найти("Назначение") <> Неопределено,",Назначение","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Склад") <> Неопределено,",Склад","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Подразделение") <> Неопределено,",Подразделение","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Спецификация") <> Неопределено,",Спецификация","")
		+ ?(ТаблицаТоваров.Колонки.Найти("Упаковка") <> Неопределено,",Упаковка","");
	
	СвернутаяТаблицаТоваров = ТаблицаТоваров.Скопировать(,ГруппируемыеПоля+",Количество");
	СвернутаяТаблицаТоваров.Свернуть(ГруппируемыеПоля,"Количество");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара из СвернутаяТаблицаТоваров Цикл
		
		СтрокаПродукция = Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукция, СтрокаТовара);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаПродукция, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ЗаполнитьДанныеСпецификацииВСтроках(Истина);
	
	УстановитьПриоритетИНомерОчередиПоПотребности(ЗаказыКОбеспечению);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуДавальца(ЗаказДавальца)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказДавальца.Ссылка				КАК Заказ,
		|	ЗаказДавальца.Статус				КАК СтатусДокумента,
		|	ЗаказДавальца.Приоритет				КАК Приоритет,
		|	ЗаказДавальца.НалогообложениеНДС	КАК ЗаказПодДеятельность,
		|	ЗаказДавальца.Организация			КАК Организация,
		|	ЗаказДавальца.Партнер				КАК Партнер,
		|	ЗаказДавальца.Договор				КАК Договор,
		// Ошибки заполнения
		|	НЕ ЗаказДавальца.Проведен			КАК ЕстьОшибкиПроведен,
		|	ВЫБОР КОГДА ЗаказДавальца.Статус НЕ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
		|										   ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|										   ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ВЫБОР 
		|		КОГДА ЗаказДавальца.НаправлениеДеятельности.УчетЗатрат 
		|			ТОГДА ЗаказДавальца.НаправлениеДеятельности
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказДавальца КАК ЗаказДавальца
		|ГДЕ
		|	ЗаказДавальца.Ссылка = &ЗаказДавальца
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|// Дата потребности
		|ВЫБРАТЬ
		|	МИНИМУМ(Товары.ДатаОтгрузки) КАК ДатаПотребности
		|ИЗ
		|	Документ.ЗаказДавальца.Продукция КАК Товары
		|ГДЕ
		|	НЕ Товары.Отменено
		|	И Товары.Ссылка = &ЗаказДавальца");
	
	Запрос.УстановитьПараметр("ЗаказДавальца", ЗаказДавальца);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Реквизиты = ПакетРезультатов[0].Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказДавальца,
		Реквизиты.СтатусДокумента,
		Реквизиты.ЕстьОшибкиПроведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	РеквизитыШапки = "ЗаказПодДеятельность, Организация, Приоритет, НаправлениеДеятельности, Партнер, Договор";
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты, РеквизитыШапки);
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
	ДокументОснование = ЗаказДавальца;
	ПроизводствоПоЗаказу = Истина;
	Выборка = ПакетРезультатов[1].Выбрать();
	ДатаПотребности = '00010101';
	Если Выборка.Следующий() Тогда
		ДатаПотребности = Выборка.ДатаПотребности;
	КонецЕСли;
	ДатаПотребности = Макс(ДатаПотребности, НачалоДня(ТекущаяДатаСеанса()));
	
	МассивЗаказов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаказДавальца);
	Результат = Документы.ЗаказНаПроизводство2_2.ОстаткиПродукцииКОбеспечениюДавальцу(МассивЗаказов);
	Продукция.Загрузить(Результат.Выгрузить());
	ЗаполнитьДанныеСпецификацииВСтроках(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуКлиента(ЗаказКлиента)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказКлиента.Статус             КАК СтатусДокумента,
		|	ЗаказКлиента.Приоритет          КАК Приоритет,
		|	ЗаказКлиента.Проведен           КАК Проведен,
		|	ЗаказКлиента.Склад              КАК СкладДокумента,
		|	ЗаказКлиента.Организация        КАК Организация,
		|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат 
		|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|		КОГДА Товары.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Товары.Ссылка.ЖелаемаяДатаОтгрузки
		|		ИНАЧЕ Товары.ДатаОтгрузки
		|	КОНЕЦ) КАК Дата
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ЗаказКлиента
		|	И НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	ВыборкаДатаПотребности = Результат[1].Выбрать();
	ВыборкаДатаПотребности.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	//Заполнение шапки
	Организация             = Реквизиты.Организация;
	ДокументОснование       = ЗаказКлиента;
	ЗаказПодДеятельность    = Реквизиты.НалогообложениеНДС;
	Приоритет               = Реквизиты.Приоритет;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = ВыборкаДатаПотребности.Дата;
	
	//Заполнение табличной части
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента,, Ложь);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаПеремещение(ЗаказНаПеремещение)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказНаПеремещение.Статус КАК СтатусДокумента,
		|	ЗаказНаПеремещение.Проведен КАК Проведен,
		|	ВЫБОР
		|		КОГДА ЗаказНаПеремещение.ОрганизацияПолучатель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ЗаказНаПеремещение.Организация
		|		ИНАЧЕ ЗаказНаПеремещение.ОрганизацияПолучатель
		|	КОНЕЦ КАК Организация,
		|	ЗаказНаПеремещение.Подразделение КАК Подразделение,
		|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
		|	ВЫБОР 
		|		КОГДА ЗаказНаПеремещение.НаправлениеДеятельности.УчетЗатрат 
		|			ТОГДА ЗаказНаПеремещение.НаправлениеДеятельности
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ГДЕ
		|	ЗаказНаПеремещение.Ссылка = &ЗаказНаПеремещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|		КОГДА Товары.ОкончаниеПоступления = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Товары.Ссылка.ЖелаемаяДатаПоступления
		|		ИНАЧЕ Товары.ОкончаниеПоступления
		|	КОНЕЦ) КАК Дата
		|ИЗ
		|	Документ.ЗаказНаПеремещение.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ЗаказНаПеремещение
		|	И НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	ВыборкаДатаПотребности = Результат[1].Выбрать();
	ВыборкаДатаПотребности.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказНаПеремещение,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	Организация             = Реквизиты.Организация;
	ДокументОснование       = ЗаказНаПеремещение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = ВыборкаДатаПотребности.Дата;
	
	//Заполнение табличной части
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказНаПеремещение, , Ложь);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкаНаВозврат(ЗаявкаНаВозврат)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказКлиента.Статус КАК СтатусДокумента,
		|	ЗаказКлиента.Проведен КАК Проведен,
		|	ЗаказКлиента.Склад КАК СкладДокумента,
		|	ЗаказКлиента.Организация КАК Организация,
		|	ЗаказКлиента.Подразделение КАК Подразделение,
		|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЗаказКлиента.СпособКомпенсации   КАК СпособКомпенсации,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат 
		|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|	КОНЕЦ КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаявкаНаВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|		КОГДА Товары.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Товары.Ссылка.ЖелаемаяДатаОтгрузки
		|		ИНАЧЕ Товары.ДатаОтгрузки
		|	КОНЕЦ) КАК Дата
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ЗаявкаНаВозврат
		|	И НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("ЗаявкаНаВозврат", ЗаявкаНаВозврат);
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.СпособКомпенсации <> Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		ТекстОшибки = НСтр("ru='Ввод на основании возможен для заявок на возврат со способом компенсации ""Заменить товары"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ВыборкаДатаПотребности = Результат[1].Выбрать();
	ВыборкаДатаПотребности.Следующий();
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаявкаНаВозврат,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаявкаНаВозврат;
	ЗаказПодДеятельность	= Реквизиты.НалогообложениеНДС;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = ВыборкаДатаПотребности.Дата;
	
	//Заполнение табличной части
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаявкаНаВозврат,, Ложь);

	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаВнутреннееПотребление(Заказ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Статус КАК СтатусДокумента,
		|	Заказ.Проведен КАК Проведен,
		|	Заказ.Склад КАК СкладДокумента,
		|	Заказ.Организация КАК Организация,
		|	Заказ.Подразделение КАК Подразделение,
		|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
		|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|		КОГДА Товары.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Товары.Ссылка.ЖелаемаяДатаОтгрузки
		|		ИНАЧЕ Товары.ДатаОтгрузки
		|	КОНЕЦ) КАК Дата
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Заказ
		|	И НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	ВыборкаДатаПотребности = Результат[1].Выбрать();
	ВыборкаДатаПотребности.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Заказ,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= Заказ;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = ВыборкаДатаПотребности.Дата;
	
	//Заполнение табличной части
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(Заказ, , Ложь);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаРемонт(ЗаказНаРемонт)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Статус КАК СтатусДокумента,
		|	Заказ.Проведен КАК Проведен,
		|	Заказ.Организация КАК Организация,
		|	Заказ.Подразделение КАК Подразделение,
		|	Заказ.ДатаНачала КАК ДатаПотребности,
		|	ВЫБОР
		|		КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Создан)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &ЗаказНаРемонт");
	
	Запрос.УстановитьПараметр("ЗаказНаРемонт", ЗаказНаРемонт);
	Запрос.УстановитьПараметр("НачатьНеРанее", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказНаРемонт,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказНаРемонт;
	Подразделение			= Реквизиты.Подразделение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = Реквизиты.ДатаПотребности;
	
	//Заполнение табличной части
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказНаРемонт,, Ложь);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаСборку(ЗаказНаСборку)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.Проведен               КАК Проведен,
		|	Заказ.Организация             КАК Организация,
		|	Заказ.Сделка                  КАК Сделка,
		|	Заказ.Склад                   КАК СкладДокумента,
		|	Заказ.Подразделение           КАК Подразделение,
		|	Заказ.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
		|	Заказ.НачалоСборкиРазборки    КАК ДатаПотребности,
		|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &ЗаказНаСборку");
		
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		ТекстОшибки = НСтр("ru='Ввод на основании возможен для заказов на сборку с операцией ""Сборка из комплектующих"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не Реквизиты.Проведен Тогда
		ТекстОшибки = НСтр("ru='Документ не проведен. Ввод на основании непроведенного документа запрещен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказНаСборку;
	Подразделение			= Реквизиты.Подразделение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДатаПотребности         = Реквизиты.ДатаПотребности;
	
	//Заполнение табличной части
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказНаСборку,, Ложь);
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСпецификацииВСтроках(ТолькоНезаполненные = Ложь)
	
	//Заполнение спецификаций
	МассивДанныхПоНоменклатуре = Новый Массив;
	МассивНовыхСтрок = Новый Массив;
	
	Для каждого Строка Из Продукция Цикл
		
		Если ТолькоНезаполненные И Не Строка.Спецификация.Пустая() Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПодбора = УправлениеПроизводствомКлиентСервер.СтруктураПодбораСпецификаций();
		СтруктураПодбора.Подразделение      = ЭтотОбъект.Подразделение;
		СтруктураПодбора.НачалоПроизводства = ЭтотОбъект.НачатьНеРанее;
		СтруктураПодбора.Номенклатура       = Строка.Номенклатура;
		СтруктураПодбора.Характеристика     = Строка.Характеристика;
		
		МассивДанныхПоНоменклатуре.Добавить(СтруктураПодбора);
		МассивНовыхСтрок.Добавить(Строка);
		
	КонецЦикла;
	
	// Заполним спецификации
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивНовыхСтрок, МассивДанныхПоНоменклатуре);
	
КонецПроцедуры

#КонецОбласти

#Область Очередь

Процедура УстановитьНовыйНомерОчереди()
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству
		ИЛИ ЗначениеЗаполнено(Очередь) Тогда
		
		Если Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется Тогда
			Очередь = 0;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Очередь) Тогда
		
		Очередь = Документы.ЗаказНаПроизводство2_2.НовыйНомерОчереди();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПриоритетИНомерОчередиПоПотребности(ЗаказыКОбеспечению)
	
	ЗаказыПоТипам = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(ЗаказыКОбеспечению);
	
	ЭтапыКОбеспечению = Новый Массив;
	Для Каждого Элемент Из ЗаказыПоТипам Цикл
		Если Элемент.Ключ = "Документ.ЭтапПроизводства2_2" Тогда
			ЭтапыКОбеспечению = Элемент.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НазначенияПродукции = НазначенияПродукции();
	
	Если ЭтапыКОбеспечению.Количество() = 0 
		И НазначенияПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Приоритет КАК Приоритет
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Приоритет КАК Приоритет
		|	ИЗ
		|		Документ.ЗаказКлиента КАК Т
		|	ГДЕ
		|		Т.Назначение В(&НазначенияПродукции)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Приоритет
		|	ИЗ
		|		Документ.ЗаказДавальца КАК Т
		|	ГДЕ
		|		Т.Назначение В(&НазначенияПродукции)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Распоряжение.Приоритет
		|	ИЗ
		|		Документ.ЭтапПроизводства2_2 КАК Т
		|	ГДЕ
		|		Т.Ссылка В(&ЭтапыКОбеспечению)) КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Приоритет.РеквизитДопУпорядочивания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Распоряжение КАК Распоряжение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Т
		|ГДЕ
		|	Т.Ссылка В(&ЭтапыКОбеспечению) И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)");
	
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("НазначенияПродукции", НазначенияПродукции);
	Запрос.УстановитьПараметр("ЭтапыКОбеспечению", ЭтапыКОбеспечению);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[0].Пустой() Тогда
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		
		Приоритет = Выборка.Приоритет;
		
	КонецЕсли;
	
	Если Не РезультатЗапроса[1].Пустой() Тогда
		
		Распоряжения = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку(0);
		Очередь = Документы.ЗаказНаПроизводство2_2.НомерОчередиДляВставкиПередДокументами(Распоряжения);
		
	КонецЕсли
	
КонецПроцедуры

Процедура УстановитьНовыйНомерОчередиПоДатеПотребности()
	
	Если Не ЗначениеЗаполнено(ДатаПотребности)
		ИЛИ Приоритет.Пустая()
		ИЛИ Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Заказы.Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Приоритет = &Приоритет
		|	И Заказы.Подразделение = &Подразделение
		|	И Заказы.ДатаПотребности > &ДатаПотребности
		|	И Заказы.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заказы.Приоритет.РеквизитДопУпорядочивания,
		|	Заказы.Подразделение.РеквизитДопУпорядочивания,
		|	Заказы.Очередь");
	
	Запрос.УстановитьПараметр("Приоритет", Приоритет);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДатаПотребности", ДатаПотребности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Распоряжения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Ссылка);
		Очередь = Документы.ЗаказНаПроизводство2_2.НомерОчередиДляВставкиПередДокументами(Распоряжения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СхемыОбособления 

Процедура УстановитьВариантОбособления()
	
	Если Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется
		ИЛИ ЗначениеЗаполнено(ВариантОбособления) Тогда
		
		Если Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется Тогда
			ВариантОбособления = Неопределено;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВариантОбособления) Тогда
		
		ВариантОбособления = УправлениеПроизводством.ВариантОбособленияМатериаловВПроизводстве();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольРезультатовПроведения

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Отказ)
	
	ВыполнитьКонтрольЗакрытияЗаказа(Отказ);
	
	ВыполнитьКонтрольЭтаповПроизводства(Отказ);
	
КонецПроцедуры

Процедура ВыполнитьКонтрольЗакрытияЗаказа(Отказ)
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.Закрыт Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	НеЗакрыватьБезПолнойОтработки = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПроизводствоБезПолнойОтработки");
	Если НеЗакрыватьБезПолнойОтработки = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Ссылка);
	
	ТекстЗапроса = РегистрыНакопления.ПродукцияИПолуфабрикатыВПроизводстве.ТекстЗапросаКонтрольЗакрытияЗаказа();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ВтОстаткиПоЗаказам","");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.УстановитьПараметр("НеЗакрыватьБезПолнойОтработки", НеЗакрыватьБезПолнойОтработки);
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда

		ТекстШаблона = НСтр("ru='Документ Заказ на производство № %1 от %2 отработан не полностью.
		|Закрытие заказа возможно только с полностью выполненными этапами производства.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстШаблона,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, Истина),
			Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольЭтаповПроизводства(Отказ, УдалениеПроведения = Ложь)
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется
		И Не УдалениеПроведения Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("Распоряжение", ЭтотОбъект.Ссылка);
	
	Блокировка.Заблокировать();

	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение = &Ссылка
		|	И Таблица.Проведен");
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Если УдалениеПроведения Тогда
			ТекстШаблона = НСтр("ru='Не удалось сделать непроведенным заказ на производство № %1 от %2'");
		Иначе
			ТекстШаблона = НСтр("ru='Не удалось провести заказ на производство № %1 от %2'");
		КонецЕсли;
		
		ТекстШаблона = ТекстШаблона + НСтр("ru=', т.к. по заказу запланированы этапы.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстШаблона,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, Истина),
			Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьЗаполнениеРеквизитовШапки(МассивНепроверяемыхРеквизитов, Отказ)
	
	// Реквизиты шапки, необязательные к заполнению в статусе "Формируется"
	Если СтатусЗаказаФормируется() Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РазмещениеВыпуска");
		
	КонецЕсли;
	
	Если НЕ СтатусЗаказаФормируется() Тогда
	
		// Реквизиты "Дата потребности" и "Дата начать не ранее"
		Если ЗначениеЗаполнено(ДатаПотребности) И ЗначениеЗаполнено(НачатьНеРанее) И ДатаПотребности < НачатьНеРанее Тогда
			
		ТекстОшибки = НСтр("ru='Дата потребности меньше даты начала производства'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,,
			"ДатаПотребности", 
			"Объект",
			Отказ);
		
		КонецЕсли;
		
	КонецЕсли;
	
	// Подразделение - диспетчер
	Если ЗначениеЗаполнено(Подразделение) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "ПодразделениеДиспетчер") <> Истина Тогда
	
		ТекстОшибки = НСтр("ru='Подразделением, ответственным за выполнение заказа, должно быть подразделение-диспетчер'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,,
			"Подразделение", 
			"Объект",
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыПродукция(МассивНепроверяемыхРеквизитов, Отказ)
	
	// Реквизиты "Склад" и "Подразделение" проверяются особым образом
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Подразделение");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Продукция.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Продукция.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Продукция.Склад КАК Справочник.Склады) КАК Склад,
		|	ВЫРАЗИТЬ(Продукция.Подразделение КАК Справочник.СтруктураПредприятия) КАК Подразделение
		|ПОМЕСТИТЬ ВТПродукция
		|ИЗ
		|	&ТаблицаДанных КАК Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТПродукция КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И Т.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТПродукция КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	И Т.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
	
	ТаблицаДанных = ЭтотОбъект.Продукция.Выгрузить(, 
		"НомерСтроки, 
		|Номенклатура, 
		|Склад, 
		|Подразделение");
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""Склад"" в строке %1 списка ""Продукция""'");
		
		Выборка = МассивРезультатов[1].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Выборка.НомерСтроки);
			
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.Продукция", Выборка.НомерСтроки, "Склад");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,, 
				ПутьКРеквизиту,, 
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ МассивРезультатов[2].Пустой() Тогда
		
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""Подразделение"" в строке %1 списка ""Продукция""'");
		
		Выборка = МассивРезультатов[2].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Выборка.НомерСтроки);
			
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.Продукция", Выборка.НомерСтроки, "Подразделение");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,, 
				ПутьКРеквизиту,, 
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияДокумента(Отказ)
	
	РегистрыНакопления.ПродукцияИПолуфабрикатыВПроизводстве.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

Функция НеобходимоОбновитьСостояниеЗаказа(РежимЗаписи)
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтатусКПроизводству = Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству;
	
	Если ЭтоНовый() И Статус = СтатусКПроизводству Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	Таблица.Статус,
		|	Таблица.НачатьНеРанее,
		|	Таблица.ДатаПотребности
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Проведен
		|	И Таблица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат (Статус = СтатусКПроизводству);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Статус <> ЭтотОбъект.Статус
		ИЛИ Выборка.НачатьНеРанее <> ЭтотОбъект.НачатьНеРанее
		ИЛИ Выборка.ДатаПотребности <> ЭтотОбъект.ДатаПотребности Тогда
		Возврат Истина;
	КонецЕсли;
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Номенклатура");
	Реквизиты.Добавить("Характеристика");
	Реквизиты.Добавить("Спецификация");
	Реквизиты.Добавить("Склад");
	Реквизиты.Добавить("Подразделение");
	Реквизиты.Добавить("Назначение");
	Реквизиты.Добавить("Количество");
	
	Запрос.Текст = 
		"ВЫБРАТЬ " + СтрСоединить(Реквизиты, ",") + "
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
		
	ДанныеДоИзменения = Новый Структура;
	ДанныеДоИзменения.Вставить("Продукция", Запрос.Выполнить().Выгрузить());
	
	Возврат УправлениеПроизводством.ИзмененаТабличнаяЧастьДокумента(
					ЭтотОбъект,
					ДанныеДоИзменения,
					"Продукция",
					Реквизиты);
	
КонецФункции

Функция НазначенияПродукции()
	
	Результат        = Новый Массив;
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	Для Каждого Строка из ЭтотОбъект.Продукция Цикл
		Если Строка.Назначение <> ПустоеНазначение И Результат.Найти(Строка.Назначение) = Неопределено Тогда
			Результат.Добавить(Строка.Назначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция СтатусЗаказаФормируется()
	
	Возврат ЭтотОбъект.Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
