#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Документы.СчетФактураПолученныйАванс.ДобавитьКомандуСоздатьНаОснованииИсправительныйСчетФактура(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.СчетФактураПолученныйАванс) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.СчетФактураПолученныйАванс.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.СчетФактураПолученныйАванс);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ДобавитьКомандуСоздатьНаОснованииИсправительныйСчетФактура(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.СчетФактураПолученныйАванс) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.ИсправительныйСчетФактураПолученныйАванс";
		КомандаСоздатьНаОсновании.Идентификатор = "ИсправительныйСчетФактура";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Исправительный счет-фактура'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

// Возвращает список кодов видов операций,
//	предусмотренных законодательством.
//
// Возвращаемое значение:
//	СписокЗначений - Список кодов видов операций.
//
Функция СписокКодовВидовОпераций() Экспорт
	
	СписокКодов = Новый СписокЗначений;
	
	СписокКодов.Добавить("02", НСтр("ru='02 Авансы выданные'"));
	СписокКодов.Добавить("05", НСтр("ru='05 Авансы выданные по договорам комиссии'"));
	СписокКодов.Добавить("12", НСтр("ru='12 Авансы выданные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК'"));
	СписокКодов.Добавить("28", НСтр("ru='28 Сводный комиссионный счет-фактура на аванс, п.3.1 статьи 169 НК'"));
	
	Возврат СписокКодов;
	
КонецФункции

// Переформировывает движения счетов-фактур по регистру НДСЗаписиКнигиПродаж без перепроведения документа.
// Сбрасывает статус отражения в регл. учете.
//
// Параметры:
//	МассивДокументов - Массив - Документы, движения которых необходимо актуализировать.
//	ПризнакОтменаПроведения - Булево - Признак, что переформировать движения необходимо по причине отмены проведения документа.
//
Процедура СформироватьДвиженияПоКнигеПродаж(МассивРегистраторов, ПризнакОтменаПроведения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактура.Ссылка КАК Ссылка,
	|	СчетФактура.Организация КАК Организация,
	|	Расчеты.Период КАК ДатаОтражения
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученныйАванс КАК СчетФактура
	|	ПО
	|		Расчеты.РасчетныйДокумент = СчетФактура.ДокументОснование
	|
	|ГДЕ
	|	Расчеты.Регистратор В (&МассивРегистраторов)
	|	И СчетФактура.Проведен
	|	И НЕ СчетФактура.Исправление
	|	
	//++ НЕ УТ 
	|ОБЪЕДИНИТЬ ВСЕ 
	| 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	СчетФактура.Ссылка КАК Ссылка,
	|	СчетФактура.Организация КАК Организация,
	|	ПоступлениеУслугПоЛизингу.Дата КАК ДатаОтражения
	|ИЗ 
	|	Документ.ПоступлениеУслугПоЛизингу КАК ПоступлениеУслугПоЛизингу
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеУслугПоЛизингу.Начисления КАК ТаблицаНачисления 
	|	ПО
	|		ПоступлениеУслугПоЛизингу.Ссылка = ТаблицаНачисления.Ссылка
	| 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.СчетФактураПолученныйАванс КАК СчетФактура 
	|	ПО 
	|		ТаблицаНачисления.ОбеспечительныйПлатеж = СчетФактура.ДокументОснование 
	| 
	|ГДЕ 
	|	ПоступлениеУслугПоЛизингу.Ссылка В (&МассивРегистраторов) 
	|	И СчетФактура.Проведен
	|	И НЕ СчетФактура.Исправление
	//-- НЕ УТ
	|
	|ИТОГИ ПО
	|	Ссылка
	|";
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	
	МассивСчетовФактур = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСЗаписиКнигиПокупок.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			//++ НЕ УТ
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтражениеДокументовВРеглУчете.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			//-- НЕ УТ
			
			Блокировка.Заблокировать();
			
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
			
			Движения = Новый Структура;
			
			НДСЗаписиКнигиПродаж = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей();
			НДСЗаписиКнигиПродаж.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Движения.Вставить("НДСЗаписиКнигиПродаж", НДСЗаписиКнигиПродаж);
			
			//++ НЕ УТ
			ОтражениеДокументовВРеглУчете = РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей();
			ОтражениеДокументовВРеглУчете.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Движения.Вставить("ОтражениеДокументовВРеглУчете", ОтражениеДокументовВРеглУчете);
			
			Хозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			Хозрасчетный.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Движения.Вставить("Хозрасчетный", Хозрасчетный);
			//-- НЕ УТ
			
			Регистры = Новый Структура;
			Регистры.Вставить("НДСЗаписиКнигиПродаж");
			Регистры.Вставить("НДСЗаписиКнигиПокупок");
			//++ НЕ УТ
			Регистры.Вставить("ОтражениеДокументовВРеглУчете");
			//-- НЕ УТ
			
			ИнициализироватьДанныеДокумента(Выборка.Ссылка, ДополнительныеСвойства, Регистры); 
			
			ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Ложь);
			
			//++ НЕ УТ
			ВыборкаДатыОтражения = Выборка.Выбрать();
			Пока ВыборкаДатыОтражения.Следующий() Цикл
				РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
					ДополнительныеСвойства, 
					ВыборкаДатыОтражения.Организация,
					ВыборкаДатыОтражения.ДатаОтражения);
			КонецЦикла;
			
			Если ПризнакОтменаПроведения Тогда
				// При отмене проведения регистрировать к отражению не требуется, 
				// но необходимо удалить неактуальные проводки,
				// поэтому очистим таблицу выборочной регистрции к отражению.
				ДополнительныеСвойства.ТаблицаВыборочнойРегистрацииКОтражениюВРеглУчете.Очистить();
			КонецЕсли;
			
			Документ = Новый Структура("Ссылка, Движения", Выборка.Ссылка, Движения);
			РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(Документ, ДополнительныеСвойства, Движения, Ложь);
			//-- НЕ УТ
			
			Для каждого Движение Из Движения Цикл
				Движение.Значение.Записать();
			КонецЦикла;
			//++ НЕ УТКА
			МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(Документ, ДополнительныеСвойства, Движения, Ложь);
			//-- НЕ УТКА
			МассивСчетовФактур.Добавить(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не удалось выполнить отражение в учете НДС документа ""%1"" по причине: %2'"),
					Выборка.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

// Получает реквизиты счета-фактуры.
//
// Параметры:
//	СчетФактура - ДокументСсылка.СчетФактураВыданныйАванс - Счет-фактура, данные которого необходимо получить.
//
// Возвращаемое значение:
//	Результат - Структура - Реквизиты счета-фактуры
//
Функция ДанныеСчетаФактуры(СчетФактура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СчетФактураПолученныйАванс.ДокументОснование                КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученныйАванс.Исправление
	|			ТОГДА СчетФактураПолученныйАванс.СчетФактураОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                       КАК СчетФактураОснование,
	|	СчетФактураПолученныйАванс.Организация                      КАК Организация,
	|	СчетФактураПолученныйАванс.Контрагент                       КАК Контрагент,
	|	СчетФактураПолученныйАванс.КодВидаОперации                  КАК КодВидаОперации,
	|	СчетФактураПолученныйАванс.Подразделение                    КАК Подразделение,
	|	СчетФактураПолученныйАванс.Авансы.(
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|	) КАК Авансы
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс КАК СчетФактураПолученныйАванс
	|ГДЕ
	|	СчетФактураПолученныйАванс.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Результат.Вставить("Авансы", Выборка.Авансы.Выгрузить());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает таблицу по выданным авансам и свормированным счетам-фактурам.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации - организация, для которой выполняется получение авансов
// 	НачалоПериода - Дата - начало периода, за который получаются авансы.
// 	КонецПериода - Дата - окончание периода, за который получаются авансы.
// 	РасчетныйДокумент - ДокументСсылка - Расчетый документ, по которому получаются авансы.
// 											Если Неопределено, то по всем расченым документам.
// 
// Возвращаемое значение:
// 	ВыданныеАвансы - ТаблицаЗначений - сведения по выданным авансам, содержит колонки:
// 							* ДокументОснование - ДокументСсылка - документ аванса.
// 							* Номер - Строка - номер документа аванса.
// 							* Дата - Дата - дата документа аванса.
// 							* Поставщик - СправочникСсылка.Контрагенты - контрагент, которому выдан аванс.
// 							* ВалютаДокумента - СправочникСсылка.Валюта - валюта аванса.
// 							* ВалютнаяСумма - Число - сумма в валюте аванса.
// 							* СуммаАвансаРегл - Число - сумма аванса в валюте регл. учета.
// 							* СуммаАвансаРеглНДС18 - Число - расчетная сумма НДС с аванса по ставке 18%.
// 							* СуммаАвансаРеглНДС10 - Число - расчетная сумма НДС с аванса по ставке 10%.
// 							* НомерСчетаФактуры - Строка - номер счета-фактуры, зарегистрированного по документу аванса.
// 							* ДатаСчетаФактуры - Дата - дата счета-фактуры, зарегистрированного по документу аванса.
// 							* СуммаСчетаФактуры - Число - сумма счета-фактуры, зарегистрированного по документу аванса.
// 							* СчетФактура - ДокументСсылка.СчетФактураПолученныйАванс - Ссылка на счет-фактуру, зарегистрированный по документу аванса.
//
Функция ПолучитьВыданныеАвансы(Организация, НачалоПериода, КонецПериода, РасчетныйДокумент = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК ДокументОснование,
	|	Расчеты.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|		ИНАЧЕ Расчеты.Валюта
	|	КОНЕЦ КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта = &ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРеглПриход > 0
	|				ТОГДА Расчеты.ПредоплатаРеглПриход
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта = &ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРеглРасход < 0
	|				ТОГДА -Расчеты.ПредоплатаРеглРасход
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта = &ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРеглПриход > 0
	|				ТОГДА Расчеты.ПредоплатаРеглПриход
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта = &ВалютаРегламентированногоУчета
	|					И Расчеты.ПредоплатаРеглРасход < 0
	|				ТОГДА -Расчеты.ПредоплатаРеглРасход
	|			КОГДА (Расчеты.ПредоплатаПриход + Расчеты.КВозвратуПриход) > 0
	|				ТОГДА Расчеты.ПредоплатаПриход + Расчеты.КВозвратуПриход
	|			КОГДА (Расчеты.ПредоплатаРасход + Расчеты.КВозвратуРасход) < 0
	|				ТОГДА -(Расчеты.ПредоплатаРасход + Расчеты.КВозвратуРасход)
	|		КОНЕЦ) КАК ВалютнаяСумма,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ПредоплатаРеглПриход > 0
	|				ТОГДА Расчеты.ПредоплатаРеглПриход
	|			КОГДА Расчеты.ПредоплатаРеглРасход < 0
	|				ТОГДА -Расчеты.ПредоплатаРеглРасход
	|		КОНЕЦ) КАК СуммаАвансаРегл,
	|	АналитикаУчета.Контрагент КАК Поставщик
	|ПОМЕСТИТЬ Авансы
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Обороты(
	|			&НачалоПериода, 
	|			&ОкончаниеПериода, 
	|			Запись, 
	|			(РасчетныйДокумент = &РасчетныйДокумент 
	|				ИЛИ &РасчетныйДокумент = НЕОПРЕДЕЛЕНО)) КАК Расчеты
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|	ПО 
	|		Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|ГДЕ
	|	АналитикаУчета.Организация = &Организация
	|	И ((Расчеты.ПредоплатаПриход + Расчеты.КВозвратуПриход) > 0
	|		ИЛИ (Расчеты.ПредоплатаРасход + Расчеты.КВозвратуРасход <0))
	|	И (ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).ПроведеноБанком
	|			ИЛИ НЕ Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|	И (ЛОЖЬ
	|		//УсловиеТипРасчетногоДокумента//
	|		)
	|	И (ЛОЖЬ
	|		//УсловиеТипРегистратора//
	|		)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ЗаказПоставщику,
	|	АналитикаУчета.Контрагент,
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|		ИНАЧЕ Расчеты.Валюта
	|	КОНЕЦ
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документы.Ссылка КАК ДокументОснование,
	|	НЕОПРЕДЕЛЕНО     КАК ЗаказПоставщику,
	|	Документы.Валюта КАК ВалютаДокумента,
	|	СУММА(РасшифровкаПлатежаДокумента.Сумма) КАК ВалютнаяСумма,
	|	СУММА(ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл, РасшифровкаПлатежаДокумента.Сумма)) КАК СуммаАвансаРегл,
	|	Документы.Контрагент КАК Поставщик
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК Документы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежаДокумента
	|	ПО
	|		Документы.Ссылка = РасшифровкаПлатежаДокумента.Ссылка
	|		И РасшифровкаПлатежаДокумента.ТипПлатежаПоЛизингу = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|	ПО 
	|		РасшифровкаПлатежаДокумента.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|		И РасшифровкаПлатежаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|	
	|ГДЕ
	|	Документы.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И (Документы.Ссылка = &РасчетныйДокумент 
	|		ИЛИ &РасчетныйДокумент = НЕОПРЕДЕЛЕНО)
	|	И Документы.Организация = &Организация
	|	И Документы.Проведен
	|	И Документы.ПроведеноБанком
	|
	|СГРУППИРОВАТЬ ПО
	|	Документы.Ссылка,
	|	Документы.Валюта,
	|	Документы.Контрагент,
	|	Документы.Дата,
	|	Документы.Номер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документы.Ссылка КАК ДокументОснование,
	|	НЕОПРЕДЕЛЕНО     КАК ЗаказПоставщику,
	|	Документы.Валюта КАК ВалютаДокумента,
	|	СУММА(РасшифровкаПлатежаДокумента.Сумма) КАК ВалютнаяСумма,
	|	СУММА(ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл, РасшифровкаПлатежаДокумента.Сумма)) КАК СуммаАвансаРегл,
	|	Документы.Контрагент КАК Поставщик
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК Документы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежаДокумента
	|	ПО 
	|		Документы.Ссылка = РасшифровкаПлатежаДокумента.Ссылка
	|		И РасшифровкаПлатежаДокумента.ТипПлатежаПоЛизингу = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|	ПО 
	|		РасшифровкаПлатежаДокумента.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|		И РасшифровкаПлатежаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|		
	|ГДЕ
	|	Документы.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И (Документы.Ссылка = &РасчетныйДокумент 
	|		ИЛИ &РасчетныйДокумент = НЕОПРЕДЕЛЕНО)
	|	И Документы.Организация = &Организация
	|	И Документы.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Документы.Ссылка,
	|	Документы.Валюта,
	|	Документы.Контрагент,
	|	Документы.Дата,
	|	Документы.Номер
	//-- НЕ УТ
	|;
	|
	|
	|ВЫБРАТЬ
	|	Авансы.ДокументОснование КАК ДокументОснование,
	|	Авансы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Авансы.ВалютаДокумента КАК ВалютаДокумента,
	|	Авансы.ВалютнаяСумма КАК ВалютнаяСумма,
	|	Авансы.СуммаАвансаРегл КАК СуммаАвансаРегл,
	|	Авансы.Поставщик КАК Поставщик,
	|	
	|	СУММА(ВЫБОР 
	|		КОГДА НЕ СБДС_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И СБДС_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС18)
	|			ТОГДА СБДС_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ РКО_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И РКО_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС18)
	|			ТОГДА РКО_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ АО_ОплатаПоставщикам.Ссылка ЕСТЬ NULL И РКО_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС18)
	|			ТОГДА АО_ОплатаПоставщикам.Сумма
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма18,
	|	СУММА(ВЫБОР 
	|		КОГДА НЕ СБДС_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И СБДС_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС10)
	|			ТОГДА СБДС_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ РКО_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И РКО_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС10)
	|			ТОГДА РКО_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ АО_ОплатаПоставщикам.Ссылка ЕСТЬ NULL И РКО_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС10)
	|			ТОГДА АО_ОплатаПоставщикам.Сумма
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма10,
	|	СУММА(ВЫБОР 
	|		КОГДА НЕ СБДС_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И СБДС_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА СБДС_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ РКО_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И РКО_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА РКО_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ АО_ОплатаПоставщикам.Ссылка ЕСТЬ NULL И РКО_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА АО_ОплатаПоставщикам.Сумма
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС
	|ПОМЕСТИТЬ АвансыПоСтавкам
	|ИЗ
	|	Авансы КАК Авансы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СБДС_РасшифровкаПлатежа
	|	ПО
	|		Авансы.ДокументОснование = СБДС_РасшифровкаПлатежа.Ссылка
	|		И Авансы.ЗаказПоставщику = СБДС_РасшифровкаПлатежа.Заказ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РКО_РасшифровкаПлатежа
	|	ПО
	|		Авансы.ДокументОснование = РКО_РасшифровкаПлатежа.Ссылка
	|		И Авансы.ЗаказПоставщику = РКО_РасшифровкаПлатежа.Заказ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АО_ОплатаПоставщикам
	|	ПО
	|		Авансы.ДокументОснование = АО_ОплатаПоставщикам.Ссылка
	|		И Авансы.ЗаказПоставщику = АО_ОплатаПоставщикам.Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	Авансы.ДокументОснование,
	|	Авансы.ЗаказПоставщику,
	|	Авансы.ВалютаДокумента,
	|	Авансы.Поставщик,
	|	Авансы.ВалютнаяСумма,
	|	Авансы.СуммаАвансаРегл
	|;
	|
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансыПоСтавкам.ДокументОснование      КАК ДокументОснование,
	|	АвансыПоСтавкам.ВалютаДокумента        КАК ВалютаДокумента,
	|	СУММА(АвансыПоСтавкам.ВалютнаяСумма)   КАК ВалютнаяСуммаВсего,
	|	СУММА(АвансыПоСтавкам.СуммаАвансаРегл) КАК СуммаАвансаРеглВсего,
	|	АвансыПоСтавкам.Поставщик              КАК Поставщик,
	|	СУММА(АвансыПоСтавкам.Сумма18)         КАК Сумма18,
	|	СУММА(АвансыПоСтавкам.Сумма10)         КАК Сумма10,
	|	СУММА(АвансыПоСтавкам.СуммаБезНДС)     КАК СуммаБезНДС,
	|	
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1,1,1)) КАК Дата,
	|	
	|	ЕСТЬNULL(СчетФактураПолученныйАванс.Номер, """") КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(СчетФактураПолученныйАванс.ДатаСоставления, ДАТАВРЕМЯ(1,1,1)) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(СчетФактураПолученныйАванс.Сумма, 0) КАК СуммаСчетаФактуры,
	|	ЕСТЬNULL(СчетФактураПолученныйАванс.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураПолученныйАванс.ПустаяСсылка)) КАК СчетФактура
	|
	|ИЗ
	|	АвансыПоСтавкам КАК АвансыПоСтавкам
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Документ.СчетФактураПолученныйАванс КАК СчетФактураПолученныйАванс
	|	ПО 
	|		АвансыПоСтавкам.ДокументОснование = СчетФактураПолученныйАванс.ДокументОснование
	|		И АвансыПоСтавкам.Поставщик = СчетФактураПолученныйАванс.Контрагент
	|		И СчетФактураПолученныйАванс.Проведен
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО 
	|		ДанныеПервичныхДокументов.Организация = &Организация
	|		И АвансыПоСтавкам.ДокументОснование = ДанныеПервичныхДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансыПоСтавкам.ДокументОснование,
	|	АвансыПоСтавкам.ВалютаДокумента,
	|	АвансыПоСтавкам.Поставщик,
	|	
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """"),
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1,1,1)),
	|	
	|	ЕСТЬNULL(СчетФактураПолученныйАванс.Номер, """"),
	|	ЕСТЬNULL(СчетФактураПолученныйАванс.ДатаСоставления, ДАТАВРЕМЯ(1,1,1)),
	|	ЕСТЬNULL(СчетФактураПолученныйАванс.Сумма, 0),
	|	ЕСТЬNULL(СчетФактураПолученныйАванс.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураПолученныйАванс.ПустаяСсылка))
	|
	|
	|ИМЕЮЩИЕ
	|	СУММА(АвансыПоСтавкам.Сумма18) <> 0 
	|	ИЛИ СУММА(АвансыПоСтавкам.Сумма10) <> 0
	|	ИЛИ (СУММА(АвансыПоСтавкам.Сумма18) = 0 
	|		И СУММА(АвансыПоСтавкам.Сумма10) = 0 
	|		И СУММА(АвансыПоСтавкам.СуммаБезНДС) = 0)
	|";
	
	// Могут быть авансы по документам для которых не вводится счет-фактура
	УсловиеТипРасчетногоДокумента = "";
	УсловиеТипРегистратора = "";
	ТипыДокументовОснований = Метаданные.Документы.СчетФактураПолученныйАванс.Реквизиты.ДокументОснование.Тип.Типы();
	Для Каждого ТипДокОснования Из ТипыДокументовОснований Цикл
		МетаДок = Метаданные.НайтиПоТипу(ТипДокОснования);
		УсловиеТипРасчетногоДокумента = УсловиеТипРасчетногоДокумента + "
				|		ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.РасчетныйДокумент) = Тип(Документ." + МетаДок.Имя + ")";
				
		УсловиеТипРегистратора = УсловиеТипРегистратора + "
				|		ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) = Тип(Документ." + МетаДок.Имя + ")";
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УсловиеТипРасчетногоДокумента//", УсловиеТипРасчетногоДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УсловиеТипРегистратора//",        УсловиеТипРегистратора);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация",	  Организация);
	Запрос.УстановитьПараметр("НачалоПериода", 	  НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	СтавкиНДС18 = Новый Массив;
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	
	СтавкиНДС18 = Новый Массив;
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	
	СтавкиНДС10 = Новый Массив;
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкиНДС10", СтавкиНДС10);
	
	СтавкиБезНДС = Новый Массив;
	СтавкиБезНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	СтавкиБезНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	Запрос.УстановитьПараметр("СтавкиБезНДС", СтавкиБезНДС);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыданныеАвансы = Новый ТаблицаЗначений();
	ВыданныеАвансы.Колонки.Добавить("ДокументОснование");
	ВыданныеАвансы.Колонки.Добавить("Номер");
	ВыданныеАвансы.Колонки.Добавить("Дата");
	ВыданныеАвансы.Колонки.Добавить("Поставщик");
	ВыданныеАвансы.Колонки.Добавить("ВалютаДокумента");
	
	ВыданныеАвансы.Колонки.Добавить("ВалютнаяСумма");
	
	ВыданныеАвансы.Колонки.Добавить("СуммаАвансаРегл");
	ВыданныеАвансы.Колонки.Добавить("СуммаАвансаРеглНДС18");
	ВыданныеАвансы.Колонки.Добавить("СуммаАвансаРеглНДС10");
	
	ВыданныеАвансы.Колонки.Добавить("НомерСчетаФактуры");
	ВыданныеАвансы.Колонки.Добавить("ДатаСчетаФактуры");
	ВыданныеАвансы.Колонки.Добавить("СуммаСчетаФактуры");
	ВыданныеАвансы.Колонки.Добавить("СчетФактура");
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ВыданныеАвансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Коэффициенты = Новый Массив; 
		Если Выборка.Сумма18 = 0 И Выборка.Сумма10 = 0 И Выборка.СуммаБезНДС = 0 Тогда
			// Всю сумму отнесем к ставке 18%
			Коэффициенты.Добавить(1);
		Иначе
			Коэффициенты.Добавить(Выборка.Сумма18);
		КонецЕсли;
		Коэффициенты.Добавить(Выборка.Сумма10);
		Коэффициенты.Добавить(Выборка.СуммаБезНДС);
		
		ВалютнаяСуммаПоСтавкам = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выборка.ВалютнаяСуммаВсего,
			Коэффициенты);
		
		СуммаАвансаРеглПоСтавкам = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выборка.СуммаАвансаРеглВсего,
			Коэффициенты);
			
		НоваяСтрока.ВалютнаяСумма   = ВалютнаяСуммаПоСтавкам[0] + ВалютнаяСуммаПоСтавкам[1];
		
		НоваяСтрока.СуммаАвансаРегл = СуммаАвансаРеглПоСтавкам[0] + СуммаАвансаРеглПоСтавкам[1];
		
		НоваяСтрока.СуммаАвансаРеглНДС18 = СуммаАвансаРеглПоСтавкам[0];
		НоваяСтрока.СуммаАвансаРеглНДС10 = СуммаАвансаРеглПоСтавкам[1];
		
	КонецЦикла;
	
	Возврат ВыданныеАвансы;
	
КонецФункции

//++ НЕ УТ

#Область ПроведениеПоРеглУчету

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	ТекстЗапроса - Строка - Текст запроса отражения в регл. учете.
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	ТекстВосстановлениеНДС = "
	|ВЫБРАТЬ // Восстановление НДС с выданного аванса <Дт 76.ВА :: Кт 68.02>
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(Регистр.Период, Операция.Дата) КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Регистр.НДС,0) КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным) КАК СчетДт,
	|
	|	Операция.Контрагент КАК СубконтоДт1,
	|	Операция.ДокументОснование КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетКт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Восстановление НДС с выданного аванса"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученныйАванс КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж КАК Регистр
	|	ПО
	|		Регистр.Регистратор = Операция.Ссылка
	|";
		
	ТекстВычетНДС = "
	|ВЫБРАТЬ // Принятие к вычету НДС с выданного аванса <Дт 68.02 :: Кт 76.ВА>
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(Регистр.Период, Операция.Дата) КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Регистр.НДС,0) КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР
	|		КОГДА Операция.ДокументОснование ССЫЛКА Документ.ВводОстатков
	|		ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС)
	|	КОНЕЦ КАК СчетДт,
	|
	|	ВЫБОР
	|		КОГДА Операция.ДокументОснование ССЫЛКА Документ.ВводОстатков
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|	КОНЕЦ КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным) КАК СчетКт,
	|
	|	Операция.Контрагент КАК СубконтоКт1,
	|	Операция.ДокументОснование КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Принятие к вычету НДС с выданного аванса"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученныйАванс КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок КАК Регистр
	|	ПО
	|		Регистр.Регистратор = Операция.Ссылка
	|";
	
	Возврат
		ТекстВосстановлениеНДС
		+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстВычетНДС;
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, 
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//	ТекстЗапроса - Строка - Текст запроса cоздания временных таблиц.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат "";
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСЗаписиКнигиПокупок(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	//++ НЕ УТ
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ
	
	ПроведениеСерверУТ.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						КАК Ссылка,
	|	ДанныеДокумента.Организация					КАК Организация,
	|	ДанныеДокумента.Контрагент					КАК Контрагент,
	|	ДанныеДокумента.ДокументОснование			КАК ДокументОснование,
	|	ДанныеДокумента.Дата						КАК Период,
	|	ДанныеДокумента.КодВидаОперации				КАК КодВидаОперации,
	|	ДанныеДокумента.ДатаСоставления				КАК ДатаСоставления,
	|	ДанныеДокумента.Номер						КАК Номер,
	|	ДанныеДокумента.ПолученВЭлектронномВиде		КАК ПолученВЭлектронномВиде,
	|	ДанныеДокумента.Исправление					КАК Исправление,
	|	ДанныеДокумента.НомерИсправления			КАК НомерИсправления,
	|	ДанныеДокумента.ДатаИсправления				КАК ДатаИсправления,
	|	ДанныеДокумента.СчетФактураОснование		КАК СчетФактураОснование,
	|	ДанныеДокумента.СоставленКомиссионеромОтИмениПродавца КАК СоставленКомиссионеромОтИмениПродавца,
	|	ДанныеДокумента.СводныйКомиссионный			КАК СводныйКомиссионный,
	|	ДанныеДокумента.Проведен                    КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления             КАК ПометкаУдаления,
	|	ДанныеДокумента.Комментарий                 КАК Комментарий,
	|	ДанныеДокумента.Подразделение               КАК Подразделение,
	|	ДанныеДокумента.Ответственный               КАК Ответственный,
	|	ДанныеДокумента.Сумма                       КАК Сумма
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",         			Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",    			Реквизиты.Организация);
	Запрос.УстановитьПараметр("Поставщик",      			Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ДокументОплаты", 			Реквизиты.ДокументОснование);
	Запрос.УстановитьПараметр("КодВидаОперации",			Реквизиты.КодВидаОперации);
	Запрос.УстановитьПараметр("Номер",						Реквизиты.Номер);
	Запрос.УстановитьПараметр("Дата", 						Реквизиты.ДатаСоставления);
	Запрос.УстановитьПараметр("Подразделение", 				Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Ответственный", 				Реквизиты.Ответственный);
	
	Запрос.УстановитьПараметр("СоставленКомиссионеромОтИмениПродавца", Реквизиты.СоставленКомиссионеромОтИмениПродавца);
	Запрос.УстановитьПараметр("СводныйКомиссионный", 				   Реквизиты.СводныйКомиссионный);
	
	Запрос.УстановитьПараметр("ПолученВЭлектронномВиде", 	Реквизиты.ПолученВЭлектронномВиде);
	
	Запрос.УстановитьПараметр("Исправление",				Реквизиты.Исправление);
	Запрос.УстановитьПараметр("НомерИсправления",			Реквизиты.НомерИсправления);
	Запрос.УстановитьПараметр("ДатаИсправления",			Реквизиты.ДатаИсправления);
	Запрос.УстановитьПараметр("СчетФактураОснование",		Реквизиты.СчетФактураОснование);
	
	Запрос.УстановитьПараметр("Проведен",                   Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ПометкаУдаления",            Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",    ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СчетФактураПолученныйАванс"));
	Запрос.УстановитьПараметр("Комментарий",                Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("Сумма",                      Реквизиты.Сумма);
	Запрос.УстановитьПараметр("Валюта",                     Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Контрагент",                 Реквизиты.Контрагент);
	
	ИнформацияПоИсправлению = "";
	Если Реквизиты.Исправление
		И ЗначениеЗаполнено(Реквизиты.ДатаИсправления)
		И ЗначениеЗаполнено(Реквизиты.НомерИсправления) Тогда
		ИнформацияПоИсправлению = НСтр("ru='Исправление %НомерИсправления от %ДатаИсправления'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоИсправлению = СтрЗаменить(ИнформацияПоИсправлению, "%НомерИсправления", Реквизиты.НомерИсправления);
		ИнформацияПоИсправлению = СтрЗаменить(ИнформацияПоИсправлению, "%ДатаИсправления", Реквизиты.ДатаИсправления);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоИсправлению", ИнформацияПоИсправлению);
	
КонецПроцедуры

Процедура УстановитьПараметрСчетФактураПредыдущееИсправление(Запрос)
	
	Если Запрос.Параметры.Свойство("СчетФактураПредыдущееИсправление") Тогда
		Возврат;
	КонецЕсли;
	
	Если Запрос.Параметры.Исправление Тогда
		СчетФактураПредыдущееИсправление = 
			ПредыдущийСчетФактураИсправление(
				Запрос.Параметры.Номер, 
				Запрос.Параметры.Дата, 
				Запрос.Параметры.НомерИсправления);
	Иначе
		СчетФактураПредыдущееИсправление = Неопределено;
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СчетФактураПредыдущееИсправление", СчетФактураПредыдущееИсправление);
	
КонецПроцедуры

Процедура УстановитьПараметрыРеквизитовПервичныхДокументов(Запрос)
	
	Если Запрос.Параметры.Свойство("НомерДокументаОплаты") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДанныхПервичныхДокументов = Новый Запрос;
	ЗапросДанныхПервичныхДокументов.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеПервичныхДокументов.Номер            КАК НомерДокументаОплаты,
	|	ДанныеПервичныхДокументов.Дата             КАК ДатаДокументаОплаты,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК ДатаОснования
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|	И ДанныеПервичныхДокументов.Документ = &ДокументОснование";
	
	ЗапросДанныхПервичныхДокументов.УстановитьПараметр("Организация",       Запрос.Параметры.Организация);
	ЗапросДанныхПервичныхДокументов.УстановитьПараметр("ДокументОснование", Запрос.Параметры.ДокументОплаты);
	
	Результат = ЗапросДанныхПервичныхДокументов.Выполнить();
	
	Если Результат.Пустой() Тогда
		Запрос.УстановитьПараметр("НомерДокументаОплаты", "");
		Запрос.УстановитьПараметр("ДатаДокументаОплаты",  Дата("1,1,1"));
		Запрос.УстановитьПараметр("ДатаОснования",        Дата("1,1,1"));
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Запрос.УстановитьПараметр("НомерДокументаОплаты", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			Выборка.НомерДокументаОплаты, Ложь, Истина));
		Запрос.УстановитьПараметр("ДатаДокументаОплаты",  Выборка.ДатаДокументаОплаты);
		Запрос.УстановитьПараметр("ДатаОснования",        Выборка.ДатаОснования);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрВалютаРеглУчета(Запрос)
	
	Если Запрос.Параметры.Свойство("ВалютаРеглУчета") Тогда
		Возврат;
	КонецЕсли;

	Запрос.УстановитьПараметр("ВалютаРеглУчета", ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
КонецПроцедуры

Процедура ИнициализироватьВтАвансы(Запрос) 
	
	Если Запрос.Параметры.Свойство("ВтАвансыИнициализирована") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВтАвансы = Новый Запрос;
	ЗапросВтАвансы.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВтАвансы.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	
	ЗапросВтАвансы.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаАвансы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаАвансы.Сумма <> 0
	|			ТОГДА ТаблицаАвансы.Сумма - ТаблицаАвансы.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаБезНДС,
	|	СУММА(ТаблицаАвансы.СуммаНДС) КАК НДС
	|ПОМЕСТИТЬ втАвансы
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс.Авансы КАК ТаблицаАвансы
	|ГДЕ
	|	ТаблицаАвансы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАвансы.СтавкаНДС
	|";
	ЗапросВтАвансы.Выполнить();
	
	Запрос.УстановитьПараметр("ВтАвансыИнициализирована", Истина);
	
КонецПроцедуры

Процедура ИнициализироватьВтНДСЗаписиКнигиПродаж(Запрос)
	
	Если Запрос.Параметры.Свойство("НДСЗаписиКнигиПродажИнициализирована") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьВтАвансы(Запрос);
	
	УстановитьПараметрВалютаРеглУчета(Запрос);
	УстановитьПараметрыРеквизитовПервичныхДокументов(Запрос);
	
	ЗапросДанныхДляРаспределения = Новый Запрос;
	ЗапросДанныхДляРаспределения.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросДанныхДляРаспределения.УстановитьПараметр("Организация",     Запрос.Параметры.Организация);
	ЗапросДанныхДляРаспределения.УстановитьПараметр("ДокументОплаты",  Запрос.Параметры.ДокументОплаты);
	ЗапросДанныхДляРаспределения.УстановитьПараметр("Поставщик",       Запрос.Параметры.Поставщик);
	ЗапросДанныхДляРаспределения.УстановитьПараметр("ДатаОснования",   Запрос.Параметры.ДатаОснования);
	ЗапросДанныхДляРаспределения.УстановитьПараметр("Исправление",     Запрос.Параметры.Исправление);
	ЗапросДанныхДляРаспределения.УстановитьПараметр("ВалютаРеглУчета", Запрос.Параметры.ВалютаРеглУчета);
	
	СтавкиБазНДС = Новый Массив;
	СтавкиБазНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СтавкиБазНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	ЗапросДанныхДляРаспределения.УстановитьПараметр("СтавкиБезНДС", СтавкиБазНДС);
	
	ЗапросДанныхДляРаспределения.Текст =
	"ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ВтАналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|	И АналитикаУчетаПоПартнерам.Контрагент = &Поставщик
	|;
	|
	|///////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор,
	|	РасчетыСПоставщиками.Период КАК Период,
	|	&Организация КАК Организация,
	|	&Поставщик КАК Покупатель,
	|	&ДокументОплаты КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные) КАК ВидЦенности,
	|	&ДокументОплаты КАК ДокументОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
	|	РасчетыСПоставщиками.Период КАК ДатаСобытия,
	|	СУММА(ВЫБОР 
	|		КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСПоставщиками.ПредоплатаРегл > 0
	|			ТОГДА РасчетыСПоставщиками.ПредоплатаРегл
	|		КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСПоставщиками.ПредоплатаРегл < 0
	|			ТОГДА -РасчетыСПоставщиками.ПредоплатаРегл
	|	КОНЕЦ) КАК СуммаЗачета,
	|	Значение(Перечисление.ХозяйственныеОперации.ВосстановлениеНДССВыданногоАванса) КАК ХозяйственнаяОперация,
	|	""21"" КАК КодВидаОперации
	|ПОМЕСТИТЬ ВтЗачетАвансов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтАналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	РасчетныйДокумент = &ДокументОплаты
	|	И НЕ &Исправление
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ((РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыСПоставщиками.ПредоплатаРегл > 0)
	|		ИЛИ (РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыСПоставщиками.ПредоплатаРегл < 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.Регистратор,
	|	РасчетыСПоставщиками.Период
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеУслугПоЛизингу.Ссылка КАК Регистратор,
	|	ПоступлениеУслугПоЛизингу.Дата КАК Период,
	|	ПоступлениеУслугПоЛизингу.Организация КАК Организация,
	|	ПоступлениеУслугПоЛизингу.Контрагент КАК Покупатель,
	|	&ДокументОплаты КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные) КАК ВидЦенности,
	|	&ДокументОплаты КАК ДокументОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
	|	ПоступлениеУслугПоЛизингу.Дата КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ПоступлениеУслугПоЛизингу.ВалютаВзаиморасчетов = &ВалютаРеглУчета 
	|				И ПоступлениеУслугПоЛизингу.Валюта <> &ВалютаРеглУчета
	|			ТОГДА СУММА(ТаблицаНачисления.СуммаВзаиморасчетов)
	|		ИНАЧЕ СУММА(ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл + СуммыДокументовВВалютеРегл.СуммаНДСРегл, ТаблицаНачисления.СуммаСНДС))
	|	КОНЕЦ КАК СуммаЗачета,
	|	Значение(Перечисление.ХозяйственныеОперации.ВосстановлениеНДССВыданногоАванса) КАК ХозяйственнаяОперация,
	|	""21"" КАК КодВидаОперации
	|ИЗ
	|	Документ.ПоступлениеУслугПоЛизингу.Начисления КАК ТаблицаНачисления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеУслугПоЛизингу КАК ПоступлениеУслугПоЛизингу
	|	ПО
	|		ТаблицаНачисления.Ссылка = ПоступлениеУслугПоЛизингу.Ссылка
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|	ПО
	|		ТаблицаНачисления.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|		И ТаблицаНачисления.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|ГДЕ
	|	НЕ &Исправление
	|	И ТаблицаНачисления.ОбеспечительныйПлатеж = &ДокументОплаты
	|	И ПоступлениеУслугПоЛизингу.Проведен
	|	И ПоступлениеУслугПоЛизингу.Организация = &Организация
	|	И ПоступлениеУслугПоЛизингу.Контрагент = &Поставщик
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеУслугПоЛизингу.Ссылка
	//-- НЕ УТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР 
	|			КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
	|				ТОГДА РасчетыСПоставщиками.ПредоплатаРегл
	|			КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|				ТОГДА -РасчетыСПоставщиками.ПредоплатаРегл
	|		КОНЕЦ) КАК Аванс
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтАналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	НЕ &Исправление
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И РасчетыСПоставщиками.РасчетныйДокумент = &ДокументОплаты
	|	И ((РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыСПоставщиками.ПредоплатаРегл > 0)
	|		ИЛИ (РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыСПоставщиками.ПредоплатаРегл < 0))
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл, РасшифровкаПлатежаДокумента.Сумма)) КАК Аванс
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК Документы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежаДокумента
	|	ПО
	|		Документы.Ссылка = РасшифровкаПлатежаДокумента.Ссылка
	|		И РасшифровкаПлатежаДокумента.ТипПлатежаПоЛизингу = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|	ПО 
	|		РасшифровкаПлатежаДокумента.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|		И РасшифровкаПлатежаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|	
	|ГДЕ
	|	Документы.Ссылка = &ДокументОплаты 
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И Документы.Проведен
	|	И Документы.ПроведеноБанком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл, РасшифровкаПлатежаДокумента.Сумма)) КАК Аванс
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК Документы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежаДокумента
	|	ПО 
	|		Документы.Ссылка = РасшифровкаПлатежаДокумента.Ссылка
	|		И РасшифровкаПлатежаДокумента.ТипПлатежаПоЛизингу = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|	ПО 
	|		РасшифровкаПлатежаДокумента.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|		И РасшифровкаПлатежаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|		
	|ГДЕ
	|	Документы.Ссылка = &ДокументОплаты 
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И Документы.Проведен
	//-- НЕ УТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация        КАК Организация,
	|	&Поставщик          КАК Поставщик,
	|	&ДокументОплаты     КАК СчетФактура,
	|	&ДатаОснования      КАК ДатаОплаты,
	|	Авансы.СтавкаНДС    КАК СтавкаНДС,
	|	Авансы.СуммаБезНДС  КАК СуммаБезНДС,
	|	Авансы.НДС          КАК НДС
	|ИЗ
	|	втАвансы КАК Авансы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗачетАвансов.Регистратор КАК Регистратор,
	|	ЗачетАвансов.Период КАК Период,
	|	ЗачетАвансов.Организация КАК Организация,
	|	ЗачетАвансов.Покупатель КАК Покупатель,
	|	ЗачетАвансов.СчетФактура КАК СчетФактура,
	|	ЗачетАвансов.ВидЦенности КАК ВидЦенности,
	|	ЗачетАвансов.ДокументОплаты КАК ДокументОплаты,
	|	ЗачетАвансов.Событие КАК Событие,
	|	ЗачетАвансов.ДатаСобытия КАК ДатаСобытия,
	|	ЗачетАвансов.СуммаЗачета КАК СуммаЗачета,
	|	ЗачетАвансов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗачетАвансов.КодВидаОперации КАК КодВидаОперации,
	|	МАКСИМУМ(ВЫБОР 
	|		КОГДА ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL 
	|				И ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL 
	//++ НЕ УТ 
	|				И ПоступлениеУслугПоЛизингу.Ссылка ЕСТЬ NULL 
	//-- НЕ УТ 
	|				И ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL 
	|				И ВыкупВозвратнойТарыУПоставщика.Ссылка ЕСТЬ NULL 
	|				И ОтчетКомиссионера.Ссылка ЕСТЬ NULL
	//++ НЕ УТКА
	|				И ОтчетПереработчика.Ссылка ЕСТЬ NULL 
	//-- НЕ УТКА
	|				И ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL 
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ) КАК ЕстьДокументЗачетаАванса,
	|	СУММА(ВЫБОР 
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL 
	|				И ПоступлениеТоваровУслуг.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ПоступлениеТоваровУслуг.СуммаСНДС
	|		КОГДА НЕ  ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL 
	|				И ПоступлениеУслугПрочихАктивов.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ПоступлениеУслугПрочихАктивов.СуммаСНДС
	//++ НЕ УТ 
	|		КОГДА НЕ ПоступлениеУслугПоЛизингу.Ссылка ЕСТЬ NULL 
	|				И ПоступлениеУслугПоЛизингу.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ПоступлениеУслугПоЛизингу.СуммаСНДС
	//-- НЕ УТ 
	|		КОГДА НЕ КорректировкаПоступления.Ссылка ЕСТЬ NULL 
	|				И КорректировкаПоступления.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА КорректировкаПоступления.СуммаСНДС
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL 
	|				И ПередачаТоваровМеждуОрганизациями.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ПередачаТоваровМеждуОрганизациями.СуммаСНДС
	|		КОГДА НЕ ВыкупВозвратнойТарыУПоставщика.Ссылка ЕСТЬ NULL 
	|				И ВыкупВозвратнойТарыУПоставщика.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ВыкупВозвратнойТарыУПоставщика.СуммаСНДС
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL 
	|				И ОтчетКомиссионера.СтавкаНДСВознаграждения В (&СтавкиБезНДС)
	|			ТОГДА ОтчетКомиссионера.СуммаВознаграждения
	//++ НЕ УТКА
	|		КОГДА НЕ ОтчетПереработчика.Ссылка ЕСТЬ NULL 
	|				И ОтчетПереработчика.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ОтчетПереработчика.СуммаСНДС
	//-- НЕ УТКА
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL 
	|				И ОтчетПоКомиссииМеждуОрганизациями.СтавкаНДСВознаграждения В (&СтавкиБезНДС)
	|			ТОГДА ОтчетПоКомиссииМеждуОрганизациями.СуммаВознаграждения
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаДокументаБезНДС,
	|	СУММА(ВЫБОР 
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL 
	|				И НЕ ПоступлениеТоваровУслуг.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ПоступлениеТоваровУслуг.СуммаСНДС
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL 
	|				И НЕ ПоступлениеУслугПрочихАктивов.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ПоступлениеУслугПрочихАктивов.СуммаСНДС
	//++ НЕ УТ 
	|		КОГДА НЕ ПоступлениеУслугПоЛизингу.Ссылка ЕСТЬ NULL 
	|				И НЕ ПоступлениеУслугПоЛизингу.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ПоступлениеУслугПоЛизингу.СуммаСНДС
	//-- НЕ УТ 
	|		КОГДА НЕ КорректировкаПоступления.Ссылка ЕСТЬ NULL 
	|				И НЕ КорректировкаПоступления.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА КорректировкаПоступления.СуммаСНДС
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL 
	|				И НЕ ПередачаТоваровМеждуОрганизациями.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ПередачаТоваровМеждуОрганизациями.СуммаСНДС
	|		КОГДА НЕ ВыкупВозвратнойТарыУПоставщика.Ссылка ЕСТЬ NULL 
	|				И НЕ ВыкупВозвратнойТарыУПоставщика.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ВыкупВозвратнойТарыУПоставщика.СуммаСНДС
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL 
	|				И НЕ ОтчетКомиссионера.СтавкаНДСВознаграждения В (&СтавкиБезНДС)
	|			ТОГДА ОтчетКомиссионера.СуммаВознаграждения
	//++ НЕ УТКА
	|		КОГДА НЕ ОтчетПереработчика.Ссылка ЕСТЬ NULL 
	|				И НЕ ОтчетПереработчика.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ОтчетПереработчика.СуммаСНДС
	//-- НЕ УТКА
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL 
	|				И НЕ ОтчетПоКомиссииМеждуОрганизациями.СтавкаНДСВознаграждения В (&СтавкиБезНДС)
	|			ТОГДА ОтчетПоКомиссииМеждуОрганизациями.СуммаВознаграждения
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаДокументаСНДС
	|ИЗ
	|	втЗачетАвансов КАК ЗачетАвансов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	ПО
	|		ЗачетАвансов.Регистратор = ПоступлениеТоваровУслуг.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеУслугПрочихАктивов.Расходы КАК ПоступлениеУслугПрочихАктивов
	|	ПО
	|		ЗачетАвансов.Регистратор = ПоступлениеУслугПрочихАктивов.Ссылка
	//++ НЕ УТ 
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеУслугПоЛизингу.Начисления КАК ПоступлениеУслугПоЛизингу
	|	ПО
	|		ЗачетАвансов.Регистратор = ПоступлениеУслугПоЛизингу.Ссылка
	//-- НЕ УТ 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаПоступления.Расхождения КАК КорректировкаПоступления
	|	ПО
	|		ЗачетАвансов.Регистратор = КорректировкаПоступления.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ПередачаТоваровМеждуОрганизациями
	|	ПО
	|		ЗачетАвансов.Регистратор = ПередачаТоваровМеждуОрганизациями.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ВыкупВозвратнойТарыУПоставщика.Товары КАК ВыкупВозвратнойТарыУПоставщика
	|	ПО
	|		ЗачетАвансов.Регистратор = ВыкупВозвратнойТарыУПоставщика.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетКомитенту КАК ОтчетКомиссионера
	|	ПО
	|		ЗачетАвансов.Регистратор = ОтчетКомиссионера.Ссылка
	//++ НЕ УТКА 
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|	ПО
	|		ЗачетАвансов.Регистратор = ОтчетПереработчика.Ссылка
	//-- НЕ УТКА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ПО
	|		ЗачетАвансов.Регистратор = ОтчетПоКомиссииМеждуОрганизациями.Ссылка
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗачетАвансов.Регистратор,
	|	ЗачетАвансов.Период,
	|	ЗачетАвансов.Организация,
	|	ЗачетАвансов.Покупатель,
	|	ЗачетАвансов.СчетФактура,
	|	ЗачетАвансов.ВидЦенности,
	|	ЗачетАвансов.ДокументОплаты,
	|	ЗачетАвансов.Событие,
	|	ЗачетАвансов.ДатаСобытия,
	|	ЗачетАвансов.СуммаЗачета,
	|	ЗачетАвансов.ХозяйственнаяОперация,
	|	ЗачетАвансов.КодВидаОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|";
	
	Результат = ЗапросДанныхДляРаспределения.ВыполнитьПакет();
	
	ТаблицаАванс = Результат[2].Выгрузить();
	ТаблицаАвансНачислениеНДС = Результат[3].Выгрузить();
	ТаблицаЗачетАванса = Результат[4].Выгрузить();
	ДатаПолучения = Запрос.Параметры.Период;
	НДСЗаписиКнигиПродаж = ВыполнитьЗачетАванса(ТаблицаАванс, ТаблицаАвансНачислениеНДС, ТаблицаЗачетАванса, ДатаПолучения);
	
	ЗапросВтНДСЗаписиКнигиПродаж = Новый Запрос;
	ЗапросВтНДСЗаписиКнигиПродаж.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВтНДСЗаписиКнигиПродаж.УстановитьПараметр("НДСЗаписиКнигиПродаж", НДСЗаписиКнигиПродаж);
	ЗапросВтНДСЗаписиКнигиПродаж.Текст =
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера,
	|	НДСЗаписиКнигиПродаж.СуммаБезНДС,
	|	НДСЗаписиКнигиПродаж.НДС,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации
	|ПОМЕСТИТЬ ВтНДСЗаписиКнигиПродаж
	|ИЗ
	|	&НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж";
	
	ЗапросВтНДСЗаписиКнигиПродаж.Выполнить();
	
	Запрос.УстановитьПараметр("НДСЗаписиКнигиПродажИнициализирована", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрВалютаРеглУчета(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                   КАК Период,
	|	&Организация              КАК Организация,
	|	&Поставщик                КАК Контрагент,
	|	&Ссылка                   КАК СчетФактура,
	|	&Период                   КАК ДатаВыставленияПолучения,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	ВЫБОР
	|		КОГДА &ПолученВЭлектронномВиде
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ                     КАК КодСпособаВыставленияПолучения,
	|	&КодВидаОперации          КАК КодВидаОперации,
	|	&Номер                    КАК НомерСчетаФактуры,
	|	&Дата                     КАК ДатаСчетаФактуры,
	|	&ВалютаРеглУчета          КАК Валюта,
	|	ВЫБОР 
	|		КОГДА &Исправление
	|			ТОГДА &НомерИсправления 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                     КАК НомерИсправления,
	|	ВЫБОР 
	|		КОГДА &Исправление
	|			ТОГДА &ДатаИсправления 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                     КАК ДатаИсправления,
	|	
	|	МАКСИМУМ(Продавцы.Продавец) КАК Продавец, 
	|	0                           КАК ИндексСтроки,
	|
	|	СУММА(ТаблицаАвансы.Сумма)    КАК СуммаПоСчетуФактуре,
	|	СУММА(ТаблицаАвансы.СуммаНДС) КАК СуммаНДС,
	|	0                         КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	0                         КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	0                         КАК СуммаНДСРазницаУменьшение,
	|	0                         КАК СуммаНДСРазницаУвеличение,
	|	ЛОЖЬ                      КАК ПоСтавкеБезНДС,
	|	ЛОЖЬ                      КАК СчетФактураНеВыставляется,
	|	
	|	0                         КАК СуммаПоСчетуФактуреКомиссия,
	|	0                         КАК СуммаНДСКомиссия,
	|	0                         КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	0                         КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	0                         КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	0                         КАК СуммаНДСРазницаУвеличениеКомиссия,
	|	""""                      КАК КодВидаОперацииКомиссия
	|
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс.Авансы КАК ТаблицаАвансы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученныйАванс.Продавцы КАК Продавцы
	|	ПО
	|		ТаблицаАвансы.Ссылка = Продавцы.Ссылка
	|		И &СоставленКомиссионеромОтИмениПродавца
	|		И НЕ &СводныйКомиссионный
	|ГДЕ
	|	ТаблицаАвансы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                   КАК Период,
	|	&Организация              КАК Организация,
	|	&Поставщик                КАК Контрагент,
	|	&Ссылка                   КАК СчетФактура,
	|	&Период                   КАК ДатаВыставленияПолучения,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	ВЫБОР
	|		КОГДА &ПолученВЭлектронномВиде
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ                     КАК КодСпособаВыставленияПолучения,
	|	&КодВидаОперации          КАК КодВидаОперации,
	|	&Номер                    КАК НомерСчетаФактуры,
	|	&Дата                     КАК ДатаСчетаФактуры,
	|	&ВалютаРеглУчета          КАК Валюта,
	|	ВЫБОР 
	|		КОГДА &Исправление
	|			ТОГДА &НомерИсправления 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                     КАК НомерИсправления,
	|	ВЫБОР 
	|		КОГДА &Исправление
	|			ТОГДА &ДатаИсправления 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                     КАК ДатаИсправления,
	|	
	|	Продавцы.Продавец         КАК Продавец,
	|	Продавцы.НомерСтроки      КАК ИндексСтроки,
	|	
	|	0                         КАК СуммаПоСчетуФактуре,
	|	0                         КАК СуммаНДС,
	|	0                         КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	0                         КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	0                         КАК СуммаНДСРазницаУменьшение,
	|	0                         КАК СуммаНДСРазницаУвеличение,
	|	ЛОЖЬ                      КАК ПоСтавкеБезНДС,
	|	ЛОЖЬ                      КАК СчетФактураНеВыставляется,
	|	
	|	0                         КАК СуммаПоСчетуФактуреКомиссия,
	|	0                         КАК СуммаНДСКомиссия,
	|	0                         КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	0                         КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	0                         КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	0                         КАК СуммаНДСРазницаУвеличениеКомиссия,
	|	""""                      КАК КодВидаОперацииКомиссия
	|
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс.Продавцы КАК Продавцы
	|ГДЕ
	|	Продавцы.Ссылка = &Ссылка
	|	И &СоставленКомиссионеромОтИмениПродавца
	|	И &СводныйКомиссионный
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСЗаписиКнигиПокупок(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСЗаписиКнигиПокупок";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ИнициализироватьВтАвансы(Запрос);
	
	УстановитьПараметрыРеквизитовПервичныхДокументов(Запрос);
	УстановитьПараметрСчетФактураПредыдущееИсправление(Запрос);
	
#Область ТекстЗапросаИсправлениеСторно
	ТекстЗапросаИсправлениеСторно =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	НДСЗаписиКнигиПокупок.Организация КАК Организация,
	|	НДСЗаписиКнигиПокупок.Поставщик КАК Поставщик,
	|	НДСЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПокупок.ВидЦенности КАК ВидЦенности,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|			ТОГДА ИСТИНА
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, Квартал) < НАЧАЛОПЕРИОДА(&Период, Квартал)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.КорректируемыйПериод <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА НДСЗаписиКнигиПокупок.КорректируемыйПериод
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, Квартал) < НАЧАЛОПЕРИОДА(&Период, Квартал)
	|			ТОГДА НДСЗаписиКнигиПокупок.Период
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	&СчетФактураПредыдущееИсправление КАК ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПокупок.СтавкаНДС КАК СтавкаНДС,
	|	-НДСЗаписиКнигиПокупок.СуммаБезНДС КАК СуммаБезНДС,
	|	-НДСЗаписиКнигиПокупок.НДС КАК НДС,
	|	НДСЗаписиКнигиПокупок.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации КАК КодВидаОперации,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты КАК ДатаДокументаОплаты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок 
	|ГДЕ
	|	&Исправление
	|	И НДСЗаписиКнигиПокупок.Регистратор <> &Ссылка
	|	И НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.Поставщик = &Поставщик
	|	И НДСЗаписиКнигиПокупок.СчетФактура = &ДокументОплаты
	|	И НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура = &СчетФактураПредыдущееИсправление
	|	И НДСЗаписиКнигиПокупок.СуммаБезНДС > 0
	|";
#КонецОбласти
	
#Область ТекстЗапросаАвансы
	ТекстЗапросаАвансы = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	&Поставщик КАК Поставщик,
	|	&ДокументОплаты КАК СчетФактура,
	|	&ДатаОснования КАК ДатаОплаты,
	|	&ДокументОплаты КАК ДокументОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные) КАК ВидЦенности,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	&Период КАК ДатаСобытия,
	|	ЛОЖЬ КАК ЗаписьДополнительногоЛиста,
	|	NULL КАК КорректируемыйПериод,
	|	ВЫБОР 
	|		КОГДА &Исправление
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИсправленныйСчетФактура,
	|	ТаблицаАвансы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаАвансы.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаАвансы.НДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВычетНДССВыданногоАванса) КАК ХозяйственнаяОперация,
	|	"""" КАК КодВидаОперации,
	|	&НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	&ДатаДокументаОплаты КАК ДатаДокументаОплаты
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс КАК Операция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		втАвансы КАК ТаблицаАвансы
	|	ПО 
	|		ИСТИНА
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|";
#КонецОбласти
	
	ТекстЗапроса = ТекстЗапросаИсправлениеСторно 
		+ Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" 
		+ Символы.ПС + ТекстЗапросаАвансы;
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСЗаписиКнигиПродаж";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ИнициализироватьВтНДСЗаписиКнигиПродаж(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера,
	|	НДСЗаписиКнигиПродаж.СуммаБезНДС,
	|	НДСЗаписиКнигиПродаж.НДС,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации
	|ИЗ
	|	ВтНДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТ

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьВтНДСЗаписиКнигиПродаж(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                           КАК Период,
	|	&Организация                      КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)      КАК ДатаОтражения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период                                          КАК Период,
	|	НДСЗаписиКнигиПродаж.Организация                 КАК Организация,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ) КАК ДатаОтражения
	|ИЗ
	|	ВтНДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТ

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	ВЫБОР ТИПЗНАЧЕНИЯ(&ДокументОплаты)
	|		КОГДА ТИП(Документ.ВводОстатков)
	|			ТОГДА ВЫБОР ДанныеДокумента.ДокументОснование.ТипОперации
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		КОГДА ТИП(Документ.АвансовыйОтчет)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АвансовыйОтчет)
	|		КОГДА ТИП(Документ.ВзаимозачетЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|		ИНАЧЕ ДанныеДокумента.ДокументОснование.ХозяйственнаяОперация
	|	КОНЕЦ                                   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ДокументОснование.Партнер
	|	                                        КАК Партнер,
	|	&Контрагент                             КАК Контрагент,
	|
	|	ДанныеДокумента.ДокументОснование.НаправлениеДеятельности
	|	                                        КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ДокументОснование.Склад КАК МестоХранения,
	|	&Подразделение                          КАК Подразделение,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Валюта                                 КАК Валюта,
	|	&Сумма                                  КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&ИнформацияПоИсправлению                КАК Дополнительно,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&Номер                                  КАК НомерПервичногоДокумента
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ВыполнитьЗачетАванса(ТаблицаАванс, ТаблицаАвансНачислениеНДС, ТаблицаЗачетАванса, ДатаПолучения)
	
	ТаблицаЗаписиКнигиПродаж = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаЗаписиКнигиПродаж.Колонки.Удалить("Активность");
	
	АвансМассивСуммаБезНДС = Новый Массив();
	АвансМассивСуммаНДС = Новый Массив();
	
	АвансСуммаБезНДС = 0;
	АвансСуммаНДС    = 0;
	АвансСуммаСНДС   = 0;
	Для Каждого СтрокаАванса Из ТаблицаАвансНачислениеНДС Цикл
		АвансМассивСуммаБезНДС.Добавить(СтрокаАванса.СуммаБезНДС);
		АвансМассивСуммаНДС.Добавить(СтрокаАванса.НДС);
		
		АвансСуммаБезНДС = АвансСуммаБезНДС + СтрокаАванса.СуммаБезНДС;
		АвансСуммаНДС = АвансСуммаНДС + СтрокаАванса.НДС;
		АвансСуммаСНДС = АвансСуммаСНДС + СтрокаАванса.СуммаБезНДС + СтрокаАванса.НДС;
	КонецЦикла; 
	
	НезачтеннаяСуммаАванса = ТаблицаАванс.Итог("Аванс");
	
	Для Каждого ПогашенныйАвансПоСФ Из ТаблицаЗачетАванса Цикл
		
		Если АвансСуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НезачтеннаяСуммаАванса = НезачтеннаяСуммаАванса - ПогашенныйАвансПоСФ.СуммаЗачета;
		
		Если ПогашенныйАвансПоСФ.ЕстьДокументЗачетаАванса Тогда
			// Определим по пропорции сумму зачета, которая относится к поступлению с НДС.
			Коэффициенты = Новый Массив;
			Коэффициенты.Добавить(ПогашенныйАвансПоСФ.СуммаДокументаСНДС);
			Коэффициенты.Добавить(ПогашенныйАвансПоСФ.СуммаДокументаБезНДС);
			РаспределениеСуммыЗачета = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
											ПогашенныйАвансПоСФ.СуммаЗачета,
											Коэффициенты);
			СуммаЗачета = РаспределениеСуммыЗачета[0];
		Иначе
			СуммаЗачета = ПогашенныйАвансПоСФ.СуммаЗачета;
		КонецЕсли;
		
		Если ПогашенныйАвансПоСФ.Период >= ДатаПолучения Тогда
			СуммаСНДС = Мин(СуммаЗачета, АвансСуммаСНДС);
			ДатаЗачетаАванса = ПогашенныйАвансПоСФ.Период;
		Иначе
			СуммаСНДС = 0;
			ДатаЗачетаАванса = ДатаПолучения;
		КонецЕсли;
		
		ОстатокСуммыАвансаСНДС = (АвансСуммаСНДС - СуммаСНДС);
		Если ОстатокСуммыАвансаСНДС > НезачтеннаяСуммаАванса Тогда
			// Откорректируем сумму, с которой выполняется восстановление с учетом остатка незачтенного аванса.
			СуммаСНДС = СуммаСНДС + (ОстатокСуммыАвансаСНДС - НезачтеннаяСуммаАванса);
		КонецЕсли;
		
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезНДС = Окр(АвансСуммаБезНДС * СуммаСНДС / АвансСуммаСНДС, 2);
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
		
		АвансСуммаБезНДС = АвансСуммаБезНДС - СуммаБезНДС;
		АвансСуммаСНДС   = АвансСуммаСНДС - СуммаСНДС;
		
		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаБезНДС, АвансМассивСуммаБезНДС);
		КонецЕсли;
		
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаНДС, АвансМассивСуммаНДС);
		КонецЕсли; 
		
		Счетчик = 0;
		
		//Зачет аванса - записи книги продаж
		Для Каждого СтрокаАванса Из ТаблицаАвансНачислениеНДС Цикл
			
			Если ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0) = 0 
				И ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0) = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаРезультата = ТаблицаЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, ПогашенныйАвансПоСФ);
			СтрокаРезультата.Период         = ДатаЗачетаАванса;
			СтрокаРезультата.СчетФактура	= СтрокаАванса.СчетФактура;
			СтрокаРезультата.Покупатель		= СтрокаАванса.Поставщик;
			СтрокаРезультата.СтавкаНДС		= СтрокаАванса.СтавкаНДС;
			СтрокаРезультата.ДатаОплаты		= СтрокаАванса.ДатаОплаты;

			СтрокаРезультата.СуммаБезНДС	= ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик],0);
			СтрокаРезультата.НДС			=  ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик],0);

			Счетчик = Счетчик + 1;
			
		КонецЦикла; 
	КонецЦикла;
	
	Возврат ТаблицаЗаписиКнигиПродаж;
	
КонецФункции

Функция ПредыдущийСчетФактураИсправление(НомерСчетаФактуры, ДатаСчетафактуры, НомерИсправления)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактура.Ссылка           КАК ИсправленныйСчетФактура,
	|	СчетФактура.НомерИсправления КАК НомерИсправления
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Номер ПОДОБНО &Номер
	|	И НАЧАЛОПЕРИОДА(СчетФактура.ДатаСоставления, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И СчетФактура.Проведен
	|	И СчетФактура.Исправление
	|	И СчетФактура.НомерИсправления <> &НомерИсправления
	|";
	Запрос.УстановитьПараметр("Номер",            НомерСчетаФактуры);
	Запрос.УстановитьПараметр("Дата",             ДатаСчетафактуры);
	Запрос.УстановитьПараметр("НомерИсправления", НомерИсправления);
	
	ПредыдущийНомер = 0;
	ИсправленныйСчетФактура = Неопределено;
	Если Не ЗначениеЗаполнено(НомерИсправления) Тогда
		НомерИсправленияЧислом = 0;
	Иначе
		НомерИсправленияЧислом = Число(НомерИсправления);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерИзВыборки = Число(Выборка.НомерИсправления);
		Если НомерИзВыборки < НомерИсправленияЧислом
			И НомерИзВыборки > ПредыдущийНомер Тогда
			ПредыдущийНомер = НомерИзВыборки;
			ИсправленныйСчетФактура = Выборка.ИсправленныйСчетФактура;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИсправленныйСчетФактура;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецЕсли
