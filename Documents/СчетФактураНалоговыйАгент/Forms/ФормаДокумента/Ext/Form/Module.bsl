// 4D:ERP для Беларуси
// {
// Форма изменена
// }
// 4D
 
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// 4D:ERP для Беларуси
// ЭСЧФ
// {
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ
// }
// 4D

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СчетФактураНалоговыйАгент", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// 4D:ERP для Беларуси, ВалентинМ, 19.06.2017 15:03:18 
	// ЭСЧФ
	// {
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ПроведениеИзФормыДокумента") Тогда
		ТекущийОбъект.ДополнительныеСвойства.ПроведениеИзФормыДокумента = Истина;
	КонецЕсли;
	// }
	// 4D 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентам
	
	ЗаполнитьСписокКодовВидовОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупательПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ОбновитьПредставлениеВидаОперации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокКодовВидовОпераций.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("КодВидаОперацииНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.КодВидаОперации = ВыбранныйЭлемент.Значение;
		ОбновитьПредставлениеВидаОперации(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

// 4D:ERP для Беларуси
// ЭСЧФ
// {
&НаКлиенте
Процедура ВыставленПриИзменении(Элемент)
	
	ВыставленПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыставленияПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.ДатаВыставления);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентам
	
КонецПроцедуры

&НаСервере
Процедура ВыставленПриИзмененииНаСервере()
	
	УстановитьДоступностьИзмененийПоФлагуВыставлен();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПоставщикаПриИзменении(Элемент)
	ОпределитьСтатусыПолучателя();
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПолучателяПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	ВидДокументаПриИзмененииНаСервере();
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаСервере
Процедура ВидДокументаПриИзмененииНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьУсловияПоставки(); 
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерВыпускаТоваровПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыпускаТоваровПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаРазрешенияНаУбытиеПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура НомерЗаявленияОВвозеТоваровПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаявленияОВвозеТоваровПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаВвозаТоваровПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры
// }
// 4D

#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура РасшифровкаСуммыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСтрокиРасшифрокиСуммы()
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСуммыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтрокиРасшифрокиСуммы()
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСуммыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьОжидаетсяКПоступлениюНаСумму();
	
КонецПроцедуры

// 4D:ERP для Беларуси
// ЭСЧФ
// {
#Область ПриИзмененииРеквизитовТабличнойЧасти

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номеклатура) И ТипЗнч(ТекущаяСтрока.Номеклатура) <> Тип("Строка") Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Номеклатура, "КодТНВЭД, КодОКЭД");
		ТекущаяСтрока.КодТНВЭД = Результат.КодТНВЭД;	
		ТекущаяСтрока.КодОКЭД  = Результат.КодОКВЭД;	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДополнительныеДанные(Команда)
	
	Если Не ЗначениеЗаполнено(ДополнительныеДанные) Тогда
		ОчиститьСообщения();
		ТекстСообщения = (НСтр("ru = 'Не указана дополнительные данные для заполнения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	Иначе
		ЗаполнитьДополнительныеДанныеНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеДанныеНаСервере()
	
	Товары = Объект.Товары.Выгрузить();
	Товары.ЗаполнитьЗначения(ДополнительныеДанные, "ДополнительныеДанные"); 
	Объект.Товары.Загрузить(Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасчетнуюСтавку(Команда)
	
	Если Не ЗначениеЗаполнено(РасчетнаяСтавкаНДС) Тогда
		ОчиститьСообщения();
		ТекстСообщения = (НСтр("ru = 'Не указана расчетная ставка НДС для заполнения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	Иначе
		ЗаполнитьРасчетнуюСтавкуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетнуюСтавкуНаСервере()
	
	Товары = Объект.Товары.Выгрузить();
	Товары.ЗаполнитьЗначения(Истина, "ИспользоватьРасчетнуюСтавкуНДС"); 
	Товары.ЗаполнитьЗначения(ДополнительныеДанные, "РасчетнаяСтавкаНДС"); 
	Объект.Товары.Загрузить(Товары);
	
КонецПроцедуры

#КонецОбласти
// }
// 4D

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура ДокументыПоступления(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Валюта",                   Объект.Валюта);
	ПараметрыФормы.Вставить("ДокументОснование",        Объект.ДокументОснование);
	ПараметрыФормы.Вставить("Поставщик",                Объект.Поставщик);
	ПараметрыФормы.Вставить("СуммаОплаты",              Объект.РасшифровкаСуммы.Итог("Сумма"));
	ПараметрыФормы.Вставить("АдресВременногоХранилища", ПоместитьДокументыПоступленияВоВременноеХранилище());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаДокументыПоступленияЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.СчетФактураНалоговыйАгент.Форма.ФормаДокументыПоступления", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоступленияЗаполнитьПоДаннымРасчетов(Команда)
	
	Если Объект.ДокументыПоступления.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияПерезаполнитьДокументыПоступления", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru='Документы поступления будут очищены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументыПоступленияПоДаннымРасчетовСервер();
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПеречисленияНалога.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаДокументаПеречисленияНалога.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НомерДокументаПеречисленияНалога.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалогПеречислен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСписокКодовВидовОпераций();
	
	УстановитьЗаголовокДокументыПоступления();
	ВывестиТекстОжидаетсяКПоступлению();
	
	// 4D:ERP для Беларуси
	// ЭСЧФ
	// {
	УправлениеЭлементамиФормы();
	
	ОпределитьТипыСчетаФактуры();
	ОпределитьСтатусыПоставщика();
	ОпределитьСтатусыПолучателя();
	
	// }
	// 4D	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияПерезаполнитьДокументыПоступления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокументыПоступленияПоДаннымРасчетовСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыПоступленияПоДаннымРасчетовСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьДокументыПоступленияПоДаннымРасчетов();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	РассчитатьОжидаетсяКПоступлениюНаСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтрокиРасшифрокиСуммы()
	
	ТекущаяСтрока = Элементы.РасшифровкаСуммы.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОжидаетсяКПоступлениюНаСумму()
	
	Объект.СуммаКПоступлению = 
		Объект.РасшифровкаСуммы.Итог("Сумма") - Объект.ДокументыПоступления.Итог("СуммаОплаты");
	ВывестиТекстОжидаетсяКПоступлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ()

	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Ложь);
	
	Возврат СтруктураЗаполненияЦены;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеВидаОперации(Форма)
	
	ТекущийКод = Форма.СписокКодовВидовОпераций.НайтиПоЗначению(Форма.Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		Форма.ПредставлениеВидаОперации = Сред(ТекущийКод.Представление, 4);
	Иначе
		Форма.ПредставлениеВидаОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДокументыПоступленияВоВременноеХранилище() Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ДокументыПоступления.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура НастройкаДокументыПоступленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДокументыПоступления.Загрузить(ПолучитьИзВременногоХранилища(Результат));
	
	Модифицированность = Истина;
	
	РассчитатьОжидаетсяКПоступлениюНаСумму();
	УстановитьЗаголовокДокументыПоступления();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДокументыПоступления()
	
	КоличествоДокументов = Объект.ДокументыПоступления.Количество();
	
	Если КоличествоДокументов = 0 Тогда
		ТекстЗаголовка = НСтр("ru='Указать документы поступления'");
	Иначе
		ШаблонЗаголовка = НСтр("ru='Документы поступления (%1)'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, КоличествоДокументов);
	КонецЕсли;
	
	Элементы.ДокументыПоступления.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТекстОжидаетсяКПоступлению()
	
	Результат = Документы.СчетФактураНалоговыйАгент.НадписьОжидаетсяКПоступлению(
					Объект.СуммаКПоступлению, Объект.Валюта);
	
	ОжидаетсяКПостулениюТекст = Результат.Текст;
	Элементы.ОжидаетсяКПостулениюТекст.ЦветТекста = Результат.Цвет;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКодовВидовОпераций()
	
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
		СписокКодовВидовОпераций,
		?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		
	ОбновитьПредставлениеВидаОперации(ЭтаФорма);
	
КонецПроцедуры

// 4D:ERP для Беларуси
// ЭСЧФ
// {

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
	УстановитьДоступностьИзмененийПоФлагуВыставлен();
	
	Если Не Выставлен Или ЭтоНовый Тогда
		ЭлектронныеСчетаФактуры.УправлениеЭлементамиФормы(ЭтотОбъект);
	Иначе
		ЭлектронныеСчетаФактуры.ВернутьВИсходноеСостояниеЭлементыФормыЭСЧФ(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИзмененийПоФлагуВыставлен()
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("Номер");
	МассивИменЭлементов.Добавить("Дата");
	МассивИменЭлементов.Добавить("Организация");
	МассивИменЭлементов.Добавить("Поставщик");
	МассивИменЭлементов.Добавить("КодВидаОперации");
	МассивИменЭлементов.Добавить("Договор");
	МассивИменЭлементов.Добавить("ВидДокумента");
	
	//Добавить реквизиты из правил
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивИменЭлементов, "ТолькоПросмотр", Выставлен И НЕ ЭтоНовый);
	
	Элементы.ВыставленВЭлектронномВиде.Доступность = Выставлен;
	Элементы.ДатаВыставления.Доступность           = Выставлен;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТипыСчетаФактуры() 
	
	Элементы.ТипСчетаФактуры.СписокВыбора.Очистить();	
	Если ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.Дополнительный);
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.Исправленный);
	Иначе	
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.Исходный);
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.Дополнительный);
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.ДополнительныйБезСсылки);
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.Исправленный);
	КонецЕсли;	
	
	Если Элементы.ТипСчетаФактуры.СписокВыбора.НайтиПоЗначению(Объект.ТипСчетаФактуры) = Неопределено Тогда
		СтатусПолучателя = Справочники.ТипыЭСЧФ.ПустаяСсылка();	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОпределитьСтатусыПоставщика()
	
	Основание = РеквизитФормыВЗначение("Объект").ОпределитьДокументОснованиеДляЗаполнения(Объект.ДокументОснование);
	
	Элементы.СтатусПоставщика.СписокВыбора.Очистить();	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация);	
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Комиссионер);	
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Комитент);	
		
	Иначе	
		
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Продавец);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Заказчик);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Посредник);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Комиссионер);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Комитент);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.ДоверительныйУправляющий);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.ПлательщикПередающийНалоговыеВычеты);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.ПлательщикПередающийОборотыПоРеализации);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация);	
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОпределитьСтатусыПолучателя() 
	
	Если Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Покупатель);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.ПокупательОбъектовУИностраннойОрганизации);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Продавец Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Покупатель);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Потребитель);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Комиссионер);

	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Комитент Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Комиссионер);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Комиссионер Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Покупатель);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Комитент);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Комиссионер);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Потребитель);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.ДоверительныйУправляющий Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Покупатель);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Посредник Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Потребитель);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Заказчик Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Потребитель);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.ПлательщикПередающийОборотыПоРеализации Тогда

		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.ПлательщикПолучающийОборотыПоРеализации);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.ПлательщикПередающийНалоговыеВычеты Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.ПлательщикПолучающийНалоговыеВычеты);
		
	КонецЕсли;
	
	Если Элементы.СтатусПолучателя.СписокВыбора.НайтиПоЗначению(Объект.СтатусПолучателя) = Неопределено Тогда
		СтатусПолучателя = Справочники.СтатусыПолучателяЭСЧФ.ПустаяСсылка();	
	КонецЕсли;	
	
	Если Элементы.СтатусПолучателя.СписокВыбора.Количество() = 1 И НЕ ЗначениеЗаполнено(Объект.СтатусПолучателя) Тогда
		СтатусПолучателя = 	Элементы.СтатусПолучателя.СписокВыбора[0];
	КонецЕсли;

КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПоОснованиюНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТабличнуюЧасть();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ЗаполнитьПоОснованиюНаСервере();
		
	Иначе
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,,НСтр("ru = 'Документ-основание'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,"Объект");
	КонецЕсли;
	
КонецПроцедуры
// }
// 4D

#КонецОбласти

#КонецОбласти
