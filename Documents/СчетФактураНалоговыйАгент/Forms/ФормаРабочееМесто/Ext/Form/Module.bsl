
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(СписокСчетФактураНалоговыйАгент);
	
	Если Не ПроверкаКонтрагентовВызовСервераПовтИсп.ИспользованиеПроверкиВозможно() Тогда
		Элементы.СписокСчетФактураНалоговыйАгентЕстьОшибкиПроверкиКонтрагентов.Видимость = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	УстановитьЗначенияПоУмолчанию();
	УстановитьЗначенияПоПараметрамФормы(Параметры);
	ОбновитьДанныеФормы();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СчетФактураНалоговыйАгент" Тогда
		Элементы.СписокСчетФактураНалоговыйАгент.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура ОплатыПоставщикамСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатыПоставщикам.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПоставщикамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Поле = Элементы.ОплатыПоставщикамСчетФактура ИЛИ Поле.Родитель = Элементы.ОплатыПоставщикамГруппаСФ) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьДокумент(Элемент.ТекущиеДанные.СчетФактура, СтандартнаяОбработка);
	ИначеЕсли Поле <> Элементы.ОплатыПоставщикамВидАгентскогоДоговора 
		И Поле <> Элементы.ОплатыПоставщикамСтавкаНДС Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьДокумент(Элемент.ТекущиеДанные.ДокументОснование, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетФактураНалоговыйАгентВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СписокСчетФактураНалоговыйАгентДокументПеречисленияНалога Тогда
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		ОткрытьДокумент(ДанныеСтроки.ДокументПеречисленияНалога, СтандартнаяОбработка);
		
	//ИначеЕсли Поле = Элементы.СписокСчетФактураНалоговыйАгентСписаниеБезналичныхДенежныхСредств Тогда
	//	
	//	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	//	ОткрытьДокумент(ДанныеСтроки.СписаниеБезналичныхДенежныхСредств, СтандартнаяОбработка);
	//	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетФактураНалоговыйАгентПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", 
		ПараметрыВыбора, 
		Элементы.ВыбратьПериод, 
		, 
		, 
		, 
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОплатыПоставщикам(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ЗаполнитьОплатыПоставщикамНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСчетаФактуры(Команда)
	
	ОчиститьСообщения();
	СформироватьСчетаФактурыНаСервере();
	ОповеститьОбИзменении(Тип("ДокументСсылка.СчетФактураНалоговыйАгент"));

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактуру(Команда)
	
	ОчиститьСообщения();
	СоздатьСчетФактуруНаСервере();
	ОповеститьОбИзменении(Тип("ДокументСсылка.СчетФактураНалоговыйАгент"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтавкуНДС18(Команда)
	
	УстановитьСтавкуНДС("18%");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтавкуНДС10(Команда)
	
	УстановитьСтавкуНДС("10%");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидАгентскогоДоговораАренда(Команда)
	
	УстановитьВидАгентскогоДоговора(ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.Аренда"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидАгентскогоДоговораНерезидент(Команда)
	
	УстановитьВидАгентскогоДоговора(ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.Нерезидент"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидАгентскогоДоговораРеализацияИмущества(Команда)
	
	УстановитьВидАгентскогоДоговора(ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.РеализацияИмущества"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетовФактурПриИзменении(Элемент)
	
	ОжидающиеПодтвержденияПеречисленияНалога = (ОтборСчетовФактур = "ОжидающиеПодтвержденияПеречисленияНалога");
	ОжидающиеПоступления = (ОтборСчетовФактур = "ОжидающиеПоступления");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокСчетФактураНалоговыйАгент, 
		"НалогПеречислен", 
		Ложь,
		, 
		, 
		ОжидающиеПодтвержденияПеречисленияНалога);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокСчетФактураНалоговыйАгент, 
		"ОжидаетсяПоступление", 
		Истина, 
		, 
		, 
		ОжидающиеПоступления);
		
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПеречислениеНалога(Команда)
	
	ТекущиеДанные = Элементы.СписокСчетФактураНалоговыйАгент.ДанныеСтроки(Элементы.СписокСчетФактураНалоговыйАгент.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Команда не может быть выполнена для указанного объекта'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаПеречисления");
	ПараметрыФормы.Вставить("ДатаДокумента");
	ПараметрыФормы.Вставить("НомерДокумента");
	
	ДокументПеречисленияНалога = ТекущиеДанные.ДокументПеречисленияНалога;
	Если ЗначениеЗаполнено(ДокументПеречисленияНалога) 
		И ТипЗнч(ДокументПеречисленияНалога) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		ЗаполнитьРеквизитыДокументаПеречисленияНалога(ДокументПеречисленияНалога, ПараметрыФормы);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", ТекущиеДанные.Ссылка); 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФормаПодтвержденияПеречисленияНалога", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаПодтвержденияПеречисленияНалога", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);

КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.СписокСчетФактураНалоговыйАгент);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОплатыПоставщикамСтавкаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОплатыПоставщикамСуммаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОплатыПоставщикамСуммаОплаты.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОплатыПоставщикамСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОплатыПоставщикам.СФсформирован");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Указано в СФ'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОплатыПоставщикамПоставщик.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОплатыПоставщикам.Поставщик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Указано в СФ'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокСчетФактураНалоговыйАгент.Дата", Элементы.СписокСчетФактураНалоговыйАгентДата.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОплатыПоставщикамНаСервере()
	
	ОплатыПоставщикам.Очистить();
	
	ОтборРасчетов = Документы.СчетФактураНалоговыйАгент.ОтборРасчетов();
	ЗаполнитьЗначенияСвойств(ОтборРасчетов, ЭтаФорма);
	Документы.СчетФактураНалоговыйАгент.ЗаполнитьОплатыПоставщикам(ОтборРасчетов, ОплатыПоставщикам);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСчетФактуруНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из Элементы.ОплатыПоставщикам.ВыделенныеСтроки Цикл
		СоздатьСчетФактуруНалоговыйАгент(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСчетаФактурыНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	АналитикиРасчета = РаспределениеВзаиморасчетов.АналитикиРасчета();
	РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСКлиентами(КонецПериода, АналитикиРасчета);
	
	Для каждого ДанныеСчетФактуры Из ОплатыПоставщикам Цикл
		
		Если НЕ СоздатьСчетФактуруНалоговыйАгент(ДанныеСчетФактуры) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось сформировать счет-фактуру на основании документа %1'"), ДанныеСчетФактуры.ДокументОснование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				,
				"Объект");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьСчетФактуруНалоговыйАгент(Знач ДанныеСчетФактуры) 
	
	Если ТипЗнч(ДанныеСчетФактуры) = Тип("Число") Тогда
		ДанныеСчетФактуры = ОплатыПоставщикам.НайтиПоИдентификатору(ДанныеСчетФактуры)
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ДанныеСчетФактуры.ВидАгентскогоДоговора) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить вид агентского договора'"),
			,
			"ОплатыПоставщикам[" + ДанныеСчетФактуры.ПолучитьИдентификатор() + "].ВидАгентскогоДоговора");
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеСчетФактуры.ДокументОснование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить документ-основание'"),
			,
			"ОплатыПоставщикам[" + ДанныеСчетФактуры.ПолучитьИдентификатор() + "].ДокументОснование");
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеСчетФактуры.Сумма = ДанныеСчетФактуры.СуммаСчетаФактуры И ДанныеСчетФактуры.СФсформирован Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация", Организация);
	ДанныеЗаполнения.Вставить("Поставщик");
	ДанныеЗаполнения.Вставить("Договор");
	ДанныеЗаполнения.Вставить("ВидАгентскогоДоговора");
	ДанныеЗаполнения.Вставить("ДокументОснование");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеСчетФактуры);
	
	Если ДанныеСчетФактуры.СчетФактура.Пустая() Тогда
		СчетФактураОбъект = Документы.СчетФактураНалоговыйАгент.СоздатьДокумент();
	Иначе
		СчетФактураОбъект = ДанныеСчетФактуры.СчетФактура.ПолучитьОбъект();
	КонецЕсли; 
	
	СчетФактураОбъект.Заполнить(ДанныеЗаполнения);
	СчетФактураОбъект.Дата = КонецДня(ДанныеСчетФактуры.ДатаОплаты);
	ДокументыПоступления = Документы.СчетФактураНалоговыйАгент.ДокументыПоступленияПоДаннымРасчетов(
								ДанныеЗаполнения.ДокументОснование,
								ДанныеЗаполнения.Поставщик);
	СчетФактураОбъект.ДокументыПоступления.Загрузить(ДокументыПоступления);
	
	СчетФактураОбъект.РасшифровкаСуммы.Очистить();
	
	НоваяСтрока = СчетФактураОбъект.РасшифровкаСуммы.Добавить();
	НоваяСтрока.Сумма = ДанныеСчетФактуры.Сумма;
	НоваяСтрока.СтавкаНДС = ДанныеСчетФактуры.СтавкаНДС;
	
	СтруктураПересчетаСуммы = Новый Структура();
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Ложь);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
	
	СчетФактураОбъект.Сумма     = СчетФактураОбъект.РасшифровкаСуммы.Итог("Сумма");
	СчетФактураОбъект.СуммаСНДС = СчетФактураОбъект.РасшифровкаСуммы.Итог("СуммаСНДС");
	СчетФактураОбъект.СуммаНДС  = СчетФактураОбъект.РасшифровкаСуммы.Итог("СуммаНДС");
	
	// Проведем счет-фактуру
	Попытка
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки; 
	
	// Обновим сведения о счете-фактуре
	ДанныеСчетФактуры.СФсформирован = Истина;
	ДанныеСчетФактуры.СуммаСчетаФактуры = СчетФактураОбъект.Сумма;
	ДанныеСчетФактуры.СчетФактура   = СчетФактураОбъект.Ссылка;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецПериода = КонецМесяца(ТекущаяДатаСеанса());
	
	СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеФормы()

	ГруппаОтбораПериода = 
		ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(СписокСчетФактураНалоговыйАгент).Элементы,
			"ГруппаОтбораПериода", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораПериода,
		"Дата", 
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 
		НачалоПериода,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораПериода,
		"Дата",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 
		КонецДня(КонецПериода),
		,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокСчетФактураНалоговыйАгент, 
		"Организация", 
		Организация, 
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
		
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		ЗаполнитьОплатыПоставщикамНаСервере();
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	ЗаголовокОтчета = НСтр("ru='Счета-фактуры налогового агента'")
		+ БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Форма.НачалоПериода, Форма.КонецПериода);
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтавкуНДС(ТекстСтавкаНДС)
	
	Если Элементы.ОплатыПоставщикам.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	Если ТекстСтавкаНДС = "10%" Тогда
		ТекСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10")
	Иначе
		ТекСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18")
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из Элементы.ОплатыПоставщикам.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ОплатыПоставщикам.ДанныеСтроки(ИдентификаторСтроки);
		Если ДанныеСтроки.СтавкаНДС <> ТекСтавкаНДС Тогда
			ДанныеСтроки.СтавкаНДС = ТекСтавкаНДС;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, Неопределено);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидАгентскогоДоговора(ВидАгентскогоДоговора)
	
	Если Элементы.ОплатыПоставщикам.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ИдентификаторСтроки Из Элементы.ОплатыПоставщикам.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ОплатыПоставщикам.ДанныеСтроки(ИдентификаторСтроки);
		ДанныеСтроки.ВидАгентскогоДоговора = ВидАгентскогоДоговора;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ()

	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Ложь);
	
	Возврат СтруктураЗаполненияЦены;

КонецФункции

&НаКлиенте
Процедура ОфомитьЗаявкуНаПеречислениеНалога(Команда)
	
	ТекущиеДанные = Элементы.СписокСчетФактураНалоговыйАгент.ДанныеСтроки(Элементы.СписокСчетФактураНалоговыйАгент.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Команда не может быть выполнена для указанного объекта'");
	КонецЕсли;
	
	ДокументПеречисленияНалога = ТекущиеДанные.ДокументПеречисленияНалога;
	Если ЗначениеЗаполнено(ДокументПеречисленияНалога) Тогда 
		
		ДополнительныеПараметры = Новый Структура("Ссылка", ДокументПеречисленияНалога);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросОткрытьСуществующийДокументПеречисления", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(
			ОписаниеОповещения, 
			НСтр("ru = 'Документ на перечисление налога был сформирован ранее. Открыть?'"), 
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ТекущиеДанные.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСоздатьНовыйДокументПеречисления", ЭтотОбъект);   
		ОткрытьФорму("Документ.ЗаявкаНаРасходованиеДенежныхСредств.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОформитьПеречислениеНалога(Команда)
	
	ТекущиеДанные = Элементы.СписокСчетФактураНалоговыйАгент.ДанныеСтроки(Элементы.СписокСчетФактураНалоговыйАгент.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Команда не может быть выполнена для указанного объекта'");
	КонецЕсли;
	
	ДокументПеречисленияНалога = ТекущиеДанные.ДокументПеречисленияНалога;
	Если ЗначениеЗаполнено(ДокументПеречисленияНалога) 
		И ТипЗнч(ДокументПеречисленияНалога) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ДополнительныеПараметры = Новый Структура("Ссылка", ДокументПеречисленияНалога);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросОткрытьСуществующийДокументПеречисления", ЭтотОбъект, ДополнительныеПараметры);   
		
		ПоказатьВопрос(
		    ОписаниеОповещения,
			НСтр("ru = 'Документ на перечисление налога был сформирован ранее. Открыть?'"), 
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ТекущиеДанные.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСоздатьНовыйДокументПеречисления", ЭтотОбъект);   
		ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросОткрытьСуществующийДокументПеречисления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПоказатьЗначение(Неопределено, ДополнительныеПараметры.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСоздатьНовыйДокументПеречисления(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.СписокСчетФактураНалоговыйАгент.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Ссылка, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДокументаПеречисленияНалога(ДокументПеречисленияНалога, ПараметрыФормы)
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("НомерДокумента",   "НомерВходящегоДокумента");
	Реквизиты.Вставить("ДатаДокумента",    "ДатаВходящегоДокумента");
	Реквизиты.Вставить("ДатаПеречисления", "ДатаПроведенияБанком");
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПеречисленияНалога, Реквизиты); 
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЗначенияРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ФормаПодтвержденияПеречисленияНалога(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДокументОбъект = ДополнительныеПараметры.Ссылка.ПолучитьОбъект();
		ДокументОбъект.НалогПеречислен = Истина;
		ДокументОбъект.ДатаПеречисленияНалога           = Результат.ДатаПеречисления;
		ДокументОбъект.ДатаДокументаПеречисленияНалога  = Результат.ДатаДокумента;
		ДокументОбъект.НомерДокументаПеречисленияНалога = Результат.НомерДокумента;
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не удалось установить отметку о перечислении налога.'") + " " + ИнформацияОбОшибке().Описание);
			
	КонецПопытки;
	
	Элементы.СписокСчетФактураНалоговыйАгент.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Настройки["Организация"] = Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоПараметрамФормы(Параметры)
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("НачалоПериода", НачалоПериода);
		СтруктураБыстрогоОтбора.Свойство("КонецПериода", КонецПериода);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтображатьСтраницуКОформлению") Тогда
		Элементы.ГруппаСтраницыАвансыПолученные.ТекущаяСтраница = Элементы.ФормированиеСчетовФактурНаАванс;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
