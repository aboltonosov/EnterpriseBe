#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		РеквизитыЗаполнения = РеквизитыРасходныйКассовыйОрдер(ДанныеЗаполнения);
		ЗаполнитьПоПлатежномуДокументу(РеквизитыЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		РеквизитыЗаполнения = РеквизитыСписаниеБезналичныхДенежныхСредств(ДанныеЗаполнения);
		ЗаполнитьПоПлатежномуДокументу(РеквизитыЗаполнения);
	КонецЕсли;

	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	// 4D:ERP для Беларуси
	// ЭСЧФ
	// {
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Основание = ОпределитьДокументОснованиеДляЗаполнения(ДанныеЗаполнения);
		ЗаполнитьОсновныеРеквизиты(Основание);
		ЗаполнитьВидДокумента(Основание);
		ЗаполнитьУсловияПоставки(Основание);
		ЗаполнитьТабличнуюЧасть(Основание);
	КонецЕсли;
	// }
	// 4D
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Проверим время документа относительно времени документа-основания
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДатаДокументаОснования = ДокументОснование.Дата;
		Если НачалоДня(Дата) = НачалоДня(ДатаДокументаОснования) ИЛИ НЕ ЗначениеЗаполнено(Дата) Тогда
		 	
			Дата = ?(ДатаДокументаОснования = КонецДня(ДатаДокументаОснования),
					 ДатаДокументаОснования,
					 ДатаДокументаОснования + 1);
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ НалогПеречислен Тогда
		ДатаПеречисленияНалога = Неопределено;
	КонецЕсли;
	
	Сумма = РасшифровкаСуммы.Итог("Сумма");
	СуммаСНДС = РасшифровкаСуммы.Итог("СуммаСНДС");
	СуммаНДС = РасшифровкаСуммы.Итог("СуммаНДС");
	
	СуммаКПоступлению = РасшифровкаСуммы.Итог("Сумма") - ДокументыПоступления.Итог("СуммаОплаты");
	СформироватьСтрокуРасчетноПлатежныхДокументов();
	
	Если Не ПометкаУдаления Тогда
		ПроверитьДублиСчетФактуры(Отказ);
	КонецЕсли;
	
	//++ НЕ УТ
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УстановитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете();
	КонецЕсли;
	//-- НЕ УТ
	
	// 4D:ERP для Беларуси 
	// ЭСЧФ
	// {
	ЭлектронныеСчетаФактуры.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ);
	
	СуммаАкциза = Товары.Итог("СуммаАкциза");
	СуммаНДС = Товары.Итог("СуммаНДС");
	СуммаДокумента = Товары.Итог("СуммаСНДС");
	// }
	// 4D 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.СчетФактураНалоговыйАгент.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ДоходыИРасходыСервер.ОтразитьЖурналУчетаСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПокупок(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСПредъявленный(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	
	//++ НЕ УТ
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТ
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если РасшифровкаСуммы.Итог("Сумма") < ДокументыПоступления.Итог("СуммаОплаты") Тогда
		
		ТекстСообщения = НСтр("ru = 'Сумма оплаты по счету-фактуре меньше суммы распределенной по документам поступления.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"СуммаКПоступлению",
			, // ПутьКДанным 
			Отказ);
	
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Проведен") Тогда
		
		ТекстСообщения = НСтр("ru = 'Счет-фактуру можно провести только на основании проведенного документа.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"ДокументОснование",
			, // ПутьКДанным 
			Отказ);
	
	КонецЕсли;
	
	Если НЕ НалогПеречислен Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПеречисленияНалога");
		МассивНепроверяемыхРеквизитов.Добавить("НомерДокументаПеречисленияНалога");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаДокументаПеречисленияНалога");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// 4D:ERP для Беларуси, ВалентинМ, 19.06.2017 16:05:48 
	// ЭСЧФ
	// {
	ДополнительныеСвойства.Вставить("ПроведениеИзФормыДокумента", Ложь);
	// }
	// 4D 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = "0";
	
КонецПроцедуры

#КонецОбласти

// 4D:ERP для Беларуси
// ЭСЧФ
// {
#Область Шапка

Процедура ЗаполнитьОсновныеРеквизиты(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ОпределитьДокументОснованиеДляЗаполнения();	
	КонецЕсли;
	
	Дата 					  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Дата");
	Валюта 					  = Константы.ВалютаРегламентированногоУчета.Получить();
	МетаданныеДокумента = Основание.Метаданные();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Исходный;
		СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация;
		СтатусПолучателя = Справочники.СтатусыПолучателяЭСЧФ.Покупатель;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
			
			Поставщик = Основание.Контрагент;
			Договор    = Основание.Договор;
			ДатаПраваНаВычет = Основание.Дата;
			НомерЗаявленияОВвозеТоваров = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Основание.Номер, Истина, Истина);
			ДатаЗаявленияОВвозеТоваров  = Основание.Дата;
			Для Каждого ТекСтрока Из Основание.Товары Цикл
				ДокументПоступления = ТекСтрока.ДокументПоступления;
				Если ЗначениеЗаполнено(ДокументПоступления) Тогда
					ДатаВвозаТоваров   	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступления, "Дата");
					Прервать;
				КонецЕсли;
			КонецЦикла;
		
			Грузоотправитель 		  = Поставщик;
			СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузоотправитель, Основание.Дата);
			АдресГрузоотправителя     = СведенияОГрузоотправителе.ЮридическийАдрес;
			
			Грузополучатель			  = Основание.Организация;
			СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузополучатель,  Основание.Дата);
			АдресГрузополучателя      = СведенияОГрузополучателе.ЮридическийАдрес;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
			
			ЗначенияРеквизитов       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, НомерДекларации, КонтрагентПоставщика, Организация, Контрагент");
			
			ДатаПраваНаВычет 					= ЗначенияРеквизитов.Дата + 90*24*60*60;
			РегистрационныйНомерВыпускаТоваров  = ЗначенияРеквизитов.НомерДекларации;
			Поставщик 							= ЗначенияРеквизитов.КонтрагентПоставщика;
			Для Каждого ТекСтрока Из Основание.Товары Цикл
				ДокументПоступления = ТекСтрока.ДокументПоступления;
				Если ЗначениеЗаполнено(ДокументПоступления) Тогда
					Договор   					= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступления, "Договор");
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Грузоотправитель 		  = ЗначенияРеквизитов.КонтрагентПоставщика;
			СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузоотправитель, Основание.Дата);
			АдресГрузоотправителя     = СведенияОГрузоотправителе.ЮридическийАдрес;
			
			Грузополучатель			  = ЗначенияРеквизитов.Организация;
			СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузополучатель,  Основание.Дата);
			АдресГрузополучателя      = СведенияОГрузополучателе.ЮридическийАдрес;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
		
		ТипСчетаФактуры          = Справочники.ТипыЭСЧФ.ДополнительныйБезСсылки;
		СтатусПоставщика         = Справочники.СтатусыПоставщикаЭСЧФ.Продавец;
		СтатусПолучателя         = Справочники.СтатусыПолучателяЭСЧФ.Покупатель;
		
		ЗначенияРеквизитов       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Договор, Организация, Контрагент, ДокументРеализации");
		Договор		             = ЗначенияРеквизитов.Договор;
		Грузоотправитель         = ЗначенияРеквизитов.Организация;
		Грузополучатель          = ЗначенияРеквизитов.Контрагент;
		
		ВидДокумента             = Справочники.ВидыДокументовЭСЧФ.ТТН_1;
		КодБланкаИсходящегоДокумента
			  	 				 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "КодБланка");
	
		ТаблицаОснований = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(ЗначенияРеквизитов.ДокументРеализации,,, Истина);
		Для Каждого ТекущаяСтрока ИЗ ТаблицаОснований Цикл
			
			СчетФактураОснование	= ТекущаяСтрока.Ссылка;
			ЭД = ЭлектронныеСчетаФактуры.ПолучитьЭДПоВладельцу(ТекущаяСтрока.Ссылка);
			Если ЭД <> Неопределено Тогда 
				Исправление				= Истина;
				ТипСчетаФактуры         = Справочники.ТипыЭСЧФ.Дополнительный;
				НомерИсходногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "НомерЭД");
			КонецЕсли;	
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		СтатусПоставщика         = Справочники.СтатусыПоставщикаЭСЧФ.Продавец;
		СтатусПолучателя         = Справочники.СтатусыПолучателяЭСЧФ.Покупатель;
		ТипСчетаФактуры          = Справочники.ТипыЭСЧФ.Исправленный;
		ЗначенияРеквизитов       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Договор, Организация, Контрагент, ДокументОснование");
		
		Договор		             = ЗначенияРеквизитов.Договор;
		ДатаАннулирования        = ЗначенияРеквизитов.Дата;
								 
		ТаблицаОснований = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(ЗначенияРеквизитов.ДокументОснование,,, Истина);
		Для Каждого ТекущаяСтрока ИЗ ТаблицаОснований Цикл
			
			СчетФактураОснование	= ТекущаяСтрока.Ссылка;
			ЭД = ЭлектронныеСчетаФактуры.ПолучитьЭДПоВладельцу(ТекущаяСтрока.Ссылка);
			Если ЭД <> Неопределено Тогда 
				Исправление 			= Истина; 
				НомерИсходногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "НомерЭД");
			КонецЕсли;	
			
		КонецЦикла;
		
	Иначе
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", МетаданныеДокумента) Тогда
		  	Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Договор");
		КонецЕсли;
		
		ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Исходный;
		СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Продавец;
		СтатусПолучателя = Справочники.СтатусыПолучателяЭСЧФ.Покупатель;
		
	КонецЕсли;	
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипБСО", МетаданныеДокумента) Тогда
		ТипБСО     					  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ТипБСО");
		КодБланкаИсходящегоДокумента  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипБСО, "КодБланка");
		ВидДокумента                  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипБСО, "ВидДокумента");
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьВидДокумента(Основание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Основание = Неопределено Тогда
		Основание = ОпределитьДокументОснованиеДляЗаполнения();	
	КонецЕсли;
	
	МетаданныеДокумента = Основание.Метаданные();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		ВидДокумента = Справочники.ВидыДокументовЭСЧФ.Счет_фактура;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ВидДокумента = Справочники.ВидыДокументовЭСЧФ.АктВыполненныхРабот;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		ВидДокумента = Справочники.ВидыДокументовЭСЧФ.Акт;
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипБСО", МетаданныеДокумента) Тогда	
		ТипБСО       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ТипБСО");
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипБСО, "ВидДокумента");
	КонецЕсли;		
	
КонецПроцедуры

Процедура ЗаполнитьУсловияПоставки(Основание = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Основание = Неопределено Тогда
		Основание = ОпределитьДокументОснованиеДляЗаполнения();	
	КонецЕсли;
	
	МетаданныеДокумента = Основание.Метаданные();
	
	Если ВидДокумента = Справочники.ВидыДокументовЭСЧФ.ТН_2 
	          ИЛИ ВидДокумента = Справочники.ВидыДокументовЭСЧФ.ЭлектроннаяТН_2
			  ИЛИ ВидДокумента = Справочники.ВидыДокументовЭСЧФ.ТТН_1
			  ИЛИ ВидДокумента = Справочники.ВидыДокументовЭСЧФ.ЭлектроннаяТТН_1 Тогда
			  
	  	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерИсходящегоДокумента", МетаданныеДокумента) Тогда
			 НомерИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "НомерИсходящегоДокумента");
			 
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеДокумента) Тогда
			 НомерИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "НомерВходящегоДокумента");
			 
		Иначе
			 НомерИсходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
			  									ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Номер"), Истина, Истина);
		КонецЕсли;
			  
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СерияИсходящегоДокумента", МетаданныеДокумента) Тогда
			 СерияИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СерияИсходящегоДокумента");
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СерияВходящегоДокумента", МетаданныеДокумента) Тогда
			 СерияИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СерияВходящегоДокумента");
		КонецЕсли;
			  
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипБСО", МетаданныеДокумента) Тогда
		  	ТипБСО     					  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ТипБСО");
		  	КодБланкаИсходящегоДокумента  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипБСО, "КодБланка");
		КонецЕсли;
		  
		ЗаполнитьРеквизитыТТН_1(Основание);
	
	Иначе 	
		
		 НомерИсходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
		  									ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Номер"), Истина, Истина);
		
	КонецЕсли;
	
	ДатаИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Дата");
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", МетаданныеДокумента) И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Договор");	
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьРеквизитыТТН_1(Основание = Неопределено) Экспорт
	
	Если ВидДокумента <> Справочники.ВидыДокументовЭСЧФ.ТТН_1 И ВидДокумента <> Справочники.ВидыДокументовЭСЧФ.ЭлектроннаяТТН_1 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Основание = Неопределено Тогда
		Основание = ОпределитьДокументОснованиеДляЗаполнения();	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Грузоотправитель КАК Грузоотправитель,
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Грузополучатель КАК Грузополучатель,
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.АдресПогрузки КАК АдресГрузоотправителя,
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.АдресДоставки КАК АдресГрузополучателя
	|ИЗ
	|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
	|ГДЕ
	|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
	|";
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Грузоотправитель 		= Выборка.Грузоотправитель;
		Грузополучатель 		= Выборка.Грузополучатель;
		АдресГрузоотправителя 	= Выборка.АдресГрузоотправителя;
		АдресГрузополучателя 	= Выборка.АдресГрузополучателя;
		
		//должен быть только один документ
		Прервать;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Грузоотправитель) И НЕ ЗначениеЗаполнено(АдресГрузоотправителя) Тогда
		СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузоотправитель, Основание.Дата);
	    АдресГрузоотправителя     = СведенияОГрузоотправителе.ЮридическийАдрес;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Грузополучатель) И НЕ ЗначениеЗаполнено(АдресГрузополучателя) Тогда
		СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузополучатель,  Основание.Дата);
	    АдресГрузополучателя      = СведенияОГрузополучателе.ЮридическийАдрес;
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Функция РеквизитыРасходныйКассовыйОрдер(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.Проведен КАК Проведен,
	|	РасходныйКассовыйОрдер.Ссылка КАК ДокументОснование,
	|	РасходныйКассовыйОрдер.Организация КАК Организация,
	|	РасходныйКассовыйОрдер.Контрагент КАК Поставщик,
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция РеквизитыСписаниеБезналичныхДенежныхСредств(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеБезналичныхДенежныхСредств.Дата КАК Дата,
	|	СписаниеБезналичныхДенежныхСредств.Проведен КАК Проведен,
	|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК ДокументОснование,
	|	СписаниеБезналичныхДенежныхСредств.Организация КАК Организация,
	|	СписаниеБезналичныхДенежныхСредств.Контрагент КАК Поставщик,
	|	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Процедура ЗаполнитьПоПлатежномуДокументу(РеквизитыЗаполнения)
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(РеквизитыЗаполнения.ДокументОснование, , НЕ РеквизитыЗаполнения.Проведен);
	
	Если РеквизитыЗаполнения.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		ТекстОшибки = НСтр("ru='Не требуется вводить счет-фактуру на основании документа %Документ%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", РеквизитыЗаполнения.ДокументОснование);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаполнения);
	
	ОтборРасчетов = Документы.СчетФактураНалоговыйАгент.ОтборРасчетов();
	ОтборРасчетов.Вставить("НачалоПериода", НачалоДня(Дата));
	ОтборРасчетов.Вставить("КонецПериода",  КонецМесяца(Дата));
	ОтборРасчетов.Вставить("СтавкаНДС",     Перечисления.СтавкиНДС.НДС18_118);
	ОтборРасчетов.Вставить("Организация",   Организация);
	ОтборРасчетов.Вставить("РасчетныйДокумент", РеквизитыЗаполнения.ДокументОснование);
	
	ВыплаченныеСуммы = Новый ТаблицаЗначений;;
	ВыплаченныеСуммы.Колонки.Добавить("СФСформирован");
	ВыплаченныеСуммы.Колонки.Добавить("СчетФактура");
	ВыплаченныеСуммы.Колонки.Добавить("ВидАгентскогоДоговора");
	ВыплаченныеСуммы.Колонки.Добавить("ЮрФизЛицо");
	ВыплаченныеСуммы.Колонки.Добавить("Сумма");
	ВыплаченныеСуммы.Колонки.Добавить("СтавкаНДС");
	ВыплаченныеСуммы.Колонки.Добавить("СуммаНДС");
	
	Документы.СчетФактураНалоговыйАгент.ЗаполнитьОплатыПоставщикам(ОтборРасчетов, ВыплаченныеСуммы);
	
	ВыплаченныеСуммы.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Ложь));
	
	Для Каждого СтрокаВыплаченныеСуммы Из ВыплаченныеСуммы Цикл
		СтрокаДокумента = РасшифровкаСуммы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаВыплаченныеСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДокумента, СтруктураДействий, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьДублиСчетФактуры(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка <> &Ссылка
	|	И ДанныеДокумента.ДокументОснование = &ДокументОснование
	|	И Не ДанныеДокумента.ПометкаУдаления
	|	И (ДанныеДокумента.Договор = &Договор)
	|	И (ДанныеДокумента.Организация = &Организация
	|		ИЛИ &Организация = Неопределено)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Договор) Тогда
			Текст = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для документа %1 по организации %2 и договору %3 уже введен счет-фактура %4'"),
					ДокументОснование,
					Организация,
					Договор,
					Выборка.Ссылка);
		Иначе
			Текст = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для документа %1 по организации %2 уже введен счет-фактура %3'"),
					ДокументОснование,
					Организация,
					Выборка.Ссылка);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ДокументОснование",
				,
				Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСтрокуРасчетноПлатежныхДокументов()
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Номер, Дата");
	
	СтрокаНомеровИДата = 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина)
			+ " от " 
			+ Формат(РеквизитыДокумента.Дата, "ДФ=dd.MM.yyyy");
	
	Если СтрокаПлатежноРасчетныеДокументы <> СтрокаНомеровИДата Тогда
		СтрокаПлатежноРасчетныеДокументы = СтрокаНомеровИДата;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ

Процедура УстановитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете()
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Новый Структура;
	НепроверяемыеРеквизиты.Вставить("СуммаКПоступлению");
	НепроверяемыеРеквизиты.Вставить("Руководитель");
	НепроверяемыеРеквизиты.Вставить("ГлавныйБухгалтер");
	
	ИзмененияДокумента = ОбщегоНазначенияУТ.ИзмененияДокумента(ЭтотОбъект);
	
	ИзменилисьРеквизитыПеречисленияНалога = Ложь;
	ИзменилисьРеквизитыНачисленияНалога   = Ложь;
	
	РеквизитыПеречисленияНалога = Новый Структура;
	РеквизитыПеречисленияНалога.Вставить("НалогПеречислен");
	РеквизитыПеречисленияНалога.Вставить("ДатаПеречисленияНалога");
	РеквизитыПеречисленияНалога.Вставить("НомерДокументаПеречисленияНалога");
	РеквизитыПеречисленияНалога.Вставить("ДатаДокументаПеречисленияНалога");
	
	Если ИзмененияДокумента.Свойство("Реквизиты") Тогда
		Для каждого Реквизит Из ИзмененияДокумента.Реквизиты Цикл
			Если РеквизитыПеречисленияНалога.Свойство(Реквизит.Имя) Тогда
				ИзменилисьРеквизитыПеречисленияНалога = Истина; 
			Иначе
				ИзменилисьРеквизитыНачисленияНалога = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИзмененияДокумента.Свойство("ТабличныеЧасти") 
		И ИзмененияДокумента.ТабличныеЧасти.Свойство("РасшифровкаСуммы") Тогда
		ИзменилисьРеквизитыНачисленияНалога = Истина;
	КонецЕсли;
	
	Если ИзменилисьРеквизитыНачисленияНалога Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменилисьРеквизитыПеречисленияНалога Тогда
		СтрокаДатаПеречисленияНалога = ИзмененияДокумента.Реквизиты.Найти("ДатаПеречисленияНалога", "Имя");
		Если СтрокаДатаПеречисленияНалога <> Неопределено 
			И НачалоДня(СтрокаДатаПеречисленияНалога.СтароеЗначение) = НачалоДня(Дата) Тогда
			РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
				ДополнительныеСвойства, 
				Организация, 
				Дата);
		КонецЕсли;
		Для каждого Строка Из ДокументыПоступления Цикл
			ДатаРегистрации = Макс(ДатаПеречисленияНалога, Строка.ДатаПоступления);
			РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
				ДополнительныеСвойства, 
				Организация, 
				ДатаРегистрации);
		КонецЦикла;
	ИначеЕсли ИзмененияДокумента.Свойство("ТабличныеЧасти") И ИзмененияДокумента.ТабличныеЧасти.Свойство("ДокументыПоступления") Тогда
		Для каждого Строка Из ИзмененияДокумента.ТабличныеЧасти.ДокументыПоступления Цикл
			ДатаРегистрации = Макс(ДатаПеречисленияНалога, Строка.ДатаПоступления);
			РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
				ДополнительныеСвойства, 
				Организация, 
				ДатаРегистрации);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

// 4D:ERP для Беларуси, ВалентинМ, 07.07.2017 16:54:29 
// ЭСЧФ
// {

#Область ТабличнаяЧасть

Процедура ЗаполнитьТабличнуюЧасть(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ОпределитьДокументОснованиеДляЗаполнения();	
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Товары.Загрузить(Документы.СчетФактураВыданный.ВыбратьДанныеТЧНаИмпортГТД(Основание));
	ИначеЕсли	ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		Товары.Загрузить(Документы.СчетФактураВыданный.ВыбратьДанныеТЧНаИмпортЗаявление(Основание));
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		ЗаполнитьПоРеализацияУслугПрочихАктивов(Основание);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетДавальцу") Тогда
		ЗаполнитьТабличнуюЧастьТоварыПоОтчетДавальцу(Основание);
	Иначе
		
		МетаданныеДокумента = Основание.Метаданные();
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
			ЗаполнитьТабличнуюЧастьПоТоварам(Основание);			
		ИначеЕсли МетаданныеДокумента.ТабличныеЧасти.Найти("Услуги") <> Неопределено Тогда	
			ЗаполнитьТабличнуюЧастьПоУслугам(Основание);
		КонецЕсли;		
			
	КонецЕсли;	
	
КонецПроцедуры	

Функция ЗаполнитьПоРеализацияУслугПрочихАктивов(ДокументОснование) Экспорт
	
	Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияУслугПрочихАктивовДоходы.Содержание 		КАК Номенклатура,
		|	РеализацияУслугПрочихАктивовДоходы.ЕдиницаИзмерения КАК Упаковка,
		|	РеализацияУслугПрочихАктивовДоходы.Количество		КАК	Количество,
		|	РеализацияУслугПрочихАктивовДоходы.СтавкаНДС        КАК СтавкаНДС,
		|	РеализацияУслугПрочихАктивовДоходы.Цена       * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Цена,
		|	РеализацияУслугПрочихАктивовДоходы.Сумма      * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Сумма,
		|	РеализацияУслугПрочихАктивовДоходы.СуммаНДС   * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаНДС,
		|	РеализацияУслугПрочихАктивовДоходы.СуммаСНДС  * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаСНДС
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК РеализацияУслугПрочихАктивовДоходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|		ПО РеализацияУслугПрочихАктивовДоходы.Ссылка.Валюта = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	РеализацияУслугПрочихАктивовДоходы.Ссылка = &ДокументОснование";
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Период", Период);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Товары.Загрузить(ТаблицаТоваров);
	
КонецФункции

Функция ЗаполнитьТабличнуюЧастьПоТоварам(ДокументОснование) Экспорт
	
	Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Коэффициент = -1;
	Иначе 
		Коэффициент = 1;
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура 		 КАК Номенклатура,
		|	&ТекстЗапросаЕдиницаИзмерения 		 КАК Упаковка,
		|	ТаблицаТоваров.Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|	ТаблицаТоваров.Номенклатура.КодОКВЭД КАК КодОКЭД,
		|	ТаблицаТоваров.Количество 			 КАК Количество,
		|	ТаблицаТоваров.СтавкаНДС             КАК СтавкаНДС,
		|	ТаблицаТоваров.Цена      * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент КАК Цена,
		|	ТаблицаТоваров.Сумма     * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент КАК Сумма,
		|	ТаблицаТоваров.СуммаНДС  * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент КАК СуммаНДС,
		|	ТаблицаТоваров.СуммаСНДС * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент КАК СуммаСНДС
		|ИЗ
		|	Документ." + ДокументОснование.Метаданные().Имя + ".Товары КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|		ПО ТаблицаТоваров.Ссылка.Валюта = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	ТаблицаТоваров.Ссылка = &ДокументОснование
		|	И ТаблицаТоваров.Цена > 0";
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка",
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
			
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Коэффициент", Коэффициент);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Товары.Загрузить(ТаблицаТоваров);
	
КонецФункции

Функция ЗаполнитьТабличнуюЧастьПоУслугам(ДокументОснование) Экспорт
	
	Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");

	Запрос = Новый Запрос;
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура 				 КАК Номенклатура,
		|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
		|	ТаблицаТоваров.Номенклатура.КодТНВЭД 		 КАК КодТНВЭД,
		|	ТаблицаТоваров.Номенклатура.КодОКВЭД 		 КАК КодОКЭД,
		|	ТаблицаТоваров.Количество					 КАК Количество,
		|	ТаблицаТоваров.СтавкаНДС					 КАК СтавкаНДС,
		|	ТаблицаТоваров.Цена 	 * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Цена,
		|	ТаблицаТоваров.Сумма	 * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Сумма,
		|	ТаблицаТоваров.СуммаНДС	 * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаНДС,
		|	ТаблицаТоваров.СуммаСНДС * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаСНДС
		|ИЗ
		|	Документ." + ДокументОснование.Метаданные().Имя + ".Услуги КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|		ПО ТаблицаТоваров.Ссылка.Валюта = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	ТаблицаТоваров.Ссылка = &ДокументОснование";
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Период", Период);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Товары.Загрузить(ТаблицаТоваров);
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьТоварыПоОтчетДавальцу(ДокументОснование) Экспорт
	
	Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.КодОКВЭД КАК КодОКЭД,
	|	1 КАК Количество,
	|	СУММА(ОтчетДавальцуПродукция.СуммаСНДС - ОтчетДавальцуПродукция.СуммаНДС) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Цена,
	|	СУММА(ОтчетДавальцуПродукция.СуммаСНДС - ОтчетДавальцуПродукция.СуммаНДС) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Сумма,
	|	ОтчетДавальцуПродукция.Ссылка.СтавкаНДС,
	|	СУММА(ОтчетДавальцуПродукция.СуммаНДС) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаНДС,
	|	СУММА(ОтчетДавальцуПродукция.СуммаСНДС) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаСНДС
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ОтчетДавальцуПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|		ПО ОтчетДавальцуПродукция.Ссылка.Валюта = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ОтчетДавальцуПродукция.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.ЕдиницаИзмерения,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.КодТНВЭД,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.КодОКВЭД,
	|	ОтчетДавальцуПродукция.Ссылка.СтавкаНДС";
	
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция ОпределитьДокументОснованиеДляЗаполнения(ДанныеЗаполнения = Неопределено) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Основание = ДокументОснование;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			Основание = ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	ТермТаблицы = "";
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		ТермТаблицы = "Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность";
	ИначеЕсли	ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ТермТаблицы = "Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа";
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		ТермТаблицы = "Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТермТаблицы) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Основание);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	тчДок.Заказ
		|ИЗ
		|	" + ТермТаблицы + " КАК тчДок
		|ГДЕ
		|	тчДок.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	тчДок.НомерСтроки";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Основание = Выборка.Заказ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Основание;
	
КонецФункции	

#КонецОбласти
// }
// 4D 

#КонецЕсли
