#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		РеквизитыЗаполнения = РеквизитыРасходныйКассовыйОрдер(ДанныеЗаполнения);
		ЗаполнитьПоПлатежномуДокументу(РеквизитыЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		РеквизитыЗаполнения = РеквизитыСписаниеБезналичныхДенежныхСредств(ДанныеЗаполнения);
		ЗаполнитьПоПлатежномуДокументу(РеквизитыЗаполнения);
	КонецЕсли;

	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Проверим время документа относительно времени документа-основания
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДатаДокументаОснования = ДокументОснование.Дата;
		Если НачалоДня(Дата) = НачалоДня(ДатаДокументаОснования) ИЛИ НЕ ЗначениеЗаполнено(Дата) Тогда
		 	
			Дата = ?(ДатаДокументаОснования = КонецДня(ДатаДокументаОснования),
					 ДатаДокументаОснования,
					 ДатаДокументаОснования + 1);
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ НалогПеречислен Тогда
		ДатаПеречисленияНалога = Неопределено;
	КонецЕсли;
	
	Сумма = РасшифровкаСуммы.Итог("Сумма");
	СуммаСНДС = РасшифровкаСуммы.Итог("СуммаСНДС");
	СуммаНДС = РасшифровкаСуммы.Итог("СуммаНДС");
	
	СуммаКПоступлению = РасшифровкаСуммы.Итог("Сумма") - ДокументыПоступления.Итог("СуммаОплаты");
	СформироватьСтрокуРасчетноПлатежныхДокументов();
	
	Если Не ПометкаУдаления Тогда
		ПроверитьДублиСчетФактуры(Отказ);
	КонецЕсли;
	
	//++ НЕ УТ
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УстановитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете();
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.СчетФактураНалоговыйАгент.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ДоходыИРасходыСервер.ОтразитьЖурналУчетаСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПокупок(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСПредъявленный(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	
	//++ НЕ УТ
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТ
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если РасшифровкаСуммы.Итог("Сумма") < ДокументыПоступления.Итог("СуммаОплаты") Тогда
		
		ТекстСообщения = НСтр("ru = 'Сумма оплаты по счету-фактуре меньше суммы распределенной по документам поступления.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"СуммаКПоступлению",
			, // ПутьКДанным 
			Отказ);
	
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Проведен") Тогда
		
		ТекстСообщения = НСтр("ru = 'Счет-фактуру можно провести только на основании проведенного документа.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"ДокументОснование",
			, // ПутьКДанным 
			Отказ);
	
	КонецЕсли;
	
	Если НЕ НалогПеречислен Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПеречисленияНалога");
		МассивНепроверяемыхРеквизитов.Добавить("НомерДокументаПеречисленияНалога");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаДокументаПеречисленияНалога");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = "0";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Функция РеквизитыРасходныйКассовыйОрдер(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.Проведен КАК Проведен,
	|	РасходныйКассовыйОрдер.Ссылка КАК ДокументОснование,
	|	РасходныйКассовыйОрдер.Организация КАК Организация,
	|	РасходныйКассовыйОрдер.Контрагент КАК Поставщик,
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция РеквизитыСписаниеБезналичныхДенежныхСредств(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеБезналичныхДенежныхСредств.Дата КАК Дата,
	|	СписаниеБезналичныхДенежныхСредств.Проведен КАК Проведен,
	|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК ДокументОснование,
	|	СписаниеБезналичныхДенежныхСредств.Организация КАК Организация,
	|	СписаниеБезналичныхДенежныхСредств.Контрагент КАК Поставщик,
	|	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Процедура ЗаполнитьПоПлатежномуДокументу(РеквизитыЗаполнения)
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(РеквизитыЗаполнения.ДокументОснование, , НЕ РеквизитыЗаполнения.Проведен);
	
	Если РеквизитыЗаполнения.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		ТекстОшибки = НСтр("ru='Не требуется вводить счет-фактуру на основании документа %Документ%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", РеквизитыЗаполнения.ДокументОснование);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаполнения);
	
	ОтборРасчетов = Документы.СчетФактураНалоговыйАгент.ОтборРасчетов();
	ОтборРасчетов.Вставить("НачалоПериода", НачалоДня(Дата));
	ОтборРасчетов.Вставить("КонецПериода",  КонецМесяца(Дата));
	ОтборРасчетов.Вставить("СтавкаНДС",     Перечисления.СтавкиНДС.НДС18_118);
	ОтборРасчетов.Вставить("Организация",   Организация);
	ОтборРасчетов.Вставить("РасчетныйДокумент", РеквизитыЗаполнения.ДокументОснование);
	
	ВыплаченныеСуммы = Новый ТаблицаЗначений;;
	ВыплаченныеСуммы.Колонки.Добавить("СФСформирован");
	ВыплаченныеСуммы.Колонки.Добавить("СчетФактура");
	ВыплаченныеСуммы.Колонки.Добавить("ВидАгентскогоДоговора");
	ВыплаченныеСуммы.Колонки.Добавить("ЮрФизЛицо");
	ВыплаченныеСуммы.Колонки.Добавить("Сумма");
	ВыплаченныеСуммы.Колонки.Добавить("СтавкаНДС");
	ВыплаченныеСуммы.Колонки.Добавить("СуммаНДС");
	
	Документы.СчетФактураНалоговыйАгент.ЗаполнитьОплатыПоставщикам(ОтборРасчетов, ВыплаченныеСуммы);
	
	ВыплаченныеСуммы.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Ложь));
	
	Для Каждого СтрокаВыплаченныеСуммы Из ВыплаченныеСуммы Цикл
		СтрокаДокумента = РасшифровкаСуммы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаВыплаченныеСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДокумента, СтруктураДействий, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьДублиСчетФактуры(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка <> &Ссылка
	|	И ДанныеДокумента.ДокументОснование = &ДокументОснование
	|	И Не ДанныеДокумента.ПометкаУдаления
	|	И (ДанныеДокумента.Договор = &Договор)
	|	И (ДанныеДокумента.Организация = &Организация
	|		ИЛИ &Организация = Неопределено)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Договор) Тогда
			Текст = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для документа %1 по организации %2 и договору %3 уже введен счет-фактура %4'"),
					ДокументОснование,
					Организация,
					Договор,
					Выборка.Ссылка);
		Иначе
			Текст = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для документа %1 по организации %2 уже введен счет-фактура %3'"),
					ДокументОснование,
					Организация,
					Выборка.Ссылка);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ДокументОснование",
				,
				Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСтрокуРасчетноПлатежныхДокументов()
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Номер, Дата");
	
	СтрокаНомеровИДата = 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина)
			+ " от " 
			+ Формат(РеквизитыДокумента.Дата, "ДФ=dd.MM.yyyy");
	
	Если СтрокаПлатежноРасчетныеДокументы <> СтрокаНомеровИДата Тогда
		СтрокаПлатежноРасчетныеДокументы = СтрокаНомеровИДата;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ

Процедура УстановитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете()
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Новый Структура;
	НепроверяемыеРеквизиты.Вставить("СуммаКПоступлению");
	НепроверяемыеРеквизиты.Вставить("Руководитель");
	НепроверяемыеРеквизиты.Вставить("ГлавныйБухгалтер");
	
	ИзмененияДокумента = ОбщегоНазначенияУТ.ИзмененияДокумента(ЭтотОбъект);
	
	ИзменилисьРеквизитыПеречисленияНалога = Ложь;
	ИзменилисьРеквизитыНачисленияНалога   = Ложь;
	
	РеквизитыПеречисленияНалога = Новый Структура;
	РеквизитыПеречисленияНалога.Вставить("НалогПеречислен");
	РеквизитыПеречисленияНалога.Вставить("ДатаПеречисленияНалога");
	РеквизитыПеречисленияНалога.Вставить("НомерДокументаПеречисленияНалога");
	РеквизитыПеречисленияНалога.Вставить("ДатаДокументаПеречисленияНалога");
	
	Если ИзмененияДокумента.Свойство("Реквизиты") Тогда
		Для каждого Реквизит Из ИзмененияДокумента.Реквизиты Цикл
			Если РеквизитыПеречисленияНалога.Свойство(Реквизит.Имя) Тогда
				ИзменилисьРеквизитыПеречисленияНалога = Истина; 
			Иначе
				ИзменилисьРеквизитыНачисленияНалога = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИзмененияДокумента.Свойство("ТабличныеЧасти") 
		И ИзмененияДокумента.ТабличныеЧасти.Свойство("РасшифровкаСуммы") Тогда
		ИзменилисьРеквизитыНачисленияНалога = Истина;
	КонецЕсли;
	
	Если ИзменилисьРеквизитыНачисленияНалога Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменилисьРеквизитыПеречисленияНалога Тогда
		СтрокаДатаПеречисленияНалога = ИзмененияДокумента.Реквизиты.Найти("ДатаПеречисленияНалога", "Имя");
		Если СтрокаДатаПеречисленияНалога <> Неопределено 
			И НачалоДня(СтрокаДатаПеречисленияНалога.СтароеЗначение) = НачалоДня(Дата) Тогда
			РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
				ДополнительныеСвойства, 
				Организация, 
				Дата);
		КонецЕсли;
		Для каждого Строка Из ДокументыПоступления Цикл
			ДатаРегистрации = Макс(ДатаПеречисленияНалога, Строка.ДатаПоступления);
			РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
				ДополнительныеСвойства, 
				Организация, 
				ДатаРегистрации);
		КонецЦикла;
	ИначеЕсли ИзмененияДокумента.Свойство("ТабличныеЧасти") И ИзмененияДокумента.ТабличныеЧасти.Свойство("ДокументыПоступления") Тогда
		Для каждого Строка Из ИзмененияДокумента.ТабличныеЧасти.ДокументыПоступления Цикл
			ДатаРегистрации = Макс(ДатаПеречисленияНалога, Строка.ДатаПоступления);
			РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
				ДополнительныеСвойства, 
				Организация, 
				ДатаРегистрации);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли
