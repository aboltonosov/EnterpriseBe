#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Заполнение

// Заполняет табличную часть ЭтапыГрафикаОплаты
//
Процедура ЗаполнитьЭтапыГрафикаОплаты() Экспорт
	
	Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЭтапыГрафикаОплаты.Очистить();
	КонецЕсли;
		
	Если ПолучитьКоличествоЗаказанныхСтрок() <> 0 Тогда
		
		НовыйЭтап = ЭтапыГрафикаОплаты.Добавить();
		НовыйЭтап.ВариантОплаты  = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления;
		НовыйЭтап.ДатаПлатежа    = ?(ЗначениеЗаполнено(ЖелаемаяДатаПоступления), ЖелаемаяДатаПоступления, Дата);
		НовыйЭтап.ПроцентПлатежа = 100;
		НовыйЭтап.СуммаПлатежа   = Услуги.Итог("СуммаСНДС");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж в заказе поставщику
//
// Параметры:
//	УсловияЗакупок - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияЗакупок(Знач УсловияЗакупок) Экспорт
	
	Если УсловияЗакупок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияЗакупок.Валюта;
	НаправлениеДеятельности = УсловияЗакупок.НаправлениеДеятельности;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.ФормаОплаты) Тогда
		ФормаОплаты = УсловияЗакупок.ФормаОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация <> Организация Тогда
		
		Организация    = УсловияЗакупок.Организация;

		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
		СтруктураПараметров.НаправлениеДеятельности	= НаправлениеДеятельности;
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
		СтруктураПараметров.НаправлениеДеятельности	= НаправлениеДеятельности;
		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Склад) Тогда
		Склад = УсловияЗакупок.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) Тогда
		Контрагент = УсловияЗакупок.Контрагент;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
			ПараметрыОбъектаССоглашением(),
			Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика,
			Валюта);
	
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет);
	
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности,  , Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов) 
		ИЛИ НЕ УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		ПорядокОплаты = УсловияЗакупок.ПорядокОплаты;
	Иначе
		ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокОплаты");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияЗакупок.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.СрокПоставки) Тогда
		
		ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
		ЖелаемаяДатаПоступления = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
			ДатаДокумента,
			Перечисления.Периодичность.День,
			УсловияЗакупок.СрокПоставки) + 1;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Склад) Тогда
		ЗакупкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия закупок по торговому соглашению с поставщиком
//
Процедура ЗаполнитьУсловияЗакупокПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ПараметрыОтбора = Новый Структура("УчитыватьГруппыСкладов", Истина);
		
		УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер, ПараметрыОтбора);
		Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
			ЗаполнитьУсловияЗакупок(УсловияЗакупокПоУмолчанию);
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
КонецПроцедуры

#КонецОбласти

#Область Статус

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПереработчикам[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован Тогда
		
		Если Согласован Тогда
			Согласован = Ложь;
		КонецЕсли;
		
	ИначеЕсли ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПереработчикам.КИсполнению
		  Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПереработчикам.Закрыт Тогда
		
		// Новый статус документа "К исполнению" или "Закрыт"
		Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления)
			И Статус <> Перечисления.СтатусыЗаказовПереработчикам.Закрыт
			И Статус <> Перечисления.СтатусыЗаказовПереработчикам.КИсполнению Тогда
			
			Для Каждого СтрокаТЧ Из Продукция Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
					СтрокаТЧ.ДатаПоступления = ЖелаемаяДатаПоступления;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказПереработчику);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область Прочее

// Рассчитывает сумму неотмененных строк поставки сырья
//
// Возвращаемое значение:
// 		Структура - Структура с суммой и датой отгрузки не отмененных строк материалов
// 			* Сумма - Число - Залоговая сумма
// 			* Дата - Дата отгрузки
//
Функция ПолучитьЗалоговуюСуммуСДатойОтгрузки() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Сумма КАК Сумма,
	|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Товары.Отменено КАК Отменено
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.Сумма), 0) КАК Сумма,
	|	ЕСТЬNULL(МИНИМУМ(Товары.ДатаОтгрузки), ДАТАВРЕМЯ(1,1,1)) КАК ДатаОтгрузки
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено");
	
	Запрос.УстановитьПараметр("Товары", Материалы.Выгрузить(,"Номенклатура, Сумма, ДатаОтгрузки, Отменено"));
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Новый Структура("Сумма, ДатаОтгрузки", Выгрузка[0].Сумма, Выгрузка[0].ДатаОтгрузки);
	
КонецФункции

// Рассчитывает количество неотмененных строк заявки
//
// Возвращаемое значение:
// 		Число - Количество строк, у которых флаг "Отменено" равен "Ложь"
//
Функция ПолучитьКоличествоЗаказанныхСтрок() Экспорт
	
	НайденныеСтроки = Продукция.НайтиСтроки(Новый Структура("Отменено", Ложь));
	Возврат НайденныеСтроки.Количество();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ПустаяДата = Дата(1,1,1);
	
	МатериалыМаксимальныйКодСтроки			= 0;
	ПродукцияМаксимальныйКодСтроки			= 0;
	Статус									= Перечисления.СтатусыЗаказовПереработчикам.НеСогласован;
	ЖелаемаяДатаОтгрузки					= ПустаяДата;
	ЖелаемаяДатаПоступления					= ПустаяДата;
	ДатаОтгрузки							= ПустаяДата;
	ДатаПоступления							= ПустаяДата;
	Согласован								= Ложь;
	НомерПоДаннымПоставщика					= "";
	ДатаПоДаннымПоставщика					= ПустаяДата;
	Назначение								= Неопределено;
	ДокументОснование						= Неопределено;
	
	// Реквизиты производства
	СостояниеЗаполненияМногооборотнойТары	= Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();

	РаспоряжениеСпецификация.Очистить();
	
	Для Каждого СтрокаТЧ Из Продукция Цикл
		СтрокаТЧ.КодСтроки       = 0;
		СтрокаТЧ.ДатаПоступления = ПустаяДата;
		СтрокаТЧ.Отменено        = Ложь;
		СтрокаТЧ.ПричинаОтмены   = Справочники.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка();
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ВозвратныеОтходы Цикл
		СтрокаТЧ.КодСтроки       = 0;
		СтрокаТЧ.ДатаПоступления = ПустаяДата;
		СтрокаТЧ.Отменено        = Ложь;
		СтрокаТЧ.ПричинаОтмены   = Справочники.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка();
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Материалы Цикл
		СтрокаТЧ.КодСтроки     = 0;
		СтрокаТЧ.ДатаОтгрузки  = ПустаяДата;
		СтрокаТЧ.Отменено      = Ложь;
		СтрокаТЧ.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка();
		СтрокаТЧ.Назначение    = Справочники.Назначения.ПустаяСсылка();
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ЭтапыГрафикаОплаты Цикл
		СтрокаТЧ.ДатаПлатежа = ПустаяДата;
	КонецЦикла;
	
	//++ НЕ УТКА
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство 
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством")
		ИЛИ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
			
		ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки;
		ПереработкаПоЗаказу = Ложь;
		ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(Продукция, 0, "НомерГруппыЗатрат");
		ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(ВозвратныеОтходы, 0, "НомерГруппыЗатрат");
		ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(Материалы, 0, "НомерГруппыЗатрат");
		Услуги.Очистить();
		СуммаСНДС = 0;
		СуммаДокумента = 0;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Менеджер = Пользователи.ТекущийПользователь();
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
		
		ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Товары") Тогда //Заполнение из обработки "Обеспечение потребностей".
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			
			ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;
			
			Продукция.Загрузить(ДанныеЗаполнения.Товары);
			
			ИнициализироватьДокументПослеДобавленияПродукции();
			
			Если Не ЗначениеЗаполнено(Валюта) Тогда
				Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
			КонецЕсли;

			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);

//++ НЕ УТКА
		ИначеЕсли ДанныеЗаполнения.Свойство("ЭтапыГрафика") Тогда
			
			ПереработкаПоЗаказу = Истина;
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
			Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
				Документы.ЗаказПереработчику.ЗаполнитьПоЗаказуНаПроизводство(ДанныеЗаполнения.ЭтапыГрафика, ЭтотОбъект);
				ЗаполнитьДанныеРаспоряжения();
			Иначе
				Документы.ЗаказПереработчику.ЗаполнитьПоЭтапамПроизводства(ДанныеЗаполнения.ЭтапыГрафика, ЭтотОбъект);
			КонецЕсли; 
			
			ЗаполнитьУсловияЗакупокПоУмолчанию();
//-- НЕ УТКА
		КонецЕсли;

//++ НЕ УТКА
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		ЗаполнитьДокументНаОснованииЭтапаПроизводства(ДанныеЗаполнения);
		
//-- НЕ УТКА
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		
		ЗаполнитьДокументНаОснованииСделки(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ЗаполнитьДокументНаОснованииЗаказаКлиента(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь",   Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	Если НЕ ПереработкаПоЗаказу Тогда
		ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПорядокОплаты) Тогда	
		ВалютаОплаты   = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ФормаОплаты, БанковскийСчет, Касса);
		ПорядокОплаты  = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта,,ВалютаОплаты);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Склад);
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не СкладГруппа Тогда
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, Продукция, Ложь);
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, ВозвратныеОтходы, Ложь);
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
			СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, Материалы, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	//++ НЕ УТКА
	Если НЕ ЭтоНовый() Тогда
		ГруппировкаЗатратДоИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ГруппировкаЗатрат");
	Иначе
		ГруппировкаЗатратДоИзменения = ГруппировкаЗатрат;
	КонецЕсли; 
	ДополнительныеСвойства.Вставить("ГруппировкаЗатратДоИзменения", ГруппировкаЗатратДоИзменения);
	//-- НЕ УТКА
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Услуги.Очистить();
		ДанныеСтроки = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЭтотОбъект);
	Иначе
		СуммаНДС = Услуги.Итог("СуммаНДС");
	КонецЕсли;
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "Продукция";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "ВозвратныеОтходы";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "Материалы";
	ПараметрыОкругления.УсловиеОтбораСтрокДляОкругления = "Материалы.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	//++ НЕ УТКА
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		
		// Удаление данных заказа на производство
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаЗаказа Из РаспоряжениеСпецификация Цикл
			Если Услуги.Найти(СтрокаЗаказа.НомерГруппыЗатрат, "НомерГруппыЗатрат") = Неопределено Тогда
				СтрокиКУдалению.Добавить(СтрокаЗаказа);
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаЗаказа Из СтрокиКУдалению Цикл
			РаспоряжениеСпецификация.Удалить(СтрокаЗаказа);
		КонецЦикла;
		
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(Распоряжение, Услуги, "Распоряжение");
		
	Иначе
		
		РаспоряжениеСпецификация.Очистить();
		
	КонецЕсли;
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		ПроверитьВозможностьСвязиСЭтапами(Отказ);
	КонецЕсли;
	//-- НЕ УТКА
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Продукция",        "ПродукцияМаксимальныйКодСтроки");
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", "ПродукцияМаксимальныйКодСтроки");
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Материалы",        "МатериалыМаксимальныйКодСтроки");
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказПереработчику);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий);
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ПараметрыОбъектаССоглашением());
	
	ГрафикИсполненияВДоговоре = Ложь;
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Договор) Тогда
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ЗаданГрафикИсполнения");
	КонецЕсли;
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ГрафикИсполненияВДоговоре Тогда
		
		ЭтапыГрафикаОплаты.Очистить();
		СуммаАвансаДоПодтверждения = 0;
		СуммаПредоплатыДоПоступления = 0;
		
	Иначе
		
		ТаблицаЭтапов = ЭтапыГрафикаОплаты.Выгрузить(, "ВариантОплаты, СуммаПлатежа");
		ТаблицаЭтапов.Свернуть("ВариантОплаты", "СуммаПлатежа");
		
		СтрокаАвансаДоПодтверждения = ТаблицаЭтапов.Найти(Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения, "ВариантОплаты");
		Если СтрокаАвансаДоПодтверждения = Неопределено Тогда
			СуммаАвансаДоПодтверждения = 0;
		Иначе
			СуммаАвансаДоПодтверждения = СтрокаАвансаДоПодтверждения.СуммаПлатежа;
		КонецЕсли;
		
		СтрокаПредоплатыДоПоступления = ТаблицаЭтапов.Найти(Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления, "ВариантОплаты");
		Если СтрокаПредоплатыДоПоступления = Неопределено Тогда
			СуммаПредоплатыДоПоступления = 0;
		Иначе
			СуммаПредоплатыДоПоступления = СтрокаПредоплатыДоПоступления.СуммаПлатежа;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяДатаПоступления = Дата(1,1,1);
	
	Если Продукция.Количество() > 0 Тогда
		
		Если Статус = Перечисления.СтатусыЗаказовПереработчикам.КИсполнению Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Отменено", Ложь);
			ПодтвержденныеСтроки = Продукция.НайтиСтроки(ПараметрыОтбора);
			
			Если ПодтвержденныеСтроки.Количество() > 0 Тогда
				
				ТаблицаПодтвержденныхСтрок = Продукция.Выгрузить(ПодтвержденныеСтроки, "ДатаПоступления");
				ТаблицаПодтвержденныхСтрок.Сортировать("ДатаПоступления Возр");
				НоваяДатаПоступления = ТаблицаПодтвержденныхСтрок[0].ДатаПоступления;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаПервогоПоступления = НоваяДатаПоступления;
	
	СтруктураЗалоговыхДанных = ПолучитьЗалоговуюСуммуСДатойОтгрузки();
	
	СуммаДокумента = Услуги.Итог("СуммаСНДС");
	СуммаЗалоговая = СтруктураЗалоговыхДанных.Сумма;
	
	Если Не НеОтгружатьЧастями Тогда
		
		НоваяДатаОтгрузки = Дата(1,1,1);
		
		Если Статус = Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению Тогда
			НоваяДатаОтгрузки = СтруктураЗалоговыхДанных.ДатаОтгрузки;
		КонецЕсли;
		
		ДатаОтгрузки = НоваяДатаОтгрузки;
		
	Иначе
		ОбеспечениеСервер.ЗаполнитьДатыОтгрузкиВТаблице(ДатаОтгрузки, Материалы, "ДатаОтгрузки");
	КонецЕсли;
	
	ДокументСогласован = Согласован;
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи,
		Перечисления.СтатусыЗаказовПереработчикам.НеСогласован);
	
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("Касса");
		ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, МассивРеквизитов, Новый Массив);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Назначение) Тогда

		Обособленно          = Перечисления.ВариантыОбеспечения.Обособленно;
		ОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
		ТребуетсяНазначение = Ложь;

		Для Каждого Строка Из Материалы Цикл
			Если Строка.ВариантОбеспечения = Обособленно Или Строка.ВариантОбеспечения = ОтгрузитьОбособленно Тогда
				ТребуетсяНазначение = Истина;
			КонецЕсли;
		КонецЦикла;

		Если ТребуетсяНазначение Тогда 
			Назначение = Справочники.Назначения.ПолучитьСсылкуДляНовогоЗаказа(НаправлениеДеятельности);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	Справочники.Назначения.СоздатьОбновитьНазначение(Ссылка, Назначение, Партнер, Номер, Дата, ПометкаУдаления, НаправлениеДеятельности);
	
	//++ НЕ УТКА
	Если (ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства 
			ИЛИ ДополнительныеСвойства.ГруппировкаЗатратДоИзменения = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства) 
		И НЕ Отказ Тогда
		
		Если НЕ ПометкаУдаления Тогда
			ОбновитьЭтапыПроизводстваСвязаныеСЗаказом(Отказ);
		Иначе
			УбратьСвязьЭтаповПроизводстваСПомеченнымНаУдалениеЗаказом(Отказ);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИспользоватьУслуги = (УслугиПоПереработке = Перечисления.ВариантыОформленияУслугДокументовПереработки.УказываютсяВЗаказеОтчете);
	
	СтатусДокументаВышеНеСогласованного = 
		Статус = Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению
		Или Статус = Перечисления.СтатусыЗаказовПереработчикам.КИсполнению
		Или Статус = Перечисления.СтатусыЗаказовПереработчикам.Закрыт;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Продукция");
		МассивНепроверяемыхРеквизитов.Добавить("Материалы");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
	КонецЕсли;
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки 
		ИЛИ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
		ИЛИ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.Спецификация");
	КонецЕсли;
	
#Область Шапка_ЖелаемаяДатаОтгрузки_и_ЖелаемаяДатаПоступления
	Если ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		
		// Желаемая дата отгрузки в шапке должна быть не меньше даты документа
		Если ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) И ЖелаемаяДатаОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Желаемая дата отгрузки должна быть не меньше даты документа %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ЖелаемаяДатаОтгрузки", , Отказ);
			
		КонецЕсли;
		
		// Желамемая дата поступления в шапке должна быть не меньше даты документа
		Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ЖелаемаяДатаПоступления", , Отказ);
			
		КонецЕсли;
	
	КонецЕсли; 
#КонецОбласти
	
#Область Шапка_ДатаПоступления_и_ДатаОтгрузки
	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "Продукция", "Отменено");
	
	Если Не (ПоступлениеОднойДатой)
		Или (ПоступлениеОднойДатой И Не СтатусДокументаВышеНеСогласованного)
		Или (ПоступлениеОднойДатой И ВсеСтрокиОтменены) 
		Или ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПоступления");
		
	КонецЕсли;
	
	// Дата поступления в шапке должна быть не меньше даты документа
	Если ПоступлениеОднойДатой И ЗначениеЗаполнено(ДатаПоступления) И ДатаПоступления < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаПоступления", , Отказ);
		
	КонецЕсли;
	
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если НеОтгружатьЧастями И ЗначениеЗаполнено(ДатаОтгрузки) И ДатаОтгрузки < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);
		
	КонецЕсли;
	
	Если ПоступлениеОднойДатой 
		И НеОтгружатьЧастями 
		И ЗначениеЗаполнено(ДатаПоступления) 
		И ЗначениеЗаполнено(ДатаОтгрузки) 
		И ДатаОтгрузки > ДатаПоступления Тогда
		
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не больше даты поступления продукции и возвратных отходов %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ДатаПоступления,"ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);
	КонецЕсли; 
	
#КонецОбласти
	
#Область Шапка_Подразделение
	
	//Проверка заполнения подразделения для заказа в статусе "КОбеспечению" и выше.
	Если НЕ СтатусДокументаВышеНеСогласованного И НЕ ПереработкаПоЗаказу Тогда 
		
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
		
	//++ НЕ УТКА	
	ИначеЕсли ЗначениеЗаполнено(Подразделение) И ПереработкаПоЗаказу Тогда
		
		ПроверитьСоответствиеПодразделенияЗаказамНаПроизводство(Отказ);
	//-- НЕ УТКА
	КонецЕсли;
	
#КонецОбласти
	
#Область Шапка_ГрафикаОплаты
	
	Если ИспользоватьУслуги Тогда
		ПараметрыОбъекта = ПараметрыОбъектаССоглашением();
		ПорядокРасчетовПоДокументу = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ПараметрыОбъекта);
		
		ГрафикИсполненияВДоговоре = Ложь;
		Если ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			И ЗначениеЗаполнено(Договор) Тогда
			ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ЗаданГрафикИсполнения");
		КонецЕсли;
		
		Если ПорядокРасчетовПоДокументу <> Перечисления.ПорядокРасчетов.ПоНакладным
			И Не ГрафикИсполненияВДоговоре Тогда
			
			ЗакупкиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(
				ЭтотОбъект,
				СуммаСНДС,
				0,
				Истина,
				Отказ,
				Истина);
			
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокОплаты");
		
	КонецЕсли;
	
#КонецОбласти

#Область Доставка
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
#КонецОбласти

#Область Шапка_НоменклатураХарактеристика
	Если Не ПроверятьУказаниеРаботы
		Или Не ИспользоватьУслуги Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Номенклатура");
	КонецЕсли;
	Если Не Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура)
		Или Не ИспользоватьУслуги Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли;
#КонецОбласти

#Область ТЧ____Характеристики
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки.ИмяТЧ = "Материалы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	Если ИспользоватьУслуги Тогда
		ПараметрыПроверки.ИмяТЧ = "Услуги";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	КонецЕсли;
#КонецОбласти

#Область ТЧ____Количество
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Материалы";
	ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления = "Материалы.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
#КонецОбласти
	
#Область ТЧ____Серии
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказПереработчику),
												Отказ,
												МассивНепроверяемыхРеквизитов);
#КонецОбласти
	
#Область ТЧ_Продукция__ПричинаОтмены_ДатаПоступления_ТипСтоимости_ДоляСтоимости_Цена_и_Сумма
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ДатаПоступления");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ДоляСтоимости");
	
	Для ТекИндекс = 0 По Продукция.Количество() - 1 Цикл
		
		ТекСтрока = Продукция[ТекИндекс];
		
		// Дата поступления обязательна к заполнению только для заказов в 
		// статусах КОбеспечению, КИсполнению, Закрыт
		Если СтатусДокументаВышеНеСогласованного
			И Не ПоступлениеОднойДатой
			И Не ТекСтрока.Отменено
			И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата поступления"" в строке %НомерСтроки% списка ""Выпускаемая продукция""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "ДатаПоступления");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Дата поступления в тч Продукция должна быть не меньше даты документа
		Если Не ПоступлениеОднойДатой
			И ЗначениеЗаполнено(ТекСтрока.ДатаПоступления)
			И ТекСтрока.ДатаПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата% в строке %НомерСтроки% списка ""Выпускаемая продукция""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "ДатаПоступления");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам")
			И ТекСтрока.Отменено
			И Не ЗначениеЗаполнено(ТекСтрока.ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены в строке %НомерСтроки% списка ""Выпускаемая продукция""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "ПричинаОтмены");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Нужно указать долю стоимости если в группе несколько выходных изделий
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", ТекСтрока.НомерГруппыЗатрат);
		СписокСтрок = Продукция.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() > 1 И ТекСтрока.ДоляСтоимости = 0 Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Доля стоимости"" в строке %НомерСтроки% списка ""Выпускаемая продукция""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "ДоляСтоимости");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
#КонецОбласти

#Область ТЧ_ВозвратныеОтходы_ПричинаОтмены_ДатаПоступления_ТипСтоимости_ДоляСтоимости_Цена_и_Сумма
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.ДатаПоступления");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Цена");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Сумма");
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Склад);
	
	Для ТекИндекс = 0 По ВозвратныеОтходы.Количество() - 1 Цикл
		
		ТекСтрока = ВозвратныеОтходы[ТекИндекс];
		
		// Дата поступления обязательна к заполнению только для заказов в 
		// статусах КОбеспечению, КИсполнению, Закрыт
		Если СтатусДокументаВышеНеСогласованного
			И Не ПоступлениеОднойДатой
			И Не ТекСтрока.Отменено
			И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата поступления"" в строке %НомерСтроки% списка ""Возвратные отходы""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", ТекСтрока.НомерСтроки, "ДатаПоступления");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Дата поступления в тч Продукция должна быть не меньше даты документа
		Если Не ПоступлениеОднойДатой
			И ЗначениеЗаполнено(ТекСтрока.ДатаПоступления)
			И ТекСтрока.ДатаПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата% в строке %НомерСтроки% списка ""Возвратные отходы""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=D"));
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", ТекСтрока.НомерСтроки, "ДатаПоступления");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам")
			И ТекСтрока.Отменено
			И Не ЗначениеЗаполнено(ТекСтрока.ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены в строке %НомерСтроки% списка ""Возвратные отходы""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", ТекСтрока.НомерСтроки, "ПричинаОтмены");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Цена
		Если ТекСтрока.Цена = 0 Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать цену, по которой будет оприходованы возвратные отходы в строке %НомерСтроки% списка ""Возвратные отходы""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", ТекСтрока.НомерСтроки, "Цена");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Сумма
		Если ТекСтрока.Сумма = 0 Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать сумму, по которой будут оприходованы возвратные отходы в строке %НомерСтроки% списка ""Возвратные отходы""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", ТекСтрока.НомерСтроки, "Сумма");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		Если СкладГруппа И Не ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Склад"" в строке %1 списка ""Возвратные отходы""'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ТекСтрока.НомерСтроки);
			ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", ТекСтрока.НомерСтроки,"Склад");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
#КонецОбласти

#Область ТЧ____ПричинаОтмены_и_ДатаОтгрузки_и_Склад
	МассивНепроверяемыхРеквизитов.Добавить("Материалы.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("Материалы.ДатаОтгрузки");
	МассивНепроверяемыхРеквизитов.Добавить("Материалы.Склад");
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	ЕстьОшибкаДатаОтгрузки = Ложь;
	ВариантНеТребуется = Перечисления.ВариантыОбеспечения.НеТребуется;
	ДатыПоступления = Новый Соответствие;
	Для ТекИндекс = 0 По Материалы.Количество()-1 Цикл
		
		ТекСтрока = Материалы[ТекИндекс];
		
		Если Не ТекСтрока.Отменено И Не ТекСтрока.ВариантОбеспечения = ВариантНеТребуется
			И Не ЗначениеЗаполнено(ТекСтрока.Склад)
			И ИспользоватьНесколькоСкладов Тогда
			
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Склад"" в строке %НомерСтроки% списка ""Сырье и материалы""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
				ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", ТекСтрока.НомерСтроки, "Склад");
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
				
		КонецЕсли;
		
		ДатаОтгрузкиВСтрокеОбязательна = ОбеспечениеКлиентСервер.ДатаОтгрузкиОбязательна(
											ТекСтрока, Статус <> Перечисления.СтатусыЗаказовПереработчикам.НеСогласован, Истина);
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаОтгрузки) И ДатаОтгрузкиВСтрокеОбязательна Тогда
			
			Если Не НеОтгружатьЧастями Тогда
			
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата отгрузки"" в строке %НомерСтроки% списка ""Сырье и материалы""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
				ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", ТекСтрока.НомерСтроки, "ДатаОтгрузки");
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
				
			Иначе
				
				ЕстьОшибкаДатаОтгрузки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Дата отгрузки в тч Товары должна быть не меньше даты документа
		Если Не НеОтгружатьЧастями 
			И ЗначениеЗаполнено(ТекСтрока.ДатаОтгрузки) 
			И ТекСтрока.ДатаОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа ""%Дата%"" в строке %НомерСтроки% списка ""Сырье и материалы""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=D"));
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", ТекСтрока.НомерСтроки, "ДатаОтгрузки");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
		// Дата отгрузки должна быть не больше даты поступления продукции и возвратных отходов
		Если НЕ НеОтгружатьЧастями И ЗначениеЗаполнено(ТекСтрока.ДатаОтгрузки) Тогда
			ТекстОшибки = Неопределено;
			Если ПоступлениеОднойДатой Тогда
				Если ТекСтрока.ДатаОтгрузки > ДатаПоступления Тогда
					ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не больше даты поступления продукции и возвратных отходов %Дата%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(ДатаПоступления, "ДЛФ=D"));
				КонецЕсли; 
			Иначе
				ДатаПоступленияГрупы = ДатыПоступления.Получить(ТекСтрока.НомерГруппыЗатрат);
				Если ДатаПоступленияГрупы = Неопределено Тогда
					ДатаПоступленияГрупы = '000101010000';
					СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", ТекСтрока.НомерГруппыЗатрат);
	 				СписокСтрок = Продукция.НайтиСтроки(СтруктураПоиска);
					Для каждого ДанныеСтроки Из СписокСтрок Цикл
						ДатаПоступленияГрупы = ?(ДатаПоступленияГрупы <> '000101010000', 
													Мин(ДанныеСтроки.ДатаПоступления, ДанныеСтроки.ДатаПоступления), 
													ДанныеСтроки.ДатаПоступления);
					КонецЦикла;
	 				СписокСтрок = ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
					Для каждого ДанныеСтроки Из СписокСтрок Цикл
						ДатаПоступленияГрупы = ?(ДатаПоступленияГрупы <> '000101010000', 
													Мин(ДанныеСтроки.ДатаПоступления, ДанныеСтроки.ДатаПоступления), 
													ДанныеСтроки.ДатаПоступления);
					КонецЦикла;

					ДатыПоступления.Вставить(ТекСтрока.НомерГруппыЗатрат, ДатаПоступленияГрупы);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДатаПоступленияГрупы)
					И ТекСтрока.ДатаОтгрузки > ДатаПоступленияГрупы Тогда
					ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не больше даты поступления продукции и возвратных отходов %Дата%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(ДатаПоступленияГрупы, "ДЛФ=D"));
				КонецЕсли;
			КонецЕсли;
			
			Если ТекстОшибки <> Неопределено Тогда
				ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", ТекСтрока.НомерСтроки, "ДатаОтгрузки");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ,, Отказ);
			КонецЕсли; 
		КонецЕсли; 
		
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов")
			И ТекСтрока.Отменено
			И Не ЗначениеЗаполнено(ТекСтрока.ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены в строке %НомерСтроки% списка ""Сырье и материалы""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			ПутьКТЧ     = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", ТекСтрока.НомерСтроки, "ПричинаОтмены");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
#КонецОбласти

#Область Услуги

	Если Не ИспользоватьУслуги Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
		
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
		
	ИначеЕсли ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
		
	КонецЕсли;

#КонецОбласти
	
	ПроверитьУказаниеНоменклатурыКакМатериалаИКакПродукции(Продукция, Отказ);
	ПроверитьУказаниеНоменклатурыКакМатериалаИКакПродукции(ВозвратныеОтходы, Отказ);
	
	Если ЗначениеЗаполнено(НаправлениеДеятельности)
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	Если Не ЕстьОшибкаДатаОтгрузки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект, Отказ);
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ЗаказПереработчику.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьУслугиПереработчиковКОформлению(ДополнительныеСвойства, Движения, Отказ);
	
//++ НЕ УТКА
	ОперативныйУчетПроизводства.ОтразитьЗаказыНаПроизводствоСпецификации(ДополнительныеСвойства, Движения, Отказ);
	ПланированиеПроизводства.ОтразитьПереработкаПоГрафикуПроизводства(ДополнительныеСвойства, Движения, Отказ);
//-- НЕ УТКА

	// Контроль и запись движений
	СформироватьСписокРегистровДляКонтроля();
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПереработкаНаСтороне.ВыполнитьКонтрольЗаказаПослеПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииПартнера(Знач Основание)
	
	Если Основание.Поставщик И Основание.Клиент Тогда
		
		Партнер = Основание;
		ЗаполнитьУсловияЗакупокПоУмолчанию();
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Партнер должен являться одновременно и ""поставщиком"" и ""клиентом"".'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСделки(СделкаСКлиентом)
	
	Если Документы.ЗаказКлиента.ЕстьОбособленныеЗаказыПоСделке(СделкаСКлиентом) Тогда
		
		ЗаполнитьДокументНаОснованииСделкиПоОбособленныемЗаказам(СделкаСКлиентом);
		
	Иначе
		
		ЗаполнитьДокументНаОснованииСделкиСводно(СделкаСКлиентом);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииЗаказаКлиента(ЗаказКлиента)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Статус             КАК СтатусДокумента,
	|	ЗаказКлиента.Приоритет          КАК Приоритет,
	|	ЗаказКлиента.Проведен           КАК Проведен,
	|	ЗаказКлиента.Организация        КАК Организация,
	|	ЗаказКлиента.Сделка             КАК Сделка,
	|	ЗаказКлиента.Склад              КАК СкладДокумента,
	|	ЗаказКлиента.Склад.ЭтоГруппа    КАК ЭтоГруппа,
	|	ЗаказКлиента.НалогообложениеНДС КАК ЗакупкаПодДеятельность,
	|	ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента
	|");
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Истина);
	
	//Заполнение шапки
	Организация             = Реквизиты.Организация;
	Сделка                  = Реквизиты.Сделка;
	Приоритет               = Реквизиты.Приоритет;
	ЗакупкаПодДеятельность  = Реквизиты.ЗакупкаПодДеятельность;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	ДокументОснование       = ЗаказКлиента;
	
	//Заполнение табличной части.
	ТаблицаТовары = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента);
	ИспользованиеСкладов = Новый Структура("ИспользуютсяСкладыЗакупки, ИспользуютсяСкладыПродажи",
			ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки"),
			ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	
	Продукция.Загрузить(ТаблицаТовары);
	
	Если (ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И ИспользованиеСкладов.ИспользуютсяСкладыПродажи)
		Или (ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И Не ИспользованиеСкладов.ИспользуютсяСкладыПродажи)
		Или (Не ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И Не ИспользованиеСкладов.ИспользуютсяСкладыПродажи) Тогда
		
		Склад = Реквизиты.СкладДокумента;
		
	ИначеЕсли Не ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И ИспользованиеСкладов.ИспользуютсяСкладыПродажи Тогда
		
		МассивСкладов = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаТовары.ВыгрузитьКолонку("Склад"));
		Если МассивСкладов.Количество() = 1 Тогда
			
			Склад = МассивСкладов[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;
	
	ИнициализироватьДокументПослеДобавленияПродукции();
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ЗаполнитьДокументНаОснованииЭтапаПроизводства(Основание)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Этап.Партнер КАК Партнер,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Подразделение КАК Подразделение 
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Основание";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Основание", Основание);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	ПереработкаПоЗаказу = Истина;
	ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства;
	
	МассивРаспоряжений = Новый Массив;
	МассивРаспоряжений.Добавить(Основание);
	
	Документы.ЗаказПереработчику.ЗаполнитьПоЭтапамПроизводства(МассивРаспоряжений, ЭтотОбъект);
	
	ЗаполнитьУсловияЗакупокПоУмолчанию();
	
КонецПроцедуры

//-- НЕ УТКА

Процедура ИнициализироватьДокументПослеДобавленияПродукции()

	Для каждого СтрокаПродукция Из Продукция Цикл
		
		МаксимальныйНомерГруппыЗатрат = МаксимальныйНомерГруппыЗатрат + 1;
		СтрокаПродукция.НомерГруппыЗатрат = МаксимальныйНомерГруппыЗатрат;
		
		ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
												Подразделение, 
												СтрокаПродукция.Номенклатура, 
												СтрокаПродукция.Характеристика, 
												Дата, 
												СтрокаПродукция.Спецификация);
												
		Если ДанныеСпецификации <> Неопределено Тогда
			СтрокаПродукция.Спецификация = ДанныеСпецификации.Спецификация;
		КонецЕсли;
		
		СтрокаУслуга = Услуги.Добавить();
		СтрокаУслуга.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат;
		СтрокаУслуга.Спецификация = СтрокаПродукция.Спецификация;
		
	КонецЦикла;
	
	Документы.ЗаказПереработчику.ЗаполнитьВозвратныеОтходыИМатериалыПоСпецификации(Продукция, ЭтотОбъект);
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер = Пользователи.ТекущийПользователь();
	
	Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	СкладОтгрузки = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(СкладОтгрузки);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ФормаОплаты = ФормаОплаты;
	СтруктураПараметров.Касса = Касса;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика;
	ЦенаВключаетНДС = Ложь;
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ПараметрыОбъектаССоглашением());
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам") И НЕ ПереработкаПоЗаказу Тогда
		Статус = Перечисления.СтатусыЗаказовПереработчикам.Закрыт;
	Иначе
		Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован;
	КонецЕсли;
	
	Если Не ПереработкаПозаказу Тогда
		ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Материалы);
	КонецЕсли;
	
	УчетНДСУТ.ПроверитьКорректностьДеятельностиНДСПотребления(
		ЗакупкаПодДеятельность,
		Организация,
		Дата,
		Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

//++ НЕ УТКА

// Заполняет табличную части "РаспоряжениеСпецификация" по данным распоряжения
//
Процедура ЗаполнитьДанныеРаспоряжения() Экспорт
	
	РаспоряжениеСпецификация.Очистить();
	
	Если ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокЭтапов.Распоряжение          КАК ЗаказНаПроизводство,
	|	СписокЭтапов.КодСтрокиПродукция    КАК КодСтрокиПродукция,
	|	СписокЭтапов.КодСтрокиЭтапыГрафик  КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ СписокЭтапов
	|ИЗ
	|	&СписокЭтапов КАК СписокЭтапов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаПроизводство,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафика.Распоряжение          КАК Распоряжение,
	|	ЭтапыГрафика.КодСтрокиЭтапыГрафик  КАК КодСтрокиЭтапыГрафик,
	|	ЭтапыГрафика.Номенклатура          КАК Номенклатура,
	|	ЭтапыГрафика.Характеристика        КАК Характеристика,
	|	СУММА(ЭтапыГрафика.Количество)     КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭтапыГрафика.ЗаказНаПроизводство   КАК Распоряжение,
	|		ЭтапыГрафика.КодСтрокиЭтапыГрафик  КАК КодСтрокиЭтапыГрафик,
	|		ЭтапыГрафика.Номенклатура          КАК Номенклатура,
	|		ЭтапыГрафика.Характеристика        КАК Характеристика,
	|		ЭтапыГрафика.КЗаказуОстаток        КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПереработкаПоГрафикуПроизводства.Остатки(
	|				,
	|				(ЗаказНаПроизводство, КодСтрокиЭтапыГрафик) В
	|					(ВЫБРАТЬ
	|						СписокЭтапов.ЗаказНаПроизводство,
	|						СписокЭтапов.КодСтрокиЭтапыГрафик
	|					ИЗ
	|						СписокЭтапов)) КАК ЭтапыГрафика
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭтапыГрафика.ЗаказНаПроизводство   КАК Распоряжение,
	|		ЭтапыГрафика.КодСтрокиЭтапыГрафик  КАК КодСтрокиЭтапыГрафик,
	|		ЭтапыГрафика.Номенклатура          КАК Номенклатура,
	|		ЭтапыГрафика.Характеристика        КАК Характеристика,
	|		ЭтапыГрафика.КЗаказу               КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПереработкаПоГрафикуПроизводства КАК ЭтапыГрафика
	|	ГДЕ
	|		ЭтапыГрафика.Регистратор = &Регистратор
	|		И ЭтапыГрафика.Активность
	|		И (ЭтапыГрафика.ЗаказНаПроизводство, ЭтапыГрафика.КодСтрокиЭтапыГрафик) В
	|				(ВЫБРАТЬ
	|					СписокЭтапов.ЗаказНаПроизводство,
	|					СписокЭтапов.КодСтрокиЭтапыГрафик
	|				ИЗ
	|					СписокЭтапов)
	|	) КАК ЭтапыГрафика
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафика.Распоряжение,
	|	ЭтапыГрафика.КодСтрокиЭтапыГрафик,
	|	ЭтапыГрафика.Номенклатура,
	|	ЭтапыГрафика.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыНаПроизводство.ЗаказНаПроизводство        КАК Распоряжение,
	|	ЗаказыНаПроизводство.КодСтрокиЭтапыГрафик       КАК КодСтрокиЭтапыГрафик,
	|	ЗаказыНаПроизводство.Номенклатура               КАК Номенклатура,
	|	ЗаказыНаПроизводство.Характеристика             КАК Характеристика,
	|	ЗаказыНаПроизводство.Склад                      КАК Склад,
	|	ЗаказыНаПроизводство.Назначение                 КАК Назначение,
	|	ЗаказыНаПроизводство.ВариантОбеспечения         КАК ВариантОбеспечения,
	|	ЗаказыНаПроизводство.ТипДвиженияЗапасов         КАК ТипДвиженияЗапасов,
	|	ЗаказыНаПроизводство.Серия                      КАК Серия,
	|	ЗаказыНаПроизводство.ДатаПотребности            КАК ДатаОтгрузки,
	|	СУММА(ЗаказыНаПроизводство.КоличествоПоЗаказу)  КАК КоличествоПоЗаказу
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпецификацииЗаказов.ЗаказНаПроизводство  КАК ЗаказНаПроизводство,
	|		СпецификацииЗаказов.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|		СпецификацииЗаказов.ЗаказаноОстаток      КАК КоличествоПоЗаказу,
	|		СпецификацииЗаказов.Номенклатура         КАК Номенклатура,
	|		СпецификацииЗаказов.Характеристика       КАК Характеристика,
	|		СпецификацииЗаказов.Склад                КАК Склад,
	|		СпецификацииЗаказов.Назначение           КАК Назначение,
	|		СпецификацииЗаказов.ВариантОбеспечения   КАК ВариантОбеспечения,
	|		СпецификацииЗаказов.ТипДвиженияЗапасов   КАК ТипДвиженияЗапасов,
	|		СпецификацииЗаказов.Серия                КАК Серия,
	|		СпецификацииЗаказов.ДатаПотребности      КАК ДатаПотребности
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводствоСпецификации.Остатки(
	|				,
	|				(ЗаказНаПроизводство, КодСтрокиПродукция, КодСтрокиЭтапыГрафик) В
	|					(ВЫБРАТЬ
	|						СписокЭтапов.ЗаказНаПроизводство,
	|						СписокЭтапов.КодСтрокиПродукция,
	|						СписокЭтапов.КодСтрокиЭтапыГрафик
	|					ИЗ
	|						СписокЭтапов)) КАК СпецификацииЗаказов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпецификацииЗаказов.ЗаказНаПроизводство  КАК ЗаказНаПроизводство,
	|		СпецификацииЗаказов.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|		СпецификацииЗаказов.Заказано             КАК КоличествоПоЗаказу,
	|		СпецификацииЗаказов.Номенклатура         КАК Номенклатура,
	|		СпецификацииЗаказов.Характеристика       КАК Характеристика,
	|		СпецификацииЗаказов.Склад                КАК Склад,
	|		СпецификацииЗаказов.Назначение           КАК Назначение,
	|		СпецификацииЗаказов.ВариантОбеспечения   КАК ВариантОбеспечения,
	|		СпецификацииЗаказов.ТипДвиженияЗапасов   КАК ТипДвиженияЗапасов,
	|		СпецификацииЗаказов.Серия                КАК Серия,
	|		СпецификацииЗаказов.ДатаПотребности      КАК ДатаПотребности
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводствоСпецификации КАК СпецификацииЗаказов
	|	ГДЕ
	|		СпецификацииЗаказов.Регистратор = &Регистратор
	|		И СпецификацииЗаказов.Активность
	|		И (СпецификацииЗаказов.ЗаказНаПроизводство, СпецификацииЗаказов.КодСтрокиПродукция, СпецификацииЗаказов.КодСтрокиЭтапыГрафик) В
	|				(ВЫБРАТЬ
	|					СписокЭтапов.ЗаказНаПроизводство,
	|					СписокЭтапов.КодСтрокиПродукция,
	|					СписокЭтапов.КодСтрокиЭтапыГрафик
	|				ИЗ
	|					СписокЭтапов)) КАК ЗаказыНаПроизводство
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаПроизводство.ЗаказНаПроизводство,
	|	ЗаказыНаПроизводство.КодСтрокиЭтапыГрафик,
	|	ЗаказыНаПроизводство.Номенклатура,
	|	ЗаказыНаПроизводство.Характеристика,
	|	ЗаказыНаПроизводство.Склад,
	|	ЗаказыНаПроизводство.Назначение,
	|	ЗаказыНаПроизводство.ВариантОбеспечения,
	|	ЗаказыНаПроизводство.ТипДвиженияЗапасов,
	|	ЗаказыНаПроизводство.Серия,
	|	ЗаказыНаПроизводство.ДатаПотребности";
	
	СписокЭтапов = Услуги.Выгрузить(, "Распоряжение,КодСтрокиПродукция,КодСтрокиЭтапыГрафик");
	Запрос.УстановитьПараметр("СписокЭтапов", СписокЭтапов);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаМатериалыИУслуги.Упаковка",
		"ТаблицаМатериалыИУслуги.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаПродукция = Продукция.Выгрузить(, "Номенклатура,Характеристика,НомерГруппыЗатрат,Количество");
	ТаблицаПродукция.Свернуть("Номенклатура,Характеристика,НомерГруппыЗатрат", "Количество");
	
	ТаблицаОтходы = ВозвратныеОтходы.Выгрузить(, "Номенклатура,Характеристика,НомерГруппыЗатрат,Количество");
	ТаблицаОтходы.Свернуть("Номенклатура,Характеристика,НомерГруппыЗатрат", "Количество");
	
	ТаблицаМатериалы = Материалы.Выгрузить(, "Номенклатура,Характеристика,НомерГруппыЗатрат,Количество");
	ТаблицаМатериалы.Свернуть("Номенклатура,Характеристика,НомерГруппыЗатрат", "Количество");
	
	ОстаткиПродукцииКЗаказу = Результат[Результат.ВГраница()-1].Выгрузить();
	ОстаткиПоЗаказу = Результат[Результат.ВГраница()].Выгрузить();
	Для каждого СтрокаУслуга Из Услуги Цикл
		
		// Нужно определить вся ли продукция запланирована к заказу
		ВсяПродукцияЗаказана = Истина;
		СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
 		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУслуга);
 		ОстаткиКЗаказуПоЭтапу = ОстаткиПродукцииКЗаказу.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаПродукцияКЗаказу Из ОстаткиКЗаказуПоЭтапу Цикл
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,НомерГруппыЗатрат");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПродукцияКЗаказу);
			СтруктураПоиска.НомерГруппыЗатрат = СтрокаУслуга.НомерГруппыЗатрат; 
   			СписокСтрок = ТаблицаПродукция.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				СтрокаПродукцияКЗаказу.Количество = Макс(СтрокаПродукцияКЗаказу.Количество - СписокСтрок[0].Количество, 0);
			КонецЕсли;
			Если СтрокаПродукцияКЗаказу.Количество <> 0 Тогда
				ВсяПродукцияЗаказана = Ложь;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		// Добавление данных заказа
		СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
 		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУслуга);
 		ОстаткиПоЭтапу = ОстаткиПоЗаказу.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаЗаказа Из ОстаткиПоЭтапу Цикл
			
			Если СтрокаЗаказа.КоличествоПоЗаказу = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ВсяПродукцияЗаказана Тогда
				
				КоличествоПоЗаказу = 0;
				Если СтрокаЗаказа.ТипДвиженияЗапасов = Перечисления.ТипыДвиженияЗапасов.Отгрузка Тогда
					СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,НомерГруппыЗатрат");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаЗаказа);
					СтруктураПоиска.НомерГруппыЗатрат = СтрокаУслуга.НомерГруппыЗатрат; 
					СписокСтрок = ТаблицаМатериалы.НайтиСтроки(СтруктураПоиска);
					Если СписокСтрок.Количество() <> 0 Тогда
						КоличествоПоЗаказу = Мин(СписокСтрок[0].Количество, СтрокаЗаказа.КоличествоПоЗаказу);
					КонецЕсли;
				Иначе
					СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,НомерГруппыЗатрат");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаЗаказа);
					СтруктураПоиска.НомерГруппыЗатрат = СтрокаУслуга.НомерГруппыЗатрат; 
					СписокСтрок = ТаблицаПродукция.НайтиСтроки(СтруктураПоиска);
					Если СписокСтрок.Количество() <> 0 Тогда
						КоличествоПоЗаказу = Мин(СписокСтрок[0].Количество, СтрокаЗаказа.КоличествоПоЗаказу);
					КонецЕсли;
					СписокСтрок = ТаблицаОтходы.НайтиСтроки(СтруктураПоиска);
					Если СписокСтрок.Количество() <> 0 Тогда
						КоличествоПоЗаказу = Мин(КоличествоПоЗаказу + СписокСтрок[0].Количество, СтрокаЗаказа.КоличествоПоЗаказу);
					КонецЕсли;
				КонецЕсли; 
				
			Иначе
				
				КоличествоПоЗаказу = СтрокаЗаказа.КоличествоПоЗаказу;
				
			КонецЕсли; 
			
			Если КоличествоПоЗаказу <> 0 Тогда
				ДанныеСтроки = РаспоряжениеСпецификация.Добавить();
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаЗаказа);
				ДанныеСтроки.КоличествоПоЗаказу = КоличествоПоЗаказу;
				ДанныеСтроки.НомерГруппыЗатрат = СтрокаУслуга.НомерГруппыЗатрат;
				
				СтрокаЗаказа.КоличествоПоЗаказу = СтрокаЗаказа.КоличествоПоЗаказу - КоличествоПоЗаказу;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Обновим данные в ТЧ "РаспоряжениеСпецификация"
	ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияЗаказаПереработчику(
		ЭтотОбъект, 
		Перечисления.ТипыДвиженияЗапасов.Поступление,
		Перечисления.ТипыДвиженияЗапасов.Отгрузка);
	
КонецПроцедуры

Процедура ПроверитьСоответствиеПодразделенияЗаказамНаПроизводство(Отказ)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаУслуги.Распоряжение,
		|	ТаблицаУслуги.КодСтрокиЭтапыГрафик
		|ПОМЕСТИТЬ ТаблицаУслуги
		|ИЗ
		|	&ТаблицаУслуги КАК ТаблицаУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаЭтапыГрафик.Подразделение.Представление КАК ПодразделениеПредставление
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
		|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТаблицаУслуги.Распоряжение)
		|			И (ТаблицаЭтапыГрафик.КодСтроки = ТаблицаУслуги.КодСтрокиЭтапыГрафик)
		|ГДЕ
		|	ЕСТЬNULL(ТаблицаЭтапыГрафик.Подразделение, НЕОПРЕДЕЛЕНО) <> &Подразделение";
	Иначе
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаЭтапы.Подразделение.Представление КАК ПодразделениеПредставление
		|ИЗ
		|	ТаблицаУслуги КАК ТаблицаУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ТаблицаЭтапы
		|		ПО (ТаблицаЭтапы.Ссылка = ТаблицаУслуги.Распоряжение)
		|ГДЕ
		|	ЕСТЬNULL(ТаблицаЭтапы.Подразделение, НЕОПРЕДЕЛЕНО) <> &Подразделение";
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаУслуги", Услуги.Выгрузить());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Подразделение должно соответствовать подразделению этапа ""%1""'"), Выборка.ПодразделениеПредставление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Подразделение", , Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьЭтапыПроизводстваСвязаныеСЗаказом(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("ЗаказПереработчику", Ссылка);
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.ИсточникДанных = Услуги;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Распоряжение");
		
	Попытка
		Блокировка.Заблокировать(); 
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	(ЭтапПроизводства2_2.ЗаказПереработчику = &Ссылка
	|				И НЕ ЭтапПроизводства2_2.Ссылка В (&СписокРаспоряжений)
	|			ИЛИ ЭтапПроизводства2_2.Ссылка В (&СписокРаспоряжений))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЭтапПроизводства2_2.МаксимальныйКодСтрокиИзделия), 0)    КАК МаксимальныйКодСтрокиИзделия,
	|	ЕСТЬNULL(МАКСИМУМ(ЭтапПроизводства2_2.МаксимальныйКодСтрокиОбеспечение),0) КАК МаксимальныйКодСтрокиОбеспечение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка В (&СписокРаспоряжений)";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокРаспоряжений", Услуги.ВыгрузитьКолонку("Распоряжение"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	
	ВыборкаКоды = Результат[1].Выбрать();
	ВыборкаКоды.Следующий();
	МаксимальныйКодСтрокиИзделия     = ВыборкаКоды.МаксимальныйКодСтрокиИзделия;
	МаксимальныйКодСтрокиОбеспечение = ВыборкаКоды.МаксимальныйКодСтрокиОбеспечение;
	
	РедактированиеЭтапов = Неопределено;
	ДополнительныеСвойства.Свойство("РедактированиеЭтапов", РедактированиеЭтапов);
	
	ЕстьКонтрольЗакрытияЗаказа = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПереработчикамБезПолнойОплаты")
									И ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПереработчикамБезПолнойОтработки");
	
	Пока Выборка.Следующий() Цикл
	
		ЭтапОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДанныеЭтапа = Неопределено;
		
		Если Услуги.Найти(Выборка.Ссылка, "Распоряжение") <> Неопределено Тогда
			
			ДобавляетсяНовыйЭтап = (ЭтапОбъект.ЗаказПереработчику <> Ссылка);
			
			ЭтапОбъект.ЗаказПереработчику = Ссылка;
			
			Если РедактированиеЭтапов <> Неопределено Тогда
				// из формы получены данные этапов - нужно их перенести в этап
				ДанныеЭтапа = Обработки.РедактированиеЭтаповПроизводства.ПеренестиИзмененияВЭтап(ЭтапОбъект, РедактированиеЭтапов);
			КонецЕсли; 
			
			Если ДобавляетсяНовыйЭтап ИЛИ РедактированиеЭтапов <> Неопределено Тогда
				Документы.ЗаказПереработчику.ЗаполнитьКодСтрокиВТабличнойЧасти(
							ЭтапОбъект.ВыходныеИзделия, ДобавляетсяНовыйЭтап, МаксимальныйКодСтрокиИзделия);
							
				Документы.ЗаказПереработчику.ЗаполнитьКодСтрокиВТабличнойЧасти(
							ЭтапОбъект.ПобочныеИзделия, ДобавляетсяНовыйЭтап, МаксимальныйКодСтрокиИзделия);
				
				Документы.ЗаказПереработчику.ЗаполнитьКодСтрокиВТабличнойЧасти(
							ЭтапОбъект.ОбеспечениеМатериаламиИРаботами, ДобавляетсяНовыйЭтап, МаксимальныйКодСтрокиОбеспечение);
			КонецЕсли; 
						
			ЭтапОбъект.МаксимальныйКодСтрокиИзделия = МаксимальныйКодСтрокиИзделия;
			ЭтапОбъект.МаксимальныйКодСтрокиОбеспечение = МаксимальныйКодСтрокиОбеспечение;
			
			Если ЕстьКонтрольЗакрытияЗаказа
				И Статус = Перечисления.СтатусыЗаказовПереработчикам.Закрыт
				И ЭтапОбъект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
				ЭтапОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
				УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(ЭтапОбъект, ДанныеЭтапа.ТекущийСтатус);
			КонецЕсли; 
			
		Иначе
			
			// Этап удалили из заказа
			ЭтапОбъект.ЗаказПереработчику = Документы.ЗаказПереработчику.ПустаяСсылка();
			ТекущийСтатус = ЭтапОбъект.Статус;
			Если ТекущийСтатус <> Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению Тогда
				ЭтапОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
				УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(ЭтапОбъект, ТекущийСтатус);
			КонецЕсли; 
			
		КонецЕсли;
		
		Попытка
			Если ЭтапОбъект.Проведен Тогда
				ЭтапОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ЭтапОбъект.Записать();
			КонецЕсли;
			Если ДанныеЭтапа <> Неопределено Тогда
				ДанныеЭтапа.ВерсияДанных = ЭтапОбъект.ВерсияДанных;
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать изменения в этапе %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЭтапОбъект.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтапОбъект.Ссылка,,, Отказ);
			Возврат;
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УбратьСвязьЭтаповПроизводстваСПомеченнымНаУдалениеЗаказом(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("ЗаказПереработчику", Ссылка);
	
	Попытка
		Блокировка.Заблокировать(); 
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.ЗаказПереработчику = &Ссылка";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ЗаказПереработчику = Документы.ЗаказПереработчику.ПустаяСсылка();
		ТекущийСтатус = ДокументОбъект.Статус;
		Если ТекущийСтатус <> Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
			УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(ДокументОбъект, ТекущийСтатус);
		КонецЕсли; 
		
		Если ДокументОбъект.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокументОбъект.Записать();
		КонецЕсли;
	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьВозможностьСвязиСЭтапами(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
 		Блокировка = Новый БлокировкаДанных;
 		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.ИсточникДанных = Услуги;
 		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Распоряжение");
 		Блокировка.Заблокировать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка,
	|	ЭтапПроизводства2_2.ПроизводствоНаСтороне
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка В(&СписокЭтапов)
	|	И ЭтапПроизводства2_2.ЗаказПереработчику <> &Ссылка
	|	И (ЭтапПроизводства2_2.ЗаказПереработчику <> ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|			ИЛИ НЕ ЭтапПроизводства2_2.ПроизводствоНаСтороне)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокЭтапов", Услуги.ВыгрузитьКолонку("Распоряжение"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПроизводствоНаСтороне Тогда
			ТекстСообщения = НСтр("ru = '%1 включен в другой заказ переработчику. Не допускается включать один этап в разные заказы.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка); 
		Иначе
			ТекстСообщения = НСтр("ru = '%1 относится к собственному производству. Не допускается включать в заказ этапы собственного производства.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка); 
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,, Отказ); 
		
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//-- НЕ УТКА

Процедура ПроверитьУказаниеНоменклатурыКакМатериалаИКакПродукции(ТабличнаяЧасть, Отказ)

	Если ТабличнаяЧасть = Продукция Тогда
		ТекстОшибки = НСтр("ru='Не допускается указывать номенклатуру одновременно как сырье (материал) и как продукцию'");
	Иначе
		ТекстОшибки = НСтр("ru='Не допускается указывать номенклатуру одновременно как сырье (материал) и как возвратный отход'");
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", ДанныеСтроки.Номенклатура, ДанныеСтроки.Характеристика);
		СписокСтрок = Материалы.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаМатериал Из СписокСтрок Цикл
			ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Материалы", СтрокаМатериал.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ,, Отказ);
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыОбъектаССоглашением(ИменаРеквизитов = "")
	
	Если ПустаяСтрока(ИменаРеквизитов) Тогда
		ИменаРеквизитов = "Партнер, Договор, Контрагент, Организация, ПорядокРасчетов";
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
	
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Процедура ЗаполнитьДокументНаОснованииСделкиПоОбособленныемЗаказам(Знач СправочникОснование)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК ЗаказКлиента
	|
	|ПОМЕСТИТЬ ВтЗаказыПоСделке
	|
	|ИЗ
	|	Документ.ЗаказКлиента КАК Т
	|ГДЕ
	|	Т.Сделка = &Сделка
	|	И Т.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура          КАК Номенклатура,
	|	Т.Характеристика        КАК Характеристика,
	|	Т.Склад                 КАК Склад,
	|	Т.Назначение            КАК Назначение,
	|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
	|	МИНИМУМ(Т.ДатаЗаказа)   КАК ДатаЗаказа,
	|	СУММА(Т.Заказано)       КАК Заказано
	|	
	|ПОМЕСТИТЬ НоменклатураЗаказа
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Заказы.ЗаказКлиента.Дата КАК ДатаЗаказа,
	|		Заказы.Номенклатура      КАК Номенклатура,
	|		Заказы.Характеристика    КАК Характеристика,
	|		Заказы.Склад             КАК Склад,
	|		ВЫБОР
	|			КОГДА НЕ ТоварыЗаказа.Ссылка ЕСТЬ NULL ТОГДА
	|				ТоварыЗаказа.НомерСтроки
	|			ИНАЧЕ
	|				ТоварыЗаявки.НомерСтроки
	|		КОНЕЦ                    КАК НомерСтроки,
	|		Заказы.ЗаказаноОстаток   КАК Заказано,
	|		ВЫБОР
	|			КОГДА НЕ ТоварыЗаказа.Ссылка ЕСТЬ NULL ТОГДА
	|				ТоварыЗаказа.Ссылка.Назначение
	|			ИНАЧЕ
	|				ТоварыЗаявки.Ссылка.Назначение
	|		КОНЕЦ                    КАК Назначение
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(,
	|				(ЗаказКлиента, ИСТИНА)
	|				В
	|				(ВЫБРАТЬ
	|					Т.ЗаказКлиента,
	|					ИСТИНА
	|				ИЗ
	|					ВтЗаказыПоСделке КАК Т)
	|		) КАК Заказы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ТоварыЗаказа
	|		ПО Заказы.ЗаказКлиента      = ТоварыЗаказа.Ссылка
	|			И Заказы.Номенклатура   = ТоварыЗаказа.Номенклатура
	|			И Заказы.Характеристика = ТоварыЗаказа.Характеристика
	|			И Заказы.КодСтроки      = ТоварыЗаказа.КодСтроки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаявки
	|		ПО Заказы.ЗаказКлиента      = ТоварыЗаявки.Ссылка
	|			И Заказы.Номенклатура   = ТоварыЗаявки.Номенклатура
	|			И Заказы.Характеристика = ТоварыЗаявки.Характеристика
	|			И Заказы.КодСтроки      = ТоварыЗаявки.КодСтроки
	|			И (ТоварыЗаказа.Ссылка ЕСТЬ NULL )
	|	ГДЕ
	|		ВЫБОР
	|			КОГДА НЕ ТоварыЗаказа.Ссылка ЕСТЬ NULL ТОГДА
	|				ТоварыЗаказа.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|			ИНАЧЕ
	|				ТоварыЗаявки.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|			КОНЕЦ
	|		И Заказы.ЗаказаноОстаток > 0) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Склад,
	|	Т.Назначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Назначение,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Склад          КАК Склад,
	|	Т.Назначение     КАК Назначение,
	|	Т.КЗаказуОстаток КАК КЗаказу
	|
	|ПОМЕСТИТЬ Потребность
	|
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад, Назначение) В
	|				(ВЫБРАТЬ
	|					Т.Номенклатура,
	|					Т.Характеристика,
	|					Т.Склад,
	|					Т.Назначение
	|				ИЗ
	|					НоменклатураЗаказа КАК Т)
	|	) КАК Т
	|ГДЕ
	|	Т.КЗаказуОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Назначение,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыЗаказов.ДатаЗаказа     КАК ДатаЗаказа,
	|	ВтТоварыЗаказов.НомерСтроки    КАК НомерСтроки,
	|	ВтТоварыЗаказов.Номенклатура   КАК Номенклатура,
	|	ВтТоварыЗаказов.Характеристика КАК Характеристика,
	|	ВтТоварыЗаказов.Склад          КАК Склад,
	|	ВтТоварыЗаказов.Назначение     КАК Назначение,
	|	ВЫБОР
	|		КОГДА ВтТоварыЗаказов.Заказано > ВтКЗаказу.КЗаказу ТОГДА
	|			ВтКЗаказу.КЗаказу
	|		ИНАЧЕ
	|			ВтТоварыЗаказов.Заказано
	|	КОНЕЦ                          КАК Количество
	|
	|ПОМЕСТИТЬ НоменклатураКЗаказу
	|
	|ИЗ
	|	НоменклатураЗаказа КАК ВтТоварыЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Потребность КАК ВтКЗаказу
	|		ПО ВтТоварыЗаказов.Номенклатура      = ВтКЗаказу.Номенклатура
	|			И ВтТоварыЗаказов.Характеристика = ВтКЗаказу.Характеристика
	|			И ВтТоварыЗаказов.Склад          = ВтКЗаказу.Склад
	|			И ВтТоварыЗаказов.Назначение     = ВтКЗаказу.Назначение
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура           КАК Номенклатура,
	|	Т.Характеристика         КАК Характеристика,
	|	Т.Склад                  КАК Склад,
	|	Т.Назначение             КАК Назначение,
	|	Т.Количество             КАК Количество,
	|	Т.Количество             КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости
	|
	|ИЗ
	|	НоменклатураКЗаказу КАК Т
	|ГДЕ
	|	Т.Склад В (ВЫБРАТЬ Таб.Склад ИЗ ВТСклады КАК Таб)
	|
	|УПОРЯДОЧИТЬ ПО Т.Назначение, Т.НомерСтроки
	|");
	
	Запрос.УстановитьПараметр("Сделка", СправочникОснование);
	Сделка = СправочникОснование;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаТовары.Количество() > 0 Тогда 
		
		Продукция.Загрузить(ТаблицаТовары);
		Склад = Продукция[0].Склад;
		
	КонецЕсли;
	
	ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;
	
	ИнициализироватьДокументПослеДобавленияПродукции();
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСделкиСводно(Знач СправочникОснование)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СделкиСКлиентами.Ссылка КАК Сделка
	|ИЗ
	|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|ГДЕ
	|	СделкиСКлиентами.Ссылка = &Сделка
	|	И СделкиСКлиентами.ОбособленныйУчетТоваровПоСделке
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.Номенклатура КАК Номенклатура,
	|	ЗаказыКлиентов.Характеристика КАК Характеристика,
	|	ЗаказыКлиентов.ЗаказаноОстаток КАК Количество
	|
	|ПОМЕСТИТЬ ЗаказыКлиентов
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(,
	|		ЗаказКлиента.Сделка = &Сделка
	|		И ЗаказКлиента.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	|			)
	|	) КАК ЗаказыКлиентов
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикам.Характеристика КАК Характеристика,
	|	ЗаказыПоставщикам.ЗаказаноПриход КАК Количество
	|
	|ПОМЕСТИТЬ ЗаказыПоставщикам
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Обороты(,, Период,
	|		ЗаказПоставщику.Сделка = &Сделка
	|	) КАК ЗаказыПоставщикам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.Номенклатура                                           КАК Номенклатура,
	|	ЗаказыКлиентов.Характеристика                                         КАК Характеристика,
	|	ЗаказыКлиентов.Количество - ЕСТЬNULL(ЗаказыПоставщикам.Количество, 0) КАК Количество,
	|	ЗаказыКлиентов.Количество - ЕСТЬNULL(ЗаказыПоставщикам.Количество, 0) КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается)    КАК ТипСтоимости
	|ИЗ
	|	ЗаказыКлиентов КАК ЗаказыКлиентов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|	ПО
	|		ЗаказыКлиентов.Номенклатура = ЗаказыПоставщикам.Номенклатура
	|		И ЗаказыКлиентов.Характеристика = ЗаказыПоставщикам.Характеристика
	|ГДЕ
	|	(ЗаказыКлиентов.Количество - ЕСТЬNULL(ЗаказыПоставщикам.Количество, 0)) > 0
	|");
	
	Запрос.УстановитьПараметр("Сделка", СправочникОснование);

	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаПоСделке = МассивРезультатов[0].Выбрать();
	// МассивРезультатов[1] - Временная таблица ЗаказыКлиентов
	// МассивРезультатов[2] - Временная таблица ЗаказыПоставщикам
	ВыборкаПоТоварам = МассивРезультатов[3].Выбрать();
	
	Если ВыборкаПоСделке.Следующий() Тогда
		Сделка = ВыборкаПоСделке.Сделка;
	КонецЕсли;
	
	Пока ВыборкаПоТоварам.Следующий() Цикл
		НоваяСтрока = Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
	КонецЦикла;
	
	ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;
	
	ИнициализироватьДокументПослеДобавленияПродукции();
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;

	Массив.Добавить(Движения.ОбеспечениеЗаказов);

	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		
		Массив.Добавить(Движения.ЗаказыПоставщикам);
		Массив.Добавить(Движения.ЗаказыКлиентов);
		
	КонецЕсли;
	
	// Контроль выполняется при перепроведении, отмене проведения или если используются серии, чтобы проверить возможность резервирования серий
	Если Не ДополнительныеСвойства.ЭтоНовый
		Или НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказПереработчику).ИспользоватьСерииНоменклатуры Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ГрафикОтгрузкиТоваров);
//++ НЕ УТКА
		Массив.Добавить(Движения.ЗаказыНаПроизводствоСпецификации);
//-- НЕ УТКА

	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

#КонецОбласти

#Область КорректировкаЗаказа

// Корректирует строки, по которым не была оформлено поступление или складские ордера или имеются расхождения по мерным товарам.
//
// Параметры:
// 		СтруктураПараметров - Структура - Структура параметров корректировки, конструктор: ЗаказыСервер.ПолучитьСтруктуруКорректировкиСтрокЗаказа()
//
// Возвращаемое значение:
// 		Структура
// 		*	КоличествоСтрок - Количество отмененных/скорректированных строк
// 		*	СуммаОтклонения - Сумма увеличения заказа из-за превышения отгрузки мерных товаров
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	СкорректированоСтрок = 0;
	
	Распоряжения = Новый Массив();
	Распоряжения.Добавить(Ссылка);
	
	Запрос = Новый Запрос();
	Запрос.Текст = Документы.ЗаказПереработчику.ТекстЗапросаТаблицыДокументаДляКорректировки();
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаМатериалы         = РезультатЗапроса[0].Выгрузить();
	ТаблицаПродукция         = РезультатЗапроса[1].Выгрузить();
	ТаблицаВозвратныеОтходы  = РезультатЗапроса[2].Выгрузить();
	
	Если СтруктураПараметров.СкорректироватьМерныеТовары Тогда
		ПараметрыЗаполнения = ЗаказыСервер.ПолучитьСтруктуруКорректировкиСтрокЗаказа();
		ПараметрыЗаполнения.ЗаполнениеПоПоступлению                 = Ложь;
		ПараметрыЗаполнения.КорректироватьПриемкуВПлюсНеограниченно = Ложь;
		ПараметрыЗаполнения.ИмяРегистраЗаказов                      = "ЗаказыКлиентов";
		ПараметрыЗаполнения.ИмяДокумента                            = "ЗаказПереработчику";
		ПараметрыЗаполнения.ИмяТабличнойЧасти                       = "Материалы";
		
		СкорректированоСтрок = СкорректированоСтрок +
			ЗаказыСервер.СкорректироватьОтгрузкуПриемку(Ссылка, ТаблицаМатериалы, ПараметрыЗаполнения);
	КонецЕсли;
	Если СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке Тогда
		ПараметрыЗаполнения = ЗаказыСервер.ПолучитьСтруктуруКорректировкиСтрокЗаказа();
		ПараметрыЗаполнения.ЗаполнениеПоПоступлению                 = Истина;
		ПараметрыЗаполнения.КорректироватьПриемкуВПлюсНеограниченно = Ложь;
		ПараметрыЗаполнения.ИмяРегистраЗаказов                      = "ЗаказыПоставщикам";
		ПараметрыЗаполнения.ИмяДокумента                            = "ЗаказПереработчику";
		ПараметрыЗаполнения.ИмяТабличнойЧасти                       = "Продукция";
		
		СкорректированоСтрок = СкорректированоСтрок +
			ЗаказыСервер.СкорректироватьОтгрузкуПриемку(Ссылка, ТаблицаПродукция,        ПараметрыЗаполнения);
		
		ПараметрыЗаполнения.ИмяТабличнойЧасти                       = "ВозвратныеОтходы";
		
		СкорректированоСтрок = СкорректированоСтрок +
			ЗаказыСервер.СкорректироватьОтгрузкуПриемку(Ссылка, ТаблицаВозвратныеОтходы, ПараметрыЗаполнения);
	КонецЕсли;
	
	ЗаказыСервер.ПеренестиИзмененияВТаблицуПоИндексу(ТаблицаМатериалы, Материалы, "Количество", Истина);
	ЗаказыСервер.ПеренестиИзмененияВТаблицуПоИндексу(ТаблицаПродукция, Продукция, "Количество", Истина);
	ЗаказыСервер.ПеренестиИзмененияВТаблицуПоИндексу(ТаблицаВозвратныеОтходы, ВозвратныеОтходы, "Количество", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Материалы, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Продукция, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ВозвратныеОтходы, СтруктураДействий, Неопределено);
	
	РезультатОтмены = ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(СкорректированоСтрок, Ложь);
	
	Возврат РезультатОтмены;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
