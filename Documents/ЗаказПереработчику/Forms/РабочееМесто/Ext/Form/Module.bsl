
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	//++ НЕ УТКА
	УстановитьУсловноеОформление();
	//-- НЕ УТКА
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьПриСозданииНаСервере();
	
	//++ НЕ УТКА
	
	Если ВыполняетсяОбновлениеЧитаемыхДанных() Тогда
		ОбновлениеИнформационнойБазыУТ.СообщитьЧтоРаботаСФормойВременноОграничена(); 
	КонецЕсли; 
	
	ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("ЗаказПереработчикуРабочееМесто", "ПараметрыОтбора");
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
	КонецЕсли;
	
	// Отработаем открытие формы из формы "Текущие дела"
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Менеджер") Тогда
			ОтборМенеджер = Параметры.СтруктураБыстрогоОтбора.Менеджер;
		КонецЕсли;
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Приоритет") Тогда
			ОтборПриоритет = Параметры.СтруктураБыстрогоОтбора.Приоритет;
		КонецЕсли;
	КонецЕсли; 
	
	УстановитьТекстЗапросаСписокКОформлению();
	ПриИзмененииОтборов();
	
	УстановитьТекущуюСтраницу();
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.Менеджер.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.ЗаказПереработчику));
		
	Элементы.Страницы.ОтображениеСтраниц = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство"), ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам");
	
	#Область СтандартныеПроцедуры
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	#КонецОбласти

	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//++ НЕ УТКА
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	//++ НЕ УТКА
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//++ НЕ УТКА
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	ДокументыВлияющиеНаГрафик = Новый Массив;
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ЗаказПереработчику");
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ЗаказНаПроизводство");
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ЭтапПроизводства2_2");
	
	Если Не ДокументыВлияющиеНаГрафик.Найти(ИмяСобытия) = Неопределено Тогда
		УстановитьОтборыСпискаКОформлению();
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Менеджер",
		ОтборМенеджер,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборМенеджер));
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриоритетПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Приоритет",
		ОтборПриоритет,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборПриоритет));
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженийПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПереработчикПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКОформлению

&НаКлиенте
Процедура СписокКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокКОформлению.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.Распоряжение); 
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтатусНеСогласован(Команда)
	
	//++ НЕ УТКА
	
	УстановитьСтатусЗаказа("НеСогласован", НСтр("ru = 'Не согласован'"));
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКИсполнению(Команда)
	
	//++ НЕ УТКА
	
	УстановитьСтатусЗаказа("КИсполнению", НСтр("ru = 'К исполнению'"));
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыт(Команда)
	
	//++ НЕ УТКА
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ЗаказПереработчику.РабочееМесто.Команда.УстановитьСтатусЗакрыт");
		
	ВыделенныеСсылки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения(ВыделенныеСсылки);
	
	СтруктураЗакрытия = ЗаказыКлиентСервер.ПараметрыПомощникаЗакрытияЗаказов();
	СтруктураЗакрытия.Заказы                               = СписокЗаказов;
	СтруктураЗакрытия.СкорректироватьМерныеТоварыПоПриемке = Истина;
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказПереработчику(Команда)
	
	//++ НЕ УТКА
	ИдентификаторыСтрок = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокКОформлению);
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СписокСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ДанныеСтроки = Элементы.СписокКОформлению.ДанныеСтроки(ИдентификаторСтроки);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ДанныеЗаполнения = ПереработкаНаСторонеКлиент.ДанныеДляФормированияЗаказовПереработчикам(СписокСтрок);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
		ОткрытьФорму("Документ.ЗаказПереработчику.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли; 
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВидимостьДоступность

&НаСервере
Процедура УстановитьВидимостьПриСозданииНаСервере()
	
	ПравоДоступаДобавление = ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПереработчику);
	ИспользоватьРасширенноеОбеспечениеПотребностей = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	
	Если ИспользоватьРасширенноеОбеспечениеПотребностей Тогда
		Элементы.ФормаСписокГруппаСоздать.Видимость = ПравоДоступаДобавление;
		Элементы.СписокСоздать.Видимость = Ложь;
	Иначе
		Элементы.ФормаСписокГруппаСоздать.Видимость = Ложь;
		Элементы.СписокСоздать.Видимость = ПравоДоступаДобавление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.Список.ТекущаяСтрока = Ссылка;
		ПоказатьЗначение(,МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	Документы.ЗаказПереработчику.УстановитьУсловноеОформлениеСписка(Список);
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"СписокКОформлениюХарактеристика",
		"СписокКОформлению.ХарактеристикиИспользуются");
																			 
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);
		
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокКОформлению.ДатаРаспоряжения", Элементы.СписокКОформлениюДатаРаспоряжения.Имя);
	
	// Переработчик не указан
	#Область СписокКОформлению_Переработчик
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКОформлениюПереработчик.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКОформлению.Переработчик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	// Дата начала просрочена
	#Область СписокКОформлению_Начало
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКОформлениюНачало.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКОформлению.ДатаЗапускаПросрочена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтборов()
	
	СохранитьПараметрыОтбора();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Подразделение",  ОтборПодразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПодразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Приоритет", ОтборПриоритет, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборПриоритет));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Менеджер", ОтборМенеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтборМенеджер));
		
	УстановитьОтборыСпискаКОформлению();
	
КонецПроцедуры

&НаСервере
Функция ЕстьОтборПоРаспоряжению()
	
	ЕстьОтборПоРаспоряжению = Ложь;
	
	Для каждого ЭлементКоллекции Из СписокРаспоряжений Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			ЕстьОтборПоРаспоряжению = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОтборПоРаспоряжению;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстЗапросаСписокКОформлению()

	ТекстЗапроса = "";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПереработкаПоГрафику.ЗаказНаПроизводство.Организация КАК Организация,
		|	ПереработкаПоГрафику.ЗаказНаПроизводство КАК Распоряжение,
		|	ПереработкаПоГрафику.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ТИПЗНАЧЕНИЯ(ПереработкаПоГрафику.ЗаказНаПроизводство) КАК ТипРаспоряжения,
		|	ПереработкаПоГрафику.ЗаказНаПроизводство.Номер КАК НомерРаспоряжения,
		|	ПереработкаПоГрафику.ЗаказНаПроизводство.Дата КАК ДатаРаспоряжения,
		|	ЗаказЭтапы.Подразделение КАК Подразделение,
		|	ЗаказЭтапы.Партнер КАК Переработчик,
		|	ПереработкаПоГрафику.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
		|	ПереработкаПоГрафику.Номенклатура КАК Номенклатура,
		|	ПереработкаПоГрафику.Характеристика КАК Характеристика,
		|	ПереработкаПоГрафику.Склад КАК Склад,
		|	ПереработкаПоГрафику.Склад.Родитель КАК ГруппаСкладов,
		|	ЕСТЬNULL(ПереработкаПоГрафику.Склад.Родитель.ВыборГруппы, НЕОПРЕДЕЛЕНО) КАК ВыборГруппы,
		|	ЗаказЭтапыГрафик.НачалоПредварительногоБуфера КАК Начало,
		|	ВЫБОР
		|		КОГДА ЗаказНаПроизводствоПродукция.Номенклатура.ИспользованиеХарактеристик В (
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), 
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), 
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера, ДЕНЬ) < &ТекущаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДатаЗапускаПросрочена,
		|	ПереработкаПоГрафику.ЗаказНаПроизводство.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	РегистрНакопления.ПереработкаПоГрафикуПроизводства.Остатки(
		|			,
		|			(НЕ &ОтборПоРаспоряжению
		|				ИЛИ ЗаказНаПроизводство В (&СписокРаспоряжений))) КАК ПереработкаПоГрафику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
		|		ПО (ЗаказЭтапыГрафик.Ссылка = ПереработкаПоГрафику.ЗаказНаПроизводство)
		|			И (ЗаказЭтапыГрафик.КодСтроки = ПереработкаПоГрафику.КодСтрокиЭтапыГрафик)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
		|		ПО (ЗаказЭтапы.Ссылка = ЗаказЭтапыГрафик.Ссылка)
		|			И (ЗаказЭтапы.КлючСвязи = ЗаказЭтапыГрафик.КлючСвязиЭтапы)
		|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказЭтапыГрафик.КлючСвязиПродукция)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = ЗаказЭтапыГрафик.Ссылка)
		|			И (ЗаказНаПроизводствоПродукция.КлючСвязи = ЗаказЭтапыГрафик.КлючСвязиПродукция)
		|ГДЕ
		|	(&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ НАЧАЛОПЕРИОДА(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера, ДЕНЬ) >= &ДатаНачала)
		|	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ КОНЕЦПЕРИОДА(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера, ДЕНЬ) <= &ДатаОкончания)";
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		ТекстЗапроса = ТекстЗапроса 
		+ ?(ТекстЗапроса <> "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|","")
		+
		"ВЫБРАТЬ
		|	ПереработкаПоГрафику.Организация КАК Организация,
		|	ПереработкаПоГрафику.Ссылка КАК Распоряжение,
		|	ПереработкаПоГрафику.Распоряжение КАК ЗаказНаПроизводство,
		|	ТИПЗНАЧЕНИЯ(ПереработкаПоГрафику.Ссылка) КАК ТипРаспоряжения,
		|	ПереработкаПоГрафику.Номер КАК НомерРаспоряжения,
		|	ПереработкаПоГрафику.Дата КАК ДатаРаспоряжения,
		|	ПереработкаПоГрафику.Подразделение КАК Подразделение,
		|	ПереработкаПоГрафику.Этап.Партнер КАК Переработчик,
		|	0 КАК КодСтрокиЭтапыГрафик,
		|	ЕСТЬNULL(ТаблицаВыходныеИзделия.Номенклатура, ТаблицаПобочныеИзделия.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ТаблицаВыходныеИзделия.Характеристика, ТаблицаПобочныеИзделия.Характеристика) КАК Характеристика,
		|	ЕСТЬNULL(ТаблицаВыходныеИзделия.Получатель, ТаблицаПобочныеИзделия.Получатель) КАК Склад,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаСкладов,
		|	НЕОПРЕДЕЛЕНО КАК ВыборГруппы,
		|	ВЫБОР
		|		КОГДА &ПланируетсяГрафикПроизводства
		|				И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
		|			ТОГДА ГрафикПроизводства.НачалоЭтапа
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафику.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
		|	КОНЕЦ КАК Начало,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик, 
		|						ТаблицаПобочныеИзделия.Номенклатура.ИспользованиеХарактеристик) В (
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), 
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), 
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА &ПланируетсяГрафикПроизводства
		|				И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
		|			ТОГДА ГрафикПроизводства.НачалоЭтапа < &ТекущаяДата
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафику.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0)) < &ТекущаяДата
		|	КОНЕЦ ДатаЗапускаПросрочена,
		|	ПереработкаПоГрафику.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ПереработкаПоГрафику
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
		|		ПО (ТаблицаВыходныеИзделия.Ссылка = ПереработкаПоГрафику.Ссылка)
		|			И (ТаблицаВыходныеИзделия.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаПобочныеИзделия
		|		ПО (ТаблицаПобочныеИзделия.Ссылка = ПереработкаПоГрафику.Ссылка)
		|			И (ТаблицаПобочныеИзделия.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикПроизводства
		|		ПО (ГрафикПроизводства.ЭтапПроизводства = ПереработкаПоГрафику.Ссылка)
		|			И (ГрафикПроизводства.СтатусГрафика = &СтатусРабочийГрафик)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикПроизводства
		|		ПО ПереработкаПоГрафику.Ссылка = НормативныйГрафикПроизводства.ЭтапПроизводства
		|ГДЕ
		|	ПереработкаПоГрафику.Проведен
		|	И ПереработкаПоГрафику.ПроизводствоНаСтороне
		|	И НЕ ПереработкаПоГрафику.Статус В (
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован))
		|	И ПереработкаПоГрафику.ЗаказПереработчику = ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
		|	И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ВЫБОР
		|					КОГДА &ПланируетсяГрафикПроизводства
		|							И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
		|						ТОГДА ГрафикПроизводства.НачалоЭтапа
		|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафику.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
		|				КОНЕЦ >= &ДатаНачала)
		|	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ВЫБОР
		|					КОГДА &ПланируетсяГрафикПроизводства
		|							И НЕ ГрафикПроизводства.ЭтапПроизводства ЕСТЬ NULL 
		|						ТОГДА ГрафикПроизводства.НачалоЭтапа
		|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ПереработкаПоГрафику.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(НормативныйГрафикПроизводства.ДлительностьДоЗапуска, 0))
		|				КОНЕЦ <= &ДатаОкончания)";
	КонецЕсли; 
	
	Если ТекстЗапроса <> "" Тогда
		СписокКОформлению.ТекстЗапроса = ТекстЗапроса;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыСпискаКОформлению()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокКОформлению,
		"Переработчик",
		ОтборПереработчик,,, 
		ЗначениеЗаполнено(ОтборПереработчик));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокКОформлению,
		"Подразделение",
		ОтборПодразделение,,,
		ЗначениеЗаполнено(ОтборПодразделение));
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"СписокРаспоряжений",
		СписокРаспоряжений);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ТекущаяДата",
		ТекущаяДатаСеанса());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ДатаНачала",
		ОтборПериод.ДатаНачала);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ДатаОкончания",
		ОтборПериод.ДатаОкончания);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ОтборПоРаспоряжению",
		ЕстьОтборПоРаспоряжению());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"СтатусРабочийГрафик",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокКОформлению,
		"ПланируетсяГрафикПроизводства",
		УправлениеПроизводством.ИспользуетсяГрафикПроизводства());
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказа(НовыйСтатус, ИмяСтатуса)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""%ИмяСтатуса%"". Продолжить?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяСтатуса%", ИмяСтатуса);
	ДопПараметры = Новый Структура("ВыделенныеСтроки, ИмяСтатуса, НовыйСтатус", ВыделенныеСтроки, ИмяСтатуса, НовыйСтатус);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусЗаказаЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ИмяСтатуса = ДополнительныеПараметры.ИмяСтатуса;
    НовыйСтатус = ДополнительныеПараметры.НовыйСтатус;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, НовыйСтатус);
    
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
		    Элементы.Список,
		    КоличествоОбработанных,
		    ВыделенныеСтроки.Количество(),
		    ИмяСтатуса);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()

	ПараметрыОтбора = Новый Структура("ОтборПереработчик,ОтборМенеджер,ОтборПериод,ОтборПодразделение,ОтборПриоритет");

	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("ЗаказПереработчикуРабочееМесто", "ПараметрыОтбора", ПараметрыОтбора);

КонецПроцедуры

&НаСервере
Функция ВыполняетсяОбновлениеЧитаемыхДанных()

	МассивПроверяемыхОбъектов = Новый Массив;
	МассивПроверяемыхОбъектов.Добавить("РегистрНакопления.ПереработкаПоГрафикуПроизводства");
	МассивПроверяемыхОбъектов.Добавить("Документ.ЗаказНаПроизводство");
	Возврат НЕ ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, МассивПроверяемыхОбъектов);
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти
