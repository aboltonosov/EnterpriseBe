
#Область ОписаниеПеременных

&НаКлиенте
Перем ОтветПередЗаписью;

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		СтатусДокумента = Перечисления.СтатусыЗаказовПереработчикам.ПустаяСсылка();
		
	КонецЕсли;
	
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	
	Если НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием")
		//++ НЕ УТКА
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством")
			И Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство 
		//-- НЕ УТКА
		Тогда
		ЭлементСписка = Элементы.ГруппировкаЗатрат.СписокВыбора.НайтиПоЗначению(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство);
		Элементы.ГруппировкаЗатрат.СписокВыбора.Удалить(ЭлементСписка);
	КонецЕсли; 
	Если НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием")
		//++ НЕ УТКА
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2")
			И Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства 
		//-- НЕ УТКА
		Тогда
		ЭлементСписка = Элементы.ГруппировкаЗатрат.СписокВыбора.НайтиПоЗначению(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
		Элементы.ГруппировкаЗатрат.СписокВыбора.Удалить(ЭлементСписка);
	КонецЕсли; 
	
	ОпределитьИспользованиеПричинОтменыЗаказов(Истина);
	ОпределитьИспользованиеПричинОтменыЗаказов(Ложь);
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтогоПродукция.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ЗакупкиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	УстановитьВидимостьЭлементовПоФункцОпциям();
	ЗаполнятьВидыЦенПоУмолчанию = ЗначениеЗаполнено(Объект.ВидЦены);
	
	УстановитьВидимостьВидаЦен();
	НастроитьВидимостьИЗаполнениеУслуг(ЭтаФорма);
	
	Элементы.РедактированиеЭтаповВыходныеИзделияПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	Элементы.РедактированиеЭтаповПобочныеИзделияПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	
	Элементы.ЗакрытьЗаказ.Доступность = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказПереработчику);
	
	УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, Не ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС1);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо1);
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	#Область СтандартныеМеханизмы
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма, "Продукция,ВозвратныеОтходы,Материалы");
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект) 
	
	//++ НЕ УТКА
	РазблокироватьЭтапыНаСервере();
	//-- НЕ УТКА
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаказовПереработчикам.ПустаяСсылка();
	КонецЕсли;

	Если Объект.ПереработкаПоЗаказу Тогда
		ИсходныеРаспоряжения.Очистить();
		Для каждого ДанныеСтроки Из Объект.Услуги Цикл
			ИсходныеРаспоряжения.Добавить(ДанныеСтроки.Распоряжение);
		КонецЦикла; 
	КонецЕсли; 
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	ТребуетсяЗаполнитьДанныеРаспоряжения = Ложь;
	ТребуетсяУточнитьДанныеРаспоряжения = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеГруппыЗатрат(Отказ);
	
	//++ НЕ УТКА
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		РедактированиеЭтаповОбъект = РеквизитФормыВЗначение("РедактированиеЭтапов");
		Если НЕ РедактированиеЭтаповОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	//-- НЕ УТКА
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи) 
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	// Если документ проводится, заполним пустые даты поступления в тч Продукция
	// и пустые даты отгрузки в тч Материалы, рассчитаем скидки, заполним график оплаты
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		Отказ = Истина;
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтаФорма,
			"Материалы",
			"Номенклатура,Характеристика,Количество,Склад,ДатаОтгрузки",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Возврат;
		
	Иначе
		
		Отказ = Истина;
		ОбработатьЗаписьОбъектаВФорме(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) 
	
	//++ НЕ УТКА
	Если ТекущийОбъект.ПереработкаПоЗаказу 
		И (ТребуетсяЗаполнитьДанныеРаспоряжения 
			ИЛИ НЕ ТекущийОбъект.Проведен И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
			
		ТекущийОбъект.ЗаполнитьДанныеРаспоряжения();
		
	ИначеЕсли ТребуетсяУточнитьДанныеРаспоряжения Тогда
		
		ОперативныйУчетПроизводстваКлиентСервер.ЗаполнитьДанныеРаспоряженияЗаказаПереработчику(
			ТекущийОбъект, 
			Перечисления.ТипыДвиженияЗапасов.Поступление,
			Перечисления.ТипыДвиженияЗапасов.Отгрузка);
			
	КонецЕсли;
	
	Если ТекущийОбъект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		Объект.ПоступлениеОднойДатой = РедактированиеЭтапов.ПроизводствоОднойДатой;
		Объект.ДатаПоступления = РедактированиеЭтапов.ДатаПроизводства;
		Объект.НеОтгружатьЧастями = РедактированиеЭтапов.НеОтгружатьЧастями;
		Объект.ДатаОтгрузки = РедактированиеЭтапов.ДатаОтгрузки;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РедактированиеЭтапов", РедактированиеЭтапов);
	КонецЕсли;
	
	//-- НЕ УТКА
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи) 
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаказовПереработчикам.ПустаяСсылка();
	КонецЕсли;
		
	ЗаполнитьСлужебныеРеквизиты();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.Материалы,
		ЗависимыеРеквизитыМатериалы());
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(
		Объект.ВозвратныеОтходы,
		ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

	ТребуетсяЗаполнитьДанныеРаспоряжения = Ложь;
	ТребуетсяУточнитьДанныеРаспоряжения = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки) 
	
	СкрыватьОтмененныеСтрокиМатериалы = Настройки.Получить("СкрыватьОтмененныеСтрокиМатериалы");
	
	Если СкрыватьОтмененныеСтрокиМатериалы Тогда
		Элементы.Материалы.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Материалы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	СкрыватьОтмененныеСтрокиПродукция = Настройки.Получить("СкрыватьОтмененныеСтрокиПродукция");
	
	Если СкрыватьОтмененныеСтрокиПродукция Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.МатериалыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиМатериалы;
	Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиПродукция;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Настройки.Удалить("Объект.НеОтгружатьЧастями");
		Настройки.Удалить("Объект.ПоступлениеОднойДатой");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки) 
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) 
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		Если Источник = "ИспользоватьПричиныОтменыЗаказовКлиентов" Тогда
			ОпределитьИспользованиеПричинОтменыЗаказов(Истина);
		КонецЕсли;
		
		Если Источник = "ИспользоватьПричиныОтменыЗаказовПоставщикам" Тогда
			ОпределитьИспользованиеПричинОтменыЗаказов(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			Данные = ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалы Тогда
				ОбработатьШтрихкоды(Данные, "Материалы");
			Иначе
				ОбработатьШтрихкоды(Данные, "Продукция");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалы Тогда
			ОбработатьШтрихкоды(ДанныеШтрихкодов, "Материалы");
		Иначе
			ОбработатьШтрихкоды(ДанныеШтрихкодов, "Продукция");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка)
		Или ЗакупкиКлиент.ИзменилисьДокументыОплатыПоставщиком(ИмяСобытия) Тогда
		ИзмененаОплатаСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы) 
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи) 
	
	ПараметрыОповещения = Новый Массив;
	Если Объект.ПереработкаПоЗаказу Тогда
		Для каждого ДанныеСтроки Из Объект.Услуги Цикл
			ПараметрыОповещения.Добавить(ДанныеСтроки.Распоряжение);
		КонецЦикла;
		Для каждого ЭлементСписка Из ИсходныеРаспоряжения Цикл
			Если ПараметрыОповещения.Найти(ЭлементСписка.Значение) = Неопределено Тогда
				ПараметрыОповещения.Добавить(ЭлементСписка.Значение);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Оповестить("Запись_ЗаказПереработчику", ПараметрыОповещения, Объект.Ссылка);
	ОповеститьОбИзменении(Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора) 
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказПереработчику.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда

		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда

		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда

		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		Если ВыбранноеЗначение.ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
			//++ НЕ УТКА
			НоменклатураКлиент.ОбработатьУказаниеСерии(
					ЭтаФорма, 
					ПараметрыУказанияСерийРедактированиеЭтапов[ВыбранноеЗначение.ИмяТЧ], 
					ВыбранноеЗначение,
					Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные);
			//-- НЕ УТКА
		Иначе
			НоменклатураКлиент.ОбработатьУказаниеСерии(
					ЭтаФорма, 
					ПараметрыУказанияСерий, 
					ВыбранноеЗначение);
		КонецЕсли; 
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ФормаВыбора" Тогда
		ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалы Тогда
		
			ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение,"Материалы");
			
		ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалыЭтапов Тогда
			
			ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение,"РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
			
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		
	КонецЕсли;
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна);
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент) 
	
	ПриИзмененииСкладаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦены)
		И (Объект.ВозвратныеОтходы.Количество() + Объект.Материалы.Количество()) > 0 Тогда
		
		КодОтвета = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВидЦеныПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Перезаполнить цены в табличных частях документа?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодОтвета = РезультатВопроса;
    
    Если КодОтвета = КодВозвратаДиалога.Да Тогда
        
        ЦеныРассчитаны = Ложь;
        ПриИзмененииВидаЦеныСервер(ЦеныРассчитаны);
        
        ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьВидЦенПоУмолчаниюПриИзменении(Элемент)
	
	Если ЗаполнятьВидыЦенПоУмолчанию Тогда
		
		ДоступныеВидыЦен = ОпределитьДоступныеВидыЦен();
		
		Если ДоступныеВидыЦен.Количество() = 1 Тогда
			
			Объект.ВидЦены = ДоступныеВидыЦен[0];
			
		Иначе
			
			ЗаполнятьВидыЦенПоУмолчанию = Ложь;
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Не найден вид цен по умолчанию'"));
			Возврат;
			
		КонецЕсли;
		
		Если (Объект.ВозвратныеОтходы.Количество() + Объект.Материалы.Количество()) > 0 Тогда
			
			КодОтвета = Неопределено;

			
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнятьВидЦенПоУмолчаниюПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Перезаполнить цены в табличных частях документа?'"), РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		
		Объект.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьВидЦенПоУмолчаниюПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодОтвета = РезультатВопроса;
    
    Если КодОтвета = КодВозвратаДиалога.Да Тогда
        
        ЦеныРассчитаны = Ложь;
        ПриИзмененииВидаЦеныСервер(ЦеныРассчитаны);
        
        ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент) 
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы, Объект);
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент) 
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	ПриИзмененииКонтактногоЛицаСервер(ПартнерИзменился);
	
	Если ПартнерИзменился И Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы, Объект);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьНаличиеЗаказовПоДаннымПереработчика(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент) 
	
	ПриИзмененииКонтрагентаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент) 
	
	ПриИзмененииДоговораСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован 
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КИсполнению")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.Закрыт") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КИсполнению")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.Закрыт") Тогда
		
		Если НЕ Объект.ПоступлениеОднойДатой Тогда
			ЗаполнитьПустыеДатыПоступления();
		Иначе
			ЗаполнитьПустуюДатуПоступления();
		КонецЕсли;
			
	КонецЕсли;
	
	ПриИзмененииСтатусаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент) 
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПересчитатьСуммы = Истина;
		
		Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
			Объект.Валюта = ВалютаДокумента;
			ПересчитатьСуммы = Ложь;
			
		ИначеЕсли Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ПересчитатьСуммы = Ложь;
			
		ИначеЕсли ВалютаДокумента = Объект.Валюта Тогда
			ПересчитатьСуммы = Ложь;
			
		ИначеЕсли Объект.Сумма = 0
				И Объект.ВозвратныеОтходы.Итог("Цена") = 0
				И Объект.Материалы.Итог("Цена") = 0 
				И Объект.Услуги.Итог("Сумма") = 0 Тогда
				
			ПересчитатьСуммы = Ложь;
			
		КонецЕсли;
		
		Если ПересчитатьСуммы Тогда
			
			ТекстВопроса = НСтр("ru='Пересчитать суммы в документе в валюту ""%Валюта%""?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Валюта%", Объект.Валюта);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПересчитатьСуммыПриИзмененииВалюты", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ВалютаПриИзмененииЗавершение(ПересчитатьСуммы);
		
	Иначе
		
		ВалютаДокумента = Объект.Валюта;
		
	КонецЕсли;
	
	ЗаполнитьПорядокОплатыПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент) 
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаПоступленияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	МаксДатаАванса = МаксимальнаяДатаАванса();
	
	Если ЗначениеЗаполнено(МаксДатаАванса) Тогда
		
		ПредставлениеМаксДатаАванса = НСтр("ru='%МаксДатаАванса%'");
		ПредставлениеМаксДатаАванса = СтрЗаменить(ПредставлениеМаксДатаАванса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(МаксДатаАванса, ПредставлениеМаксДатаАванса);
		
		ВыбранноеЗначение = Неопределено;

		
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЖелаемаяДатаПоступленияНачалоВыбораИзСпискаЗавершение", ЭтотОбъект), СписокВыбора, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент) 
	
	ЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	ПриИзмененииПоступлениеОднойДатойСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент) 
	
	ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент) 
	
	ПриИзмененииСуммыУслугиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент) 
	
	ПриИзмененииСуммыУслугиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, СтавкаНДС, Сумма, СуммаНДС, СуммаСНДС");
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Объект);
	ТекущаяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Объект.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
	Объект.СуммаНДС = ТекущаяСтрока.СуммаНДС;
	Объект.СуммаСНДС = ТекущаяСтрока.СуммаСНДС;
	ХарактеристикиИспользуются = ТекущаяСтрока.ХарактеристикиИспользуются;
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	
	Объект.ПроверятьУказаниеРаботы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаЗатратПриИзменении(Элемент)
	
	Если ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат Тогда
		Возврат;
	КонецЕсли;
	
	Если (Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство")
			ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства")) 
		И (Объект.Продукция.Количество() <> 0 
			ИЛИ Объект.ВозвратныеОтходы.Количество() <> 0
			ИЛИ Объект.Материалы.Количество() <> 0
			//++ НЕ УТКА
			ИЛИ РедактированиеЭтапов.ВыходныеИзделия.Количество() <> 0 
			ИЛИ РедактированиеЭтапов.ПобочныеИзделия.Количество() <> 0
			ИЛИ РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Количество() <> 0
			//-- НЕ УТКА
			)
			Тогда
			
		ТекстВопроса = НСтр("ru = 'Продукция, возвратные отходы, сырье и материалы будут очищены.
									|Изменить группировку затрат?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ГруппировкаЗатратПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ГруппировкаЗатратПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ДобавитьРаспоряжения" Тогда
		СтандартнаяОбработка = Ложь;
		//++ НЕ УТКА
		ОткрытьПодборРаспоряжений();
		//-- НЕ УТКА
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПроизводствоОднойДатойПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		РедактированиеЭтапов.ПроизводствоОднойДатой = НЕ РедактированиеЭтапов.ПроизводствоОднойДатой;
		Возврат;
	КонецЕсли;  
	
	ПроизводствоОднойДатойПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповДатаПроизводстваПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Объект.ДатаПоступления = РедактированиеЭтапов.ДатаПроизводства;
	ЗаполнитьДатыПроизводстваЭтапаСервер(РедактированиеЭтапов.ДатаПроизводства);
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповНеОтгружатьЧастямиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Если НЕ ЗаблокироватьЭтапы() Тогда
		РедактированиеЭтапов.НеОтгружатьЧастями = НЕ РедактированиеЭтапов.НеОтгружатьЧастями;
		Возврат;
	КонецЕсли;  
	
	НеОтгружатьЧастямиПриИзмененииНаСервере();
	
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповДатаОтгрузкиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Объект.ДатаОтгрузки = РедактированиеЭтапов.ДатаОтгрузки;
	ЗаполнитьДатуВТЧ("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами", "ДатаОтгрузки", РедактированиеЭтапов.ДатаОтгрузки);
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповЖелаемаяДатаОтгрузкиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Объект.ЖелаемаяДатаОтгрузки = РедактированиеЭтапов.ЖелаемаяДатаОтгрузки;
	РедактированиеЭтаповЖелаемаяДатаОтгрузкиПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // В КА пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)
	
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//++ НЕ УТКА
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки
		Отказ = Истина;
		ОткрытьПодборРаспоряжений();
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент) 
	
	ОбновитьКоличествоСтрокВГруппе(Объект.Продукция);
	ЗаполнитьУслугиПоПродукции(Объект);
	ПриИзмененииСуммыУслуг(ЭтаФорма);

	СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, Неопределено, ПродукцияКешТекущейСтроки, СкладГруппа);
	ВсегоСкладов = ВсегоСкладовВТаблицах(ТаблицаСкладов, ТаблицаСкладовВозвратныеОтходы);
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов1, ВсегоСкладов);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, "Продукция");
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование) 
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Продукция");
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции") Тогда
			// В этом случае каждая строка является новой группой
			Объект.МаксимальныйНомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат + 1;
			ТекущиеДанные.НомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат;
			ТекущиеДанные.ГруппаЗатрат = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.МатериалыЦена Тогда
		
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И Не Объект.Согласован Тогда
			
			ОчиститьСообщения();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", ТекущиеДанные.НомерСтроки, "ВидЦены"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования) 
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И Объект.ПоступлениеОднойДатой Тогда
		ТекущиеДанные.ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		ЗаполнитьНомерГруппыЗатратВСтрокеПродукцииПриОкончанииРедактирования(ТекущиеДанные, Объект, ПродукцияКешТекущейСтроки, НоваяСтрока);
		
		Если НоваяСтрока ИЛИ ПродукцияКешТекущейСтроки.НомерГруппыЗатрат <> ТекущиеДанные.НомерГруппыЗатрат Тогда
			ОбновитьКоличествоСтрокВГруппе(Объект.Продукция, ТекущиеДанные.НомерГруппыЗатрат);
		КонецЕсли; 
		
		ЗаполнитьУслугиПоПродукции(Объект);
		ПриИзмененииСуммыУслуг(ЭтаФорма);
		
		КешСтроки = ?(НоваяСтрока, Неопределено, ПродукцияКешТекущейСтроки);
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КешСтроки, СкладГруппа);
		ВсегоСкладов = ВсегоСкладовВТаблицах(ТаблицаСкладов, ТаблицаСкладовВозвратныеОтходы);
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов1, ВсегоСкладов);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если НоваяСтрока Тогда
		ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	КонецЕсли; 
	
	ЗаполнитьВозвратныеОтходыИМатериалыПриИзмененииПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));

	ДобавитьДействиеПроверитьЗаполнитьСклад("Продукция", ЭтаФорма, СтруктураДействий);
	
	ПродукцияНоменклатураПриИзмененииНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции")
		ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям") Тогда
		
		ПродукцияХарактеристикаПриИзмененииНаСервере(Элементы.Продукция.ТекущаяСтрока);
		
	КонецЕсли; 
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	НеСогласован  = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.НеСогласован");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкладПриИзменении(Элемент)
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтмененоПриИзменении(Элемент) 
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьГруппуЗатрат("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыПриИзменении(Элемент)
	
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПередУдалением(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПослеУдаления(Элемент) 
	
	СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладовВозвратныеОтходы, Неопределено, ВозвратныеОтходыКешТекущейСтроки, СкладГруппа);
	ВсегоСкладов = ВсегоСкладовВТаблицах(ТаблицаСкладов, ТаблицаСкладовВозвратныеОтходы);;
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов1, ВсегоСкладов);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, "ВозвратныеОтходы");
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование) 
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ВозвратныеОтходы");
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.ВидЦены = Объект.ВидЦены;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ВозвратныеОтходыЦена Тогда
		
		ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И Не Объект.Согласован Тогда
			
			ОчиститьСообщения();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ВозвратныеОтходы", ТекущиеДанные.НомерСтроки, "ВидЦены"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования) 
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И Объект.ПоступлениеОднойДатой Тогда
		ТекущиеДанные.ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, ВозвратныеОтходыКешТекущейСтроки);
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладовВозвратныеОтходы, ТекущиеДанные, КешСтроки, СкладГруппа);
		ВсегоСкладов = ВсегоСкладовВТаблицах(ТаблицаСкладов, ТаблицаСкладовВозвратныеОтходы);;
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов1, ВсегоСкладов);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если НоваяСтрока Тогда
		ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ДобавитьДействиеПроверитьЗаполнитьСклад("ВозвратныеОтходы", ЭтаФорма, СтруктураДействий);
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	ВозвратныеОтходыНоменклатураПриИзмененииНаСервере(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыХарактеристикаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыУпаковкаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	НеСогласован  = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.НеСогласован");
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("ВозвратныеОтходы", ТекущаяСтрока, СтруктураДействий);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыСкладПриИзменении(Элемент)
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЦенаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И ТекущаяСтрока.Цена <> 0 Тогда
		ТекущаяСтрока.ВидЦены = Неопределено;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыСуммаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОтмененоПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьГруппуЗатрат("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСырьеИМатериалы

&НаКлиенте
Процедура МатериалыПослеУдаления(Элемент) 
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна);
		
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования) 
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Объект.НеОтгружатьЧастями Тогда
		ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	Если НоваяСтрока Тогда
		ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование) 
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.ВидЦены = Объект.ВидЦены;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
				ИспользоватьНесколькоСкладов, 
				СкладПоУмолчанию, 
				ТекущиеДанные);
				
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь)); 
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма)));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказПереработчику.Форма.ФормаДокумента.Элементы.Материалы.Выбор");
	
	Если Элемент.ТекущийЭлемент = Элементы.МатериалыВариантОбеспечения И Не ТолькоПросмотр Тогда
			
		СтандартнаяОбработка = Ложь;
		
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда 
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалы();
				
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму(
						"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
						ПараметрыФормы,
						ЭтаФорма,
						,
						,
						,
						Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспеченияМатериалы", ЭтотОбъект),
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					КонецЕсли;
					
		Иначе
					
			ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("Материалы",
				НСтр("ru = 'Сырье и материалы для производства'"));
			ПараметрыПроверки.Поля.Склад   = "Объект.Материалы[%1].Склад";
			Текст = НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Сырье и материалы для производства""'");

			Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
				Объект, Объект.Материалы, Элементы.Материалы.ТекущаяСтрока, ПараметрыПроверки) Тогда

				ПараметрыФормы = ПараметрыВыбораОбеспечения();
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
						ЭтаФорма, УникальныйИдентификатор);
				Иначе
					Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Материалы",
						НСтр("ru = 'Сырье и материалы для производства'"));
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли Поле = Элементы.МатериалыЦена Тогда
		
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И Не Объект.Согласован Тогда
			
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Материалы", ТекущиеДанные.НомерСтроки, "ВидЦены"));
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ПродукцияГруппаЗатрат Тогда
		
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
		Если ТекущиеДанные.НомерГруппыЗатрат = 0 Тогда
			СтандартнаяОбработка = Ложь;
			ВыбратьГруппуЗатрат("Продукция");
		КонецЕсли; 
		
	ИначеЕсли Поле = Элементы.ВозвратныеОтходыГруппаЗатрат Тогда
		
		ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
		Если ТекущиеДанные.НомерГруппыЗатрат = 0 Тогда
			СтандартнаяОбработка = Ложь;
			ВыбратьГруппуЗатрат("ВозвратныеОтходы");
		КонецЕсли; 
		
	ИначеЕсли Поле = Элементы.МатериалыГруппаЗатрат Тогда
		
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		Если ТекущиеДанные.НомерГруппыЗатрат = 0 Тогда
			СтандартнаяОбработка = Ложь;
			ВыбратьГруппуЗатрат("Материалы");
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьВариантОбеспечения");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма)));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Материалы"));

	ДобавитьДействиеПроверитьЗаполнитьСклад("Материалы", ЭтаФорма, СтруктураДействий);
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма)));
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Материалы"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыУпаковкаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоУпаковокПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("Материалы", ТекущаяСтрока, СтруктураДействий);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВидЦеныПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтмененоПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма)));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма)));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна);
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Материалы.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Материалы.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьГруппуЗатрат("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если Поле = Элементы.УслугиГруппаЗатрат Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущиеДанные.Распоряжение) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Распоряжение);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.ЗакупкаПодДеятельность);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Услуги"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Объект.ПроверятьУказаниеРаботы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРедактированиеЭтаповВыходныеИзделия

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	
	УстановитьДоступностьНаправленияДеятельности(ЭтаФорма);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "РедактированиеЭтаповВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПередНачаломИзменения(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//++ НЕ УТКА
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки
		Отказ = Истина;
		ОткрытьПодборРаспоряжений();
		Возврат;
	КонецЕсли; 
	//-- НЕ УТКА
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПриНачалеРедактирования(
		ЭтаФорма, ТекущиеДанные, НоваяСтрока, Копирование);
		
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьГруппуЗатратВНовойСтроке(ТекущиеДанные, ЭтаФорма);
		ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатурыЭтапа(ТекущиеДанные, "ВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущаяСтрока = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "РедактированиеЭтаповВыходныеИзделия"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УправлениеПроизводствомКлиентСервер.ОчиститьНазначениеРедактированиеВСтроке(ТекущаяСтрока);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииУпаковкиСтрокиЭтапа(ТекущиеДанные, "РедактированиеЭтаповВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковокВТЧЭтапа(ТекущиеДанные, "РедактированиеЭтаповВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияПолучательПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПолучательПриИзменении(
		ТекущиеДанные, КэшированныеЗначения);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ВыбратьГруппуЗатрат("РедактированиеЭтаповВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	ТекущиеДанные.Распоряжение = Неопределено;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияНазначениеРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	НазначениеРедактированиеНачалоВыбора(ТекущиеДанные, "ВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповВыходныеИзделияНазначениеРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповВыходныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиентСервер.ОчиститьНазначениеРедактированиеВСтроке(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРедактированиеЭтаповПобочныеИзделия

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	Если РедактированиеЭтапов.ЕстьВыпускающийЭтап Тогда
		Элементы.ГруппаРедактированиеЭтаповПобочныеИзделия.Заголовок =
			?(РедактированиеЭтапов.ПобочныеИзделия.Количество() = 0,
			НСтр("ru='Побочный и промежуточный выпуск по фиксированной стоимости'"),
			СтрШаблон(НСтр("ru='Побочный и промежуточный выпуск по фиксированной стоимости (%1)'"), РедактированиеЭтапов.ПобочныеИзделия.Количество()));
	КонецЕсли;
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "РедактированиеЭтаповПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПередНачаломИзменения(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//++ НЕ УТКА
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки
		Отказ = Истина;
		ОткрытьПодборРаспоряжений();
		Возврат;
	КонецЕсли; 
	//-- НЕ УТКА
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПриНачалеРедактирования(
		ЭтаФорма, ТекущиеДанные, НоваяСтрока, Копирование);
		
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьГруппуЗатратВНовойСтроке(ТекущиеДанные, ЭтаФорма);
		ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияНоменклатураПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатурыЭтапа(ТекущиеДанные, "ВыходныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияХарактеристикаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущаяСтрока = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "РедактированиеЭтаповПобочныеИзделия"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УправлениеПроизводствомКлиентСервер.ОчиститьНазначениеРедактированиеВСтроке(ТекущаяСтрока);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияУпаковкаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииУпаковкиСтрокиЭтапа(ТекущиеДанные, "РедактированиеЭтаповПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковокВТЧЭтапа(ТекущиеДанные, "РедактированиеЭтаповПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияПолучательПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПолучательПриИзменении(
		ТекущиеДанные, КэшированныеЗначения);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ВыбратьГруппуЗатрат("РедактированиеЭтаповПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	ТекущиеДанные.Распоряжение = Неопределено;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияНазначениеРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	НазначениеРедактированиеНачалоВыбора(ТекущиеДанные, "ПобочныеИзделия");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповПобочныеИзделияНазначениеРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиентСервер.ОчиститьНазначениеРедактированиеВСтроке(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРедактированиеЭтаповОбеспечениеМатериаламиИРаботами

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если Поле = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиВариантОбеспечения И НЕ ТолькоПросмотр Тогда

		СтандартнаяОбработка = Ложь;
		ОбеспечениеМатериаламиИРаботамиВыборВариантОбеспечения(ТекущиеДанные);
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПередНачаломИзменения(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//++ НЕ УТКА
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки
		Отказ = Истина;
		ОткрытьПодборРаспоряжений();
		Возврат;
	КонецЕсли; 
	//-- НЕ УТКА
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПередУдалением(Элемент, Отказ)
	
	//++ НЕ УТКА
	ЗаблокироватьЭтапы(Отказ);
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьГруппуЗатратВНовойСтроке(ТекущиеДанные, ЭтаФорма);
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаПриНачалеРедактирования(
		ЭтаФорма, ТекущиеДанные, НоваяСтрока, Копирование);
	
	ОбеспечениеМатериаламиИРаботамиПриНачалеРедактирования(ТекущиеДанные, НоваяСтрока, Копирование);
	
	СкладыКлиент.ОбновитьКешированныеЗначения(
		Элемент, 
		КэшированныеЗначения, 
		ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, 
		Копирование);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиНоменклатураПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииНоменклатурыЭтапа(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиХарактеристикаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущаяСтрока = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ОбеспечениеМатериаламиИРаботами"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиУпаковкаПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ДанныеСтроки = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ПриИзмененииУпаковкиСтрокиЭтапа(ДанныеСтроки, "ОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиКоличествоУпаковокПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковокВТЧЭтапа(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСерияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущаяСтрока = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, ВыбранноеЗначение);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПодборСерийЭтапа(
		"ОбеспечениеМатериаламиИРаботами", 
		Элемент.ТекстРедактирования, 
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиПроизводитсяПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураПоиска = Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение);
	СписокСтрок = РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
	
	УправлениеПроизводствомКлиент.ПроизводитсяПриИзменении(
		ТекущиеДанные, 
		СписокСтрок[0],
		ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
		КэшированныеЗначения);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСпецификацияПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураПоиска = Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение);
 	СписокСтрок = РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСпецификацияПриИзменении(
		СписокСтрок[0],
		ТекущиеДанные,
		ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
		КэшированныеЗначения);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиСкладПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСкладПриИзменении(
		ТекущиеДанные, 
		ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, 
		КэшированныеЗначения);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ВыбратьГруппуЗатрат("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	ТекущиеДанные.Распоряжение = Неопределено;
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные);
	
	//-- НЕ УТКА
	
	Возврат; // в КА пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыТЧ_Продукция

&НаКлиенте
Процедура ПродукцияЗаполнитьДатуПоступления(Команда) 
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуПоступления("Продукция", Элементы.Продукция.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьСклад(Команда) 
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	ТребуетсяЗаполнение = СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
		Объект,
		Объект.Продукция,
		НСтр("ru='Выпускаемая продукция'"),
		ВыделенныеСтроки);
	
	Если ТребуетсяЗаполнение Тогда
		
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		
		СтруктураОтбора     = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ПродукцияЗаполнитьСкладЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад      = Результат;
    
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере("Продукция", ВыделенныеСтроки, ВыбранныйСклад);
        
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(
        ВыбранныйСклад,
        ЗаполненоСтрок,
        ВыделенныеСтроки.Количество());
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКопированиеВставитьСтроки(Команда) 
	
	КоличествоТоваровДоВставки = Объект.Продукция.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("Продукция");
	
	КоличествоВставленных = Объект.Продукция.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
		
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКопированиеСкопироватьСтроки(Команда) 
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Продукция.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Продукция");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Продукция.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ПродукцияОбщееЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Материалы Тогда
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Материалы");
		Иначе
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Продукция");
		КонецЕсли;
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееПодобратьТовары(Команда) 
	
	ПодобратьТовар("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееПоискПоШтрихкоду(Команда) 
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПродукцияОбщееПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, "Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееРазбитьСтроку(Команда) 
	
	ТаблицаФормы  = Элементы.Продукция;
	ДанныеТаблицы = Объект.Продукция;
	
	Оповещение = Новый ОписаниеОповещения("ПродукцияОбщееРазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбщееРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("Продукция", ТекущаяСтрока, СтруктураДействий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("Продукция", НоваяСтрока, СтруктураДействий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменаСтрокОтменитьВыделенныеСтроки(Команда)
	
	ОтменаСтрокНеовзможна = Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(
		Объект.Продукция,
		НСтр("ru='Выпускаемая продукция'"),
		Элементы.Продукция.ВыделенныеСтроки);
	
	Если ОтменаСтрокНеовзможна Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОтмененныеСтроки = Ложь;
	
	Для Каждого ТекСтрока Из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Продукция.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
				ЕстьОтмененныеСтроки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если ЕстьОтмененныеСтроки Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные строки отменены'"),
			,
			НСтр("ru='Выделенные строки отменены.'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Выделенные строки уже отменены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменаСтрокСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтрокиПродукция = Не СкрыватьОтмененныеСтрокиПродукция;
	
	Если СкрыватьОтмененныеСтрокиПродукция Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиПродукция;
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_ПодобратьПоЗаказамНаПроизводство(Команда)
	
	//++ НЕ УТКА
	ОткрытьПодборРаспоряжений();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_Заполнение_Перезаполнить(Команда)
	
	ЗаполнитьВозвратныеОтходыИМатериалы();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыЗаполнитьДатуПоступления(Команда) 
	
	Если Элементы.ВозвратныеОтходы.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуПоступления("ВозвратныеОтходы", Элементы.ВозвратныеОтходы.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗаполнитьСклад(Команда) 
	
	ВыделенныеСтроки = Элементы.ВозвратныеОтходы.ВыделенныеСтроки;
	ТребуетсяЗаполнение = СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
		Объект,
		Объект.ВозвратныеОтходы,
		НСтр("ru='Возвратные отходы'"),
		ВыделенныеСтроки);
	
	Если ТребуетсяЗаполнение Тогда
		
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		
		СтруктураОтбора     = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ВозвратныеОтходыЗаполнитьСкладЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад      = Результат;
    
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере("ВозвратныеОтходы", ВыделенныеСтроки, ВыбранныйСклад);
        
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(
        ВыбранныйСклад,
        ЗаполненоСтрок,
        ВыделенныеСтроки.Количество());
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Элементы.ВозвратныеОтходы.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В таблице отсутствуют выделенные строки. Выделите строки для заполнения цен'"),
			Объект.Ссылка,
			"Объект.ВозвратныеОтходы");
		
		Возврат;
		
	КонецЕсли;
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "ВозвратныеОтходы", НСтр("ru='Возвратные отходы'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ВозвратныеОтходыЗаполнитьЦеныПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗаполнитьЦеныПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, "ВозвратныеОтходы", Истина);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКопированиеВставитьСтроки(Команда) 
	
	КоличествоТоваровДоВставки = Объект.ВозвратныеОтходы.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("ВозвратныеОтходы");
	
	КоличествоВставленных = Объект.ВозвратныеОтходы.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
		
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКопированиеСкопироватьСтроки(Команда) 
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.ВозвратныеОтходы.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("ВозвратныеОтходы");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.ВозвратныеОтходы.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ВозвратныеОтходыЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "ВозвратныеОтходы");
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбщееПодобратьТовары(Команда) 
	
	ПодобратьТовар("ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбщееПоискПоШтрихкоду(Команда) 
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ВозвратныеОтходыОбщееПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбщееПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, "ВозвратныеОтходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбщееРазбитьСтроку(Команда) 
	
	ТаблицаФормы  = Элементы.ВозвратныеОтходы;
	ДанныеТаблицы = Объект.ВозвратныеОтходы;
	
	Оповещение = Новый ОписаниеОповещения("ВозвратныеОтходыОбщееРазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОбщееРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("ВозвратныеОтходы", ТекущаяСтрока, СтруктураДействий);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("ВозвратныеОтходы", НоваяСтрока, СтруктураДействий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОтменаСтрокОтменитьВыделенныеСтроки(Команда)
	
	ОтменаСтрокНеовзможна = Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(
		Объект.ВозвратныеОтходы,
		НСтр("ru='Возвратные отходы'"),
		Элементы.ВозвратныеОтходы.ВыделенныеСтроки);
	
	Если ОтменаСтрокНеовзможна Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	
	ЕстьОтмененныеСтроки = Ложь;
	
	Для Каждого ТекСтрока Из Элементы.ВозвратныеОтходы.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ВозвратныеОтходы.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
				ЕстьОтмененныеСтроки = Истина;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если ЕстьОтмененныеСтроки Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные строки отменены'"),
			,
			НСтр("ru='Выделенные строки отменены.'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Выделенные строки уже отменены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыОтменаСтрокСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтрокиПродукция = Не СкрыватьОтмененныеСтрокиПродукция;
	
	Если СкрыватьОтмененныеСтрокиПродукция Тогда
		Элементы.ВозвратныеОтходы.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ВозвратныеОтходы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ВозвратныеОтходыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиПродукция;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходы_Заполнить_ЗаполнитьГруппуЗатрат(Команда)
	
	ВыбратьГруппуЗатрат("ВозвратныеОтходы");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_Материалы

&НаКлиенте
Процедура МатериалыЗаполнитьДатуОтгрузки(Команда) 
	
	ЗаполнитьДатуОтгрузки("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьСклад(Команда) 
	
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	ТребуетсяЗаполнение = СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
		Объект,
		Объект.Материалы,
		НСтр("ru='Сырье и материалы для производства'"),
		ВыделенныеСтроки);
	
	Если ТребуетсяЗаполнение Тогда
		
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		
		СтруктураОтбора     = Новый Структура("ЭтоГруппа", Ложь);
		СтруктураПараметров = Новый Структура("Отбор", СтруктураОтбора);
		ВыбранныйСклад = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("МатериалыЗаполнитьСкладЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад      = Результат;
    
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере("Материалы", ВыделенныеСтроки, ВыбранныйСклад);
        
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(
        ВыбранныйСклад,
        ЗаполненоСтрок,
        ВыделенныеСтроки.Количество());
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьЦеныПоВидуЦен(Команда) 
	
	Если Элементы.Материалы.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В таблице отсутствуют выделенные строки. Выделите строки для заполнения цен'"),
			Объект.Ссылка,
			"Объект.Материалы");
		
		Возврат;
		
	КонецЕсли;
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Материалы", НСтр("ru='Сырье и материалы для производства'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("МатериалыЗаполнитьЦеныПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьЦеныПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, "Материалы", Истина);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКопированиеВставитьСтроки(Команда) 
	
	КоличествоТоваровДоВставки = Объект.Материалы.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("Материалы");
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна);
	
	КоличествоВставленных = Объект.Материалы.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКопированиеСкопироватьСтроки(Команда) 
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Материалы.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Материалы");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Материалы.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("МатериалыОбщееЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Материалы Тогда
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Материалы");
		Иначе
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Продукция");
		КонецЕсли;
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееПодобратьТовары(Команда) 
	
	ПодобратьТовар("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееПоискПоШтрихкоду(Команда) 
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("МатериалыОбщееПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Материалы",
		"Номенклатура,Характеристика,Количество,Склад,ДатаОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееРазбитьСтроку(Команда) 
	
	ТаблицаФормы  = Элементы.Материалы;
	ДанныеТаблицы = Объект.Материалы;
	
	Оповещение = Новый ОписаниеОповещения("МатериалыОбщееРазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбщееРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("Материалы", ТекущаяСтрока, СтруктураДействий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("Материалы", НоваяСтрока, СтруктураДействий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтменаСтрокОтменитьВыделенныеСтроки(Команда)
	
	ОтменаСтрокНеовзможна = Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(
		Объект.Материалы,
		НСтр("ru='Сырье и материалы'"),
		Элементы.Материалы.ВыделенныеСтроки);
	
	Если ОтменаСтрокНеовзможна Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.ФормаВыбора",,,,,, Новый ОписаниеОповещения("МатериалыОтменаСтрокОтменитьВыделенныеСтрокиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        Возврат;
	КонецЕсли;
	
	МатериалыОтменаСтрокОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтменаСтрокОтменитьВыделенныеСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПричинаОтмены = Результат;
    Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
        Возврат;
    КонецЕсли;
    
    МатериалыОтменаСтрокОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтменаСтрокОтменитьВыделенныеСтрокиФрагмент(Знач ПричинаОтмены)
    
    Перем СтруктураДействий;
    
    СтруктураДействий = Новый Структура();
    СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыМатериалы());
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма)));
   
    ПродажиКлиент.ОтменитьВыделенныеСтроки(
	    Объект.Материалы,
	    Элементы.Материалы.ВыделенныеСтроки,
	    ПричинаОтмены,
	    СтруктураДействий);
    
    РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна);
    ПродажиКлиент.ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены);
    
    Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
        ЗаполнитьСтатусыУказанияСерий();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтменаСтрокСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтрокиМатериалы = Не СкрыватьОтмененныеСтрокиМатериалы;
	
	Если СкрыватьОтмененныеСтрокиМатериалы Тогда
		Элементы.Материалы.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Материалы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.МатериалыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиМатериалы;
	
КонецПроцедуры

&НаКлиенте
Процедура Материалы_Заполнить_ЗаполнитьГруппуЗатрат(Команда)
	
	ВыбратьГруппуЗатрат("Материалы");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_Услуги

&НаКлиенте
Процедура Услуги_ВыбратьИЗаполнитьУслугу(Команда)
	
	Если Элементы.Услуги.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для заполнения услуги необходимо выбрать строки.'"));
		Возврат;
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Услуги_ВыбратьИЗаполнитьУслугуЗавершение", ЭтотОбъект);
	ПараметрыОтбора = Новый Структура("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_РедактированиеЭтаповПродукция

&НаКлиенте
Процедура РедактированиеЭтапов_Продукция_РазбитьСтроку(Команда)
	
	//++ НЕ УТКА
	
	Если ЗаблокироватьЭтапы() Тогда
		РазбитьСтрокуТЧЭтапа("РедактированиеЭтаповВыходныеИзделия");
	КонецЕсли;  
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_РедактированиеЭтаповОтходы

&НаКлиенте
Процедура РедактированиеЭтапов_Отходы_РазбитьСтроку(Команда)
	
	//++ НЕ УТКА
	
	Если ЗаблокироватьЭтапы() Тогда
		РазбитьСтрокуТЧЭтапа("РедактированиеЭтаповПобочныеИзделия");
	КонецЕсли;  
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_РедактированиеЭтаповОбеспечениеМатериаламиИРаботами

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_ПодобратьТовары(Команда)
	
	//++ НЕ УТКА
	
	Если ЗаблокироватьЭтапы() Тогда
		ПодобратьТовар("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	КонецЕсли;  
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_ЗаполнитьГруппуЗатрат(Команда)
	
	//++ НЕ УТКА
	
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;  
	
	ВыбратьГруппуЗатрат("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_ЗаполнитьДатуОтгрузки(Команда)
	
	//++ НЕ УТКА
	
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;  
	
	ЗаполнитьДатуОтгрузки("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_ВставитьСтроки(Команда)
	
	//++ НЕ УТКА
	
	Если Объект.ПереработкаПоЗаказу И Объект.Услуги.Количество() = 0 Тогда
		// Если нет ниодного заказа, то нужно выбрать заказ
		// Если заказ есть, то выполняется стандартное добавление строки
		Отказ = Истина;
		ОткрытьПодборРаспоряжений();
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;  
	
	КоличествоТоваровДоВставки = РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, ДатаОтгрузкиОбязательна);
	
	КоличествоВставленных = РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_СкопироватьСтроки(Команда)
	
	//++ НЕ УТКА
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_РазбитьСтроку(Команда)
	
	//++ НЕ УТКА
	
	Если ЗаблокироватьЭтапы() Тогда
		РазбитьСтрокуТЧЭтапа("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	КонецЕсли;  
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_СостояниеОбеспечения(Команда)
	
	//++ НЕ УТКА
	
	ТекстПредупреждения = НСтр("ru = 'Не введено ни одной строки в список ""Обеспечение материалами и работами"".
		|Просмотр состояния обеспечения невозможен.'");
	
	ДанныеДляОбеспечения = ПодготовитьДанныеДляОбеспеченияЗаказа();
	ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ДанныеДляОбеспечения, ЭтаФорма, УникальныйИдентификатор);
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура МатериалыЗаполнитьОбеспечение(Команда)

	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("Материалы",
		НСтр("ru = 'Сырье и материалы для производства'"));
	ПараметрыПроверки.Поля.Склад   = "Объект.Материалы[%1].Склад";
	Текст = НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Сырье и материалы для производства""'");

	Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
		Объект, Объект.Материалы, Элементы.Материалы.ВыделенныеСтроки, ПараметрыПроверки) Тогда

		ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа(ТипЗнч(Объект.Ссылка));
		ПараметрыФормы.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеЭтапов_Обеспечение_ЗаполнитьОбеспечение(Команда)
	
	//++ НЕ УТКА
	
	Если НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;  
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЗаполнитьОбеспечение(
			РедактированиеЭтапов, 
			Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки, 
			ЭтаФорма, 
			"РедактированиеЭтапов");
			
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСостояниеОбеспечения(Команда)

	ТекстПредупреждения = НСтр("ru = 'Не введено ни одной строки в список ""Сырье и материалы"".
		|Просмотр состояния обеспечения списка сырья и материалов невозможен.'");
		
	Если ОбеспечениеКлиент.ПроверитьВозможностьВыполненияКомандыСостояниеОбеспеченияВДокументе(ЭтаФорма, "Материалы", ТекстПредупреждения) Тогда
		
		ДанныеДляОбеспечения = ПодготовитьДанныеДляОбеспеченияЗаказа();
		ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ДанныеДляОбеспечения, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.НеСогласован") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КИсполнению");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Истина, Строка(МинимальныйСтатус));
	ИначеЕсли Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Истина);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.НеСогласован") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КИсполнению");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, Строка(МинимальныйСтатус));
	ИначеЕсли Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Ложь);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.ПолучитьНазначениеЗаказа(Объект.Ссылка);
	Возврат Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	
КонецФункции

#КонецОбласти

#Область ПрочиеКоманды

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства") Тогда
		
		ОчиститьСообщения();
		
		ПринудительноЗакрытьФорму = Истина;
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
		ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Истина);
		ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
		
		Если ПровестиИЗакрытьНаСервере(ПараметрыЗаписи) Тогда
			ПослеЗаписи(ПараметрыЗаписи);
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	
	ТекстВопроса = НСтр("ru='Пометить ""%1"" на удаление?'");
	Если Объект.ПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru='Снять с ""%1"" пометку на удаление?'");
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(ТекстВопроса, Объект.Ссылка);
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПометкаУдаленияОбработчикОповещения", ЭтаФорма),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаленияОбработчикОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПометкаУдаления = Не Объект.ПометкаУдаления;
	
	ПринудительноЗакрытьФорму = Ложь;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииСуммыУслугиСервер()
	
	ТекущаяСтрока = Объект;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатусаСервер()
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина);
	ПараметрыЗаполнения.Вставить("ДоступноОбеспечение", ДоступноОбеспечение(ЭтаФорма));
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтавкиНДССервер()
	
	ТекущаяСтрока = Объект;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер() 
	
	ДокументЗакупки = РеквизитФормыВЗначение("Объект");
	ДокументЗакупки.ЗаполнитьУсловияЗакупокПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
	
	ВалютаДокумента = Объект.Валюта;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь);
	Если Не Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, Объект.СуммаСНДС);
	КонецЕсли;
	
	ПриИзмененииСкладаСервер();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Материалы, ЗависимыеРеквизитыМатериалы());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвратныеОтходы, ЗависимыеРеквизитыВозвратныеОтходы());
	
	УстановитьВидимостьДоговора();
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	УстановитьСписокВыбораСтавокНДС(Истина);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтактногоЛицаСервер(ПартнерИзменился) 
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер() 
	
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь);
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокОплаты");
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаЦеныСервер(ЦеныРассчитаны) 
	
	ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены, "ВозвратныеОтходы", Ложь);
	ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены, "Материалы", Ложь) И ЦеныРассчитаны;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьСуммы) 
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		
		СтараяВалюта                = ВалютаДокумента;
		ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
		
		// Пересчет общей суммы документа
		Объект.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Объект.Сумма,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
		
		// Пересчет сумм в продукции
		ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.ВозвратныеОтходы,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
		// Пересчет сумм в материалах
		ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Материалы,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
		// Пересчет сумм в услугах
		ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Услуги,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты,
			"СуммаСНДС");
		
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Материалы, ЗависимыеРеквизитыМатериалы());
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвратныеОтходы, ЗависимыеРеквизитыВозвратныеОтходы());
		
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
		
		Если Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
			ПриИзмененииСуммыУслуг(ЭтаФорма);
		КонецЕсли; 
		
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер() 
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
	Элементы.ПродукцияЗаполнитьСклад.Доступность = СкладГруппа;
	
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Продукция, Ложь);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.ВозвратныеОтходы, Ложь);

	УстановитьПараметрыВыбораТоварыСклад();
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	Если Не СкладГруппа Тогда
		
		АктуализироватьЗакупкуПодДеятельность();
		
	КонецЕсли;
	
	ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаВТабличнойЧастиСервер(ИмяТабЧасти = "")
	
	Если ИмяТабЧасти = "ВозвратныеОтходы" ИЛИ ИмяТабЧасти = "" Тогда
		
		СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.ВозвратныеОтходы, ТаблицаСкладовВозвратныеОтходы, СкладГруппа);
		
	КонецЕсли;
	
	Если ИмяТабЧасти = "Продукция" ИЛИ ИмяТабЧасти = "" Тогда
		
		СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Продукция, ТаблицаСкладов, СкладГруппа);
		
	КонецЕсли;
	
	ВсегоСкладов = ВсегоСкладовВТаблицах(ТаблицаСкладов, ТаблицаСкладовВозвратныеОтходы);
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов1, ВсегоСкладов);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер() 
	
	УстановитьВидимостьДоговора();
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	УстановитьСписокВыбораСтавокНДС(Истина);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер() 
	
	УстановитьВидимостьДоговора();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
		КонецЕсли;
			
		Если Не СкладГруппа Тогда
			
			АктуализироватьЗакупкуПодДеятельность();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(
		Объект.Организация, 
		Объект.БанковскийСчет, 
		Объект.ФормаОплаты, 
		Объект.НаправлениеДеятельности);
			
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(
		Объект.Организация, 
		Объект.Касса, 
		Объект.ФормаОплаты, 
		Объект.НаправлениеДеятельности);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере 
Процедура ПриИзмененииПоступлениеОднойДатойСервер()
	
	// Вычислим максимальную дату поступления и приведем к ней ТЧ
	Если Объект.ПоступлениеОднойДатой Тогда
		
		Объект.ДатаПоступления = МаксимальнаяДатаПоступления();
		
		ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Ценообразование

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, ИмяТЧ, ПоВыделеннымСтрокам) 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата",    Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта",  Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	
	Если ПоВыделеннымСтрокам Тогда
		
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы[ИмяТЧ].ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект[ИмяТЧ].НайтиПоИдентификатору(Строка));
		КонецЦикла;
		
	Иначе
		
		МассивСтрок = Неопределено;
		
	КонецЕсли;
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект[ИмяТЧ],
		МассивСтрок,
		ПараметрыЗаполнения,
		СтруктураДействий);
	
	Если ИмяТЧ = "Материалы" Тогда
		СтруктураЗависимыхРеквизитов = ЗависимыеРеквизитыМатериалы();
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект[ИмяТЧ], СтруктураЗависимыхРеквизитов);
	ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
		СтруктураЗависимыхРеквизитов = ЗависимыеРеквизитыВозвратныеОтходы();
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект[ИмяТЧ], СтруктураЗависимыхРеквизитов);
	КонецЕсли;
	
	Если ИмяТЧ = "Материалы" Тогда
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	КонецЕсли;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ПодобратьТовар(ИмяТЧ)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'заказ переработчику'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",    Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",         Ложь);
	ПараметрыФормы.Вставить("Валюта",                  Объект.Валюта);
	ПараметрыФормы.Вставить("Дата",                    Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	
	Если ИмяТЧ = "Материалы" 
		ИЛИ ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", Истина);
		ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
		ПараметрыФормы.Вставить("Назначение",         Объект.Назначение);
		ПараметрыФормы.Вставить("Подразделение",      Объект.Подразделение);
		ПараметрыФормы.Вставить("ПодборВариантовОбеспечения", Истина);
		ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
		
		ФормаПодбораТоваров = "Обработка.ПодборТоваровВДокументПродажи.Форма";
		
		ОткрытьФорму(ФормаПодбораТоваров, ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
		
	Иначе
		
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		
		Если ИмяТЧ = "Продукция" Тогда
			ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		КонецЕсли; 
		
		ФормаПодбораТоваров = "Обработка.ПодборТоваровВДокументЗакупки.Форма";
		
		ОткрытьФорму(ФормаПодбораТоваров, ПараметрыФормы, Элементы[ИмяТЧ], УникальныйИдентификатор);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТЧ) 
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	ТаблицаДокумента = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	
	Если ИмяТЧ = "Продукция" Тогда
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, Склад, КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, Склад, Цена, КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "Материалы" Тогда
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, Склад, Цена, КоличествоУпаковок, ВидЦены, СрокПоставки, ВариантОбеспечения, Серия, ДатаОтгрузки";
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		СписокСвойств = "Номенклатура, Характеристика, Упаковка, Склад, КоличествоУпаковок, ВариантОбеспечения, Серия, ДатаОтгрузки";
	КонецЕсли;
	
	ВыделенныеСтроки = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий);
		
		ДобавитьДействиеПроверитьЗаполнитьСклад(ИмяТЧ, ЭтаФорма, СтруктураДействий);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ТекущаяСтрока, СтруктураДействий);
		
		Если ИмяТЧ = "Материалы" Тогда
			
			Если Объект.НеОтгружатьЧастями Тогда
				ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
			Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
				СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
				СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
					Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма)));
			КонецЕсли;
			
		ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
			
			СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
			
		ИначеЕсли ИмяТЧ = "Продукция" Тогда
			
			Если Объект.ПоступлениеОднойДатой Тогда
				ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
			КонецЕсли;
			
			ВыделенныеСтроки.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
			ПродукцияСтрокаЗаполнитьСпецификацию(ТекущаяСтрока);
			ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(ТекущаяСтрока, Объект);
			
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			
			Если РедактированиеЭтапов.НеОтгружатьЧастями Тогда
				ТекущаяСтрока.ДатаОтгрузки = РедактированиеЭтапов.ДатаОтгрузки;
			КонецЕсли;
			
		КонецЕсли;
		
		//++ НЕ УТКА
		Если ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			ЗаполнитьГруппуЗатратВНовойСтроке(ТекущаяСтрока, ЭтаФорма);
			ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаВСтроке(ТекущаяСтрока, ЭтаФорма);
		КонецЕсли; 
		//-- НЕ УТКА
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		Если ИмяТЧ = "ВозвратныеОтходы" Или ИмяТЧ = "Продукция" Тогда
			НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		КонецЕсли;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Если ИмяТЧ = "Материалы" Тогда
		Если Объект.НеОтгружатьЧастями И ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
			Объект.ДатаОтгрузки = Макс(ВыбранноеЗначение.МаксимальнаяДатаОтгрузки, Объект.ДатаОтгрузки, НачалоДня(ТекущаяДатаСеанса()));
			ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Материалы, "ДатаОтгрузки", Объект.ДатаОтгрузки);
		КонецЕсли;
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		Если РедактированиеЭтапов.НеОтгружатьЧастями И ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
			РедактированиеЭтапов.ДатаОтгрузки = Макс(ВыбранноеЗначение.МаксимальнаяДатаОтгрузки, РедактированиеЭтапов.ДатаОтгрузки, НачалоДня(ТекущаяДатаСеанса()));
			ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, "ДатаОтгрузки", РедактированиеЭтапов.ДатаОтгрузки);
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВозвратныеОтходы" Тогда
		
		ПриИзмененииСкладаВТабличнойЧастиСервер();
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
		
	КонецЕсли;
	
	Если ИмяТЧ = "Продукция" Тогда
		
		ЗаполнитьУслугиПоПродукции(Объект);
		ЗаполнитьВозвратныеОтходыИМатериалыНаСервере(ВыделенныеСтроки);
		ОбновитьКоличествоСтрокВГруппе(Объект.Продукция);
		ПриИзмененииСуммыУслуг(ЭтаФорма);
		
	КонецЕсли;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, ИмяТЧ) 
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения И ИмяТЧ = "Материалы" Тогда
		
		ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
		ЗначенияРеквизитов.ДатаОтгрузки         = Объект.ДатаОтгрузки;
		ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		ЗначенияРеквизитов.НеОтгружатьЧастями   = Объект.НеОтгружатьЧастями;
		
		ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
			ЭтаФорма,
			ЗначенияРеквизитов,
			ВыбранноеЗначение,
			"ОбработкаВыбораПодборНаКлиентеПослеВопросаМатериалы",
			Объект.Материалы.Количество() > 0);
			
	ИначеЕсли ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения И ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		
		ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
		ЗначенияРеквизитов.ДатаОтгрузки         = РедактированиеЭтапов.ДатаОтгрузки;
		ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = РедактированиеЭтапов.ЖелаемаяДатаОтгрузки;
		ЗначенияРеквизитов.НеОтгружатьЧастями   = РедактированиеЭтапов.НеОтгружатьЧастями;
		
		ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
			ЭтаФорма,
			ЗначенияРеквизитов,
			ВыбранноеЗначение,
			"ОбработкаВыбораПодборНаКлиентеПослеВопросаРедактированиеЭтаповОбеспечениеМатериаламиИРаботами",
			РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Количество() > 0);
			
	Иначе
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопросаМатериалы(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопросаРедактированиеЭтаповОбеспечениеМатериаламиИРаботами(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактированиеЭтапов.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры, "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		
		СтруктураДействийСДобавленнымиСтроками = Новый Структура;
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", Объект.ВидЦены));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма)));
			
		ДобавитьДействиеПроверитьЗаполнитьСклад(ИмяТабличнойЧасти, ЭтаФорма, СтруктураДействийСДобавленнымиСтроками);
			
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, Неопределено, СтруктураДействийСДобавленнымиСтроками);
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействийСДобавленнымиСтроками);
		
		СтруктураДействийСИзмененнымиСтроками = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, Неопределено, СтруктураДействийСИзмененнымиСтроками);
		
		СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
		СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
		СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
		СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
		СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
		СтруктураДействий.ИмяТЧ                                  = ИмяТабличнойЧасти;
		СтруктураДействий.ИзменятьКоличество                     = Истина;
		СтруктураДействий.ТолькоТовары                           = Истина;
		
		ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ДатаОтгрузкиОбязательна);
		ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения, ЭтаФорма);
		
		Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
			
			ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
			ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры", 0.1, Истина);
			
		КонецЕсли;
		
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
		
		Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
			Элементы.Материалы.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
		КонецЕсли;
		
	Иначе // Продукция и возвратные отходы
		
		СтруктураДействийСДобавленнымиСтроками = Новый Структура;
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", Объект.ВидЦены));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействийСДобавленнымиСтроками);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, Неопределено, СтруктураДействийСДобавленнымиСтроками);
		ДобавитьДействиеПроверитьЗаполнитьСклад(ИмяТабличнойЧасти, ЭтаФорма, СтруктураДействийСДобавленнымиСтроками);
		
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействийСДобавленнымиСтроками);
		
		СтруктураДействийСИзмененнымиСтроками = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, Неопределено, СтруктураДействийСИзмененнымиСтроками);
		
		СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
		СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
		СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
		СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
		СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
		СтруктураДействий.ИмяТЧ                                  = ИмяТабличнойЧасти;
		СтруктураДействий.ИзменятьКоличество                     = Истина;
		СтруктураДействий.ТолькоТовары                           = Истина;
		
		ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
		ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
		
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
		
		Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
			Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения) 
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
	Если СтруктураПараметровДействия.ИмяТЧ = "Продукция" Или СтруктураПараметровДействия.ИмяТЧ = "ВозвратныеОтходы" Тогда
		ПриИзмененииСкладаВТабличнойЧастиСервер(СтруктураПараметровДействия.ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Материалы.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерий() 
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказПереработчику));
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалы Тогда
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалы();
		
		Если ПараметрыФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ВыборСерии", Истина);
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспеченияМатериалы", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалыЭтапов Тогда
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалыЭтапов();
		
		Если ПараметрыФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ВыборСерии", Истина);
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспеченияМатериалыЭтапов", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ОткрытьПодборСерийЭтапа(ИмяТЧ, Текст = "", ТекущиеДанные = Неопределено)
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалыЭтапов();
		
		Если ПараметрыФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ВыборСерии", Истина);
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,,,,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспеченияМатериалыЭтапов", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	НуженСерверныйВызов = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
		ЭтаФорма,
		ПараметрыУказанияСерийРедактированиеЭтапов[ИмяТЧ],
		Текст,
		ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область Обеспечение

//++ НЕ УТКА

&НаСервере
Процедура ВставитьНазначениеДляПереработкиПоЗаказу(Знач ПутиКДанным, Знач НомерГруппыЗатрат)

	Если НЕ Объект.ПереработкаПоЗаказу ИЛИ НомерГруппыЗатрат = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", НомерГруппыЗатрат);
 	СтрокаУслуга = Объект.Услуги.НайтиСтроки(СтруктураПоиска)[0];
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Распоряжение", СтрокаУслуга.Распоряжение);
	Запрос.УстановитьПараметр("КодСтроки", СтрокаУслуга.КодСтрокиПродукция);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НазначенияДавальца.Ссылка, ПродукцияЗаказа.Ссылка.Назначение) КАК Назначение
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Продукция КАК ПродукцияЗаказа
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК НазначенияДавальца
		|	ПО ПродукцияЗаказа.Назначение = НазначенияДавальца.Ссылка
		|	И ТИПЗНАЧЕНИЯ(НазначенияДавальца.Заказ) = ТИП(Документ.ЗаказДавальца)
		|ГДЕ
		|	ПродукцияЗаказа.Ссылка = &Распоряжение
		|	И ПродукцияЗаказа.КодСтроки = &КодСтроки";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Назначение) Тогда
		ПутиКДанным.Вставить("Данные", Новый Структура("Назначение", Выборка.Назначение));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспеченияЭтапа()

	ТекущаяСтрока = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущаяСтрока;
	Результат = УправлениеПроизводством.ПараметрыВыбораОбеспечения(РедактированиеЭтапов, ТекущаяСтрока);
	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
	
	Возврат Результат

КонецФункции

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыборВариантОбеспечения(ТекущиеДанные)

	Если НЕ УправлениеПроизводствомКлиент.ИспользуетсяВариантОбеспечения(ТекущиеДанные) 
		ИЛИ НЕ ЗаблокироватьЭтапы() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда 
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерийМатериалыЭтапов();
				
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму(
						"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
						ПараметрыФормы,
						ЭтаФорма,
						,
						,
						,
						Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспеченияМатериалыЭтапов", ЭтотОбъект),
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					КонецЕсли;
					
	Иначе
					
		ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
										"ОбеспечениеМатериаламиИРаботами", 
										НСтр("ru = 'Обеспечение'"));
		
		ПараметрыПроверки.Поля.Вставить("Склад", "РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами[%1].Склад");
		ПараметрыПроверки.Тексты.Вставить("Склад", НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Сырье и материалы""'"));
			
		ПараметрыПроверки.Поля.Удалить("Подразделение");
		
		НетОшибок = ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
						РедактированиеЭтапов, 
						РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, 
						Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущаяСтрока, 
						ПараметрыПроверки);
								
		Если НетОшибок Тогда
			
			ПараметрыФормы = ПараметрыВыбораОбеспеченияЭтапа();
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
			Иначе
				Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
								ПараметрыФормы, 
								"ОбеспечениеМатериаламиИРаботами",
								НСтр("ru = 'Обеспечение'"));
								ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерийМатериалыЭтапов()
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
										"ОбеспечениеМатериаламиИРаботами", 
										НСтр("ru = 'Обеспечение'"));
		
	ПараметрыПроверки.Поля.Вставить("Склад", "РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами[%1].Склад");
	ПараметрыПроверки.Тексты.Вставить("Склад", НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Сырье и материалы""'"));
		
	ПараметрыПроверки.Поля.Удалить("Подразделение");
	
	НетОшибок = ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
					РедактированиеЭтапов, 
					РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, 
					Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущаяСтрока, 
					ПараметрыПроверки);
	
	Если Не НетОшибок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспеченияЭтапа(); // получен, в том числе, параметр "АдресТаблицыПодобраноРанее".
	
	Если Не ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "ОбеспечениеМатериаламиИРаботами",
						НСтр("ru = 'Обеспечение'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПодборТоваров", Ложь);
	ТекущаяСтрока = Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Дата",                              Объект.Дата);
	ПараметрыФормы.Вставить("Склад",                             Неопределено);
	ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("Упаковка",                          ТекущаяСтрока.Упаковка);
	
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	
	// Остальные параметры получены при вызове ПараметрыВыбораОбеспечения()
	ПараметрыФормы.Вставить("Назначение",                        ПараметрыФормы.Отбор.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                     ПараметрыФормы.Отбор.Подразделение);
	
	ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыФормы.Отбор.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",                    ПараметрыФормы.Отбор.Характеристика);
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыФормы.Отбор.ТипНоменклатуры);
	
	ПараметрыФормы.Вставить("СкладВТЧ",                          ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ВариантОбеспечения",                ПараметрыФормы.ТекущийВариант.ВариантОбеспечения);
	ПараметрыФормы.Вставить("Количество",                        ПараметрыФормы.ТекущийВариант.Количество);
	ПараметрыФормы.Вставить("Серия",                             ТекущаяСтрока.Серия);

	Возврат ПараметрыФормы
	
КонецФункции

//-- НЕ УТКА

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерийМатериалы()
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("Материалы",
		НСтр("ru = 'Сырье и материалы для производства'"));
	ПараметрыПроверки.Поля.Склад   = "Объект.Материалы[%1].Склад";
	Текст = НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Сырье и материалы для производства""'");

	Если Не ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
				Объект, Объект.Материалы, Элементы.Материалы.ТекущаяСтрока, ПараметрыПроверки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(); // получен, в том числе, параметр "АдресТаблицыПодобраноРанее".
	
	Если Не ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Материалы",
						НСтр("ru = 'Сырье и материалы для производства'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПодборТоваров", Ложь);
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Дата",                              Объект.Дата);
	ПараметрыФормы.Вставить("Склад",                             Неопределено);
	ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("Упаковка",                          ТекущаяСтрока.Упаковка);
	
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	
	// Остальные параметры получены при вызове ПараметрыВыбораОбеспечения()
	ПараметрыФормы.Вставить("Назначение",                        ПараметрыФормы.Отбор.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                     ПараметрыФормы.Отбор.Подразделение);
	
	ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыФормы.Отбор.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",                    ПараметрыФормы.Отбор.Характеристика);
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыФормы.Отбор.ТипНоменклатуры);
	
	ПараметрыФормы.Вставить("СкладВТЧ",                          ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ВариантОбеспечения",                ПараметрыФормы.ТекущийВариант.ВариантОбеспечения);
	ПараметрыФормы.Вставить("Количество",                        ПараметрыФормы.ТекущийВариант.Количество);
	ПараметрыФормы.Вставить("Серия",                             ТекущаяСтрока.Серия);

	Возврат ПараметрыФормы
	
КонецФункции

&НаСервере
Функция ТаблицаРаспоряжениеСпецификацияДляОбеспечения(Отбор = Неопределено)

	ТаблицаРаспоряжениеСпецификация = ОбеспечениеСервер.ТаблицаПотребностей();
	Если Объект.ПереработкаПоЗаказу Тогда

		Для Каждого СтрокаТаблицы Из Объект.РаспоряжениеСпецификация Цикл

			Если СтрокаТаблицы.КоличествоПоЗаказу <> 0
				И (ТипЗнч(СтрокаТаблицы.Склад) = Тип("СправочникСсылка.Склады")
					Или ТипЗнч(СтрокаТаблицы.Склад) <> Тип("СправочникСсылка.Склады")
						И СтрокаТаблицы.ВариантыОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно) Тогда

				Если СтрокаТаблицы.ТипДвиженияЗапасов = Перечисления.ТипыДвиженияЗапасов.Отгрузка Тогда

					Если СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется
						Или Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован
							И (СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется
								Или СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно) Тогда

						Продолжить;

					Иначе

						НоваяСтрока = ТаблицаРаспоряжениеСпецификация.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "НомерСтроки");
						НоваяСтрока.Количество = - СтрокаТаблицы.КоличествоПоЗаказу;

					КонецЕсли;

				Иначе

					Если Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован
						Или Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению Тогда

						Продолжить;

					Иначе

						НоваяСтрока = ТаблицаРаспоряжениеСпецификация.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "НомерСтроки");
						НоваяСтрока.ВариантОбеспечения = ?(ЗначениеЗаполнено(НоваяСтрока.Назначение),
							Перечисления.ВариантыОбеспечения.Обособленно,
							Перечисления.ВариантыОбеспечения.ИзЗаказов);
						НоваяСтрока.Назначение = Объект.Назначение;
						НоваяСтрока.Количество = СтрокаТаблицы.КоличествоПоЗаказу;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		МассивНоменклатуры = ТаблицаРаспоряжениеСпецификация.Скопировать(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
		ТипыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры, "ТипНоменклатуры");

		Для Каждого СтрокаТовары Из ТаблицаРаспоряжениеСпецификация Цикл
			СтрокаТовары.ТипНоменклатуры = ТипыНоменклатуры.Получить(СтрокаТовары.Номенклатура).ТипНоменклатуры;
		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаРаспоряжениеСпецификация;

КонецФункции

&НаСервере
Функция ПараметрыВыбораОбеспечения()

	Материал = Объект.Материалы.НайтиПоИдентификатору(Элементы.Материалы.ТекущаяСтрока);
	
	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");
	//++ НЕ УТКА
	ВставитьНазначениеДляПереработкиПоЗаказу(ПутиКДанным, Материал.НомерГруппыЗатрат);
	//-- НЕ УТКА

	Отбор = Новый Структура("Номенклатура, Характеристика", Материал.Номенклатура, Материал.Характеристика);
	Таблица = ТаблицаРаспоряжениеСпецификацияДляОбеспечения(Отбор);
	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, МенеджерРегистра, ТаблицаДляПроведения",
		Объект.Статус <> Перечисления.СтатусыЗаказовПереработчикам.НеСогласован, РегистрыНакопления.ЗаказыКлиентов, Таблица);

	Результат = ОбеспечениеСервер.ПараметрыВыбораОбеспечения(
		Элементы.Материалы.ТекущаяСтрока,
		Объект,
		Объект.Материалы,
		ПутиКДанным,
		ПараметрыЗаполнения);

	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляОбеспеченияЗаказа()

	РеквизитыЗаказа = Новый Структура("ЖелаемаяДатаОтгрузки, Ссылка, НеОтгружатьЧастями, Статус, Дата, Партнер, Менеджер");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Объект);

	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		//++ НЕ УТКА
		ПутиКДанным = УправлениеПроизводством.ПутиКДаннымДляОбеспечения(Истина);
		
		ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(
							РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, РедактированиеЭтапов, ПутиКДанным);
		//-- НЕ УТКА
	Иначе
		
		ПутиКДанным = Новый Соответствие;
		ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");
		
		ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(
							Объект.Материалы, Объект, ПутиКДанным);
							
	КонецЕсли;
	АдресТаблицыТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары);

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ИмяМенеджераРегистра",
		Объект.Статус <> Перечисления.СтатусыЗаказовПереработчикам.НеСогласован, "ЗаказыКлиентов");

	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыСостояниеОбеспеченияЗаказов();
	ПараметрыФормы.ВызовИзФормыЗаказа          = Истина;
	ПараметрыФормы.РеквизитыЗаказа             = РеквизитыЗаказа;
	ПараметрыФормы.АдресТаблицыТовары          = АдресТаблицыТовары;
	ПараметрыФормы.ПараметрыВыполненияДействий = ПараметрыЗаполнения;

	//++ НЕ УТКА
	// При переработке по этапам необхоимо сторнировать движения не самого заказа переработчику а этапов.
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		ПараметрыФормы.СторнируемыеДокументы = СписокЗаказов.Скопировать();
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспеченияМатериалы(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	ЗначенияРеквизитов.ДатаОтгрузки         = Объект.ДатаОтгрузки;
	ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
	ЗначенияРеквизитов.НеОтгружатьЧастями   = Объект.НеОтгружатьЧастями;
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияПослеВопросаМатериалы",
		Объект.Материалы.Количество() > 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияПослеВопросаМатериалы(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	Оповещение = ЗаполнитьВариантОбеспечения(ДополнительныеПараметры.ПодобранныеТовары);
	ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспеченияМатериалыЭтапов(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	ЗначенияРеквизитов.ДатаОтгрузки         = РедактированиеЭтапов.ДатаОтгрузки;
	ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = РедактированиеЭтапов.ЖелаемаяДатаОтгрузки;
	ЗначенияРеквизитов.НеОтгружатьЧастями   = РедактированиеЭтапов.НеОтгружатьЧастями;
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияПослеВопросаМатериалыЭтапов",
		РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Количество() > 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияПослеВопросаМатериалыЭтапов(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактированиеЭтапов.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	Оповещение = ЗаполнитьВариантОбеспечения(ДополнительныеПараметры.ПодобранныеТовары);
	ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)

	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		//++ НЕ УТКА
		Для Каждого Элемент Из ВыбранноеЗначение Цикл
			Элемент.Вставить("Идентификатор", Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
		КонецЦикла;
		
		СтатусИсходный = Объект.Статус;
		ТекстОповещения = УправлениеПроизводством.ЗаполнитьВариантОбеспеченияЭтапа(
								РедактированиеЭтапов, 
								ЭтаФорма, 
								"СтрокаТовары", 
								ВыбранноеЗначение, 
								ПараметрыУказанияСерийРедактированиеЭтапов);
								
		Если СтатусИсходный <> Объект.Статус Тогда
			ПриИзмененииСтатусаСервер();
		КонецЕсли;
		
		//-- НЕ УТКА
	Иначе
		
		Для Каждого Элемент Из ВыбранноеЗначение Цикл
			Элемент.Вставить("Идентификатор", Элементы.Материалы.ТекущаяСтрока);
		КонецЦикла;

		ТекстОповещения = Документы.ЗаказПереработчику.ЗаполнитьВариантОбеспечения(
								Объект, 
								ЭтаФорма, 
								"СтрокаТовары", 
								ВыбранноеЗначение, 
								ПараметрыУказанияСерий, 
								ЗависимыеРеквизитыМатериалы());
	КонецЕсли; 

	ЗаполнитьСлужебныеРеквизиты();
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);

	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение)
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		
		//++ НЕ УТКА
		
		// Описание особенностей формы - дату отгрузки работ необходимо брать из поля "Дата отгрузки".
		ПутиКДанным = УправлениеПроизводством.ПутиКДаннымДляОбеспечения(Истина);
		ПутиКДанным.Вставить("Ссылка", "Распоряжение");
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыКлиентов);
		ПараметрыДокумента.Вставить("СтатусКВыполнению", Объект.Статус <> Перечисления.СтатусыЗаказовПереработчикам.НеСогласован);
		ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
		
		Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
			Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки,
			Новый Структура("Ссылка", Объект.Услуги.Выгрузить(, "Распоряжение").ВыгрузитьКолонку("Распоряжение")),
			РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами,
			ПараметрыЗаполнения,
			ПараметрыДокумента);


		Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
			Возврат Новый Структура(
				"Ошибки",
				ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
					Таблица, "ОбеспечениеМатериаламиИРаботами", НСтр("ru = ''Сырье и материалы'")));
		КонецЕсли;
		
		ТекстОповещения = Обработки.РедактированиеЭтаповПроизводства.ЗаполнитьВариантОбеспечения(
			РедактированиеЭтапов, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыУказанияСерийРедактированиеЭтапов);
		//-- НЕ УТКА
		
	Иначе
		
		Таблица = ТаблицаРаспоряжениеСпецификацияДляОбеспечения();
		ПутиКДанным = Новый Соответствие;
		ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыКлиентов);
		ПараметрыДокумента.Вставить("СтатусКВыполнению", (Объект.Статус <> Перечисления.СтатусыЗаказовПереработчикам.НеСогласован));
		ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
		ПараметрыДокумента.Вставить("ТаблицаДляПроведения", Таблица);
		
		Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
			Элементы.Материалы.ВыделенныеСтроки,
			Объект,
			Объект.Материалы,
			ПараметрыЗаполнения,
			ПараметрыДокумента);


		Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
			Возврат Новый Структура("Ошибки", ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
				Таблица, "Материалы", НСтр("ru = 'Сырье и материалы'")));
		КонецЕсли;
		ТекстОповещения = Документы.ЗаказПереработчику.ЗаполнитьВариантОбеспечения(
			Объект, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыУказанияСерий, ЗависимыеРеквизитыМатериалы());
	
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);

	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);
	
КонецФункции


&НаСервере
Функция ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение)

	Если ВыбранноеЗначение.ОтгружатьЧастями Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;

	ТаблицаОбеспечения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		//++ НЕ УТКА
		СтатусИсходный = Объект.Статус;
		
		ТекстОповещения = Обработки.РедактированиеЭтаповПроизводства.ЗаполнитьВариантОбеспечения(
								РедактированиеЭтапов, 
								ЭтаФорма, 
								"Заказ", 
								ТаблицаОбеспечения, 
								ПараметрыУказанияСерийРедактированиеЭтапов);
			
		Если СтатусИсходный <> Объект.Статус Тогда
			ПриИзмененииСтатусаСервер();
		КонецЕсли;
		//-- НЕ УТКА
	Иначе	
		
		ТекстОповещения = Документы.ЗаказПереработчику.ЗаполнитьВариантОбеспечения(
							Объект, 
							ЭтаФорма, 
							"Заказ", 
							ТаблицаОбеспечения, 
							ПараметрыУказанияСерий, 
							ЗависимыеРеквизитыМатериалы());
			
	КонецЕсли; 

	ЗаполнитьСлужебныеРеквизиты();
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);

	Возврат ТекстОповещения;

КонецФункции

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	ЕстьТоварыКОбособленномуОбеспечению = ЕстьТоварыКОбособленномуОбеспечению();
	
	Если ЕстьТоварыКОбособленномуОбеспечению И Объект.Проведен И Не Модифицированность Тогда
		
		// Если документ записан впервые, в ОбъектыОснований находится пустая ссылка, нужно актуализировать
		ОбъектыОснований = Новый Массив();
		ОбъектыОснований.Добавить(Объект.Ссылка);
		
		ДополнительныеПараметры.ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
		
		Если ДополнительныеПараметры.Резервирование Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерРезервирования(ДополнительныеПараметры.ОписаниеКоманды);
		Иначе
			ВводНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ДополнительныеПараметры.ОписаниеКоманды);
		КонецЕсли;
		
	ИначеЕсли Не ЕстьТоварыКОбособленномуОбеспечению И Объект.Проведен Тогда
		ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступноОбеспечение(Форма)

	Возврат Форма.Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.НеСогласован");

КонецФункции

#КонецОбласти

#Область ДатыОтгрузки

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузки(ИмяТЧ)

	МассивВыделенныхСтрок = Элементы[ИмяТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() > 0 Тогда
		ДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		
		ДопПараметры = Новый Структура("МассивВыделенныхСтрок,ИмяТЧ", МассивВыделенныхСтрок, ИмяТЧ);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуОтгрузкиЗавершение", ЭтотОбъект, ДопПараметры);
		
		ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаОтгрузки, НСтр("ru='Введите дату отгрузки'"), ЧастиДаты.Дата, Оповещение);
		
	Иначе
		ТекстПредупреждения = НСтр("ru='В документе не выбраны строки для заполнения. Дата отгрузки не будет заполнена.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаОтгрузки = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		
		ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, ДополнительныеПараметры.ИмяТЧ, МассивВыделенныхСтрок);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, Истина);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, ИмяТЧ, МассивВыделенныхСтрок = Неопределено)

	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	
	ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(
		ТабличнаяЧасть, 
		"ДатаОтгрузки", 
		ДатаОтгрузки, 
		МассивВыделенныхСтрок);

КонецПроцедуры

&НаСервере
Процедура НеОтгружатьЧастямиПриИзмененииСервер()

	Если Объект.НеОтгружатьЧастями Тогда
		Объект.ДатаОтгрузки = ОбеспечениеСервер.МаксимальноеЗначениеВКоллекции(Объект.Материалы, "ДатаОтгрузки", '00010101');
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Материалы, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;

	УстановитьВидимостьЭлементовФормыДатОтгрузки();

КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область ЗаказНаПроизводство

&НаСервере
Процедура ЗаполнитьЗапланированноеКоличествоЭтапов()

	Если НЕ Объект.ПереработкаПоЗаказу Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУслуги.Распоряжение КАК Распоряжение,
	|	ТаблицаУслуги.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	&ТаблицаУслуги КАК ТаблицаУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Распоряжение КАК Распоряжение,
	|	ТаблицаУслуги.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Количество КАК Количество
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТаблицаУслуги.Распоряжение)
	|			И (ТаблицаЭтапыГрафик.КодСтроки = ТаблицаУслуги.КодСтрокиЭтапыГрафик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЭтапыГрафик.ЗаказНаПроизводство КАК Распоряжение,
	|	ТаблицаЭтапыГрафик.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Номенклатура КАК Номенклатура,
	|	ТаблицаЭтапыГрафик.Характеристика КАК Характеристика,
	|	ТаблицаЭтапыГрафик.КЗаказуПриход КАК Количество
	|ИЗ
	|	РегистрНакопления.ПереработкаПоГрафикуПроизводства.Обороты(
	|			,
	|			,
	|			,
	|			(ЗаказНаПроизводство, КодСтрокиЭтапыГрафик) В
	|				(ВЫБРАТЬ
	|					ТаблицаУслуги.Распоряжение,
	|					ТаблицаУслуги.КодСтрокиЭтапыГрафик
	|				ИЗ
	|					ТаблицаУслуги)) КАК ТаблицаЭтапыГрафик";
	
	ТаблицаУслуги = Объект.Услуги.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаУслуги", ТаблицаУслуги);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	ЭтапыЗаказа = Результат[2].Выгрузить();
	ПродукцияЗаказа = Результат[2].Выгрузить();
	
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		
		Запланировано = 0;
		
		СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаУслуга);
  		СписокСтрок = ЭтапыЗаказа.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаУслуга);
   			НормативнаяПродукция = ПродукцияЗаказа.Скопировать(СтруктураПоиска);
			
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
			ФактическаяПродукция = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
			
			КоэффициентНормативов = Документы.ЗаказПереработчику.КоэффициентНормативов(
											ФактическаяПродукция, 
											НормативнаяПродукция, 
											Ложь);
											
			Запланировано = СписокСтрок[0].Количество * КоэффициентНормативов;
		КонецЕсли; 
		
		СтрокаУслуга.Запланировано = Запланировано;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	Если НЕ Объект.ПереработкаПоЗаказу Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	СписокЗаказов.Очистить();
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ГруппаЗатрат) Тогда
			ПараметрыГруппыЗатрат = Новый Структура("НомерГруппыЗатрат,Распоряжение,Спецификация");
			ЗаполнитьЗначенияСвойств(ПараметрыГруппыЗатрат, ТекСтрока);
			ПредставлениеРаспоряжения = ПереработкаНаСтороне.ПредставлениеГруппыЗатрат(
											ПараметрыГруппыЗатрат, 
											Объект.ГруппировкаЗатрат, 
											Объект.Продукция,
											ИмяПоляГруппаЗатрат);
		Иначе
			ПредставлениеРаспоряжения = ТекСтрока.ГруппаЗатрат;
		КонецЕсли; 
		
		СписокЗаказов.Добавить(ТекСтрока.Распоряжение, ПредставлениеРаспоряжения);
	КонецЦикла;
	
	МассивСтрок = Новый Массив;
	
	Если СписокЗаказов.Количество() = 0 Тогда
		
		Если НЕ Объект.ПометкаУдаления И НЕ ТолькоПросмотр Тогда
			Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
				ШаблонНадписи = НСтр("ru = 'Добавить заказы'");
			Иначе
				ШаблонНадписи = НСтр("ru = 'Добавить этапы'");
			КонецЕсли;
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ШаблонНадписи,,,, "#ДобавитьРаспоряжения"));
		КонецЕсли;
		
	ИначеЕсли СписокЗаказов.Количество() = 1 Тогда
		
		ШаблонНадписи = НСтр("ru = 'Основание:'");
		МассивСтрок.Добавить(ШаблонНадписи);
		МассивСтрок.Добавить(" ");
		
		ТекстРаспоряжение = Новый ФорматированнаяСтрока(СписокЗаказов[0].Представление,,,, ПолучитьНавигационнуюСсылку(СписокЗаказов[0].Значение));
		МассивСтрок.Добавить(ТекстРаспоряжение);
		
		МассивСтрок.Добавить(" ");
		ШаблонНадписи = НСтр("ru = 'изменить'");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ШаблонНадписи,,,, "#ДобавитьРаспоряжения"));
		
	Иначе
		
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
			ШаблонНадписи = НСтр("ru = 'Всего заказов: %1'");
		Иначе
			ШаблонНадписи = НСтр("ru = 'Всего этапов: %1'");
		КонецЕсли;
			
		ТекстРаспоряжение = СтрШаблон(ШаблонНадписи, Формат(СписокЗаказов.Количество(), "ЧГ=0"));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстРаспоряжение,,,, "#ДобавитьРаспоряжения"));
		
	КонецЕсли;
	
	НадписьЗаголовокЗаказы = Новый ФорматированнаяСтрока(МассивСтрок);
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		НесколькоЭтапов = (СписокЗаказов.Количество() > 1);
		Элементы.РедактированиеЭтаповВыходныеИзделияГруппаЗатрат.Видимость = НесколькоЭтапов;
		Элементы.РедактированиеЭтаповПобочныеИзделияГруппаЗатрат.Видимость = НесколькоЭтапов;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатрат.Видимость = НесколькоЭтапов;
		Элементы.УслугиГруппаЗатрат.Видимость = НесколькоЭтапов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеЭтапаПроизводства

&НаКлиенте
Функция ЗаблокироватьЭтапы(Отказ = Неопределено)

	Если ЭтапыЗаблокированы Тогда
		Возврат Истина;
	КонецЕсли; 
	
	СписокЭтапов = Новый Массив;
	Для каждого ЭлементКоллекции Из РедактированиеЭтапов.Этапы Цикл
		СписокЭтапов.Добавить(Новый Структура("Ссылка,ВерсияДанных", ЭлементКоллекции.Распоряжение, ЭлементКоллекции.ВерсияДанных));
	КонецЦикла; 
	
	ТекстПредупреждения = ЗаблокироватьЭтапыНаСервере(СписокЭтапов, УникальныйИдентификатор);
	Если ТекстПредупреждения <> Неопределено Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли; 
	
	ЭтапыЗаблокированы = Истина;
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаблокироватьЭтапыНаСервере(Знач СписокЭтапов, Знач ИдентификаторФормы)

	Для каждого ПараметрыЭтапа Из СписокЭтапов Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ПараметрыЭтапа.Ссылка, ПараметрыЭтапа.ВерсияДанных, ИдентификаторФормы);
		Исключение
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстПредупреждения = НСтр("ru = 'Не удалось заблокировать объект %1, по причине:
												|%2'");
			Возврат СтрШаблон(ТекстПредупреждения, ПараметрыЭтапа.Ссылка, КраткоеПредставлениеОшибки);
		КонецПопытки; 
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура РазблокироватьЭтапыНаСервере()

	Если НЕ ЭтапыЗаблокированы Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ПараметрыЭтапа Из РедактированиеЭтапов.Этапы Цикл
		РазблокироватьДанныеДляРедактирования(ПараметрыЭтапа.Распоряжение, УникальныйИдентификатор);
	КонецЦикла; 
	
	ЭтапыЗаблокированы = Ложь;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРедактированиеЭтапов(СписокНовыхУслуг = Неопределено)

	Если Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		Возврат;
	КонецЕсли;

	Обработки.РедактированиеЭтаповПроизводства.ДобавитьДанныеЭтапов(
			РедактированиеЭтапов,
			Объект.Услуги.Выгрузить(СписокНовыхУслуг, "Распоряжение").ВыгрузитьКолонку("Распоряжение"));
			
	// Заполнение номера группы затрат
	НомераГруппЗатрат = Новый Соответствие;
	КоллекцияУслуг = ?(СписокНовыхУслуг <> Неопределено, СписокНовыхУслуг, Объект.Услуги);
	Для каждого СтрокаУслуга Из КоллекцияУслуг Цикл
		НомераГруппЗатрат.Вставить(СтрокаУслуга.Распоряжение, СтрокаУслуга.НомерГруппыЗатрат);
	КонецЦикла;
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("РедактированиеЭтаповВыходныеИзделия");
	СписокТЧ.Добавить("РедактированиеЭтаповПобочныеИзделия");
	СписокТЧ.Добавить("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	СписокТЧ.Добавить("РедактированиеЭтаповЭтапы");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
		Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			НомерГруппыЗатрат = НомераГруппЗатрат.Получить(ДанныеСтроки.Распоряжение);
			Если НомерГруппыЗатрат <> Неопределено Тогда
				ДанныеСтроки.НомерГруппыЗатрат = НомерГруппыЗатрат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	РедактированиеЭтапов.НеОтгружатьЧастями = Объект.НеОтгружатьЧастями;
	РедактированиеЭтапов.ДатаОтгрузки = Объект.ДатаОтгрузки;
	РедактированиеЭтапов.ПроизводствоОднойДатой = Объект.ПоступлениеОднойДатой;
	РедактированиеЭтапов.ДатаПроизводства = Объект.ДатаПоступления;
	РедактированиеЭтапов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
	
	Если Объект.НеОтгружатьЧастями Тогда
		ЗаполнитьДатуВТЧ("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами", "ДатаОтгрузки", РедактированиеЭтапов.ДатаОтгрузки);
	КонецЕсли;
	Если Объект.ПоступлениеОднойДатой Тогда
		ЗаполнитьДатуВТЧ("РедактированиеЭтаповВыходныеИзделия", "ДатаПроизводства", РедактированиеЭтапов.ДатаПроизводства);
		ЗаполнитьДатуВТЧ("РедактированиеЭтаповПобочныеИзделия", "ДатаПроизводства", РедактированиеЭтапов.ДатаПроизводства);
		ЗаполнитьДатуВТЧ("РедактированиеЭтаповЭтапы", "ДатаПроизводства", РедактированиеЭтапов.ДатаПроизводства);
	КонецЕсли;
	ЗаполнитьДатуВТЧ("РедактированиеЭтаповЭтапы", "ЖелаемаяДатаОбеспечения", РедактированиеЭтапов.ЖелаемаяДатаОтгрузки);
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("РедактированиеЭтаповВыходныеИзделия");
	СписокТЧ.Добавить("РедактированиеЭтаповПобочныеИзделия");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
		УправлениеПроизводством.ЗаполнитьНазначениеРедактированиеВТЧ(ТабличнаяЧасть);
	КонецЦикла;
	
	Если Объект.ПометкаУдаления Тогда
		Элементы.РедактированиеЭтаповВыходныеИзделия.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповПобочныеИзделия.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповПроизводствоОднойДатой.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповДатаПроизводства.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповНеОтгружатьЧастями.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповДатаОтгрузки.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтапов_Продукция_РазбитьСтроку.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Отходы_РазбитьСтроку.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ВставитьСтроки.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_РазбитьСтроку.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ПодобратьТовары.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьДатуОтгрузки.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьГруппуЗатрат.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьОбеспечение.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_ВставитьСтрокиКонтекстноеМеню.Доступность = Ложь;
		Элементы.РедактированиеЭтапов_Обеспечение_РазбитьСтрокуКонтекстноеМеню.Доступность = Ложь;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтаФорма, "Этапы,НеОтгружатьЧастями,ПроизводствоОднойДатой");
	
КонецПроцедуры
 
&НаСервере 
Процедура ЗаполнитьДатыПроизводстваЭтапаСервер(ДатаПроизводства) 
	
	ЗаполнитьДатуВТЧ("РедактированиеЭтаповВыходныеИзделия", "ДатаПроизводства", ДатаПроизводства);
	ЗаполнитьДатуВТЧ("РедактированиеЭтаповПобочныеИзделия", "ДатаПроизводства", ДатаПроизводства);
	ЗаполнитьДатуВТЧ("РедактированиеЭтаповЭтапы",           "ДатаПроизводства", ДатаПроизводства);
	
КонецПроцедуры

&НаСервере
Процедура ПроизводствоОднойДатойПриИзмененииНаСервере()

	Объект.ПоступлениеОднойДатой = РедактированиеЭтапов.ПроизводствоОднойДатой;
	
	Если РедактированиеЭтапов.ПроизводствоОднойДатой Тогда
		РедактированиеЭтапов.ДатаПроизводства = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(РедактированиеЭтапов.ВыходныеИзделия, "ДатаПроизводства"), 
										Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(РедактированиеЭтапов.ПобочныеИзделия, "ДатаПроизводства"));
	КонецЕсли; 

	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтаФорма, "ПроизводствоОднойДатой");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные)
	
	Если РедактированиеЭтапов.ПроизводствоОднойДатой Тогда
		
		ТекущиеДанные.ДатаПроизводства = РедактированиеЭтапов.ДатаПроизводства;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеОтгружатьЧастямиПриИзмененииНаСервере()

	Объект.НеОтгружатьЧастями = РедактированиеЭтапов.НеОтгружатьЧастями;
	
	Если РедактированиеЭтапов.НеОтгружатьЧастями Тогда
		РедактированиеЭтапов.ДатаОтгрузки = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
									РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами, "ДатаОтгрузки");
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормыЭтапа(ЭтаФорма, "НеОтгружатьЧастями");

КонецПроцедуры

// Процедура вызывается при изменении реквизитов от которых зависят свойства других реквизитов, например, видимость.
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормыЭтапа(Форма, СписокРеквизитов = "")
	
	Объект = Форма.РедактированиеЭтапов;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("НеОтгружатьЧастями")
		ИЛИ Инициализация Тогда
		
		Элементы.РедактированиеЭтаповДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
		Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьДатуОтгрузки.Доступность = НЕ Объект.НеОтгружатьЧастями;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПроизводствоОднойДатой")
		ИЛИ Инициализация Тогда
		
		Элементы.РедактированиеЭтаповДатаПроизводства.Видимость = Объект.ПроизводствоОднойДатой;
		Элементы.РедактированиеЭтаповВыходныеИзделияДатаПроизводства.Видимость = НЕ Объект.ПроизводствоОднойДатой;
		Элементы.РедактированиеЭтаповПобочныеИзделияДатаПроизводства.Видимость = НЕ Объект.ПроизводствоОднойДатой;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Этапы")
		ИЛИ Инициализация Тогда
		Элементы.РедактированиеЭтаповВыходныеИзделия.Видимость = Объект.ЕстьВыпускающийЭтап;
		Элементы.РедактированиеЭтапов_Обеспечение_ПодобратьТовары.Доступность = (Объект.Этапы.Количество() <> 0);
		
		Если Объект.ЕстьВыпускающийЭтап Тогда
			Элементы.ГруппаРедактированиеЭтаповПобочныеИзделия.ОтображатьЗаголовок = Истина;
			Элементы.ГруппаРедактированиеЭтаповПобочныеИзделия.Заголовок =
				?(Объект.ПобочныеИзделия.Количество() = 0,
				НСтр("ru='Побочный и промежуточный выпуск по фиксированной стоимости'"),
				СтрШаблон(НСтр("ru='Побочный и промежуточный выпуск по фиксированной стоимости (%1)'"), Объект.ПобочныеИзделия.Количество()));
		Иначе
			Элементы.ГруппаРедактированиеЭтаповПобочныеИзделия.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧЭтапа(ИмяТЧ)
	
	Если Элементы[ИмяТЧ].ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧЭтапаЗавершение", ЭтотОбъект, ИмяТЧ);
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма), 
		Элементы[ИмяТЧ], 
		Оповещение, 
		ПараметрыРазбиенияСтроки);

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧЭтапаЗавершение(НоваяСтрока, ИмяТЧ) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока.КодСтроки = 0;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			ТекущиеДанные, 
			ИмяТЧ, 
			СтруктураДействий);
			
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьГруппуЗатратВНовойСтроке(ТекущиеДанные, Форма)
	
	Если Форма.Объект.Услуги.Количество() <> 0 Тогда
		ТекущиеДанные.НомерГруппыЗатрат = Форма.Объект.Услуги[0].НомерГруппыЗатрат;
		ТекущиеДанные.ГруппаЗатрат = Форма.Объект.Услуги[0].ГруппаЗатрат;
		ТекущиеДанные.Распоряжение = Форма.Объект.Услуги[0].Распоряжение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеРедактированиеНачалоВыбора(ТекущиеДанные, ИмяТЧ)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы["РедактированиеЭтапов"+ИмяТЧ].ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НазначениеРедактированиеВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДанныеЭтапа = ЗначенияОбщихРеквизитовЦепочки(ТекущиеДанные.Распоряжение);
	ДанныеЭтапа.Вставить("Ссылка", ТекущиеДанные.Распоряжение);
	
	УправлениеПроизводствомКлиент.ОткрытьФормуВыбораПотребностейВПроизводстве(
		ДанныеЭтапа, ТекущиеДанные, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеРедактированиеВыборЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ЭтаФорма.РедактированиеЭтапов[Параметры.ИмяТЧ].НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	ЗаполнитьЗначенияСвойств(Строка, Результат);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияОбщихРеквизитовЦепочки(Этап)
	
	Возврат Документы.ЭтапПроизводства2_2.ЗначенияОбщихРеквизитовЦепочки(Этап, Истина);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаВСтроке(ТекущиеДанные, Форма, ДанныеЭтапов = Неопределено)
	
	ДанныеЭтапа = Неопределено;
	Если ДанныеЭтапов <> Неопределено Тогда
		ДанныеЭтапа = ДанныеЭтапов.Получить(ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
	Если ДанныеЭтапа = Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Распоряжение", ТекущиеДанные.Распоряжение);
		ДанныеЭтапа = Форма.РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска)[0];
		
		Если ДанныеЭтапов <> Неопределено Тогда
			ДанныеЭтапов.Вставить(ТекущиеДанные.Распоряжение, ДанныеЭтапа);
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.Назначение = ДанныеЭтапа.Назначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриНачалеРедактирования(ТекущиеДанные, НоваяСтрока, Копирование)
	
	ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаВСтроке(ТекущиеДанные, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РедактированиеЭтаповЖелаемаяДатаОтгрузкиПриИзмененииНаСервере()
	
	ЗаполнитьДатуВТЧ("РедактированиеЭтаповЭтапы", "ЖелаемаяДатаОбеспечения", РедактированиеЭтапов.ЖелаемаяДатаОтгрузки);
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область ДоступностьИВидимостьЭлементовНаФорме

&НаСервере 
Процедура УстановитьВидимостьЭлементовФормыДатПоступления() 
	
	// Кнопка и реквизит ТЧ
	Элементы.ПродукцияЗаполнитьДатуПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	Элементы.ПродукцияДатаПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	
	Элементы.ВозвратныеОтходыЗаполнитьДатуПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	Элементы.ВозвратныеОтходыДатаПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	
	// Общий реквизит формы
	Элементы.ДатаПоступления1.Видимость = Объект.ПоступлениеОднойДатой;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьЭлементовФормыДатОтгрузки() 
		
	// Кнопка и реквизит ТЧ
	Элементы.МатериалыЗаполнитьДатуОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	Элементы.МатериалыДатаОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	
	//++ НЕ УТКА
	Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьДатуОтгрузки.Видимость = Не РедактированиеЭтапов.НеОтгружатьЧастями; 
	Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = Не РедактированиеЭтапов.НеОтгружатьЧастями;
	//-- НЕ УТКА
	
	// Общий реквизит формы и кнопка
	Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	//++ НЕ УТКА
	Элементы.РедактированиеЭтаповДатаОтгрузки.Видимость = РедактированиеЭтапов.НеОтгружатьЧастями;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер() 
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован
		Или Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.Закрыт Тогда
		
		УстановитьПодписку = Ложь;
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению
		Или Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КИсполнению Тогда
		
		УстановитьПодписку = Объект.Согласован;
		
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Склад");
	
	МассивЭлементов.Добавить("ЖелаемаяДатаПоступления");
	МассивЭлементов.Добавить("ЖелаемаяДатаОтгрузки");
	
	МассивЭлементов.Добавить("НеОтгружатьЧастями");
	МассивЭлементов.Добавить("ДатаОтгрузки");
	МассивЭлементов.Добавить("ПоступлениеОднойДатой");
	МассивЭлементов.Добавить("ДатаПоступления");
	
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	// Элементы управления, связанные с оплатой
	МассивЭлементов.Добавить("БанковскийСчет");
	
	// Элементы управления, связанные с таблицей Возвращаемые товары
	МассивЭлементов.Добавить("ПродукцияНоменклатура");
	МассивЭлементов.Добавить("ПродукцияХарактеристика");
	МассивЭлементов.Добавить("ПродукцияКоличествоУпаковок");
	МассивЭлементов.Добавить("ПродукцияУпаковка");
	МассивЭлементов.Добавить("ПродукцияЦена");
	МассивЭлементов.Добавить("ПродукцияСтавкаНДС");
	МассивЭлементов.Добавить("ПродукцияСумма");
	
	// Элементы управления, связанные с таблицей Заменяющие товары
	МассивЭлементов.Добавить("МатериалыНоменклатура");
	МассивЭлементов.Добавить("МатериалыХарактеристика");
	МассивЭлементов.Добавить("МатериалыКоличествоУпаковок");
	МассивЭлементов.Добавить("МатериалыУпаковка");
	МассивЭлементов.Добавить("МатериалыВидЦены");
	МассивЭлементов.Добавить("МатериалыЦена");
	МассивЭлементов.Добавить("МатериалыСумма");
	
	МассивЭлементов.Добавить("Продукция;ПередНачаломДобавления,ПередУдалением");
	МассивЭлементов.Добавить("Материалы;ПередНачаломДобавления,ПередУдалением");
	
	// Элементы управления, связанные с таблицей Возвращаемые товары
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ПродукцияДобавить");
	МассивЭлементов.Добавить("ПродукцияИзменить");
	МассивЭлементов.Добавить("ПродукцияСкопировать");
	МассивЭлементов.Добавить("ПродукцияУдалить");
	
	МассивЭлементов.Добавить("ПродукцияЗаполнитьПоСпецификации");
	МассивЭлементов.Добавить("ПродукцияЗаполнитьДатуПоступления");
	МассивЭлементов.Добавить("ПродукцияЗаполнитьСклад");
	
	МассивЭлементов.Добавить("ПродукцияОткрытьПодбор");
	МассивЭлементов.Добавить("ПродукцияПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ПродукцияЗагрузитьДанныеИзТСД");
	
	// Элементы управления, связанные с таблицей Заменяющие товары
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("МатериалыДобавить");
	МассивЭлементов.Добавить("МатериалыИзменить");
	МассивЭлементов.Добавить("МатериалыСкопировать");
	МассивЭлементов.Добавить("МатериалыУдалить");
	
	МассивЭлементов.Добавить("МатериалыЗаполнитьПоСпецификации");
	МассивЭлементов.Добавить("МатериалыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("МатериалыЗаполнитьДатуОтгрузки");
	МассивЭлементов.Добавить("МатериалыЗаполнитьСклад");
	МассивЭлементов.Добавить("МатериалыДополнитьМногооборотнойТарой");
	
	МассивЭлементов.Добавить("МатериалыОткрытьПодбор");
	МассивЭлементов.Добавить("МатериалыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("МатериалыЗагрузитьДанныеИзТСД");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВидаЦен() 
	
	ДоступныеВидыЦен = ОпределитьДоступныеВидыЦен();
	
	Если ДоступныеВидыЦен <> Неопределено И ДоступныеВидыЦен.Количество() <= 1 Тогда
		
		Элементы.ГруппаВидЦены.ТекущаяСтраница = Элементы.ГруппаВидЦеныФлажком;
		
		Если ДоступныеВидыЦен.Количество() = 0 Тогда
			Объект.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
			Элементы.ГруппаВидЦены.Видимость = Ложь;
		ИначеЕсли Не Объект.ВидЦены.Пустая() Тогда
			ЗаполнятьВидыЦенПоУмолчанию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВидЦены.Пустая() Тогда
		ЗаполнятьВидыЦенПоУмолчанию = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьДоступныеВидыЦен()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		СтруктураОтбора = Новый Структура("ПометкаУдаления, ЦенаВключаетНДС", Ложь, Ложь);
		Возврат Справочники.ВидыЦен.ДоступныеВидыЦен(СтруктураОтбора);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоговора() 
	
	ВидимостьДоговора = Ложь;
	
	ПараметрыОбъекта = Новый Структура("Партнер, Контрагент, Организация, Соглашение, Договор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		ПараметрыОбъекта,
		Элементы.Договор.Доступность,
		ВидимостьДоговора,
		Объект.Договор);
	
	Элементы.Договор.Видимость = ВидимостьДоговора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	Элементы.МатериалыСостояниеОбеспечения.Видимость = ПравоДоступа("Просмотр", Метаданные.Обработки.СостояниеОбеспечения);
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.СоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.СоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НеОтгружатьЧастями" Тогда
		НеОтгружатьЧастямиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаОтгрузки" Тогда
		ДатаОтгрузкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПоступлениеОднойДатой" Тогда
		ПоступлениеОднойДатойПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаПоступления" Тогда
		ДатаПоступленияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияНоменклатура" Тогда
		ПродукцияНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияХарактеристика" Тогда
		ПродукцияХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСклад" Тогда
		ПродукцияСкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияКоличествоУпаковок" Тогда
		ПродукцияКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияУпаковка" Тогда
		ПродукцияУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыНоменклатура" Тогда
		МатериалыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыХарактеристика" Тогда
		МатериалыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыКоличествоУпаковок" Тогда
		МатериалыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыУпаковка" Тогда
		МатериалыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыВидЦены" Тогда
		МатериалыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыЦена" Тогда
		МатериалыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыСумма" Тогда
		МатериалыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияОтмененоПричиныОтменыНеИспользуются" Тогда
		ПродукцияОтмененоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияОтменено" Тогда
		ПродукцияОтмененоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыСерия" Тогда
		МатериалыСерияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыСклад" Тогда
		МатериалыСкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыОтмененоПричиныОтменыНеИспользуются" Тогда
		МатериалыОтмененоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыОтменено" Тогда
		МатериалыОтмененоПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "Продукция_Заполнить_ЗаполнитьДатуПоступления" Тогда
		ПродукцияЗаполнитьДатуПоступления(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Заполнить_ЗаполнитьСклад" Тогда
		ПродукцияЗаполнитьСклад(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Общее_ПодобратьТовары" Тогда
		ПродукцияОбщееПодобратьТовары(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Общее_ПоискПоШтрихкоду" Тогда
		ПродукцияОбщееПоискПоШтрихкоду(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Общее_ЗагрузитьДанныеИзТСД" Тогда
		ПродукцияОбщееЗагрузитьДанныеИзТСД(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ЗаполнитьЦеныПоВидуЦен" Тогда
		МатериалыЗаполнитьЦеныПоВидуЦен(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ЗаполнитьДатуОтгрузки" Тогда
		МатериалыЗаполнитьДатуОтгрузки(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ЗаполнитьСклад" Тогда
		МатериалыЗаполнитьСклад(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ДополнитьМногооборотнойТарой" Тогда
		ДополнитьМногооборотнойТарой(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Общее_ПодобратьТовары" Тогда
		МатериалыОбщееПодобратьТовары(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Общее_ПоискПоШтрихкоду" Тогда
		МатериалыОбщееПоискПоШтрихкоду(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Общее_ЗагрузитьДанныеИзТСД" Тогда
		МатериалыОбщееЗагрузитьДанныеИзТСД(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	Если Элемент.Имя = "Продукция" Тогда
		ПродукцияПередУдалением(Элемент, Отказ);
	ИначеЕсли Не Элемент.Имя = "Материалы" Тогда
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.Имя = "Продукция" Тогда
		ПродукцияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Неопределено);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	ИзменитьДокументСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ГруппировкаЗатрат

&НаСервере
Процедура ГруппировкаЗатратПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.ГруппировкаЗатрат) Тогда
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки;
	КонецЕсли;
	
	Объект.ПереработкаПоЗаказу = (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство
									ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям 
		И ГруппировкаЗатратДоИзменения = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
		
		ВыполнитьСменуГруппировкиЗатратСПродукцииНаСпецификации();
		
	ИначеЕсли Объект.ПереработкаПоЗаказу Тогда 
		
		// Нельзя текущие данные привязать к заказам, поэтому удалим все
		// Пользователю нужно воспользоваться подбором из заказов
		Объект.Продукция.Очистить();
		Объект.ВозвратныеОтходы.Очистить();
		Объект.Материалы.Очистить();
		Объект.Услуги.Очистить();
		//++ НЕ УТКА
		РедактированиеЭтапов.ВыходныеИзделия.Очистить();
		РедактированиеЭтапов.ПобочныеИзделия.Очистить();
		РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Очистить();
		РедактированиеЭтапов.Этапы.Очистить();
		КоличествоВыходныхИзделий = 0;
		
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
			ИнициализироватьРедактированиеЭтапов();
		КонецЕсли; 
		//-- НЕ УТКА
		
	Иначе
		
		// В остальных случаях пользователю нужно заново определять группировки
		
		Для каждого ДанныеСтроки Из Объект.Продукция Цикл
			Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции 
				ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
				
				ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(ДанныеСтроки, Объект);
			Иначе
				ДанныеСтроки.НомерГруппыЗатрат = 0;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ДанныеСтроки Из Объект.ВозвратныеОтходы Цикл
			ДанныеСтроки.НомерГруппыЗатрат = 0;
		КонецЦикла;
		Для каждого ДанныеСтроки Из Объект.Материалы Цикл
			ДанныеСтроки.НомерГруппыЗатрат = 0;
		КонецЦикла;
		
		Объект.Услуги.Очистить();
		
		//++ НЕ УТКА
		Если НЕ Объект.ПереработкаПоЗаказу Тогда
			Объект.Распоряжение = Неопределено;
			РедактированиеЭтапов.ВыходныеИзделия.Очистить();
			РедактированиеЭтапов.ПобочныеИзделия.Очистить();
			РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.Очистить();
			РедактированиеЭтапов.Этапы.Очистить();
		КонецЕсли; 
		//-- НЕ УТКА
		
		НадписьЗаголовокЗаказы = Новый ФорматированнаяСтрока("");

	КонецЕсли; 
	
	ЗаполнитьУслугиПоПродукции(Объект);
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ЗаполнитьПредставлениеГруппыЗатрат();
	НастроитьФормуПоСпособуГруппировкиЗатрат();
	
	ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСменуГруппировкиЗатратСПродукцииНаСпецификации()

	Для каждого СтрокаПродукция Из Объект.Продукция Цикл
		СтруктураПоиска = Новый Структура("Спецификация", СтрокаПродукция.Спецификация);
  		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаПродукцияСТакойжеСпецификацией Из СписокСтрок Цикл
			Если СтрокаПродукцияСТакойжеСпецификацией.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаПродукцияСТакойжеСпецификацией.НомерГруппыЗатрат);
			СписокСтрок = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
			Для каждого Строкаотход Из СписокСтрок Цикл
				Строкаотход.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат;
			КонецЦикла; 
			
			СписокСтрок = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаМатериал Из СписокСтрок Цикл
				СтрокаМатериал.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат;
			КонецЦикла; 
			СтрокаПродукцияСТакойжеСпецификацией.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат ;
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоСпособуГруппировкиЗатрат()

	// Заголовки элементов
	#Область Заголовки
	ЗаголовокГруппы = ПереработкаНаСторонеКлиентСервер.ЗаголовокПоляГруппыЗатрат(Объект.ГруппировкаЗатрат);
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru = 'Продукция к которой относится продукция'");
		ПодсказкаГруппыОтходы    = НСтр("ru = 'Продукция к которой относится возвратный отход'");
		ПодсказкаГруппыМатериалы = НСтр("ru = 'Продукция к которой относится материал'");
		ПодсказкаГруппыУслуги    = НСтр("ru = 'Продукция к которой относится услуга'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru = 'Продукцию'");
		
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru = 'Спецификация к которой относится продукция'");
		ПодсказкаГруппыОтходы    = НСтр("ru = 'Спецификация к которой относится возвратный отход'");
		ПодсказкаГруппыМатериалы = НСтр("ru = 'Спецификация к которой относится материал'");
		ПодсказкаГруппыУслуги    = НСтр("ru = 'Спецификация к которой относится услуга'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru = 'Спецификацию'");
		
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru = 'Заказ (этап, спецификация) к которому относится продукция'");
		ПодсказкаГруппыОтходы    = НСтр("ru = 'Заказ (этап, спецификация) к которому относится возвратный отход'");
		ПодсказкаГруппыМатериалы = НСтр("ru = 'Заказ (этап, спецификация) к которому относится материал'");
		ПодсказкаГруппыУслуги    = НСтр("ru = 'Заказ (этап, спецификация) к которому относится услуга'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru = 'Заказ (этап, спецификация)'");
	
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru = 'Этап к которому относится продукция'");
		ПодсказкаГруппыОтходы    = НСтр("ru = 'Этап к которому относится возвратный отход'");
		ПодсказкаГруппыМатериалы = НСтр("ru = 'Этап к которому относится материал'");
		ПодсказкаГруппыУслуги    = НСтр("ru = 'Этап к которому относится услуга'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru = 'Этап производства'");
	КонецЕсли;

	Если Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Элементы.ПродукцияГруппаЗатрат.Заголовок        = ЗаголовокГруппы;
		Элементы.ВозвратныеОтходыГруппаЗатрат.Заголовок = ЗаголовокГруппы;
		Элементы.МатериалыГруппаЗатрат.Заголовок        = ЗаголовокГруппы;
		Элементы.УслугиГруппаЗатрат.Заголовок           = ЗаголовокГруппы;
		//++ НЕ УТКА
		Элементы.РедактированиеЭтаповВыходныеИзделияГруппаЗатрат.Заголовок = ЗаголовокГруппы;
		Элементы.РедактированиеЭтаповПобочныеИзделияГруппаЗатрат.Заголовок = ЗаголовокГруппы;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатрат.Заголовок = ЗаголовокГруппы;
		//-- НЕ УТКА
		
		Элементы.ПродукцияГруппаЗатрат.Подсказка        = ПодсказкаГруппыПродукция;
		Элементы.ВозвратныеОтходыГруппаЗатрат.Подсказка = ПодсказкаГруппыОтходы;
		Элементы.МатериалыГруппаЗатрат.Подсказка        = ПодсказкаГруппыМатериалы;
		Элементы.УслугиГруппаЗатрат.Подсказка           = ПодсказкаГруппыУслуги;
		//++ НЕ УТКА
		Элементы.РедактированиеЭтаповВыходныеИзделияГруппаЗатрат.Подсказка = ПодсказкаГруппыПродукция;
		Элементы.РедактированиеЭтаповПобочныеИзделияГруппаЗатрат.Подсказка = ПодсказкаГруппыОтходы;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатрат.Подсказка = ПодсказкаГруппыМатериалы;
		//-- НЕ УТКА
		
		Элементы.ВозвратныеОтходыЗаполнитьГруппуЗатрат.Заголовок = ЗаголовокКомандыЗаполнитьГруппуЗатрат;
		Элементы.МатериалыЗаполнитьГруппуЗатрат.Заголовок = ЗаголовокКомандыЗаполнитьГруппуЗатрат;
		//++ НЕ УТКА
		Элементы.РедактированиеЭтапов_Обеспечение_ЗаполнитьГруппуЗатрат.Заголовок = ЗаголовокКомандыЗаполнитьГруппуЗатрат;
		//-- НЕ УТКА
	КонецЕсли; 
	
	#КонецОбласти

	// Видимость элементов
	#Область Видимость
	Элементы.ПродукцияГруппаЗатрат.Видимость = Объект.ПереработкаПоЗаказу;
	
	ПоЭтапам = (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	Элементы.СтраницаПродукцияЭтапов.Видимость = ПоЭтапам;
	Элементы.СтраницаМатериалыЭтапов.Видимость = ПоЭтапам;
	Элементы.СтраницаПродукция.Видимость = НЕ ПоЭтапам;
	Элементы.СтраницаМатериалы.Видимость = НЕ ПоЭтапам;
	Элементы.СуммаВсегоБезНДСМатериалов.Видимость = НЕ ПоЭтапам;
	
	Элементы.ВозвратныеОтходыГруппаЗатрат.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	Элементы.МатериалыГруппаЗатрат.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	Элементы.ПродукцияПерезаполнить.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	
	Элементы.ВозвратныеОтходыЗаполнитьГруппуЗатрат.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	Элементы.МатериалыЗаполнитьГруппуЗатрат.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	
	Элементы.ПродукцияПодобратьПоЗаказамНаПроизводство.Видимость = Объект.ПереработкаПоЗаказу;
	
	Элементы.УслугиЗапланировано.Видимость = (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство);
	
	Элементы.ПродукцияСпецификация.Видимость = (
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям
		ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции);
	
	Элементы.Склад.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	
	Элементы.ЗакрытьЗаказ.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	Элементы.НадписьЗаголовокЗаказы.Видимость = (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам") Или Объект.ПереработкаПоЗаказу;
	
	Элементы.Статус.Видимость = ИспользоватьСтатусы;
	#КонецОбласти

	// Прочее
	#Область Прочее
	ЕстьКнопкаОткрытия = Объект.ПереработкаПоЗаказу;
	Элементы.ПродукцияГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.ВозвратныеОтходыГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.МатериалыГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.УслугиГруппаЗатрат.ГиперссылкаЯчейки = ЕстьКнопкаОткрытия;
	//++ НЕ УТКА
	Элементы.РедактированиеЭтаповВыходныеИзделияГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.РедактированиеЭтаповПобочныеИзделияГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	//-- НЕ УТКА
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Элементы.СтраницыУслуги.ТекущаяСтраница = Элементы.СтраницаОднаУслуга;
	Иначе
		Элементы.СтраницыУслуги.ТекущаяСтраница = Элементы.СтраницаНесколькоУслуг;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если Объект.ПометкаУдаления И Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		Элементы.РедактированиеЭтаповВыходныеИзделия.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповПобочныеИзделия.ТолькоПросмотр = Истина;
		Элементы.РедактированиеЭтаповОбеспечениеМатериаламиИРаботами.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьДоступностьНаправленияДеятельности(ЭтаФорма);
	
	ОбновитьИнформациюПоЗаказам();
	
	//-- НЕ УТКА
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеГруппыЗатрат()

	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	ПараметрыГруппыЗатрат = Новый Структура("Распоряжение,Спецификация,"+ИмяПоляГруппаЗатрат);
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить(Объект.Продукция);
	СписокТЧ.Добавить(Объект.ВозвратныеОтходы);
	СписокТЧ.Добавить(Объект.Материалы);
	//++ НЕ УТКА
	СписокТЧ.Добавить(РедактированиеЭтапов.ВыходныеИзделия);
	СписокТЧ.Добавить(РедактированиеЭтапов.ПобочныеИзделия);
	СписокТЧ.Добавить(РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	СписокТЧ.Добавить(РедактированиеЭтапов.Этапы);
	//-- НЕ УТКА
	
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыГруппыЗатрат, СтрокаУслуга);
		ПредставлениеГруппы = ПереработкаНаСтороне.ПредставлениеГруппыЗатрат(
									ПараметрыГруппыЗатрат, 
									Объект.ГруппировкаЗатрат, 
									Объект.Продукция,
									ИмяПоляГруппаЗатрат);
		
		СтрокаУслуга.ГруппаЗатрат = ПредставлениеГруппы;
		
		Для каждого ТабличнаяЧасть Из СписокТЧ Цикл
			Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
				Если ДанныеСтроки[ИмяПоляГруппаЗатрат] = СтрокаУслуга[ИмяПоляГруппаЗатрат] Тогда
					ДанныеСтроки.ГруппаЗатрат = ПредставлениеГруппы;
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла; 
		
	КонецЦикла;
	
	// Очистка наименования группы затрат если она не указана
	Для каждого ТабличнаяЧасть Из СписокТЧ Цикл
		Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяПоляГруппаЗатрат]) Тогда
				ДанныеСтроки.ГруппаЗатрат = "";
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьУслугиПоПродукции(Объект)

Если Объект.ПереработкаПоЗаказу Тогда
		// При переработке по заказам список услуг не зависит от продукции
		Возврат;
	КонецЕсли; 
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	СписокГруппЗатрат = Новый Массив;
	
	// Добавление услуг для групп которых нет в списке услуг
	Для каждого СтрокаПродукция Из Объект.Продукция Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаПродукция[ИмяПоляГруппаЗатрат]) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыГруппыЗатрат = Новый Структура("Распоряжение,Спецификация,"+ИмяПоляГруппаЗатрат);
		ЗаполнитьЗначенияСвойств(ПараметрыГруппыЗатрат, СтрокаПродукция);
		СписокГруппЗатрат.Добавить(ПараметрыГруппыЗатрат);
		
		СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, СтрокаПродукция[ИмяПоляГруппаЗатрат]);
  		СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			СтрокаУслуга = Объект.Услуги.Добавить();
			СтрокаУслуга[ИмяПоляГруппаЗатрат] = СтрокаПродукция[ИмяПоляГруппаЗатрат];
			СтрокаУслуга.Спецификация = СтрокаПродукция.Спецификация;
		КонецЕсли;
	КонецЦикла;
	
	ПредставленияГруппЗатрат = ПредставленияГруппЗатрат(
									СписокГруппЗатрат, 
									Объект.ГруппировкаЗатрат, 
									Объект.Продукция, 
									ИмяПоляГруппаЗатрат);
	
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		ГруппаЗатрат = ПредставленияГруппЗатрат.Получить(СтрокаУслуга[ИмяПоляГруппаЗатрат]);
		Если ГруппаЗатрат <> Неопределено Тогда
			СтрокаУслуга.ГруппаЗатрат = ГруппаЗатрат;
		КонецЕсли; 
	КонецЦикла; 
	
	// Удаление услуг для групп, которых нет в списке продукции
	СтрокиУслугКУдалению = Новый Массив;
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, СтрокаУслуга[ИмяПоляГруппаЗатрат]);
  		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			СтрокиУслугКУдалению.Добавить(СтрокаУслуга);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаУслуга Из СтрокиУслугКУдалению Цикл
		СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, СтрокаУслуга[ИмяПоляГруппаЗатрат]);
	 	СписокСтрок = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			Объект.ВозвратныеОтходы.Удалить(ДанныеСтроки);
		КонецЦикла; 
	 	СписокСтрок = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			Объект.Материалы.Удалить(ДанныеСтроки);
		КонецЦикла; 
		Объект.Услуги.Удалить(СтрокаУслуга);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставленияГруппЗатрат(Знач СписокГруппЗатрат, Знач ГруппировкаЗатрат, Знач Продукция, Знач ИмяПоляГруппаЗатрат)

	Результат = Новый Соответствие;
	
	Для каждого ПараметрыГруппыЗатрат Из СписокГруппЗатрат Цикл
	
		ПредставлениеГруппыЗатрат = ПереработкаНаСтороне.ПредставлениеГруппыЗатрат(
										ПараметрыГруппыЗатрат, 
										ГруппировкаЗатрат, 
										Продукция,
										ИмяПоляГруппаЗатрат);
										
		Результат.Вставить(ПараметрыГруппыЗатрат[ИмяПоляГруппаЗатрат], ПредставлениеГруппыЗатрат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомерГруппыЗатратВСтрокеПродукцииПриОкончанииРедактирования(СтрокаПродукция, Объект, КешТекущейСтроки, НоваяСтрока)

	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям") 
			И КешТекущейСтроки.Спецификация <> СтрокаПродукция.Спецификация 
		ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции")
			И НоваяСтрока Тогда
		
		ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(СтрокаПродукция, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(СтрокаПродукция, Объект)

	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции") Тогда
		
		// В этом случае каждая строка является новой группой
		Объект.МаксимальныйНомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат + 1;
		СтрокаПродукция.НомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат;
		СтрокаПродукция.ГруппаЗатрат = "";
		
	ИначеЕсли Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям") Тогда
		
		НомерГруппыЗатрат = 0;
		ИдентификаторСтроки = СтрокаПродукция.ПолучитьИдентификатор();
		СтруктураПоиска = Новый Структура("Спецификация", СтрокаПродукция.Спецификация);
		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			Если ДанныеСтроки.ПолучитьИдентификатор() <> ИдентификаторСтроки Тогда
				НомерГруппыЗатрат = ДанныеСтроки.НомерГруппыЗатрат;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПродукция.НомерГруппыЗатрат = НомерГруппыЗатрат;
		
		Если СтрокаПродукция.НомерГруппыЗатрат = 0 Тогда
			Объект.МаксимальныйНомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат + 1;
			СтрокаПродукция.НомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат;
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГруппуЗатрат(ИмяТЧ)

	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ГруппировкаЗатрат", Объект.ГруппировкаЗатрат);
	ПараметрыФормы.Вставить("ЗаголовокГруппы", ПереработкаНаСторонеКлиентСервер.ЗаголовокПоляГруппыЗатрат(Объект.ГруппировкаЗатрат));
	ПараметрыФормы.Вставить("Услуги", Объект.Услуги);
	ПараметрыФормы.Вставить("НомерГруппыЗатрат", ТекущиеДанные[ИмяПоляГруппаЗатрат]);
	ПараметрыФормы.Вставить("ИмяПоляГруппаЗатрат", ИмяПоляГруппаЗатрат);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьГруппуЗатратЗавершение", ЭтотОбъект, ИмяТЧ);
	ОткрытьФорму("Документ.ЗаказПереработчику.Форма.ВыборГруппыЗатрат", ПараметрыФормы,,,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГруппуЗатратЗавершение(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	Модифицированность = Истина;
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	
	ДанныеЭтапов = Новый Соответствие;					
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные[ИмяПоляГруппаЗатрат] = РезультатЗакрытия[ИмяПоляГруппаЗатрат];
		ТекущиеДанные.ГруппаЗатрат = РезультатЗакрытия.ГруппаЗатрат;
		Если ИмяТЧ = "Продукция" И Объект.ПереработкаПоЗаказу Тогда
			
			ТекущиеДанные.Спецификация = РезультатЗакрытия.Спецификация;
			
		//++ НЕ УТКА
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия"
			ИЛИ ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
			
			ТекущиеДанные.Распоряжение = РезультатЗакрытия.Распоряжение;
			
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			
			ТекущиеДанные.Распоряжение = РезультатЗакрытия.Распоряжение;
			ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаВСтроке(ТекущиеДанные, ЭтаФорма, ДанныеЭтапов);
			
		//-- НЕ УТКА
		КонецЕсли;
	КонецЦикла; 
	
	ВыбратьГруппуЗатратЗавершениеНаСервере();
	
	Если ИмяТЧ = "Продукция" Тогда
		ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	Иначе
		ТребуетсяУточнитьДанныеРаспоряжения = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьГруппуЗатратЗавершениеНаСервере()

	ОбновитьКоличествоСтрокВГруппе(Объект.Продукция);
	ЗаполнитьУслугиПоПродукции(Объект);
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	ЗаполнитьПредставлениеГруппыЗатрат();

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаЗатратПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ГруппировкаЗатратПриИзмененииНаСервере();
	Иначе
		Объект.ГруппировкаЗатрат = ГруппировкаЗатратДоИзменения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоСтрокВГруппе(Таблица, НомерГруппыЗатрат = Неопределено)

	Если НомерГруппыЗатрат <> Неопределено Тогда
		
		// Обработка строк с определенным номером группы затрат
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", НомерГруппыЗатрат);
  		СписокСтрок = Таблица.НайтиСтроки(СтруктураПоиска);
		КоличествоСтрокВГруппе = СписокСтрок.Количество();
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			ДанныеСтроки.КоличествоСтрокВГруппе = КоличествоСтрокВГруппе;
		КонецЦикла; 
		
	Иначе
		
		// Обработка всех строк
		СписокКоличествоСтрокВГруппе = Новый Соответствие;
		Для каждого ДанныеСтроки Из Таблица Цикл
			КоличествоСтрокВГруппе = СписокКоличествоСтрокВГруппе.Получить(ДанныеСтроки.НомерГруппыЗатрат);
			КоличествоСтрокВГруппе = ?(КоличествоСтрокВГруппе <> Неопределено, КоличествоСтрокВГруппе, 0) + 1;
			СписокКоличествоСтрокВГруппе.Вставить(ДанныеСтроки.НомерГруппыЗатрат, КоличествоСтрокВГруппе); 
		КонецЦикла;
		Для каждого ДанныеСтроки Из Таблица Цикл
			ДанныеСтроки.КоличествоСтрокВГруппе = СписокКоличествоСтрокВГруппе.Получить(ДанныеСтроки.НомерГруппыЗатрат);
		КонецЦикла; 
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеГруппыЗатрат(Отказ)

	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
	ЗаголовокПоля = ПереработкаНаСторонеКлиентСервер.ЗаголовокПоляГруппыЗатрат(Объект.ГруппировкаЗатрат);
	
	СписокТЧ = Новый СписокЗначений;
	СписокТЧ.Добавить("Продукция", НСтр("ru = 'Продукция'"));
	СписокТЧ.Добавить("ВозвратныеОтходы", НСтр("ru = 'Возвратные отходы'"));
	СписокТЧ.Добавить("Материалы", НСтр("ru = 'Сырье и материалы'"));
	//++ НЕ УТКА
	СписокТЧ.Добавить("РедактированиеЭтаповВыходныеИзделия", НСтр("ru = 'Продукция'"));
	СписокТЧ.Добавить("РедактированиеЭтаповПобочныеИзделия", НСтр("ru = 'Возвратные отходы'"));
	СписокТЧ.Добавить("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами", НСтр("ru = 'Сырье и материалы'"));
	//-- НЕ УТКА
	
	ИмяПоляГруппаЗатрат	= ИмяПоляГруппаЗатрат(Объект);
	
	Для каждого ПараметрыТЧ Из СписокТЧ Цикл
		ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ПараметрыТЧ.Значение, ЭтаФорма);
		Если ПараметрыТЧ.Значение = "РедактированиеЭтаповВыходныеИзделия" Тогда
			ИмяТЧ = "РедактированиеЭтапов.ВыходныеИзделия";
		ИначеЕсли ПараметрыТЧ.Значение = "РедактированиеЭтаповПобочныеИзделия" Тогда
			ИмяТЧ = "РедактированиеЭтапов.ПобочныеИзделия";
		ИначеЕсли ПараметрыТЧ.Значение = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			ИмяТЧ = "РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами";
		Иначе
			ИмяТЧ = "Объект." + ПараметрыТЧ.Значение;
		КонецЕсли; 
		Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяПоляГруппаЗатрат]) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаголовокПоля, ДанныеСтроки.НомерСтроки, ПараметрыТЧ.Представление);
				ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ДанныеСтроки.НомерСтроки, "ГруппаЗатрат");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, ПутьКТЧ,, Отказ);
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляГруппаЗатрат(Объект)

	Возврат ПереработкаНаСторонеКлиентСервер.ИмяПоляГруппаЗатратВЗаказеПереработчику(Объект);

КонецФункции

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ) 
	
	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТЧ].ВыделенныеСтроки, ТабличнаяЧасть);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ) 
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = ТабличнаяЧасть.Добавить();
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		
		Если ИмяТЧ = "Продукция" Тогда
			Если Объект.ПоступлениеОднойДатой Тогда
				ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
			КонецЕсли;
		ИначеЕсли ИмяТЧ = "ВозвратныеОтходы" Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		ИначеЕсли (ИмяТЧ = "Материалы" ИЛИ ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами")
			И Объект.НеОтгружатьЧастями Тогда
			ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		ДобавитьДействиеПроверитьЗаполнитьСклад(ИмяТЧ, ЭтаФорма, СтруктураДействий);
		
		Если ИмяТЧ = "Материалы" Тогда
			
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
			СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
				Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма)));
				
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
			СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
				Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Ложь, ДоступноОбеспечение(ЭтаФорма)));
				
		КонецЕсли;
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ТекущаяСтрока, СтруктураДействий);
		
		Если ИмяТЧ = "Продукция" Или ИмяТЧ = "ВозвратныеОтходы" Тогда
			НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		КонецЕсли;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ИмяТЧ = "Продукция" Тогда
			ЗаполнитьНомерГруппыЗатратВСтрокеПродукцииПриОкончанииРедактирования(ТекущаяСтрока, Объект, ПродукцияКешТекущейСтроки, Истина);
		//++ НЕ УТКА
		ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
			ЗаполнитьГруппуЗатратВНовойСтроке(ТекущаяСтрока, ЭтаФорма);
			ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаВСтроке(ТекущаяСтрока, ЭтаФорма);
		//-- НЕ УТКА
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ИмяТЧ = "Материалы" Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			РедактированиеЭтапов, 
			ПараметрыУказанияСерийРедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	Иначе
		ПриИзмененииСкладаВТабличнойЧастиСервер(ИмяТЧ);
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ДоступностьЭлементов)

	Форма.Элементы.МатериалыВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.МатериалыКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.ПродукцияВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.ПродукцияКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.ВозвратныеОтходыВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.ВозвратныеОтходыКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьЭлементов;
	//++ НЕ УТКА
	Форма.Элементы.РедактированиеЭтапов_Обеспечение_ВставитьСтроки.Доступность = ДоступностьЭлементов;
	Форма.Элементы.РедактированиеЭтапов_Обеспечение_ВставитьСтрокиКонтекстноеМеню.Доступность = ДоступностьЭлементов;
	//-- НЕ УТКА

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПровестиИЗакрытьНаСервере(ПараметрыЗаписи)

	НачатьТранзакцию();
	Попытка
		РезультатЗаписи = Записать(ПараметрыЗаписи);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
									УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат РезультатЗаписи;
	
КонецФункции

&НаКлиенте
Функция ОбработатьЗаписьОбъектаВФорме(ПараметрыЗаписи, Отказ = Ложь)
	
	Результат = Ложь;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяКлючевойОперации = "ПровестиИЗакрыть.Документ.ЗаказПереработчику.Форма.ФормаДокумента";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойОперации);
	НеВыполнятьПроверкуПередЗаписью = Истина;
	
	ПараметрыЗаписи.Вставить(
		"ПринудительноЗакрытьФорму", ПринудительноЗакрытьФорму);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	Результат = ПровестиИЗакрытьНаСервере(ПараметрыЗаписи);
	
	Если Результат Тогда
		ПослеЗаписи(ПараметрыЗаписи);
	КонецЕсли;
	
	ПринудительноЗакрытьФорму = Ложь;
	НеВыполнятьПроверкуПередЗаписью = Ложь;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораСтавокНДС(ПересчетНДС = Ложь)
	
	НДСпоСтавкам4и2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НДСпоСтавкам4и2");
	
	// Если применение льготной ставки изменилось, предложим пересчитать НДС в табличной части
	Если ПересчетНДС И НДСпоСтавкам4и2Прежний <> НДСпоСтавкам4и2 Тогда
		
		ТекущаяСтрока = Объект;
		
		СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
		
	КонецЕсли;
	
	НДСпоСтавкам4и2Прежний = НДСпоСтавкам4и2;
	
	УчетНДСПереопределяемый.ЗаполнитьСписокВыбораСтавокНДС(Элементы.СтавкаНДС.СписокВыбора, НДСпоСтавкам4и2, Истина);
	// 4D:ERP для Беларуси, ВалентинМ, 10.08.2017
	// Ставки НДС в документе Заказ переработчику, 15703
	// {
	УчетНДСПереопределяемый.ЗаполнитьСписокВыбораСтавокНДС(Элементы.УслугиСтавкаНДС.СписокВыбора, НДСпоСтавкам4и2, Истина);
	// }
	// 4D 

	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Форма)
	
	СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС, НДСпоСтавкам4и2", Ложь, Форма.НДСпоСтавкам4и2);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействийИзмененныеСтроки.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма)));
	
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействийИзмененныеСтроки);
	ДобавитьДействиеПроверитьЗаполнитьСклад("Материалы", ЭтаФорма, СтруктураДействийИзмененныеСтроки);
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Материалы",
		"Номенклатура,Характеристика,Склад,ДатаОтгрузки",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияНоменклатураПриИзмененииНаСервере(ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)

	ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ПродукцияСтрокаЗаполнитьСпецификацию(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Функция ПродукцияСтрокаЗаполнитьСпецификацию(ДанныеСтроки)
	
	Если Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
		И Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеСтроки.Номенклатура.Пустая() Тогда
		ДанныеСтроки.Спецификация = Неопределено;
		Возврат Истина;
	КонецЕсли;
	
	ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
											Объект.Подразделение, 
											ДанныеСтроки.Номенклатура, 
											ДанныеСтроки.Характеристика, 
											Объект.Дата, 
											ДанныеСтроки.Спецификация);
											
	СпецификацияИзменилась = Ложь;
	Если ДанныеСпецификации = Неопределено Тогда
		
		ДанныеСтроки.Спецификация = Неопределено;
		
		СпецификацияИзменилась = Истина;
		
	Иначе
		
		Если ДанныеСпецификации.Спецификация <> ДанныеСтроки.Спецификация Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСпецификации);
			СпецификацияИзменилась = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СпецификацияИзменилась;
	
КонецФункции

&НаСервере
Процедура ВозвратныеОтходыНоменклатураПриИзмененииНаСервере(ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)

	ТекущаяСтрока = Объект.ВозвратныеОтходы.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	Форма.Элементы.СрокВозвратаМногооборотнойТары.Доступность = Форма.Объект.ВернутьМногооборотнуюТару;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыТабличнойЧастиВВалюту(Таблица, 
	Знач СтараяВалюта,
	Знач НоваяВалюта,
	Знач СтруктураКурсовСтаройВалюты,
	Знач СтруктураКурсовНовойВалюты,
	ИмяПоляСумма = "Сумма") Экспорт
	
	СуммаКРаспределению = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		Таблица.Итог(ИмяПоляСумма),
		СтараяВалюта, НоваяВалюта,
		СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
		СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
	
	МассивСумм = Новый Массив;
	
	Для Х = 0 По Таблица.Количество() - 1 Цикл
		
		ТекСтрока = Таблица[Х];
		
		Если Таблица <> Объект.Услуги Тогда
			ТекСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				ТекСтрока.Цена,
				СтараяВалюта, НоваяВалюта,
				СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
				СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
		КонецЕсли; 
		
		СуммаВНовойВалюте = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока[ИмяПоляСумма],
			СтараяВалюта, НоваяВалюта,
			СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
		
		МассивСумм.Добавить(СуммаВНовойВалюте);
		
	КонецЦикла;
	
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивСумм);
	
	Если МассивСумм <> Неопределено Тогда
		
		Для Х = 0 По Таблица.Количество() - 1 Цикл
			
			ТекСтрока = Таблица[Х];
			ТекСтрока[ИмяПоляСумма] = МассивСумм[Х];
			Если ИмяПоляСумма = "СуммаСНДС" Тогда
				Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(ТекСтрока, Ложь, Ложь, Ложь, Ложь, "Сумма");
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоФункцОпциям() 
	
	ВидимостьЭлементов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	Элементы.КартинкаНесколькоСкладов1.Видимость = ВидимостьЭлементов;		
	Элементы.НадписьНесколькоСкладов1.Видимость = ВидимостьЭлементов;		
	
	ВидимостьЭлементов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	Элементы.ПродукцияГруппаОтменено.Видимость = ВидимостьЭлементов;		
	Элементы.МатериалыГруппаОтменено.Видимость = ВидимостьЭлементов;		
	
	ВидимостьЭлементов = Не ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	Элементы.МатериалыОтмененоПричиныОтменыНеИспользуются.Видимость = ВидимостьЭлементов;		
	Элементы.ПродукцияОтмененоПричиныОтменыНеИспользуются.Видимость = ВидимостьЭлементов;		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВозвратныеОтходы, СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Материалы, СтруктураДействий);
	
	//++ НЕ УТКА
	УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(
			РедактированиеЭтапов.ВыходныеИзделия);
			
	УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(
			РедактированиеЭтапов.ПобочныеИзделия);
			
	УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаПроизводства(
		РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами);
	//-- НЕ УТКА
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий, Истина);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Услуги, СтруктураДействий);

	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено, ДоступноОбеспечение", Ложь, Истина, ДоступноОбеспечение(ЭтаФорма));
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Материалы, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна);
	
	ЗаполнитьПредставлениеГруппыЗатрат();
	
	ОбновитьКоличествоСтрокВГруппе(Объект.Продукция);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьИспользованиеПричинОтменыЗаказов(Отгрузка) 
	
	Если Отгрузка Тогда
		ИспользоватьПричиныОтменыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	Иначе
		ИспользоватьПричиныОтменыЗаказовПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МаксимальнаяДатаАванса()
	
	МаксДатаАванса = '00010101';
	
	Для Каждого ТекЭтап Из Объект.ЭтапыГрафикаОплаты Цикл
		
		Если ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления")
			Или ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения") Тогда
			
			МаксДатаАванса = Макс(МаксДатаАванса, ТекЭтап.ДатаПлатежа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МаксДатаАванса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизитыВозвратныеОтходы() 
	
	Возврат Новый Структура("Отменено", "Сумма");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизитыМатериалы() 
	
	Возврат Новый Структура("Отменено", "Сумма");
	
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере() 
	
	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению
		И Элементы.Статус.СписокВыбора.НайтиПоЗначению(Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению) = Неопределено Тогда
		Элементы.Статус.СписокВыбора.Вставить(1, Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению);
	КонецЕсли;
	
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	//++ НЕ УТКА
	ПараметрыРедактированияЭтапаСтруктура = УправлениеПроизводством.ПараметрыРедактированияЭтапа();
	ПараметрыРедактированияЭтапаСтруктура.ИмяРеквизитаОбъект = "РедактированиеЭтапов";
	ПараметрыРедактированияЭтапаСтруктура.ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерийРедактированиеЭтапов";
	ПараметрыРедактированияЭтапа = Новый ФиксированнаяСтруктура(ПараметрыРедактированияЭтапаСтруктура);
	
	ЗначениеВРеквизитФормы(Обработки.РедактированиеЭтаповПроизводства.Создать(), "РедактированиеЭтапов");
	ИнициализироватьРедактированиеЭтапов();
	//-- НЕ УТКА
	
	ВалютаДокумента = Объект.Валюта;
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
	
	УстановитьПараметрыВыбораТоварыСклад();
	
	ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках");
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.Номенклатура);
	Элементы.Характеристика.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры");
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	
	Элементы.ПродукцияЗаполнитьСклад.Доступность = СкладГруппа;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ЗаполнитьСлужебныеРеквизиты();
	//++ НЕ УТКА
	ЗаполнитьЗапланированноеКоличествоЭтапов();
	//-- НЕ УТКА
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь ,Ложь);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
															Объект, 
															Документы.ЗаказПереработчику));
															
	//++ НЕ УТКА
	ПараметрыУказанияСерийРедактированиеЭтапов = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
																					РедактированиеЭтапов, 
																					Обработки.РедактированиеЭтаповПроизводства));
	//-- НЕ УТКА
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Материалы, ЗависимыеРеквизитыМатериалы());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвратныеОтходы, ЗависимыеРеквизитыВозвратныеОтходы());
	
	УстановитьВидимостьДоговора();
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ОбновитьСостояниеСервер();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	УстановитьВидимостьОбеспечения();
	Элементы.МатериалыЗаполнитьОбеспечение.Доступность = Не ТолькоПросмотр;
	
	УстановитьСписокВыбораСтавокНДС();
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Продукция");
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "ВозвратныеОтходы");
	
	НастроитьФормуПоСпособуГруппировкиЗатрат();
	
	ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	КоличествоУслуг = Объект.Услуги.Количество();
	ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат;
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
	АктуализироватьЗакупкуПодДеятельность(Ложь);
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНаправленияДеятельности(Форма)
	
	Форма.Элементы.НаправлениеДеятельности.ТолькоПросмотр =
		Форма.Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства")
		И (Форма.РедактированиеЭтапов.ВыходныеИзделия.Количество() + Форма.РедактированиеЭтапов.ПобочныеИзделия.Количество()) <> 0;
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиДокумента(Форма) 
	
	КоллекцияМатериалы = Форма.Объект.Материалы;
	
	Форма.СуммаМатериалов         = КоллекцияМатериалы.Итог("Сумма") - КоллекцияМатериалы.Итог("СуммаОтменено");
	Форма.СуммаОтмененоМатериалов = КоллекцияМатериалы.Итог("СуммаОтменено");
	
	КоллекцияПродукция = Форма.Объект.Продукция;
	КоллекцияВозвратныеОтходы = Форма.Объект.ВозвратныеОтходы;
	
	Форма.СуммаАвансаДоПодтверждения     = 0;
	Форма.СуммаПредоплатыДоПоступления   = 0;
	Форма.СуммаКредитаПослеПоступления   = 0;
	Форма.ПроцентАвансаДоПодтверждения   = 0;
	Форма.ПроцентПредоплатыДоПоступления = 0;
	Форма.ПроцентКредитаПослеПоступления = 0;
	ПроцентПлатежейОбщий                 = 0;
	
	АвансДоПодтверждения    = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения");
	ПредоплатаДоПоступления = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления");
	КредитПослеПоступления  = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления");
	
	СтруктураАванс      = Новый Структура("Сумма, Проценты", "СуммаАвансаДоПодтверждения",   "ПроцентАвансаДоПодтверждения");
	СтруктураПредоплата = Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоПоступления", "ПроцентПредоплатыДоПоступления");
	СтруктураКредит     = Новый Структура("Сумма, Проценты", "СуммаКредитаПослеПоступления", "ПроцентКредитаПослеПоступления");
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(АвансДоПодтверждения,    СтруктураАванс);
	СоответствиеВариантовОплаты.Вставить(ПредоплатаДоПоступления, СтруктураПредоплата);
	СоответствиеВариантовОплаты.Вставить(КредитПослеПоступления,  СтруктураКредит);
	
	ПредыдущееЗначениеДаты = Дата(1, 1, 1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма]    = Форма[ИменаЭлементов.Сумма]    + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
		
	КонецЦикла;
	
	БезНДС	= ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	НДС0	= ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0");
	
	ЕстьНДС = Ложь;
	Для каждого СтрокаУслуга Из Форма.Объект.Услуги Цикл
		Если СтрокаУслуга.СтавкаНДС <> БезНДС Тогда
			ЕстьНДС = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЕстьНДС Тогда
		Форма.Элементы.ГруппаСтраницыВсегоПродукция.ТекущаяСтраница	= Форма.Элементы.СтраницаВсегоСНДСПродукция;
	Иначе
		Форма.Элементы.ГруппаСтраницыВсегоПродукция.ТекущаяСтраница	= Форма.Элементы.СтраницаВсегоБезНДСПродукция;
	КонецЕсли;
	
	ТолькоПросмотрНДС		= (Форма.Объект.СтавкаНДС = БезНДС) ИЛИ (Форма.Объект.СтавкаНДС = НДС0);
	ОтметкаНезаполненного	= (Форма.Объект.СуммаНДС = 0 И Не ТолькоПросмотрНДС);
	
	Форма.Элементы.СуммаНДС.ТолькоПросмотр				= ТолькоПросмотрНДС;
	Форма.Элементы.СуммаНДС.ОтметкаНезаполненного		= ОтметкаНезаполненного;
	Форма.Элементы.СуммаНДС.АвтоОтметкаНезаполненного	= ОтметкаНезаполненного;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииСуммыУслуг(Форма)

	Форма.Объект.СуммаСНДС = Форма.Объект.Услуги.Итог("СуммаСНДС");
	Форма.Объект.СуммаДокумента = Форма.Объект.СуммаСНДС;
	Форма.КоличествоУслуг = Форма.Объект.Услуги.Количество();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий, ЭтоУслуги = Ложь) 
	
	СтруктураХарактеристики  = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураХарактеристики);
	
	Если НЕ ЭтоУслуги Тогда
		СтруктураТипНоменклатуры = Новый Структура("Номенклатура", "ТипНоменклатуры");
		СтруктураАртикул         = Новый Структура("Номенклатура", "Артикул");
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураТипНоменклатуры);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", СтруктураАртикул);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, ТекущаяСтрока, СтруктураДействий) 
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, ТекущаяСтрока));
	
	Если ИмяТабличнойЧасти = "ВозвратныеОтходы" 
			Или ИмяТабличнойЧасти = "Материалы" Тогда
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыВозвратныеОтходы());
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию() 
	
	ПараметрыОбъекта = Новый Структура("Партнер, Договор, Контрагент, Организация");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
			
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
			И ИспользоватьНаправленияДеятельности Тогда
	
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ПараметрыОбъекта, 
															Объект.ХозяйственнаяОперация, 
															Объект.Валюта,
															,//Налогообложение
															Объект.НаправлениеДеятельности);
	Иначе
															
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ПараметрыОбъекта, 
															Объект.ХозяйственнаяОперация, 
															Объект.Валюта);
	КонецЕсли;	
		
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь);
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ИмяТЧ, Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(
						ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма), 
						МассивВыделенныхСтрок, 
						Склад);
	
	Если ИмяТЧ = "Материалы" И ЗаполненоСтрок > 0 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если ЗаполненоСтрок > 0 И ИмяТЧ <> "Материалы" Тогда
		Если ИмяТЧ = "Продукция" Или ИмяТЧ = "ВозвратныеОтходы" Тогда
			ПриИзмененииСкладаВТабличнойЧастиСервер(ИмяТЧ);
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов() 
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДокументСервер() 
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустыеДатыПоступления()
	
	Если Объект.Продукция.Количество() = 0 
		И Объект.ВозвратныеОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПустуюДатуПоступленияСервер() Тогда
		
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
			ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
		Иначе
			ДатаПоступления = ТекущаяДата();
		КонецЕсли;
		
		ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьПустуюДатуПоступления()
	
	Если Объект.Продукция.Количество() = 0 
		И Объект.ВозвратныеОтходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПустуюДатуПоступленияСервер() Тогда
		
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
			Объект.ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
		Иначе
			Объект.ДатаПоступления = ТекущаяДата();
		КонецЕсли;
		
		ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления) 
	
	Для Каждого СтрокаТЧ Из Объект.Продукция Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.ВозвратныеОтходы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер() 
	
	Документы.ЗаказПереработчику.РассчитатьСостояние(
		Объект.Ссылка,
		Объект.Договор,
		ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам() 
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Расчеты = НСтр("ru='Расчеты по договору'");
	Иначе
		Расчеты = НСтр("ru='Оплачено по заказу'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаДокумента + "  " + ПроцентОплаты + "%";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступления(ИмяТЧ, МассивВыделенныхСтрок = Неопределено) 
	
	ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуПоступленияЗавершение", ЭтотОбъект, Новый Структура("ИмяТЧ, МассивВыделенныхСтрок", ИмяТЧ, МассивВыделенныхСтрок));
	
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПоступления, НСтр("ru='Введите дату поступления'"), ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаПоступления = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
		
		ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
		
		Если МассивВыделенныхСтрок = Неопределено Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
			КонецЦикла;
			
		Иначе
			
			Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
				
				СтрокаТЧ = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияДатПоступления(ДатаПоступления, (МассивВыделенныхСтрок <> Неопределено));
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере 
Функция ПоместитьГрафикВоВременноеХранилище()
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",                         ТолькоПросмотр);
	ПараметрыФормы.Вставить("СуммаОплатыПоДокументу",                 Объект.СуммаСНДС);
	ПараметрыФормы.Вставить("Партнер",                                Объект.Партнер);
	ПараметрыФормы.Вставить("Дата",                                   Объект.Дата);
	ПараметрыФормы.Вставить("ЖелаемаяДатаПоступления",                Объект.ЖелаемаяДатаПоступления);
	ПараметрыФормы.Вставить("Валюта",                                 Объект.Валюта);
	ПараметрыФормы.Вставить("УчитыватьВариантОплаты",                 Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",                УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище",              ПоместитьГрафикВоВременноеХранилище());
	ПараметрыФормы.Вставить("Ключ",                                   Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОплаты",                            Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("Касса",                                  Объект.Касса);
	ПараметрыФормы.Вставить("БанковскийСчет",                         Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("Организация",                            Объект.Организация);
	ПараметрыФормы.Вставить("ПараметрыВыбораРеквизитов",              ПараметрыВыбораРеквизитов);
	ПараметрыФормы.Вставить("ОтключитьЗаполнениеПоПредыдущимЗаказам", Истина);
	ПараметрыФормы.Вставить("ПорядокРасчетов",                        Объект.ПорядокРасчетов);
	ПараметрыФормы.Вставить("ДоступныеПорядкиРасчетов",               ДоступныеПорядкиРасчетов);
	ПараметрыФормы.Вставить("ЭтоЗаказ",                               Истина);
	ПараметрыФормы.Вставить("ГрафикИсполненияВДоговоре",              ГрафикИсполненияВДоговоре);
	ПараметрыФормы.Вставить("ПорядокОплаты",                          Объект.ПорядокОплаты);
	ПараметрыФормы.Вставить("ВалютаВзаиморасчетов",                   Объект.Валюта);

	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыПоставщику",
		ПараметрыФормы, 
		ЭтаФорма,,,, 
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(ПараметрыОплаты, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОплаты <> Неопределено Тогда
		
		Модифицированность = Истина;
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Объект.Согласован = Ложь;
		Объект.ФормаОплаты             = ПараметрыОплаты.ФормаОплаты;
		Объект.Касса                   = ПараметрыОплаты.Касса;
		Объект.БанковскийСчет          = ПараметрыОплаты.БанковскийСчет;
		Объект.ЖелаемаяДатаПоступления = ПараметрыОплаты.ЖелаемаяДатаПоступления;
		Объект.ПорядокОплаты           = ПараметрыОплаты.ПорядокОплаты;
		
		Если Объект.ПорядокРасчетов <> ПараметрыОплаты.ПорядокРасчетов Тогда
			Объект.ПорядокРасчетов = ПараметрыОплаты.ПорядокРасчетов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
			ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
		КонецЕсли;
		
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		
		УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище) 
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВТЧ(Знач ИмяТЧ, Знач ПолеДата, Знач НоваяДата)

	Если НоваяДата = '000101010000' Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
	Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		ДанныеСтроки[ПолеДата] = НоваяДата;
	КонецЦикла; 	

КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДатыПоступленияСервер(ДатаПоступления) 
	
	ЗаполнитьДатуВТЧ("Продукция", "ДатаПоступления", ДатаПоступления);
	ЗаполнитьДатуВТЧ("ВозвратныеОтходы", "ДатаПоступления", ДатаПоступления);
	
КонецПроцедуры

&НаСервере 
Функция МаксимальнаяДатаПоступления() 
	
	МаксимальнаяДатаПоступления = Дата(1,1,1);
	Для Каждого Товар Из Объект.Продукция Цикл 
		МаксимальнаяДатаПоступления = Макс(МаксимальнаяДатаПоступления, Товар.ДатаПоступления);
	КонецЦикла;
	
	Для Каждого Товар Из Объект.ВозвратныеОтходы Цикл 
		МаксимальнаяДатаПоступления = Макс(МаксимальнаяДатаПоступления, Товар.ДатаПоступления);
	КонецЦикла;
	
	Возврат МаксимальнаяДатаПоступления
	
КонецФункции

&НаСервере
Функция ПроверитьПустуюДатуПоступленияСервер() 
	
	Для Каждого ТекСтрока Из Объект.Продукция Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов() Экспорт
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина);
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма, Истина);
	ВзаиморасчетыСервер.УстановитьВидимостьЗачетаОплаты(ЭтаФорма, Истина);
	

	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаОплатаСервер()
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеЗаказовПоДаннымПереработчика(НомерПоДаннымПартнера)
	
	СписокЗаказовПоНомеру = ПолучитьСписокЗаказовПоДаннымПереработчика(Объект.Ссылка, Объект.Контрагент, НомерПоДаннымПартнера);
	
	Если СписокЗаказовПоНомеру.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СписокКнопок = Новый СписокЗначений;
	Если СписокЗаказовПоНомеру.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru='В информационной базе уже существует заказ с таким же номером по данным переработчика. Продолжить?'");
		СписокКнопок.Добавить("ОткрытьСписокЗаказов", НСтр("ru = 'Открыть заказ'"));
	Иначе
		ТекстВопроса = НСтр("ru='В информационной базе уже существуют заказы с таким же номером по данным переработчика. Продолжить?'");
		СписокКнопок.Добавить("ОткрытьСписокЗаказов", НСтр("ru = 'Открыть список заказов'"));
	КонецЕсли;
	
	СписокКнопок.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНаличиеЗаказовПоДаннымПереработчикаЗавершение", ЭтотОбъект, Новый Структура("СписокЗаказов", СписокЗаказовПоНомеру));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеЗаказовПоДаннымПереработчикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    СписокЗаказовПоНомеру = ДополнительныеПараметры.СписокЗаказов;
    
    Если РезультатВопроса = "ОткрытьСписокЗаказов" Тогда
        
		Если СписокЗаказовПоНомеру.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СписокДокументов", СписокЗаказовПоНомеру);
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Заказы переработчикам (%КоличествоДокументов%)'"));
            ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы);
			
        Иначе
            
            ПараметрыФормы = Новый Структура("Ключ", СписокЗаказовПоНомеру.Получить(0).Значение);
            ОткрытьФорму("Документ.ЗаказПереработчику.ФормаОбъекта", ПараметрыФормы);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокЗаказовПоДаннымПереработчика(ТекущийЗаказ, Контрагент, НомерВходящегоДокумента)
	
	ДатаВходящегоДокумента = ?(ЗначениеЗаполнено(ТекущийЗаказ.Дата), ТекущийЗаказ.Дата, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПереработчику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|ГДЕ
	|	ЗаказПереработчику.Ссылка <> &ТекущийЗаказ
	|	И ЗаказПереработчику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаказПереработчику.НомерПоДаннымПартнера = &НомерПоДаннымПартнера
	|	И ЗаказПереработчику.Контрагент = &Контрагент
	|	И НЕ ЗаказПереработчику.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДатаНачала",    ДобавитьМесяц(ДатаВходящегоДокумента, -3));
	Запрос.УстановитьПараметр("ДатаОкончания", ДобавитьМесяц(ДатаВходящегоДокумента, 3));
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("ТекущийЗаказ",  ТекущийЗаказ);
	Запрос.УстановитьПараметр("НомерПоДаннымПартнера", НомерВходящегоДокумента);
	
	СписокЗаказовПоНомеру = Новый СписокЗначений;
	СписокЗаказовПоНомеру.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокЗаказовПоНомеру;
	
КонецФункции

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСПоставщиками("КарточкаРасчетовСПоставщикамиПоДокументамКонтекст", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//++ НЕ УТКА
	УправлениеПроизводством.УстановитьУсловноеОформлениеОбеспеченияЭтапаПроизводства(
		ЭтаФорма, "РедактированиеЭтапов", "ОбеспечениеМатериаламиИРаботами", "РедактированиеЭтапов", Истина);
		
	УправлениеПроизводством.УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, "РедактированиеЭтапов", "ВыходныеИзделия", "РедактированиеЭтапов", Истина);
		
	УправлениеПроизводством.УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, "РедактированиеЭтапов", "ПобочныеИзделия", "РедактированиеЭтапов", Истина);
	//-- НЕ УТКА
	
	#Область СтандартноеОформление
	УчетНДСПереопределяемый.УстановитьУсловноеОформлениеДляНДСпоСтавкам4и2(УсловноеОформление, Элементы.СтавкаНДС);

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтаФорма, 
		"СерииВсегдаВТЧТовары", 
		"МатериалыСерия", 
		"Объект.Материалы.СтатусУказанияСерий",
		"Объект.Материалы.ТипНоменклатуры");
																	 
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтаФорма,
		"ПродукцияНазначение",
		"Объект.Продукция.ТипНоменклатуры");
																		  
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтаФорма,
		"ВозвратныеОтходыНазначение",
		"Объект.ВозвратныеОтходы.ТипНоменклатуры");
																		  
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.Материалы,
		Элементы.МатериалыОтменено.Имя,
		Элементы.МатериалыПричинаОтмены.Имя);

	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.Продукция,
		Элементы.ПродукцияОтменено.Имя,
		Элементы.ПродукцияПричинаОтмены.Имя);

	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.ВозвратныеОтходы,
		Элементы.ВозвратныеОтходыОтменено.Имя,
		Элементы.ВозвратныеОтходыПричинаОтмены.Имя);

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ПродукцияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Продукция.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВозвратныеОтходыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВозвратныеОтходы.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Материалы.Упаковка");

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтаФорма);

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"РедактированиеЭтаповОбеспечениеМатериаламиИРаботамиХарактеристика",
		"РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"МатериалыХарактеристика",
		"Объект.Материалы.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"ПродукцияХарактеристика",
		"Объект.Продукция.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"ВозвратныеОтходыХарактеристика",
		"Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, 
		"УслугиХарактеристика",
		"Объект.Услуги.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма,
		"Характеристика",
		"ХарактеристикиИспользуются");
		
	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(
		ЭтаФорма, 
		"МатериалыВидЦены", 
        "Объект.Материалы.ВидЦены");

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(
		ЭтаФорма, 
		"ВозвратныеОтходыВидЦены", 
        "Объект.ВозвратныеОтходы.ВидЦены");
														 
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(УсловноеОформление,
		"ДатаОтгрузки", "ДатаОтгрузки", "", "ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(УсловноеОформление,
		"МатериалыДатаОтгрузки", "ДатаОтгрузки", "Материалы", "ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(УсловноеОформление,
		"МатериалыСклад", "Склад", "Материалы", "СкладОбязателен");
	
	СтатусыЧерновик = Новый СписокЗначений;
	СтатусыЧерновик.Добавить(Перечисления.СтатусыЗаказовПереработчикам.НеСогласован);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"Подразделение", "Подразделение", "", СтатусыЧерновик);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"ДатаПоступления", "ДатаПоступления", "", СтатусыЧерновик);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"ПродукцияДатаПоступления", "ДатаПоступления", "Продукция", СтатусыЧерновик);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"ВозвратныеОтходыДатаПоступления", "ДатаПоступления", "ВозвратныеОтходы", СтатусыЧерновик);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"ПродукцияСклад", "Склад", "Продукция", СтатусыЧерновик);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"ВозвратныеОтходыСклад", "Склад", "ВозвратныеОтходы", СтатусыЧерновик);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"Склад", "Склад", "", СтатусыЧерновик);
		
	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтаФорма, "ПродукцияСклад");
	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтаФорма, "ВозвратныеОтходыСклад");
	СкладыСервер.УстановитьУсловноеОформлениеСкладаВШапке(ЭтаФорма);
	#КонецОбласти
	
	// ЦветГиперссылки для поля ГруппаЗатрат
#Область ЦветГиперссылки
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиГруппаЗатрат.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПереработкаПоЗаказу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);																 
#КонецОбласти

	// Текст <продукция не выбрана> в поле ГруппаЗатрат
#Область ТекстПродукцияНеВыбрана
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыГруппаЗатрат.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.НомерГруппыЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<продукция не выбрана>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыГруппаЗатрат.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.НомерГруппыЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<продукция не выбрана>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиГруппаЗатрат.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.НомерГруппыЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<продукция не выбрана>'"));
#КонецОбласти

	// Только просмотр СуммыНДС, если СтавкаНДС = БезНДС или НДС0%
#Область УслугиСуммаНДС_ТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиСуммаНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.СтавкаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.НДС0);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
#КонецОбласти

	#Область ПродукцияСпецификация_ОтметкаНеЗаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСпецификация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Ложь);
	#КонецОбласти

	// Доля стоимости ОтметкаНезаполненного
	#Область ПродукцияДоляСтоимости
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДоляСтоимости.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Продукция.КоличествоСтрокВГруппе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область Прочее

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеПросрочено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовПереработчикам.Закрыт;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);

	//

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДатаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыДатаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПоступления1.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовПереработчикам.КИсполнению);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовПереработчикам.Закрыт);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПоступления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладОтгрузкиГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияОтменено.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПричинаОтмены.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.SpecialTextColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыОтменено.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыПричинаОтмены.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.SpecialTextColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияОтмененоПричиныОтменыНеИспользуются.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FieldSelectionBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыОтмененоПричиныОтменыНеИспользуются.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FieldSelectionBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыОтменено.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыПричинаОтмены.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовКлиентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВидДняПроизводственногоКалендаряСубботаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыОтмененоПричиныОтменыНеИспользуются.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовКлиентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.РезультатУспехЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номенклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиНоменклатура.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроверятьУказаниеРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);																 

	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);

	//

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Подразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПереработкаПоЗаказу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПриИзмененииВалюты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПересчитатьСуммы = (РезультатВопроса = КодВозвратаДиалога.Да);
	ВалютаПриИзмененииЗавершение(ПересчитатьСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииЗавершение(ПересчитатьСуммы)

	ПриИзмененииВалютыСервер(Объект.Валюта, ПересчитатьСуммы);
	
	Если ПересчитатьСуммы Тогда
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСкладов;

КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораТоварыСклад()
	
	Элементы.ПродукцияСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.ПродукцияСклад, "Ссылка", ДанныеВыбораСкладов(Объект.Склад));

	Элементы.ВозвратныеОтходыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.ВозвратныеОтходыСклад, "Ссылка", ДанныеВыбораСкладов(Объект.Склад));
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаПоступленияНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ВыбранныйЭлемент;
    
    Если ВыбранноеЗначение <> Неопределено Тогда
        Объект.ЖелаемаяДатаПоступления = ВыбранноеЗначение.Значение;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПродукцияХарактеристикаПриИзмененииНаСервере(ИдентификаторСтроки)

	ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);

	ПродукцияСтрокаЗаполнитьСпецификацию(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура Услуги_ВыбратьИЗаполнитьУслугуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.ЗакупкаПодДеятельность);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Услуги"));

	Для каждого ИдентификаторСтроки Из Элементы.Услуги.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Услуги.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.Номенклатура = РезультатЗакрытия;
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ДанныеСтроки.Характеристика);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла; 
	
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВсегоСкладовВТаблицах(Таблица1, Таблица2)
	
	МассивСкладов = Новый Массив();
	Для Каждого СтрокаТаблицы Из Таблица1 Цикл
		МассивСкладов.Добавить(СтрокаТаблицы.Склад);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Таблица2 Цикл
		Если МассивСкладов.Найти(СтрокаТаблицы.Склад) = Неопределено Тогда
			МассивСкладов.Добавить(СтрокаТаблицы.Склад);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСкладов.Количество();
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРаспоряжениеГруппы(ТекущиеДанные)
	
	ИмяПоляГруппаЗатрат	= ИмяПоляГруппаЗатрат(Объект);

	Если НЕ ЗначениеЗаполнено(ТекущиеДанные[ИмяПоляГруппаЗатрат]) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПереработкаПоЗаказу Тогда
		СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, ТекущиеДанные[ИмяПоляГруппаЗатрат]);
	 	СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ПоказатьЗначение(, СписокСтрок[0].Распоряжение);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвратныеОтходыИМатериалыПриИзмененииПродукции()

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные.КоличествоСтрокВГруппе = 1 
		И Объект.ГруппировкаЗатрат <> ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки") 
		И ПродукцияКешТекущейСтроки <> Неопределено 
		И (ПродукцияКешТекущейСтроки.Количество <> ТекущиеДанные.Количество
				И ТекущиеДанные.Количество <> 0
			ИЛИ ЗначениеЗаполнено(ТекущиеДанные.Спецификация)
				И ПродукцияКешТекущейСтроки.Спецификация <> ТекущиеДанные.Спецификация
				И ТекущиеДанные.Количество <> 0) Тогда
		
		ЗаполнитьВозвратныеОтходыИМатериалы();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозвратныеОтходыИМатериалы()

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать выбрать продукцию.'"));
		Возврат;
	КонецЕсли;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	// Нужно проверить что в выбранных строках заполнена спецификация или заказ
	Отказ = Ложь;
	ДанныеВыбранныхСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если (Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции")
				ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям"))
			И НЕ ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
			
			ТекстСообщения = СтрШаблон(
								НСтр("ru = 'Необходимо указать спецификацию в строке %1 списка ""Продукция""'"), 
								Формат(ТекущиеДанные.НомерСтроки, "ЧГ="));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, 
				Объект.Ссылка, 
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", ТекущиеДанные.НомерСтроки, "Спецификация"),
				, 
				Отказ); 
			
			Продолжить;
			
		ИначеЕсли Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство")
			И НЕ ЗначениеЗаполнено(ТекущиеДанные[ИмяПоляГруппаЗатрат]) Тогда
			
			ТекстСообщения = СтрШаблон(
								НСтр("ru = 'Необходимо указать заказ в строке %1 списка ""Продукция""'"), 
								Формат(ТекущиеДанные.НомерСтроки, "ЧГ="));
								
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, 
				Объект.Ссылка, 
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", ТекущиеДанные.НомерСтроки, "ГруппаЗатрат"),
				, 
				Отказ); 
				
			Продолжить;
			
		КонецЕсли; 
		
		ДанныеВыбранныхСтрок.Добавить(ИдентификаторСтроки);
		
	КонецЦикла; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = Неопределено;
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции")
		ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям") Тогда
		
		ТекстВопроса = НСтр("ru = 'Заполнить возвратные отходы, сырье и материалы по спецификации?'");
		
	ИначеЕсли Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство") Тогда
		
		ТекстВопроса = НСтр("ru = 'Заполнить возвратные отходы, сырье и материалы по заказу на производство?'");
		
	КонецЕсли;
	
	Если ТекстВопроса <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьВозвратныеОтходыИМатериалыПриИзмененииПродукцииЗавершение", ЭтотОбъект, ДанныеВыбранныхСтрок);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьВозвратныеОтходыИМатериалыПриИзмененииПродукцииЗавершение(РезультатВопроса, ВыделенныеСтроки) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВозвратныеОтходыИМатериалыНаСервере(ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвратныеОтходыИМатериалыНаСервере(ВыделенныеСтроки)

	Если (Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции")
			ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям")) Тогда
		
		ЗаполнитьПоСпецификации(ВыделенныеСтроки);
		
	//++ НЕ УТКА
	ИначеЕсли Объект.ПереработкаПоЗаказу Тогда
		
		ЗаполнитьПоЗаказуНаПроизводство(ВыделенныеСтроки);
	//-- НЕ УТКА
	Иначе
		Возврат;
	КонецЕсли;

	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпецификации(ВыделенныеСтроки)

	СписокПродукции = Новый Массив;
	Для каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ТекущаяСтрока);
		СписокПродукции.Добавить(ТекущиеДанные);
	КонецЦикла;	
	
	Для каждого ТекущиеДанные Из Объект.Продукция Цикл
		Если ВыделенныеСтроки.Найти(ТекущиеДанные.ПолучитьИдентификатор()) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Сч = 0 По СписокПродукции.ВГраница() Цикл
			ДанныеВыделеннойСтроки = СписокПродукции.Получить(Сч);
			Если ДанныеВыделеннойСтроки.НомерГруппыЗатрат = ТекущиеДанные.НомерГруппыЗатрат
				И ДанныеВыделеннойСтроки.Номенклатура = ТекущиеДанные.Номенклатура
				И ДанныеВыделеннойСтроки.Характеристика = ТекущиеДанные.Характеристика Тогда
				СписокПродукции.Добавить(ТекущиеДанные);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	
	Документы.ЗаказПереработчику.ЗаполнитьВозвратныеОтходыИМатериалыПоСпецификации(СписокПродукции, Объект);
	НаправленияДеятельностиСервер.ПриЗаполненииПоСпецификацииСервер(ЭтаФорма);

КонецПроцедуры

// Процедуру следует использовать, если строки были добавлены программно (не интерактивно), например, при вставке из буфера, при заполнении по спецификации.
// Процедура выполняет действия которые зависят от данных в строках
//
&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивИдентификаторовСтрок = Неопределено, СтруктураРанееВыполненныхДействий = Неопределено)

	СписокТЧ = СтрРазделить(ИмяТЧ, ",");
	
	Если СписокТЧ.Найти("Продукция") <> Неопределено
			ИЛИ СписокТЧ.Найти("ВозвратныеОтходы") <> Неопределено
			ИЛИ СписокТЧ.Найти("РедактированиеЭтаповВыходныеИзделия") <> Неопределено
			ИЛИ СписокТЧ.Найти("РедактированиеЭтаповПобочныеИзделия") <> Неопределено Тогда
		ОпределитьКоличествоВыходныхИзделий(ЭтаФорма);
	КонецЕсли; 
	
	Если СписокТЧ.Найти("Услуги") <> Неопределено Тогда
		КоличествоУслуг = Объект.Услуги.Количество();
		ПриИзмененииСуммыУслуг(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПересчетаКоличестваЕдиниц(ИмяТабличнойЧасти, ТекущаяСтрока)

	НужноОкруглятьКоличество = Истина;
	
	Если ИмяТабличнойЧасти = "Материалы"
		И ТекущаяСтрока <> Неопределено
		И ТипЗнч(ТекущаяСтрока.ВариантОбеспечения) = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется") Тогда
		НужноОкруглятьКоличество = Ложь;
	КонецЕсли;
	
	Если НЕ НужноОкруглятьКоличество Тогда
		ПараметрыПересчета = Новый Структура("НужноОкруглять", Ложь);
		Возврат ПараметрыПересчета;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТабличнаяЧастьПоИмени(ИмяТЧ, Форма)

	Если ИмяТЧ = "РедактированиеЭтаповОбеспечениеМатериаламиИРаботами" Тогда
		ТабличнаяЧасть = Форма.РедактированиеЭтапов.ОбеспечениеМатериаламиИРаботами;
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповВыходныеИзделия" Тогда
		ТабличнаяЧасть = Форма.РедактированиеЭтапов.ВыходныеИзделия;
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповПобочныеИзделия" Тогда
		ТабличнаяЧасть = Форма.РедактированиеЭтапов.ПобочныеИзделия;
	ИначеЕсли ИмяТЧ = "РедактированиеЭтаповЭтапы" Тогда
		ТабличнаяЧасть = Форма.РедактированиеЭтапов.Этапы;
	Иначе
		ТабличнаяЧасть = Форма.Объект[ИмяТЧ];
	КонецЕсли; 

	Возврат ТабличнаяЧасть;
	
КонецФункции
 
//++ НЕ УТКА

&НаСервере
Процедура ЗаполнитьПоЗаказуНаПроизводство(ВыделенныеСтроки)

	НомераГруппыЗатрат = Новый Массив;
	
	ИмяПоляГруппаЗатрат = ИмяПоляГруппаЗатрат(Объект);
	
	ВыбранныеЭтапыГрафика = Новый Массив;
	Для каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если ЗначениеЗаполнено(ТекущиеДанные[ИмяПоляГруппаЗатрат])
			И НомераГруппыЗатрат.Найти(ТекущиеДанные[ИмяПоляГруппаЗатрат]) = Неопределено Тогда
			
			СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, ТекущиеДанные[ИмяПоляГруппаЗатрат]);
		 	СтрокаУслуга = Объект.Услуги.НайтиСтроки(СтруктураПоиска)[0];
			ДанныеЭтапа = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
			ЗаполнитьЗначенияСвойств(ДанныеЭтапа, СтрокаУслуга);
			ВыбранныеЭтапыГрафика.Добавить(ДанныеЭтапа);
			НомераГруппыЗатрат.Добавить(ТекущиеДанные[ИмяПоляГруппаЗатрат]);
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если НомераГруппыЗатрат.Количество() <> 0 Тогда
		Документы.ЗаказПереработчику.ЗаполнитьПоЗаказуНаПроизводство(ВыбранныеЭтапыГрафика, Объект, НомераГруппыЗатрат);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьПодборРаспоряжений()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",        Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("Партнер",       Объект.Партнер);
	ПараметрыФормы.Вставить("Продукция",     Объект.Продукция);
	ПараметрыФормы.Вставить("Услуги",        Объект.Услуги);
	ПараметрыФормы.Вставить("Склад",         Объект.Склад);
	ПараметрыФормы.Вставить("ТолькоПросмотр",ТолькоПросмотр);
	ПараметрыФормы.Вставить("ЗапрещенВыборНовыхЭтапов", Объект.ПометкаУдаления);
	ПараметрыФормы.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("ГруппировкаЗатрат", Объект.ГруппировкаЗатрат);
	ПараметрыФормы.Вставить("ЗаголовокПоляГруппыЗатрат", ПереработкаНаСторонеКлиентСервер.ЗаголовокПоляГруппыЗатрат(Объект.ГруппировкаЗатрат));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборРаспоряженийЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказПереработчику.Форма.ПодборРаспоряжений", ПараметрыФормы,,,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборРаспоряженийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ПодборРаспоряженийЗавершениеНаСервере(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодборРаспоряженийЗавершениеНаСервере(ДанныеЗаполнения)
	
	ЭтапыГрафика = Новый Массив;
	Для каждого СтрокаКоллекции Из ДанныеЗаполнения.ЭтапыГрафика Цикл
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
			СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаКоллекции);
			СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				ЭтапыГрафика.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаКоллекции));
			КонецЕсли;
		Иначе
			СтруктураПоиска = Новый Структура("Распоряжение", СтрокаКоллекции);
			СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				ЭтапыГрафика.Добавить(СтрокаКоллекции);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		
		Документы.ЗаказПереработчику.ЗаполнитьПоЗаказуНаПроизводство(ЭтапыГрафика, Объект);
		ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
		
	Иначе
		
		СписокНовыхУслуг = Документы.ЗаказПереработчику.ЗаполнитьПоЭтапамПроизводства(ЭтапыГрафика, Объект);
		ИнициализироватьРедактированиеЭтапов(СписокНовыхУслуг);
		
	КонецЕсли;
	
	УдалитьУслугиПослеВыбораРаспоряжений(ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) 
		И ЗначениеЗаполнено(ДанныеЗаполнения.РеквизитыШапки.Организация) Тогда
		Объект.Организация = ДанныеЗаполнения.РеквизитыШапки.Организация;
		ПриИзмененииОрганизацииСервер();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) 
		И ЗначениеЗаполнено(ДанныеЗаполнения.РеквизитыШапки.Партнер) Тогда
		Объект.Партнер = ДанныеЗаполнения.РеквизитыШапки.Партнер;
		ПриИзмененииПартнераСервер();
	КонецЕсли; 
	
	ОбновитьИнформациюПоЗаказам();
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьЗапланированноеКоличествоЭтапов();
	
	УстановитьДоступностьНаправленияДеятельности(ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУслугиПослеВыбораРаспоряжений(ДанныеЗаполнения)

	СтрокиУслугКУдалению = Новый Массив;
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
			ЭтапГрафикаВыбран = Ложь;
			Для каждого ДанныеЭтапа Из ДанныеЗаполнения.ЭтапыГрафика Цикл
				Если ДанныеЭтапа.Распоряжение = СтрокаУслуга.Распоряжение
					И ДанныеЭтапа.КодСтрокиЭтапыГрафик = СтрокаУслуга.КодСтрокиЭтапыГрафик Тогда
					ЭтапГрафикаВыбран = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			Если НЕ ЭтапГрафикаВыбран Тогда
				СтрокиУслугКУдалению.Добавить(СтрокаУслуга);
			КонецЕсли; 
		Иначе
			Если ДанныеЗаполнения.ЭтапыГрафика.Найти(СтрокаУслуга.Распоряжение) = Неопределено Тогда
				СтрокиУслугКУдалению.Добавить(СтрокаУслуга);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла; 
	
	СписокТЧ = Новый Массив;
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		СписокТЧ.Добавить("Продукция");
		СписокТЧ.Добавить("ВозвратныеОтходы");
		СписокТЧ.Добавить("Материалы");
	Иначе
		СписокТЧ.Добавить("РедактированиеЭтаповВыходныеИзделия");
		СписокТЧ.Добавить("РедактированиеЭтаповПобочныеИзделия");
		СписокТЧ.Добавить("РедактированиеЭтаповОбеспечениеМатериаламиИРаботами");
	КонецЕсли;
	
	Для каждого СтрокаУслуга Из СтрокиУслугКУдалению Цикл
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
		Для каждого ИмяТЧ Из СписокТЧ Цикл
			ТабличнаяЧасть = ТабличнаяЧастьПоИмени(ИмяТЧ, ЭтаФорма);
			СписокСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Для каждого ДанныеСтроки Из СписокСтрок Цикл
				ТабличнаяЧасть.Удалить(ДанныеСтроки);
			КонецЦикла; 
		КонецЦикла; 
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
			СтруктураПоиска = Новый Структура("Распоряжение", СтрокаУслуга.Распоряжение);
   			СписокСтрок = РедактированиеЭтапов.Этапы.НайтиСтроки(СтруктураПоиска);
			Для каждого ДанныеСтроки Из СписокСтрок Цикл
				РедактированиеЭтапов.Этапы.Удалить(ДанныеСтроки);
			КонецЦикла; 
		КонецЕсли; 
		Объект.Услуги.Удалить(СтрокаУслуга);
	КонецЦикла; 

	ПослеИзмененияСтрокТЧПрограммноНаСервере(СтрСоединить(СписокТЧ, ",") + ",Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатурыЭтапа(СтрокаТабличнойЧасти, ИмяТЧ)

	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ПараметрыПроверкиСерий = Новый Структура;
		ПараметрыПроверкиСерий.Вставить("Склад", СтрокаТабличнойЧасти.Склад);
		ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерийРедактированиеЭтапов[ИмяТЧ]);
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	КонецЕсли; 
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			СтрокаТабличнойЧасти, 
			ИмяТЧ, 
			ЭтаФорма, 
			СтруктураДействий);
			
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		УправлениеПроизводствомКлиентСервер.ОчиститьНазначениеРедактированиеВСтроке(СтрокаТабличнойЧасти);
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУпаковкиСтрокиЭтапа(СтрокаТабличнойЧасти, ИмяТЧ)

	УправлениеПроизводствомКлиент.ПриИзмененииУпаковки(
			СтрокаТабличнойЧасти, 
			ИмяТЧ, 
			ЭтаФорма, 
			КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковокВТЧЭтапа(СтрокаТабличнойЧасти, ИмяТЧ)

	УправлениеПроизводствомКлиент.ПриИзмененииКоличестваУпаковокЭтапа(
			СтрокаТабличнойЧасти, 
			ИмяТЧ, 
			ЭтаФорма, 
			КэшированныеЗначения);
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.КИсполнению")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПереработчикам.Закрыт") Тогда
		
		Если НЕ Объект.ПоступлениеОднойДатой Тогда
			ЗаполнитьПустыеДатыПоступления();
		Иначе
			ЗаполнитьПустуюДатуПоступления();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
		И Не (ГрафикИсполненияВДоговоре И Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов")) Тогда
		
		СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
		
		Если Объект.СуммаСНДС = 0 И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Объект.ЭтапыГрафикаОплаты.Очистить();
			
		ИначеЕсли Объект.СуммаСНДС <> СуммаЭтаповОплаты Тогда
			
			Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
				
				ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
					Объект,
					ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления"),
					Объект.ЖелаемаяДатаПоступления,
					Объект.СуммаСНДС);
				
			Иначе
				
				ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, Объект.СуммаСНДС);
				
			КонецЕсли;
			
			ЭтапыОплатыКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
			
		КонецЕсли;
		
		НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	// Предложим пользователю скорректировать желаемую дату поступления
	
	Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) Тогда
		
		МаксДатаАванса = МаксимальнаяДатаАванса();
		
		Если НЕ ОтветПередЗаписью И ЗначениеЗаполнено(МаксДатаАванса) И МаксДатаАванса > Объект.ЖелаемаяДатаПоступления Тогда
			
			ТекстВопроса = НСтр("ru='Желаемая дата поступления меньше даты этапов предоплаты. Дата будет скорректирована до %МаксДатаАванса%'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
			
			ДополнительныеПараметры.Вставить("МаксДатаАванса", МаксДатаАванса);
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				ТекстВопроса,
				РежимДиалогаВопрос.ОКОтмена);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработатьЗаписьОбъектаВФорме(ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МаксДатаАванса = ДополнительныеПараметры.МаксДатаАванса;
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
		ОтветПередЗаписью = Истина;
		Объект.ЖелаемаяДатаПоступления = МаксДатаАванса;
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьКоличествоВыходныхИзделий(Форма)

	Форма.КоличествоВыходныхИзделий = 
		Форма.Объект.Продукция.Количество() 
		+ Форма.Объект.ВозвратныеОтходы.Количество()
		//++ НЕ УТКА
		+ Форма.РедактированиеЭтапов.ВыходныеИзделия.Количество()
		+ Форма.РедактированиеЭтапов.ПобочныеИзделия.Количество()
		//-- НЕ УТКА
		;

КонецПроцедуры
 
// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПорядокОплатыПоУмолчанию()
	
	ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчет, Объект.Касса);
	
	Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(ВалютаДокумента,,ВалютаОплаты);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗакупкуПодДеятельность(Заполнить = Истина)
	
	Если Заполнить Тогда 
		Объект.ЗакупкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(Объект.Организация, Объект.Склад, Объект.Дата);
	КонецЕсли;
	
	УчетНДСУТ.ЗаполнитьСписокВыбораДеятельностиНДСПотребления(
		Элементы.ЗакупкаПодДеятельность,
		Объект.Организация,
		Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПоПереработкеПриИзменении(Элемент)
	
	НастроитьВидимостьИЗаполнениеУслуг(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИЗаполнениеУслуг(Форма)
	
	ИспользоватьУслуги = (Форма.Объект.УслугиПоПереработке = ПредопределенноеЗначение("Перечисление.ВариантыОформленияУслугДокументовПереработки.УказываютсяВЗаказеОтчете"));
	ПоЭтапам = (Форма.Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства"));
	
	Форма.Элементы.ГруппаОплата.Видимость                 = ИспользоватьУслуги;
	Форма.Элементы.ГруппаСтраницыВсегоПродукция.Видимость = ИспользоватьУслуги;
	Форма.Элементы.ВалютаДокумента.Видимость              = ИспользоватьУслуги Или Не ПоЭтапам;
	
	Форма.Элементы.СтраницаУслуги.Видимость               = ИспользоватьУслуги;
	
	Форма.Элементы.БанковскийСчет.Видимость               = ИспользоватьУслуги;
	Форма.Элементы.ГруппаФинансовогоУчета.Видимость       = ИспользоватьУслуги;
	
	Если Не ИспользоватьУслуги Тогда
		
		Форма.Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка");
		Форма.Объект.ГруппаФинансовогоУчета = ПредопределенноеЗначение("Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка");
		
		Форма.Объект.Сумма = 0;
		Форма.Объект.СуммаНДС = 0;
		
		Для Каждого Строка Из Форма.Объект.Услуги Цикл
			Строка.Сумма = 0;
			Строка.СуммаНДС = 0;
			Строка.СуммаСНДС = 0;
		КонецЦикла;
		
		ПриИзмененииСуммыУслуг(Форма);
		
		Форма.Объект.ЭтапыГрафикаОплаты.Очистить();
		
		Форма.НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(Форма, Истина);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказ(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЗаказЗавершение", ЭтотОбъект),
						НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?'"),РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказФрагмент()
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ЗаказПереработчику.ФормаДокумента.Команда.ЗакрытьЗаказФрагмент");
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	
	СтруктураЗакрытия = ЗаказыКлиентСервер.ПараметрыПомощникаЗакрытияЗаказов();
	СтруктураЗакрытия.Заказы                               = СписокЗаказовКЗакрытию;
	СтруктураЗакрытия.ДокументИнициатор                    = Объект.Ссылка;
	СтруктураЗакрытия.СкорректироватьМерныеТоварыПоПриемке = Истина;

	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураДополнительныхПараметров.ПроверятьОстатки = Не (ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован);
	
	СтруктураРезультата = ДокументОбъект.СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров);
	
	Если СтруктураРезультата.КоличествоСтрок <> 0 Тогда
		
		ДокументОбъект.ЗаполнитьЭтапыГрафикаОплаты();
		
	КонецЕсли;
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПереработчикам.Закрыт;
		
		Если НЕ Объект.ПоступлениеОднойДатой Тогда
			Если ПроверитьПустуюДатуПоступленияСервер() Тогда
				
				Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
					ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
				Иначе
					ДатаПоступления = ТекущаяДатаСеанса();
				КонецЕсли;
				
				ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления);
				
			КонецЕсли;
		Иначе
			Если ПроверитьПустуюДатуПоступленияСервер() Тогда
				
				Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
					Объект.ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
				Иначе
					Объект.ДатаПоступления = ТекущаяДатаСеанса();
				КонецЕсли;
				
				ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
				
			КонецЕсли;
		КонецЕсли;
		
		ПриИзмененииСтатусаСервер();
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизиты();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьДействиеПроверитьЗаполнитьСклад(ИмяТЧ, Форма, СтруктураДействий) 
	
	Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "ВозвратныеОтходы" Тогда
		СтруктураПараметровДействия = Новый Структура("Склад, СкладГруппа", Форма.Объект.Склад, Форма.СкладГруппа);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", СтруктураПараметровДействия);
	ИначеЕсли НЕ Форма.ИспользоватьНесколькоСкладов Тогда
		СтруктураПараметровДействия = Новый Структура("Склад, СкладГруппа", Форма.СкладПоУмолчанию, Ложь);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", СтруктураПараметровДействия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ОтветПередЗаписью = Ложь;

#КонецОбласти
