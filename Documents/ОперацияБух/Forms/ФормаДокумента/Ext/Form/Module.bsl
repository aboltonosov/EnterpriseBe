
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	//При открытии из журнала проводок активизируем выбранную строку
	Если ЗначениеЗаполнено(Параметры.ПараметрТекущаяСтрока) Тогда
		Элементы.Хозрасчетный.ТекущаяСтрока  = Параметры.ПараметрТекущаяСтрока-1;
	КонецЕсли;
	
	СоответствиеДоступныхТипов = ОбщегоНазначенияПовтИсп.ДоступностьОбъектовПоОпциям();
	Для каждого Тип из Метаданные.РегистрыБухгалтерии.Хозрасчетный.СтандартныеРеквизиты.Регистратор.Тип.Типы() Цикл
		Если Не СоответствиеДоступныхТипов.Получить(Метаданные.НайтиПоТипу(Тип).ПолноеИмя()) = Ложь Тогда
			СписокТиповДокументовОснования.Добавить(Тип);
		КонецЕсли;
	КонецЦикла;
	СписокТиповДокументовОснования.Добавить(Тип("ДокументСсылка.ИнвентаризацияОС"));
	СписокТиповДокументовОснования.СортироватьПоЗначению();
	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ОбновлениеОтображения();
	УстановитьЗаголовкиПодразделения();
	
	УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Прочитать();
	КонецЕсли;
	
	УстановитьДоступностьСубконто();
	
	ОбновлениеОтображения();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОтражениеДокументовВРегламентированномУчете", Объект.Ссылка, ЭтотОбъект);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Оповестить("ЗаписьДокументаНаОснованииИнвентаризации",, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не СписокТиповДокументовОснования.НайтиПоЗначению(ТипЗнч(ВыбранноеЗначение)) = Неопределено Тогда
		Стр = Объект.ЗаполнениеДвижений.Добавить();
		Стр.Документ = ВыбранноеЗначение;
		ОтобразитьВводДокументовОснования(ЭтотОбъект);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобыйтиЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ЕстьДвижения = Объект.Движения.Хозрасчетный.Количество() > 0;

	Если ЕстьДвижения Тогда
		ТекстВопроса = НСтр("ru = 'Указанные в проводках расчетные счета, договоры, подразделения, документы будут очищены. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПриИзменииОрганизацииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ТекущаяОрганизация = Объект.Организация;
		УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	 
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура КорректировкаРегистровНДСПриИзменении(Элемент)
	
	КорректировкаРегистровНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельРегистровПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьВидКнопокКоманднойПанелиНаСтраницеРегистра(ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументовОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ЗаполнениеДвижений.Количество() = 0 Тогда
		Обработчик = Новый ОписаниеОповещения("ЗаполнитьСторнируемыйДокумент", ЭтотОбъект);
		СписокТиповДокументовОснования.ПоказатьВыборЭлемента(Обработчик, НСтр("ru = 'Выберите тип:'"));
	ИначеЕсли Объект.ЗаполнениеДвижений.Количество() = 1 Тогда
		ПоказатьЗначение(, Объект.ЗаполнениеДвижений.Получить(0).Документ);
	Иначе
		ПараметрыФормы = Новый Структура("ТаблицаЗначений", Объект.ЗаполнениеДвижений);
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Редактирование списка связанных документов'"));
		ПараметрыФормы.Вставить("ПараметрыФункциональныхОпций", Новый Структура("Организация, Дата", Объект.Организация, Объект.Дата));
		ОбработкаСохраненияТаблицыЗначений = Новый ОписаниеОповещения("ЗаполнитьТаблицуСторнируемыхДокументов", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаРедактированияТаблицыЗначений", ПараметрыФормы, ЭтотОбъект,
			УникальныйИдентификатор,,, ОбработкаСохраненияТаблицыЗначений, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСпискаХозрасчетный

&НаКлиенте
Процедура ХозрасчетныйПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ХозрасчетныйСубконтоДт1", "ХозрасчетныйСубконтоДт2", "ХозрасчетныйСубконтоДт3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтотОбъект, ПоляФормы, Неопределено, Истина);
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ХозрасчетныйСубконтоКт1", "ХозрасчетныйСубконтоКт2", "ХозрасчетныйСубконтоКт3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтотОбъект, ПоляФормы, Неопределено, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ОбновитьИтогиПоДокументу(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйПослеУдаления(Элемент)

	ОбновитьИтогиПоДокументу(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетДтПриИзменении(Элемент)

	ОбработатьИзменениеСчета("Дт");

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетКтПриИзменении(Элемент)

	ОбработатьИзменениеСчета("Кт");

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютаДтПриИзменении(Элемент)

	РасчетСуммы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютнаяСуммаДтПриИзменении(Элемент)
	
	РасчетСуммы(Истина);
	ОбновитьИтогиПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютаКтПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетДт);
		Если СвойстваСчета.Валютный Тогда
			Возврат; // Если оба счета валютные, сумма пересчитывается при изменении счета Дт
		КонецЕсли;
	КонецЕсли;

	РасчетСуммы(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютнаяСуммаКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетДт);
		Если СвойстваСчета.Валютный Тогда
			Возврат; // Если оба счета валютные, сумма пересчитывается при изменении счета Дт
		КонецЕсли;
	КонецЕсли;
	
	РасчетСуммы(Ложь);
	ОбновитьИтогиПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСуммаПриИзменении(Элемент)
	
	РасчетСуммы();
	ОбновитьИтогиПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьПараметрыВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьПараметрыВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьПараметрыВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьПараметрыВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьПараметрыВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьПараметрыВыбора(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСписковРегистровНакопленийИСведений

// Общая процедура для всех регистров. Устанавливает период и организацию в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Свойство("Период") Тогда
		Элемент.ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;

	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Организация")
			И ЗначениеЗаполнено(Объект.Организация) Тогда
		Элемент.ТекущиеДанные.Организация = Объект.Организация;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Свойство("НоменклатурнаяГруппа") И Элемент.ТекущиеДанные.Свойство("ХарактерДеятельности") Тогда
		Элемент.ТекущиеДанные.НоменклатурнаяГруппа = ИПОсновнаяНоменклатурнаяГруппа;
		Элемент.ТекущиеДанные.ХарактерДеятельности = ИПОсновнойХарактерДеятельности;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Активность = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнить(Команда)

	Если Объект.ЗаполнениеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	// Очистка существующих движений
	Если ЕстьДвижения() Тогда
		ТекстВопроса = НСтр("ru = 'Существующие проводки и движения регистров будут очищены.
			|Продолжить?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе
		//Формирование движений
		СформироватьДвиженияСторноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьАктуальностьПроводок(Команда)
	
	Записать();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокумент(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьСторнируемыйДокумент", ЭтотОбъект);
	СписокТиповДокументовОснования.ПоказатьВыборЭлемента(Обработчик, НСтр("ru = 'Выберите тип:'"));
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокумент(Команда)
	Объект.ЗаполнениеДвижений.Очистить();
	ОтобразитьВводДокументовОснования(ЭтотОбъект);
КонецПроцедуры

#Область ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура КорректировкаРегистровНДСПриИзмененииСервер()
	
	СписокРегистровДляОтражения = ВернутьСписокРегистровДляОтражения(Регистры, КорректировкаРегистровНДС);
	ПрименитьНастройкуСоставаРегистров(СписокРегистровДляОтражения);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация",    Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",      ТекущиеДанные[ИмяПоляСчетУчета]);
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Организации") Тогда
			МассивОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокПараметров.Организация);
			МассивОрганизаций.Добавить(ТекущиеДанные[ИмяПоля]);
			СписокПараметров.Вставить("Организация", Новый ФиксированныйМассив(МассивОрганизаций));
		ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ТекущиеДанные[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущиеДанные[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "")
	
	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект.Движения.Хозрасчетный.НайтиПоИдентификатору(ИдСтроки);
		Если ДтКт <> "Кт" Тогда
			ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
			БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
				Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "ХозрасчетныйСубконтоДт%Индекс%", ПараметрыДокумента);
			СтрокаТаблицы["СчетДтИспользоватьНеРекомендуется"] = (Форма.НерекомендуемыеСчетаУчета.НайтиПоЗначению(СтрокаТаблицы.СчетДт) <> Неопределено);
		КонецЕсли;
		Если ДтКт <> "Дт" Тогда
			ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
			БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
				Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "ХозрасчетныйСубконтоКт%Индекс%", ПараметрыДокумента);
			СтрокаТаблицы["СчетКтИспользоватьНеРекомендуется"] = (Форма.НерекомендуемыеСчетаУчета.НайтиПоЗначению(СтрокаТаблицы.СчетКт) <> Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, Элемент, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.Хозрасчетный.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтотОбъект, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСчета(ДтКт)

	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ХозрасчетныйСубконто"+ДтКт+"1", "ХозрасчетныйСубконто"+ДтКт+"2", "ХозрасчетныйСубконто"+ДтКт+"3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные["Счет"+ДтКт], ЭтотОбъект, ПоляФормы, Неопределено, Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"Субконто"+ДтКт+"1", "Субконто"+ДтКт+"2", "Субконто"+ДтКт+"3");
	ПоляОбъекта.Вставить("Подразделение", "Подразделение"+ДтКт);
	ПоляОбъекта.Вставить("Организация"  , Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные["Счет"+ДтКт], ТекущиеДанные, ПоляОбъекта, Истина);
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные["Счет"+ДтКт]);
	Если СвойстваСчета.Валютный Тогда
		ТекущиеДанные["Валюта" + ДтКт]        = ОписаниеТиповВалюта.ПривестиЗначение(ТекущиеДанные["Валюта" + ДтКт]);
		ТекущиеДанные["ВалютнаяСумма" + ДтКт] = ОписаниеТиповСумма.ПривестиЗначение(ТекущиеДанные["ВалютнаяСумма" + ДтКт]);
	Иначе
		ТекущиеДанные["Валюта"+ДтКт]        = NULL;
		ТекущиеДанные["ВалютнаяСумма"+ДтКт] = NULL;
	КонецЕсли;
	Если СвойстваСчета.УчетПоПодразделениям Тогда
		ТекущиеДанные["Подразделение" + ДтКт] = ОписаниеТиповПодразделение.ПривестиЗначение(ТекущиеДанные["Подразделение" + ДтКт]);
	Иначе
		ТекущиеДанные["Подразделение" + ДтКт] = NULL;
	КонецЕсли;
	Если НЕ СвойстваСчета.УчетПоНаправлениямДеятельности Тогда
		ТекущиеДанные["НаправлениеДеятельности" + ДтКт] = NULL;
	КонецЕсли;
	Если СвойстваСчета.НалоговыйУчет Тогда
		ТекущиеДанные["СуммаНУ" + ДтКт] = ОписаниеТиповСумма.ПривестиЗначение(ТекущиеДанные["СуммаНУ" + ДтКт]);
		ТекущиеДанные["СуммаПР" + ДтКт] = ОписаниеТиповСумма.ПривестиЗначение(ТекущиеДанные["СуммаПР" + ДтКт]);
		ТекущиеДанные["СуммаВР" + ДтКт] = ОписаниеТиповСумма.ПривестиЗначение(ТекущиеДанные["СуммаВР" + ДтКт]);
	Иначе
		ТекущиеДанные["СуммаНУ" + ДтКт] = NULL;
		ТекущиеДанные["СуммаПР" + ДтКт] = NULL;
		ТекущиеДанные["СуммаВР" + ДтКт] = NULL;
	КонецЕсли;
	Если СвойстваСчета.Количественный Тогда
		ТекущиеДанные["Количество" + ДтКт] = ОписаниеТиповКоличество.ПривестиЗначение(ТекущиеДанные["Количество" + ДтКт]);
	Иначе
		ТекущиеДанные["Количество" + ДтКт] = NULL;
	КонецЕсли;
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, ДтКт);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	ИспользуютсяНерекомендуемыеСчетаУчета = Ложь;
	
	Для каждого Проводка Из Объект.Движения.Хозрасчетный Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъекта);
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъекта);
		
		Проводка.СчетДтИспользоватьНеРекомендуется = (НерекомендуемыеСчетаУчета.НайтиПоЗначению(Проводка.СчетДт) <> Неопределено);
		Проводка.СчетКтИспользоватьНеРекомендуется = (НерекомендуемыеСчетаУчета.НайтиПоЗначению(Проводка.СчетКт) <> Неопределено);
		
		ИспользуютсяНерекомендуемыеСчетаУчета = 
			ИспользуютсяНерекомендуемыеСчетаУчета
			ИЛИ Проводка.СчетДтИспользоватьНеРекомендуется
			ИЛИ Проводка.СчетКтИспользоватьНеРекомендуется;
		
	КонецЦикла;
	
	Элементы.ГруппаИспользуютсяНерекомендуемыеСчета.Видимость = ИспользуютсяНерекомендуемыеСчетаУчета;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиПодразделения()

	ИспользуетсяУчетПоНаправлениям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности")
								ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности")
								ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетДСпоНаправлениямДеятельностиРаздельно")
								ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетДСпоНаправлениямДеятельностиПоКорреспонденции")
								ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетВнеоборотныхАктивовПоНаправлениямДеятельности");
	ШаблонЗаголовка = НСтр("ru = 'Подразделение %1'");
	Если ИспользуетсяУчетПоНаправлениям Тогда
		ШаблонЗаголовка = ШаблонЗаголовка + ", " + НСтр("ru = 'Направление %1'")
	КонецЕсли;
	Элементы.ХозрасчетныйНаправлениеДт.Доступность = ИспользуетсяУчетПоНаправлениям;
	Элементы.ХозрасчетныйНаправлениеКт.Доступность = ИспользуетсяУчетПоНаправлениям;
	
	Элементы.ХозрасчетныйПодразделениеДт.Заголовок = СтрШаблон(ШаблонЗаголовка, НСтр("ru = 'Дт'"));
	Элементы.ХозрасчетныйПодразделениеКт.Заголовок = СтрШаблон(ШаблонЗаголовка, НСтр("ru = 'Кт'"));
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормой

&НаСервере
Процедура ОбновлениеОтображения()

	ОтобразитьВводДокументовОснования(ЭтотОбъект);
	
	ПолучитьСостояниеОтраженияДокумента();

	Элементы.ФормаПровестиИЗакрыть.Видимость = Не Элементы.ПодтвердитьАктуальностьПроводок.Видимость;
	Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию = Не Элементы.ПодтвердитьАктуальностьПроводок.КнопкаПоУмолчанию;
	Элементы.ФормаПровести.Видимость = Не Элементы.ПодтвердитьАктуальностьПроводок.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()

	ПоказатьХозрасчетный               = Истина;
	ПоказатьКнигаУчетаДоходовИРасходов = Ложь;
	ПоказатьРасшифровкаКУДиР           = Ложь;
	ПорядковыйНомер                    = 0;
	КоличествоВидимых                  = 0;
	Всего                              = Регистры.Количество();

	Для каждого СтрокаРегистра Из Регистры Цикл

		ПорядковыйНомер = ПорядковыйНомер + 1;
		КоличествоВидимых = КоличествоВидимых + Число(СтрокаРегистра.Отображение);

		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			Продолжить;
		КонецЕсли;

		// Создаем страницу для регистра в "правильном" месте между "предопределенными" закладками
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено И КорректировкаРегистровНДС Тогда

			//Найдем группу перед которой будем вставлять новую группу
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда

					ВпередиСледующийЭлемент=Элементы["Группа" + Строка.Имя];
					Прервать;

				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(
				ИмяГруппы,
				Тип("ГруппаФормы"),
				Элементы.ПанельРегистров,
				ВпередиСледующийЭлемент);

			ТекГруппа.Заголовок = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРБ;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРН;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРС;
			КонецЕсли;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ТекТаблица.ПутьКДанным = "Объект.Движения." + СтрокаРегистра.Имя;
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			ТекТаблица.КартинкаСтрок = КартинкаАктивности;
			ТекТаблица.ПутьКДаннымКартинкиСтроки = "Объект.Движения." + СтрокаРегистра.Имя+".Активность";

			// Определяем набор колонок для таблицы, соответствующих метаданным регистра
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
				МетаданныеРегистра    = Метаданные.РегистрыНакопления[СтрокаРегистра.Имя];
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
				МетаданныеРегистра    = Метаданные.РегистрыСведений[СтрокаРегистра.Имя];
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
				МетаданныеРегистра    = Метаданные.РегистрыБухгалтерии[СтрокаРегистра.Имя];
			КонецЕсли;

			РеквизитыНабораЗаписей = НаборЗаписей.ВыгрузитьКолонки();

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
			КонецЕсли;

			// Обновление заголовков колонок таблицы по синонимам полей регистра.
			МассивПолейРегистра = Новый Массив;
			МассивПолейРегистра.Добавить("Реквизиты");
			МассивПолейРегистра.Добавить("Измерения");
			МассивПолейРегистра.Добавить("Ресурсы");

			Для каждого ВидПоля Из МассивПолейРегистра Цикл
				Для каждого Поле Из МетаданныеРегистра[ВидПоля] Цикл
					КолонкаТаблицы = РеквизитыНабораЗаписей.Колонки.Найти(Поле.Имя);
					Если КолонкаТаблицы <> Неопределено Тогда
						КолонкаТаблицы.Заголовок = Поле.Синоним;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
			КонецЦикла;

			УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(СтрокаРегистра.Имя);
			
		КонецЕсли;

		// Делаем страницу регистра невидимой, если она не нужна
		Если ТекГруппа <> Неопределено Тогда
			ТекГруппа.Видимость = КорректировкаРегистровНДС;
		КонецЕсли;

	КонецЦикла;

	Элементы.ГруппаХозрасчетный.Видимость = ПоказатьХозрасчетный;

КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму()

	МетаданныеДокумента = Документы.ОперацияБух.ПустаяСсылка().Метаданные();
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ОбновитьФорму();

	ТекущаяОрганизация = Объект.Организация;

	ОписаниеТиповВалюта        = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ОписаниеТиповКоличество    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
	ОписаниеТиповПодразделение = БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения();
	ОписаниеТиповСумма         = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	ТипыСвязанныеСОрганизацией = БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией();
	// Назначаем общий обработчик
	Элементы.Хозрасчетный.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
	
	НерекомендуемыеСчетаУчета.ЗагрузитьЗначения(Документы.ОперацияБух.НерекомендуемыеСчетаУчета());
	
	УстановитьДоступностьСубконто();

	ОбновлениеОтображения();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = Объект.Ссылка.Метаданные();
	КонецЕсли;

	Регистры.Очистить();
	КорректировкаРегистровНДС = Ложь;

	Для Каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		//++ НЕ УТКА
		Если МетаданныеРегистра.Имя = "Международный"
			 ИЛИ МетаданныеРегистра.Имя = "ОтражениеДокументовВМеждународномУчете"
			 ИЛИ МетаданныеРегистра.Имя = "ФактическиеДанныеБюджетирования"
			 ИЛИ МетаданныеРегистра.Имя = "ОтражениеДокументовВРеглУчете" Тогда
			Продолжить;
		КонецЕсли;
		//-- НЕ УТКА
		Регистр     = Регистры.Добавить();
		Регистр.Имя = МетаданныеРегистра.Имя;
		ПолноеИмя   = МетаданныеРегистра.ПолноеИмя();

		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		Регистр.ТипРегистра = ТипРегистра;
		Регистр.Синоним     = МетаданныеРегистра.Синоним;

		Если Регистр.ТипРегистра = "РегистрНакопления" Тогда
			Регистр.РегистрОстатков = (МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
		КонецЕсли;

		Регистр.ЕстьДвижения = (Объект.Движения[Регистр.Имя].Количество() > 0);
		
		Если Регистр.ЕстьДвижения Тогда
			
			Регистр.Отображение  = Истина;
			
		ИначеЕсли Регистр.Имя = "Хозрасчетный" Тогда
			
			Регистр.Отображение  = Истина; // Этот регистр отображается всегда
			
		Иначе
			
			// Отображаем те регистры, которые пользователь отметил флагами
			Отбор = Новый Структура("Имя", Регистр.Имя);
			Если Объект.ТаблицаРегистровНакопления.НайтиСтроки(Отбор).Количество() > 0 Тогда
				Регистр.Отображение  = Истина;
			ИначеЕсли Объект.ТаблицаРегистровСведений.НайтиСтроки(Отбор).Количество() > 0 Тогда
				Регистр.Отображение  = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		// Указываем, что должен быть активен флажок корректировки регистро НДС:
		Если Не Регистр.Имя = "Хозрасчетный" И Регистр.Отображение Тогда
			КорректировкаРегистровНДС = Истина;
		КонецЕсли;

	КонецЦикла;

	// Первым показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура УстановитьВидКоманднойПанелиНабораЗаписей(ИмяРегистра)
	
	ЭлементыКоманднойПанели = Элементы[ИмяРегистра + "КоманднаяПанель"].ПодчиненныеЭлементы;
	
	ЭлементыКоманднойПанели[ИмяРегистра + "Добавить"].Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	КнопкаУдалить = ЭлементыКоманднойПанели.Найти(ИмяРегистра + "Удалить");
	Если Не КнопкаУдалить = Неопределено Тогда
		КнопкаУдалить.ТолькоВоВсехДействиях = Ложь;
		КнопкаУдалить.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
	
	КнопкаСкопировать = ЭлементыКоманднойПанели.Найти(ИмяРегистра + "Скопировать");
	Если Не КнопкаСкопировать = Неопределено Тогда
		КнопкаСкопировать.ТолькоВоВсехДействиях = Ложь;
		КнопкаСкопировать.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидКнопокКоманднойПанелиНаСтраницеРегистра(ИмяСтраницы)
	
	ИмяРегистраПредставленногоНаСтранице = СтрЗаменить(ИмяСтраницы, "Группа", "");
	НайденныеДанныеВТаблицеРегистров = Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистраПредставленногоНаСтранице));
	
	Если НайденныеДанныеВТаблицеРегистров.Количество() Тогда
		
		// Это страница с данными регистра, обновим для него вид кнопок командной панели.
		
		КоманднаяПанельРегистра = Элементы.Найти(ИмяРегистраПредставленногоНаСтранице + "КоманднаяПанель");
		
		Если Не КоманднаяПанельРегистра = Неопределено Тогда
			
			// Проверим, обновлены ли были кнопки ранее, для этого проверим отображение кнопки "Добавить".
			
			КнопкаДобавить = КоманднаяПанельРегистра.ПодчиненныеЭлементы.Найти(ИмяРегистраПредставленногоНаСтранице + "Добавить");
			
			Если Не КнопкаДобавить = Неопределено И Не КнопкаДобавить.Отображение = ОтображениеКнопки.КартинкаИТекст Тогда
				
				УстановитьВидКоманднойПанелиНабораЗаписей(ИмяРегистраПредставленногоНаСтранице);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОтражениеДокументаВРеглУчете

&НаСервере
Процедура ПолучитьСостояниеОтраженияДокумента()
	
	ЕстьПроводки = Объект.Движения.Хозрасчетный.Количество();
	
	СтатусОтраженияДокумента = РеглУчетПроведениеСервер.ПолучитьДанныеОтраженияДокумента(Объект.Ссылка).Статус;
	
	Состояние = "";
	
	Элементы.КартинкаВнимание.Видимость = Ложь;
	Элементы.ПодтвердитьАктуальностьПроводок.Видимость = Ложь;
	Элементы.ПодтвердитьАктуальностьПроводок.КнопкаПоУмолчанию = Ложь;
		
	Если Не СтатусОтраженияДокумента.Пустая() Тогда 
		
		Если СтатусОтраженияДокумента = Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную Тогда
			
			Состояние = НСтр("ru = 'Документ отражен в регламентированном учете.'");
			Элементы.Состояние.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			
		ИначеЕсли СтатусОтраженияДокумента = Перечисления.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную Тогда
			Если ЕстьПроводки Тогда
				НачалоСостояния = ?(Объект.ЗаполнениеДвижений.Количество() > 1, НСтр("ru = 'Исходные документы были изменены.'"),
													НСтр("ru = 'Исходный документ был изменен.'"));
				Состояние = НачалоСостояния + " " + НСтр("ru = 'Скорректируйте проводки документа или подтвердите актуальность текущих проводок.'");
				
				Элементы.Состояние.ЦветТекста = ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет;
				Элементы.КартинкаВнимание.Видимость = Истина;
				Элементы.ПодтвердитьАктуальностьПроводок.Видимость = Истина;
				Элементы.ПодтвердитьАктуальностьПроводок.КнопкаПоУмолчанию = Истина;
			Иначе
				Состояние = НСтр("ru = 'Требуется отражение документа в регламентированном учете.'");
				Элементы.Состояние.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Состояние = НСтр("ru = 'Документ не проведен.'");
		Элементы.Состояние.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	
	Элементы.ГруппаАктуальность.Видимость = СтатусОтраженияДокумента = Перечисления.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную;
	
КонецПроцедуры

#КонецОбласти

#Область Сторнирование

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьВводДокументовОснования(Форма)

	КоличествоДокументов = Форма.Объект.ЗаполнениеДвижений.Количество();
	МассивПредставления = Новый Массив;
	
	Форма.ЗаголовокДокументовОснования = ?(КоличествоДокументов > 1,	НСтр("ru = 'Связанные документы:'"), НСтр("ru = 'Связанный документ:'"));
		
	Если КоличествоДокументов = 0 Тогда
		ПредставлениеДокументовОснования = НСтр("ru = 'Выбрать документ'");
	ИначеЕсли КоличествоДокументов = 1 Тогда
		ПредставлениеДокументовОснования = Форма.Объект.ЗаполнениеДвижений.Получить(0).Документ;
	Иначе
		ПредставлениеДокументовОснования = СтрШаблон(НСтр("ru = 'Открыть список (%1)'"), КоличествоДокументов);
	КонецЕсли;
	Форма.ПредставлениеДокументовОснования = ПредставлениеДокументовОснования;
		
	Форма.Элементы.ГруппаКомандУправленияСвязаннымиДокументами.Видимость = КоличествоДокументов = 1;
	Форма.Элементы.КнопкаЗаполнить.Видимость = КоличествоДокументов > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуСторнируемыхДокументов(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не Результат = Неопределено И ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.ЗаполнениеДвижений.Очистить();
		Для каждого Стр из Результат Цикл
			НоваяСтрокаЗаполненияДвижений = Объект.ЗаполнениеДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаполненияДвижений, Стр);
		КонецЦикла;
		ОтобразитьВводДокументовОснования(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСторнируемыйДокумент(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ИмяДокумента = ИмяТипа(Результат.Значение);
		ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаВыбора",, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДвиженияСторноСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если Объект.Движения[СтрокаРегистра.Имя].Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Объект.Движения[СтрокаРегистра.Имя].Очистить();
	КонецЦикла;

	//Формирование движений
	ВыполнитьСторнированиеДокументов(Объект.ЗаполнениеДвижений);

	ОбновитьИтогиПоДокументу(ЭтотОбъект);
	
    УстановитьДоступностьСубконто();
	
	ОбновитьФорму();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьСторнированиеДокументов(СторнируемыеДокументы, СторнироватьРегистры = Истина, СторнироватьПроводки = Истина)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Для каждого СтрокаТЧ Из СторнируемыеДокументы Цикл
		Документ = СтрокаТЧ.Документ;
		Если НЕ ЗначениеЗаполнено(Документ) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка",
				"Заполнение",
				НСтр("ru = 'Сторнируемый документ'"),
				СтрокаТЧ.НомерСтроки,
				НСтр("ru = 'Сторнируемые документы'"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект,
				,
				"Объект");
			Продолжить;
		КонецЕсли;

		МетаданныеДокумент = Документ.Метаданные();
		Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл
			// Если документ "Ручная операция" не может иметь таких движений, то это не сторнируемый регистр.
			Если НЕ Объект.Движения.Свойство(МетаданныеРегистр.Имя) Тогда
				Продолжить;
			КонецЕсли;

			НаборДвижений = ДокументОбъект.Движения[МетаданныеРегистр.Имя];
			ЭтоРегистрБухгалтерии = Ложь;
			Если СторнироватьПроводки И Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда
				СторнируемыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
				ЭтоРегистрБухгалтерии = Истина;
			ИначеЕсли СторнироватьРегистры И Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда
				СторнируемыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			Иначе
				Продолжить;
			КонецЕсли;

			СторнируемыйНаборЗаписей.Отбор.Регистратор.Значение = Документ;
			СторнируемыйНаборЗаписей.Прочитать();
			Для Каждого ДвижениеСторнируемое Из СторнируемыйНаборЗаписей Цикл
				ДвижениеСторно = НаборДвижений.Добавить();
				// реквизиты
				Если ЭтоРегистрБухгалтерии Тогда
					ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
				Иначе
					ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
				КонецЕсли;
				ДвижениеСторно.Период = Объект.Дата;
				ДвижениеСторно.Активность = Ложь;
			КонецЦикла;
			
			Если СторнируемыйНаборЗаписей.Количество() = 0 И ЭтоРегистрБухгалтерии Тогда
				ТекстСообщения = НСтр("ru = 'Для документа %1 нет проводок для сторнирования!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Документ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , "Объект");
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);

КонецПроцедуры

// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются
//
&НаСервере
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)
	
	МассивИсключаемыхСвойств = Новый Массив;
	МассивИсключаемыхСвойств.Добавить("Период");
	МассивИсключаемыхСвойств.Добавить("Регистратор");
	МассивИсключаемыхСвойств.Добавить("ВидДвижения");
	Если МетаданныеОбъект.Реквизиты.Найти("РегламентнаяОперация") <> Неопределено Тогда
		МассивИсключаемыхСвойств.Добавить("РегламентнаяОперация");
	КонецЕсли;
	ИсключаемыеСвойства = СтрСоединить(МассивИсключаемыхСвойств, ",");
	
	ЗаполнитьЗначенияСвойств(Движение, Строка, , ИсключаемыеСвойства);
	
	// вид движения
	Если МетаданныеОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Движение.ВидДвижения = Строка.ВидДвижения;
	КонецЕсли;

	// ресурсы
	Для каждого МДОбъект Из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно

// Копирует значения движения по регистру бухгалтерии в строку сторно
// нового движения для измерений и реквизитов. Ресурсы инвертируются
//
&НаСервере
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");

	// субконто
	Если МетаданныеОбъект.Корреспонденция Тогда
		Для каждого Субконто Из Строка.СубконтоДт Цикл
			Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;
		Для каждого Субконто Из Строка.СубконтоКт Цикл
			Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;
	Иначе
		Для каждого Субконто Из Строка.Субконто Цикл
			Движение.Субконто[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;
	КонецЕсли;

	// ресурсы
	Для каждого МДОбъект Из МетаданныеОбъект.Ресурсы Цикл
		Если МДОбъект.ПризнакУчета = Неопределено Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе
			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		//Формирование движений
		СформироватьДвиженияСторноСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПроводками

&НаКлиенте
Функция ПреобразоватьДанныеЭлементаФормыВСтруктуру(ТекущиеДанные)

	СтруктураПроводки = Новый Структура("НомерСтроки,СчетДт,ПодразделениеДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|КоличествоДт,ВалютаДт,ВалютнаяСуммаДт,
		|СчетКт,ПодразделениеКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|КоличествоКт,ВалютаКт,ВалютнаяСуммаКт,
		|Сумма,Содержание,СуммаНУДт,СуммаПРДт,СуммаВРДт,СуммаНУКт,СуммаПРКт,СуммаВРКт");
	ЗаполнитьЗначенияСвойств(СтруктураПроводки, ТекущиеДанные);

	Возврат СтруктураПроводки;

КонецФункции

// Пересчитывает сумму операции при изменении сумм в проводках.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиПоДокументу(Форма)
	
	Объект = Форма.Объект;
	
	Объект.СуммаОперации = 0;
	Форма.ИспользуютсяНерекомендуемыеСчетаУчета = Ложь;
	Для каждого Проводка Из Объект.Движения.Хозрасчетный Цикл
		Объект.СуммаОперации = Объект.СуммаОперации + Проводка.Сумма;
		
		Форма.ИспользуютсяНерекомендуемыеСчетаУчета = 
			Форма.ИспользуютсяНерекомендуемыеСчетаУчета
			 ИЛИ Проводка.СчетДтИспользоватьНеРекомендуется
			 ИЛИ Проводка.СчетКтИспользоватьНеРекомендуется;
	КонецЦикла;
	
	Если Форма.ИспользуютсяНерекомендуемыеСчетаУчета <> Форма.Элементы.ГруппаИспользуютсяНерекомендуемыеСчета.Видимость Тогда
		Форма.Элементы.ГруппаИспользуютсяНерекомендуемыеСчета.Видимость = Форма.ИспользуютсяНерекомендуемыеСчетаУчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыПоСтрокеНаСервере(Проводка, Знач Дата, Знач ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если ПересчетСуммыПоКурсуДт = Истина Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Проводка.ВалютнаяСуммаДт, Проводка.ВалютаДт, Дата);
	ИначеЕсли ПересчетСуммыПоКурсуДт = Ложь Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Проводка.ВалютнаяСуммаКт, Проводка.ВалютаКт, Дата);
	КонецЕсли;
	
	ОтразитьНепринимаемыеДоходыИРасходы(Проводка);
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).НалоговыйУчет Тогда
		Проводка.СуммаНУДт = Проводка.Сумма
			- ?(Проводка.СуммаПРДт = Неопределено, 0, Проводка.СуммаПРДт)
			- ?(Проводка.СуммаВРДт = Неопределено, 0, Проводка.СуммаВРДт);
	КонецЕсли;
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).НалоговыйУчет Тогда
		Проводка.СуммаНУКт = Проводка.Сумма
			- ?(Проводка.СуммаПРКт = Неопределено, 0, Проводка.СуммаПРКт)
			- ?(Проводка.СуммаВРКт = Неопределено, 0, Проводка.СуммаВРКт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммы(ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные     = Элементы.Хозрасчетный.ТекущиеДанные;
	СтруктураПроводки = ПреобразоватьДанныеЭлементаФормыВСтруктуру(ТекущиеДанные);
	
	ПересчитатьСуммыПоСтрокеНаСервере(СтруктураПроводки, Объект.Дата, ПересчетСуммыПоКурсуДт);
	
	ЗаполнитьЗначенияСвойств(Элементы.Хозрасчетный.ТекущиеДанные, СтруктураПроводки);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьНепринимаемыеДоходыИРасходы(СтруктураПроводки)

	ОтразитьНеПринимаемыеДоходы = ОпределитьНеПринимаемыеДоходы(СтруктураПроводки);
	Если ОтразитьНеПринимаемыеДоходы Тогда
		СтруктураПроводки.СуммаПРКт = СтруктураПроводки.Сумма;
	КонецЕсли;

	ОтразитьНеПринимаемыеРасходы = ОпределитьНеПринимаемыеРасходы(СтруктураПроводки);
	Если ОтразитьНеПринимаемыеРасходы Тогда
		СтруктураПроводки.СуммаПРДт = СтруктураПроводки.Сумма;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОпределитьНеПринимаемыеДоходы(СтруктураПроводки)

	Если Не ЗначениеЗаполнено(СтруктураПроводки.СчетКт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураПроводки.СчетКт <> ПланыСчетов.Хозрасчетный.ПустаяСсылка()
		И БухгалтерскийУчетПовтИсп.СчетВИерархии(СтруктураПроводки.СчетКт, ПланыСчетов.Хозрасчетный.ПрочиеДоходы) Тогда
		
		Для НомерСубконто = 1 По 3 Цикл
			
			Субконто = СтруктураПроводки["СубконтоКт" + НомерСубконто];
			Если Не ЗначениеЗаполнено(Субконто) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Субконто) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
				
				РеквизитыСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субконто, "ЭтоГруппа,ПринятиеКналоговомуУчету");
				Если РеквизитыСубконто.ПринятиеКналоговомуУчету = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ РеквизитыСубконто.ЭтоГруппа
					И Субконто <> ПланыВидовХарактеристик.СтатьиДоходов.ПустаяСсылка() И 
					НЕ РеквизитыСубконто.ПринятиеКналоговомуУчету Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаСервере
Функция ОпределитьНеПринимаемыеРасходы(СтруктураПроводки)
	
	Если Не ЗначениеЗаполнено(СтруктураПроводки.СчетДт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для НомерСубконто = 1 По 3 Цикл
		
		Субконто = СтруктураПроводки["СубконтоДт" + НомерСубконто];
		Если Не ЗначениеЗаполнено(Субконто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Субконто) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		
			РеквизитыСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субконто, 
				"ЭтоГруппа, ВидРасходов, Представление");
			
			Если РеквизитыСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
		
			Если РеквизитыСубконто.ВидРасходов = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				// Расходы на строительство объектов основных средств, не относятся к расходам по производству и реализации
				Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СтруктураПроводки.СчетДт, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) Тогда
					Возврат Ложь;
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;

		ИначеЕсли ТипЗнч(Субконто) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
		
			РеквизитыСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субконто,
				"ЭтоГруппа, ПринятиеКналоговомуУчету, Представление");
				
			Если РеквизитыСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
		
			Если Субконто <> ПланыВидовХарактеристик.СтатьиДоходов.ПустаяСсылка()
					И НЕ РеквизитыСубконто.ПринятиеКналоговомуУчету Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Пересчет валютной суммы в основную по курсу на указанную дату
//
&НаСервереБезКонтекста
Функция ПересчетСуммыПоКурсу(Знач ВалютнаяСумма, Знач Валюта, Знач Дата)

	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);

	Сумма = ?(СтруктураКурса.Кратность = 0, 0, Окр(ВалютнаяСумма * СтруктураКурса.Курс / СтруктураКурса.Кратность, 2));
	Возврат Сумма;

КонецФункции

#КонецОбласти

#Область НастройкаСоставаРегистров

&НаСервере
Процедура ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя)
	
	Для Каждого ИзмененныйРегистр Из РезультатДействийПользователя Цикл
		
		ИмяРегистра = ИзмененныйРегистр.Значение;
		
		// Найдем регистр в коллекции Регистры
		Отбор = Новый Структура("Имя", ИмяРегистра);
		РезультатПоиска = Регистры.НайтиСтроки(Отбор);
		Если РезультатПоиска.Количество() = 0 Тогда
			// Имя регистра неизвестно в этой форме
			Продолжить;
		КонецЕсли;
		Регистр = РезультатПоиска[0];
		
		// Изменим отображение регистра
		Регистр.Отображение = ИзмененныйРегистр.Пометка;
		
		// Удалим данные из отключенных наборов записей
		Если НЕ ИзмененныйРегистр.Пометка Тогда
			Если Объект.Движения[ИмяРегистра].Количество() > 0 Тогда
				Объект.Движения[ИмяРегистра].Очистить();
			КонецЕсли;
			Регистр.ЕстьДвижения = Ложь;
		КонецЕсли;
		
		// Обновим данные в табличных частях ТаблицаРегистровСведений и ТаблицаРегистровНакопления
		Если Регистр.ТипРегистра = "РегистрНакопления" Тогда
			ОбновляемаяКоллекция = Объект.ТаблицаРегистровНакопления;
		ИначеЕсли Регистр.ТипРегистра = "РегистрСведений" Тогда
			ОбновляемаяКоллекция = Объект.ТаблицаРегистровСведений;
		Иначе
			ОбновляемаяКоллекция = Неопределено;
		КонецЕсли;
		
		Если ОбновляемаяКоллекция <> Неопределено Тогда
		
			Отбор = Новый Структура("Имя", Регистр.Имя);
			ОбновляемыеЭлементыКоллекции = ОбновляемаяКоллекция.НайтиСтроки(Отбор);
			
			КоличествоЭлементовКоллекции = ОбновляемыеЭлементыКоллекции.Количество();
			Если КоличествоЭлементовКоллекции > 1 Тогда
				// Удалим все, кроме первого
				Для ИндексЭлемента = 1 По КоличествоЭлементовКоллекции - 1 Цикл
					ОбновляемаяКоллекция.Удалить(ОбновляемыеЭлементыКоллекции[ИндексЭлемента]);
				КонецЦикла;
				КоличествоЭлементовКоллекции = 1;
			КонецЕсли;
			
			РегистрЕстьВКоллекции = (КоличествоЭлементовКоллекции <> 0);
			
			Если Регистр.Отображение И НЕ РегистрЕстьВКоллекции Тогда
				// Добавим регистр в коллекцию
				ОбновляемаяКоллекция.Добавить().Имя = Регистр.Имя;
			ИначеЕсли РегистрЕстьВКоллекции И НЕ Регистр.Отображение Тогда
				// Удалим регистр из коллекции
				ОбновляемаяКоллекция.Удалить(ОбновляемыеЭлементыКоллекции[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	СоздатьЭлементыФормы();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСписокРегистровДляОтражения(ТаблицаРегистров, КорректировкаРегистровНДС)
	
	СписокРегистровНДС = Новый СписокЗначений;
	
	НДСЗаписиКнигиПокупок = Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок;
	СписокРегистровНДС.Добавить(НДСЗаписиКнигиПокупок.Имя, НДСЗаписиКнигиПокупок.Синоним, КорректировкаРегистровНДС);
	
	НДСЗаписиКнигиПродаж = Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж;
	СписокРегистровНДС.Добавить(НДСЗаписиКнигиПродаж.Имя, НДСЗаписиКнигиПродаж.Синоним, КорректировкаРегистровНДС);
	
	ЖурналУчетаСчетовФактур = Метаданные.РегистрыСведений.ЖурналУчетаСчетовФактур;
	СписокРегистровНДС.Добавить(ЖурналУчетаСчетовФактур.Имя, ЖурналУчетаСчетовФактур.Синоним, КорректировкаРегистровНДС);
	
	Возврат СписокРегистровНДС;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Функция ЕстьДвижения()

	Для каждого Регистр Из Регистры Цикл
		Если Объект.Движения[Регистр.Имя].Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		Возврат Истина;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаСервере
Процедура УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация()
	
	ПериодФО    = Объект.Дата;
	Организация = Объект.Организация;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Организация, ПериодФО);
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаПБУ18", ПолучитьПараметрыФункциональныхОпцийФормы()) Тогда
		Элементы.ХозрасчетныйСуммаНУДт.Заголовок = НСтр("ru = 'Суммы Дт'");
		Элементы.ХозрасчетныйСуммаНУКт.Заголовок = НСтр("ru = 'Суммы Кт'");
	Иначе
		Элементы.ХозрасчетныйСуммаНУДт.Заголовок = НСтр("ru = 'Сумма Дт НУ'");
		Элементы.ХозрасчетныйСуммаНУКт.Заголовок = НСтр("ru = 'Сумма Кт НУ'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(ИмяРегистра)
	
	ЭлементКонтрагент         = Элементы.Найти(ИмяРегистра + "Контрагент");
	ЭлементДоговорКонтрагента = Элементы.Найти(ИмяРегистра + "ДоговорКонтрагента");
	ЭлементПатент             = Элементы.Найти(ИмяРегистра + "Патент");
	
	Если ЭлементДоговорКонтрагента <> Неопределено Тогда
		СвязиПараметровДоговор = Новый Массив;
		СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));		
		Если ЭлементКонтрагент <> Неопределено Тогда			
			СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы."+ИмяРегистра+".ТекущиеДанные.Контрагент"));
		КонецЕсли; 
		ЭлементДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровДоговор);
	КонецЕсли; 

	Если ЭлементПатент <> Неопределено Тогда
		СвязиПараметровПатент = Новый Массив;
		СвязиПараметровПатент.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		ЭлементПатент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровПатент);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораКолонокСпискаРегистра()

&НаКлиенте
Процедура ВопросПриИзменииОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого Проводка Из Объект.Движения.Хозрасчетный Цикл
			
			Для Инд = 1 по 3 Цикл
				ЗначениеСубконто = Проводка["СубконтоДт" + Инд];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ТипЗнч(ЗначениеСубконто));
					ОписаниеТипаСубконто = Новый ОписаниеТипов(МассивТипов);
					Проводка["СубконтоДт" + Инд] = ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);
				КонецЕсли;
			КонецЦикла;
			
			Для Инд = 1 по 3 Цикл
				ЗначениеСубконто = Проводка["СубконтоКт" + Инд];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ТипЗнч(ЗначениеСубконто));
					ОписаниеТипаСубконто = Новый ОписаниеТипов(МассивТипов);
					Проводка["СубконтоКт" + Инд] = ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Проводка.ПодразделениеДт) Тогда
				Проводка.ПодразделениеДт = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Проводка.ПодразделениеКт) Тогда
				Проводка.ПодразделениеДт = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		ТекущаяОрганизация = Объект.Организация;
		УстановитьПараметрыФункциональныхОпцийФормыОбъектаОперация();
	Иначе
		Объект.Организация = ТекущаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяТипа(ЗаданныйТип)
	
	Возврат Метаданные.НайтиПоТипу(ЗаданныйТип).Имя;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьПараметрыВыбора(Элемент)
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти