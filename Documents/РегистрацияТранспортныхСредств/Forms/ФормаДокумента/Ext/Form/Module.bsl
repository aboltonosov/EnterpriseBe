
&НаКлиенте
Перем СтруктураСохраняемыхРеквизитов;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриСозданииЧтенииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтруктураСохраняемыхРеквизитов = Новый Структура;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВыполнитьИнициализацию();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ОтражениеРасходов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ПоказыватьКодПоОКАТО = (Объект.Дата <> Дата(1, 1, 1, 0, 0, 0) И Год(Объект.Дата) < 2014);
	Элементы.КодПоОКАТО.Видимость = ПоказыватьКодПоОКАТО;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьГоловнуюОрганизацию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаТранспортногоСредстваПриИзменении(Элемент)
	
	СтруктураКодов = КодыВидовТС.Получить(Объект.КодВидаТранспортногоСредства);
	
	Если СтруктураКодов <> Неопределено Тогда
		
		КодЕдиницыИзмерения = Элементы.ЕдиницаИзмеренияНалоговойБазы.СписокВыбора.НайтиПоЗначению(СтруктураКодов.КодЕдиницыИзмерения);
		Если КодЕдиницыИзмерения <> Неопределено Тогда
			Объект.ЕдиницаИзмеренияНалоговойБазы = КодЕдиницыИзмерения.Значение;
		Иначе
			Объект.ЕдиницаИзмеренияНалоговойБазы = "";
		КонецЕсли;
			
		УстановитьЗаголовокНалоговойБазы(ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьНаименованиеВидаТС(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаТранспортногоСредстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокВыбораКодовТС.Количество() = 0 Тогда
	
		СписокВыбораКодовТС = Новый СписокЗначений;
		СписокВыбораКодовТС.Добавить("51000", НСтр("ru = '51000 Автомобили легковые'"));
		СписокВыбораКодовТС.Добавить("51004", НСтр("ru = '51004 - прочие автомобили легковые (кроме включенных по кодам 56600, 56700)'"));
		СписокВыбораКодовТС.Добавить("52001", НСтр("ru = '52001 Автомобили грузовые (кроме включенных по коду 57000)'"));
		
	КонецЕсли;
	
	Если СписокВыбораКодовТС.НайтиПоЗначению("ФормаВыбораКодаТС") = Неопределено Тогда
		СписокВыбораКодовТС.Добавить("ФормаВыбораКодаТС", НСтр("ru = 'Другие коды видов ТС...'"));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИзСпискаКодВидаТранспортногоСредстваЗавершение", ЭтотОбъект, Элемент);
	ПоказатьВыборИзСписка(Оповещение, СписокВыбораКодовТС, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНалоговойБазыПриИзменении(Элемент)
	
	УстановитьЗаголовокНалоговойБазы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкологическийКлассНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта", "РегистрСведений");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "РегистрацияТранспортныхСредств");
	ПараметрыФормы.Вставить("НазваниеМакета", "КодыЭкологическихКлассов");
	ПараметрыФормы.Вставить("ТекущийПериод", Объект.Дата);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЭкологическийКлассНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостановкаНаУчетВНалоговомОрганеПриИзменении(Элемент)
	
	УстановитьДоступностьНалоговогоОргана(ЭтаФорма);
	
	Если Объект.ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане") Тогда
		ВосстановитьРеквизиты(Объект, "НалоговыйОрган, КодПоОКТМО, КодПоОКАТО", СтруктураСохраняемыхРеквизитов);
	Иначе
		СохранитьРеквизиты(Объект, "НалоговыйОрган, КодПоОКТМО, КодПоОКАТО", СтруктураСохраняемыхРеквизитов);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНО();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйОрганПриИзменении(Элемент)
	
	НалоговыйОрганПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяЛьготаПриИзменении(Элемент)
	
	// Сохраним значения
	Если ТекущаяНалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения") Тогда
		
		СохранитьРеквизиты(ЭтаФорма,
			"КодНалоговойЛьготыОсвобождениеОтНалогообложения, РегиональныйКодЛьготыОсвобождениеОтНалогообложения",
			СтруктураСохраняемыхРеквизитов);
			
		КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
		РегиональныйКодЛьготыОсвобождениеОтНалогообложения = "";
			
	ИначеЕсли ТекущаяНалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки") Тогда
		
		СохранитьРеквизиты(ЭтаФорма, "РегиональныйКодЛьготыСнижениеНалоговойСтавки", СтруктураСохраняемыхРеквизитов);
		СохранитьРеквизиты(Объект, "ЛьготнаяСтавка", СтруктураСохраняемыхРеквизитов);
		
		КодНалоговойЛьготыСнижениеНалоговойСтавки = "";
		РегиональныйКодЛьготыСнижениеНалоговойСтавки = "";
		Объект.ЛьготнаяСтавка = 0;
		
	ИначеЕсли ТекущаяНалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах") Тогда
		
		СохранитьРеквизиты(ЭтаФорма, "РегиональныйКодЛьготыУменьшениеСуммыНалогаВПроцентах", СтруктураСохраняемыхРеквизитов);
		СохранитьРеквизиты(Объект, "ПроцентУменьшения", СтруктураСохраняемыхРеквизитов);
		
		КодНалоговойЛьготыУменьшениеСуммыНалогаВПроцентах = "";
		РегиональныйКодЛьготыУменьшениеСуммыНалогаВПроцентах = "";
		Объект.ПроцентУменьшения = 0;
		
	ИначеЕсли ТекущаяНалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму") Тогда
		
		СохранитьРеквизиты(ЭтаФорма, "КодНалоговойЛьготыУменьшениеСуммыНалогаНаСумму", СтруктураСохраняемыхРеквизитов);
		СохранитьРеквизиты(Объект, "СуммаУменьшения", СтруктураСохраняемыхРеквизитов);
		
		КодНалоговойЛьготыУменьшениеСуммыНалогаНаСумму = "";
		Объект.СуммаУменьшения = 0;
		
	КонецЕсли;
	
	Объект.КодНалоговойЛьготы = "";
	Объект.РегиональныйКодЛьготы = "";
	
	// Восстановим значения
	Если Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения") Тогда
		
		ВосстановитьРеквизиты(ЭтаФорма,
			"КодНалоговойЛьготыОсвобождениеОтНалогообложения, РегиональныйКодЛьготыОсвобождениеОтНалогообложения",
			СтруктураСохраняемыхРеквизитов);
			
		Объект.КодНалоговойЛьготы = КодНалоговойЛьготыОсвобождениеОтНалогообложения;
		Объект.РегиональныйКодЛьготы = РегиональныйКодЛьготыОсвобождениеОтНалогообложения;
			
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки") Тогда
		
		КодНалоговойЛьготыСнижениеНалоговойСтавки = "20230";
		ВосстановитьРеквизиты(ЭтаФорма, "РегиональныйКодЛьготыСнижениеНалоговойСтавки", СтруктураСохраняемыхРеквизитов);
		ВосстановитьРеквизиты(Объект, "ЛьготнаяСтавка", СтруктураСохраняемыхРеквизитов);
		
		Объект.КодНалоговойЛьготы = КодНалоговойЛьготыСнижениеНалоговойСтавки;
		Объект.РегиональныйКодЛьготы = РегиональныйКодЛьготыСнижениеНалоговойСтавки;
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах") Тогда
		
		КодНалоговойЛьготыУменьшениеСуммыНалогаВПроцентах = "20220";
		ВосстановитьРеквизиты(ЭтаФорма, "РегиональныйКодЛьготыУменьшениеСуммыНалогаВПроцентах", СтруктураСохраняемыхРеквизитов);
		ВосстановитьРеквизиты(Объект, "ПроцентУменьшения", СтруктураСохраняемыхРеквизитов);
		
		Объект.КодНалоговойЛьготы = КодНалоговойЛьготыУменьшениеСуммыНалогаВПроцентах;
		Объект.РегиональныйКодЛьготы = РегиональныйКодЛьготыУменьшениеСуммыНалогаВПроцентах;
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму") Тогда
		
		ВосстановитьРеквизиты(ЭтаФорма, "КодНалоговойЛьготыУменьшениеСуммыНалогаНаСумму", СтруктураСохраняемыхРеквизитов);
		ВосстановитьРеквизиты(Объект, "СуммаУменьшения", СтруктураСохраняемыхРеквизитов);
		
		Объект.КодНалоговойЛьготы = КодНалоговойЛьготыУменьшениеСуммыНалогаНаСумму;
		Объект.РегиональныйКодЛьготы = "";
		
	КонецЕсли;
	
	ТекущаяНалоговаяЛьгота = Объект.НалоговаяЛьгота;
	УстановитьДоступностьНалоговыхЛьгот(ЭтаФорма);
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КодПоОКТМОПриИзменении(Элемент)
	
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНО();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготнаяСтавкаПриИзменении(Элемент)
	
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентУменьшенияПриИзменении(Элемент)
	
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаУменьшенияПриИзменении(Элемент)
	
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодЛьготыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта", "РегистрСведений");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "РегистрацияТранспортныхСредств");
	ПараметрыФормы.Вставить("НазваниеМакета", "ЛьготыПоТранспортномуНалогу");
	Если Элемент.Имя = "КодЛьготыУменьшениеСуммыНалогаНаСумму" Тогда
		ПараметрыФормы.Вставить("ТекущийПериод",	'20070101');
	Иначе
		ПараметрыФормы.Вставить("ТекущийПериод",	ЭтаФорма.Объект.Дата);
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("КодНалоговойЛьготыНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура КодЛьготыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.КодНалоговойЛьготы = "";
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РегиональныйКодЛьготыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОснованиеЛьготы", ЭтаФорма.Объект.РегиональныйКодЛьготы);
	
	ДополнительныеПараметры = Новый Структура("Льгота", Элемент.Имя);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуРегиональныйКодЛьготыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВводаОснованияЛьготы", 
		ПараметрыФормы, 
		ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура РегиональныйКодЛьготыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.РегиональныйКодЛьготы = "";
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти



#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("ОтражениеРасходов"));
	
	#Область ОбщаяСобственность
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляВПравеОбщейСобственностиЧислитель.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляВПравеОбщейСобственностиЗнаменатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ОбщаяСобственность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ВыполнитьИнициализацию();
	
	УстановитьВидимость();
	УстановитьДоступностьНалоговогоОргана(ЭтаФорма);
	УстановитьЗаголовокНалоговойБазы(ЭтаФорма);
	ЗаполнитьНаименованиеВидаТС(ЭтаФорма);
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНО();
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	УстановитьДоступностьНалоговыхЛьгот(ЭтаФорма);
	УстановитьГоловнуюОрганизацию(ЭтаФорма);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ОтражениеРасходов);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьИнициализацию()
	
	Если ИнициализацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализацияВыполнена = Истина;
	
	СписокКодовЕдиницИзмеренияТС = ПолучитьСписокКодовЕдиницИзмеренияТС();
	Для Каждого ЕдиницаИзмеренияТС Из СписокКодовЕдиницИзмеренияТС Цикл
		Элементы.ЕдиницаИзмеренияНалоговойБазы.СписокВыбора.Добавить(ЕдиницаИзмеренияТС.Значение, ЕдиницаИзмеренияТС.Представление);
	КонецЦикла;
	
	ЗаполнитьКодыВидовТС();
	
	Если Объект.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения Тогда
		КодНалоговойЛьготыОсвобождениеОтНалогообложения = Объект.КодНалоговойЛьготы;
		РегиональныйКодЛьготыОсвобождениеОтНалогообложения = Объект.РегиональныйКодЛьготы;
	ИначеЕсли Объект.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки Тогда
		КодНалоговойЛьготыСнижениеНалоговойСтавки = Объект.КодНалоговойЛьготы;
		РегиональныйКодЛьготыСнижениеНалоговойСтавки = Объект.РегиональныйКодЛьготы;
	ИначеЕсли Объект.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах Тогда
		КодНалоговойЛьготыУменьшениеСуммыНалогаВПроцентах = Объект.КодНалоговойЛьготы;
		РегиональныйКодЛьготыУменьшениеСуммыНалогаВПроцентах = Объект.РегиональныйКодЛьготы;
	ИначеЕсли Объект.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму Тогда
		КодНалоговойЛьготыУменьшениеСуммыНалогаНаСумму = Объект.КодНалоговойЛьготы;
		РегиональныйКодЛьготыУменьшениеСуммыНалогаНаСумму = Объект.РегиональныйКодЛьготы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКодовЕдиницИзмеренияТС()
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("251", НСтр("ru='л. с.'"));
	Список.Добавить("999", НСтр("ru='Кгс'"));
	Список.Добавить("181", НСтр("ru='БРТ'"));
	Список.Добавить("796", НСтр("ru='шт'"));
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокКодовЕдиницИзмеренияТС()

&НаСервере
Процедура ЗаполнитьКодыВидовТС()
	
	ТекущийПоказательГод = ?(Объект.Дата = Дата(1, 1, 1, 0, 0, 0), Год(ТекущаяДатаСеанса()), Год(Объект.Дата));
	
	Если СтарыйГод = 0
		ИЛИ (СтарыйГод >= 2012 И ТекущийПоказательГод < 2012)
		ИЛИ (СтарыйГод < 2012 И ТекущийПоказательГод >= 2012) Тогда 
		
		ТаблицаКодовВидовТС = ПолучитьКодыВидовТС(ТекущийПоказательГод);
		СтарыйГод = ТекущийПоказательГод;

		СтруктураКода = Новый Структура("Наименование, КодЕдиницыИзмерения");
		
		СоответствиеКодов = Новый Соответствие;
		Для каждого СтрокаКода Из ТаблицаКодовВидовТС Цикл
			ЗаполнитьЗначенияСвойств(СтруктураКода, СтрокаКода);
			СоответствиеКодов.Вставить(СтрокаКода.Код, Новый ФиксированнаяСтруктура(СтруктураКода));
		КонецЦикла;
		КодыВидовТС = Новый ФиксированноеСоответствие(СоответствиеКодов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодыВидовТС(Год)

	КодыВидовТС = Новый ТаблицаЗначений();
	КодыВидовТС.Колонки.Добавить("Код");
	КодыВидовТС.Колонки.Добавить("Наименование");
	КодыВидовТС.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет = РегистрыСведений.РегистрацияТранспортныхСредств.ПолучитьМакет("ВидыТранспортныхСредств");
	
	Если Год < 2011 Тогда
		ТекущаяОбласть = Макет.Области.Найти("Область2007");
	ИначеЕсли Год < 2012 Тогда
		ТекущаяОбласть = Макет.Области.Найти("Область2011");
	ИначеЕсли Год < 2013 Тогда
		ТекущаяОбласть = Макет.Области.Найти("Область2012");
	Иначе
		ТекущаяОбласть = Макет.Области.Найти("Область2013");
	КонецЕсли;

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыВидовТС.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КодыВидовТС;

КонецФункции // ПолучитьКодыВидовТС()

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.КодПоОКАТО.Видимость = (Объект.Дата <> Дата(1, 1, 1, 0, 0, 0) И Год(Объект.Дата) < 2014);
	
	ПрименяетсяЛьготаВВидеУменьшенияСуммыНалогаНаСумму = (Объект.Дата <> Дата(1, 1, 1, 0, 0, 0) И Год(Объект.Дата) < 2012);
	Элементы.НалоговаяЛьготаУменьшениеСуммыНалогаНаСумму.Видимость = ПрименяетсяЛьготаВВидеУменьшенияСуммыНалогаНаСумму;
	Элементы.СуммаУменьшения.Видимость = ПрименяетсяЛьготаВВидеУменьшенияСуммыНалогаНаСумму;
	Элементы.КодЛьготыУменьшениеСуммыНалогаНаСумму.Видимость = ПрименяетсяЛьготаВВидеУменьшенияСуммыНалогаНаСумму;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНалоговогоОргана(Форма)
	
	Форма.Элементы.ГруппаНалоговыйОрган.Доступность = 
		Форма.Объект.ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНалоговыхЛьгот(Форма)
	
	НалоговаяЛьгота = Форма.Объект.НалоговаяЛьгота;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаКодЛьготыОсвобождениеОтНалогообложения.Доступность = 
		НалоговаяЛьгота = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения");
		
	СнижениеНалоговойСтавки = 
		НалоговаяЛьгота = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки");
	Элементы.ЛьготнаяСтавка.Доступность = СнижениеНалоговойСтавки;
	Элементы.ГруппаКодЛьготыСнижениеНалоговойСтавки.Доступность = СнижениеНалоговойСтавки;
	
	УменьшениеСуммыНалогаВПроцентах = 
		НалоговаяЛьгота = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах");
	Элементы.ПроцентУменьшения.Доступность = УменьшениеСуммыНалогаВПроцентах;
	Элементы.ГруппаКодЛьготыУменьшениеСуммыНалогаВПроцентах.Доступность = УменьшениеСуммыНалогаВПроцентах;
		
	УменьшениеСуммыНалогаНаСумму = 
		НалоговаяЛьгота = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму");
	Элементы.СуммаУменьшения.Доступность = УменьшениеСуммыНалогаНаСумму;
	Элементы.КодЛьготыУменьшениеСуммыНалогаНаСумму.Доступность = УменьшениеСуммыНалогаНаСумму;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокНалоговойБазы(Форма)
	
	ЕдиницаИзмеренияНалоговойБазы = Форма.Объект.ЕдиницаИзмеренияНалоговойБазы;
	
	Если ПустаяСтрока(ЕдиницаИзмеренияНалоговойБазы) Тогда
		Заголовок = НСтр("ru = 'Налоговая база'");
	ИначеЕсли ЕдиницаИзмеренияНалоговойБазы = "251" Тогда
		Заголовок = НСтр("ru = 'Мощность двигателя'");
	ИначеЕсли ЕдиницаИзмеренияНалоговойБазы = "999" Тогда
		Заголовок = НСтр("ru = 'Сила тяги'");
	ИначеЕсли ЕдиницаИзмеренияНалоговойБазы = "181" Тогда
		Заголовок = НСтр("ru = 'Валовая вместимость'");
	ИначеЕсли ЕдиницаИзмеренияНалоговойБазы = "796" Тогда
		Заголовок = НСтр("ru = 'Налоговая база'");
	Иначе
		Заголовок = НСтр("ru = 'Налоговая база'");
	КонецЕсли;
	
	Форма.Элементы.НалоговаяБаза.Заголовок = Заголовок;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНаименованиеВидаТС(Форма)
	
	Если ПустаяСтрока(Форма.Объект.КодВидаТранспортногоСредства) Тогда
		Форма.НаименованиеВидаТС = "";
	Иначе
		СтруктураКодов = Форма.КодыВидовТС.Получить(Форма.Объект.КодВидаТранспортногоСредства);
		Если СтруктураКодов = Неопределено Тогда
			Форма.НаименованиеВидаТС = "";
		Иначе
			Форма.НаименованиеВидаТС = СтруктураКодов.Наименование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНО()
	
	ТекстПостановкаНаУчетВНалоговомОргане = НСтр("ru = 'Постановка на учет в налоговом органе'");
	
	Если Объект.ПостановкаНаУчетВНалоговомОргане = 
		ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации") Тогда
		
		ТекстПостановкаНаУчетВНалоговомОргане = НСтр("ru = 'Постановка на учет в налоговом органе: по месту нахождения организации'");
		
	ИначеЕсли Объект.ПостановкаНаУчетВНалоговомОргане = 
		ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане") Тогда
		
		Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
			КодНО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НалоговыйОрган, "Код");
		Иначе
			КодНО = "<...>";
		КонецЕсли;
		
		ШаблонТекста = НСтр("ru = 'Постановка на учет в налоговом органе: ИФНС %1, код по ОКТМО %2'");
		ТекстПостановкаНаУчетВНалоговомОргане = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста,
				КодНО,
				?(ЗначениеЗаполнено(Объект.КодПоОКТМО), Объект.КодПоОКТМО, "<...>"));
		
	КонецЕсли;
	
	УстановитьЗаголовокГруппы(ЭтотОбъект, "ГруппаПостановкаНаУчетВНалоговомОргане", ТекстПостановкаНаУчетВНалоговомОргане);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется") Тогда
		
		ТекстНалоговойЛьготы = НСтр("ru = 'Налоговая льгота: Не применяется'");
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения") Тогда
		
		ТекстНалоговойЛьготы = НСтр("ru = 'Освобождение от налогообложения'");
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки") Тогда
		
		ШаблонТекста = НСтр("ru = 'Пониженная налоговая ставка: %1'");
		ТекстНалоговойЛьготы = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Объект.ЛьготнаяСтавка);
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах") Тогда
		
		ШаблонТекста = НСтр("ru = 'Уменьшение суммы налога на: %1 %2'");
		ТекстНалоговойЛьготы = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Объект.ПроцентУменьшения, "%");
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму") Тогда
		
		ШаблонТекста = НСтр("ru = 'Уменьшение суммы налога на %1'");
		ТекстНалоговойЛьготы = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Объект.СуммаУменьшения);
		
	КонецЕсли;
	
	Если Объект.НалоговаяЛьгота <> ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется") Тогда
		
		Если Объект.КодНалоговойЛьготы = "30200" Тогда
			
			ШаблонТекста = НСтр("ru = '%1, код льготы %2'");
				ТекстНалоговойЛьготы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
				ТекстНалоговойЛьготы,
				Объект.КодНалоговойЛьготы);
			
		Иначе
			
			ШаблонТекста = НСтр("ru = '%1, код льготы %2/%3'");
			ТекстНалоговойЛьготы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
				ТекстНалоговойЛьготы,
				?(ЗначениеЗаполнено(Объект.КодНалоговойЛьготы), Объект.КодНалоговойЛьготы, "<...>"),
				?(ЗначениеЗаполнено(Объект.РегиональныйКодЛьготы), Объект.РегиональныйКодЛьготы, "<...>"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьЗаголовокГруппы(Форма, "ГруппаНалоговаяЛьгота", ТекстНалоговойЛьготы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГоловнуюОрганизацию(Форма)
	
	Форма.ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Форма.Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаКодВидаТранспортногоСредстваЗавершение(Результат, Элемент) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Значение <> "ФормаВыбораКодаТС" Тогда
			
			Объект.КодВидаТранспортногоСредства = Результат.Значение;
			Модифицированность = Истина;
			КодВидаТранспортногоСредстваПриИзменении(Элемент);
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекущийКод", Элемент.ТекстРедактирования);
			ПараметрыФормы.Вставить("Дата", Объект.Дата);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения(
				"КодВидаТранспортногоСредстваНачалоВыбораЗавершение",
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ОткрытьФорму(
				"Документ.РегистрацияТранспортныхСредств.Форма.ФормаВыбораКодаВидаТранспортногоСредства",
				ПараметрыФормы,ЭтаФорма,,,,
				ОповещениеОЗакрытии);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаТранспортногоСредстваНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	ВыбранноеЗначение = РезультатЗакрытия;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Объект.КодВидаТранспортногоСредства = ВыбранноеЗначение.КодВидаТС;
		
		Если СписокВыбораКодовТС.НайтиПоЗначению(ВыбранноеЗначение.КодВидаТС) = Неопределено Тогда
			
			СписокВыбораКодовТС.Вставить(0, ВыбранноеЗначение.КодВидаТС, ВыбранноеЗначение.КодВидаТС + " " + ВыбранноеЗначение.Наименование); 
			
			ЗначениеДляОткрытияФормыВыбора = СписокВыбораКодовТС.НайтиПоЗначению("ФормаВыбораКодаТС");
			Если ЗначениеДляОткрытияФормыВыбора <> Неопределено Тогда
				СписокВыбораКодовТС.Удалить(ЗначениеДляОткрытияФормыВыбора);
			КонецЕсли;
			
			МаксимальноеКоличество = 6;
			КоличествоЗначений     = СписокВыбораКодовТС.Количество();
			
			Если КоличествоЗначений > МаксимальноеКоличество Тогда
				Для ОбратныйИндекс = 1 По КоличествоЗначений Цикл
					ЗначениеСписка = СписокВыбораКодовТС[КоличествоЗначений - ОбратныйИндекс];
					Если СписокВыбораКодовТС.Индекс(ЗначениеСписка) > (МаксимальноеКоличество - 1) Тогда
						СписокВыбораКодовТС.Удалить(ЗначениеСписка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		КодВидаТранспортногоСредстваПриИзменении(Элемент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭкологическийКлассНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	КодЭкологическогоКласса = РезультатЗакрытия;
	
	Если КодЭкологическогоКласса <> Неопределено Тогда
		Объект.ЭкологическийКласс = КодЭкологическогоКласса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьРеквизиты(Объект, СписокРеквизитов, СтруктураСохраняемыхРеквизитов)
	
	ВременнаяСтруктура = Новый Структура(СписокРеквизитов);
	Для каждого КлючИЗначение Из ВременнаяСтруктура Цикл
		СтруктураСохраняемыхРеквизитов.Вставить(КлючИЗначение.Ключ, Объект[КлючИЗначение.Ключ]);
		Объект[КлючИЗначение.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Объект[КлючИЗначение.Ключ]));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВосстановитьРеквизиты(Объект, СписокРеквизитов, СтруктураСохраняемыхРеквизитов)
	
	ВременнаяСтруктура = Новый Структура(СписокРеквизитов);
	Для каждого КлючИЗначение Из ВременнаяСтруктура Цикл
		Если СтруктураСохраняемыхРеквизитов.Свойство(КлючИЗначение.Ключ) Тогда
			Объект[КлючИЗначение.Ключ] = СтруктураСохраняемыхРеквизитов[КлючИЗначение.Ключ]
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НалоговыйОрганПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда 
		Объект.КодПоОКТМО = Объект.НалоговыйОрган.КодПоОКТМО;
		Объект.КодПоОКАТО = Объект.НалоговыйОрган.КодПоОКАТО;
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНО();
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговойЛьготыНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	КодЛьготы = РезультатЗакрытия;
	
	Если КодЛьготы <> Неопределено Тогда
		Элемент.ВыделенныйТекст = КодЛьготы;
		Объект.КодНалоговойЛьготы = КодЛьготы;
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРегиональныйКодЛьготыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЭтаФорма[ДополнительныеПараметры.Льгота] = Результат;
		Объект.РегиональныйКодЛьготы = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
