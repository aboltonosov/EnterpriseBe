
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ВыполняетсяОбновлениеЧитаемыхДанных() Тогда
		ОбновлениеИнформационнойБазыУТ.СообщитьЧтоРаботаСФормойВременноОграничена(); 
	КонецЕсли; 
	
	НастройкиФормыПереоформленияНакладных = НастройкиФормыПереоформленияНакладных();
	
	УстановитьОтборНаЗаблокированныеДляЧтенияИИзмененияСсылки();
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ЗаполнитьРеквизитыФормыПриСоздании();
	НастроитьЭлементыФормыПриСоздании();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	ДокументыВлияющиеНаГрафик = Новый Массив;
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ЗаказПереработчику");
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ПередачаСырьяПереработчику");
	
	Если Не ДокументыВлияющиеНаГрафик.Найти(ИмяСобытия) = Неопределено Тогда
		Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Склад = Настройки.Получить("Склад");
		УстановитьОтборПоСкладу(ЭтаФорма);
		УстановитьОтборПоПодразделению(ЭтаФорма);
		
	Иначе
		
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		
	КонецЕсли;
	
	Настройки.Удалить("Склад");
	Настройки.Удалить("ХозяйственнаяОперация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СостояниеНакладнойПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"СостояниеНакладной",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеНакладной));
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеРасходногоОрдераПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СоответствиеОрдера), Число(СоответствиеОрдера), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"СоответствиеОрдера",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СоответствиеОрдера));
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьОтборПоСкладу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПоПодразделению(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСпискаРаспоряженийНаОформление

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.СписокДокументы);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.СписокДокументы);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура ОфоритьПоЗаказам(Команда)
	
	ПараметрыОформления = Новый Структура("ПоЗаказам, ПоОрдерам", Истина, Ложь);
	ОформитьПередачу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОрдерам(Команда)
	
	ПараметрыОформления = Новый Структура("ПоЗаказам, ПоОрдерам", Ложь, Истина);
	ОформитьПередачу();

КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполнения(Команда)
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = Новый СписокЗначений;
	МассивТиповДокументов = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ВыделенныйДокумент = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ВыделеннаяСтрока).Ссылка;
		ТипВыделенногоДокумента = ТипЗнч(ВыделенныйДокумент);
		
		Если МассивТиповДокументов.Найти(ТипВыделенногоДокумента) = Неопределено Тогда
			МассивТиповДокументов.Добавить(ТипВыделенногоДокумента);
			Если МассивТиповДокументов.Количество() > 1 Тогда
				ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для документов разного вида.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокДокументов.НайтиПоЗначению(ВыделенныйДокумент) = Неопределено Тогда
			СписокДокументов.Добавить(ВыделенныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", 
	             Новый Структура("ВходящиеДокументы", СписокДокументов), 
	             ЭтаФорма,
	             Ложь);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПередачиСырьяПереработчикам Тогда
		ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.СписокДокументы);
	Иначе
		ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.СписокРаспоряженияНаОформление);
	КонецЕсли;
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПередачаСырьяПереработчику.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПередачаСырьяПереработчику") Тогда
			Элементы.СписокДокументы.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаПередачиСырьяПереработчикам;
		КонецЕсли;
		
		ПоказатьЗначение(,Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеПередачиМатериалов

&НаКлиенте
Процедура ОформитьПередачу()
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	ИначеЕсли ПараметрыОформления.ПоЗаказам И ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПередачаСырьяПереработчику") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Оформление по заказам недоступно для данного вида документов.'"));
		Возврат;
	КонецЕсли;

	СоздатьНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОсновании()
	
	МассивСсылокДляПередачи = Новый Массив();
	МассивСсылокНакладные   = Новый Массив();
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	СкладОтгрузки = ТекущиеДанные.Склад;
	
	Для Каждого ИдентификаторСтроки Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
	
		Если ТипЗнч(ИдентификаторСтроки) = Тип("СтрокаГруппировкиДинамическогоСписка") 
			ИЛИ ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ИдентификаторСтроки).Ссылка) = Тип("ДокументСсылка.ПередачаСырьяПереработчику") 
			И ПараметрыОформления.ПоЗаказам Тогда
			
			Продолжить;
		ИначеЕсли ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ИдентификаторСтроки).Ссылка) = Тип("ДокументСсылка.ПередачаСырьяПереработчику")
			И ПараметрыОформления.ПоОрдерам Тогда
			МассивСсылокНакладные.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ИдентификаторСтроки).Ссылка);
		Иначе
			МассивСсылокДляПередачи.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ИдентификаторСтроки).Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	ОчиститьСообщения();
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ПередачаСырьяПереработчику") Тогда
		ПерезаполнитьНакладнуюПоОрдерам(ТекущиеДанные.Ссылка);
		Действие = "";
	Иначе
		Действие = ДействиеВводаНаОсновании(МассивСсылокДляПередачи, ПараметрыОформления, СкладОтгрузки);
	КонецЕсли;
	
	Если Действие = "СоздатьПередачуСырьяНаОснованииЗаказа" Тогда
		
		ПараметрыСоздания = ПродажиКлиент.ПараметрыСозданияРеализацииТоваровНаОснованииЗаказа();
		
		ПараметрыСоздания.Список                                    = Элементы.СписокРаспоряженияНаОформление;
		ПараметрыСоздания.ИспользоватьРеализациюПоНесколькимЗаказам = Истина;
		ПараметрыСоздания.Склад                                     = СкладОтгрузки;
		ПараметрыСоздания.ИмяДокумента                              = "ПередачаСырьяПереработчику";
		ПараметрыСоздания.ПараметрыОформления                       = ПараметрыОформления;
		
		ПродажиКлиент.СоздатьРеализациюТоваровНаОснованииЗаказа(ПараметрыСоздания);
		
	ИначеЕсли Действие = "ПереоформлениеДокументов" Тогда
		
		ОткрытьФормуПереоформлениеНакладных(МассивСсылокДляПередачи, СкладОтгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормыПереоформленияНакладных()
	
	НастройкиФормы= НакладныеСервер.НастройкиФормыПереоформленияНакладных();
	НастройкиФормы.Заголовок = НСтр("ru = 'Переоформление передачи сырья переработчикам по выбранным распоряжениям'");
	НастройкиФормы.ИмяФормыНакладной = "Документ.ПередачаСырьяПереработчику.ФормаОбъекта";
	НастройкиФормы.ИспользоватьНакладныеПоНесколькимЗаказам = Истина;
	Возврат НастройкиФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПереоформлениеНакладных(МассивСсылок, СкладОтгрузки)
	
	РеквизитыШапки = Новый Структура();
	
	Если ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(МассивСсылок, РеквизитыШапки) Тогда
		
		РеквизитыШапки.Склад = СкладОтгрузки;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заказы", МассивСсылок);
		ПараметрыФормы.Вставить("Склад", СкладОтгрузки);
		ПараметрыФормы.Вставить("РеквизитыШапки", РеквизитыШапки);
		ПараметрыФормы.Вставить("НастройкиФормы", НастройкиФормыПереоформленияНакладных);
		ОткрытьФорму("ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДействиеВводаНаОсновании(Знач МассивСсылокДляПередачи, Знач ПараметрыОформления, Знач СкладОтгрузки)
	
	Если МассивСсылокДляПередачи.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПараметрыОформления.ПоОрдерам Тогда
		Если НЕ ВозможноПерезаполнениеПоОтгрузке(МассивСсылокДляПередачи, СкладОтгрузки) Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыОформления.ПоОрдерам Тогда
		Если ОпределитьНаличиеОформленныхПередач(МассивСсылокДляПередачи, СкладОтгрузки) Тогда
			Возврат "ПереоформлениеДокументов";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "СоздатьПередачуСырьяНаОснованииЗаказа";
	
КонецФункции 

&НаКлиенте
Процедура ПерезаполнитьНакладнуюПоОрдерам(ПерезаполняемаяНакладная)
	
	ПродажиКлиент.ПерезаполнитьНакладнуюПоОрдерам(ПерезаполняемаяНакладная);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьНаличиеОформленныхПередач(МассивСсылок, СкладОтгрузки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКлиентовОстаткиИОбороты.ЗаказКлиента КАК Заказ,
	|	ЗаказыКлиентовОстаткиИОбороты.Регистратор КАК Реализация
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(
	|			,
	|			,
	|			Регистратор,
	|			,
	|			ЗаказКлиента В (&МассивСсылок)
	|				И Склад = &СкладОтгрузки
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЗаказыКлиентовОстаткиИОбороты
	|ГДЕ
	|	ЗаказыКлиентовОстаткиИОбороты.Регистратор ССЫЛКА Документ.ПередачаСырьяПереработчику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расхождения.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Расхождения.Номенклатура КАК Номенклатура,
	|	Расхождения.Характеристика КАК Характеристика,
	|	Расхождения.Серия КАК Серия,
	|	Расхождения.Склад КАК Склад,
	|	СУММА(Расхождения.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|		ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
	|		ТоварыКОтгрузкеОстатки.Серия КАК Серия,
	|		ТоварыКОтгрузкеОстатки.Склад КАК Склад,
	|		ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток - ТоварыКОтгрузкеОстатки.СобраноКонечныйОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,, ДокументОтгрузки В (&МассивСсылок) И Склад = &СкладОтгрузки) КАК ТоварыКОтгрузкеОстатки
	|	ГДЕ
	|		ТоварыКОтгрузкеОстатки.КОтгрузкеРасход>0 ИЛИ ТоварыКОтгрузкеОстатки.СобраноПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыКлиентовОстатки.ЗаказКлиента,
	|		ЗаказыКлиентовОстатки.Номенклатура,
	|		ЗаказыКлиентовОстатки.Характеристика,
	|		ЗаказыКлиентовОстатки.Серия,
	|		ЗаказыКлиентовОстатки.Склад,
	|		-ЗаказыКлиентовОстатки.КОформлениюОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(
	|				,
	|				ЗаказКлиента В (&МассивСсылок)
	|				И Склад = &СкладОтгрузки
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЗаказыКлиентовОстатки) КАК Расхождения
	|
	|СГРУППИРОВАТЬ ПО
	|	Расхождения.ДокументОтгрузки,
	|	Расхождения.Номенклатура,
	|	Расхождения.Характеристика,
	|	Расхождения.Серия,
	|	Расхождения.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расхождения.Количество) <> 0");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("СкладОтгрузки", СкладОтгрузки);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОформленныеНакладные = РезультатыЗапроса[0].Выгрузить();
	
	АдресТаблицаНакладныхВоВременномХранилище = ПоместитьВоВременноеХранилище(ОформленныеНакладные);
	
	Возврат НЕ РезультатыЗапроса[1].Пустой() И ОформленныеНакладные.Количество() > 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВозможноПерезаполнениеПоОтгрузке(МассивДокументов, СкладОтгрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаТовары.Склад
		|ИЗ
		|	Документ.ЗаказПереработчику.Материалы КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&МассивДокументов)
		|	И ТаблицаТовары.Склад = &СкладОтгрузки
		|	И ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
		|	И ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//++ НЕ УТКА
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаТовары.Склад
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаТовары
		|		ПО ЭтапПроизводства.Ссылка = ТаблицаТовары.Ссылка
		|ГДЕ
		|	ЭтапПроизводства.ЗаказПереработчику В(&МассивДокументов)
		|	И ТаблицаТовары.Склад = &СкладОтгрузки
		|	И ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
		|	И ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|
		|ОБЪЕДИНИТЬ ВСЕ
		//-- НЕ УТКА
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаТовары.Склад
		|ИЗ
		|	Документ.ПередачаСырьяПереработчику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&МассивДокументов)
		|	И ТаблицаТовары.Склад = &СкладОтгрузки
		|	И ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
		|	И ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки,
		|	ТоварыКОтгрузке.Склад КАК СкладОтгрузки,
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК ХарактеристикаНоменклатуры,
		|	ТоварыКОтгрузке.Серия КАК Серия,
		|	ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , , , ДокументОтгрузки В (&МассивДокументов) И Склад = &СкладОтгрузки) КАК ТоварыКОтгрузке
		|ГДЕ
		|	(ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток - ТоварыКОтгрузке.СобраноКонечныйОстаток > 0
		|			ИЛИ ТоварыКОтгрузке.КОформлениюКонечныйОстаток > 0)
		|	И (ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказПереработчику
		|				И ТоварыКОтгрузке.СобраноПриход + ТоварыКОтгрузке.КОтгрузкеРасход <> ТоварыКОтгрузке.КОформлениюРасход
		|			ИЛИ ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаСырьяПереработчику
		|				И ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток <> 0)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("СкладОтгрузки", СкладОтгрузки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЕстьОрдерныйСклад = НЕ РезультатЗапроса[0].Пустой();
	ЕстьРасхожденияПоОтгрузке = НЕ РезультатЗапроса[1].Пустой();

	Если НЕ ЕстьОрдерныйСклад ИЛИ НЕ ЕстьРасхожденияПоОтгрузке Тогда
		ВызватьИсключение НСтр("ru='По выбранным распоряжениям перезаполнение по отгрузке не требуется.'");
	КонецЕсли;
	
	Возврат ЕстьОрдерныйСклад И ЕстьРасхожденияПоОтгрузке;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Условное оформление динамического списка "СписокРаспоряженияНаОформление"
	СписокУсловноеОформление = СписокРаспоряженияНаОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокДокументы.Дата", Элементы.СписокДокументыДата.Имя);
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформление.Дата", Элементы.СписокРаспоряженияНаОформлениеДата.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПриСоздании()
	
	УстановитьОтборыПриСоздании();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокРаспоряженияНаОформление, "НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()), Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПриСоздании()

	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"СостояниеНакладной", СостояниеНакладной, СтруктураБыстрогоОтбора, , , Истина);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"СоответствиеОрдера", СоответствиеОрдера, СтруктураБыстрогоОтбора, , , Истина);
	
	Если СтруктураБыстрогоОтбора <> Неопределено И СтруктураБыстрогоОтбора.Свойство("Склад", Склад) Тогда
		УстановитьОтборПоСкладу(ЭтаФорма);
		УстановитьОтборПоПодразделению(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	НакладныеСервер.ЗаполнитьСписокСостоянийОформленияНакладной(Элементы.СостояниеНакладной.СписокВыбора);
	НакладныеСервер.ЗаполнитьСписокСоответствияОрдеров(Элементы.СоответствиеРасходногоОрдера.СписокВыбора);
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьОрдернуюСхемуПриОтгрузке = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
	
	Элементы.СписокРаспоряженияНаОформлениеСоответствиеОрдера.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСкладу(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокДокументы,
		"Склад",
		Форма.Склад,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Форма.Склад));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокРаспоряженияНаОформление,
		"Склад",
		Форма.Склад,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Форма.Склад));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПодразделению(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокДокументы,
		"Подразделение",
		Форма.Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Форма.Подразделение));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокРаспоряженияНаОформление,
		"Подразделение",
		Форма.Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Форма.Подразделение));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборНаЗаблокированныеДляЧтенияИИзмененияСсылки()

	ТаблицыДляКонтроля = Новый Массив;
	ТаблицыДляКонтроля.Добавить("РегистрНакопления.ТоварыКОтгрузке");
	ЗаблокированныеРаспоряжения = Документы.ЗаказПереработчику.ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки(ТаблицыДляКонтроля);

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			СписокРаспоряженияНаОформление, 
			"ЗаблокированныеРаспоряжения", 
			ЗаблокированныеРаспоряжения);
			
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			СписокРаспоряженияНаОформление, 
			"ПроверятьЗаблокированныеРаспоряжения", 
			ЗаблокированныеРаспоряжения.Количество() <> 0);
	
КонецПроцедуры

&НаСервере
Функция ВыполняетсяОбновлениеЧитаемыхДанных()

	Возврат НЕ ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, "РегистрНакопления.ТоварыКОтгрузке");
	
КонецФункции

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.СписокДокументы);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти
