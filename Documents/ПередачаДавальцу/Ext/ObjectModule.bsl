#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция формирует временные данных документа
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - менеджер временных таблиц
//
Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Дата                                                     КАК Дата,
	|	&Организация                                              КАК Организация,
	|	&Сделка                                                   КАК Сделка,
	|	Неопределено                                              КАК Партнер,
	|	Неопределено                                              КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)    КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                  КАК Валюта,
	|	&ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                              КАК НалогообложениеНДС,
	|	Ложь                                                      КАК ЕстьСделкиВТабличнойЧасти,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам ТОГДА
	|		&Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ                                                     КАК Подразделение,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ                                                     КАК Менеджер
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|	ПО
	|		СтруктураПредприятия.Ссылка = &Подразделение
	|
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки         КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура        КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика      КАК Характеристика,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество          КАК Количество,
	|	ТаблицаТоваров.Склад               КАК Склад,
	|	ТаблицаТоваров.Назначение          КАК Назначение,
	|	0                                  КАК Сумма,
	|	ТаблицаТоваров.ДокументРеализации  КАК ДокументРеализации,
	|	&Сделка                            КАК Сделка,
	|	ТаблицаТоваров.ЗаказДавальца       КАК Заказ,
	|	ТаблицаТоваров.КодСтроки           КАК КодСтроки
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                 КАК Характеристика,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество                     КАК Количество,
	|	ТаблицаТоваров.Склад                          КАК Склад,
	|	ТаблицаТоваров.Заказ                          КАК ЗаказДавальца,
	|	ТаблицаТоваров.КодСтроки                      КАК КодСтроки,
	|	ТаблицаТоваров.ДокументРеализации             КАК ДокументРеализации,
	|	ТаблицаТоваров.Назначение                     КАК Назначение,
	|	0                                             КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0                                             КАК СуммаСНДС,
	|	0                                             КАК СуммаНДС,
	|	0                                             КАК СуммаВознаграждения,
	|	0                                             КАК СуммаНДСВознаграждения,
	|	&Сделка                                       КАК Сделка,
	|	ИСТИНА                                        КАК ПодбиратьВидыЗапасов
	|	
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ДокументРеализации         КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                   КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)      КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.ЗаказДавальца              КАК ЗаказДавальца,
	|	ТаблицаВидыЗапасов.КодСтроки                  КАК КодСтроки,
	|	ТаблицаВидыЗапасов.Количество                 КАК Количество
	|ПОМЕСТИТЬ ВТВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ДокументРеализации         КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.НомерГТД                   КАК НомерГТД,
	|	ТаблицаВидыЗапасов.СкладОтгрузки              КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.ЗаказДавальца              КАК ЗаказДавальца,
	|	ТаблицаВидыЗапасов.КодСтроки                  КАК КодСтроки,
	|	ТаблицаВидыЗапасов.Количество                 КАК Количество,
	|	Аналитика.Номенклатура                        КАК Номенклатура,
	|	Аналитика.Характеристика                      КАК Характеристика,
	|	Аналитика.Склад                               КАК Склад,
	|	&Сделка                                       КАК Сделка,
	|	Аналитика.Серия                               КАК Серия,
	|	&ВидыЗапасовУказаныВручную                    КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВТВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",                          Ссылка);
	Запрос.УстановитьПараметр("Дата",                            Дата);
	Запрос.УстановитьПараметр("Организация",                     Организация);
	Запрос.УстановитьПараметр("Менеджер",                        Менеджер);
	Запрос.УстановитьПараметр("Подразделение",                   Подразделение);
	Запрос.УстановитьПараметр("Сделка",                          Справочники.СделкиСКлиентами.ПустаяСсылка());
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",           ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ПередачаПоЗаказам",               ПередачаПоЗаказам);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную",       ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("РеализацияПоНесколькимЗаказам",   ПередачаПоЗаказам И Не ЗначениеЗаполнено(ЗаказДавальца));
	Запрос.УстановитьПараметр("ТаблицаТоваров",                  ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(Товары.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",              ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
	
	Запрос.Выполнить();
	
	Если ВидыЗапасовУказаныВручную Тогда
		ДополнительныеСвойства.Вставить("ИгнорироватьОперативныеОстатки", Истина);
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Заполняет условия продаж в заказе клиента
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Валюта
	
	Если ЗначениеЗаполнено(УсловияПродаж.Валюта) И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		Валюта = УсловияПродаж.Валюта;
	КонецЕсли;
	
	// Организация и банковский счет организации
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		
		Если ЗначениеЗаполнено(УсловияПродаж.Организация) И Организация.Пустая() Тогда
			
			Организация = УсловияПродаж.Организация;

			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация = Организация;

			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Контрагент
	
	Если Не УсловияПродаж.Типовое Тогда
		
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) И УсловияПродаж.Контрагент <> Контрагент Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	// Контактное лицо
	
	Если Не УсловияПродаж.Типовое Тогда
		
		Если ЗначениеЗаполнено(УсловияПродаж.КонтактноеЛицо) И Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	// Договор и Банковские счета
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
		Параметрыобъекта = ПараметрыОбъектаССоглашением();
		
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
			Параметрыобъекта,
			ХозяйственнаяОперацияДоговора);
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(
			Договор,
			БанковскийСчетОрганизации,
			БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	// Склад и ответственные
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) И Склад.Пустая() Тогда
		
		Склад = УсловияПродаж.Склад;
		
		СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(Склад, Менеджер);
		Если СтруктураОтветственного <> Неопределено Тогда
			Отпустил          = СтруктураОтветственного.Ответственный;
			ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ПараметрыОтбора = Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение, ХозяйственнаяОперация", 
			Истина, 
			Справочники.СоглашенияСКлиентами.ПустаяСсылка(), 
			ХозяйственнаяОперация);
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Партнер,
			ПараметрыОтбора);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
			
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация    		= Организация;
			СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;

			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			
		Иначе
			
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	// Доставка
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Партнер);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// 4D:ERP для Беларуси, ВладимирР, 21.09.2015 14:30:43 
	// Учет бланков строгой отчетности, №10038, №15564
	// {
	Если НЕ ЗначениеЗаполнено(ТипБСО) Тогда
		ТипБСО = УчетБланковСтрогойОтчетностиСервер.ПередЗаписьюРеквизитТипБСО(Дата, СерияИсходящегоДокумента, НомерИсходящегоДокумента);
	КонецЕсли;
	// }
	// 4D
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ЗаказыСервер.ПроверитьДатуРаспоряжения(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	СуммаДокумента = 0;
	ПорядокРасчетов = ЗаказДавальца.ПорядокРасчетов;
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект,Документы.ПередачаДавальцу));
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи);
	
	Если ПередачаПоЗаказам И ЗначениеЗаполнено(ЗаказДавальца) Тогда
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказДавальца) Тогда
				ТекСтрока.ЗаказДавальца = ЗаказДавальца;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			ХозяйственнаяОперация,
			Склад,
			Подразделение,
			Партнер);
		
		// Если Склад - группа, то для аналитики учета номенклатуры склад берем из ТЧ
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		Если Склад.ЭтоГруппа И Склад.ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных Тогда
			ИменаПолей.Вставить("Произвольный", "Склад");
		КонецЕсли;
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(
			Товары,
			МестаУчета,
			ИменаПолей);
		
		ЗаполнитьВидыЗапасов(Отказ);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасов);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		// Заполнение из формы списка распоряжений.
		Если ДанныеЗаполнения.Свойство("ДокументОснование")
			И (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказДавальца") 
			Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив")) Тогда
			
			// Если передан склад - необходимо заполнять товары только по указанном складу.
			ПараметрыЗаполнения = ПараметрыЗаполненияДокументаНаОснованиЗаказаДавальца();
			
			ДанныеЗаполнения.Свойство("СкладОтгрузки",            ПараметрыЗаполнения.СкладОтгрузки);
			ДанныеЗаполнения.Свойство("РеквизитыШапки",           ПараметрыЗаполнения.РеквизитыЗаказа);
			ДанныеЗаполнения.Свойство("ВариантОформленияПродажи", ПараметрыЗаполнения.ВариантОформления);
			ДанныеЗаполнения.Свойство("ПараметрыОформления",      ПараметрыЗаполнения.ПараметрыОформления);
			
			ЗаполнитьДокументНаОснованииЗаказаДавальца(ДанныеЗаполнения.ДокументОснование, ПараметрыЗаполнения);
			
		Иначе
			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		
		Дата = ЗаказыСервер.ПолучитьМинимальнуюДатуОтгрузкиЗаказа(ДанныеЗаполнения);
		ПараметрыЗаполнения = ПараметрыЗаполненияДокументаНаОснованиЗаказаДавальца();
		ЗаполнитьДокументНаОснованииЗаказаДавальца(ДанныеЗаполнения, ПараметрыЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьУсловияПродаж();
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь",   Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(
		ЭтотОбъект,
		ПроверяемыеРеквизиты,
		Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект,
		МассивНепроверяемыхРеквизитов,
		Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаДавальцу),
		Отказ,
		МассивНепроверяемыхРеквизитов);
	
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, Истина);
	
	Для ТекИндекс = 0 По Товары.Количество() - 1 Цикл
		
		Если ПередачаПоЗаказам И
			Не ЗначениеЗаполнено(ЗаказДавальца) И
			Не ЗначениеЗаполнено(Товары[ТекИндекс].ЗаказДавальца) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Заказ давальца"" в строке %НомерСтроки% списка ""Выпущенная продукция""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ЗаказДавальца"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Код строки должен быть заполнен, если реализация по заказу
	Если Не ПередачаПоЗаказам Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам") Тогда
		ПроверяемыеРеквизиты.Добавить("Подразделение");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ПередачаДавальцу.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	// Контроль и запись движений
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Согласован            = Ложь;
	ЗаказДавальца    = Неопределено;
	ХозяйственнаяОперация = Метаданные.Документы.ПередачаДавальцу.Реквизиты.ХозяйственнаяОперация.ЗначениеЗаполнения;
	ПередачаПоЗаказам     = Ложь;
	
	СтрокТоваров = Товары.Количество();
	
	Для Каждого СтрТЧ из Товары Цикл
		
		СтрТЧ.ЗаказДавальца = Неопределено;
		СтрТЧ.КодСтроки = 0;
		
	КонецЦикла;
	
	Серии.Очистить();
	ВидыЗапасов.Очистить();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ТранспортнаяНакладная.АктуализироватьТранспортныеНакладные(Ссылка, Проведен, ПометкаУдаления);

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = ОбщегоНазначенияУТПовтИсп.ДополнительныйПрефиксНумератораДокументыРеализацииТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Функция ПараметрыЗаполненияДокументаНаОснованиЗаказаДавальца()
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("СкладОтгрузки",       Неопределено);
	ПараметрыЗаполнения.Вставить("РеквизитыЗаказа",     Неопределено);
	ПараметрыЗаполнения.Вставить("ВариантОформления",   Неопределено);
	ПараметрыЗаполнения.Вставить("ПараметрыОформления", Неопределено);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура ЗаполнитьДокументНаОснованииЗаказаДавальца(Знач ДокументОснование, ПараметрыЗаполнения)
	
	ТипОснования = ТипЗнч(ДокументОснование);
	ЗаполнятьПоОстаткам = Ложь;
	РеквизитыЗаказа = ПараметрыЗаполнения.РеквизитыЗаказа;
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказДавальца") Тогда
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		// Общее
		|	ЗаказДавальца.Ссылка                                       КАК ЗаказДавальца,
		|	ЗаказДавальца.Сделка                                       КАК Сделка,
		|	ЗаказДавальца.Организация                                  КАК Организация,
		|	ЗаказДавальца.Валюта                                       КАК Валюта,
		|	ЗаказДавальца.Подразделение                                КАК Подразделение,
		// Статус
		|	ЗаказДавальца.Статус                                       КАК СтатусДокумента,
		// Партнер
		|	ЗаказДавальца.Партнер                                      КАК Партнер,
		|	ЗаказДавальца.Контрагент                                   КАК Контрагент,
		|	ЗаказДавальца.КонтактноеЛицо                               КАК КонтактноеЛицо,
		|	ЗаказДавальца.Договор                                      КАК Договор,
		|	ЗаказДавальца.БанковскийСчет                               КАК БанковскийСчетОрганизации,
		// Грузоотправитель и грузополучатель
		|	ЗаказДавальца.Грузоотправитель                             КАК Грузоотправитель,
		|	ЗаказДавальца.Грузополучатель                              КАК Грузополучатель,
		|	ЗаказДавальца.БанковскийСчетГрузоотправителя               КАК БанковскийСчетГрузоотправителя,
		|	ЗаказДавальца.БанковскийСчетГрузополучателя                КАК БанковскийСчетГрузополучателя,
		// Отгрузка
		|	ВЫБОР КОГДА ЗаказДавальца.Склад.ЭтоГруппа
		|			  И ЗаказДавальца.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах) ТОГДА
		|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	ИНАЧЕ
		|		ЗаказДавальца.Склад
		|	КОНЕЦ                                                      КАК Склад,
		|	ВЫБОР КОГДА ЗаказДавальца.Склад.ЭтоГруппа
		|			  И ЗаказДавальца.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ                                                      КАК ЗапрещеноВыбиратьГруппуСкладов,
		|	ЗаказДавальца.НеОтгружатьЧастями                           КАК НеОтгружатьЧастями,
		|	ЗаказДавальца.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке   КАК ОрдернаяСхемаПриОтгрузке,
		// Доставка
		|	ЗаказДавальца.АдресДоставки                                КАК АдресДоставки,
		|	ЗаказДавальца.АдресДоставкиЗначенияПолей                   КАК АдресДоставкиЗначенияПолей,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказДавальца.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		|		ЗаказДавальца.СпособДоставки
		|	КОНЕЦ                                                      КАК СпособДоставки,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказДавальца.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		|		ЗаказДавальца.ПеревозчикПартнер
		|	КОНЕЦ                                                      КАК ПеревозчикПартнер,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ЗаказДавальца.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		|		ЗаказДавальца.ДополнительнаяИнформацияПоДоставке
		|	КОНЕЦ                                                      КАК ДополнительнаяИнформацияПоДоставке,
		// Проверка
		|	ВЫБОР КОГДА ЗаказДавальца.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|										ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
		|		ЛОЖЬ
		|	ИНАЧЕ
		|		ИСТИНА
		|	КОНЕЦ                                                      КАК ЕстьОшибкиСтатус,
		|	Не ЗаказДавальца.Проведен                                  КАК ЕстьОшибкиПроведен
		|
		|ИЗ
		|	Документ.ЗаказДавальца КАК ЗаказДавальца
		|
		|ГДЕ
		|	ЗаказДавальца.Ссылка = &ЗаказДавальца
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыОстатки.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(
		|		,
		|		ЗаказКлиента = &ЗаказДавальца
		|) КАК ЗаказыОстатки");
		
		Запрос.УстановитьПараметр("ЗаказДавальца", ДокументОснование);
		Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
			ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
		РеквизитыЗаказа.Следующий();
		
		// Проверка заказа
		МассивДопустимыхСтатусов = Новый Массив;
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыЗаказа.ЗаказДавальца,
			РеквизитыЗаказа.СтатусДокумента,
			РеквизитыЗаказа.ЕстьОшибкиПроведен,
			РеквизитыЗаказа.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов);
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		
		// Указание складов
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
		КонецЕсли;
		
		Склад = РеквизитыЗаказа.Склад;
		
	ИначеЕсли ТипОснования = Тип("Массив") Тогда
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		БанковскийСчетОрганизации = РеквизитыЗаказа.БанковскийСчет;
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		
		Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
			
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация    = Организация;
			СтруктураПараметров.БанковскийСчет = БанковскийСчетОрганизации;
			
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		КонецЕсли;
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			
			Склад = РеквизитыЗаказа.СкладОтгрузки;
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаказыОстатки.Склад КАК Склад
				|ИЗ
				|	РегистрНакопления.ЗаказыКлиентов.Остатки(
				|		,
				|		ЗаказКлиента В (&МассивДокументов)
				|) КАК ЗаказыОстатки
				|");
			
			Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
			РезультатЗапросаПоСкладам = Запрос.Выполнить();
			
			МассивСкладов = РезультатЗапросаПоСкладам.Выгрузить().ВыгрузитьКолонку("Склад");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПередачаПоЗаказам = Истина;
	
	// Заполнение т.ч. товары.
	Если Не ЗначениеЗаполнено(ПараметрыЗаполнения.СкладОтгрузки) Тогда
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			
			// Только услуги
			Если МассивСкладов.Количество() = 0 Тогда
				ЗаполнятьПоОстаткам = Истина;
				
			// Услуги или товары
			ИначеЕсли МассивСкладов.Количество() = 1 Тогда
				ПараметрыЗаполнения.СкладОтгрузки = МассивСкладов[0];
				Склад = ПараметрыЗаполнения.СкладОтгрузки;
				ЗаполнятьПоОстаткам = Истина;
				
			// Услуги и товары
			ИначеЕсли МассивСкладов.Количество() = 2 Тогда
				Если Не ЗначениеЗаполнено(МассивСкладов[0]) Или
					Не ЗначениеЗаполнено(МассивСкладов[1]) Тогда
					ПараметрыЗаполнения.СкладОтгрузки = ?(ЗначениеЗаполнено(МассивСкладов[0]), МассивСкладов[0], МассивСкладов[1]);
					Склад = ПараметрыЗаполнения.СкладОтгрузки;
					ЗаполнятьПоОстаткам = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнятьПоОстаткам = Истина;
			ПараметрыЗаполнения.СкладОтгрузки = Склад;
			
		КонецЕсли;
		
	Иначе
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			Склад = ПараметрыЗаполнения.СкладОтгрузки;
		КонецЕсли;
		ЗаполнятьПоОстаткам = Истина;
		
	КонецЕсли;
	
	Если ЗаполнятьПоОстаткам Тогда
		
		Если ТипОснования = Тип("Массив") Тогда
			МассивЗаказов = ДокументОснование;
		Иначе
			МассивЗаказов = Новый Массив();
			МассивЗаказов.Добавить(ЗаказДавальца);
		КонецЕсли;
		
		ПараметрыОформления = Новый Структура;
		ПараметрыОформления.Вставить("ВариантОформления",   ПараметрыЗаполнения.ВариантОформления);
		ПараметрыОформления.Вставить("ПараметрыОформления", ПараметрыЗаполнения.ПараметрыОформления);
		
		Документы.ПередачаДавальцу.ЗаполнитьПоОстаткамЗаказов(
			ЭтотОбъект,
			Товары,
			?(ПараметрыЗаполнения.СкладОтгрузки=Неопределено, Справочники.Склады.ПустаяСсылка(), ПараметрыЗаполнения.СкладОтгрузки),
			МассивЗаказов,
			ПараметрыОформления);
		
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказДавальца, Товары, "ЗаказДавальца");
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаДавальцу);
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект, ПараметрыУказанияСерий, Ложь);
		
	КонецЕсли;
	
	ПередачаПоЗаказам = Истина;
	
	СтруктураОснование = Документы.ПередачаДавальцу.СтруктураОснованияДляПечати(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураОснование);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		ЗаполнитьУсловияПродажПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер                  = Пользователи.ТекущийПользователь();
	Валюта                    = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Организация;
	СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;

	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	Склад                     = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"), Истина);
	ДатаРаспоряжения          = ТекущаяДатаСеанса();
	ХозяйственнаяОперация     = Перечисления.ХозяйственныеОперации.ПередачаДавальцу;
	ПередачаПоЗаказам         = Истина; // Всегда только по заказам
	
	СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(Склад, Менеджер);
	Если СтруктураОтветственного <> Неопределено Тогда
		Отпустил              = СтруктураОтветственного.Ответственный;
		ОтпустилДолжность     = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьУсловияПродаж()
	
	ЗаполнитьУсловияПродажПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Функция ИзменилисьРеквизитыШапкиВлияющиеНаВидыЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам ТОГДА
	|		ДанныеДокумента.Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам ТОГДА
	|		ДанныеДокумента.Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер
	|
	|ПОМЕСТИТЬ СохраненныеДанныеДокумента
	|ИЗ
	|	Документ.ПередачаДавальцу КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		СохраненныеДанныеДокумента КАК СохраненныеДанные
	// Условие на изменение хотябы одного реквизита
	|	ПО Не (ДанныеДокумента.Организация   = СохраненныеДанные.Организация
	|		 И ДанныеДокумента.Подразделение = СохраненныеДанные.Подразделение
	|		 И ДанныеДокумента.Менеджер      = СохраненныеДанные.Менеджер)");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ИзмениласьТЧТоварыОтносительноТЧВидыЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТоваров.Склад                      КАК Склад,
	|		ТаблицаТоваров.ЗаказДавальца              КАК ЗаказДавальца,
	|		ТаблицаТоваров.КодСтроки                  КАК КодСтроки,
	|		ТаблицаТоваров.Назначение                 КАК Назначение,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.Количество                 КАК Количество
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.Склад                      КАК Склад,
	|		ТаблицаВидыЗапасов.ЗаказДавальца              КАК ЗаказДавальца,
	|		ТаблицаВидыЗапасов.КодСтроки                  КАК КодСтроки,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		-ТаблицаВидыЗапасов.Количество                КАК Количество
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказДавальца,
	|	ТаблицаТоваров.КодСтроки,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат (Не Запрос.Выполнить().Пустой());
	
КонецФункции

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Передача превышает остаток товара организации %1 %2 %3'"),
			Организация,                        // %1
			СтруктураАналитики.СтрокаАналитики, // %2
			СтруктураАналитики.Аналитика);      // %3
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект);
		
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаТаблицы.Номенклатура,
				СтрокаТаблицы.Характеристика);
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Номенклатура: %1, на складе %2 недостаточно %3 %4 %5'"),
				ПредставлениеНоменклатуры,                                                        // %1
				СтрокаТаблицы.Склад,                                                              // %2
				СтрокаТаблицы.Количество,                                                         // %3
				СтрокаТаблицы.ЕдиницаИзмерения,                                                   // %4
				?(СтрокаТаблицы.НеУказанНомерГТД, НСтр("ru = 'с указанными номерами ГТД'"), "")); // %5
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуВидовЗапасов(СтрокаТоваров, СтруктураПоиска, Ресурсы)
	
	Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
		
		Если СтрокаЗапасов.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоПоСтроке = Мин(Ресурсы.КоличествоТоваровПоСтроке, СтрокаЗапасов.Количество);
		
		НоваяСтрока = ВидыЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
		
		НоваяСтрока.Упаковка            = СтрокаТоваров.Упаковка;
		НоваяСтрока.ЗаказДавальца  = СтрокаТоваров.ЗаказДавальца;
		НоваяСтрока.КодСтроки           = СтрокаТоваров.КодСтроки;
		НоваяСтрока.Количество          = КоличествоПоСтроке;
		
		Если Ресурсы.КоличествоТоваровПоСтроке = 0 Тогда
			НоваяСтрока.КоличествоУпаковок = 0;
		Иначе
			НоваяСтрока.КоличествоУпаковок = Ресурсы.КоличествоУпаковокПоСтроке * КоличествоПоСтроке / Ресурсы.КоличествоТоваровПоСтроке;
		КонецЕсли;
		
		Ресурсы.КоличествоТоваровПоСтроке  = Ресурсы.КоличествоТоваровПоСтроке  - НоваяСтрока.Количество;
		Ресурсы.КоличествоУпаковокПоСтроке = Ресурсы.КоличествоУпаковокПоСтроке - НоваяСтрока.КоличествоУпаковок;
		
		СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
		
		Если Ресурсы.КоличествоТоваровПоСтроке = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДопКолонкиВидовЗапасов() Экспорт
	
	КолонкиГруппировок = "АналитикаУчетаНоменклатуры, Упаковка, ЗаказДавальца, КодСтроки";
	КолонкиСуммирования = "Количество, КоличествоУпаковок";
	
	ТаблицаТовары = Товары.Выгрузить(, КолонкиГруппировок + ", " + КолонкиСуммирования);
	ТаблицаТовары.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоТоваровПоСтроке",  СтрокаТоваров.Количество);
		Ресурсы.Вставить("КоличествоУпаковокПоСтроке", СтрокаТоваров.КоличествоУпаковок);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		ЗаполнитьСтрокуВидовЗапасов(СтрокаТоваров, СтруктураПоиска, Ресурсы);
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ЗаказДавальца) И Ресурсы.КоличествоТоваровПоСтроке <> 0 Тогда
			СтруктураПоиска.ЗаказДавальца = Неопределено;
			ЗаполнитьСтрокуВидовЗапасов(СтрокаТоваров, СтруктураПоиска, Ресурсы);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц  = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	
	Если Не Проведен
	 Или ПерезаполнитьВидыЗапасов
	 Или ИзменилисьРеквизитыШапкиВлияющиеНаВидыЗапасов(МенеджерВременныхТаблиц)
	 Или ИзмениласьТЧТоварыОтносительноТЧВидыЗапасов(МенеджерВременныхТаблиц) Тогда
		
		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
		
		ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
		
		ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(
			Ссылка,
			Организация,
			Дата,
			ДополнительныеСвойства,
			МенеджерВременныхТаблиц);
		
		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
			МенеджерВременныхТаблиц,
			ДополнительныеСвойства,
			ВидыЗапасов,
			ТаблицаОшибок,
			Отказ);
		
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД", "Количество");
		
		ЗаполнитьДопКолонкиВидовЗапасов();
		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПараметрыОбъектаССоглашением(ИменаРеквизитов = "")
	
	Если ПустаяСтрока(ИменаРеквизитов) Тогда
		ИменаРеквизитов = "Партнер, Договор, Контрагент, Организация";
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
	
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	Массив.Добавить(Движения.ТоварыКОтгрузке);
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.ЗаказыКлиентов);
		
		Если НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаДавальцу).ИспользоватьСерииНоменклатуры Тогда
			Массив.Добавить(Движения.ТоварыНаСкладах);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

// Процедура формирует временную таблицу доступных видов запасов
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//								который будет содержать созданную таблицу
//
Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	// Виды запасов продукция давальца
	|ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка         КАК ВидЗапасов,
	|	ВидыЗапасов.Ссылка         КАК ВидЗапасовПродавца
	|	
	|ПОМЕСТИТЬ ДоступныеВидыЗапасов
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	НЕ ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	И ВидыЗапасов.Организация = &Организация
	|	И Не ВидыЗапасов.ПометкаУдаления
	|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|	И ВидыЗапасов.Комитент = &Партнер
	|	И ВидыЗапасов.Договор = &Договор");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партнер",     Партнер);
	Запрос.УстановитьПараметр("Договор",     Договор);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаДавальцу.Товары КАК ТоварыДокумента
	|		ПО ЗаказКлиента.Ссылка = ТоварыДокумента.ЗаказДавальца
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &Ссылка
	|	И ЗаказКлиента.Ссылка НЕ В(&МассивЗаказов)
	|";
	
	Запрос.УстановитьПараметр("МассивЗаказов", ЭтотОбъект.Товары.ВыгрузитьКолонку("ЗаказДавальца"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивЗависимыхЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
