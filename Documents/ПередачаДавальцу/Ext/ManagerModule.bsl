#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	// Порядок следования полей имеет значение
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.Партнер           КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	Шапка.СпособДоставки    КАК СпособДоставки,
	|	ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка) КАК Зона,
	|	Шапка.АдресДоставки     КАК Адрес,
	|	Шапка.АдресДоставкиЗначенияПолей
	|	                        КАК АдресЗначенияПолей,
	|	ДАТАВРЕМЯ(1,1,1)        КАК ВремяС,
	|	ДАТАВРЕМЯ(1,1,1)        КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Т.Склад                 КАК Склад,
	|	ИСТИНА                  КАК ДоставитьПолностью,
	|	Ложь                    КАК ОсобыеУсловияПеревозки,
	|	""""                    КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.Ссылка КАК Ссылка,
	|		Т.Склад КАК Склад
	|	ИЗ
	|		Документ.ПередачаДавальцу.Товары КАК Т
	|	ГДЕ
	|		Т.Ссылка В (&Ссылки)
	|		И Т.Номенклатура.ТипНоменклатуры В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаДавальцу КАК Шапка
	|		ПО (Шапка.Ссылка = Т.Ссылка)
	|
	|ГДЕ Шапка.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|		И НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт


	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСоздатьНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
// Возвращаемое значение:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПередачаДавальцу) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ПередачаДавальцу.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ПередачаДавальцу);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводствоИзДавальческогоСырья";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

// Возвращает значение распоряжения на поступление или отгрузку.
//
//Параметры:
//	ЗначенияПолейДляОпределенияРаспоряжения - Структура - состав полей определяется значением
//		поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа
//
// Возвращаемое значение:
//	ДокументСсылка.ЗаказДавальца - распоряжение на поступление или отгрузку.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Товары_ЗаказДавальца;
КонецФункции

#Область Заполнение

// Заполняет таблицы товаров и скидок по данным отбора или массиву заказов
//
// Параметры:
//	ДанныеОтбора            - Структура - поля, по которым будут отобраны остатки заказов для заполнения документа
//	Товары                  - ДанныеФормыКоллекция - таблица товаров, в которую будут помещены остатки заказов
//	СкладРеализации         - СправочникСсылка.Склады - склад, по которому будут отобраны остатки заказов
//	МассивЗаказов           - Массив - заказы, по которым будут отобраны остатки
//	ПараметрыЗаполнения     - Структура - Структура параметров заполнения.
//
Процедура ЗаполнитьПоОстаткамЗаказов(ДанныеОтбора,
	                                 Товары,
	                                 СкладРеализации,
	                                 МассивЗаказов,
	                                 ПараметрыЗаполнения) Экспорт
	
	ВариантОформления      = Неопределено;
	ОтображатьСообщение     = Истина;
	ПодборПоЗаказамОрдерам  = Ложь;
	ПараметрыОформления     = Неопределено;
	
	ПараметрыЗаполнения.Свойство("ВариантОформления", ВариантОформления);
	Если ПараметрыЗаполнения.Свойство("ОтображатьСообщение") Тогда 
		ОтображатьСообщение = ПараметрыЗаполнения.ОтображатьСообщение;
	КонецЕсли;
	Если ПараметрыЗаполнения.Свойство("ПодборПоЗаказамОрдерам") Тогда 
		ПодборПоЗаказамОрдерам = ПараметрыЗаполнения.ПодборПоЗаказамОрдерам;
	КонецЕсли;
	Если ПараметрыЗаполнения.Свойство("ПараметрыОформления", ПараметрыОформления) Тогда
		Если ПараметрыОформления <> Неопределено Тогда
			ЗаполнениеПоЗаказам = ПараметрыОформления.ПоЗаказам;
			ЗаполнениеПоОрдерам = ПараметрыОформления.ПоОрдерам;
		КонецЕсли;
	КонецЕсли;
	
	// Данные по остаткам товаров заказа
	РезультатЗапросаПоОстаткамЗаказов = ПолучитьРезультатЗапросаПоОстаткамЗаказов(
		ДанныеОтбора,
		СкладРеализации,
		МассивЗаказов,
		ВариантОформления);
	
	Если РезультатЗапросаПоОстаткамЗаказов[3].Пустой()
		И РезультатЗапросаПоОстаткамЗаказов[4].Пустой()
		И ОтображатьСообщение Тогда
		
		ТекстОшибки = НСтр("ru='Нет товаров, доступных для отгрузки. Для начала процесса отгрузки необходимо
			|указать действие ""Отгрузить"" в списке товаров для отгружаемых позиций номенклатуры.'");
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ВыборкаТовары = РезультатЗапросаПоОстаткамЗаказов[3].Выбрать();
	
	ПорядокОформления = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить();
	
	ЗаполнятьПоОрдеру = 
		(ПорядокОформления = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера И НЕ ПодборПоЗаказамОрдерам);
		
	Если ПараметрыОформления <> Неопределено Тогда
		ЗаполнятьПоОрдеру = ЗаполнениеПоОрдерам И НЕ ЗаполнениеПоЗаказам;
	КонецЕсли;
	
	ОтгруженныеТовары = РезультатЗапросаПоОстаткамЗаказов[5].Выгрузить();
	
	ВыборкаТовары.Сбросить();
	Пока ВыборкаТовары.Следующий() Цикл
		
		КоличествоКОтгрузке = ВыборкаТовары.Количество;
		ЗаполнениеПоОрдеру = ЗаполнятьПоОрдеру И ВыборкаТовары.ПроверятьОтгрузку;
		Если ЗаполнениеПоОрдеру Тогда
			
			ПараметрыПоиска = Новый Структура();
			ПараметрыПоиска.Вставить("ЗаказДавальца",  ВыборкаТовары.ЗаказДавальца);
			ПараметрыПоиска.Вставить("Номенклатура",   ВыборкаТовары.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ВыборкаТовары.Характеристика);
			ПараметрыПоиска.Вставить("Склад",          ВыборкаТовары.Склад);
			
			НайденныеСтроки = ОтгруженныеТовары.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОтгруженнаяСтрока = НайденныеСтроки[0];
			
			Если ОтгруженнаяСтрока.Количество > 0 Тогда
				
				Если ОтгруженнаяСтрока.Количество < ВыборкаТовары.Количество Тогда
					КоличествоКОтгрузке = ОтгруженнаяСтрока.Количество;
					ОтгруженнаяСтрока.Количество = 0;
				Иначе
					КоличествоКОтгрузке = ВыборкаТовары.Количество;
					ОтгруженнаяСтрока.Количество = ОтгруженнаяСтрока.Количество - ВыборкаТовары.Количество;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ИсключитьСвойства = "Количество";
		
		СтрокаТаб = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, ВыборкаТовары, , ИсключитьСвойства);
		
		СтрокаТаб.Количество = КоличествоКОтгрузке;
		
		СтрокаТаб.КоличествоУпаковок = КоличествоКОтгрузке / ВыборкаТовары.Коэффициент;
		
		Если ПодборПоЗаказамОрдерам Тогда
			
			СтрокаТаб.КоличествоВЗаказе = ?(ВыборкаТовары.КодСтроки <> 0, КоличествоКОтгрузке, 0);
			СтрокаТаб.КоличествоУпаковокВЗаказе = ?(ВыборкаТовары.КодСтроки<> 0, КоличествоКОтгрузке, 0) / ВыборкаТовары.Коэффициент;
			
			ПараметрыПоиска = Новый Структура();
			ПараметрыПоиска.Вставить("ЗаказДавальца",  ВыборкаТовары.ЗаказДавальца);
			ПараметрыПоиска.Вставить("Номенклатура",   ВыборкаТовары.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ВыборкаТовары.Характеристика);
			ПараметрыПоиска.Вставить("Склад",          ВыборкаТовары.Склад);
			
			НайденныеСтроки = ОтгруженныеТовары.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОтгруженнаяСтрока = НайденныеСтроки[0];
			
			Если ОтгруженнаяСтрока.Количество > 0 Тогда
				Если ОтгруженнаяСтрока.Количество <= ВыборкаТовары.Количество Тогда
					СтрокаТаб.КоличествоВОрдере = ОтгруженнаяСтрока.Количество;
					СтрокаТаб.КоличествоУпаковокВОрдере = ОтгруженнаяСтрока.Количество / ВыборкаТовары.Коэффициент;
					ОтгруженнаяСтрока.Количество = 0;
					ОтгруженныеТовары.Удалить(ОтгруженнаяСтрока);
				Иначе
					СтрокаТаб.КоличествоВОрдере = ВыборкаТовары.Количество;
					СтрокаТаб.КоличествоУпаковокВОрдере =ВыборкаТовары.Количество / ВыборкаТовары.Коэффициент;
					ОтгруженнаяСтрока.Количество = ОтгруженнаяСтрока.Количество - ВыборкаТовары.Количество;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодборПоЗаказамОрдерам
		И ОтгруженныеТовары.Количество()>0 Тогда 
		
		Для каждого ОтгруженнаяСтрока Из ОтгруженныеТовары Цикл
			СтрокаТаб = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаб, ОтгруженнаяСтрока);
			СтрокаТаб.КоличествоВОрдере = СтрокаТаб.Количество;
			СтрокаТаб.КоличествоУпаковокВОрдере = СтрокаТаб.Количество;
			СтрокаТаб.КодСтроки = 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	СУММА(Товары.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Дата >= Склады.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 8
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И &ФактОтбора
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКлиенту
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 4
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 2
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|			ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|				И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|				И ТоварыДляЗапроса.Назначение = СерииДляЗапроса.Назначение
	|				И ТоварыДляЗапроса.Склад = СерииДляЗапроса.Склад
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|			ПО (ПолитикиУчетаСерий.Склад = ТоварыДляЗапроса.Склад)
	|				И ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.Склад = ТоварыДляЗапроса.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Склад,Дата";
	Возврат ИменаРеквизитов;
	
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры:
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//	Возвращаемое значение:
//			Структура - cостав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Склад");
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Ложь;
	ПараметрыУказанияСерий.ПланированиеОтбора   = Ложь;
	ПараметрыУказанияСерий.ФактОтбора           = Истина;
	
	ПараметрыУказанияСерий.РегистрироватьСерии = НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий);
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Товары_ЗаказДавальца");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Функция определяет реквизиты выбранного документа.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ПередачаДавальцу - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                  КАК Дата,
	|	ДанныеДокумента.Организация           КАК Организация,
	|	ДанныеДокумента.Партнер               КАК Партнер,
	|	ДанныеДокумента.Контрагент            КАК Контрагент,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ПередачаПоЗаказам     КАК ПередачаПоЗаказам,
	|	ДанныеДокумента.СуммаДокумента        КАК СуммаДокумента,
	|	ДанныеДокумента.Договор               КАК Договор
	|
	|ИЗ
	|	Документ.ПередачаДавальцу КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	СтруктураРеквизитов = Новый Структура;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтруктураРеквизитов.Вставить("Дата",                  Выборка.Дата);
		СтруктураРеквизитов.Вставить("Организация",           Выборка.Организация);
		СтруктураРеквизитов.Вставить("Партнер",               Выборка.Партнер);
		СтруктураРеквизитов.Вставить("Контрагент",            Выборка.Контрагент);
		СтруктураРеквизитов.Вставить("Договор",               Выборка.Договор);
		СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", Выборка.ХозяйственнаяОперация);
		СтруктураРеквизитов.Вставить("ПоЗаказу",              Выборка.ПередачаПоЗаказам);
		СтруктураРеквизитов.Вставить("СуммаДокумента",        Выборка.СуммаДокумента);
		
	Иначе
		
		СтруктураРеквизитов.Вставить("Дата",                  Дата(1,1,1));
		СтруктураРеквизитов.Вставить("Организация",           Справочники.Организации.ПустаяСсылка());
		СтруктураРеквизитов.Вставить("Партнер",               Справочники.Партнеры.ПустаяСсылка());
		СтруктураРеквизитов.Вставить("Контрагент",            Справочники.Контрагенты.ПустаяСсылка());
		СтруктураРеквизитов.Вставить("Договор",               Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПередачаДавальцу);
		СтруктураРеквизитов.Вставить("ПоЗаказу",              Ложь);
		СтруктураРеквизитов.Вставить("СуммаДокумента",        0);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Функция выполняет проверки документа-распоряжения при создании расходного ордера
//
// Параметры:
//	Распоряжение - ДокументСсылка.ПередачаДавальцу - Ссылка на документ-распоряжение
//	Склад - СправочникСсылка.Склады - Ссылка на элемент справочника Склады
//
// Возвращаемое значение:
//	Структура - результаты проверки:
//		- Отказ - Булево - Истина, если проверки прошли с ошибками, иначе - Ложь
//		- ТекстОшибки - Строка - Обязательно должен быть заполнен, когда Отказ = Истина
//		- ДатаОтгрузки - Дата
//		- ГруппаСкладовВРаспоряжении - Булево - В распоряжении выбрана группа складов 
//		- ИспользоватьОрдернуюСхему - Булево - На складе используется ордерная схема
//
Функция ВыполнитьПроверкиРаспоряжения(Распоряжение, Склад) Экспорт 
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Операция", "");
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	СтруктураВозврата.Вставить("ГруппаСкладовВРаспоряжении", Ложь);
	СтруктураВозврата.Вставить("ДатаОтгрузки");
	СтруктураВозврата.Вставить("ИспользоватьОрдернуюСхему");
	
	Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Склад")) Тогда
		
		ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Склад"" в документе ""%Распоряжение%"". Невозможно создать ордер.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Распоряжение%", Строка(Распоряжение));
		СтруктураВозврата.ТекстОшибки = ТекстОшибки;
		СтруктураВозврата.Операция = "Отказ";
		
		Возврат СтруктураВозврата
		
	КонецЕсли;
	
	СтруктураГруппыСкладов     = Новый Структура("ЭтоГруппа", "Склад.ЭтоГруппа");
	ЗначениеГруппыСкладов      = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, СтруктураГруппыСкладов);
	ГруппаСкладовВРаспоряжении = ЗначениеГруппыСкладов.ЭтоГруппа;
	
	СтруктураВозврата.ГруппаСкладовВРаспоряжении = ГруппаСкладовВРаспоряжении; 

	Если ГруппаСкладовВРаспоряжении Тогда
		Если Не ЗначениеЗаполнено(Склад) Тогда
			МассивСкладов = Документы.РасходныйОрдерНаТовары.ОрдерныеСкладыПриОтгрузке(Распоряжение, Неопределено);
			Если МассивСкладов.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Для складов документа ""%Распоряжение%"" оформление приходных ордеров не требуется.
										|Заполнение документа не выполнено.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Распоряжение%", Строка(Распоряжение));
				СтруктураВозврата.ТекстОшибки = ТекстОшибки;
				СтруктураВозврата.Операция = "Отказ";
				Возврат СтруктураВозврата;
			ИначеЕсли МассивСкладов.Количество() = 1 Тогда
				Склад = МассивСкладов[0];
			Иначе
				СтруктураВозврата.Операция = "Возврат";
				Возврат СтруктураВозврата;
			КонецЕсли;
		Иначе
			СтруктураВозврата.Операция = "Возврат";
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты = Новый Структура("ДатаОтгрузки, Склад, ИспользоватьОрдернуюСхему", "Дата");
		 	
	Если Не ГруппаСкладовВРаспоряжении Тогда
		
		Реквизиты.Склад = "Склад";
		Реквизиты.ИспользоватьОрдернуюСхему ="
		|ВЫБОР
		|	КОГДА ЕстьNULL(Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, Ложь)
		|			И Дата >= ЕстьNULL(Склад.ДатаНачалаОрдернойСхемыПриОтгрузке, ДАТАВРЕМЯ(1,1,1))
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ";
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, Реквизиты);
		ИспользоватьОрдернуюСхему = ЗначенияРеквизитов.ИспользоватьОрдернуюСхему;
		
		СтруктураВозврата.ИспользоватьОрдернуюСхему = ИспользоватьОрдернуюСхему;
		
		Если ИспользоватьОрдернуюСхему Тогда
			
			Склад = ЗначенияРеквизитов.Склад;
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, ЗначенияРеквизитов, "ДатаОтгрузки");
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Для склада ""%Склад%"" оформление расходных ордеров не требуется.
				|Заполнение документа не выполнено.'");
			СтруктураВозврата.ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Склад%", Строка(ЗначенияРеквизитов.Склад));
			СтруктураВозврата.Операция = "Отказ";
			Возврат СтруктураВозврата;
			
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СтруктураВозврата
	
КонецФункции

// Возвращает структуру основания по данными документа
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.ПередачаСырьяПереработчику - Объект документа, по которму необходимо получить текст основания
//
// Возвращаемое значение:
//	СтруктураОснования - Структура с наименованием, датой и номером основания
//
Функция СтруктураОснованияДляПечати(Объект) Экспорт 
	
	СтруктураОснования = СтруктураОснования(Объект);
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "Дата, Номер");
		РеквизитыДоговораТекст = СтрШаблон(
			НСтр("ru='по договору №%1 от %2'"),
			РеквизитыДоговора.Номер,
			Формат(РеквизитыДоговора.Дата, "ДЛФ=ДД"));
		
	Иначе
		РеквизитыДогвораТекст = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		СтруктураОснования.Основание = СтруктураОснования.Основание + НСтр("ru=', переработка давальческого сырья %1'");
	Иначе
		СтруктураОснования.Основание = НСтр("ru='Переработка давальческого сырья %1'");
	КонецЕсли;
	
	СтруктураОснования.Основание = СтрШаблон(СтруктураОснования.Основание, РеквизитыДогвораТекст);
	
	Возврат СтруктураОснования;
	
КонецФункции

// Возвращает таблицу значений по умолчанию для реквизита "Основание"
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.ПередачаДавальцу - Объект документа, по которму необходимо получить список выбора
//
// Возвращаемое значение:
//	ТаблицаОснований - Таблица значений с реквизитами оснований
//
Функция ПолучитьТаблицуОснованийДляПечати(Объект) Экспорт 
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "Дата, Номер");
		РеквизитыДоговораТекст = СтрШаблон(
			НСтр("ru='по договору №%1 от %2'"),
			РеквизитыДоговора.Номер,
			Формат(РеквизитыДоговора.Дата, "ДЛФ=ДД"));
		
	Иначе
		РеквизитыДогвораТекст = "";
	КонецЕсли;
	
	ТаблицаОснований = Новый ТаблицаЗначений;
	ТаблицаОснований.Колонки.Добавить("Основание",      Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ТаблицаОснований.Колонки.Добавить("ОснованиеДата",  Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата))); 
	ТаблицаОснований.Колонки.Добавить("ОснованиеНомер", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(128)));
	
	СтруктураОснования = СтруктураОснования(Объект, Истина);
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		
		СтруктураОснования.Основание = СтрШаблон(
			СтруктураОснования.Основание + НСтр("ru=', переработка давальческого сырья %1'"),
			РеквизитыДоговораТекст);
			
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОснования);
		
	КонецЕсли;
	
	СтруктураОснования = СтруктураОснования(Объект, Ложь);
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		
		Если ТаблицаОснований.Количество() = 0 Тогда
			СтруктураОснования.Основание = СтрШаблон(
				СтруктураОснования.Основание + НСтр("ru=', переработка давальческого сырья %1'"),
				РеквизитыДоговораТекст);
		КонецЕсли;
		
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОснования);
		
	КонецЕсли;
	
	Если ТаблицаОснований.Количество() = 0 Тогда
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		ДобавленнаяСтрока.Основание      = СтрШаблон(НСтр("ru='Переработка давальческого сырья %1'"), РеквизитыДоговораТекст);
		ДобавленнаяСтрока.ОснованиеДата  = ?(ЗначениеЗаполнено(Объект.Договор), РеквизитыДоговора.Дата, ""); 
		ДобавленнаяСтрока.ОснованиеНомер = ?(ЗначениеЗаполнено(Объект.Договор), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДоговора.Номер), "");
	КонецЕсли;
	
	Возврат ТаблицаОснований;
	
КонецФункции

#КонецОбласти

#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
#Область ТекстВыпускПродукцииДавальца // (Дт  :: Кт 002)
	ТекстПередачаПродукцииДавальцу = "
	|ВЫБРАТЬ //// Выпуск продукции давальца (Дт  :: Кт 002)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Стоимости.СуммаЗабалансовая, Строки.СуммаЗабалансовая) КАК Сумма,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Операция.Склад.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение) КАК СчетКт,
	|	Строки.Контрагент		КАК СубконтоКт1,
	|	Строки.Номенклатура		КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО			КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	Строки.Количество КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Выпуск продукции давальца"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПередачаДавальцу КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСтроки КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|		И Строки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСтоимости КАК Стоимости
	|	ПО
	|		Строки.Ссылка = Стоимости.Ссылка
	|		И Строки.Номенклатура = Стоимости.Номенклатура
	|		И Строки.Склад = Стоимости.Склад
	|		И Строки.ГруппаФинансовогоУчета = Стоимости.ГруппаФинансовогоУчета
	|		И Строки.РазделУчета = Стоимости.РазделУчета
	|ГДЕ
	|	Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|";
#КонецОбласти
	
	Возврат ТекстПередачаПродукцииДавальцу;
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, 
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//	Строка - Текст запроса временной таблицы.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		Если ПравоДоступа("Изменение", Метаданные.Документы.ПередачаДавальцу) Тогда
			ВыбраннаяФорма = "ФормаСпискаДокументов";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.ЗаказДавальца                       КАК ЗаказДавальца,
	|	ДанныеДокумента.Контрагент                          КАК Контрагент,
	|	ДанныеДокумента.Партнер                             КАК Партнер,
	|	ДанныеДокумента.Ссылка                              КАК Ссылка,
	|	ДанныеДокумента.Дата                                КАК Период,
	|	ДанныеДокумента.Склад                               КАК Склад,
	|	ДанныеДокумента.Договор                             КАК Договор,
	|	ДанныеДокумента.Менеджер                            КАК Менеджер,
	|	ДанныеДокумента.Организация                         КАК Организация,
	|	ДанныеДокумента.Подразделение                       КАК Подразделение,
	|	ДанныеДокумента.ДатаРаспоряжения                    КАК ДатаРаспоряжения,
	|	ДанныеДокумента.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Проведен                            КАК Проведен,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)        КАК Назначение
	|
	|ИЗ
	|	Документ.ПередачаДавальцу КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	////////////////////////////////////////////////////////////////////////////
	// Установим параметры запроса
	
	Запрос.УстановитьПараметр("НалогообложениеНДС",             Неопределено);
	Запрос.УстановитьПараметр("ДатаРаспоряжения",               Реквизиты.ДатаРаспоряжения);
	Запрос.УстановитьПараметр("Подразделение",                  Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Организация",                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("Партнер",                        Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Серия",                          Реквизиты.Серия);
	Запрос.УстановитьПараметр("Период",                         Реквизиты.Период);
	Запрос.УстановитьПараметр("Договор",                        Реквизиты.Договор);
	Запрос.УстановитьПараметр("Менеджер",                       Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("Назначение",                     Реквизиты.Назначение);
	Запрос.УстановитьПараметр("Контрагент",                     Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("КорВидЗапасов",                  Справочники.ВидыЗапасов.ВидЗапасовДокумента(Реквизиты.Организация, Реквизиты.ХозяйственнаяОперация, Неопределено));
	Запрос.УстановитьПараметр("ЗаказДавальца",                  Реквизиты.ЗаказДавальца);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",          Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Реквизиты)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Номенклатура         КАК Номенклатура,
	|	Ключи.Характеристика       КАК Характеристика,
	|	&Серия                     КАК Серия,
	|	&Назначение                КАК Назначение,
	|	Товары.ВидЗапасов.Комитент КАК Склад
	|ИЗ
	|	Документ.ПередачаДавальцу.ВидыЗапасов КАК Товары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|	ПО
	|		Товары.АналитикаУчетаНоменклатуры = Ключи.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		Ключи.Номенклатура           = Аналитика.Номенклатура
	|		И Ключи.Характеристика       = Аналитика.Характеристика
	|		И &Серия                     = Аналитика.Серия
	|		И &Назначение                = Аналитика.Назначение
	|		И Товары.ВидЗапасов.Комитент = Аналитика.Склад
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Аналитика.Номенклатура ЕСТЬ NULL
	|	И Товары.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Номенклатура         КАК Номенклатура,
	|	Ключи.Характеристика       КАК Характеристика,
	|	&Серия                     КАК Серия,
	|	&ПустоеНазначение          КАК Назначение,
	|	Товары.ВидЗапасов.Комитент КАК Склад
	|ИЗ
	|	Документ.ПередачаДавальцу.ВидыЗапасов КАК Товары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|	ПО
	|		Товары.АналитикаУчетаНоменклатуры = Ключи.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		Ключи.Номенклатура           = Аналитика.Номенклатура
	|		И Ключи.Характеристика       = Аналитика.Характеристика
	|		И &Серия                     = Аналитика.Серия
	|		И &ПустоеНазначение          = Аналитика.Назначение
	|		И Товары.ВидЗапасов.Комитент = Аналитика.Склад
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ &ИспользуетсяНазначение
	|   И &Назначение <> &ПустоеНазначение
	|	И Аналитика.Номенклатура ЕСТЬ NULL
	|	И Товары.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|");
	
	Запрос.УстановитьПараметр("Ссылка",  Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Серия",   Реквизиты.Серия);
	Запрос.УстановитьПараметр("Партнер", Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Назначение", Реквизиты.Назначение);
	Запрос.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИспользуетсяНазначение", ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаСерииТоваров";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                          КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                        КАК Характеристика,
	|	ТаблицаТовары.Назначение               				КАК Назначение,
	|	ТаблицаТовары.Склад                                 КАК Склад,
	|	ВЫБОР КОГДА ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			И &Период >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                               КАК ОрдернаяСхемаПриОтгрузке,
	|	СУММА(ТаблицаТовары.Количество)                     КАК Количество,
	|	ТаблицаТовары.СтатусУказанияСерий                   КАК СтатусУказанияСерий,
	|	МАКСИМУМ(ТаблицаТовары.СрокПоставки)                КАК СрокПоставки,
	|	ТаблицаТовары.Серия                                 КАК Серия,
	|	ТаблицаТовары.НомерСтроки                           КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки                             КАК КодСтроки,
	|	0                                                   КАК Порядок
	|
	|ПОМЕСТИТЬ ВтТаблицаСерииТоваров
	|
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И НЕ ТаблицаТовары.СтатусУказанияСерий В (4, 6, 8)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Назначение,
	|	ТаблицаТовары.Склад,
	|	ВЫБОР КОГДА ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Период >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаТовары.СтатусУказанияСерий,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.КодСтроки,
	|	ТаблицаТовары.НомерСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура                          КАК Номенклатура,
	|	ТаблицаСерии.Характеристика                        КАК Характеристика,
	|	ТаблицаСерии.Назначение               			   КАК Назначение,
	|	ТаблицаСерии.Склад                                 КАК Склад,
	|	ВЫБОР КОГДА ТаблицаСерии.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Период >= ТаблицаСерии.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                              КАК ОрдернаяСхемаПриОтгрузке,
	|	МАКСИМУМ(ТаблицаСерии.Количество)                  КАК Количество,
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий)        КАК СтатусУказанияСерий,
	|	МАКСИМУМ(ТаблицаТовары.СрокПоставки)               КАК СрокПоставки,
	|	ТаблицаСерии.Серия                                 КАК Серия,
	|	ТаблицаСерии.НомерСтроки                           КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки                            КАК КодСтроки,
	|	1                                                  КАК Порядок
	|
	|ИЗ
	|	Документ.ПередачаДавальцу.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаДавальцу.Товары КАК ТаблицаТовары
	|		ПО    ТаблицаСерии.Ссылка               = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура         = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика       = ТаблицаТовары.Характеристика
	|			И ТаблицаСерии.Назначение			= ТаблицаТовары.Назначение
	|			И ТаблицаСерии.Склад                = ТаблицаТовары.Склад
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Назначение,
	|	ТаблицаСерии.Склад,
	|	ТаблицаСерии.Серия,
	|	ВЫБОР КОГДА ТаблицаСерии.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Период >= ТаблицаСерии.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаТовары.КодСтроки,
	|	ТаблицаСерии.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (4, 6, 8)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаВидыЗапасов";
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос.Параметры);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация                           КАК Организация,
	|	ВидыЗапасов.НомерСтроки                КАК НомерСтроки,
	|	ВидыЗапасов.Ссылка                     КАК Ссылка,
	|	ВидыЗапасов.ЗаказДавальца              КАК ЗаказДавальца,
	|	ВидыЗапасов.КодСтроки                  КАК КодСтроки,
	|	ВидыЗапасов.Количество                 КАК Количество,
	|	ВидыЗапасов.НомерГТД                   КАК НомерГТД,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики   КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	АналитикаНоменклатуры.Склад            КАК Склад,
	|	АналитикаНоменклатуры.Номенклатура     КАК Номенклатура,
	|	АналитикаНоменклатуры.Характеристика   КАК Характеристика,
	|	Справочник.Ссылка                      КАК ВидЗапасов,
	|	Справочник.ТипЗапасов                  КАК ТипЗапасов,
	|	Справочник.Валюта                      КАК ВалютаВидаЗапасов,
	|	ВЫБОР КОГДА Справочник.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                  КАК КомиссионныйТовар,
	|	АналитикаПоКомитенту.КлючАналитики     КАК АналитикаУчетаПоКомитенту,
	|	АналитикаРасчетов.КлючАналитики        КАК АналитикаРасчетовСКомитентом
	|
	|ПОМЕСТИТЬ ВтТаблицаВидыЗапасов
	|
	|ИЗ
	|	Документ.ПередачаДавальцу.ВидыЗапасов КАК ВидыЗапасов
	|
	//	Из аналитики получаем склад, номенклатуру и характеристику
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО 
	|		ВидыЗапасов.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаНоменклатуры.Номенклатура = АналитикаБезНазначения.Номенклатура
	|		И АналитикаНоменклатуры.Характеристика = АналитикаБезНазначения.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаБезНазначения.СтатьяКалькуляции
	|		И АналитикаНоменклатуры.Серия = АналитикаБезНазначения.Серия
	|		И АналитикаНоменклатуры.Склад = АналитикаБезНазначения.Склад
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаБезНазначения.Назначение
	|
	//	Для получения реквизитов видов запасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК Справочник
	|	ПО
	|		ВидыЗапасов.ВидЗапасов = Справочник.Ссылка
	|
	//	Если есть комиссионный товар, то подберем аналитику учета
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПоКомитенту
	|	ПО
	|		Справочник.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И Справочник.Комитент                  = АналитикаПоКомитенту.Склад
	|		И АналитикаНоменклатуры.Номенклатура   = АналитикаПоКомитенту.Номенклатура
	|		И АналитикаНоменклатуры.Характеристика = АналитикаПоКомитенту.Характеристика
	|		И АналитикаНоменклатуры.Серия          = АналитикаПоКомитенту.Серия
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаПоКомитенту.Назначение
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаПоКомитенту.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетов
	|		ПО АналитикаРасчетов.Организация = &Организация
	|		И АналитикаРасчетов.Партнер = Справочник.Комитент
	|		И АналитикаРасчетов.Контрагент = Справочник.Контрагент
	|		И АналитикаРасчетов.Договор = Справочник.Договор
	|		И АналитикаРасчетов.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыКлиентов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&ДатаРаспоряжения                       КАК Период,
	|	ТаблицаТовары.ЗаказДавальца             КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.Характеристика            КАК Характеристика,
	|	ТаблицаТовары.Серия                     КАК Серия,
	|	ТаблицаТовары.КодСтроки                 КАК КодСтроки,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|	ТаблицаТовары.Количество                КАК Заказано,
	|	ТаблицаТовары.Количество                КАК КОформлению,
	|	0                                       КАК Сумма
	|
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	&Партнер                               КАК Получатель,
	|	ТаблицаТовары.ЗаказДавальца            КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ВЫБОР 
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (10, 14) ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК ТаблицаТовары
	|ГДЕ 
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (НЕ ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|		ИЛИ &Период < ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|	&Партнер                                КАК Получатель,
	|	ТаблицаТовары.ЗаказДавальца             КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.Характеристика            КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                   КАК Назначение,
	|	ВЫБОР 
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (10 , 14) ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                   КАК Серия,
	|	0 КАК КОтгрузке,
	|	ТаблицаТовары.Количество                КАК КОформлению
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|	И ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &Период";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаСерииТоваров", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	0                                      КАК КОтгрузке,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (6, 8)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                  КАК КонтролироватьОстатки
	|ИЗ
	|	ВтТаблицаСерииТоваров КАК ТаблицаТовары
	|ГДЕ
	|	(НЕ ТаблицаТовары.ОрдернаяСхемаПриОтгрузке)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура                                КАК Номенклатура,
	|	ТаблицаСерии.Характеристика                              КАК Характеристика,
	|	ТаблицаСерии.Назначение				   					 КАК Назначение,
	|	ТаблицаСерии.Серия                                       КАК Серия,
	|	ТаблицаСерии.Количество                                  КАК Количество,
	|	ТаблицаСерии.Склад                                       КАК Отправитель,
	|	&Партнер                                                 КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКлиенту) КАК СкладскаяОперация,
	|	&Ссылка                                                  КАК Документ,
	|	&Период                                                  КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаСерии.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				ИЛИ &Период < ТаблицаСерии.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ПередачаДавальцу.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Склад,
	|	&Партнер,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаКлиенту),
	|	&Ссылка,
	|	&Период,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				ИЛИ &Период < ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСкладскоеДвижение	
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                       КАК ВидДвижения,
	|	&Период                                                      КАК Период,
	|	&Организация                                                 КАК ОрганизацияОтгрузки,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации ТОГДА
	|		ТаблицаВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца.Организация
	|	ИНАЧЕ
	|		&Организация
	|	КОНЕЦ                                                        КАК Организация,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации ТОГДА
	|		ТаблицаВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		ТаблицаВидыЗапасов.ВидЗапасов
	|	КОНЕЦ                                                        КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.Склад                                     КАК Склад,
	|	ТаблицаВидыЗапасов.Номенклатура                              КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика                            КАК Характеристика,
	|	ТаблицаВидыЗапасов.НомерГТД                                  КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                                КАК Количество,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры                КАК АналитикаУчетаНоменклатуры,
	|	&ХозяйственнаяОперация                                       КАК ХозяйственнаяОперация,
	|	&НалогообложениеНДС                                          КАК НалогообложениеНДС
	|ИЗ
	|	ВтТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизацийКПередаче";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                        КАК ВидДвижения,
	|	&Период                                                       КАК Период,
	|	ТаблицаВидыЗапасов.Склад                                      КАК Склад,
	|	ТаблицаВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца.Организация КАК ОрганизацияВладелец,
	|	ТаблицаВидыЗапасов.Номенклатура                               КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика                             КАК Характеристика,
	|	ТаблицаВидыЗапасов.ВидЗапасов                                 КАК ВидЗапасовПродавца,
	|	ТаблицаВидыЗапасов.НомерГТД                                   КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                                 КАК Количество
	|ИЗ
	|	ВтТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ТаблицаВидыЗапасов.ВидЗапасов = ВидыЗапасов.Ссылка
	|		И ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюОтчетовКомитенту";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Период                                      КАК Период,
	|	ТаблицаВидыЗапасов.ВалютаВидаЗапасов         КАК Валюта,
	|	ТаблицаВидыЗапасов.ВидЗапасов                КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.Номенклатура              КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика            КАК Характеристика,
	|	ТаблицаВидыЗапасов.НомерГТД                  КАК НомерГТД,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	0                                            КАК Количество,
	|	ТаблицаВидыЗапасов.Количество                КАК КоличествоСписано,
	|	0                                            КАК СуммаВыручки,
	|	&КорВидЗапасов                               КАК КорВидЗапасов,
	|	ТаблицаВидыЗапасов.АналитикаУчетаПоКомитенту КАК АналитикаУчетаНоменклатуры
	|
	|ИЗ
	|	ВтТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.КомиссионныйТовар
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                       КАК ВидДвижения,
	|	&Период                                                      КАК Период,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение) КАК РазделУчета,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаВидыЗапасов.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                        КАК ВидЗапасов,
	|	&Организация                                                 КАК Организация,
	|	ТаблицаВидыЗапасов.Количество                                КАК Количество,
	|	&ХозяйственнаяОперация                                       КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.АналитикаРасчетовСКомитентом              КАК АналитикаУчетаПоПартнерам,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление)         КАК ТипЗаписи
	|ИЗ
	|	ВтТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;

	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ПередачаПоЗаказу", "ТаблицаТовары.Ссылка.ПередачаПоЗаказам");

	Если ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ЗаказыКлиентов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяОбъекта());
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяОбъекта(),
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Накладная на передачу готовой продукции (МХ-18)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "МХ18";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на передачу готовой продукции (МХ-18)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") 
		И ПравоДоступа("Чтение", Метаданные.Документы.ТранспортнаяНакладная) Тогда
		// 1-Т (Товарно-транспортная накладная)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьТТН";
		КомандаПечати.Идентификатор = "ТТН";
		КомандаПечати.Представление = НСтр("ru = 'Товарно-транспортная накладная (1-Т)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;		

		// Транспортная накладная
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьТТН";
		КомандаПечати.Идентификатор = "ТранспортнаяНакладная";
		КомандаПечати.Представление = НСтр("ru = 'Транспортная накладная'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
	// 4D:ERP для Беларуси, Дмитрий, 05.12.2014 5:01:37 
	// Локализация печатных форм, №7762
	// Добавляем ТТН-1 
	// {
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") 
		И ПравоДоступа("Чтение", Метаданные.Документы.ТранспортнаяНакладная) Тогда
		
		// ТТН-1 (Товарно-транспортная накладная)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьТТН";
		КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент_Локализация.ПечатьТТН";
		КомандаПечати.Идентификатор = "ТТН_Вертикальная";
		КомандаПечати.Представление = НСтр("ru = 'ТТН-1 (вертикальная)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// ТТН-1 (Товарно-транспортная накладная)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьТТН";
		КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент_Локализация.ПечатьТТН";
		КомандаПечати.Идентификатор = "ТТН_ВертикальнаяСПриложением";
		КомандаПечати.Представление = НСтр("ru = 'ТТН-1 (вертикальная) с приложением'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// ТТН-1 (Товарно-транспортная накладная)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьТТН";
		КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент_Локализация.ПечатьТТН";
		КомандаПечати.Идентификатор = "ТТН_Горизонтальная";
		КомандаПечати.Представление = НСтр("ru = 'ТТН-1 (горизонтальная)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// ТТН-1 (Товарно-транспортная накладная)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьТТН";
		КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент_Локализация.ПечатьТТН";
		КомандаПечати.Идентификатор = "ТТН_ГоризонтальнаяСПриложением";
		КомандаПечати.Представление = НСтр("ru = 'ТТН-1 (горизонтальная) с приложением'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		ЭтоПартнер = ПраваПользователяПовтИсп.ЭтоПартнер();
		Если Не ЭтоПартнер Тогда
			// Товарная накладная (ТН-2)
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьТранспортнойНакладной";
			КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент_Локализация.ПечатьТранспортнойНакладной";
			КомандаПечати.Идентификатор = "ТН_Вертикальная";
			КомандаПечати.Представление = НСтр("ru = 'ТН-2 (вертикальная)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьГТД", Истина);
			КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьУслуги", Истина);
			
			// Товарная накладная (ТН-2)
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьТранспортнойНакладной";
			КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент_Локализация.ПечатьТранспортнойНакладной";
			КомандаПечати.Идентификатор = "ТН_ВертикальнаяСПриложением";
			КомандаПечати.Представление = НСтр("ru = 'ТН-2 (вертикальная) с приложением'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьГТД", Истина);
			КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьУслуги", Истина);
			
			// Товарная накладная (ТН-2)
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьТранспортнойНакладной";
			КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент_Локализация.ПечатьТранспортнойНакладной";
			КомандаПечати.Идентификатор = "ТН_Горизонтальная";
			КомандаПечати.Представление = НСтр("ru = 'ТН-2 (горизонтальная)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьГТД", Истина);
			КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьУслуги", Истина);
			
			// Товарная накладная (ТН-2)
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьТранспортнойНакладной";
			КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент_Локализация.ПечатьТранспортнойНакладной";
			КомандаПечати.Идентификатор = "ТН_ГоризонтальнаяСПриложением";
			КомандаПечати.Представление = НСтр("ru = 'ТН-2 (горизонтальная) с приложением'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьГТД", Истина);
			КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьУслуги", Истина);
		КонецЕсли;
		
	КонецЕсли;
	// }
	// 4D
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранение") Тогда
		// МХ-3 
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
		КомандаПечати.Идентификатор = "МХ3";
		КомандаПечати.Представление = НСтр("ru = 'Акт о возврате ТМЦ, сданных на хранение (МХ-3)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
	// Товарная накладная (ТОРГ-12)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьУслуги", Ложь);
	КомандаПечати.Порядок = 17;
	
	// Накладная (М-15)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "М15";
	КомандаПечати.Представление = НСтр("ru = 'Накладная (М-15)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 25;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыМХ18(ПараметрыПечати, МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкаКодов			= ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ЕдиницаИзмеренияВеса	= Константы.ЕдиницаИзмеренияВеса.Получить();
	Если НЕ ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ШАПКЕ
	|
	|ВЫБРАТЬ
	|	ПередачаДавальцу.Ссылка							КАК Ссылка,
	|	ПередачаДавальцу.Номер							КАК Номер,
	|	ПередачаДавальцу.Дата							КАК Дата,
	|	ПередачаДавальцу.Дата							КАК ДатаДокумента,
	|	ПередачаДавальцу.Организация					КАК Организация,
	|	ПередачаДавальцу.Организация.Префикс			КАК Префикс,
	|	ПередачаДавальцу.Контрагент.Представление		КАК Получатель,
	|	ПередачаДавальцу.Подразделение.Представление	КАК ПредставлениеПодразделения
	|
	|ИЗ
	|	Документ.ПередачаДавальцу КАК ПередачаДавальцу
	|
	|ГДЕ
	|	ПередачаДавальцу.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка														КАК Ссылка,
	|	Товары.Номенклатура													КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное								КАК НоменклатураНаименование,
	|	Товары.Номенклатура." + КолонкаКодов + "							КАК НоменклатураКод,
	|	Товары.Характеристика.НаименованиеПолное							КАК ХарактеристикаНаименование,
	|	Товары.Характеристика												КАК Характеристика,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения 							КАК ЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаКодЕдиницыИзмерения 									КАК ЕдиницаИзмеренияКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения 							КАК ВидУпаковки,
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		1
	|	ИНАЧЕ
	|		&ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ																КАК КоличествоВОдномМесте,
	|	ВЫБОР КОГДА (НЕ Товары.Упаковка.Вес ЕСТЬ NULL) ТОГДА
	|		Товары.КоличествоУпаковок * &ТекстЗапросаВес
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ																КАК МассаБрутто,
	|
	|	Товары.КоличествоУпаковок											КАК Количество,
	|	Товары.КоличествоУпаковок											КАК КоличествоМест,
	|	Товары.НомерСтроки													КАК НомерСтроки,
	|	ЛОЖЬ																КАК ЭтоВозвратнаяТара,
	|	0																	КАК Цена,
	|	0																	КАК Сумма,
	|	Товары.Ссылка.Контрагент.Представление								КАК Получатель
	|
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка,
	|	Получатель";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ТекстЗапросаВес",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("Товары.Упаковка", "Товары.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "Товары.Упаковка", "Товары.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код", "Товары.Упаковка", "Товары.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатПоШапке = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[1];
	
	СтруктураДанныхДляПечати = Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти",
		РезультатПоШапке,
		РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Валюта.
//
//	ПараметрыЗаполнения - Структура - Дополнительные параметры выборки:
//		ПересчитыватьВВалютуРегл - признак пересчета сумм в валюту регламентированного учета.
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл", ПараметрыЗаполнения.ПересчитыватьВВалютуРегл);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	МАКСИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ СтрокиТоваров
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ТаблицаТоваров.Ссылка = ДанныеДокументов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.Цена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	СтрокиТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.НомерГТД КАК НомерГТД,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.Количество) КАК Количество,
	|	СУММА(ТаблицаДокумента.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл, СтрокиТоваров.Цена * ТаблицаДокумента.КоличествоУпаковок)) КАК СуммаБезНДС,
	|	СтрокиТоваров.Цена,
	|	0 КАК СуммаНДС,
	|	ИСТИНА КАК ЭтоТовар,
	|	ЛОЖЬ КАК ЭтоНеВозвратнаяТара,
	|	ТаблицаДокумента.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ПередачаДавальцуТаблицаТоваров
	|ИЗ
	|	Документ.ПередачаДавальцу.ВидыЗапасов КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|		ПО ТаблицаДокумента.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|			И ТаблицаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|			И (СуммыДокументовВВалютеРегл.Активность)
	|			И &ПересчитыватьВВалютуРегл
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиТоваров КАК СтрокиТоваров
	|		ПО ТаблицаДокумента.Ссылка = СтрокиТоваров.Ссылка
	|			И ТаблицаДокумента.АналитикаУчетаНоменклатуры.Номенклатура = СтрокиТоваров.Номенклатура
	|			И ТаблицаДокумента.АналитикаУчетаНоменклатуры.Характеристика = СтрокиТоваров.Характеристика
	|			И ТаблицаДокумента.Упаковка = СтрокиТоваров.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	СтрокиТоваров.НомерСтроки,
	|	ТаблицаДокумента.НомерГТД,
	|	ТаблицаДокумента.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ТаблицаДокумента.АналитикаУчетаНоменклатуры.Характеристика,
	|	ТаблицаДокумента.Упаковка,
	|	СтрокиТоваров.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СтрокиТоваров";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	// Заглушка, чтобы не падала печать комплектов из задания на перевозку.
	ТекстСообщения = НСтр("ru = 'Печать комплектов для документов ""%Документ%"" не поддерживается.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Метаданные.Документы.ПередачаДавальцу.Синоним);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Возврат Неопределено;
КонецФункции

// Функция получает данные для формирования печатной формы МХ - 3
//
Функция ПолучитьДанныеДляПечатнойФормыМХ3(ПараметрыПечати, МассивОбъектов) Экспорт 
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасчетСебестоимостиТоваровОрганизации.Ссылка.ПредварительныйРасчет КАК ПредварительныйРасчет,
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Организация КАК Организация,
	|	Документ.Склад КАК Склад,
	|	Склады.ИсточникИнформацииОЦенахДляПечати КАК ИсточникИнформацииОЦенахДляПечати,
	|	Склады.УчетныйВидЦены КАК ВидЦены,
	|	Склады.УчетныйВидЦены.ВалютаЦены КАК ВалютаЦены
	|ПОМЕСТИТЬ ВтШапка
	|ИЗ
	|	Документ.ПередачаДавальцу КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимостиТоваровОрганизации
	|		ПО (РасчетСебестоимостиТоваровОрганизации.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Документ.Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(Документ.Дата, МЕСЯЦ))
	|			И (РасчетСебестоимостиТоваровОрганизации.Ссылка.Проведен)
	|			И (Документ.Организация = РасчетСебестоимостиТоваровОрганизации.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО (Документ.Склад = Склады.Ссылка)
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)
	|	И Документ.Проведен
	|	И Склады.СкладОтветственногоХранения
	|	И Документ.Организация <> Склады.Поклажедержатель
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Шапка.Склад КАК Склад,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ВидУпаковки,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Количество КАК Количество,
	|	КОНЕЦПЕРИОДА(Товары.Ссылка.Дата, ДЕНЬ) КАК ДатаПолученияЦены,
	|	Шапка.ВидЦены КАК ВидЦены,
	|	Шапка.ВалютаЦены КАК ВалютаЦены
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтШапка КАК Шапка
	|		ПО Товары.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (Шапка.ИсточникИнформацииОЦенахДляПечати = ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен)
	|		ИЛИ (Шапка.ИсточникИнформацииОЦенахДляПечати = ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости)
	|			И Шапка.ПредварительныйРасчет ЕСТЬ NULL))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка КАК Ссылка,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	Шапка.Организация КАК Организация,
	|	Аналитика.Склад КАК Склад,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения.Представление ВидУпаковки,
	|	ВидыЗапасов.Количество КАК КоличествоУпаковок,
	|	ВидыЗапасов.Количество КАК Количество,
	|	КОНЕЦПЕРИОДА(ВидыЗапасов.Ссылка.Дата, ДЕНЬ) КАК ДатаПолученияЦены,
	|	Аналитика.Склад.УчетныйВидЦены КАК ВидЦены,
	|	Аналитика.Склад.УчетныйВидЦены.ВалютаЦены КАК ВалютаЦены,
	|	Шапка.ПредварительныйРасчет КАК ПредварительныйРасчет
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.ПередачаДавальцу.ВидыЗапасов КАК ВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтШапка КАК Шапка
	|		ПО ВидыЗапасов.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Аналитика.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И Аналитика.Склад.ИсточникИнформацииОЦенахДляПечати = ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости)
	|;
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "Товары.Упаковка", "Товары.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код", "Товары.Упаковка", "Товары.Номенклатура"));
	
	СкладыСервер.ДополнитьТекстЗапросаДляПечатныхФормМХ1Х3(Запрос);
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатПоШапке = МассивРезультатов[6];
	РезультатПоСкладам = МассивРезультатов[7];
	РезультатПоТабличнойЧасти = МассивРезультатов[8];
	
	СтруктураДанныхДляПечати = Новый Структура(
		"РезультатПоШапке, РезультатПоСкладам, РезультатПоТабличнойЧасти",
		РезультатПоШапке,
		РезультатПоСкладам,
		РезультатПоТабличнойЧасти);
		
	Возврат СтруктураДанныхДляПечати
	
КонецФункции

// Функция получает данные для формирования печатной формы ТОРГ - 12
//
Функция ПолучитьДанныеДляПечатнойФормыТОРГ12(ПараметрыПечати, МассивОбъектов) Экспорт 
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	// 4D:ERP для Беларуси, ВладимирР, 03.08.2017 17:07:31 
	// ТТН-1 и ТН-2, №15629
	// {
	|	ДанныеДокументов.Валюта,
	// }
	// 4D
	|	ДанныеДокументов.Ссылка               КАК Ссылка
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.ПередачаДавальцу КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	Если ПараметрыПечати.Свойство("ВыводитьГТД") Тогда
		ПараметрыЗаполнения.ВключаяНомераГТД = ПараметрыПечати.ВыводитьГТД;
	КонецЕсли;
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения);
	
	ПродажиСервер.ПоместитьВременнуюТаблицуКоэффициентыУпаковок(МенеджерВременныхТаблиц, "ПередачаДавальцуТаблицаТоваров");
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаДавальцу.Ссылка КАК Ссылка,
	|	ПередачаДавальцу.Номер КАК Номер,
	|	ПередачаДавальцу.Дата КАК Дата,
	|	ПередачаДавальцу.Партнер КАК Партнер,
	|	ПередачаДавальцу.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ПередачаДавальцу.Организация.ОбособленноеПодразделение
	|			ТОГДА ПередачаДавальцу.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ ПередачаДавальцу.Организация
	|	КОНЕЦ КАК Организация,
	|	ТаблицаОтветственныеЛица.РуководительНаименование  КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ПередачаДавальцу.Отпустил КАК Кладовщик,
	|	ПередачаДавальцу.ОтпустилДолжность КАК ДолжностьКладовщика,
	|	ПередачаДавальцу.Организация.Префикс КАК Префикс,
	|	ПередачаДавальцу.Основание КАК Основание,
	|	ПередачаДавальцу.ОснованиеДата КАК ОснованиеДата,
	|	ПередачаДавальцу.ОснованиеНомер КАК ОснованиеНомер,
	|	ВЫБОР
	|		КОГДА ПередачаДавальцу.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ПередачаДавальцу.Контрагент
	|		ИНАЧЕ ПередачаДавальцу.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ПередачаДавальцу.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ПередачаДавальцу.Организация
	|		ИНАЧЕ ПередачаДавальцу.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ПередачаДавальцу.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ПередачаДавальцу.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ПередачаДавальцу.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ПередачаДавальцу.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ПередачаДавальцу.АдресДоставки КАК АдресДоставки,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	// 4D:ERP для Беларуси, ВладимирР, 03.08.2017 17:07:31 
	// ТТН-1 и ТН-2, №15629
	// {
	|	ПередачаДавальцу.Отпустил КАК Отпустил,
	|	ПередачаДавальцу.ОтпустилДолжность КАК ОтпустилДолжность,
	|	ПередачаДавальцу.Валюта КАК Валюта,
	|	ПередачаДавальцу.НомерИсходящегоДокумента КАК НомерИсходящегоДокумента,
	|	ПередачаДавальцу.СерияИсходящегоДокумента КАК СерияИсходящегоДокумента,
	|	ПередачаДавальцу.Руководитель.Наименование КАК Разрешил,
	|	ПередачаДавальцу.Руководитель.Должность КАК РазрешилДолжность,
	|	ПередачаДавальцу.Принял КАК Принял,
	|	ПередачаДавальцу.ПереданыДокументы КАК ПереданыДокументы,
	// }
	// 4D
	|	ПередачаДавальцу.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ПередачаДавальцу.ДоверенностьДата КАК ДоверенностьДата,
	|	ПередачаДавальцу.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ПередачаДавальцу.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	&ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса
	|ИЗ
	|	Документ.ПередачаДавальцу КАК ПередачаДавальцу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ПередачаДавальцу.Ссылка = ДанныеДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ПередачаДавальцу.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	ТаблицаТоваров.Номенклатура.Наименование КАК НоменклатураНаименованиеКраткое,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ТаблицаТоваров.Номенклатура.Артикул
	|		ИНАЧЕ ТаблицаТоваров.Номенклатура.Код
	|	КОНЕЦ КАК НоменклатураКод,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ &ТекстЗапросаЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения.Представление
	|		ИНАЧЕ &ТекстЗапросаНаименованиеЕдиницыИзмерения1
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ &ТекстЗапросаКодЕдиницыИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА """"
	|		ИНАЧЕ ТаблицаТоваров.Упаковка.Наименование
	|	КОНЕЦ КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения ТОГДА
	|			&ТекстЗапросаНаименованиеЕдиницыИзмерения1
	|		ИНАЧЕ
	|			&ТекстЗапросаНаименованиеЕдиницыИзмерения2
	|	КОНЕЦ КАК ВидУпаковки,
	|	0 КАК СтавкаНДС,
	|	"""" КАК НомерГТД,
	|	"""" КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА НЕ &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаТоваров.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТоваров.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ТаблицаТоваров.КоличествоУпаковок
	|		ИНАЧЕ КоэффициентыУпаковок.Количество / КоэффициентыУпаковок.КоэффициентВложеннойУпаковки
	|	КОНЕЦ КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА НЕ &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ВЫБОР
	|					КОГДА КоэффициентыУпаковок.Количество < КоэффициентыУпаковок.КоэффициентВложеннойУпаковки
	|						ТОГДА КоэффициентыУпаковок.Количество
	|					ИНАЧЕ КоэффициентыУпаковок.КоэффициентВложеннойУпаковки
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоВОдномМесте,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.СуммаБезНДС КАК СуммаБезНДС,
	|	0 КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаБезНДС КАК СуммаСНДС,
	
	|	ТаблицаТоваров.Количество * &ТекстЗапросаВесНоменклатуры КАК МассаНетто,
	
	|	ВЫБОР КОГДА &ЗаполненаЕдиницаИзмеренияВеса ТОГДА
	|		ВЫБОР КОГДА ТаблицаТоваров.Упаковка.Вес ЕСТЬ NULL ТОГДА
	|			ТаблицаТоваров.Количество * &ТекстЗапросаВесУпаковки
	|		ИНАЧЕ
	|			ТаблицаТоваров.КоличествоУпаковок * &ТекстЗапросаВесУпаковки
	|		КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                                      КАК МассаБрутто,

	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	ПередачаДавальцуТаблицаТоваров КАК ТаблицаТоваров
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыУпаковок КАК КоэффициентыУпаковок
	|		ПО ТаблицаТоваров.Ссылка = КоэффициентыУпаковок.Ссылка
	|			И ТаблицаТоваров.НомерСтроки = КоэффициентыУпаковок.НомерСтроки
	|			И ТаблицаТоваров.КоличествоУпаковок = КоэффициентыУпаковок.КоличествоУпаковок 
	|			И НЕ &ВыводитьБазовыеЕдиницыИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ТекстЗапросаВесУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ТекстЗапросаВесНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения",
			"ТаблицаТоваров.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка",
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"КоэффициентыУпаковок.ВидУпаковки",
			"ТаблицаТоваров.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
			
	Запрос.УстановитьПараметр("КолонкаКодов",                    КолонкаКодов);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияВеса",            Константы.ЕдиницаИзмеренияВеса.Получить());
	Запрос.УстановитьПараметр("ЗаполненаЕдиницаИзмеренияВеса",   ЗначениеЗаполнено(Константы.ЕдиницаИзмеренияВеса.Получить()));
	Запрос.УстановитьПараметр("ВыводитьБазовыеЕдиницыИзмерения",
		Константы.ВыводитьБазовыеЕдиницыИзмерения.Получить() ИЛИ ПараметрыЗаполнения.ВключаяНомераГТД);
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[1];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
	                                               РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Функция получает данные для формирования печатной формы М15
//
Функция ПолучитьДанныеДляПечатнойФормыМ15(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка               КАК Ссылка
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.ПередачаДавальцу КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();

	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения);
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаДавальцу.Ссылка КАК Ссылка,
	|	ПередачаДавальцу.Номер КАК Номер,
	|	ПередачаДавальцу.Дата КАК Дата,
	|	ПередачаДавальцу.Дата КАК ДатаСоставления,
	|	ПередачаДавальцу.Контрагент КАК Контрагент,
	|	ПередачаДавальцу.Организация КАК Организация,
	|	ПередачаДавальцу.Организация.Префикс КАК Префикс,
	|	ПередачаДавальцу.Основание КАК Основание,
	|	ПередачаДавальцу.Склад КАК Склад,
	|	ПередачаДавальцу.Склад.Наименование КАК СкладНаименование,
	|	ПередачаДавальцу.Подразделение КАК СтруктурноеПодразделение,
	|	ПередачаДавальцу.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ПередачаДавальцу.Валюта КАК Валюта,
	|	"""" КАК ЦенаВключаетНДС,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ПередачаДавальцу.Отпустил КАК Кладовщик,
	|	ПередачаДавальцу.ОтпустилДолжность КАК ДолжностьКладовщика
	|ИЗ
	|	Документ.ПередачаДавальцу КАК ПередачаДавальцу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ПередачаДавальцу.Ссылка = ДанныеДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ПередачаДавальцу.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	ТаблицаТоваров.Номенклатура.Код КАК НоменклатураКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТоваров.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаТоваров.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	ТаблицаТоваров.КоличествоУпаковок КАК Количество,
	|	0 КАК КоличествоМест,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.СуммаБезНДС КАК СуммаБезНДС,
	|	0 КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаБезНДС КАК СуммаСНДС,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	ПередачаДавальцуТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ЭтоТовар
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатПоШапке = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[1];
	
	СтруктураДанныхДляПечати = Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти",
		РезультатПоШапке,
		РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Возвращает текст основания по данным документа и указанному порядку расчетов
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.ПередачаСырьяПереработчику - Объект документа, по которму необходимо получить текст основания
//	ПоДоговору - Булево - текст оснвоания строится на оснвоании договора, иначе на основании заказа (если неопределно, то в зависимости запоненных реквизитов)
//
// Возвращаемое значение:
//	СтруктураОснование - Структура с наименованием, датой и номером основания
//
Функция СтруктураОснования(Объект, ПоДоговору = Ложь)
	
	СтруктураОснование = Новый Структура;
	СтруктураОснование.Вставить("Основание");
	СтруктураОснование.Вставить("ОснованиеНомер");
	СтруктураОснование.Вставить("ОснованиеДата");
	
	Если ПоДоговору И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.НаименованиеДляПечати КАК Основание,
		|	ДоговорыКонтрагентов.Дата КАК ОснованиеДата,
		|	ДоговорыКонтрагентов.Номер КАК ОснованиеНомер
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Объект.Договор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СтруктураОснование.Основание = СокрЛП(Выборка.Основание);
			СтруктураОснование.ОснованиеДата = Выборка.ОснованиеДата;
			СтруктураОснование.ОснованиеНомер = СокрЛП(Выборка.ОснованиеНомер);
		КонецЕсли;
		
	ИначеЕсли Не ПоДоговору Тогда
		
		МассивЗаказов = Неопределено;
		Если ЗначениеЗаполнено(Объект.ЗаказДавальца) Тогда
			
			МассивЗаказов = Новый Массив;
			МассивЗаказов.Добавить(Объект.ЗаказДавальца);
			
		ИначеЕсли Объект.Товары.Количество() <> 0 Тогда
			
			Если ТипЗнч(Объект) = Тип("Структура") Тогда
				МассивЗаказов = Объект.Товары.ВыгрузитьКолонку("ЗаказДавальца");
			Иначе
				МассивЗаказов = Объект.Товары.Выгрузить(, "ЗаказДавальца").ВыгрузитьКолонку("ЗаказДавальца");
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивЗаказов <> Неопределено Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказыДавальца.НомерПоДаннымПартнера КАК НомерПоДаннымПартнера,
			|	ЗаказыДавальца.ДатаПоДаннымПартнера  КАК ДатаПоДаннымПартнера,
			|	ЗаказыДавальца.Номер                 КАК Номер,
			|	ЗаказыДавальца.Дата                  КАК Дата,
			|	&СинонимЗаказа                       КАК Синоним
			|ИЗ
			|	Документ.ЗаказДавальца КАК ЗаказыДавальца
			|ГДЕ
			|	ЗаказыДавальца.Ссылка В(&МассивЗаказов)");
			
			Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
			Запрос.УстановитьПараметр("СинонимЗаказа", НСтр("ru='Заказ давальца'"));
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТекстПоЗаказам = "";
			ОдноОснование = Выборка.Количество() = 1;
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.НомерПоДаннымПартнера) И ЗначениеЗаполнено(Выборка.ДатаПоДаннымПартнера) Тогда
					
					ИнформацияОЗаказе = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 № %2 от %3'"),                               // Строка с параметрами
						Выборка.Синоним,                                            // 1 параметр
						Выборка.НомерПоДаннымПартнера,                              // 2 параметр
						Формат(Выборка.ДатаПоДаннымПартнера, "ДЛФ=ДД")); // 3 параметр
					ДатаПоЗаказам  = Выборка.ДатаПоДаннымПартнера;
					НомерПоЗаказам = Выборка.НомерПоДаннымПартнера;
				Иначе
					
					ИнформацияОЗаказе = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Выборка, Выборка.Синоним);
					ДатаПоЗаказам  = Выборка.Дата;
					НомерПоЗаказам = Выборка.Номер;
				КонецЕсли;
				
				ТекстПоЗаказам = ТекстПоЗаказам + ", " + ИнформацияОЗаказе;
				
			КонецЦикла;
			
			СтруктураОснование.Основание      = СокрЛП(Сред(ТекстПоЗаказам, 3));
			СтруктураОснование.ОснованиеДата  = ?(ОдноОснование, ДатаПоЗаказам, "");
			СтруктураОснование.ОснованиеНомер = ?(ОдноОснование,ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерПоЗаказам),"");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОснование; // Возврат значения по умолчанию
	
КонецФункции

#КонецОбласти 

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ПередачаДавальцу.Форма.ФормаСпискаДокументов";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ПередачаДавальцу))
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказДавальца)
		И (ПравоДоступа("Добавление", Метаданные.Документы.ПередачаДавальцу)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ПередачаДавальцу))
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ДетальныйЗапрос.КОформлениюВсего)	КАК ПередачиДавальцамКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК КОформлениюВсего
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(
	|					&ДатаОтгрузки,
	|					ЗаказКлиента ССЫЛКА Документ.ЗаказДавальца) КАК ЗаказыКлиентов
	|	ГДЕ
	|		ЗаказыКлиентов.КОформлениюОстаток > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыКлиентов.ЗаказКлиента
	|	
	|	) КАК ДетальныйЗапрос";
	
	ДатаОтгрузки = КонецДня(ОбщиеПараметрыЗапросов.ТекущаяДата) + 1;
	Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ПереработкаДавальческогоСырья
	ДелоРодитель = ТекущиеДела.Найти("ПереработкаДавальческогоСырья", "Идентификатор");
	Если ДелоРодитель = Неопределено Тогда
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ПереработкаДавальческогоСырья";
		ДелоРодитель.Представление  = НСтр("ru = 'Переработка давальческого сырья'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Продажи;
	КонецЕсли;
	
	// ПередачиДавальцамКОформлению
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	ПараметрыОтбора.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформление");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ПередачиДавальцамКОформлению";
	Дело.ЕстьДела       = Результат.ПередачиДавальцамКОформлению > 0;
	Дело.Представление  = НСтр("ru = 'Передачи давальцам к оформлению'");
	Дело.Количество     = Результат.ПередачиДавальцамКОформлению;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ПереработкаДавальческогоСырья";
		
	Если Результат.ПередачиДавальцамКОформлению > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Прочее

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	ДанныеОтбора     - Структура - поля, по которым будут отобраны остатки заказов
//	СкладРеализации  - СправочникСсылка.Склады - склад, по которому будут отобраны остатки заказов
//	МассивЗаказов      Массив - заказы, по которым будут отобраны остатки
//	ВариантОформления       - ПеречислениеСсылка - указывает вариант оформления документа продаж
//
// Вовращаемое значение:
//	Результат запроса - результат запроса по неотгруженной части заказов\заявок
//
Функция ПолучитьРезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора,
	                                              СкладРеализации = Неопределено,
	                                              МассивЗаказов   = Неопределено,
	                                              ВариантОформления = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивЗаказов",             МассивЗаказов);
	Запрос.УстановитьПараметр("Партнер",                   ДанныеОтбора.Партнер);
	Запрос.УстановитьПараметр("Контрагент",                ДанныеОтбора.Контрагент);
	Запрос.УстановитьПараметр("Договор",                   ДанныеОтбора.Договор);
	Запрос.УстановитьПараметр("Организация",               ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("Сделка",                    ДанныеОтбора.Сделка);
	Запрос.УстановитьПараметр("Регистратор",               ДанныеОтбора.Ссылка);
	Запрос.УстановитьПараметр("СкладРеализации",           СкладРеализации);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",          МассивЗаказов <> Неопределено);
	Запрос.УстановитьПараметр("ТекущаяДата",               НачалоДня(ТекущаяДатаСеанса()));
	
	Если ТипЗнч(ДанныеОтбора) = Тип("Структура") 
		И ДанныеОтбора.Свойство("ТоварыПередачи") Тогда
		Запрос.УстановитьПараметр("ТоварыПередачи", ДанныеОтбора.ТоварыПередачи);
	Иначе
		ТоварыПередачи = Новый ТаблицаЗначений;
		ТоварыПередачи.Колонки.Добавить("ЗаказДавальца", Новый ОписаниеТипов("ДокументСсылка.ЗаказДавальца"));
		ТоварыПередачи.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТоварыПередачи.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТоварыПередачи.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
		ТоварыПередачи.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТоварыПередачи.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТоварыПередачи.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
		ТоварыПередачи.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТоварыПередачи.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТоварыПередачи.Колонки.Добавить("КоличествоВЗаказе", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		ТоварыПередачи.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
		Запрос.УстановитьПараметр("ТоварыПередачи", ТоварыПередачи);
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыРеализации.КодСтроки КАК КодСтроки,
		|	ТоварыРеализации.ЗаказДавальца КАК ЗаказКлиента,
		|	ТоварыРеализации.Номенклатура КАК Номенклатура,
		|	ТоварыРеализации.Характеристика КАК Характеристика,
		|	ТоварыРеализации.Количество КАК Количество,
		|	ТоварыРеализации.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВтТоварыРеализации
		|ИЗ
		|	&ТоварыПередачи КАК ТоварыРеализации
		|ГДЕ
		|	ТоварыРеализации.КодСтроки <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыРеализации.КодСтроки,
		|	ВтТоварыРеализации.ЗаказКлиента,
		|	ВтТоварыРеализации.Номенклатура,
		|	ВтТоварыРеализации.Характеристика,
		|	СУММА(ВтТоварыРеализации.Количество) КАК Количество,
		|	ВЫРАЗИТЬ(ВтТоварыРеализации.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ВтТоварыРеализацииПоЗаказу
		|ИЗ
		|	ВтТоварыРеализации КАК ВтТоварыРеализации
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтТоварыРеализации.КодСтроки,
		|	ВтТоварыРеализации.ЗаказКлиента,
		|	ВтТоварыРеализации.Номенклатура,
		|	ВтТоварыРеализации.Характеристика,
		|	ВтТоварыРеализации.Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаказы.ЗаказКлиента КАК ЗаказКлиента,
		|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
		|	ТаблицаЗаказы.Характеристика КАК Характеристика,
		|	ТаблицаЗаказы.КодСтроки КАК КодСтроки,
		|	ТаблицаЗаказы.Склад КАК Склад,
		|	СУММА(ТаблицаЗаказы.КОформлению) КАК Количество,
		|	СУММА(ТаблицаЗаказы.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ТаблицаОстатки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ЗаказыОстатки.ЗаказКлиента КАК Документ.ЗаказДавальца) КАК ЗаказКлиента,
		|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|		ЗаказыОстатки.Характеристика КАК Характеристика,
		|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
		|		ЗаказыОстатки.Склад КАК Склад,
		|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению,
		|		ЗаказыОстатки.СуммаОстаток КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов.Остатки(
		|				,
		|				ВЫБОР
		|						КОГДА &ОтобратьПоЗаказу
		|							ТОГДА ЗаказКлиента В (&МассивЗаказов)
		|						ИНАЧЕ ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца).Партнер = &Партнер
		|								И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца).Контрагент = &Контрагент
		|								И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца).Договор = &Договор
		|								И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца).Организация = &Организация
		|								И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца).Сделка = &Сделка
		|					КОНЕЦ
		|					И ВЫБОР
		|						КОГДА ВЫРАЗИТЬ(&СкладРеализации КАК Справочник.Склады).ЭтоГруппа
		|							ТОГДА Склад В ИЕРАРХИИ (&СкладРеализации)
		|									ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИНАЧЕ Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &СкладРеализации)
		|					КОНЕЦ) КАК ЗаказыОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ЗаказыДвижения.ЗаказКлиента КАК Документ.ЗаказДавальца) КАК ЗаказКлиента,
		|		ЗаказыДвижения.Номенклатура,
		|		ЗаказыДвижения.Характеристика,
		|		ЗаказыДвижения.КодСтроки,
		|		ЗаказыДвижения.Склад,
		|		ВЫБОР
		|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЗаказыДвижения.КОформлению
		|			ИНАЧЕ ЗаказыДвижения.КОформлению
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЗаказыДвижения.Сумма
		|			ИНАЧЕ ЗаказыДвижения.Сумма
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов КАК ЗаказыДвижения
		|	ГДЕ
		|		ЗаказыДвижения.Регистратор = &Регистратор
		|		И ВЫБОР
		|				КОГДА &ОтобратьПоЗаказу
		|					ТОГДА ЗаказыДвижения.ЗаказКлиента В (&МассивЗаказов)
		|				ИНАЧЕ ВЫРАЗИТЬ(ЗаказыДвижения.ЗаказКлиента КАК Документ.ЗаказДавальца).Партнер = &Партнер
		|						И ВЫРАЗИТЬ(ЗаказыДвижения.ЗаказКлиента КАК Документ.ЗаказДавальца).Контрагент = &Контрагент
		|						И ВЫРАЗИТЬ(ЗаказыДвижения.ЗаказКлиента КАК Документ.ЗаказДавальца).Договор = &Договор
		|						И ВЫРАЗИТЬ(ЗаказыДвижения.ЗаказКлиента КАК Документ.ЗаказДавальца).Организация = &Организация
		|						И ВЫРАЗИТЬ(ЗаказыДвижения.ЗаказКлиента КАК Документ.ЗаказДавальца).Сделка = &Сделка
		|			КОНЕЦ
		|		И ЗаказыДвижения.Активность
		|		И ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(&СкладРеализации КАК Справочник.Склады).ЭтоГруппа
		|					ТОГДА ЗаказыДвижения.Склад В ИЕРАРХИИ (&СкладРеализации)
		|							ИЛИ ЗаказыДвижения.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				ИНАЧЕ ЗаказыДвижения.Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &СкладРеализации)
		|			КОНЕЦ) КАК ТаблицаЗаказы
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказы.ЗаказКлиента,
		|	ТаблицаЗаказы.Номенклатура,
		|	ТаблицаЗаказы.Характеристика,
		|	ТаблицаЗаказы.КодСтроки,
		|	ТаблицаЗаказы.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаЗаказы.КОформлению) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОстатки.ЗаказКлиента КАК ЗаказДавальца,
		|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
		|	ТаблицаОстатки.Характеристика КАК Характеристика,
		|	ТаблицаОстатки.КодСтроки КАК КодСтроки,
		|	ТаблицаОстатки.Количество КАК Количество,
		|	ТаблицаОстатки.Склад КАК Склад,
		|	ЕСТЬNULL(НакладнаяТовары.Количество, 0) КАК КоличествоВНакладной,
		|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
		|	ЗаказТовары.Ссылка.Сделка КАК Сделка,
		|	ЗаказТовары.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЕСТЬNULL(НакладнаяТовары.Упаковка, ЗаказТовары.Упаковка) КАК Упаковка,
		|	ЗаказТовары.Серия КАК Серия,
		|	ЗаказТовары.Количество КАК КоличествоВЗаказе,
		|	ЗаказТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	0 КАК КлючСвязи,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НакладнаяТовары.Упаковка, ЗаказТовары.Упаковка) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, &ТекстЗапросаКоэффициентУпаковки2)
		|	КОНЕЦ КАК Коэффициент,
		|	ТаблицаОстатки.Количество / ЕСТЬNULL(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, &ТекстЗапросаКоэффициентУпаковки2), 1) КАК КоличествоУпаковок,
		|	ЗаказТовары.ВариантОбеспечения,
		|	ВЫБОР
		|		КОГДА ЗаказТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|			ТОГДА ТаблицаОстатки.ЗаказКлиента.Назначение
		|	КОНЕЦ КАК Назначение,
		|	ВЫБОР
		|		КОГДА ЗаказТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке = ИСТИНА
		|				И ЗаказТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке,
		|	ВЫБОР
		|		КОГДА ЗаказТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЗаказТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке = ИСТИНА
		|						И ЗаказТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК ПроверятьОтгрузку
		|ИЗ
		|	ТаблицаОстатки КАК ТаблицаОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Продукция КАК ЗаказТовары
		|		ПО ТаблицаОстатки.Номенклатура = ЗаказТовары.Номенклатура
		|			И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
		|			И ТаблицаОстатки.КодСтроки = ЗаказТовары.КодСтроки
		|			И ТаблицаОстатки.ЗаказКлиента = ЗаказТовары.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыРеализацииПоЗаказу КАК НакладнаяТовары
		|		ПО ТаблицаОстатки.Номенклатура = НакладнаяТовары.Номенклатура
		|			И ТаблицаОстатки.Характеристика = НакладнаяТовары.Характеристика
		|			И ТаблицаОстатки.КодСтроки = НакладнаяТовары.КодСтроки
		|			И ТаблицаОстатки.ЗаказКлиента = НакладнаяТовары.ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказКлиентаТовары.НомерСтроки
		|ИЗ
		|	Документ.ЗаказДавальца.Продукция КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка В(&МассивЗаказов)
		|	И ЗаказКлиентаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И НЕ ЗаказКлиентаТовары.Отменено
		|	И ЗаказКлиентаТовары.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаказы.ЗаказКлиента КАК ЗаказДавальца,
		|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
		|	ТаблицаЗаказы.Характеристика КАК Характеристика,
		|	ТаблицаЗаказы.Склад КАК Склад,
		|	СУММА(ТаблицаЗаказы.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ЗаказКлиента,
		|		ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
		|		ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
		|		ТоварыКОтгрузкеОстатки.Склад КАК Склад,
		|		ТоварыКОтгрузкеОстатки.КОтгрузкеРасход + ТоварыКОтгрузкеОстатки.СобраноПриход КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
		|				,
		|				,
		|				,
		|				,
		|				ВЫБОР
		|						КОГДА &ОтобратьПоЗаказу
		|							ТОГДА ДокументОтгрузки В (&МассивЗаказов)
		|						ИНАЧЕ ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказДавальца).Партнер = &Партнер
		|								И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказДавальца).Контрагент = &Контрагент
		|								И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказДавальца).Договор = &Договор
		|								И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказДавальца).Организация = &Организация
		|								И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказДавальца).Сделка = &Сделка
		|					КОНЕЦ
		|					И ДокументОтгрузки ССЫЛКА Документ.ЗаказДавальца
		|					И ВЫБОР
		|						КОГДА ВЫРАЗИТЬ(&СкладРеализации КАК Справочник.Склады).ЭтоГруппа
		|							ТОГДА Склад В ИЕРАРХИИ (&СкладРеализации)
		|									ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИНАЧЕ Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &СкладРеализации)
		|					КОНЕЦ) КАК ТоварыКОтгрузкеОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказыОстатки.ЗаказКлиента,
		|		ЗаказыОстатки.Номенклатура,
		|		ЗаказыОстатки.Характеристика,
		|		ЗаказыОстатки.Склад,
		|		-ЗаказыОстатки.КОформлениюРасход
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов.Обороты(
		|				,
		|				,
		|				РЕГИСТРАТОР,
		|				ВЫБОР
		|						КОГДА &ОтобратьПоЗаказу
		|							ТОГДА ЗаказКлиента В (&МассивЗаказов)
		|						ИНАЧЕ ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца).Партнер = &Партнер
		|								И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца).Контрагент = &Контрагент
		|								И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца).Договор = &Договор
		|								И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца).Организация = &Организация
		|								И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказДавальца).Сделка = &Сделка
		|					КОНЕЦ
		|					И ВЫБОР
		|						КОГДА ВЫРАЗИТЬ(&СкладРеализации КАК Справочник.Склады).ЭтоГруппа
		|							ТОГДА Склад В ИЕРАРХИИ (&СкладРеализации)
		|									ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИНАЧЕ Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &СкладРеализации)
		|					КОНЕЦ) КАК ЗаказыОстатки
		|	ГДЕ
		|		ЗаказыОстатки.Регистратор <> &Регистратор) КАК ТаблицаЗаказы
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказы.ЗаказКлиента,
		|	ТаблицаЗаказы.Номенклатура,
		|	ТаблицаЗаказы.Характеристика,
		|	ТаблицаЗаказы.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаЗаказы.Количество) > 0";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"НакладнаяТовары.Упаковка",
			"НакладнаяТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЗаказТовары.Упаковка",
			"ЗаказТовары.Номенклатура"));
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ПередачаДавальцу";
КонецФункции

#Область Обработчики_2_1_2

// Регистрирует данные для обработчика обновления УП 2.1.2:
// заполняется назначение в аналитике учета номенлатуры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК Товары
	|ГДЕ
	|	Товары.АналитикаУчетаНоменклатуры.Назначение <> Товары.Назначение
	|	И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И Товары.Ссылка.Проведен
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Переносит данные о назначении из вида запасов в аналитику учета номенклатуры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяДокумента = "Документ.ПередачаДавальцу";
	МетаданныеДокумента = Метаданные.Документы.ПередачаДавальцу;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОбработке.Ссылка КАК Ссылка,
	|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	&ВТДокументыДляОбработки КАК КОбработке
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									МетаданныеДокумента,
									Выборка.Ссылка,
									ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		ДокОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
		Если ДокОбъект = Неопределено Тогда
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
			
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
		ДокОбъект.ХозяйственнаяОперация,
		ДокОбъект.Склад,
		ДокОбъект.Подразделение,
		ДокОбъект.Партнер);
	
		// Если Склад - группа, то для аналитики учета номенклатуры склад берем из ТЧ
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		Если ДокОбъект.Склад.ЭтоГруппа И ДокОбъект.Склад.ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных Тогда
			ИменаПолей.Вставить("Произвольный", "Склад");
		КонецЕсли;
		
		ПараметрыЗаполненияКлючей = РегистрыСведений.АналитикаУчетаНоменклатуры.ПараметрыЗаполненияКлючейАналитики();
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(
			ДокОбъект.Товары,
			МестаУчета,
			ИменаПолей,
			Ложь,
			ПараметрыЗаполненияКлючей);

		ДополнитьКлюч = Истина;
		ПараметрыЗаполненияКлючейВидовЗапасов = РегистрыСведений.АналитикаУчетаНоменклатуры.ПараметрыЗаполненияКлючейАналитики();
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ДокОбъект.ВидыЗапасов, МестаУчета, Неопределено, ДополнитьКлюч, ПараметрыЗаполненияКлючейВидовЗапасов);
		Попытка
			Если ПараметрыЗаполненияКлючей.ИзмененаАналитика ИЛИ ПараметрыЗаполненияКлючейВидовЗапасов.ИзмененаАналитика Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПередачаДавальцу,
				,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);
КонецПроцедуры

// Регистрирует данные для обработчика обновления СгенерироватьКлючиАналитикиНоменклатуры
//
Процедура ЗарегистрироватьДанныеКОбновлениюКлючейАналитики(Параметры) Экспорт
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаНоменклатуры.ТекстЗапросаГенерацииКлючейКОбработке()
	+ "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПередачаДавальцу.Товары КАК Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКлючиКГенерации КАК КлючиКГенерации
	|	ПО КлючиКГенерации.Ссылка = Товары.АналитикаУчетаНоменклатуры
	|		И КлючиКГенерации.Назначение = Товары.Назначение
	|ГДЕ
	|	Товары.АналитикаУчетаНоменклатуры.Назначение <> Товары.Назначение
	|	И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И Товары.Ссылка.Проведен
	|	И КлючиКГенерации.Ссылка ЕСТЬ NULL
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоРегистратору", " ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ПередачаДавальцу)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПоместитьВТ", "ПОМЕСТИТЬ ВтКлючиКГенерации");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Справочники.КлючиАналитикиУчетаНоменклатуры.УстановитьПараметрыЗапросаКлючей(Запрос);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
КонецПроцедуры

// Обработчик обновления документа, по табличным частям генерирует недостающие ключи аналитики учета номенклатуры в ИБ.
Процедура СгенерироватьКлючиАналитикиНоменклатуры(Параметры) Экспорт
	
	ПолноеИмяДокумента = "Документ.ПередачаДавальцу";
	МетаданныеДокумента = Метаданные.Документы.ПередачаДавальцу;
	
	ДополнительныеПараметрыВыборкиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыВыборкиДанных.ВыбиратьПорциями = Ложь;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяДокумента, ДополнительныеПараметрыВыборкиДанных);
	Пока Выборка.Следующий() Цикл
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Поля.Номенклатура,
		|	Поля.Характеристика,
		|	Поля.Серия,
		|	Поля.Склад,
		|	Товары.Назначение КАК Назначение,
		|	Поля.СтатьяКалькуляции
		|ИЗ
		|	Документ.ПередачаДавальцу.Товары КАК Товары
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Поля
		|	ПО Поля.Ссылка = Товары.АналитикаУчетаНоменклатуры
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|	ПО Поля.Номенклатура = Аналитика.Номенклатура
		|		И Поля.Характеристика = Аналитика.Характеристика
		|		И Поля.Серия = Аналитика.Серия
		|		И Поля.Склад = Аналитика.Склад
		|		И Товары.Назначение = Аналитика.Назначение
		|		И Поля.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
		|ГДЕ
		|	Товары.АналитикаУчетаНоменклатуры.Назначение <> Товары.Назначение
		|	И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И Товары.Ссылка.Проведен
		|	И Товары.Ссылка = &Ссылка
		|	И Аналитика.КлючАналитики ЕСТЬ NULL
		|");
		
		Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
		
		Попытка
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									МетаданныеДокумента,
									Выборка.Ссылка,
									ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Ключи = Запрос.Выполнить().Выбрать();
		Пока Ключи.Следующий() Цикл
			Попытка
				РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Ключи, Истина);
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось инициализировать ключ аналитики учета номенклатуры: %Ключ% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ключ%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					МетаданныеДокумента, ТекстСообщения);
				КонецПопытки;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
