#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",		ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи",	РежимЗаписи);
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		ЭтотОбъект.ПолучитьСсылкуНового();
	КонецЕсли;
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ЗатратыНеУказываются Тогда
		ПобочныеИзделия.Очистить();
		МатериалыИРаботы.Очистить();
		Трудозатраты.Очистить();
	КонецЕсли;
	
	//++ НЕ УТКА
	УправлениеПроизводством.ЗаполнитьФлагПередатьДавальцуПоНазначениюВТабличнойЧасти(ВыходныеИзделия);
	УправлениеПроизводством.ЗаполнитьФлагПередатьДавальцуПоНазначениюВТабличнойЧасти(ПобочныеИзделия);
	//-- НЕ УТКА
	
	ОбновитьНомераГруппЗатрат();
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект,Документы.ПроизводствоБезЗаказа);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ПобочныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.МатериалыИРаботы);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Трудозатраты", "МаксимальныйКодСтрокиТрудозатраты");
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВыходныеИзделия);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ПобочныеИзделия);
		ЗаполнитьКлючиАналитики();
		ЗаполнитьПризнакОсновногоИзделия();
		ЗаполнитьВидыЗапасов(Отказ);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПризнакЕстьМаркируемаяПродукция();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	ЕстьМаркируемаяПродукцияГИСМ = Ложь;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Дата, Отказ);
	
	#Область ПроверкаПолейГруппЗатрат

	Если ЭтотОбъект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу
		ИЛИ ЭтотОбъект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ЗатратыНеУказываются Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Спецификация");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Назначение");
		
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.НомерГруппыЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыИРаботы.НомерГруппыЗатрат");
		МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.НомерГруппыЗатрат");
		
	ИначеЕсли ЭтотОбъект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациям Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Назначение");
		
	ИначеЕсли ЭтотОбъект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукции Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Спецификация");
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Назначение");
		
	ИначеЕсли ЭтотОбъект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Спецификация");
		
	КонецЕсли;

	#КонецОбласти

	#Область ПроверкаХарактеристик

	ПараметрыПроверкиХарактеристик = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	
	ПараметрыПроверкиХарактеристик.ИмяТЧ = "ВыходныеИзделия";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверкиХарактеристик);
	
	ПараметрыПроверкиХарактеристик.ИмяТЧ = "ПобочныеИзделия";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверкиХарактеристик);
	
	ПараметрыПроверкиХарактеристик.ИмяТЧ = "МатериалыИРаботы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверкиХарактеристик);
	
	#КонецОбласти

	#Область ПроверкаСерий

	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПроизводствоБезЗаказа);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												ПараметрыУказанияСерий.ВыходныеИзделия,
												Отказ,
												МассивНепроверяемыхРеквизитов);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												ПараметрыУказанияСерий.ПобочныеИзделия,
												Отказ,
												МассивНепроверяемыхРеквизитов);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												ПараметрыУказанияСерий.МатериалыИРаботы,
												Отказ,
												МассивНепроверяемыхРеквизитов);

	#КонецОбласти

	#Область ПроверкаНазначенийДавальца

	ПроверитьВозможностьВыбораНазначенияДавальца("ВыходныеИзделия", Отказ);
	ПроверитьВозможностьВыбораНазначенияДавальца("ПобочныеИзделия", Отказ);
	ПроверитьВозможностьВыбораНазначенияДавальца("МатериалыИРаботы", Отказ);
	ПроверитьОтнесениеМатериаловДавальца(Отказ);
	
	#КонецОбласти

	#Область ПроверкаКоличеств

	ПараметрыПроверкиКоличества = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверкиКоличества.ИмяТЧ = "ВыходныеИзделия";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверкиКоличества);
	
	ПараметрыПроверкиКоличества = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверкиКоличества.ИмяТЧ = "ПобочныеИзделия";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверкиКоличества);
	
	ПараметрыПроверкиКоличества = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверкиКоличества.ИмяТЧ = "МатериалыИРаботы";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверкиКоличества);
	
	#КонецОбласти

	#Область ПроверкаПолучателейИАналитик
	
	РеквизитыПроверкиАналитик = Новый Массив;
	РеквизитыПроверкиАналитик.Добавить(Новый Структура("ВыходныеИзделия", "Получатель, АналитикаРасходов"));
	РеквизитыПроверкиАналитик.Добавить(Новый Структура("ПобочныеИзделия", "Получатель, АналитикаРасходов"));
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, РеквизитыПроверкиАналитик, МассивНепроверяемыхРеквизитов, Отказ);
	
	#КонецОбласти

	Если Не РаспоряжениеДляТрудозатрат Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Бригада");
	КонецЕсли;
	
	ПроверитьДолиСтоимости(Отказ);
	
	МассивВсехРеквизитов = Новый Массив;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ПроизводствоБезЗаказа.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗатратыСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	
	//++ НЕ УТКА
	ОперативныйУчетПроизводства.ОтразитьТрудозатратыКОформлению(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьУслугиДавальцуКОформлению(ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

Процедура ЗаполнитьКлючиАналитики()
	
#Область ЗаполнениеКлючейАналитикиУчетаНоменклатуры

	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета
								(Перечисления.ХозяйственныеОперации.ВыпускПродукции,
								Подразделение,
								Подразделение,
								Неопределено);
	
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.Вставить("Назначение", "Назначение");
	ИменаПолей.Вставить("Серия", "Серия");
	ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерий");
	
	//ВыходныеИзделия
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ВыходныеИзделия, МестаУчета, ИменаПолей);
	
	//ПобочныеИзделия
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета
								(Перечисления.ХозяйственныеОперации.ВыпускПродукции,
								Неопределено,
								Неопределено,
								Неопределено);
	
	ИменаПолей.Вставить("Произвольный", "Подразделение");
	ИменаПолей.Вставить("Работа", "Подразделение");
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ПобочныеИзделия, МестаУчета, ИменаПолей);
	
	//МатериалыИРаботы
	ИменаПолей.Вставить("Произвольный", "Отправитель");
	ИменаПолей.Вставить("Работа", "Отправитель");
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(МатериалыИРаботы, МестаУчета, ИменаПолей);
	
#КонецОбласти
	
#Область ЗаполнениеКлючейАналитикиУчетаПартийПроизводства

	ИменаПолей = РегистрыСведений.АналитикаУчетаПартийПроизводства.ИменаПолейКоллекцииПоУмолчанию();
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукции Тогда
		ИменаПолей.Вставить("Номенклатура",						"Номенклатура");
		ИменаПолей.Вставить("Характеристика",					"Характеристика");
	ИначеЕсли ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям Тогда
		ИменаПолей.Вставить("Номенклатура",						"Номенклатура");
		ИменаПолей.Вставить("Характеристика",					"Характеристика");
		ИменаПолей.Вставить("Назначение",						"Назначение");
	ИначеЕсли ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациям Тогда
		ИменаПолей.Вставить("Спецификация",					"Спецификация");
	ИначеЕсли ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям Тогда
		ИменаПолей.Вставить("Спецификация",					"Спецификация");
		ИменаПолей.Вставить("Назначение",					"Назначение");
	КонецЕсли;
	
	РегистрыСведений.АналитикаУчетаПартийПроизводства.ЗаполнитьВКоллекции(ВыходныеИзделия, ИменаПолей);
		
	СтруктураПоиска = Новый Структура("НомерГруппыЗатрат");
	
	Для Каждого ТекГруппа Из ВыходныеИзделия Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекГруппа);
		
		Строки = ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.АналитикаУчетаПартийПроизводства = ТекГруппа.АналитикаУчетаПартийПроизводства;
		КонецЦикла;
		
		Строки = ПобочныеИзделия.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.АналитикаУчетаПартийПроизводства = ТекГруппа.АналитикаУчетаПартийПроизводства;
		КонецЦикла;
		
		Строки = МатериалыИРаботы.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.АналитикаУчетаПартийПроизводства = ТекГруппа.АналитикаУчетаПартийПроизводства;
		КонецЦикла;
		
		Строки = Трудозатраты.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.АналитикаУчетаПартийПроизводства = ТекГруппа.АналитикаУчетаПартийПроизводства;
		КонецЦикла;
		
	КонецЦикла;
	
#КонецОбласти

КонецПроцедуры

Процедура ЗаполнитьПризнакОсновногоИзделия()
	
	Для Каждого ТекСтрока Из ВыходныеИзделия Цикл
		ТекСтрока.ОсновноеИзделиеГруппыЗатрат = Ложь;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
		|	ВыходныеИзделия.АналитикаУчетаПартийПроизводства КАК АналитикаУчетаПартийПроизводства
		|ПОМЕСТИТЬ ВыходныеИзделия
		|ИЗ
		|	&ВыходныеИзделия КАК ВыходныеИзделия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВыходныеИзделия.НомерСтроки) КАК НомерСтроки,
		|	ВыходныеИзделия.АналитикаУчетаПартийПроизводства
		|ИЗ
		|	ВыходныеИзделия КАК ВыходныеИзделия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыходныеИзделия.АналитикаУчетаПартийПроизводства";
	
	Запрос.УстановитьПараметр("ВыходныеИзделия", ВыходныеИзделия.Выгрузить(, "НомерСтроки, АналитикаУчетаПартийПроизводства"));
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыходныеИзделия[Выборка.НомерСтроки - 1].ОсновноеИзделиеГруппыЗатрат = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	#Область ВидыЗапасовВТабличныхЧастях
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки											КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура											КАК Номенклатура,
		|	ТаблицаТоваров.ВидЗапасов											КАК ВидЗапасов,
		|	&Подразделение														КАК Подразделение,
		|	ТаблицаТоваров.АналитикаУчетаНоменклатуры							КАК АналитикаУчетаНоменклатуры
		|ПОМЕСТИТЬ ТаблицаТоваровДокумента
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЗапасов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
		|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
		|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
		|	ТаблицаТоваров.Подразделение КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК Назначение,
		|	&Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции) КАК ХозяйственнаяОперация,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(Назначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
		|		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|	КОНЕЦ КАК ТипЗапасов,
		|	Назначения.Партнер КАК Поставщик,
		|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
		|	ЕСТЬNULL(Назначения.Договор.Контрагент, ВЫРАЗИТЬ(Назначения.Заказ КАК Документ.ЗаказДавальца).Контрагент) КАК Контрагент,
		|	Назначения.Договор КАК Договор,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	ВЫБОР
		|		КОГДА &ИспользоватьРаздельныйУчетПоНалогообложению И Не &ПартионныйУчетВерсии22
		|			ТОГДА &ВыпускПодДеятельность
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|	КОНЕЦ КАК НалогообложениеНДС,
		|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаПродукции
		|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
		|ИЗ
		|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
		|		ПО ТаблицаТоваров.ВидЗапасов = ВидыЗапасов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СпрНоменклатура.Ссылка = ТаблицаТоваров.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
		|			ПО (Назначения.Ссылка = Аналитика.Назначение)
		|		ПО (Аналитика.КлючАналитики = ТаблицаТоваров.АналитикаУчетаНоменклатуры)
		|ГДЕ
		|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|	ИЛИ НЕ ВидыЗапасов.Организация = &Организация
		|	ИЛИ НЕ ВидыЗапасов.ТипЗапасов =
		|		ВЫБОР
		|			КОГДА НЕ ЕСТЬNULL(Назначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
		|			КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|		КОНЕЦ
		|	ИЛИ (&ИспользоватьРаздельныйУчетПоНалогообложению
		|		И &ПартионныйУчетВерсии22
		|		И НЕ &ВыпускПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
		|	ИЛИ (&ИспользоватьРаздельныйУчетПоНалогообложению
		|		И НЕ &ПартионныйУчетВерсии22
		|		И НЕ ВидыЗапасов.НалогообложениеНДС = &ВыпускПодДеятельность
		|		И НЕ &ВыпускПодДеятельность = &НалогообложениеОрганизации
		|		И НЕ &ВыпускПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))";
		
	#Область ВыходныеИзделия
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ВыходныеИзделия.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов, АналитикаУчетаНоменклатуры"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ВыпускПодДеятельность", ВыпускПодДеятельность);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению", ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22", УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(Дата));
	
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, ВыходныеИзделия);
	
	#КонецОбласти

	#Область ПобочныеИзделия
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Подразделение", "ТаблицаТоваров.Подразделение");
	Запрос.Текст = ТекстЗапроса;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ПобочныеИзделия.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов, АналитикаУчетаНоменклатуры, Подразделение"));
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, ПобочныеИзделия);
	
	#КонецОбласти

	#КонецОбласти
	
	#Область ВидыЗапасовМатериалы
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхМатериалыИРаботы();
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	
	Если Не Проведен
		Или ПерезаполнитьВидыЗапасов
		Или ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
		Или ПроверитьИзменениеТаблицыТоваров(МенеджерВременныхТаблиц) Тогда
		
		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
		ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
		ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(Ссылка, Организация, Дата, ДополнительныеСвойства, МенеджерВременныхТаблиц);
		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
			МенеджерВременныхТаблиц,
			ДополнительныеСвойства,
			ВидыЗапасов,
			ТаблицаОшибок,
			Отказ);
		
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, АналитикаУчетаПартийПроизводства, СтатьяКалькуляции, ВидЗапасов, НомерГТД", "Количество");
		
		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
		
		Если Не Отказ Тогда
			ЗаполнитьДополнительныеПоляВидовЗапасов(МенеджерВременныхТаблиц);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти

КонецПроцедуры

Процедура ЗаполнитьДополнительныеПоляВидовЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ТаблицаТоваров.АналитикаУчетаПартийПроизводства КАК АналитикаУчетаПартийПроизводства,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.СтатьяКалькуляции,
	|	ТаблицаТоваров.АналитикаУчетаПартийПроизводства,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	СтатьяКалькуляции,
	|	АналитикаУчетаПартийПроизводства,
	|	Количество УБЫВ";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	ОтборТоваров = Новый Структура("АналитикаУчетаНоменклатуры");
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		КоличествоТоваров = ВыборкаТовары.Количество;
		
		ЗаполнитьЗначенияСвойств(ОтборТоваров, ВыборкаТовары);
		
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(ОтборТоваров) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.СтатьяКалькуляции					= ВыборкаТовары.СтатьяКалькуляции;
			НоваяСтрока.АналитикаУчетаПартийПроизводства	= ВыборкаТовары.АналитикаУчетаПартийПроизводства;
			НоваяСтрока.Количество							= Количество;
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	
	ЗапасыСервер.ВидыЗапасовНеОбособленныеИОбособленные(
		Организация,
		Справочники.СделкиСКлиентами.ПустаяСсылка(),
		Ответственный,
		Неопределено,
		МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДанныеДокумента.Организация		КАК Организация,
		|	ДанныеДокумента.Дата			КАК Дата
		|ПОМЕСТИТЬ СохраненныеДанныеДокумента
		|ИЗ
		|	Документ.ПроизводствоБезЗаказа	КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.Организация <> СохраненныеДанные.Организация
		|			ТОГДА ИСТИНА
		|		КОГДА ДанныеДокумента.Дата <> СохраненныеДанные.Дата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РеквизитыИзменены
		|ИЗ
		|	ТаблицаДанныхДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ СохраненныеДанныеДокумента КАК СохраненныеДанные
		|		ПО (ИСТИНА)");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыИзменены = Выборка.РеквизитыИзменены;
	Иначе
		РеквизитыИзменены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Функция ПроверитьИзменениеТаблицыТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаТоваров.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
		|		ТаблицаТоваров.СтатьяКалькуляции				КАК СтатьяКалькуляции,
		|		ТаблицаТоваров.АналитикаУчетаПартийПроизводства	КАК АналитикаУчетаПартийПроизводства,
		|		ТаблицаТоваров.Склад							КАК Склад,
		|		ТаблицаТоваров.Количество						КАК Количество
		|	ИЗ
		|		ТаблицаТоваров КАК ТаблицаТоваров
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры,
		|		ТаблицаВидыЗапасов.СтатьяКалькуляции,
		|		ТаблицаВидыЗапасов.АналитикаУчетаПартийПроизводства,
		|		ТаблицаВидыЗапасов.СкладОтгрузки,
		|		-ТаблицаВидыЗапасов.Количество
		|	ИЗ
		|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов) КАК ТаблицаТоваров
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
		|	ТаблицаТоваров.СтатьяКалькуляции,
		|	ТаблицаТоваров.АналитикаУчетаПартийПроизводства,
		|	ТаблицаТоваров.Склад
		|
		|ИМЕЮЩИЕ
		|	НЕ СУММА(ТаблицаТоваров.Количество) = 0");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
		
		ШаблонСообщения = НСтр("ru = 'Потребление превышает остаток товара организации %1'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			Организация);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект);
		
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3 с указанными номерами ГТД'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика,, СтрокаТаблицы.Серия),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВременныеТаблицыДанныхМатериалыИРаботы()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Организация														КАК Организация,
	|	НЕОПРЕДЕЛЕНО														КАК Партнер,
	|	НЕОПРЕДЕЛЕНО														КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)			КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)				КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)							КАК Валюта,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРаздельныйУчетПоНалогообложению
	|			ТОГДА &ВыпускПодДеятельность
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ																КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)	КАК ХозяйственнаяОперация,
	|	ЛОЖЬ																КАК ЕстьСделкиВТабличнойЧасти,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)				КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)						КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)					КАК Сделка
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки												КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура												КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика											КАК Характеристика,
	|	ТаблицаТоваров.Отправитель												КАК Склад,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры								КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.СтатьяКалькуляции										КАК СтатьяКалькуляции,
	|	ТаблицаТоваров.АналитикаУчетаПартийПроизводства							КАК АналитикаУчетаПартийПроизводства,
	|	ТаблицаТоваров.СтатусУказанияСерий										КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Количество												КАК Количество,
	|	ТаблицаТоваров.ДокументРеализации										КАК ДокументРеализации,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)	КАК ГруппаПродукции,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)		КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)						КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)							КАК СтавкаНДС,
	|	0																		КАК СуммаСНДС,
	|	0																		КАК СуммаНДС,
	|	0																		КАК СуммаВознаграждения,
	|	0																		КАК СуммаНДСВознаграждения,
	|	ИСТИНА																	КАК ПодбиратьВидыЗапасов
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки						КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.СтатьяКалькуляции				КАК СтатьяКалькуляции,
	|	ТаблицаВидыЗапасов.АналитикаУчетаПартийПроизводства	КАК АналитикаУчетаПартийПроизводства,
	|	ТаблицаВидыЗапасов.ДокументРеализации				КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД							КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество						КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)	КАК Сделка,
	|	ЛОЖЬ												КАК ВидыЗапасовУказаныВручную
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки						КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.СтатьяКалькуляции				КАК СтатьяКалькуляции,
	|	ТаблицаВидыЗапасов.АналитикаУчетаПартийПроизводства	КАК АналитикаУчетаПартийПроизводства,
	|	Аналитика.Номенклатура								КАК Номенклатура,
	|	Аналитика.Характеристика							КАК Характеристика,
	|	ТаблицаВидыЗапасов.ДокументРеализации				КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД							КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество						КАК Количество,
	|	Аналитика.Склад										КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Сделка							КАК Сделка,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную		КАК ВидыЗапасовУказаныВручную
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Дата",					Дата);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ВыпускПодДеятельность",	ВыпускПодДеятельность);
	Запрос.УстановитьПараметр("ТаблицаТоваров",			ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(МатериалыИРаботы.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",		ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
	
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению", ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#Область ГруппировкаЗатрат

Процедура ОбновитьНомераГруппЗатрат()
	
	ГруппыЗатрат = ЭтотОбъект.ВыходныеИзделия.Выгрузить(,"НомерГруппыЗатрат");
	ГруппыЗатрат.Свернуть("НомерГруппыЗатрат");
	ГруппыЗатрат.Сортировать("НомерГруппыЗатрат");
	
	ИндексГруппы = 1;
	СтруктураПоиска = Новый Структура("НомерГруппыЗатрат");
	
	Для Каждого ТекГруппаЗатрат Из ГруппыЗатрат Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекГруппаЗатрат);
		
		Строки = ЭтотОбъект.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.НомерГруппыЗатрат = ИндексГруппы;
			Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукции
				ИЛИ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям Тогда
				ТекСтрока.ДоляСтоимости = 0;
			КонецЕсли;
		КонецЦикла;
		
		Строки = ЭтотОбъект.ПобочныеИзделия.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.НомерГруппыЗатрат = ИндексГруппы;
		КонецЦикла;
		
		Строки = ЭтотОбъект.МатериалыИРаботы.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.НомерГруппыЗатрат = ИндексГруппы;
		КонецЦикла;
		
		Строки = ЭтотОбъект.Трудозатраты.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.НомерГруппыЗатрат = ИндексГруппы;
		КонецЦикла;
		
		ИндексГруппы = ИндексГруппы + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьВозможностьВыбораНазначенияДавальца(ИмяТЧ, Отказ)
	
	ПредставлениеТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Синоним;
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	
	ИсключатьЗаказыДавальца = НЕ (ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям
									ИЛИ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям
									ИЛИ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ЗатратыНеУказываются);
									
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,
		|	ТаблицаТоваров.Назначение КАК Назначение
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
		|		ПО (Назначения.Ссылка = ТаблицаТоваров.Назначение)
		|ГДЕ
		|	&ИсключатьЗаказыДавальца
		|	И НЕ Назначения.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ИсключатьЗаказыДавальца", ИсключатьЗаказыДавальца);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ЭтотОбъект[ИмяТЧ].Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" выбрано давальческое назначение.
									|Давальческое назначение может быть выбрано только при группировке затрат по назначениям.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Назначение");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, "Объект", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОтнесениеМатериаловДавальца(Отказ)
	
	ПредставлениеПобочныеИзделия = ЭтотОбъект.Метаданные().ТабличныеЧасти.ПобочныеИзделия.Синоним;
	ПредставлениеМатериалыИРаботы = ЭтотОбъект.Метаданные().ТабличныеЧасти.МатериалыИРаботы.Синоним;
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыходныеИзделия.НомерГруппыЗатрат,
		|	ВЫРАЗИТЬ(ВыходныеИзделия.Назначение КАК Справочник.Назначения) КАК Назначение
		|ПОМЕСТИТЬ ВыходныеИзделия
		|ИЗ
		|	&ВыходныеИзделия КАК ВыходныеИзделия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПобочныеИзделия.НомерГруппыЗатрат,
		|	ПобочныеИзделия.НомерСтроки,
		|	ВЫРАЗИТЬ(ПобочныеИзделия.Назначение КАК Справочник.Назначения) КАК Назначение
		|ПОМЕСТИТЬ ПобочныеИзделия
		|ИЗ
		|	&ПобочныеИзделия КАК ПобочныеИзделия
		|ГДЕ
		|	НЕ ПобочныеИзделия.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МатериалыИРаботы.НомерГруппыЗатрат,
		|	МатериалыИРаботы.НомерСтроки,
		|	ВЫРАЗИТЬ(МатериалыИРаботы.Назначение КАК Справочник.Назначения) КАК Назначение
		|ПОМЕСТИТЬ МатериалыИРаботы
		|ИЗ
		|	&МатериалыИРаботы КАК МатериалыИРаботы
		|ГДЕ
		|	НЕ МатериалыИРаботы.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПобочныеИзделия.НомерГруппыЗатрат,
		|	ПобочныеИзделия.НомерСтроки,
		|	ПобочныеИзделия.Назначение,
		|	ЛОЖЬ КАК Материал
		|ИЗ
		|	ПобочныеИзделия КАК ПобочныеИзделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВыходныеИзделия КАК ВыходныеИзделия
		|		ПО ПобочныеИзделия.НомерГруппыЗатрат = ВыходныеИзделия.НомерГруппыЗатрат
		|ГДЕ
		|	НЕ ПобочныеИзделия.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|	И НЕ ПобочныеИзделия.Назначение.Партнер = ЕСТЬNULL(ВыходныеИзделия.Назначение.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МатериалыИРаботы.НомерГруппыЗатрат,
		|	МатериалыИРаботы.НомерСтроки,
		|	МатериалыИРаботы.Назначение,
		|	ИСТИНА
		|ИЗ
		|	МатериалыИРаботы КАК МатериалыИРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВыходныеИзделия КАК ВыходныеИзделия
		|		ПО МатериалыИРаботы.НомерГруппыЗатрат = ВыходныеИзделия.НомерГруппыЗатрат
		|ГДЕ
		|	НЕ МатериалыИРаботы.Назначение.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|	И НЕ МатериалыИРаботы.Назначение.Партнер = ЕСТЬNULL(ВыходныеИзделия.Назначение.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("ВыходныеИзделия", ЭтотОбъект.ВыходныеИзделия.Выгрузить());
	Запрос.УстановитьПараметр("ПобочныеИзделия", ЭтотОбъект.ПобочныеИзделия.Выгрузить());
	Запрос.УстановитьПараметр("МатериалыИРаботы", ЭтотОбъект.МатериалыИРаботы.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" неправильно указана группировка затрат.
									|Материалы давальца должны быть включены в себестоимость продукции того же давальца.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ?(Выборка.Материал,
																			ПредставлениеМатериалыИРаботы,
																			ПредставлениеПобочныеИзделия));
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(?(Выборка.Материал, "МатериалыИРаботы", "ПобочныеИзделия"),
																Выборка.НомерСтроки,
																"Назначение");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, "Объект", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДолиСтоимости(Отказ)
	
	ПредставлениеТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти.ВыходныеИзделия.Синоним;
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,
		|	ВЫБОР
		|		КОГДА &ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|		ИНАЧЕ ТаблицаТоваров.Спецификация
		|	КОНЕЦ КАК Спецификация,
		|	ВЫБОР
		|		КОГДА &ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям)
		|			ТОГДА ТаблицаТоваров.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ КАК Назначение,
		|	ТаблицаТоваров.ДоляСтоимости КАК ДоляСтоимости
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|ГДЕ
		|	НЕ &ГруппировкаЗатрат В (ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукции), ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Спецификация,
		|	ТаблицаТоваров.Назначение,
		|	КОЛИЧЕСТВО(ТаблицаТоваров.НомерСтроки) КАК Количество
		|ПОМЕСТИТЬ ИтогиПоСпецификации
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТоваров.Спецификация,
		|	ТаблицаТоваров.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИтогиПоСпецификации КАК ИтогиПоСпецификации
		|		ПО ТаблицаТоваров.Спецификация = ИтогиПоСпецификации.Спецификация
		|			И ТаблицаТоваров.Назначение = ИтогиПоСпецификации.Назначение
		|ГДЕ
		|	ТаблицаТоваров.ДоляСтоимости = 0
		|	И ИтогиПоСпецификации.Количество > 1";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",		ЭтотОбъект.ВыходныеИзделия.Выгрузить());
	Запрос.УстановитьПараметр("ГруппировкаЗатрат",	ЭтотОбъект.ГруппировкаЗатрат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" не указана доля стоимости.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Выборка.НомерСтроки, "ДоляСтоимости");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, "Объект", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Дата = ТекущаяДатаСеанса();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	ВидЦены = Справочники.ВидыЦен.ВидЦеныПлановойСтоимостиТМЦ(ВидЦены);
	Валюта = Константы.ВалютаПлановойСебестоимостиПродукции.Получить();
	
	Если Не ЗначениеЗаполнено(ВыпускПодДеятельность) Тогда
		ВыпускПодДеятельность = Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата);
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.ТоварыОрганизаций);
		Массив.Добавить(Движения.ТоварыНаСкладах);
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ТрудозатратыНезавершенногоПроизводства);
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Массив.Добавить(Движения.ТрудозатратыКОформлению);
	//-- НЕ УТКА
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

// ИнтеграцияГИСМ
Процедура ЗаполнитьПризнакЕстьМаркируемаяПродукция()
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаНоменклатура
		|ГДЕ
		|	ТаблицаНоменклатура.ПродукцияМаркируемаяДляГИСМ
		|	И ТаблицаНоменклатура.Ссылка В(&ВыходныеИзделия)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаНоменклатура
		|ГДЕ
		|	ТаблицаНоменклатура.ПродукцияМаркируемаяДляГИСМ
		|	И ТаблицаНоменклатура.Ссылка В(&ПобочныеИзделия)";
	
	Запрос.УстановитьПараметр("ВыходныеИзделия", ВыходныеИзделия.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ПобочныеИзделия", ПобочныеИзделия.ВыгрузитьКолонку("Номенклатура"));
	ЕстьМаркируемаяПродукцияГИСМ = НЕ Запрос.Выполнить().Пустой();
	
КонецПроцедуры
// Конец ИнтеграцияГИСМ

#КонецОбласти

#КонецЕсли