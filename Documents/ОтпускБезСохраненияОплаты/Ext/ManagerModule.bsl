#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.ОтпускБезСохраненияОплаты - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.ОтпускБезСохраненияОплаты - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, Объект, Отказ, Истина);    
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета);
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		// Подготовка к регистрации перерасчетов
		ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТДанныеДокументов(РеквизитыДляПроведения.Ссылка, ДанныеДляРегистрацииПерерасчетов);
		ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(РеквизитыДляПроведения.Ссылка, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		
		ЗарегистрироватьВнутрисменныеОтклонения(Движения, РеквизитыДляПроведения);
		
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ПерерасчетВыполнен Тогда
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
			
			ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ);
			
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам, Неопределено, Неопределено, Неопределено, Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
				
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Перечисления.ХарактерВыплатыЗарплаты.Зарплата, Истина);
			
			// - Регистрация бухучета начислений, выполняется до вызова регистрации доходов в учете НДФЛ.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						ДанныеДляПроведения.НачисленияПоСотрудникам, Неопределено, Неопределено);
			
			УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, РеквизитыДляПроведения.Организация,
						КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации),
						ДанныеДляПроведения.МенеджерВременныхТаблиц, , , , , ДокументСсылка);
			
			ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьДоходыНДФЛСведениямиОРаспределенииПоСтатьямФинансирования(Движения);
			
			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			
			// Учет среднего заработка
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
		ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
		ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
		ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
		ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
		
		Если Не РеквизитыДляПроведения.ОтсутствиеВТечениеЧастиСмены Тогда 
			СостоянияСотрудников.ЗарегистрироватьОтпускСотрудника(Движения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.ВидОтпуска, РеквизитыДляПроведения.ДатаНачала, РеквизитыДляПроведения.ДатаОкончания);
			
			УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(Движения, ДанныеДляРегистрацииВУчетаСтажаПФР(РеквизитыДляПроведения.Ссылка)[РеквизитыДляПроведения.Ссылка]);
		КонецЕсли;
			
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			КадровыйУчетРасширенный.ОсвободитьСтавкуВременно(Движения, ДанныеДляПроведения.ПериодыОсвобожденияСтавки);
		КонецЕсли;
		
		// Регистрация перерасчетов
		Если ЕстьПерерасчеты Тогда
			ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		КонецЕсли;
		
		ПерерасчетЗарплаты.УдалениеПерерасчетовПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		КадровыйУчетРасширенный.ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеДляПроведения.ДанныеРеестраОтпусков, Отказ);
		
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, СтруктураВидовУчета);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.ОтпускБезСохраненияОплаты);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтпускаБезОплаты") Тогда
		// Приказ о предоставлении отпуска (Т-6).
		КадровыйУчет.ДобавитьКомандуПечатиПриказаОПредоставленииОтпуска(КомандыПечати);
	КонецЕсли;
КонецПроцедуры

Функция ТекстСообщенияНеЗаполненВидРасчета(ВидОтпуска, ВнутрисменныйОтпуск) Экспорт
	ТекстСообщения = НСтр("ru = 'Не найдено ни одного начисления для регистрации %1""%2""'");
		
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ?(ВнутрисменныйОтпуск, НСтр("ru = 'внутрисменного '"), ""), ВидОтпуска);
КонецФункции

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок) Экспорт
	
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтпускБезСохраненияОплаты.Сотрудник,
	|	ОтпускБезСохраненияОплаты.ВидОтпуска,
	|	ОтпускБезСохраненияОплаты.ВидРасчета.ВидСтажаПФР2014 КАК ВидСтажаПФР,
	|	ОтпускБезСохраненияОплаты.ДатаНачала,
	|	ОтпускБезСохраненияОплаты.ДатаОкончания,
	|	ОтпускБезСохраненияОплаты.ОтсутствиеВТечениеЧастиСмены,
	|	ОтпускБезСохраненияОплаты.Ссылка
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.Ссылка В(&МассивСсылок)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
		
		Если Не Выборка.ОтсутствиеВТечениеЧастиСмены Тогда
			Если ЗначениеЗаполнено(Выборка.ВидСтажаПФР) Тогда
				ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
				ОписаниеПериода.Сотрудник = Выборка.Сотрудник;
				ОписаниеПериода.ДатаНачалаПериода = Выборка.ДатаНачала;
				ОписаниеПериода.ДатаОкончанияПериода = Выборка.ДатаОкончания;
				ОписаниеПериода.Состояние = СостоянияСотрудников.СостояниеПоВидуОтпуска(Выборка.ВидОтпуска);
				
				РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
				
				УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", Выборка.ВидСтажаПФР);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляРегистрацииВУчете;
	
КонецФункции

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета) 

	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет", "Ссылка.ПериодРегистрации");
		РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВД(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДанныеДляПроведения.НачисленияПоСотрудникам);
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДляПроведения.Сотрудник), РеквизитыДляПроведения.ДатаНачала, КонецДня(РеквизитыДляПроведения.ДатаОкончания) + 1);
			
			Если ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент) Тогда
				ДанныеИсправленногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДляПроведения.ИсправленныйДокумент, "ФизическоеЛицо,Организация,Сотрудник,ДатаНачала,ДатаОкончания");
				КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеИсправленногоДокумента.Сотрудник), 
																					ДанныеИсправленногоДокумента.ДатаНачала, КонецДня(ДанныеИсправленногоДокумента.ДатаОкончания) + 1, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		// Данные для Реестра отпусков
		ДанныеРеестраОтпусков = КадровыйУчетРасширенный.ТаблицаРеестраОтпусков();
		
		Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДокументЗаполнения), РеквизитыДляПроведения.ДатаДокументаЗаполнения, РеквизитыДляПроведения.Дата), 
			?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДокументЗаполнения), РеквизитыДляПроведения.НомерДокументаЗаполнения, РеквизитыДляПроведения.Номер));
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ФизическоеЛицо,
		|	ОтпускБезСохраненияОплаты.Ссылка КАК ДокументОснование,
		|	ОтпускБезСохраненияОплаты.ВидОтпуска,
		|	ОтпускБезСохраненияОплаты.ДатаНачала КАК ДатаНачалаПериодаОтсутствия,
		|	ОтпускБезСохраненияОплаты.ДатаОкончания КАК ДатаОкончанияПериодаОтсутствия
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Ссылка = &Ссылка
		|	И НЕ ОтпускБезСохраненияОплаты.ОтсутствиеВТечениеЧастиСмены";
		
		Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НомерСтр = 1;
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДанныеРеестраОтпусков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Номер = НомерСтр;
			
			НоваяСтрока.КоличествоДнейОтпуска = (КонецДня(Выборка.ДатаОкончанияПериодаОтсутствия) - НачалоДня(Выборка.ДатаНачалаПериодаОтсутствия))/86400;
			
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", Выборка.ДатаНачалаПериодаОтсутствия);
				
			НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
			
			НоваяСтрока.Основание = Основание;
			
			НомерСтр = НомерСтр + 1;
			
		КонецЦикла;
		
		ДанныеДляПроведения.Вставить("ДанныеРеестраОтпусков", ДанныеРеестраОтпусков);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка();
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура СоздатьВТДанныеДокументов(ДокументСсылка, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Сотрудник,
	|	ТаблицаДокумента.ДатаНачала КАК ПериодДействия,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ТаблицаДокумента.Сотрудник,
	|	ТаблицаДокумента.ДатаОкончания,
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Регистратор
	|	И ТаблицаДокумента.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДанныеОВремени(РеквизитыДляПроведения) Экспорт
	
	ДанныеОВремени = УчетРабочегоВремени.ТаблицаДляРегистрацииВремени();
	
	Если РеквизитыДляПроведения.ОтсутствиеВТечениеЧастиСмены Тогда
		СтрокаДанныхОВремени = ДанныеОВремени.Добавить();
		СтрокаДанныхОВремени.Дата = РеквизитыДляПроведения.ДатаОтсутствия;
		СтрокаДанныхОВремени.Сотрудник = РеквизитыДляПроведения.Сотрудник;
		СтрокаДанныхОВремени.ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДляПроведения.ВидРасчета, "ОбозначениеВТабелеУчетаРабочегоВремени");
		СтрокаДанныхОВремени.ВидВремениВытесняемый = РеквизитыДляПроведения.ВидВремениЗамещаемый;
		СтрокаДанныхОВремени.Часов = РеквизитыДляПроведения.ЧасовОтпуска;
	КонецЕсли;
	
	Возврат ДанныеОВремени;
	
КонецФункции

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтпускБезСохраненияОплаты.Ссылка,
	|	ОтпускБезСохраненияОплаты.Организация,
	|	ОтпускБезСохраненияОплаты.ПериодРегистрации,
	|	ОтпускБезСохраненияОплаты.Дата,
	|	ОтпускБезСохраненияОплаты.ПерерасчетВыполнен,
	|	ОтпускБезСохраненияОплаты.ОтсутствиеВТечениеЧастиСмены,
	|	ОтпускБезСохраненияОплаты.Сотрудник,
	|	ОтпускБезСохраненияОплаты.ВидОтпуска,
	|	ОтпускБезСохраненияОплаты.ДатаНачала,
	|	ОтпускБезСохраненияОплаты.ДатаОкончания,
	|	ОтпускБезСохраненияОплаты.ОсвобождатьСтавку,
	|	ОтпускБезСохраненияОплаты.ИсправленныйДокумент,
	|	ОтпускБезСохраненияОплаты.Номер,
	|	ОтпускБезСохраненияОплаты.ДатаОтсутствия,
	|	ОтпускБезСохраненияОплаты.ВидРасчета,
	|	ОтпускБезСохраненияОплаты.ВидВремениЗамещаемый,
	|	ОтпускБезСохраненияОплаты.ЧасовОтпуска,
	|	ОтпускБезСохраненияОплаты.ДокументЗаполнения,
	|	ОтпускБезСохраненияОплаты.ДокументЗаполнения.Номер КАК НомерДокументаЗаполнения,
	|	ОтпускБезСохраненияОплаты.ДокументЗаполнения.Дата КАК ДатаДокументаЗаполнения
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускБезСохраненияОплатыРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	ОтпускБезСохраненияОплатыРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	ОтпускБезСохраненияОплатыРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	ОтпускБезСохраненияОплатыРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	ОтпускБезСохраненияОплатыРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	ОтпускБезСохраненияОплатыРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	ОтпускБезСохраненияОплатыРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты.РаспределениеПоТерриториямУсловиямТруда КАК ОтпускБезСохраненияОплатыРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	ОтпускБезСохраненияОплатыРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, Организация, ПериодРегистрации, Дата, ПланируемаяДатаВыплаты, ПерерасчетВыполнен, ОтсутствиеВТечениеЧастиСмены, 
		| Сотрудник, ВидОтпуска, ДатаНачала, ДатаОкончания, ОсвобождатьСтавку, ИсправленныйДокумент, Номер, ДатаОтсутствия, ВидРасчета, ВидВремениЗамещаемый, ЧасовОтпуска, 
		| РаспределениеПоТерриториямУсловиямТруда, ДокументЗаполнения, НомерДокументаЗаполнения, ДатаДокументаЗаполнения");
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

Процедура ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов = 
	"ПериодРегистрации,
	|Организация,
	|ИсправленныйДокумент,
	|ВидРасчета";
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ИменаРеквизитов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Начисления.*
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка";
	
	Начисления = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроверки = РасчетЗарплатыРасширенный.ПараметрыПроверкиПересеченияФактическогоПериодаДействия();
	ПараметрыПроверки.Организация = РеквизитыДокумента.Организация;
	ПараметрыПроверки.ПериодРегистрации = РеквизитыДокумента.ПериодРегистрации;
	ПараметрыПроверки.Документ = ДокументСсылка;
	ПараметрыПроверки.Начисления = Начисления;
	ПараметрыПроверки.ИсправленныйДокумент = РеквизитыДокумента.ИсправленныйДокумент;
	ПараметрыПроверки.ОсновныеНачисления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДокумента.ВидРасчета);
	
	РасчетЗарплатыРасширенный.ПроверитьПересечениеФактическогоПериодаДействия(ПараметрыПроверки, Отказ);
	
КонецПроцедуры

// Функция возвращает структуру с описанием данного вида документа.
//
Функция ОписаниеДокумента() Экспорт 
	
	ОписаниеДокумента = ЗарплатаКадрыРасширенныйКлиентСервер.СтруктураОписанияДокумента();
	
	ОписаниеДокумента.КраткоеНазваниеИменительныйПадеж	 = НСтр("ru = 'отпуск'");
	ОписаниеДокумента.КраткоеНазваниеРодительныйПадеж	 = НСтр("ru = 'отпуска'");
	ОписаниеДокумента.ИмяРеквизитаСотрудник				 = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаОтсутствующийСотрудник = "Сотрудник";
	ОписаниеДокумента.ИмяРеквизитаДатаНачалаСобытия		 = "ДатаНачала";
	ОписаниеДокумента.ИмяРеквизитаДатаОкончанияСобытия	 = "ДатаОкончания";
	
	Возврат ОписаниеДокумента;
	
КонецФункции

Процедура ЗаполнитьНастройкиМенеджераРасчета(МенеджерРасчета, Ссылка, ИсправленныйДокумент) Экспорт
	
	МенеджерРасчета.ИсключаемыйРегистратор = Ссылка;
	МенеджерРасчета.ИсправленныйДокумент = ИсправленныйДокумент;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = Истина;
	МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = Истина;
	
КонецПроцедуры

Процедура РасчетЗарплатыВДанные(Объект, ДанныеМенеджераРасчета) Экспорт
	
	Если ДанныеМенеджераРасчета.Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаИсточника Из ДанныеМенеджераРасчета.Начисления Цикл
		
		НоваяСтрока = Объект.Начисления.Добавить();
		СтрокаНачисленияВДанные(Объект, НоваяСтрока, СтрокаИсточника);
		НоваяСтрока.ИдентификаторСтрокиВидаРасчета = СтрокаИсточника.ИдентификаторСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределениеПоТерриториямУсловиямТрудаВДанные(Объект, СтрокаИсточник)
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРаспределения Из СтрокаИсточник.ТерриторииУсловияТруда Цикл
		
		НоваяСтрока = Объект.РаспределениеПоТерриториямУсловиямТруда.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РезультатРаспределенияВДанные(Объект, СтрокаИсточник)
	
	Если СтрокаИсточник.РаспределениеПоСтатьям <> Неопределено Тогда
		
		Для каждого СтрокаРаспределения Из СтрокаИсточник.РаспределениеПоСтатьям Цикл
			НоваяСтрока = Объект.РаспределениеРезультатовНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаНачисленияВДанные(Объект, СтрокаПриемник, СтрокаИсточник) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	РаспределениеПоТерриториямУсловиямТрудаВДанные(Объект, СтрокаИсточник);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		РезультатРаспределенияВДанные(Объект, СтрокаИсточник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьВнутрисменныеОтклонения(Движения, РеквизитыДляПроведения)
	
	Если Не РеквизитыДляПроведения.ОтсутствиеВТечениеЧастиСмены Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьСторноЗаписиУчетаВремени(Движения, РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ИсправленныйДокумент);
	
	УчетРабочегоВремениРасширенный.ЗарегистрироватьВнутрисменныеОтклонения(Движения, ДанныеОВремени(РеквизитыДляПроведения), РеквизитыДляПроведения.ПериодРегистрации);
	
КонецПроцедуры

Процедура ЗарегистрироватьСторноЗаписиУчетаВремени(Движения, Сотрудник, ПериодРегистрации, ИсправленныйДокумент, Записывать = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	УчетРабочегоВремениРасширенный.ЗарегистрироватьСторноЗаписиПоДокументу(Движения, ПериодРегистрации, ИсправленныйДокумент, Сотрудники, Записывать);
	
КонецПроцедуры 

// Проверяет, что сотрудник, указанный в документе работает в период отсутствия.
//
// Параметры:
//		Объект	- ДокументОбъект.ОтпускБезСохраненияОплаты
//		Отказ	- Булево
//
Процедура ПроверитьРаботающих(Объект, Отказ) Экспорт
	
	Если Объект.ОтсутствиеВТечениеЧастиСмены Тогда
		НачалоПериода 		= НачалоДня(Объект.ДатаОтсутствия);
		ОкончаниеПериода	= КонецДня(Объект.ДатаОтсутствия);
	Иначе 	
		НачалоПериода 		= Объект.ДатаНачала;
		ОкончаниеПериода	= Объект.ДатаОкончания;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.Сотрудник)
		Или Не ЗначениеЗаполнено(НачалоПериода)
		Или Не ЗначениеЗаполнено(ОкончаниеПериода) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Объект.Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ОкончаниеПериода;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	
	КадровыйУчет.ПроверитьРаботающихСотрудников(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник),
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект")
	);
	
КонецПроцедуры

Функция ВидРасчетаПоВидуОтпускаОбъекта(Объект) Экспорт
	
	ВидРасчета = ПланыВидовРасчета.Начисления.ПустаяСсылка();
	ВидОтпуска = Объект.ВидОтпуска;
	
	Если Не ЗначениеЗаполнено(ВидОтпуска) Тогда
		ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчет");
		Если НЕ ЗначениеЗаполнено(ВидОтпуска) Тогда
			Возврат ВидРасчета;
		КонецЕсли;
	КонецЕсли;
	
	ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(Объект.Ссылка);
	Отбор = Новый Структура;
	Отбор.Вставить("ВидВремени", ПредопределенноеЗначение("Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное"));
	Отбор.Вставить("ВидОтпуска", ВидОтпуска);
	
	ВидыРасчета = ПланыВидовРасчета.Начисления.НачисленияПоВидуДокумента(ВидДокумента, Отбор);
	Если ВидыРасчета.Количество() > 0 Тогда
		ВидРасчета = ВидыРасчета[0];
	КонецЕсли;
	
	Возврат ВидРасчета;
	
КонецФункции

Процедура ЗаполнитьДокументЗаполнения(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	Отпуск.Ссылка КАК Отпуск,
	|	Отпуска.Ссылка КАК ДокументЗаполнения
	|ИЗ
	|	Документ.ОтпускаСотрудников.Сотрудники КАК Отпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплаты КАК Отпуск
	|		ПО Отпуска.Сотрудник = Отпуск.Сотрудник
	|			И Отпуска.ВидОтпуска = Отпуск.ВидОтпуска
	|			И Отпуска.ДатаНачала = Отпуск.ДатаНачала
	|			И Отпуска.ДатаОкончания = Отпуск.ДатаОкончания
	|ГДЕ
	|	НЕ Отпуска.Ссылка.ПометкаУдаления
	|	И НЕ Отпуск.Ссылка.ПометкаУдаления
	|	И Отпуск.ДокументЗаполнения = ЗНАЧЕНИЕ(Документ.ОтпускаСотрудников.ПустаяСсылка)";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 100", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Отпуск = Выборка.Отпуск;
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ОтпускБезСохраненияОплаты", "Ссылка", Отпуск) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Отпуск.ПолучитьОбъект();
			ДокументОбъект.ДокументЗаполнения = Выборка.ДокументЗаполнения;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли