
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСВызовСервера.ПриПолученииФормыДокумента(
		"АктПостановкиНаБалансЕГАИС",
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает данные акта в виде структуры перед выгрузкой в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - выгружаемый акт,
//  ВидДокумента - ПеречислениеСсылка.ВидыДокументаЕГАИС - вид выгружаемого документа.
//
// Возвращаемое значение:
//   Структура - данные акта.
//
Функция ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента) Экспорт
	
	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1 Тогда
		Возврат ИнициализироватьДанныеАктаПостановкиНаБалансВРегистр1(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2 Тогда
		Возврат ИнициализироватьДанныеАктаПостановкиНаБалансВРегистр2(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс Тогда
		Возврат ИнициализироватьДанныеЗапросаНаОтменуПроведенияАктаПостановкиНаБаланс(ДокументСсылка);
		
	Иначе
		ТекстОшибки = НСтр("ru='Неподдерживаемый вид документа %1 для акта постановки на баланс'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВидДокумента);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияЕГАИС.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                    КАК Период,
	|	ДанныеШапки.Ссылка                  КАК Ссылка,
	|	ДанныеШапки.ОрганизацияЕГАИС        КАК ОрганизацияЕГАИС,
	|	ДанныеШапки.СтатусОбработки         КАК СтатусОбработки,
	|	ДанныеШапки.ДатаРегистрацииДвижений КАК ДатаРегистрацииДвижений,
	|	ДанныеШапки.ВидДокумента            КАК ВидДокумента
	|
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("ПустаяДата",              '00010101');
	Запрос.УстановитьПараметр("Ссылка",                  Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки",         Реквизиты.СтатусОбработки);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС",        Реквизиты.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("ДатаРегистрацииДвижений", Реквизиты.ДатаРегистрацииДвижений);
	Запрос.УстановитьПараметр("ВидДокумента",            Реквизиты.ВидДокумента);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияЕГАИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИС.ЕстьТаблицаЗапроса("ВТТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&ОрганизацияЕГАИС                      КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция     КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                 КАК Справка2,
	|	ТаблицаТовары.Количество               КАК СвободныйОстаток,
	|	0                                      КАК Количество,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|ГДЕ
	|	&СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВЕГАИС)
	|	И &ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&ДатаРегистрацииДвижений               КАК ДатаРегистрацииДвижений,
	|	&ОрганизацияЕГАИС                      КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция     КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                 КАК Справка2,
	|	0                                      КАК СвободныйОстаток,
	|	ТаблицаТовары.Количество               КАК Количество,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|ГДЕ
	|	&СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВЕГАИС)
	|	И &ДатаРегистрацииДвижений <> &ПустаяДата
	|	И &ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТТовары";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка               КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Количество           КАК Количество,
	|	ТаблицаТовары.Справка2             КАК Справка2
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений();
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	ПолноеИмяДокумента = "Документ.АктПостановкиНаБалансЕГАИС";
	
	Если ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВТТовары", ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	Результат = ОбновлениеИнформационнойБазыЕГАИС.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров.Вставить("ПустаяДата", '00010101');
	
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыЕГАИС.АдаптироватьЗапросМеханизмаПроведения(
		ТекстЗапроса,
		ПолноеИмяДокумента,
		СинонимТаблицыДокумента,
		ПереопределениеРасчетаПараметров,
		ТекстыЗапросаВременныхТаблиц);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает данные акта постановки на баланс в регистр №1.
//
Функция ИнициализироватьДанныеАктаПостановкиНаБалансВРегистр1(ДокументСсылка)
	
	ДанныеАкта = СтруктураДанныхАктаПостановкиНаБаланс();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Номер КАК Номер,
	|	АктПостановкиНаБалансЕГАИС.Дата КАК Дата,
	|	АктПостановкиНаБалансЕГАИС.Идентификатор КАК Идентификатор,
	|	АктПостановкиНаБалансЕГАИС.ПричинаПостановкиНаБаланс КАК ПричинаПостановкиНаБаланс,
	|	ВЫБОР
	|		КОГДА АктПостановкиНаБалансЕГАИС.ПричинаПостановкиНаБаланс = ЗНАЧЕНИЕ(Перечисление.ПричиныПостановкиНаБалансЕГАИС.Пересортица)
	|			ТОГДА ЕСТЬNULL(АктПостановкиНаБалансЕГАИС.АктСписанияЕГАИС.ИдентификаторЕГАИС, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИдентификаторАктаСписания,
	|	АктПостановкиНаБалансЕГАИС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеАкта, Выборка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Количество КАК Количество,
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.КоличествоПоСправке1 КАК КоличествоПоСправке1,
	|	Товары.НомерТТН КАК НомерТТН,
	|	Товары.ДатаТТН КАК ДатаТТН,
	|	Товары.ДатаРозлива КАК ДатаРозлива,
	|	Товары.НомерПодтвержденияЕГАИС КАК НомерПодтвержденияЕГАИС,
	|	Товары.ДатаПодтвержденияЕГАИС КАК ДатаПодтвержденияЕГАИС,
	|	ЕСТЬNULL(АкцизныеМарки.КодАкцизнойМарки, """") КАК КодАкцизнойМарки,
	|	Товары.Справка2.НомерСправки1 КАК НомерСправки1,
	|	Товары.Справка2.РегистрационныйНомер КАК НомерСправки2
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПостановкиНаБалансЕГАИС.АкцизныеМарки КАК АкцизныеМарки
	|		ПО (АкцизныеМарки.Ссылка = &Ссылка)
	|			И Товары.ИдентификаторСтроки = АкцизныеМарки.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(АлкогольнаяПродукция),
	|	МАКСИМУМ(КоличествоПоСправке1),
	|	МАКСИМУМ(НомерТТН),
	|	МАКСИМУМ(ДатаТТН),
	|	МАКСИМУМ(ДатаРозлива),
	|	МАКСИМУМ(НомерПодтвержденияЕГАИС),
	|	МАКСИМУМ(ДатаПодтвержденияЕГАИС),
	|	МАКСИМУМ(НомерСправки1),
	|	МАКСИМУМ(НомерСправки2)
	|ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаАкта = СтруктураДанныхСтрокиАктаПостановкиНаБалансВРегистр1();
		ЗаполнитьЗначенияСвойств(СтрокаАкта, Выборка);
		СтрокаАкта.ИдентификаторСтроки = Формат(Выборка.НомерСтроки, "ЧГ=0");
		
		ВыборкаМарки = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМарки.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаМарки.КодАкцизнойМарки) Тогда
				СтрокаАкта.АкцизныеМарки.Добавить(ВыборкаМарки.КодАкцизнойМарки);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеАкта.ТаблицаТоваров.Добавить(СтрокаАкта);
	КонецЦикла;
	
	Возврат ДанныеАкта;
	
КонецФункции

// Возвращает данные акта постановки на баланс в регистр №2.
//
Функция ИнициализироватьДанныеАктаПостановкиНаБалансВРегистр2(ДокументСсылка)
	
	ДанныеАкта = СтруктураДанныхАктаПостановкиНаБаланс();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Номер КАК Номер,
	|	АктПостановкиНаБалансЕГАИС.Дата КАК Дата,
	|	АктПостановкиНаБалансЕГАИС.Идентификатор КАК Идентификатор,
	|	АктПостановкиНаБалансЕГАИС.ПричинаПостановкиНаБаланс КАК ПричинаПостановкиНаБаланс,
	|	ВЫБОР
	|		КОГДА АктПостановкиНаБалансЕГАИС.ПричинаПостановкиНаБаланс = ЗНАЧЕНИЕ(Перечисление.ПричиныПостановкиНаБалансЕГАИС.Пересортица)
	|			ТОГДА ЕСТЬNULL(АктПостановкиНаБалансЕГАИС.АктСписанияЕГАИС.ИдентификаторЕГАИС, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИдентификаторАктаСписания,
	|	АктПостановкиНаБалансЕГАИС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеАкта, Выборка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	АктПостановкиНаБалансЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	АктПостановкиНаБалансЕГАИСТовары.Количество КАК Количество
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК АктПостановкиНаБалансЕГАИСТовары
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИСТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаАкта = СтруктураДанныхСтрокиАктаПостановкиНаБалансВРегистр2();
		ЗаполнитьЗначенияСвойств(СтрокаАкта, Выборка);
		СтрокаАкта.ИдентификаторСтроки = Формат(Выборка.НомерСтроки, "ЧГ=0");
		
		ДанныеАкта.ТаблицаТоваров.Добавить(СтрокаАкта);
	КонецЦикла;
	
	Возврат ДанныеАкта;
	
КонецФункции

// Возвращает данные запроса на отмену проведения акта постановки на баланс.
//
Функция ИнициализироватьДанныеЗапросаНаОтменуПроведенияАктаПостановкиНаБаланс(ДокументСсылка)
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхЗапросаНаОтменуПроведения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Дата"  , ТекущаяДатаСеанса());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.ОрганизацияЕГАИС.Код КАК ИдентификаторФСРАР,
	|	АктПостановкиНаБалансЕГАИС.Номер КАК Номер,
	|	&Дата КАК Дата,
	|	АктПостановкиНаБалансЕГАИС.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеЗапроса, Выборка);
	
	Возврат ДанныеЗапроса;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки акта постановки на баланс в УТМ.
//
Функция СтруктураДанныхАктаПостановкиНаБаланс()
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор"            , Неопределено); // Идентификатор накладной (клиентский, к заполнению необязательный).
	Результат.Вставить("Номер"                    , "");           // Номер документа.
	Результат.Вставить("Дата"                     , '00010101');   // Дата акта постановки на баланс.
	Результат.Вставить("ПричинаПостановкиНаБаланс", Неопределено); // Причина постановки на баланс.
	Результат.Вставить("ИдентификаторАктаСписания", Неопределено); // Идентификатор ЕГАИС акта списания при пересортице.
	Результат.Вставить("Комментарий"              , Неопределено); // Произвольный комментарий.
	Результат.Вставить("ТаблицаТоваров"           , Новый Массив); // Массив строк акта.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки строки акта постановки на баланс в регистр №1.
//
Функция СтруктураДанныхСтрокиАктаПостановкиНаБалансВРегистр1()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторСтроки"    , "");           // Идентификатор позиции внутри акта.
	Результат.Вставить("АлкогольнаяПродукция"   , Неопределено); // Элемент справочника КлассификаторАлкогольнойПродукцииЕГАИС.
	Результат.Вставить("Количество"             , 0);            // Количество единиц приходуемого товара.
	Результат.Вставить("КоличествоПоСправке1"   , 0);            // Количество единиц отгруженной продукции по справке 1.
	Результат.Вставить("НомерТТН"               , "");           // Номер ТТН из справки 1.
	Результат.Вставить("ДатаТТН"                , '00010101');   // Дата ТТН из справки 1.
	Результат.Вставить("ДатаРозлива"            , '00010101');   // Дата розлива продукции из справки 1.
	Результат.Вставить("НомерПодтвержденияЕГАИС", "");           // Номер подтверждения справки 1 в ЕГАИС.
	Результат.Вставить("ДатаПодтвержденияЕГАИС" , '00010101');   // Дата подтверждения справки 1 в ЕГАИС.
	Результат.Вставить("НомерСправки1"          , "");           // Номер справки 1.
	Результат.Вставить("НомерСправки2"          , "");           // Номер справки 2.
	Результат.Вставить("АкцизныеМарки"          , Новый Массив); // Массив штрих-кодов акцизных марок для маркируемой продукции.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки строки акта постановки на баланс в регистр №2.
//
Функция СтруктураДанныхСтрокиАктаПостановкиНаБалансВРегистр2()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторСтроки" , "");           // Идентификатор позиции внутри акта.
	Результат.Вставить("АлкогольнаяПродукция", Неопределено); // Элемент справочника КлассификаторАлкогольнойПродукцииЕГАИС.
	Результат.Вставить("Количество"          , 0);            // Количество единиц приходуемого товара.
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли