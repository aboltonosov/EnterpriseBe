&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	Документы.ЗаказНаПроизводство.ПроверитьСвязанныеОбъектыОбработаныОбработчикамиОбновления(Объект, ЭтотОбъект);
	
	СтатусГрафикТребуетсяРассчитать = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;
	
	Параметры.Свойство("АктивироватьСтрокуПродукции", АктивироватьСтрокуПродукции);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование) И Не Объект.ПроизводствоПоЗаказу);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ИдентификаторАктивнойСтроки = -1;
	
	Если АктивироватьСтрокуПродукции <> 0 Тогда
		
		НайденныеСтроки = Объект.Продукция.НайтиСтроки(Новый Структура("КодСтроки", АктивироватьСтрокуПродукции));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ИдентификаторАктивнойСтроки = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ВидимостьКомандыСозданияКалькуляции Тогда
		
		// Видимость команды "СоздатьПлановуюКалькуляцию" отключается здесь.
		// Если отключать в процедуре "ПриСозданииНаСервере", здесь команда снова становится видимой.
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ФормаСоздатьПлановуюКалькуляцию");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы,
			МассивЭлементов,
			"Видимость",
			ВидимостьКомандыСозданияКалькуляции);
			
	КонецЕсли;
	
	Если ИдентификаторАктивнойСтроки >= 0 Тогда
		
		Элементы.Продукция.ТекущаяСтрока = ИдентификаторАктивнойСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ЗаказНаПроизводство.Форма.ПодборПоРаспоряжениям" Тогда
		
		ОбработкаПодбораТоваровИзРаспоряжения(ВыбранноеЗначение, КэшированныеЗначения);
		ГрафикВыпускаПродукцииТребуетсяРассчитать();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда

		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда
		
		Если ВРег(ВыполняемаяОперация) = ВРег("СпецификацияСтрокиЗаказа")
			ИЛИ ВРег(ВыполняемаяОперация) = ВРег("СокращениеПроизводства") Тогда
			
			ОбработатьРезультатРедактированияНаСервере(ВыбранноеЗначение.АдресВХранилище, КэшированныеЗначения);
			
			Модифицированность = Истина;
			ГрафикВыпускаПродукцииТребуетсяРассчитать();
			
		ИначеЕсли ВРег(ВыполняемаяОперация) = ВРег("ПланированиеПолуфабрикатов") Тогда
			
			ДобавитьПолуфабрикаты(ВыбранноеЗначение.АдресВХранилище, Элементы.Продукция.ТекущаяСтрока);
			ГрафикВыпускаПродукцииТребуетсяРассчитать();
			
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ПродукцияОбработкаВыбораПодбор(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОсновныеСпецификации" Тогда
		
		Если Параметр = Неопределено ИЛИ Параметр.Номенклатура = Неопределено Тогда
			
			ПродукцияСлужебныеРеквизитыПоСпецификацииЗаполнитьНаСервере();
			
		Иначе
			
			ПродукцияСлужебныеРеквизитыПоСпецификацииЗаполнитьНаСервере(Параметр.Номенклатура);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаполнитьОбеспечениеВДокументе_ЗаказНаПроизводство" Тогда
		
		Прочитать();
		
	КонецЕсли; 
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();		
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ГрафикВыпускаПродукцииСохранитьНаСервере(ТекущийОбъект);
	
	ПеренестиПараметрыАктуализацииМаршрутныхЛистовВОбъект(ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыРедактированияМатериалов.ИспользоватьКорректировки
		И Не Обработки.ВводКорректировкиЗаказаМатериалов.СохранитьКорректировкиЗаказаМатериаловПоЗаказуНаПроизводство(ТекущийОбъект, ПараметрыРедактированияМатериалов) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере();
	
	Обработки.ВводКорректировкиЗаказаМатериалов.ОбновитьПараметрыРедактированияМатериалов(ПараметрыРедактированияМатериалов, УникальныйИдентификатор);
	
	УстановитьСостояниеДокумента();
	
	УправлениеВидимостьюДоступностью();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_ЗаказНаПроизводство", Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СкрыватьПолуфабрикаты =  Настройки.Получить("СкрыватьПолуфабрикаты");
	
	Если СкрыватьПолуфабрикаты Тогда
		
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Полуфабрикат", Ложь);
		
	Иначе
		
		Элементы.Продукция.ОтборСтрок = Неопределено;
		
	КонецЕсли;
	
	Элементы.ПродукцияСкрыватьПолуфабрикаты.Пометка = СкрыватьПолуфабрикаты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводствоПоЗаказуПриИзменении(Элемент)
	
	Распоряжение = Неопределено;
	
	Если Объект.ПроизводствоПоЗаказу Тогда
		
		ВыбратьРаспоряжениеИЗаполнить();
		
		Возврат;
		
	Иначе
		
		Если Объект.Продукция.Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru='Строки списка ""Продукция"" перестанут быть связанными с заказом давальца. Продолжить?'");
			
		Иначе
			
			ПроизводствоПоЗаказуПриИзмененииНаСервере();
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПроизводствоПоЗаказуПриИзменении", ЭтотОбъект, Распоряжение);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ГрафикВыпускаПродукцииИнициализирован
		И ТекущаяСтраница = Элементы.СтраницаГрафикПроизводства Тогда
		
		ГрафикВыпускаПродукцииЗаполнитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИндикаторПрименяютсяНедействующиеСпецификацииНажатие(Элемент)
	
	ДанныеДляЗаменыСпецификаций = ДанныеДляЗаменыСпецификаций();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ДанныеДляЗаменыСпецификаций", ДанныеДляЗаменыСпецификаций);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаменаНедействующихСпецификацийЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ЗаменаНедействующихСпецификаций", 
					ПараметрыФормы, 
					ЭтаФорма,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	СброситьСтатусРасчетаГрафика();
	
	ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетПриИзменении(Элемент)
	
	СброситьСтатусРасчетаГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ПроизводствоПоЗаказу Тогда
		
		Отказ = Истина;
		ПодборИзРаспоряжения();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПродукцияСостояниеОбеспеченияПолуфабрикатами" Тогда
		
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
		
		Отказ = Ложь;
		
		ОчиститьСообщения();
		
		ПродукцияПроверитьСообщитьОшибкиСпецификации(ТекущиеДанные.СостояниеСпецификации, ТекущиеДанные.НомерСтроки, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ФормаПланированиеПолуфабрикатов",
			ПараметрыФормыПланированиеПолуфабрикатов(ВыбраннаяСтрока), ЭтаФорма);
		
	ИначеЕсли Поле.Имя = "ПродукцияСостояниеСпецификации" И ПравоДоступаРедактирование Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		ПараметрыФормы = ПараметрыРедактированияСпецификацииСтрокиЗаказа(ТекущиеДанные.КлючСвязи);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТекущиеДанные.ИзмененияЗапрещены);
		
		ОткрытьФорму("Обработка.РедактированиеСпецификацииСтрокиЗаказа.Форма", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли Поле.Имя = "ПродукцияСпецификация" Тогда
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если НЕ ТекущиеДанные.Выполняется Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.Спецификация.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьЗначение(, ТекущиеДанные.Спецификация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ПродукцияСостояниеСпецификации" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИзмененияЗапрещены Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Установлен запрет редактирования.
								|Разрешить редактирование?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродукцияПередНачаломИзмененияЗавершениеИзмененияЗапрещены", ЭтотОбъект, ТекущиеДанные), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли; 
	
	Если НЕ Отказ И (Элемент.ТекущийЭлемент.Имя = "ПродукцияУпаковка"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ПродукцияКоличествоУпаковок"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ПродукцияЕдиницаИзмерения")
		И НЕ ТекущиеДанные.ЕстьСоответствиеСтандартнойСпецификации
		И НЕ ПродолжитьРедактированиеСтроки Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Спецификация изменена. Изменение количества приведет к возврату
									|стандартной спецификации. Продолжить редактирование?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродукцияПередНачаломИзмененияЗавершениеСпецификацияИзменена", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередНачаломИзмененияЗавершениеИзмененияЗапрещены(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Модифицированность = Истина;
		
		ДополнительныеПараметры.ИзмененияЗапрещены = Ложь;
		ГрафикВыпускаПродукцииИзмененияЗапрещеныУстановить(ГрафикВыпускаПродукции, ДополнительныеПараметры.КлючСвязи, Ложь);
		
		Элементы.Продукция.ИзменитьСтроку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередНачаломИзмененияЗавершениеСпецификацияИзменена(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПродолжитьРедактированиеСтроки = Истина;
		
		Элементы.Продукция.ИзменитьСтроку();
		
		ПродолжитьРедактированиеСтроки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	МассивСтрок = Новый Массив;
	МассивКлючей = Новый Массив;
	
	КоличествоСтрокПоКоторымВыполняетсяПроизводство = 0;
	
	Для Каждого ЭлементКоллекции из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Продукция.ДанныеСтроки(ЭлементКоллекции);
		
		Если ДанныеСтроки.Выполняется Тогда
			
			КоличествоСтрокПоКоторымВыполняетсяПроизводство = КоличествоСтрокПоКоторымВыполняетсяПроизводство + 1;
			
		Иначе
			
			МассивСтрок.Добавить(ДанныеСтроки);
			МассивКлючей.Добавить(ДанныеСтроки.КлючСвязи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоСтрокПоКоторымВыполняетсяПроизводство > 0 Тогда
		
		Отказ = Истина;
		
		Если КоличествоСтрокПоКоторымВыполняетсяПроизводство = Элементы.Продукция.ВыделенныеСтроки.Количество() Тогда
			
			Если КоличествоСтрокПоКоторымВыполняетсяПроизводство > 1 Тогда
				
				ТекстПредупреждения = НСтр("ru = 'Все выбранные строки заказа переданы к производству, удаление невозможно.'");
				
			Иначе
				
				ТекстПредупреждения = НСтр("ru = 'Выбранная строка заказа передана к производству, удаление невозможно.'");
				
			КонецЕсли;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
			Возврат;
			
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Некоторые из выбранных строк заказа переданы к производству, их удаление невозможно. 
			|Удалить остальные строки?'"
		);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродукцияПередУдалениемОкончание", 
			ЭтотОбъект, 
			Новый Структура("МассивКлючей, МассивСтрок", МассивКлючей, МассивСтрок)
		);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	ПродукцияУдаляемыеСтрокиМассивКлючей = Новый ФиксированныйМассив(МассивКлючей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалениемОкончание(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Для Каждого Строка Из ДополнительныеПараметры.МассивСтрок Цикл
			Объект.Продукция.Удалить(Строка);
		КонецЦикла;
		
		ПродукцияУдаляемыеСтрокиМассивКлючей = Новый ФиксированныйМассив(ДополнительныеПараметры.МассивКлючей);
		ПродукцияПослеУдаленияНаСервере(ПродукцияУдаляемыеСтрокиМассивКлючей);
		ПродукцияУдаляемыеСтрокиМассивКлючей = Неопределено;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор;
		
		ТекущиеДанные.Выполняется = Ложь;
		ТекущиеДанные.ИзмененияЗапрещены = Ложь;
		
		ТекущиеДанные.СостояниеОбеспеченияПолуфабрикатами = 1;
	
		Если Копирование Тогда
			
			ТекущиеДанные.КодСтроки = 0;
			ТекущиеДанные.ЗаполнитьПоСпецификации = Истина;
			
		Иначе
		
			ТекущиеДанные.НачатьНеРанее = НачалоДня(ТекущаяДата());
			ТекущиеДанные.РазмещениеВыпуска = ПредопределенноеЗначение("Перечисление.СпособыПривязкиОперацийПроизводства.КНачалу");
			
		КонецЕсли;
		
		ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущиеДанные);
		
	КонецЕсли;
	
	СохраненныеЗначения = Новый Структура("Склад, Подразделение", ТекущиеДанные.Склад, ТекущиеДанные.Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СтатусГрафикаПроизводства = СтатусГрафикТребуетсяРассчитать;
	ДанныеСтроки = Элемент.ДанныеСтроки(Элемент.ТекущаяСтрока);
	
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(ДанныеСтроки.КлючСвязи) Тогда
		
		ДанныеСтроки.КлючСвязи = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
	Если ДанныеСтроки.ЗаполнитьПоСпецификации Тогда
		
		ПродукцияЗаполнитьСпецификациюЗаказа(ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	ПродукцияПослеУдаленияНаСервере(ПродукцияУдаляемыеСтрокиМассивКлючей);
	ПродукцияУдаляемыеСтрокиМассивКлючей = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущаяСтрока.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Иначе
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КонецЕсли;
	
	ПродукцияСтрокаЗаполнитьСпецификацию(ТекущаяСтрока);
	
	ТекущаяСтрока.ЗаполнитьПоСпецификации = Истина;
	ТекущаяСтрока.ГрафикРассчитан = Ложь;
	
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПродукцияСтрокаЗаполнитьСпецификацию(ТекущаяСтрока);
	
	ТекущаяСтрока.ЗаполнитьПоСпецификации = Истина;
	ТекущаяСтрока.ГрафикРассчитан = Ложь;
	
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНазначениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("КлючСвязи",        ТекущаяСтрока.КлючСвязи);
	ДанныеЗаполнения.Вставить("Номенклатура",     ТекущаяСтрока.Номенклатура);
	ДанныеЗаполнения.Вставить("Характеристика",   ТекущаяСтрока.Характеристика);
	ДанныеЗаполнения.Вставить("Подразделение",    ТекущаяСтрока.Подразделение);
	ДанныеЗаполнения.Вставить("Склад",            ТекущаяСтрока.Склад);
	ДанныеЗаполнения.Вставить("Назначение",       ТекущаяСтрока.Назначение);
	ДанныеЗаполнения.Вставить("НазначениеЗаказа", Объект.Назначение);
	
	ПродукцияНазначениеПриИзмененииНаСервере(ДанныеЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, "Продукция", СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.ЗаполнитьПоСпецификации = Истина;
	ТекущаяСтрока.ГрафикРассчитан = Ложь;
	
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ТекущаяСтрока.ЗаполнитьПоСпецификации = Истина;
	ТекущаяСтрока.ГрафикРассчитан = Ложь;
	
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкладПриИзменении(Элемент)
	
	// Заполнение склада в выходных изделиях спецификации заказа.
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("КлючСвязиПродукция,КлючСвязиПолуфабрикат,ПроизводитсяВПроцессе,Склад");
	СтруктураОтбора.КлючСвязиПродукция    = ТекущаяСтрока.КлючСвязи;
	СтруктураОтбора.КлючСвязиПолуфабрикат = ПустойКлючСвязи;
	СтруктураОтбора.ПроизводитсяВПроцессе = Ложь;
	
	СтруктураОтбора.Склад = СохраненныеЗначения.Склад;
	
	НайденныеСтроки = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.Склад = ТекущаяСтрока.Склад;
	КонецЦикла;
	
	НайденныеСтроки = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.Склад = ТекущаяСтрока.Склад;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПодразделениеПриИзменении(Элемент)
	
	// Заполнение подразделения в выходных изделиях спецификации заказа.
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("КлючСвязиПродукция,КлючСвязиПолуфабрикат,ПроизводитсяВПроцессе,Подразделение");
	СтруктураОтбора.КлючСвязиПродукция    = ТекущаяСтрока.КлючСвязи;
	СтруктураОтбора.КлючСвязиПолуфабрикат = ПустойКлючСвязи;
	СтруктураОтбора.ПроизводитсяВПроцессе = Ложь;
	
	СтруктураОтбора.Подразделение = СохраненныеЗначения.Подразделение;
	
	НайденныеСтроки = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.Подразделение = ТекущаяСтрока.Подразделение;
	КонецЦикла;
	
	НайденныеСтроки = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.Подразделение = ТекущаяСтрока.Подразделение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияДатаПотребностиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	ТекущаяСтрока.ГрафикРассчитан = Ложь;
	
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНачатьНеРанееПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	ТекущаяСтрока.ГрафикРассчитан = Ложь;
	
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Продукция.ТекущиеДанные;
	ДанныеСтроки.ВыбранаОсновнаяСпецификация = (ДанныеСтроки.Спецификация = ДанныеСтроки.ОсновнаяСпецификация
												И НЕ ДанныеСтроки.ОсновнаяСпецификация.Пустая());
	
	ДанныеСтроки.ЗаполнитьПоСпецификации = Истина;
	ДанныеСтроки.ГрафикРассчитан = Ложь;
	
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияОчистка(Элемент, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.Продукция.ТекущиеДанные;
	ДанныеСтроки.ВыбранаОсновнаяСпецификация = Ложь;
	
	ДанныеСтроки.ЗаполнитьПоСпецификации = Истина;
	ДанныеСтроки.ГрафикРассчитан = Ложь;
	
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикВыпускаПродукции

&НаКлиенте
Процедура ГрафикВыпускаПродукцииНачалоПриИзменении(Элемент)
	
	УстановитьПризнакИзменений();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыпускаПродукцииОкончаниеПриИзменении(Элемент)
	
	УстановитьПризнакИзменений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОчиститьСообщения();
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОчиститьСообщения();
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОчиститьСообщения();
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура ЗаполнитьСпецификациюЗаказаПоСтандартнойСпецификации(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрокПоКоторымВыполняетсяПроизводство = 0;
	
	Для Каждого ЭлементКоллекции из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Продукция.ДанныеСтроки(ЭлементКоллекции);
		
		Если ДанныеСтроки.Выполняется Тогда
			КоличествоСтрокПоКоторымВыполняетсяПроизводство = КоличествоСтрокПоКоторымВыполняетсяПроизводство + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоСтрокПоКоторымВыполняетсяПроизводство > 0 Тогда
		
		Если КоличествоСтрокПоКоторымВыполняетсяПроизводство = Элементы.Продукция.ВыделенныеСтроки.Количество() Тогда
			
			Если КоличествоСтрокПоКоторымВыполняетсяПроизводство > 1 Тогда
				
				ТекстПредупреждения = НСтр("ru = 'Все выбранные строки заказа переданы к производству, заполнение по стандартной спецификации невозможно.'");
				
			Иначе
				
				ТекстПредупреждения = НСтр("ru = 'Выбранная строка заказа передана к производству, заполнение по стандартной спецификации невозможно.'");
				
			КонецЕсли;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
			Возврат;
			
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Некоторые из выбранных строк заказа переданы к производству, заполнение их по стандартной спецификации невозможно. 
			|Заполнить по стандартной спецификации остальные строки?'"
		);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииНачало", 
			ЭтотОбъект
		);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииНачало(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукции();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииПродолжениеИзмененияЗапрещены(РезультатВопроса, МассивСтрок) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Модифицированность = Истина;
		
		Для Каждого ЭлементКоллекции Из МассивСтрок Цикл
		
			ЭлементКоллекции.ИзмененияЗапрещены = Ложь;
			ГрафикВыпускаПродукцииИзмененияЗапрещеныУстановить(ГрафикВыпускаПродукции, ЭлементКоллекции.КлючСвязи, Ложь);
			
		КонецЦикла;
		
		ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукции();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииПродолжениеСпецификацияИзменена(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПродолжитьРедактированиеСтроки = Истина;
		
		ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукции();
		
		ПродолжитьРедактированиеСтроки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивДанных = ДополнительныеПараметры.МассивДанных;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииЗавершение(МассивДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииЗавершение(Знач МассивДанных)
	
	ОчиститьСообщения();
	
	ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивДанных, КэшированныеЗначения);
	
	Объект.СтатусГрафикаПроизводства = СтатусГрафикТребуетсяРассчитать;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукции()
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпецификацияИзменена = Ложь;
	
	МассивСтрокВКоторыхИзмененияЗапрещены = Новый Массив;
	МассивСтрокПоКоторымЗаполнениеРазрешено = Новый Массив;
	
	Для Каждого ЭлементКоллекции из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Продукция.ДанныеСтроки(ЭлементКоллекции);
		
		Если ДанныеСтроки.Выполняется Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ИзмененияЗапрещены Тогда
			МассивСтрокВКоторыхИзмененияЗапрещены.Добавить(ДанныеСтроки);
		Иначе
			МассивСтрокПоКоторымЗаполнениеРазрешено.Добавить(ДанныеСтроки);
		КонецЕсли;
			
		СпецификацияИзменена = СпецификацияИзменена ИЛИ НЕ ДанныеСтроки.ЕстьСоответствиеСтандартнойСпецификации;
		
	КонецЦикла;
	
	Если МассивСтрокВКоторыхИзмененияЗапрещены.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Установлен запрет редактирования.
			|Разрешить редактирование?'"
		);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииПродолжениеИзмененияЗапрещены", 
			ЭтотОбъект, 
			МассивСтрокВКоторыхИзмененияЗапрещены
		);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	Если СпецификацияИзменена
		И НЕ ПродолжитьРедактированиеСтроки Тогда
		
		ТекстВопроса = НСтр("ru = 'Спецификация изменена. Заполнение по стандартной спецификации приведет к потере изменений. 
			|Продолжить?'"
		);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииПродолжениеСпецификацияИзменена", 
			ЭтотОбъект
		);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("ИзмененияЗапрещены");
	СписокРеквизитов.Добавить("Номенклатура",        НСтр("ru = 'Номенклатура'"));
	СписокРеквизитов.Добавить("Характеристика",      НСтр("ru = 'Характеристика'"));
	СписокРеквизитов.Добавить("Спецификация",        НСтр("ru = 'Спецификация'"));
	СписокРеквизитов.Добавить("КоличествоУпаковок",  НСтр("ru = 'Количество'"));
	СписокРеквизитов.Добавить("Подразделение",       НСтр("ru = 'Подразделение'"));
	СписокРеквизитов.Добавить("Склад",               НСтр("ru = 'Склад'"));
	
	ЕстьСтрокиСОшибками = Ложь;
	МассивДанных = Новый Массив;
	
	РеквизитыЗаказа = РеквизитыЗаказа();
	
	Для каждого ДанныеСтроки из МассивСтрокПоКоторымЗаполнениеРазрешено Цикл
		
		ЕстьОшибкиЗаполнения = Ложь;
		ПроверитьЗаполнениеСтрокиПродукции(Объект.Продукция, СписокРеквизитов, ДанныеСтроки.ПолучитьИдентификатор(), ЕстьОшибкиЗаполнения, Истина);
		
		Если ЕстьОшибкиЗаполнения Тогда
			ЕстьСтрокиСОшибками = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивДанных.Добавить(ДанныеПоНоменклатуре(ДанныеСтроки, РеквизитыЗаказа));
		
	КонецЦикла;
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьСтрокиСОшибками Тогда
		
		ТекстВопроса = НСтр("ru = 'Обнаружены ошибки заполнения. Продолжить заполнение спецификации для оставшихся строк?'");
		ЗаголовокДействия = НСтр("ru = 'Заполнение по стандартной спецификации'");
		РезультатВопроса = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииПродолжение", ЭтотОбъект, Новый Структура("МассивДанных", МассивДанных)), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, ЗаголовокДействия);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСпецификациюЗаказаПоСпецификацииДляВыбраннойПродукцииЗавершение(МассивДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("Номенклатура",        НСтр("ru = 'Номенклатура'"));
	СписокРеквизитов.Добавить("Характеристика",      НСтр("ru = 'Характеристика'"));
	СписокРеквизитов.Добавить("КоличествоУпаковок",  НСтр("ru = 'Количество'"));
	СписокРеквизитов.Добавить("Спецификация",        НСтр("ru = 'Спецификация'"));
	СписокРеквизитов.Добавить("НачатьНеРанее",       НСтр("ru = 'Начать не ранее'"));
	СписокРеквизитов.Добавить("ДатаПотребности",     НСтр("ru = 'Дата потребности'"));
	СписокРеквизитов.Добавить("Подразделение",       НСтр("ru = 'Подразделение'"));
	СписокРеквизитов.Добавить("Склад",               НСтр("ru = 'Склад'"));
	
	ПроверитьЗаполнениеСтрокиПродукции(Объект.Продукция, СписокРеквизитов, ТекущиеДанные.ПолучитьИдентификатор(), Отказ, Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПродукцияПроверитьСообщитьОшибкиСпецификации(ТекущиеДанные.СостояниеСпецификации, ТекущиеДанные.НомерСтроки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПродукцияИзмененияЗапрещеныУстановить(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьСпецификациюОсновной(Команда)
	
	КоллекцияДанных = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущиеДанные = Неопределено 
			ИЛИ ТекущиеДанные.Номенклатура.Пустая() 
			ИЛИ ТекущиеДанные.Спецификация.Пустая() Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеСтроки = Новый Структура("Номенклатура,Характеристика,Спецификация,НачатьНеРанее,НомерСтроки");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
		
		КоллекцияДанных.Добавить(ДанныеСтроки);
		
	КонецЦикла; 
	
	// В зависимости от количества выбранных строк вызовем нужную обработку
	Если КоллекцияДанных.Количество() = 1 Тогда
		
		// Выбрана одна строка, поэтому лучше вызывать стандартную обработку
		УправлениеДаннымиОбИзделияхКлиент.НазначитьОсновнойСпецификацией(Объект.Подразделение,
																		КоллекцияДанных[0].Номенклатура, 
																		КоллекцияДанных[0].Характеристика,
																		КоллекцияДанных[0].Спецификация);
		
	ИначеЕсли КоллекцияДанных.Количество() <> 0 Тогда
		
		// Выбрано несколько строк, поэтому вызовем специальную обработку
		Результат = НазначитьСпецификациюОсновнойНаСервере(КоллекцияДанных);
		УправлениеДаннымиОбИзделияхКлиент.ОповеститьОЗаписиОсновнойСпецификации();
		
		Если НЕ Результат Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не все спецификации назначены основными.'"),,
				НСтр("ru = 'Назначить стандартную спецификацию основной'")); 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаПроизводство.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
		
	Иначе
		
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'заказ на производство'"));
		
	КонецЕсли;
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         	 Истина);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    	 Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",          	 Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 	 ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                     	 Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                 	 Объект.Ссылка);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                       Новый ФиксированныйМассив(МассивТиповНоменклатуры));
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам",                          Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьПолуфабрикаты(Команда)
	
	СкрыватьПолуфабрикаты = Не СкрыватьПолуфабрикаты;
	
	Если СкрыватьПолуфабрикаты Тогда
		
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Полуфабрикат", Ложь);
		
	Иначе
		
		Элементы.Продукция.ОтборСтрок = Неопределено;
		
	КонецЕсли;
	
	Элементы.ПродукцияСкрыватьПолуфабрикаты.Пометка = СкрыватьПолуфабрикаты;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьПолуфабрикаты(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗапланироватьПолуфабрикатыНаСервере() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Планирование полуфабрикатов не требуется.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СократитьПроизводство(Команда)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана продукция.'"));
		Возврат;
		
	ИначеЕсли НЕ ТекущиеДанные.ГрафикРассчитан Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'График производства не рассчитан.'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыСокращенияПроизводства = ПараметрыСокращенияПроизводства(ТекущиеДанные.КлючСвязи, ТекущиеДанные.КодСтроки);
	
	ОткрытьФорму("Обработка.СокращениеПроизводства.Форма.Форма", ПараметрыСокращенияПроизводства, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСокращенияПроизводства(КлючСвязи, КодСтроки)
	
	ПараметрыСокращенияПроизводства = Новый Структура;
	
	ПараметрыСокращенияПроизводства.Вставить("ЗаказНаПроизводство", Объект.Ссылка);
	ПараметрыСокращенияПроизводства.Вставить("КодСтрокиПродукция", КодСтроки);
	ПараметрыСокращенияПроизводства.Вставить("АдресСпецификация", ДанныеСпецификацииВХранилище(КлючСвязи));
	ПараметрыСокращенияПроизводства.Вставить("ПараметрыРедактированияМатериалов", ПараметрыРедактированияМатериалов);
		
	Возврат ПараметрыСокращенияПроизводства;
	
КонецФункции

&НаКлиенте
Процедура РазрешитьРедактирование(Команда)
	
	ПродукцияИзмененияЗапрещеныУстановить(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСоСпецификацией(Команда)

	ДанныеЗаказа = Новый Соответствие;
	
	Для каждого ЭлКоллекции из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ЭлКоллекции);
		
		Если НЕ ТекущиеДанные.Спецификация.Пустая() Тогда
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("КлючСвязиПродукция", ТекущиеДанные.КлючСвязи);
			СтруктураДанных.Вставить("НомерСтроки",        ТекущиеДанные.НомерСтроки);
			СтруктураДанных.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
			СтруктураДанных.Вставить("Характеристика",     ТекущиеДанные.Характеристика);
			СтруктураДанных.Вставить("Спецификация",       ТекущиеДанные.Спецификация);
			СтруктураДанных.Вставить("Количество",         ТекущиеДанные.КоличествоУпаковок);
			СтруктураДанных.Вставить("Упаковка",           ТекущиеДанные.Упаковка);
			ДанныеЗаказа.Вставить(СтруктураДанных.НомерСтроки, СтруктураДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеЗаказа.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеЗаказа",       ДанныеЗаказа);
	ПараметрыФормы.Вставить("Этапы",              Объект.Этапы);
	ПараметрыФормы.Вставить("МатериалыИУслуги",   Объект.МатериалыИУслуги);
	ПараметрыФормы.Вставить("ВыходныеИзделия",    Объект.ВыходныеИзделия);
	ПараметрыФормы.Вставить("ВозвратныеОтходы",   Объект.ВозвратныеОтходы);
	ПараметрыФормы.Вставить("ВидыРабочихЦентров", Объект.ВидыРабочихЦентров);
	
	ОткрытьФорму("Обработка.СравнениеСпецификаций.Форма.СравнениеЗаказаСоСпецификациями", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Продукция.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Продукция.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Продукция.ТекущаяСтрока) Тогда
		
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(
			Элементы.Продукция.ВыделенныеСтроки.Количество());
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтрокуЗаказа(Команда)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("Номенклатура",   НСтр("ru = 'Номенклатура'"));
	СписокРеквизитов.Добавить("Характеристика", НСтр("ru = 'Характеристика'"));
	
	ПроверитьЗаполнениеСтрокиПродукции(Объект.Продукция, СписокРеквизитов, ТекущиеДанные.ПолучитьИдентификатор(), Отказ, Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыФормы = ПараметрыРедактированияСпецификацииСтрокиЗаказа(ТекущиеДанные.КлючСвязи);
	
	ОткрытьФорму("Обработка.РедактированиеСпецификацииСтрокиЗаказа.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлановуюКалькуляцию(Команда)
	
	МассивОбъектов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.Продукция.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Элемент = Новый Структура("ЗаказНаПроизводство, КодСтрокиЗаказаНаПроизводство", Объект.Ссылка, ДанныеСтроки.КодСтроки);
		
		МассивОбъектов.Добавить(Элемент);
		
	КонецЦикла;
	
	ЗначенияЗаполнения = Новый Структура("МассивОбъектов, ТипОснования", МассивОбъектов, Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ПлановаяКалькуляция.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьСпецификациюНаОснованииСпецификацииЗаказа(Команда)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОчиститьСообщения();

	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("Номенклатура",        НСтр("ru = 'Номенклатура'"));
	СписокРеквизитов.Добавить("Характеристика",      НСтр("ru = 'Характеристика'"));
	СписокРеквизитов.Добавить("Спецификация",        НСтр("ru = 'Спецификация'"));
	
	ПроверитьЗаполнениеСтрокиПродукции(Объект.Продукция, СписокРеквизитов, ТекущиеДанные.ПолучитьИдентификатор(), Отказ, Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСпецификациюНаОснованииСпецификацииЗаказаЗавершение", ЭтотОбъект);
	
	УправлениеДаннымиОбИзделияхКлиент.СоздатьСпецификациюНаОснованииСпецификацииЗаказа(ТекущиеДанные, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКВыпускуПродукцииОтЗаказов(Команда)
	
	СписокЗаказов = ВыбранныеЗаказы();
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЗаказов", СписокЗаказов);
	ОткрытьФорму("Документ.ВыпускПродукции.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКВыработкеСотрудниковОтЗаказов(Команда)
	
	СписокЗаказов = ВыбранныеЗаказы();
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЗаказов", СписокЗаказов);
	ОткрытьФорму("Документ.ВыработкаСотрудников.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКЗаказамПереработчикамОтЗаказов(Команда)

	СписокЗаказов = ВыбранныеЗаказы();
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЗаказов", СписокЗаказов);
	ОткрытьФорму("Документ.ЗаказПереработчику.Форма.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКМаршрутнымЛистамОтЗаказов(Команда)
	
	СписокЗаказов = ВыбранныеЗаказы();
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЗаказов", СписокЗаказов);
	ПараметрыФормы.Вставить("НеЗагружатьОтборы", Истина);
	ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКПередачеМатериаловОтЗаказов(Команда)
	
	СписокЗаказов = ВыбранныеЗаказы();
	Если СписокЗаказов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОтборПоСпискуЗаказов", СписокЗаказов);
	ОткрытьФорму("Документ.ПередачаМатериаловВПроизводство.ФормаСписка", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииДатыСервер()
	
	АктуализироватьЗаказПодДеятельность();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		АктуализироватьЗаказПодДеятельность();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗаказПодДеятельность(Заполнить = Истина)
	
	Если Заполнить Тогда 
		Объект.ЗаказПодДеятельность = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Объект.Организация,, Объект.Дата);
	КонецЕсли;
	
	УчетНДСУТ.ЗаполнитьСписокВыбораДеятельностиНДСПотребления(
		Элементы.ЗаказПодДеятельность,
		Объект.Организация,
		Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииНаСервере()
	
	СброситьСтатусРасчетаГрафикаНаСервере();
	
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	ЗаполнитьНазначениеПоУмолчаниюДляЗаказаНаПроизводствоПоЗаказуДавальца();
	ЗаполнитьНазначениеВТабличныхЧастях();
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеФормы

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьПроизводствоИзДавальческогоСырья = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья");
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	ПараметрыРедактированияМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.ПараметрыРедактированияМатериалов(УникальныйИдентификатор);
	
	ЗаполнитьСкладПоУмолчанию();
	СлужебныеРеквизитыЗаполнитьНаСервере();
	ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере();
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	ЗаполнитьНазначениеПоУмолчаниюДляЗаказаНаПроизводствоПоЗаказуДавальца();
	
	СписокОшибок.Очистить();
	ТребуетсяВыполнитьПолнуюПроверку = Истина;
	
	ВидимостьСпецификаций = ПравоДоступа("Чтение", Метаданные.Справочники.РесурсныеСпецификации);
	ПравоДобавленияСпецификаций = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.РесурсныеСпецификации);
	
	ВидимостьНазначитьСпецификациюОсновной = ВидимостьСпецификаций И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОсновныеСпецификации);
	
	ВидимостьСравнитьСоСпецификацией = ВидимостьСпецификаций И ПравоДоступа("Использование", Метаданные.Обработки.СравнениеСпецификаций);
	
	ВидимостьКомандыСозданияКалькуляции = ПравоДоступа("Изменение", Метаданные.Документы.ПлановаяКалькуляция);
	
	ПравоДоступаРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаПроизводство)
									И ПравоДоступа("Использование", Метаданные.Обработки.РедактированиеСпецификацииСтрокиЗаказа);
									
	ПравоДоступаКорректировкаЗаказаМатериалов = ПравоДоступа("Изменение", Метаданные.РегистрыНакопления.ЗаказыМатериаловВПроизводство)
													И ПравоДоступа("Изменение", Метаданные.РегистрыНакопления.ЗаказыМатериаловСУчетомКорректировок);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПродукцияНазначитьСпецификациюОсновной");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		ВидимостьНазначитьСпецификациюОсновной);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ПродукцияСравнитьСоСпецификацией");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		ВидимостьСравнитьСоСпецификацией);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ПродукцияСоздатьСпецификациюНаОснованииЗаказа");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		ПравоДобавленияСпецификаций);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ПродукцияСостояниеОбеспеченияПолуфабрикатами");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ПравоДоступаРедактирование);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ПродукцияИзменитьСтрокуЗаказа");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		ПравоДоступаРедактирование);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ПродукцияСократитьПроизводство");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		ПравоДоступаРедактирование);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПродукцияКорректировкаЗаказаМатериалов");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюКорректировкаЗаказаМатериалов");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ПравоДоступаКорректировкаЗаказаМатериалов);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ГруппаЗаказ");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ИспользоватьПроизводствоИзДавальческогоСырья);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ГрафикВыпускаПродукцииГрафикПотребленияВыпускаХарактеристика");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ХарактеристикиИспользуются);
	
	УправлениеВидимостьюДоступностью();
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
	АктуализироватьЗаказПодДеятельность(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ПродукцияЕдиницаИзмерения", 
                                                                   "Объект.Продукция.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ПродукцияХарактеристика",
																		     "Объект.Продукция.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииИзмененияЗапрещены.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииПодразделение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииЭтап.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииЭтапВладелец.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииОписание.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикВыпускаПродукции.ТипЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииНоменклатураХарактеристикаИзмененияЗапрещены.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииСклад.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииСпецификация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикВыпускаПродукции.ТипЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ГрафикВыпускаПродукцииНоменклатураЕдиницаИзмерения", 
                                                                   "ГрафикВыпускаПродукции.Упаковка");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикВыпускаПродукции.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукции.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикВыпускаПродукции.ЕстьОшибка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукции.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикВыпускаПродукции.СделаныИзменения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииНачало.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикВыпускаПродукцииОкончание.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикВыпускаПродукции.ТипЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГрафикПотребленияВыпускаНоменклатураЕдиницаИзмерения1.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикПотребленияВыпуска.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСостояниеОбеспеченияПолуфабрикатами.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.СостояниеОбеспеченияПолуфабрикатами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Выполнено'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСостояниеОбеспеченияПолуфабрикатами.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.СостояниеОбеспеченияПолуфабрикатами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не требуется'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСостояниеОбеспеченияПолуфабрикатами.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.СостояниеОбеспеченияПолуфабрикатами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Запланировать'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Продукция.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Полуфабрикат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Продукция.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаПроизводство.Создан;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Выполняется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеСтроки);

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма,
																		  "ПродукцияНазначение",
																		  "Объект.Продукция.ТипНоменклатуры");
	
	// оформление склада для товаров
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// оформление подразделения для работ
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Подразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для работ>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// для строк переданных к выполнению запрещено изменение ключевых колонок
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияУпаковка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСпецификация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.Выполняется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Для производства по заказу давальца назначение скрыто.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеТаблицыПродукция

&НаКлиенте
Процедура ВыбратьРаспоряжениеИЗаполнить()
	
	ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыОтбора.Вставить("УправлениеПроизводством2_2", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбратьЗаказИЗаполнить", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказДавальца.Форма.ФормаВыбораЗаказа",ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбратьЗаказИЗаполнить(Заказ, ДополнительныеПараметры) Экспорт

	Если Заказ = Неопределено Тогда
		Объект.ПроизводствоПоЗаказу = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Объект.Продукция.Количество() = 0 Тогда
		ВопросПроизводствоПоЗаказуПриИзменении(КодВозвратаДиалога.Да, Заказ);
		Возврат;
	Иначе
		ТекстВопроса = НСтр("ru='Список ""Продукция"" будет перезаполнен по заказу давальца. Продолжить?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПроизводствоПоЗаказуПриИзменении", ЭтотОбъект, Заказ);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Процедура ПроизводствоПоЗаказуПриИзмененииНаСервере()
	
	Перем КэшированныеЗначения;
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	Если Не Объект.ПроизводствоПоЗаказу Тогда
		
		Объект.Заказ = Неопределено;
		НазначениеПоУмолчанию = НаправленияДеятельностиСервер.ТолкающееНазначение(Объект.НаправлениеДеятельности);
		НаправленияДеятельностиКэшированныеЗначения.НазначениеПоУмолчанию = НазначениеПоУмолчанию;
		ЗаполнитьНазначениеВТабличныхЧастях();
		
	Иначе
		
		ЗаполнитьНазначениеПоУмолчаниюДляЗаказаНаПроизводствоПоЗаказуДавальца();
		
		Объект.Продукция.Очистить();
		Объект.Этапы.Очистить();
		Объект.ВыходныеИзделия.Очистить();
		Объект.ВозвратныеОтходы.Очистить();
		Объект.МатериалыИУслуги.Очистить();
		Объект.Трудозатраты.Очистить();
		Объект.ВидыРабочихЦентров.Очистить();
		Объект.АльтернативныеВидыРабочихЦентров.Очистить();
		Объект.ПродукцияГрафик.Очистить();
		Объект.ЭтапыГрафик.Очистить();
		Объект.ВыходныеИзделияГрафик.Очистить();
		Объект.ВозвратныеОтходыГрафик.Очистить();
		Объект.МатериалыИУслугиГрафик.Очистить();
		Объект.ТрудозатратыГрафик.Очистить();
		Объект.ЗанятостьВидовРабочихЦентров.Очистить();
		Объект.ДополнительныеРеквизиты.Очистить();
		Объект.ЭтапыВосстановленияБрака.Очистить();
		
		ГрафикВыпускаПродукцииЭлементы = ГрафикВыпускаПродукции.ПолучитьЭлементы();
		Пока ГрафикВыпускаПродукцииЭлементы.Количество() > 0 Цикл
			ГрафикВыпускаПродукцииЭлементы.Удалить(0);
		КонецЦикла;
		
		Документы.ЗаказНаПроизводство.ЗаполнитьПоОстаткамПродукцииКОбеспечениюДавальцу(Объект.Заказ, Объект.Продукция, Объект.Ссылка);
		
		//Заполнение спецификаций
		МассивДанныхПоНоменклатуре = Новый Массив;
		МассивНовыхСтрок = Новый Массив;
		
		РеквизитыЗаказа = РеквизитыЗаказаНаСервере();
		
		Для каждого Строка Из Объект.Продукция Цикл
			
			Строка.ЕстьСоответствиеСтандартнойСпецификации = Истина;
			Строка.КлючСвязи = Новый УникальныйИдентификатор;
			
			МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре(Строка, РеквизитыЗаказа));
			МассивНовыхСтрок.Добавить(Строка);
			
		КонецЦикла;
		
		// Заполним спецификации
		УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(
			МассивНовыхСтрок,
			МассивДанныхПоНоменклатуре,
			Истина);
		
		// Заполним материалы по спецификации
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивДанныхПоНоменклатуре, КэшированныеЗначения);
		
	КонецЕсли;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере();
	ГрафикВыпускаПродукцииЗаполнитьНаСервере();
	УправлениеВидимостьюДоступностью();
	
	Элементы.ПродукцияУпаковкаЕдиницаИзмерения.ТолькоПросмотр = Объект.ПроизводствоПоЗаказу;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеВТабличныхЧастях()
	
	Перем КэшированныеЗначения;
	СтруктураДействий = Новый Структура();
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	НазначениеЗаказа = Объект.Назначение;
	НаборДанныхПоПродукции = Новый Соответствие;
	Для Каждого ТекущаяСтрока Из Объект.Продукция Цикл
		
		// сбрасываем назначение
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		// подготавливаем праметры для заполнения назначения
		ДанныеПоПродукции = ПланированиеПроизводстваКлиентСервер.СтруктураДанныхПродукции();
		
		ДанныеПоПродукции.КлючСвязи = ТекущаяСтрока.КлючСвязи;
		
		ДанныеПоПродукции.Номенклатура   = ТекущаяСтрока.Номенклатура;
		ДанныеПоПродукции.Характеристика = ТекущаяСтрока.Характеристика;
		ДанныеПоПродукции.Подразделение  = ТекущаяСтрока.Подразделение;
		ДанныеПоПродукции.Склад          = ТекущаяСтрока.Склад;
		
		ДанныеПоПродукции.Назначение       = ТекущаяСтрока.Назначение;
		ДанныеПоПродукции.НазначениеЗаказа = НазначениеЗаказа;
		
		ДанныеПоПродукции.ТипНоменклатуры = ТекущаяСтрока.ТипНоменклатуры;
		
		Если ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ДанныеПоПродукции.ЭтоРабота = Истина;
		Иначе
			ДанныеПоПродукции.ЭтоРабота = Ложь;
		КонецЕсли;
		
		ДанныеПоПродукции.ЕстьНазначение = ЗначениеЗаполнено(ТекущаяСтрока.Назначение);
		ДанныеПоПродукции.ПоЗаказуДавальца = Объект.ПроизводствоПоЗаказу;
		
		НаборДанныхПоПродукции.Вставить(ТекущаяСтрока.КлючСвязи, ДанныеПоПродукции);
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Объект.ВыходныеИзделия Цикл
		
		ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделия(
			ТекущаяСтрока, НаборДанныхПоПродукции.Получить(ТекущаяСтрока.КлючСвязиПродукция), Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается);
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Объект.ВозвратныеОтходы Цикл
		
		ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделия(
			ТекущаяСтрока, НаборДанныхПоПродукции.Получить(ТекущаяСтрока.КлючСвязиПродукция), Перечисления.ТипыСтоимостиВыходныхИзделий.Фиксированная);
		
		КонецЦикла;
		
	Для Каждого ТекущаяСтрока Из Объект.МатериалыИУслуги Цикл
		
		ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(
			ТекущаяСтрока, НаборДанныхПоПродукции.Получить(ТекущаяСтрока.КлючСвязиПродукция));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПроизводствоПоЗаказуПриИзменении(ОтветНаВопрос, Заказ) Экспорт

	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Объект.ПроизводствоПоЗаказу = Не Объект.ПроизводствоПоЗаказу;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Объект.Заказ = Заказ;
	КонецЕсли;
	
	ПроизводствоПоЗаказуПриИзмененииНаСервере();

КонецПроцедуры
	
&НаСервере
Процедура ДобавитьПолуфабрикаты(АдресВХранилище, ИдентификаторТекущейСтроки)
	
	МассивДанныхПоНоменклатуре = Новый Массив;
	МассивНовыхСтрок = Новый Массив;
	
	ИндексТекущейСтроки = Объект.Продукция.Индекс(Объект.Продукция.НайтиПоИдентификатору(ИдентификаторТекущейСтроки));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		Полуфабрикаты = ПолучитьИзВременногоХранилища(АдресВХранилище).Полуфабрикаты;
	Иначе
		Полуфабрикаты = АдресВХранилище;
	КонецЕсли;
	Если Полуфабрикаты.Колонки.Найти("КлючСвязи") <> Неопределено Тогда
		СписокИсключений = "КлючСвязи,КоличествоУпаковок,Количество";
	Иначе
		СписокИсключений = "КоличествоУпаковок,Количество";
	КонецЕсли;
	
	РеквизитыЗаказа = РеквизитыЗаказаНаСервере();
	
	Для каждого Полуфабрикат из Полуфабрикаты Цикл
		
		СтруктураПоиска = Новый Структура("КлючСвязиМатериалыИУслуги", Полуфабрикат.КлючСвязиМатериалыИУслуги);
		НайденныеПолуфабрикаты = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеПолуфабрикаты.Количество() = 0 Тогда
			СтрокаПолуфабрикат = Объект.Продукция.Вставить(ИндексТекущейСтроки + 1);
		ИначеЕсли НайденныеПолуфабрикаты.Количество() = 1 Тогда
			СтрокаПолуфабрикат = НайденныеПолуфабрикаты[0];
		Иначе
			ВызватьИсключение НСтр("ru = 'Неверная информация в табличной части ""Продукция""!'");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаПолуфабрикат, Полуфабрикат,, СписокИсключений);
		
		Если НЕ ЗначениеЗаполнено(СтрокаПолуфабрикат.КлючСвязи) Тогда
			
			СтрокаПолуфабрикат.КлючСвязи = Новый УникальныйИдентификатор;
			
		КонецЕсли;
		
		СтрокаПолуфабрикат.КоличествоУпаковок = СтрокаПолуфабрикат.КоличествоУпаковок + Полуфабрикат.Запланировать;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтрокаПолуфабрикат, "Продукция", СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаПолуфабрикат, СтруктураДействий, КэшированныеЗначения);
		
		Если НЕ ЗначениеЗаполнено(СтрокаПолуфабрикат.НачатьНеРанее) Тогда
			
			СтрокаПолуфабрикат.НачатьНеРанее = НачалоДня(ТекущаяДатаСеанса());
			
		КонецЕсли;
		
		МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре(СтрокаПолуфабрикат, РеквизитыЗаказа));
		МассивНовыхСтрок.Добавить(СтрокаПолуфабрикат);
		
		// Отметим, что запланированные полуфабрикаты являются обособленными.
		Если ЗначениеЗаполнено(Полуфабрикат.Назначение) Тогда
			
			НайденныеСтроки = Объект.МатериалыИУслуги.НайтиСтроки(Новый Структура("КлючСвязи", Полуфабрикат.КлючСвязиМатериалыИУслуги));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
				НайденныеСтроки[0].Назначение         = Полуфабрикат.Назначение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивНовыхСтрок, МассивДанныхПоНоменклатуре);

	ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивДанныхПоНоменклатуре, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);
	
	ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыПланированиеПолуфабрикатов(ВыбраннаяСтрока)
	
	ПараметрыФормы = Новый Структура;
	
	ВыбраннаяСтрокаДанные = Объект.Продукция.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// Полуфабрикаты, которые необходимо обеспечить текущим заказом
	
	ПараметрыОтбора = Новый Структура(
		"КлючСвязиПродукция,
		|ПроизводитсяВПроцессе,
		|ЗаказатьНаСклад,
		|Запланировать");
		
	ПараметрыОтбора.КлючСвязиПродукция    = ВыбраннаяСтрокаДанные.КлючСвязи;
	ПараметрыОтбора.ПроизводитсяВПроцессе = Ложь;
	ПараметрыОтбора.ЗаказатьНаСклад       = Истина;
	ПараметрыОтбора.Запланировать         = Истина;
	
	ПолуфабрикатыКОбеспечению = Объект.МатериалыИУслуги.Выгрузить(ПараметрыОтбора);
	
	// Полуфабрикаты, которые уже обеспечены текущим заказом
	ОбеспеченныеПолуфабрикаты = Объект.Продукция.Выгрузить(
		Новый Структура("КлючСвязиПродукция", ВыбраннаяСтрокаДанные.КлючСвязи));
		
	ПараметрыФормы.Вставить("АдресПолуфабрикатыКОбеспечению",
		ПоместитьВоВременноеХранилище(ПолуфабрикатыКОбеспечению, УникальныйИдентификатор));
	ПараметрыФормы.Вставить("АдресОбеспеченныеПолуфабрикаты",
		ПоместитьВоВременноеХранилище(ОбеспеченныеПолуфабрикаты, УникальныйИдентификатор));
	ПараметрыФормы.Вставить("Заказ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ДатаПотребности", ВыбраннаяСтрокаДанные.ДатаПотребности);
	ПараметрыФормы.Вставить("НачатьНеРанее", ВыбраннаяСтрокаДанные.НачатьНеРанее);
	ПараметрыФормы.Вставить("РазмещениеВыпуска", ВыбраннаяСтрокаДанные.РазмещениеВыпуска);
	ПараметрыФормы.Вставить("Назначение", ВыбраннаяСтрокаДанные.Назначение);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ПродукцияПослеУдаленияНаСервере(МассивКлючей)

	Для каждого Ключ Из МассивКлючей Цикл
		
		ПродукцияПослеУдаленияПоКлючуПродукцииНаСервере(Ключ);
		
	КонецЦикла;
	
	ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере(МассивКлючей = Неопределено, ОбновитьСостояниеЗаланировать = Ложь)
	
	Если ОбновитьСостояниеЗаланировать Тогда
		
		МатериалыИУслугиОбновитьСостояниеЗапланировать();
		
	КонецЕсли;
	
	КартинкаСостояниеОбеспеченияПолуфабрикатами = Новый Картинка;
	
	Для каждого ПродукцияСтрока из Объект.Продукция Цикл
		
		Если МассивКлючей = Неопределено ИЛИ МассивКлючей.Найти(ПродукцияСтрока.КлючСвязи) <> Неопределено Тогда
		
			ПродукцияСтрокаСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере(ПродукцияСтрока);
			
		КонецЕсли;
		
		Если ПродукцияСтрока.СостояниеОбеспеченияПолуфабрикатами = 2 Тогда
			
			КартинкаСостояниеОбеспеченияПолуфабрикатами = БиблиотекаКартинок.Внимание;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ПродукцияСостояниеОбеспеченияПолуфабрикатами.КартинкаШапки = КартинкаСостояниеОбеспеченияПолуфабрикатами;
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияСтрокаСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере(ПродукцияСтрока)
	
	// Полуфабрикаты, которые можно обеспечить текущим заказом
	
	ПараметрыОтбора = Новый Структура(
		"КлючСвязиПродукция,
		|ПроизводитсяВПроцессе,
		|ЗаказатьНаСклад,
		|Запланировать");
		
	ПараметрыОтбора.КлючСвязиПродукция    = ПродукцияСтрока.КлючСвязи;
	ПараметрыОтбора.ПроизводитсяВПроцессе = Ложь;
	ПараметрыОтбора.ЗаказатьНаСклад       = Истина;
	ПараметрыОтбора.Запланировать         = Истина;
	
	ПолуфабрикатыКОбеспечению = Объект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора);
	
	// 0 - Выполнено
	// 1 - Не требуется
	// 2 - Запланировать
	
	Если ПолуфабрикатыКОбеспечению.Количество() = 0 Тогда // Полуфабрикатов нет, не требуется
		
		СостояниеОбеспеченияПолуфабрикатами = 1;
		
	Иначе // Полуфабрикаты есть
		
		СостояниеОбеспеченияПолуфабрикатами = 2; // Запланировать
		
		Для каждого ПолуфабрикатКОбеспечению из ПолуфабрикатыКОбеспечению Цикл
			
			ЗапланированноеОбеспечениеПолуфабрикатом = Объект.Продукция.НайтиСтроки(Новый Структура("КлючСвязиМатериалыИУслуги", ПолуфабрикатКОбеспечению.КлючСвязи));
			
			Если ЗапланированноеОбеспечениеПолуфабрикатом.Количество() > 0 Тогда // Выполнено
				
				СостояниеОбеспеченияПолуфабрикатами = 0;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПродукцияСтрока.СостояниеОбеспеченияПолуфабрикатами = СостояниеОбеспеченияПолуфабрикатами;
	ПродукцияСтрока.Полуфабрикат = ЗначениеЗаполнено(ПродукцияСтрока.КлючСвязиМатериалыИУслуги);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбработкаВыбораПодбор(ВыбранноеЗначение)
	
	ПродукцияОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	МассивДанныхПоНоменклатуре = Новый Массив;
	
	СтруктураДействий = Новый Структура;
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	РеквизитыЗаказа = РеквизитыЗаказаНаСервере();
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивНовыхСтрок = Новый Массив;
	Для каждого СтрокаТовара из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |КоличествоУпаковок,
															  |Склад");
		
		ТекущаяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		ТекущаяСтрока.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, "Продукция", СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ТекущаяСтрока.НачатьНеРанее = НачалоДня(ТекущаяДатаСеанса());
		
		МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре(ТекущаяСтрока, РеквизитыЗаказа));
		МассивНовыхСтрок.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивНовыхСтрок, МассивДанныхПоНоменклатуре);	
	
	ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивДанныхПоНоменклатуре, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Функция ПродукцияСтрокаЗаполнитьСпецификацию(ДанныеСтроки)
	
	Если ДанныеСтроки.Номенклатура.Пустая() Тогда
		
		ДанныеСтроки.Спецификация                = Неопределено;
		ДанныеСтроки.ОсновнаяСпецификация        = Неопределено;
		ДанныеСтроки.ВыбранаОсновнаяСпецификация = Ложь;
		ДанныеСтроки.ГрафикРассчитан             = Ложь;
		
		ГрафикВыпускаПродукцииТребуетсяРассчитать();
		
		Возврат Истина;
		
	КонецЕсли;
	
	ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
											Объект.Подразделение, 
											ДанныеСтроки.Номенклатура, 
											ДанныеСтроки.Характеристика, 
											ДанныеСтроки.НачатьНеРанее, 
											ДанныеСтроки.Спецификация);
											
	СпецификацияИзменилась = Ложь;
	Если ДанныеСпецификации = Неопределено Тогда
		
		ДанныеСтроки.Спецификация = Неопределено;
		ДанныеСтроки.ОптимальноеКоличествоПередачиМеждуЭтапами = 1;
		ДанныеСтроки.ВыбранаОсновнаяСпецификация = Ложь;
		
		СпецификацияИзменилась = Истина;
		
	Иначе
		
		Если ДанныеСпецификации.Спецификация <> ДанныеСтроки.Спецификация Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСпецификации);
			СпецификацияИзменилась = Истина;

		Иначе
			ДанныеСтроки.ОсновнаяСпецификация        = ДанныеСпецификации.ОсновнаяСпецификация;
			ДанныеСтроки.ВыбранаОсновнаяСпецификация = ДанныеСпецификации.ВыбранаОсновнаяСпецификация;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСтроки.ГрафикРассчитан = Ложь;
	
	Возврат СпецификацияИзменилась;
	
КонецФункции

&НаСервере
Процедура ПродукцияСлужебныеРеквизитыПоСтатусуЗаполнитьНаСервере()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.КодСтрокиПродукция КАК КодСтроки
		|ИЗ
		|	РегистрНакопления.ЭтапыПроизводства.Обороты(,,,Распоряжение = &Распоряжение) КАК Т
		|ГДЕ
		|	(Т.КВыполнениюОборот + Т.ВыполненоОборот + Т.БракОборот) > 0";
	
	Если ПараметрыРедактированияМатериалов.ИспользоватьКорректировки Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ТПродукция.КодСтроки КАК КодСтроки
			|ИЗ
			|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок КАК ТКорректировки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТМатериалыИУслуги
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
			|			ПО ТМатериалыИУслуги.Ссылка = ТПродукция.Ссылка
			|				И ТМатериалыИУслуги.КлючСвязиПродукция = ТПродукция.КлючСвязи
			|		ПО ТКорректировки.Распоряжение = ТМатериалыИУслуги.Ссылка
			|			И ТКорректировки.КодСтроки = ТМатериалыИУслуги.КодСтроки
			|ГДЕ
			|	ТКорректировки.Распоряжение = &Распоряжение
			|	И ТКорректировки.Регистратор ССЫЛКА Документ.КорректировкаЗаказаМатериаловВПроизводство
			|	И ТПродукция.Ссылка = &Распоряжение
			|	И ТМатериалыИУслуги.Ссылка = &Распоряжение";
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Распоряжение", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ЭтотОбъект.Выполняется = Истина;
		
		ПроизводствоВыполняетсяКодСтроки = РезультатЗапроса.Выгрузить();
		ПроизводствоВыполняетсяКодСтроки.Индексы.Добавить("КодСтроки");
		
		Для Каждого ДанныеСтроки из Объект.Продукция Цикл
			
			ДанныеСтроки.Выполняется = ПроизводствоВыполняетсяКодСтроки.НайтиСтроки(Новый Структура("КодСтроки", ДанныеСтроки.КодСтроки)).ВГраница() <> -1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияСлужебныеРеквизитыПоСпецификацииЗаполнитьНаСервере(Номенклатура = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Таблица.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(&Подразделение КАК Справочник.СтруктураПредприятия) КАК Подразделение,
	|	ВЫРАЗИТЬ(Таблица.НачатьНеРанее КАК ДАТА) КАК НачалоПроизводства
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|ГДЕ
	|	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Таблица.НачатьНеРанее <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Подразделение");	               
				   
	Если Номенклатура = Неопределено Тогда
		
		СтрокиПродукции = Объект.Продукция;
		КоллекцияДанных = Объект.Продукция.Выгрузить(, "Номенклатура, Характеристика, НачатьНеРанее");
		
	Иначе
		
		СтрокиПродукции = Объект.Продукция.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		КоллекцияДанных = Объект.Продукция.Выгрузить(СтрокиПродукции, "Номенклатура, Характеристика, НачатьНеРанее");
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	СтруктураКлючаПоискаСтроки = Новый Структура("Номенклатура,
												 |Характеристика,
												 |НачалоПроизводства",
												 "Номенклатура",
												 "Характеристика",
												 "НачатьНеРанее");
												 
	УстановитьПривилегированныйРежим(Истина);
												 
	УправлениеДаннымиОбИзделиях.ЗаполнитьОсновныеСпецификацииВКоллекции(Запрос,
																		Объект.Продукция,
																		СтруктураКлючаПоискаСтроки);
																		
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ДанныеСтроки из СтрокиПродукции Цикл
		
		ДанныеСтроки.ВыбранаОсновнаяСпецификация = (ДанныеСтроки.Спецификация = ДанныеСтроки.ОсновнаяСпецификация
													И НЕ ДанныеСтроки.ОсновнаяСпецификация.Пустая());
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьСпецификациюЗаказа(ДанныеСтроки)
	
	ОчиститьСообщения();
	
	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("Номенклатура",        НСтр("ru = 'Номенклатура'"));
	СписокРеквизитов.Добавить("Характеристика",      НСтр("ru = 'Характеристика'"));
	СписокРеквизитов.Добавить("Спецификация",        НСтр("ru = 'Спецификация'"));
	СписокРеквизитов.Добавить("КоличествоУпаковок",  НСтр("ru = 'Количество'"));
	СписокРеквизитов.Добавить("Подразделение",       НСтр("ru = 'Подразделение'"));
	СписокРеквизитов.Добавить("Склад",               НСтр("ru = 'Склад'"));
	
	МассивДанных = Новый Массив;
	
	ЕстьОшибкиЗаполнения = Ложь;
	ПроверитьЗаполнениеСтрокиПродукции(Объект.Продукция, СписокРеквизитов, ДанныеСтроки.ПолучитьИдентификатор(), ЕстьОшибкиЗаполнения, Ложь);
	
	Если ЕстьОшибкиЗаполнения Тогда
		
		МассивКлючей = Новый Массив;
		МассивКлючей.Добавить(ДанныеСтроки.КлючСвязи);
		
		ПродукцияОчиститьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивКлючей);
		
		ДанныеСтроки.ЕстьСоответствиеСтандартнойСпецификации = Истина;
		
	Иначе
		
		МассивДанных = Новый Массив;
		
		МассивДанных.Добавить(ДанныеПоНоменклатуре(ДанныеСтроки, РеквизитыЗаказа()));
		
		ОчиститьСообщения();
		
		ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивДанных, КэшированныеЗначения);
		
		ДанныеСтроки.ЗаполнитьПоСпецификации = Ложь;
		
	КонецЕсли;
	
	ДанныеСтроки.ГрафикРассчитан = Ложь;
	
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияОчиститьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивКлючей)
	
	Если МассивКлючей.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ПланированиеПроизводства.УдалитьДанныеСпецификаций(Объект, МассивКлючей);
	
	ГрафикВыпускаПродукцииЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивДанных, КэшированныеЗначения)
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ПланированиеПроизводства.ЗаполнитьДанныеСпецификаций(Объект, МассивДанных, КэшированныеЗначения);
	
	МассивКлючей = Новый Массив;
	Для каждого ДанныеПоНоменклатуре из МассивДанных Цикл
		// При заполнении данных спецификации удаляются полуфабрикаты
		// Поэтому нужно обработать оставшиеся строки
		СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеПоНоменклатуре.КлючСвязиПродукция);
  		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			МассивКлючей.Добавить(ДанныеПоНоменклатуре.КлючСвязиПродукция);
		КонецЕсли; 
	КонецЦикла;
	
	ПланированиеПроизводства.ПроверитьЗаполнениеСпецификацииВЗаказеНаПроизводство(Объект, МассивКлючей,, Истина, Ложь);
	
	ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере(МассивКлючей);
	ГрафикВыпускаПродукцииЗаполнитьНаСервере();
	
	ПланированиеПроизводства.УдалитьНеиспользуемыеДанныеСпецификации(Объект);
	
КонецПроцедуры

&НаСервере
Функция ЗапланироватьПолуфабрикатыНаСервере()
	
	Результат = Ложь;
	
	// Отбор строк, по которым необходимо запланировать полуфабрикаты
	ПараметрыОтбораПродукцияДляПланирования  = Новый Структура("СостояниеОбеспеченияПолуфабрикатами", 2);
	
	ПараметрыОтбораПолуфабрикатыКОбеспечению = Новый Структура(
		"КлючСвязиПродукция,
		|ПроизводитсяВПроцессе,
		|ЗаказатьНаСклад,
		|Запланировать");
		
	ПараметрыОтбораПолуфабрикатыКОбеспечению.ПроизводитсяВПроцессе = Ложь;
	ПараметрыОтбораПолуфабрикатыКОбеспечению.ЗаказатьНаСклад       = Истина;
	ПараметрыОтбораПолуфабрикатыКОбеспечению.Запланировать         = Истина;
	
	ПараметрыОтбораОбеспеченныеПолуфабрикаты = Новый Структура("КлючСвязиПродукция", Неопределено);
	
	ТаблицаПолуфабрикаты = Новый ТаблицаЗначений;
	ТаблицаПолуфабрикаты.Колонки.Добавить("Номенклатура");
	ТаблицаПолуфабрикаты.Колонки.Добавить("Характеристика");
	ТаблицаПолуфабрикаты.Колонки.Добавить("Назначение");
	ТаблицаПолуфабрикаты.Колонки.Добавить("Упаковка");
	ТаблицаПолуфабрикаты.Колонки.Добавить("КоличествоУпаковок");
	ТаблицаПолуфабрикаты.Колонки.Добавить("Количество");
	ТаблицаПолуфабрикаты.Колонки.Добавить("Склад");
	ТаблицаПолуфабрикаты.Колонки.Добавить("КлючСвязиМатериалыИУслуги");
	ТаблицаПолуфабрикаты.Колонки.Добавить("КлючСвязиПродукция");
	ТаблицаПолуфабрикаты.Колонки.Добавить("РазмещениеВыпуска");
	ТаблицаПолуфабрикаты.Колонки.Добавить("ДатаПотребности");
	ТаблицаПолуфабрикаты.Колонки.Добавить("НачатьНеРанее");
	ТаблицаПолуфабрикаты.Колонки.Добавить("Спецификация");
	ТаблицаПолуфабрикаты.Колонки.Добавить("ОсновнаяСпецификация");
	ТаблицаПолуфабрикаты.Колонки.Добавить("ВыбранаОсновнаяСпецификация");
	ТаблицаПолуфабрикаты.Колонки.Добавить("КодСтроки");
	ТаблицаПолуфабрикаты.Колонки.Добавить("Запланировать");
	ТаблицаПолуфабрикаты.Колонки.Добавить("Запланировано");
	
	СтрокиДляПланирования = Новый Массив;
	
	МассивИсключений = Новый Массив;
	
	Пока Истина Цикл
		
		СтрокиДляПланирования.Очистить();
		
		НайденныеСтроки = Объект.Продукция.НайтиСтроки(ПараметрыОтбораПродукцияДляПланирования);
		
		Для каждого Строка из НайденныеСтроки Цикл
			
			Если Строка.СостояниеСпецификации <= 1 Тогда
				
				СтрокиДляПланирования.Добавить(Строка);
				
			Иначе
				
				Если МассивИсключений.Найти(Строка.КлючСвязи) = Неопределено Тогда
					
					МассивИсключений.Добавить(Строка.КлючСвязи);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Нет строк для планирования полуфабрикатов
		Если СтрокиДляПланирования.Количество() = 0 Тогда
			
			Прервать;
			
		КонецЕсли;
		
		Результат = Истина;
		
		Для каждого СтрокаДляПланирования из СтрокиДляПланирования Цикл
			
			// Полуфабрикаты, которые необходимо обеспечить текущим заказом
			ПараметрыОтбораПолуфабрикатыКОбеспечению.КлючСвязиПродукция = СтрокаДляПланирования.КлючСвязи;
			ПолуфабрикатыКОбеспечению = Объект.МатериалыИУслуги.Выгрузить(ПараметрыОтбораПолуфабрикатыКОбеспечению);
	
			// Полуфабрикаты, которые уже обеспечены текущим заказом
			ПараметрыОтбораОбеспеченныеПолуфабрикаты.КлючСвязиПродукция = СтрокаДляПланирования.КлючСвязи;
			ОбеспеченныеПолуфабрикаты = Объект.Продукция.Выгрузить(ПараметрыОтбораОбеспеченныеПолуфабрикаты);
			
			ДатаПотребности = СтрокаДляПланирования.ДатаПотребности;
			НачатьНеРанее = СтрокаДляПланирования.НачатьНеРанее;
			
			ВНаличии = 0;
			
			Для каждого ПолуфабрикатКОбеспечению из ПолуфабрикатыКОбеспечению Цикл
				
				ОбеспеченныйПолуфабрикат = ОбеспеченныеПолуфабрикаты.Найти(ПолуфабрикатКОбеспечению.КлючСвязи,
																			"КлючСвязиМатериалыИУслуги");
				
				Если ОбеспеченныйПолуфабрикат <> Неопределено
					И ПолуфабрикатКОбеспечению.Количество
					- ВНаличии - ОбеспеченныйПолуфабрикат.КоличествоУпаковок <= 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				НоваяСтрока = ТаблицаПолуфабрикаты.Добавить();
				НоваяСтрока.Номенклатура = ПолуфабрикатКОбеспечению.Номенклатура;
				НоваяСтрока.Характеристика = ПолуфабрикатКОбеспечению.Характеристика;
				НоваяСтрока.Упаковка = ПолуфабрикатКОбеспечению.Упаковка;
				НоваяСтрока.КоличествоУпаковок = ПолуфабрикатКОбеспечению.КоличествоУпаковок;
				НоваяСтрока.Количество = ПолуфабрикатКОбеспечению.Количество;
				НоваяСтрока.Склад = ПолуфабрикатКОбеспечению.Склад;
				НоваяСтрока.КлючСвязиМатериалыИУслуги = ПолуфабрикатКОбеспечению.КлючСвязи;
				НоваяСтрока.КлючСвязиПродукция = ПолуфабрикатКОбеспечению.КлючСвязиПродукция;
				НоваяСтрока.РазмещениеВыпуска = СтрокаДляПланирования.РазмещениеВыпуска;
				НоваяСтрока.ДатаПотребности = ДатаПотребности;
				НоваяСтрока.НачатьНеРанее = НачатьНеРанее;
				НоваяСтрока.Запланировано = 0;
				НоваяСтрока.Назначение = СтрокаДляПланирования.Назначение;
				
				// Отметим, что запланированные полуфабрикаты являются обособленными.
				Если ЗначениеЗаполнено(СтрокаДляПланирования.Назначение) Тогда
					
					НайденныеСтроки = Объект.МатериалыИУслуги.НайтиСтроки(Новый Структура("КлючСвязи", ПолуфабрикатКОбеспечению.КлючСвязи));
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
						НайденныеСтроки[0].Назначение         = СтрокаДляПланирования.Назначение;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОбеспеченныйПолуфабрикат <> Неопределено Тогда
					
					НоваяСтрока.Спецификация = ОбеспеченныйПолуфабрикат.Спецификация;
					НоваяСтрока.ОсновнаяСпецификация = ОбеспеченныйПолуфабрикат.ОсновнаяСпецификация;
					НоваяСтрока.ВыбранаОсновнаяСпецификация = ОбеспеченныйПолуфабрикат.ВыбранаОсновнаяСпецификация;
					НоваяСтрока.ДатаПотребности = ОбеспеченныйПолуфабрикат.ДатаПотребности;
					НоваяСтрока.НачатьНеРанее = ОбеспеченныйПолуфабрикат.НачатьНеРанее;
					НоваяСтрока.РазмещениеВыпуска = ОбеспеченныйПолуфабрикат.РазмещениеВыпуска;
					НоваяСтрока.Склад = ОбеспеченныйПолуфабрикат.Склад;
					НоваяСтрока.Назначение = ОбеспеченныйПолуфабрикат.Назначение;
					НоваяСтрока.ИзмененияЗапрещены = ОбеспеченныйПолуфабрикат.ИзмененияЗапрещены;
					НоваяСтрока.КодСтроки = ОбеспеченныйПолуфабрикат.КодСтроки;
					НоваяСтрока.Запланировано = ОбеспеченныйПолуфабрикат.КоличествоУпаковок;
					
				КонецЕсли;
				
				НоваяСтрока.Запланировать = НоваяСтрока.Количество - ВНаличии - НоваяСтрока.Запланировано;
				
				СпецификацияПолуфабриката = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
														Объект.Подразделение, 
														НоваяСтрока.Номенклатура, 
														НоваяСтрока.Характеристика, 
														НоваяСтрока.НачатьНеРанее, 
														НоваяСтрока.Спецификация);
														
				Если СпецификацияПолуфабриката <> Неопределено Тогда
															
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СпецификацияПолуфабриката);
					
				КонецЕсли; 
				
			КонецЦикла;
			
			ДобавитьПолуфабрикаты(ТаблицаПолуфабрикаты, СтрокаДляПланирования.ПолучитьИдентификатор());
			ТаблицаПолуфабрикаты.Очистить();
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Строка из Объект.Продукция Цикл
		
		Если Строка.СостояниеСпецификации > 1 Тогда
			
			ПродукцияПроверитьСообщитьОшибкиСпецификации(Строка.СостояниеСпецификации, Строка.НомерСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПродукцияИзмененияЗапрещеныУстановить(ИзмененияЗапрещены)

	МассивСтрокВКоторыхИзмененияЗапрещены = Новый Массив;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПродукция Тогда
		
		Для каждого ПродукцияВыделеннаяСтрока из Элементы.Продукция.ВыделенныеСтроки Цикл
			
			ПродукцияСтрока = Объект.Продукция.НайтиПоИдентификатору(ПродукцияВыделеннаяСтрока);
			
			Если ПродукцияСтрока.ИзмененияЗапрещены <> ИзмененияЗапрещены Тогда
				
				МассивСтрокВКоторыхИзмененияЗапрещены.Добавить(ПродукцияСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ГрафикВыпускаПродукцииТекущиеДанные = Элементы.ГрафикВыпускаПродукции.ТекущиеДанные;
		
		Если ГрафикВыпускаПродукцииТекущиеДанные <> Неопределено Тогда
			
			Если ГрафикВыпускаПродукцииТекущиеДанные.ТипЭлемента = 1 Тогда
				
				ПродукцияСтрока = Объект.Продукция.НайтиСтроки(Новый Структура("КлючСвязи",
										ГрафикВыпускаПродукцииТекущиеДанные.КлючСвязи))[0];
				
			Иначе
				
				ПродукцияСтрока = Объект.Продукция.НайтиСтроки(Новый Структура("КлючСвязи",
										ГрафикВыпускаПродукцииТекущиеДанные.КлючСвязиПродукция))[0];
				
			КонецЕсли;  
			
			Если ПродукцияСтрока.ИзмененияЗапрещены  <> ИзмененияЗапрещены Тогда
				
				МассивСтрокВКоторыхИзмененияЗапрещены.Добавить(ПродукцияСтрока);
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если МассивСтрокВКоторыхИзмененияЗапрещены.Количество() > 0 Тогда
		
		Если ИзмененияЗапрещены Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Запретить редактирование выбранной продукции?'");
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru = 'Разрешить редактирование выбранной продукции?'");
			
		КонецЕсли;
		
		КодВозврата = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродукцияИзмененияЗапрещеныУстановитьЗавершение", ЭтотОбъект, Новый Структура("ИзмененияЗапрещены, МассивСтрокВКоторыхИзмененияЗапрещены", ИзмененияЗапрещены, МассивСтрокВКоторыхИзмененияЗапрещены)), ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияИзмененияЗапрещеныУстановитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ИзмененияЗапрещены = ДополнительныеПараметры.ИзмененияЗапрещены;
    МассивСтрокВКоторыхИзмененияЗапрещены = ДополнительныеПараметры.МассивСтрокВКоторыхИзмененияЗапрещены;
    
    
    КодВозврата = РезультатВопроса;
    
    Если КодВозврата = КодВозвратаДиалога.Да  Тогда
        
        Для каждого ДанныеСтроки из МассивСтрокВКоторыхИзмененияЗапрещены Цикл
            
            ДанныеСтроки.ИзмененияЗапрещены = ИзмененияЗапрещены;
            ГрафикВыпускаПродукцииИзмененияЗапрещеныУстановить(ГрафикВыпускаПродукции,
            ДанныеСтроки.КлючСвязи,
            ИзмененияЗапрещены);
            
        КонецЦикла; 
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПродукцияПослеУдаленияПоКлючуПродукцииНаСервере(Ключ)
	
	// Удалить связанные полуфабрикаты из табличной части "Продукция"
	ПродукцияУдалитьПоКлючуПродукцииНаСервере(Ключ);
	
	// Удалить продукцию из графика выпуска продукции
	ГрафикВыпускаПродукцииУдалитьПоКлючуПродукцииНаСервере(Ключ);
	
	МассивКлючей = Новый Массив;
	МассивКлючей.Добавить(Ключ);
	ПланированиеПроизводства.УдалитьДанныеСпецификаций(Объект, МассивКлючей);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияУдалитьПоКлючуПродукцииНаСервере(Ключ)
	
	УдаляемыеСтроки = Объект.Продукция.НайтиСтроки(Новый Структура("КлючСвязиПродукция", Ключ));
	
	Для каждого УдаляемаяСтрока из УдаляемыеСтроки Цикл
		
		УдаляемаяСтрокаКлючСвязи = УдаляемаяСтрока.КлючСвязи;
		Объект.Продукция.Удалить(УдаляемаяСтрока);
		ПродукцияПослеУдаленияПоКлючуПродукцииНаСервере(УдаляемаяСтрокаКлючСвязи);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПродукцияПроверитьСообщитьОшибкиСпецификации(СостояниеСпецификации, НомерСтроки, Отказ = Ложь)
		
	ШаблонСообщения = "";
	
	Если СостояниеСпецификации = 4 или СостояниеСпецификации = 2 Тогда
		ШаблонСообщения = НСтр("ru = 'Не заданы уточнения материалов в строке ""%1"" списка ""Продукция"".'");
	ИначеЕсли СостояниеСпецификации = 3 Тогда
		ШаблонСообщения = НСтр("ru = 'Ошибка заполнения спецификации в строке ""%1"" списка ""Продукция"".'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонСообщения) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", НомерСтроки, "СостояниеСпецификации"),
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровИзРаспоряжения(АдресТоваровВХранилище, КэшированныеЗначения)
	
	РезультатПодбора = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	МассивСтрок = Новый Массив;
	МассивНовыхСтрок = Новый Массив;
	МассивДанныхПоНоменклатуре = Новый Массив;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	РеквизитыЗаказа = РеквизитыЗаказаНаСервере();
	
	Для Каждого ПодобраннаяСтрока Из РезультатПодбора Цикл
		
		СтрокаТабличнойЧасти = Объект.Продукция.Добавить();
		СтрокаТабличнойЧасти.КлючСвязи = Новый УникальныйИдентификатор;
		СтрокаТабличнойЧасти.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПодобраннаяСтрока);
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтрокаТабличнойЧасти, "Продукция", СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
		СтрокаТабличнойЧасти.НачатьНеРанее = НачалоДня(ТекущаяДатаСеанса());
		
		МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре(СтрокаТабличнойЧасти, РеквизитыЗаказа));
		МассивНовыхСтрок.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивНовыхСтрок, МассивДанныхПоНоменклатуре, Истина);
	
	ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивДанныхПоНоменклатуре, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);
	
	ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ПродукцияНазначениеПриИзмененииНаСервере(ДанныеЗаполнения)
	
	ДанныеПоПродукции = ПланированиеПроизводства.СтруктураДанныхПродукции(ДанныеЗаполнения);
	ДанныеПоПродукции.ПоЗаказуДавальца = Объект.ПроизводствоПоЗаказу;
	
	ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВТЧВыходныеИзделия(Объект, ДанныеПоПродукции);
	ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВТЧМатериалыИУслуги(Объект, ДанныеПоПродукции);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСкладПоУмолчаниюВСтроке(Форма, Строка)
	
	Если Форма.ИспользоватьНесколькоСкладов Тогда
		Возврат;
	КонецЕсли; 
	
	Строка.Склад = Форма.СкладПоУмолчанию;

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеТаблицыГрафикВыпускаПродукции

&НаСервере
Процедура ГрафикВыпускаПродукцииЗаполнитьНаСервере()
	
	ГрафикВыпускаПродукцииЭлементы = ГрафикВыпускаПродукции.ПолучитьЭлементы();
	
	СписокСвойств = "Номенклатура, Характеристика, Упаковка,
		|КоличествоУпаковок, Количество, Склад,
		|Спецификация, ХарактеристикиИспользуются, КлючСвязи,
		|ИзмененияЗапрещены";
		
	ТаблицыДокумента = Новый Структура;
	
	ТаблицыДокумента.Вставить("Продукция", Объект.Продукция.Выгрузить());
	ТаблицыДокумента.Продукция.Индексы.Добавить("КлючСвязи");
	
	ТаблицыДокумента.Вставить("Этапы", Объект.Этапы.Выгрузить());
	ТаблицыДокумента.Этапы.Индексы.Добавить("КлючСвязи");
	
	ТаблицыДокумента.Вставить("ЭтапыГрафик", Объект.ЭтапыГрафик.Выгрузить());
	ТаблицыДокумента.ЭтапыГрафик.Индексы.Добавить("КлючСвязиПродукция");
	
	ТаблицыДокумента.Вставить("МатериалыИУслуги", Объект.МатериалыИУслуги.Выгрузить());
	ТаблицыДокумента.МатериалыИУслуги.Индексы.Добавить("КлючСвязи");
	
	ТаблицыДокумента.Вставить("МатериалыИУслугиГрафик", Объект.МатериалыИУслугиГрафик.Выгрузить());
	ТаблицыДокумента.МатериалыИУслугиГрафик.Индексы.Добавить("КлючСвязиПродукция");
	ТаблицыДокумента.МатериалыИУслугиГрафик.Индексы.Добавить("КлючСвязиЭтапыГрафик");
	
	ТаблицыДокумента.Вставить("ВыходныеИзделия", Объект.ВыходныеИзделия.Выгрузить());
	ТаблицыДокумента.ВыходныеИзделия.Индексы.Добавить("КлючСвязи");
	
	ТаблицыДокумента.Вставить("ВыходныеИзделияГрафик", Объект.ВыходныеИзделияГрафик.Выгрузить());
	ТаблицыДокумента.ВыходныеИзделияГрафик.Индексы.Добавить("КлючСвязиПродукция");
	ТаблицыДокумента.ВыходныеИзделияГрафик.Индексы.Добавить("КлючСвязиЭтапыГрафик");
	
	ТаблицыДокумента.Вставить("СпецификацииЭтапов", ПолучитьСпецификацииЭтапов(Объект.Этапы.Выгрузить(, "Этап")));
	
	МассивНоменклатуры = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивНоменклатуры, 
		ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ТаблицыДокумента.МатериалыИУслуги, "Номенклатура"));
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивНоменклатуры, 
		ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(ТаблицыДокумента.ВыходныеИзделия,  "Номенклатура"));
		
	ТаблицыДокумента.Вставить("РеквизитыНоменклатуры", ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры, "ЕдиницаИзмерения"));
	
	МассивКлючейДляУдаления = Новый Массив;
	СоответствиеПродукцииИГрафикаВыпускаПродукции = Новый Соответствие;
	
	Для каждого ГрафикВыпускаПродукцииЭлемент из ГрафикВыпускаПродукцииЭлементы Цикл
		
		Если ТаблицыДокумента.Продукция.Найти(ГрафикВыпускаПродукцииЭлемент.КлючСвязи, "КлючСвязи") = Неопределено Тогда
			
			МассивКлючейДляУдаления.Добавить(ГрафикВыпускаПродукцииЭлемент.КлючСвязи);
			
		Иначе
			
			СоответствиеПродукцииИГрафикаВыпускаПродукции.Вставить(ГрафикВыпускаПродукцииЭлемент.КлючСвязи, ГрафикВыпускаПродукцииЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Ключ Из МассивКлючейДляУдаления Цикл
		
		ГрафикВыпускаПродукцииУдалитьПоКлючуПродукцииНаСервере(Ключ);
		
	КонецЦикла;
		
	Для каждого ПродукцияСтрока из Объект.Продукция Цикл
		
		// Продукция графика
		ПродукцияГрафикаВыпуска = СоответствиеПродукцииИГрафикаВыпускаПродукции.Получить(ПродукцияСтрока.КлючСвязи);
		
		Если ПродукцияГрафикаВыпуска = Неопределено Тогда
			
			ПродукцияГрафикаВыпуска = ГрафикВыпускаПродукцииЭлементы.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПродукцияГрафикаВыпуска, ПродукцияСтрока, СписокСвойств);

		ПродукцияГрафикаВыпуска.ТипЭлемента = 1;
		
		ПродукцияГрафикНайденныеСтроки = Объект.ПродукцияГрафик.НайтиСтроки(
			Новый Структура("КлючСвязиПродукция", ПродукцияСтрока.КлючСвязи));
		
		Если ПродукцияГрафикНайденныеСтроки.Количество() > 0 Тогда
			
			ПродукцияГрафикаВыпуска.НачалоЭтапа      = ПродукцияГрафикНайденныеСтроки[0].Начало;
			ПродукцияГрафикаВыпуска.ОкончаниеЭтапа   = ПродукцияГрафикНайденныеСтроки[0].Окончание;
			ПродукцияГрафикаВыпуска.СделаныИзменения = ПродукцияГрафикНайденныеСтроки[0].СделаныИзменения;
			
		КонецЕсли;
		
		ГрафикПотребленияВыпускаСтрокиГрафикаВыпускаЗаполнитьНаСервере(ПродукцияГрафикаВыпуска, ТаблицыДокумента);
		
		// Этапы графика
		ЭтапыГрафикНайденныеСтроки = ТаблицыДокумента.ЭтапыГрафик.НайтиСтроки(
			Новый Структура("КлючСвязиПродукция", ПродукцияСтрока.КлючСвязи));
		
		ГрафикВыпускаЭтапыЭлементы = ПродукцияГрафикаВыпуска.ПолучитьЭлементы();
		ГрафикВыпускаЭтапыЭлементы.Очистить();
		
		Для каждого ЭтапГрафика из ЭтапыГрафикНайденныеСтроки Цикл
			
			ЭтапыНайденныеСтроки = ТаблицыДокумента.Этапы.НайтиСтроки(
				Новый Структура("КлючСвязи", ЭтапГрафика.КлючСвязиЭтапы));
			
			Если ЭтапыНайденныеСтроки.Количество() > 0 Тогда
			
				Этап = ТаблицыДокумента.Этапы.НайтиСтроки(
					Новый Структура("КлючСвязи", ЭтапГрафика.КлючСвязиЭтапы))[0];
				
				ЭтапГрафикВыпуска = ГрафикВыпускаЭтапыЭлементы.Добавить();
				
				ЭтапГрафикВыпуска.Этап               = Этап.Этап;
				ЭтапГрафикВыпуска.НаименованиеЭтапа  = Этап.НаименованиеЭтапа;
				ЭтапГрафикВыпуска.СпецификацияЭтапа  = ТаблицыДокумента.СпецификацииЭтапов[Этап.Этап];
				ЭтапГрафикВыпуска.Подразделение      = Этап.Подразделение;
				ЭтапГрафикВыпуска.КоличествоУпаковок = ЭтапГрафика.Количество;
				ЭтапГрафикВыпуска.Количество         = ЭтапГрафика.Количество;
				ЭтапГрафикВыпуска.НачалоЭтапа        = ЭтапГрафика.НачалоЭтапа;
				ЭтапГрафикВыпуска.ОкончаниеЭтапа     = ЭтапГрафика.ОкончаниеЭтапа;
				ЭтапГрафикВыпуска.Описание           = Этап.Описание;
				ЭтапГрафикВыпуска.ТипЭлемента        = 2;
				ЭтапГрафикВыпуска.КлючСвязи          = ЭтапГрафика.КлючСвязи;
				ЭтапГрафикВыпуска.КлючСвязиПродукция = ЭтапГрафика.КлючСвязиПродукция;
				ЭтапГрафикВыпуска.КлючСвязиЭтапы     = ЭтапГрафика.КлючСвязиЭтапы;
				ЭтапГрафикВыпуска.НомерЭтапа         = Этап.НомерЭтапа;
				ЭтапГрафикВыпуска.ИзмененияЗапрещены = ПродукцияСтрока.ИзмененияЗапрещены;
				
				ГрафикПотребленияВыпускаСтрокиГрафикаВыпускаЗаполнитьНаСервере(ЭтапГрафикВыпуска, ТаблицыДокумента);
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
	Если НЕ ГрафикВыпускаПродукцииИнициализирован Тогда
		ГрафикВыпускаПродукцииИнициализирован = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ГрафикПотребленияВыпускаСтрокиГрафикаВыпускаЗаполнитьНаСервере(СтрокаГрафикаВыпуска, ТаблицыДокумента)
	
	СтрокаГрафикаВыпуска.ГрафикПотребленияВыпуска.Очистить();
	
	Если СтрокаГрафикаВыпуска.ТипЭлемента = 1 Тогда // Продукция
		
		ИмяКлючаСвязи = "КлючСвязиПродукция";
		
	ИначеЕсли СтрокаГрафикаВыпуска.ТипЭлемента = 2 Тогда // Этап графика
		
		ИмяКлючаСвязи = "КлючСвязиЭтапыГрафик";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	// Материалы и услуги
	МатериалыИУслугиГрафикНайденныеСтроки = ТаблицыДокумента.МатериалыИУслугиГрафик.НайтиСтроки(
		Новый Структура(ИмяКлючаСвязи, СтрокаГрафикаВыпуска.КлючСвязи));
	
	Для каждого СтрокаМатериалыИУслугиГрафик из МатериалыИУслугиГрафикНайденныеСтроки Цикл
		
		МатериалыИУслугиНайденнаяСтрока = ТаблицыДокумента.МатериалыИУслуги.Найти(СтрокаМатериалыИУслугиГрафик.КлючСвязиМатериалыИУслуги, "КлючСвязи");
		
		Если МатериалыИУслугиНайденнаяСтрока <> Неопределено Тогда
			
			НовыйЭлемент = СтрокаГрафикаВыпуска.ГрафикПотребленияВыпуска.Добавить();
			
			НовыйЭлемент.Номенклатура               = МатериалыИУслугиНайденнаяСтрока.Номенклатура;
			НовыйЭлемент.Характеристика             = МатериалыИУслугиНайденнаяСтрока.Характеристика;
			НовыйЭлемент.Упаковка                   = МатериалыИУслугиНайденнаяСтрока.Упаковка;
			НовыйЭлемент.Количество                 = СтрокаМатериалыИУслугиГрафик.Количество;
			НовыйЭлемент.КоличествоУпаковок         = СтрокаМатериалыИУслугиГрафик.КоличествоУпаковок;
			НовыйЭлемент.ДатаПотребностиВыпуска     = СтрокаМатериалыИУслугиГрафик.ДатаПотребности;
			НовыйЭлемент.Склад                      = МатериалыИУслугиНайденнаяСтрока.Склад;
			НовыйЭлемент.ТипЭлемента                = 1;
			НовыйЭлемент.Картинка                   = 2;
			НовыйЭлемент.ХарактеристикиИспользуются = МатериалыИУслугиНайденнаяСтрока.ХарактеристикиИспользуются;
			НовыйЭлемент.КлючСвязи                  = МатериалыИУслугиНайденнаяСтрока.КлючСвязи;
			
			НовыйЭлемент.ЕдиницаИзмерения = ТаблицыДокумента.РеквизитыНоменклатуры[МатериалыИУслугиНайденнаяСтрока.Номенклатура].ЕдиницаИзмерения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выходные изделия
	ВыходныеИзделияГрафикНайденныеСтроки = ТаблицыДокумента.ВыходныеИзделияГрафик.НайтиСтроки(
		Новый Структура(ИмяКлючаСвязи, СтрокаГрафикаВыпуска.КлючСвязи));
	
	Для каждого СтрокаВыходныеИзделияГрафик из ВыходныеИзделияГрафикНайденныеСтроки Цикл
		
		ВыходныеИзделияНайденнаяСтрока = ТаблицыДокумента.ВыходныеИзделия.Найти(СтрокаВыходныеИзделияГрафик.КлючСвязиВыходныеИзделия, "КлючСвязи");
		
		Если ВыходныеИзделияНайденнаяСтрока <> Неопределено Тогда
			
			НовыйЭлемент = СтрокаГрафикаВыпуска.ГрафикПотребленияВыпуска.Добавить();
			
			НовыйЭлемент.Номенклатура               = ВыходныеИзделияНайденнаяСтрока.Номенклатура;
			НовыйЭлемент.Характеристика             = ВыходныеИзделияНайденнаяСтрока.Характеристика;
			НовыйЭлемент.Упаковка                   = ВыходныеИзделияНайденнаяСтрока.Упаковка;
			НовыйЭлемент.Количество                 = СтрокаВыходныеИзделияГрафик.Количество;
			НовыйЭлемент.КоличествоУпаковок         = СтрокаВыходныеИзделияГрафик.КоличествоУпаковок;
			НовыйЭлемент.ДатаПотребностиВыпуска     = СтрокаВыходныеИзделияГрафик.ДатаВыпуска;
			НовыйЭлемент.Склад                      = ВыходныеИзделияНайденнаяСтрока.Склад;
			НовыйЭлемент.ТипЭлемента                = 0;
			НовыйЭлемент.Картинка                   = 4;
			НовыйЭлемент.ХарактеристикиИспользуются = ВыходныеИзделияНайденнаяСтрока.ХарактеристикиИспользуются;
			НовыйЭлемент.КлючСвязи                  = ВыходныеИзделияНайденнаяСтрока.КлючСвязи;
			
			НовыйЭлемент.ЕдиницаИзмерения = ТаблицыДокумента.РеквизитыНоменклатуры[ВыходныеИзделияНайденнаяСтрока.Номенклатура].ЕдиницаИзмерения;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСпецификацииЭтапов(Этапы)
	
	Результат = Новый Соответствие;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ЭтапыПроизводства) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивЭтапов", Этапы);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыПроизводства.Ссылка КАК Этап,
		|	ЭтапыПроизводства.Владелец КАК Спецификация
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Ссылка В (&МассивЭтапов)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Результат.Вставить(Выборка.Этап, Выборка.Спецификация);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ГрафикВыпускаПродукцииУдалитьПоКлючуПродукцииНаСервере(Ключ)
	
	ИндексСтроки = 0;
	ГрафикВыпускаПродукцииЭлементы = ГрафикВыпускаПродукции.ПолучитьЭлементы();
	
	Пока ИндексСтроки < ГрафикВыпускаПродукцииЭлементы.Количество() Цикл
		
		Если ГрафикВыпускаПродукцииЭлементы.Получить(ИндексСтроки).КлючСвязи = Ключ Тогда
			
			ГрафикВыпускаПродукцииЭлементы.Удалить(ИндексСтроки);
			
		Иначе
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ГрафикВыпускаПродукцииСохранитьНаСервере(ТекущийОбъект)

	ГрафикВыпускаПродукцииЭлементы = ГрафикВыпускаПродукции.ПолучитьЭлементы();
	
	Для каждого ГрафикВыпускаПродукцииЭлемент из ГрафикВыпускаПродукцииЭлементы Цикл
		
		Если НЕ ГрафикВыпускаПродукцииЭлемент.СделаныИзменения Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеПоПродукции = ТекущийОбъект.ПродукцияГрафик.НайтиСтроки(
			Новый Структура("КлючСвязиПродукция", ГрафикВыпускаПродукцииЭлемент.КлючСвязи));
		
		Если ДанныеПоПродукции.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеПоПродукции[0].Начало    = ГрафикВыпускаПродукцииЭлемент.НачалоЭтапа;
		ДанныеПоПродукции[0].Окончание = ГрафикВыпускаПродукцииЭлемент.ОкончаниеЭтапа;
		ДанныеПоПродукции[0].СделаныИзменения = ГрафикВыпускаПродукцииЭлемент.СделаныИзменения;
		
		ЭтапыГрафикВыпускаПродукцииЭлементы = ГрафикВыпускаПродукцииЭлемент.ПолучитьЭлементы();
		
		Для каждого ЭтапыГрафикВыпускаПродукцииЭлемент из ЭтапыГрафикВыпускаПродукцииЭлементы Цикл
			
			ДанныеПоЭтапу = ТекущийОбъект.ЭтапыГрафик.НайтиСтроки(
				Новый Структура("КлючСвязи", ЭтапыГрафикВыпускаПродукцииЭлемент.КлючСвязи));
			ДанныеПоЭтапу[0].НачалоЭтапа = ЭтапыГрафикВыпускаПродукцииЭлемент.НачалоЭтапа;
			ДанныеПоЭтапу[0].ОкончаниеЭтапа = ЭтапыГрафикВыпускаПродукцииЭлемент.ОкончаниеЭтапа;
			
		КонецЦикла; 
		
	КонецЦикла; 	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ГрафикВыпускаПродукцииИзмененияЗапрещеныУстановить(ГрафикВыпускаПродукции, Ключ, ИзмененияЗапрещены)

	ГрафикВыпускаПродукцииЭлементы = ГрафикВыпускаПродукции.ПолучитьЭлементы();
	
	Для каждого ГрафикВыпускаПродукцииЭлемент из ГрафикВыпускаПродукцииЭлементы Цикл
		
		Если ГрафикВыпускаПродукцииЭлемент.КлючСвязи = Ключ Тогда
			
			ГрафикВыпускаПродукцииЭлемент.ИзмененияЗапрещены = ИзмененияЗапрещены;
			
			ЭтапыГрафикВыпускаПродукцииЭлементы = ГрафикВыпускаПродукцииЭлемент.ПолучитьЭлементы();
			
			Для каждого ЭтапыГрафикВыпускаПродукцииЭлемент из ЭтапыГрафикВыпускаПродукцииЭлементы Цикл
				
				ЭтапыГрафикВыпускаПродукцииЭлемент.ИзмененияЗапрещены = ИзмененияЗапрещены;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыпускаПродукцииТребуетсяРассчитать(СписокИзмененныхДанных = Неопределено)

	Если Объект.СтатусГрафикаПроизводства <> СтатусГрафикТребуетсяРассчитать Тогда
		
		Объект.СтатусГрафикаПроизводства = СтатусГрафикТребуетсяРассчитать;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ДляОбслуживанияТабличнойЧастиПродукция

&НаКлиенте
Процедура ПодборИзРаспоряжения()
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ",           Объект.Ссылка);
	ПараметрыПодбора.Вставить("Заказ",              Объект.Заказ);
	ПараметрыПодбора.Вставить("АдресВХранилище",    ТЧПродукцияВХранилище());
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ПодборПоРаспоряжениям", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ТЧПродукцияВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Продукция.Выгрузить(, "Назначение, Номенклатура, Характеристика, Спецификация, Склад, Количество, КоличествоУпаковок"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция НазначитьСпецификациюОсновнойНаСервере(КоллекцияДанных)
	
	Перем МассивОшибок;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Номенклатура");
	ТаблицаДанных.Колонки.Добавить("Характеристика");
	ТаблицаДанных.Колонки.Добавить("Спецификация");
	ТаблицаДанных.Колонки.Добавить("НачатьНеРанее");
	ТаблицаДанных.Колонки.Добавить("НомерСтроки");
	
	// Сформируем таблицу из уникальных значений
	Для каждого ТекущиеДанные Из КоллекцияДанных Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура,Характеристика,Спецификация,НачатьНеРанее");
		СтруктураОтбора.Номенклатура = ТекущиеДанные.Номенклатура;
		СтруктураОтбора.Характеристика = ТекущиеДанные.Характеристика;
		СтруктураОтбора.Спецификация = ТекущиеДанные.Спецификация;
		СтруктураОтбора.НачатьНеРанее = ТекущиеДанные.НачатьНеРанее;
		
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
			
		Иначе
			
			НайденныеСтроки[0].НомерСтроки = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ЕстьОшибки = Ложь;
	
	// Назначим спецификации основными
	МассивДанных = Новый Массив;
	
	Для каждого ТекущиеДанные Из ТаблицаДанных Цикл
		
		СтруктураЗаписи = РегистрыСведений.ОсновныеСпецификации.СтруктураЗаписи();
		
		СтруктураЗаписи.Подразделение  = Объект.Подразделение;
		СтруктураЗаписи.Период         = ТекущиеДанные.НачатьНеРанее;
		СтруктураЗаписи.Номенклатура   = ТекущиеДанные.Номенклатура;
		СтруктураЗаписи.Характеристика = ТекущиеДанные.Характеристика;
		СтруктураЗаписи.Спецификация   = ТекущиеДанные.Спецификация;
		
		СтруктураЗаписи.Вставить("НомерСтроки", ТекущиеДанные.НомерСтроки);
		
		МассивДанных.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Если НЕ УправлениеДаннымиОбИзделияхВызовСервера.НазначитьОсновныеСпецификацииДляИзделий(МассивДанных, МассивОшибок) Тогда
		
		Для каждого ОписаниеОшибки Из МассивОшибок Цикл
			
			Если ОписаниеОшибки.Свойство("НомерСтроки") И ОписаниеОшибки.Свойство("СтруктураОшибки") Тогда
				
				Если ОписаниеОшибки.СтруктураОшибки.Свойство("ТекстОшибки") Тогда
					ТекстОшибки = ОписаниеОшибки.СтруктураОшибки.ТекстОшибки;
				Иначе
					ТекстОшибки = НСтр("ru = 'Ошибка назначения основной спецификации.'");
				КонецЕсли;
				
				ПутьКСтроке = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Продукция", ОписаниеОшибки.НомерСтроки, "Спецификация");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки
					,
					,
					ПутьКСтроке);
				
			КонецЕсли;
			
		КонецЦикла;
		ЕстьОшибки = Истина;
		
	КонецЕсли;

	// Обновим служебные реквизиты
	ТаблицаДанных.Свернуть("Номенклатура");
	
	Для каждого ТекущиеДанные Из ТаблицаДанных Цикл
		
		ПродукцияСлужебныеРеквизитыПоСпецификацииЗаполнитьНаСервере(ТекущиеДанные.Номенклатура);
		
	КонецЦикла; 
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ДанныеСпецификацииВХранилище(КлючСвязи)
	
	Возврат ПланированиеПроизводства.ДанныеСпецификацииЗаказаВХранилилище(Объект, КлючСвязи, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПараметрыРедактированияСпецификацииСтрокиЗаказа(КлючСвязи)

	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("АдресСпецификация", ДанныеСпецификацииВХранилище(КлючСвязи));
	ПараметрыФормы.Вставить("АдресТоварыДляОбеспечения", ТоварыДляОбеспеченияВХранилище(КлючСвязи));
	ПараметрыФормы.Вставить("ПараметрыРедактированияМатериалов", ПараметрыРедактированияМатериалов);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработатьРезультатРедактированияНаСервере(РезультатРедактирования, КэшированныеЗначения)
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	
	СтруктураПродукции = СтруктураДанных.СтруктураПродукции;
	
	ДанныеПродукции = Объект.Продукция.НайтиСтроки(Новый Структура("КлючСвязи", СтруктураПродукции.КлючСвязи))[0];
	
	ЗаполнитьЗначенияСвойств(ДанныеПродукции, СтруктураПродукции);
	
	Если СтруктураПродукции.ЕстьУточненияМатериалов И СтруктураПродукции.ЕстьОшибкиЗаполнения Тогда
		ДанныеПродукции.СостояниеСпецификации = 4;
	ИначеЕсли СтруктураПродукции.ЕстьУточненияМатериалов Тогда
		ДанныеПродукции.СостояниеСпецификации = 2;
	ИначеЕсли СтруктураПродукции.ЕстьОшибкиЗаполнения Тогда
		ДанныеПродукции.СостояниеСпецификации = 3;
	ИначеЕсли СтруктураПродукции.ЕстьСоответствиеСтандартнойСпецификации Тогда
		ДанныеПродукции.СостояниеСпецификации = 0;
	Иначе
		ДанныеПродукции.СостояниеСпецификации = 1;
	КонецЕсли;
	
	ДанныеПродукции.ГрафикРассчитан = Ложь;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	МассивКлючей = Новый Массив;
	МассивКлючейДляУточнения = Новый Массив;
	
	МассивКлючей.Добавить(ДанныеПродукции.КлючСвязи);
	
	ПланированиеПроизводства.УдалитьДанныеСпецификаций(Объект, МассивКлючей);
	
	КлючиСвязиЭтапов = Новый Соответствие;
	
	// Этапы
	Для каждого ЭтапыЭлемент из СтруктураДанных.Этапы Цикл
		
		НоваяСтрока = Объект.Этапы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтапыЭлемент);
		
		КлючиСвязиЭтапов.Вставить(ЭтапыЭлемент.Этап, НоваяСтрока.КлючСвязи);
		
	КонецЦикла;
	
	// Выходные изделия
	Для каждого ВыходныеИзделияЭлемент из СтруктураДанных.ВыходныеИзделия Цикл
		
		НоваяСтрока = Объект.ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыходныеИзделияЭлемент);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(НоваяСтрока, "ВыходныеИзделия", СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	// Возвратные отходы
	Для каждого ВозвратныеОтходыЭлемент из СтруктураДанных.ВозвратныеОтходы Цикл
		
		НоваяСтрока = Объект.ВозвратныеОтходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВозвратныеОтходыЭлемент);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(НоваяСтрока, "ВозвратныеОтходы", СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	// Материалы и услуги
	Для каждого МатериалыИУслугиЭлемент из СтруктураДанных.МатериалыИУслуги Цикл
		
		НоваяСтрока = Объект.МатериалыИУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, МатериалыИУслугиЭлемент);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(НоваяСтрока, "МатериалыИУслуги", СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если (МатериалыИУслугиЭлемент.Номенклатура.Пустая()
			ИЛИ МатериалыИУслугиЭлемент.Характеристика.Пустая() И МатериалыИУслугиЭлемент.ХарактеристикиИспользуются) 
			И (МассивКлючейДляУточнения.Найти(СтруктураДанных.СтруктураПродукции.КлючСвязиПродукция) = Неопределено) Тогда
			
			МассивКлючейДляУточнения.Добавить(СтруктураДанных.СтруктураПродукции.КлючСвязиПродукция);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьПараметрыАктуализацииМаршрутныхЛистов(СтруктураДанных);
	
	Если СтруктураДанных.Свойство("КорректировкиЗаказаМатериалов") Тогда 
		
		Если ПараметрыРедактированияМатериалов.ИспользоватьКорректировки Тогда
			
			Обработки.ВводКорректировкиЗаказаМатериалов.ПоместитьРезультатКорректировкиСпецификацииЗаказаВХранилище(ДанныеПродукции.КлючСвязи, 
				ПараметрыРедактированияМатериалов, 
				СтруктураДанных.КорректировкиЗаказаМатериалов);
		Иначе
			
			Обработки.ВводКорректировкиЗаказаМатериалов.СохранитьКорректировкиЗаказаМатериаловПоЗаказуНаПроизводство(Объект, 
				ПараметрыРедактированияМатериалов, 
				СтруктураДанных.КорректировкиЗаказаМатериалов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ТаблицаОбеспечения") Тогда
		
		Документы.ЗаказНаПроизводство.ЗаполнитьВариантОбеспечения(
			Объект, ЭтаФорма, "СтрокиТовары", СтруктураДанных.ТаблицаОбеспечения);
			
	КонецЕсли;
	
	// Трудозатраты
	Для каждого ТрудозатратыЭлемент из СтруктураДанных.Трудозатраты Цикл
		
		НоваяСтрока = Объект.Трудозатраты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТрудозатратыЭлемент);
		
	КонецЦикла;
	
	// ВидыРабочихЦентров
	Для каждого ВидыРабочихЦентровЭлемент из СтруктураДанных.ВидыРабочихЦентров Цикл
		
		НоваяСтрока = Объект.ВидыРабочихЦентров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидыРабочихЦентровЭлемент);
		
	КонецЦикла;
	
	// АльтернативныеВидыРабочихЦентров
	Для каждого АльтернативныеВидыРабочихЦентровЭлемент из СтруктураДанных.АльтернативныеВидыРабочихЦентров Цикл
		
		НоваяСтрока = Объект.АльтернативныеВидыРабочихЦентров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, АльтернативныеВидыРабочихЦентровЭлемент);
		
	КонецЦикла;
	
	// ЭтапыВосстановленияБрака
	Для Каждого ЭтапыВосстановленияБракаЭлемент Из СтруктураДанных.ЭтапыВосстановленияБрака Цикл
		
		НоваяСтрока = Объект.ЭтапыВосстановленияБрака.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтапыВосстановленияБракаЭлемент);
		
	КонецЦикла;
	
	ПланированиеПроизводства.УдалитьНеиспользуемыеДанныеСпецификации(Объект);
	
	Если МассивКлючей.Количество() > 0 Тогда
		
		ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере(МассивКлючей);
		ГрафикВыпускаПродукцииЗаполнитьНаСервере();
		
	КонецЕсли;
	
	ГрафикВыпускаПродукцииИзмененияЗапрещеныУстановить(ГрафикВыпускаПродукции,
		СтруктураПродукции.КлючСвязи,
		СтруктураПродукции.ИзмененияЗапрещены);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьЗаполнениеСтрокиПродукции(Продукция, СписокРеквизитов, Идентификатор, ЕстьОшибкиЗаполнения, СообщатьОбОшибках = Ложь)
	
	ШаблонСообщения = НСтр("ru = 'Не заполнено поле %1 в строке %2 списка Продукция'");
	ШаблонСообщенияИзмененияЗапрещены = НСтр("ru = 'Изменение данных строки %1 запрещено!'");
	
	ДанныеСтроки = Продукция.НайтиПоИдентификатору(Идентификатор);
	
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		
		Если Реквизит.Значение = "Характеристика" И Не ДанныеСтроки.ХарактеристикиИспользуются Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Значение = "Склад" И ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Значение = "Подразделение" И ДанныеСтроки.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Значение = "ИзмененияЗапрещены" Тогда
			Если ДанныеСтроки.ИзмененияЗапрещены Тогда
				
				Если СообщатьОбОшибках Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияИзмененияЗапрещены, ДанныеСтроки.НомерСтроки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						"Объект.Продукция",
						,
						ЕстьОшибкиЗаполнения);
				Иначе
					ЕстьОшибкиЗаполнения = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки[Реквизит.Значение]) Тогда
			
			Если СообщатьОбОшибках Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Реквизит.Представление, ДанныеСтроки.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция",
					ДанныеСтроки.НомерСтроки, Реквизит.Значение),
					,
					ЕстьОшибкиЗаполнения);
				
			Иначе
				ЕстьОшибкиЗаполнения = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспеченияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПринудительноЗакрытьФорму = Ложь;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Записать(ПараметрыЗаписи) Тогда
		СостояниеОбеспечения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения()
	
	Заказы = Новый СписокЗначений();
	Заказы.Добавить(Объект.Ссылка);
	
	ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", Новый Структура("Заказы", Заказы));
	
КонецПроцедуры

#КонецОбласти

#Область ДляОбслуживанияТабличнойЧастиГрафикВыпускаПродукции

&НаКлиенте
Процедура УстановитьПризнакИзменений()

	ТекущиеДанные = Элементы.ГрафикВыпускаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипЭлемента = 1 Тогда
		
		ТекущиеДанные.СделаныИзменения = Истина;
		
	Иначе
		
		СтрокаПродукции = ТекущиеДанные.ПолучитьРодителя();
		СтрокаПродукции.СделаныИзменения = Истина;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Продукция.ВыделенныеСтроки,
		Объект.Продукция);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	МассивДанныхПоНоменклатуре = Новый Массив;
	МассивНовыхСтрок = Новый Массив;
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	РеквизитыЗаказа = РеквизитыЗаказаНаСервере();
	
	Для каждого СтрокаТовара из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ТекущаяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, "Продукция", СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ТекущаяСтрока.НачатьНеРанее = НачалоДня(ТекущаяДатаСеанса());
		ТекущаяСтрока.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
		
		МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре(ТекущаяСтрока, РеквизитыЗаказа));
		МассивНовыхСтрок.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивНовыхСтрок, МассивДанныхПоНоменклатуре);	

	ПродукцияЗаполнитьЭтапыВыходныеИзделияМатериалыИУслугиНаСервере(МассивДанныхПоНоменклатуре, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВыходныеИзделия, СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИУслуги, СтруктураДействий);
			
	ПродукцияСлужебныеРеквизитыПоСтатусуЗаполнитьНаСервере();
	ПродукцияСлужебныеРеквизитыПоСпецификацииЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока, ИмяТабличнойЧасти, СтруктураДействий)
	
	ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущаяСтрока, ИмяТабличнойЧасти);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	Элементы.Состояние.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовНаПроизводство.Создан Тогда
		
		Состояние = НСтр("ru = 'Не активен'");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовНаПроизводство.Закрыт Тогда
		
		Состояние = НСтр("ru = 'Закрыт'");
		Элементы.Состояние.ЦветТекста = ЦветаСтиля.ЗакрытыйДокумент;
		
	Иначе
		
		Если Объект.СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.Рассчитан Тогда
			
			Если ГрафикЭтаповВыполнен(Объект.Ссылка) Тогда
				
				Состояние = НСтр("ru = 'Выполнен'");
				
			Иначе
				
				Состояние = НСтр("ru = 'В работе'");
				
			КонецЕсли;
			
		Иначе
			
			Состояние = НСтр("ru = 'Построение'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГрафикЭтаповВыполнен(Распоряжение)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.КодСтрокиПродукция,
	|	Т.КодСтрокиЭтапыГрафик
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(,,, Распоряжение = &Распоряжение) КАК Т
	|ГДЕ
	|	Т.ВыполненоОборот
	|		+ Т.БракОборот < Т.ЗапланированоЗаказомОборот");
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеПоНоменклатуре(ДанныеСтроки, РеквизитыЗаказа)
	
	ДанныеПоНоменклатуре = Новый Структура;
	
	ДанныеПоНоменклатуре.Вставить("КлючСвязиПродукция",     ДанныеСтроки.КлючСвязи);
	ДанныеПоНоменклатуре.Вставить("Номенклатура",           ДанныеСтроки.Номенклатура);
	ДанныеПоНоменклатуре.Вставить("Характеристика",         ДанныеСтроки.Характеристика);
	ДанныеПоНоменклатуре.Вставить("Склад",                  ДанныеСтроки.Склад);
	ДанныеПоНоменклатуре.Вставить("Подразделение",          ДанныеСтроки.Подразделение);
	ДанныеПоНоменклатуре.Вставить("Спецификация",           ДанныеСтроки.Спецификация);
	ДанныеПоНоменклатуре.Вставить("Количество",             ДанныеСтроки.Количество);
	ДанныеПоНоменклатуре.Вставить("Упаковка",               ДанныеСтроки.Упаковка);
	ДанныеПоНоменклатуре.Вставить("НачалоПроизводства",     ДанныеСтроки.НачатьНеРанее);
	ДанныеПоНоменклатуре.Вставить("ДатаПотребности",        ДанныеСтроки.НачатьНеРанее);
	ДанныеПоНоменклатуре.Вставить("КлючСвязиПолуфабрикат");
	ДанныеПоНоменклатуре.Вставить("КлючСвязиЭтапы");
	
	ДанныеПоНоменклатуре.Вставить("Назначение",             ДанныеСтроки.Назначение);
	ДанныеПоНоменклатуре.Вставить("НазначениеЗаказа",       РеквизитыЗаказа.Назначение);
	
	ДанныеПоНоменклатуре.Вставить("ПодразделениеДиспетчер", РеквизитыЗаказа.Подразделение);
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

&НаКлиенте
Процедура СброситьСтатусРасчетаГрафика()
	
	Объект.СтатусГрафикаПроизводства = СтатусГрафикТребуетсяРассчитать;
	
	Для каждого СтрокаПродукция из Объект.Продукция Цикл
		
		СтрокаПродукция.ГрафикРассчитан = Ложь;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СброситьСтатусРасчетаГрафикаНаСервере()
	
	Объект.СтатусГрафикаПроизводства = СтатусГрафикТребуетсяРассчитать;
	
	Для каждого СтрокаПродукция из Объект.Продукция Цикл
		
		СтрокаПродукция.ГрафикРассчитан = Ложь;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаменаНедействующихСпецификацийЗавершение(ДанныеЗамены, ДополнительныеПараметры) Экспорт

	Если ДанныеЗамены = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ОчиститьСообщения();
	ЗаменаНедействующихСпецификацийЗавершениеНаСервере(ДанныеЗамены);
	
	ГрафикВыпускаПродукцииТребуетсяРассчитать();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменаНедействующихСпецификацийЗавершениеНаСервере(ДанныеЗамены)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ЗаменитьСпецификации(ДанныеЗамены);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	ПродукцияСлужебныеРеквизитыПоСпецификацииЗаполнитьНаСервере();
	ПродукцияСостояниеОбеспеченияПолуфабрикатамиЗаполнитьНаСервере();
	ГрафикВыпускаПродукцииЗаполнитьНаСервере();
	
	МассивКлючейПродукция = Новый Массив;
	Для каждого ПараметрыЗамены Из ДанныеЗамены Цикл
		КлючСвязиПродукция = ?(ПараметрыЗамены.КлючСвязиПродукция = ПустойКлючСвязи, ПараметрыЗамены.КлючСвязи, ПараметрыЗамены.КлючСвязиПродукция);
		МассивКлючейПродукция.Добавить(КлючСвязиПродукция);
	КонецЦикла; 
	МассивКлючейПродукция = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивКлючейПродукция);
	
	ПланированиеПроизводства.ПроверитьЗаполнениеСпецификацииВЗаказеНаПроизводство(Объект, МассивКлючейПродукция,, Истина);
	
	УправлениеВидимостьюДоступностью("ОбновитьИндикаторы");
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляЗаменыСпецификаций()

	ДанныеДляЗаменыСпецификаций = Новый Структура;
	ДанныеДляЗаменыСпецификаций.Вставить("Продукция",        Объект.Продукция.Выгрузить());
	ДанныеДляЗаменыСпецификаций.Вставить("МатериалыИУслуги", Объект.МатериалыИУслуги.Выгрузить());
	
	АдресХранилищаПродукции = ПоместитьВоВременноеХранилище(ДанныеДляЗаменыСпецификаций, УникальныйИдентификатор);

	Возврат АдресХранилищаПродукции;
	
КонецФункции

&НаСервере
Процедура УправлениеВидимостьюДоступностью(Действие = "")
	
	ВсеДействия = ПустаяСтрока(Действие);
	
	ПроизводствоПоЗаказу = ЗначениеЗаполнено(Объект.Заказ);
	
	Если ВсеДействия Тогда
	
		Элементы.ПродукцияСклад.Видимость = ЭтотОбъект.ИспользоватьНесколькоСкладов;
		Элементы.НаправлениеДеятельности.Доступность = НЕ ЭтотОбъект.Выполняется;
		
		Элементы.ПродукцияСкопироватьСтроки.Видимость = НЕ ПроизводствоПоЗаказу;
		Элементы.ПродукцияВставитьСтроки.Видимость = НЕ ПроизводствоПоЗаказу; 
		Элементы.ТоварыОткрытьПодбор.Видимость = НЕ ПроизводствоПоЗаказу; 
		
	КонецЕсли;

	Если ВсеДействия ИЛИ Действие = "ОбновитьИндикаторы" Тогда
		
		Если ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаПроизводство) Тогда
			ВидимостьИндикатора = Документы.ЗаказНаПроизводство.ВЗаказеЕстьНедействующиеСпецификации(Объект.Продукция, Объект.МатериалыИУслуги);
		Иначе
			ВидимостьИндикатора = Ложь;
		КонецЕсли; 

		Элементы.ИндикаторПрименяютсяНедействующиеСпецификации.Видимость = ВидимостьИндикатора;
		Элементы.ИндикаторПрименяютсяНедействующиеСпецификации.Доступность = ВидимостьИндикатора И Не ЭтотОбъект.Выполняется;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИУслугиОбновитьСостояниеЗапланировать()
	
	ТекстЗапроса =
	РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаФорматыСкладов(Ложь)
	+ "ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки                                                        КАК НомерСтроки,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Этап КАК Справочник.ЭтапыПроизводства)                    КАК Этап,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура)                 КАК Номенклатура,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	МатериалыИУслуги.Запланировать                                                      КАК Запланировать
	|
	|ПОМЕСТИТЬ ВТМатериалыИУслуги
	|
	|ИЗ
	|	&МатериалыИУслуги КАК МатериалыИУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТМатериалыИУслуги КАК МатериалыИУслуги
	|       %ТекстСоединенияНастройкаПередачиМатериалов%
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособОбеспечения
	|		ПО &ПодстановкаОсновногоСпособаОбеспечения
	|
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(СпрСпособОбеспечения.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = &ПодразделениеДиспетчер
	|				И &ПодразделениеДиспетчер <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И ЕСТЬNULL(СпрСпособОбеспечения.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ <> МатериалыИУслуги.Запланировать";
	
	ТекстНастройкаПередачиМатериалов = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов("МатериалыИУслуги", "Этап.Подразделение");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
					"%ТекстСоединенияНастройкаПередачиМатериалов%", 
					ТекстНастройкаПередачиМатериалов.ТекстСоединения);
	
	ТекстЗапроса = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
		ТекстЗапроса,
		"ПодстановкаОсновногоСпособаОбеспечения",
		"МатериалыИУслуги.Номенклатура, МатериалыИУслуги.Характеристика,&ПодстановкаНоменклатура");
		
	ПодстановкаНоменклатура = 
	"ВЫБОР 
	|	КОГДА &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство) 
	|		ТОГДА &ТекстПолеСклад
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ";
	ПодстановкаНоменклатура = СтрЗаменить(ПодстановкаНоменклатура, "&ТекстПолеОснование", ТекстНастройкаПередачиМатериалов.ТекстПолеОснование);
	ПодстановкаНоменклатура = СтрЗаменить(ПодстановкаНоменклатура, "&ТекстПолеСклад", ТекстНастройкаПередачиМатериалов.ТекстПолеСклад);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПодстановкаНоменклатура", ПодстановкаНоменклатура);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МатериалыИУслуги", Объект.МатериалыИУслуги.Выгрузить(, "НомерСтроки, Этап, Номенклатура, Характеристика, Запланировать"));
	Запрос.УстановитьПараметр("ПодразделениеДиспетчер", Объект.Подразделение);
	Запрос.УстановитьПараметр("СкладПоУмолчанию", Справочники.Склады.СкладПоУмолчанию());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Объект.МатериалыИУслуги[Выборка.НомерСтроки - 1].Запланировать = НЕ Объект.МатериалыИУслуги[Выборка.НомерСтроки - 1].Запланировать;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСпецификациюНаОснованииСпецификацииЗаказаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСпецификация = СоздатьСпецификациюНаОснованииСпецификацииЗаказа(РезультатЗакрытия);
	ПоказатьЗначение(, НоваяСпецификация.Ссылка);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.РесурсныеСпецификации"));
	Оповестить("Запись_ЭтапыПроизводства");
	
	ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(НоваяСпецификация.Ссылка), 
			НоваяСпецификация.Наименование);
	
КонецПроцедуры

&НаСервере
Функция СоздатьСпецификациюНаОснованииСпецификацииЗаказа(ПараметрыСпецификации)

	ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
	
	НоваяСпецификация = УправлениеДаннымиОбИзделиях.СоздатьСпецификациюНаОснованииСпецификацииЗаказа(
							Объект, 
							ТекущиеДанные, 
							ПараметрыСпецификации);
	
	Возврат НоваяСпецификация;
	
КонецФункции

&НаКлиенте
Функция ВыбранныеЗаказы()

	СписокЗаказов = Новый Массив;
	СписокЗаказов.Добавить(Объект.Ссылка);
	
	Возврат СписокЗаказов;

КонецФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура КомандаСостояниеОбеспечения(Команда)
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Провести и продолжить?'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ТекстВопроса = НСтр("ru = 'Для перехода в рабочее место ""Состояние обеспечения"" необходимо провести документ.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеОбеспеченияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	Иначе
		СостояниеОбеспечения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РеквизитыЗаказа()
	
	РеквизитыЗаказа = Новый Структура;
	РеквизитыЗаказа.Вставить("Подразделение", Объект.Подразделение);
	РеквизитыЗаказа.Вставить("Назначение",    Объект.Назначение);
	
	Возврат РеквизитыЗаказа;
	
КонецФункции

&НаСервере
Функция РеквизитыЗаказаНаСервере()
	
	РеквизитыЗаказа = Новый Структура;
	РеквизитыЗаказа.Вставить("Подразделение", Объект.Подразделение);
	РеквизитыЗаказа.Вставить("Назначение",    Объект.Назначение);
	
	Возврат РеквизитыЗаказа;
	
КонецФункции

&НаСервере
Процедура СохранитьПараметрыАктуализацииМаршрутныхЛистов(СтруктураДанных)
	
	Если НЕ СтруктураДанных.Свойство("ПараметрыАктуализацииМаршрутныхЛистов") Тогда 
		Возврат;
	КонецЕсли;
	
	Если СписокКодовСтрокДляАктуализацииМЛ = Неопределено Тогда
		СписокКодовСтрокДляАктуализацииМЛ = Новый СписокЗначений;
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции ИЗ СтруктураДанных.ПараметрыАктуализацииМаршрутныхЛистов.МассивКодовСтрокПродукции Цикл
		СписокКодовСтрокДляАктуализацииМЛ.Добавить(ЭлементКоллекции);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПеренестиПараметрыАктуализацииМаршрутныхЛистовВОбъект(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(СписокКодовСтрокДляАктуализацииМЛ) Тогда
		
		ПланированиеПроизводства.ДобавитьПараметрыАктуализацииМаршрутныхЛистов(
			ТекущийОбъект.ДополнительныеСвойства, ТекущийОбъект.Ссылка, СписокКодовСтрокДляАктуализацииМЛ.ВыгрузитьЗначения());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладПоУмолчанию()
	
	Если ИспользоватьНесколькоСкладов Тогда
		СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	Иначе
		СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обеспечение

&НаСервере
Функция ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение)

	ТаблицаОбеспечения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	ТекстОповещения    = Документы.ЗаказНаПроизводство.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "Заказ", ТаблицаОбеспечения);

	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ТоварыДляОбеспеченияВХранилище(КлючСвязи)

	Возврат Документы.ЗаказНаПроизводство.ТоварыДляОбеспечения(Объект, КлючСвязи);

КонецФункции

&НаСервере
Процедура ЗаполнитьНазначениеПоУмолчаниюДляЗаказаНаПроизводствоПоЗаказуДавальца()
	
	Если Объект.ПроизводствоПоЗаказу И ЗначениеЗаполнено(Объект.Заказ) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		НазначениеЗаказа = Справочники.Назначения.НазначениеЗаказа(Объект.Заказ, Неопределено);
		НаправленияДеятельностиКэшированныеЗначения.НазначениеПоУмолчанию = НазначениеЗаказа;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
