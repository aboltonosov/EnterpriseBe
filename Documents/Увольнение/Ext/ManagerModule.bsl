#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.увольнение - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.Увольнение - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ПеремещаемыеСовместители = Неопределено;
	
	Если Объект <> Неопределено И ВидыУчетов = Неопределено Тогда
		ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(Движения);
	КонецЕсли;
	
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ПервоеПроведение")
		И ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент) Тогда
		
		СсылкаНаДокумент = РеквизитыДляПроведения.ИсправленныйДокумент;
		
	Иначе
		СсылкаНаДокумент = РеквизитыДляПроведения.Ссылка;
	КонецЕсли;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, СсылкаНаДокумент);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(СсылкаНаДокумент, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
	
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, Объект, Отказ, Истина);
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияРегистраОстатков(
			Движения.ЗанятыеПозицииШтатногоРасписания, РеквизитыДляПроведения.ИсправленныйДокумент);
		
		// Сбор сведений об увольняемых сотрудниках
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СоздатьВТКадровыеДанныеУвольняемыхСотрудников(МенеджерВременныхТаблиц, РеквизитыДляПроведения.Ссылка);
		
		ПеремещаемыеСовместители = КадровыйУчетРасширенный.ОсновныеСотрудникиВнутреннихСовместителей(
			РеквизитыДляПроведения.Организация, ДатыУвольненияСотрудников(РеквизитыДляПроведения.Ссылка));
		
		КадровыеСобытия = КадровыеСобытияУвольнениеПоВременнойТаблице(МенеджерВременныхТаблиц);
		
		КадровыйУчетРасширенный.СформироватьКадровыеДвиженияПриУвольнении(
			РеквизитыДляПроведения.Ссылка, Движения, КадровыеСобытия, ПеремещаемыеСовместители);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") 
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("Подработки");
			Модуль.ПрекратитьПодработкиСотрудников(РеквизитыДляПроведения.Ссылка, Движения, КадровыеСобытия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ДокументРассчитан Тогда 
		ДанныеДляПроведения = ДанныеДляПроведения(
			РеквизитыДляПроведения, МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.Организация, ПеремещаемыеСовместители, СтруктураВидовУчета);
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			// Прекращаем плановые начисления
			РасчетЗарплатыРасширенный.ПрекратитьВсеПлановыеНачисленияПоТаблицеСотрудников(
				Движения, ДанныеДляПроведения.ДанныеДляРегистрацииПрекращенияПлановыхНачислений);
			// Прекращаем плановые удержания
			РасчетЗарплатыРасширенный.ПрекратитьВсеПлановыеУдержанияПоТаблицеСотрудников(
				Движения, ДанныеДляПроведения.ДанныеДляРегистрацииПрекращенияПлановыхУдержаний);
			// Учет зарплаты
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(
				Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(
				Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(
				Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
			ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(
				Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				Модуль.СформироватьДвиженияНачислений(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации);
			КонецЕсли;
			
			ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ);
			
#Область РегистрацияДоходовВУчетеНДФЛ
			
			// - Регистрация бухучета начислений и удержаний, выполняется до вызова регистрации доходов в учете НДФЛ.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено);
						
			// - Регистрация бухучета займов.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						Неопределено, ДанныеДляПроведения.УдержанияЗаймов, Неопределено);
			
			// НДФЛ
			ДатаОперацииПоНалогам = УчетНДФЛРасширенный.ДатаОперацииПоДокументу(РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации);
			
			// - Регистрация материальной выгоды в учете НДФЛ.
			УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(
				Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.МатериальнаяВыгода, Ложь, , ДокументСсылка);
			
			ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(РеквизитыДляПроведения, Движения, ДанныеДляПроведения, ДатаОперацииПоНалогам, Отказ);
			
#КонецОбласти

			РасчетЗарплатыРасширенный.СформироватьДвиженияКорректировкиВыплатыПоВременнойТаблицеНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, ДанныеДляПроведения, Истина, Истина);
			
			// - Регистрация начислений и удержаний в учете начислений и удержаний.
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам,
				ДанныеДляПроведения.УдержанияПоСотрудникам,	Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
			// - Регистрация отработанного времени в учете начислений и удержаний.
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, РеквизитыДляПроведения.ПорядокВыплаты, Истина);
				
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
				Модуль.ЗарегистрироватьНачисленияУдержания(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты);
				Модуль.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, ДанныеДляПроведения, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты);
			КонецЕсли;
			
			// - Регистрация бухучета НДФЛ.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						Неопределено, Неопределено, ДанныеДляПроведения.НДФЛПоСотрудникам);
			
			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
			УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СтраховыеВзносы);
			УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.СтраховыеВзносы);
			
			// Займы
			// - взаиморасчеты по займам
			ЗаймыСотрудникам.ЗарегистрироватьВзаиморасчетыПоЗаймам(Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ);
			// - Регистрация займов в учете заработной платы.
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьПогашениеЗаймов(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияЗаймов, РеквизитыДляПроведения.ПорядокВыплаты);
			УчетНДФЛ.СформироватьНалогиВычеты(
				Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
			УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
			УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПорядокВыплаты);
			УчетСтраховыхВзносов.СформироватьПособия(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Пособия, ДанныеДляПроведения.ПособияПоУходу);
				
			// - Регистрация бухучета займов.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
				Неопределено, Неопределено, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
				
			ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
			ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
			ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
			ПараметрыДвиженийОтпусков.РабочиеПериоды = ДанныеДляПроведения.РабочиеПериодыКомпенсацийОтпусков;
			ПараметрыДвиженийОтпусков.Основания = ДанныеДляПроведения.ОснованияКомпенсацийОтпусков;
			ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
			ПараметрыДвиженийОтпусков.ДатыНачалаКомпенсаций = ДанныеДляПроведения.ДатыНачалаКомпенсаций;
			ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
			
			ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
			ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.УдержанияОтпусков;
			ПараметрыДвиженийОтпусков.РабочиеПериоды = ДанныеДляПроведения.РабочиеПериодыУдержанийОтпусков;
			ПараметрыДвиженийОтпусков.Основания = ДанныеДляПроведения.ОснованияУдержанийОтпусков;
			ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
			ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусковПоУдержаниям(Движения, ПараметрыДвиженийОтпусков);
			
			// Прекращение вычетов
			Для каждого МесяцУвольнения Из ДанныеДляПроведения.ДанныеДляПрекращенияВычетов Цикл
				
				КадровыйУчет.СформироватьПрекращениеВычетовСтандартныхИНаДетей(
					Движения, МесяцУвольнения.Значение, РеквизитыДляПроведения.Организация, КонецМесяца(МесяцУвольнения.Ключ) + 1, Отказ);
				
			КонецЦикла;
			
			КадровыйУчетРасширенный.ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеДляПроведения.ДанныеРеестраОтпусков, Отказ);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				Модуль.ЗарегистрироватьКорректировкиДляРасчетаСохраняемогоДенежногоСодержанияСотрудников(ДанныеДляПроведения.КорректировкиДляРегистрацииДенежногоСодержания);
				
				Модуль.ЗарегистрироватьНачисленияСоставМесячногоДенежногоСодержания(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СоставМесячногоДенежногоСодержания);				
			КонецЕсли;
			КадровыйУчетРасширенный.ЗарегистрироватьВРеестреКадровыхПриказов(Движения, ДанныеДляПроведения.ДанныеРеестраКадровыхПриказов, Отказ);
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			// Учет среднего заработка
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(
				Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
		КонецЕсли;
	Иначе
		ДанныеДляПроведения = Новый Структура;
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			ДобавитьДанныеДляРегистрацииСостоянийСотрудников(ДанныеДляПроведения, РеквизитыДляПроведения);
			ДобавитьДанныеДляРегистрацииДокумента(ДанныеДляПроведения, РеквизитыДляПроведения, ПеремещаемыеСовместители, РеквизитыДляПроведения.Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(
			Движения, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.ДанныеДляРегистрацииСостоянийСотрудников);
		
		УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(
			Движения, ДанныеДляПроведения.ДанныеДляРегистрацииВУчетаСтажаПФР);
		
		// Записываем показатели суммированного учета (в случае необходимости).
		ЗаписатьЗначенияПоказателейРасчетаЗарплаты(Движения, ДанныеДляПоказателейСверхурочных(РеквизитыДляПроведения.Ссылка));
		
		// Регистрация перерасчетов
		Если ЕстьПерерасчеты Тогда
			ПерерасчетЗарплаты.РегистрацияПерерасчетов(
				Движения, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		КонецЕсли;
		
		УчетСреднегоЗаработка.УдалитьПричиныПерерасчетов(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
			Модуль.СформироватьДвиженияИсторииКадровогоРезерва(Движения, ДанныеДляПроведения, "ДанныеКадровогоРезерва");
		КонецЕсли;
		
		ПерерасчетЗарплаты.УдалениеПерерасчетовПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, СтруктураВидовУчета);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ об увольнении
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
	КомандаПечати.Идентификатор = "ПФ_MXL_Т8";
	КомандаПечати.Представление = НСтр("ru = 'Приказ об увольнении (Т-8)'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ЧтениеНачисленнойЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		// Записка-расчет при увольнении.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_Т61";
		КомандаПечати.Представление = НСтр("ru = 'Записка-расчет при увольнении (Т-61)'");
		КомандаПечати.Порядок = 20;
		КомандаПечати.ФункциональныеОпции = "РаботаВХозрасчетнойОрганизации";
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
	// Расчет среднего заработка
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, "Документ.Увольнение");
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработкаВыходногоПособия(КомандыПечати, "Документ.Увольнение");
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка0504425(КомандыПечати, "Документ.Увольнение");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДобавитьКомандыПечатиСохраняемогоДенежногоСодержания(КомандыПечати);
	КонецЕсли; 
	
	// Подробный расчет начислений.
	РасчетЗарплатыРасширенный.ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати);

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
	КомандаПечати.Идентификатор = "ПФ_MXL_СправкаОСреднемЗаработкеДляПособияПоБезработице";
	КомандаПечати.Представление = НСтр("ru = 'Справка для пособия по безработице'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если КадровыйУчетРасширенный.ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
			КомандыСозданияДокументов, Метаданные.Документы.Увольнение);
		
	КонецЕсли; 
	
КонецФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработка");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка", НСтр("ru = 'Расчет среднего заработка'"), ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаВыходногоПособия") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов, "РасчетСреднегоЗаработкаВыходногоПособия");
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработкаВыходногоПособия");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаВыходногоПособия", НСтр("ru = 'Расчет среднего заработка (для выходного пособия)'"), ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаФорма0504425") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка0504425(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка0504425(ДанныеДокументов, 
		ОбъектыПечати,
		"ПФ_MXL_ЗапискаРасчетФорма0504425");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
			"РасчетСреднегоЗаработкаФорма0504425", 
			НСтр("ru = 'Записка-расчет (0504425)'"), 
			ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаФорма0504425с2015") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка0504425(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка0504425(ДанныеДокументов,
		ОбъектыПечати,
		"ПФ_MXL_ЗапискаРасчетФорма0504425с2015");
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"РасчетСреднегоЗаработкаФорма0504425с2015", 
			НСтр("ru = 'Записка-расчет (0504425) с 2015 года'"), 
			ТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок, ИмяМакета = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.ДатаУвольнения КАК ДатаНачалаСобытия,
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Организация,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Номер КАК НомерДокумента,
	|	Документ.ДатаУвольнения КАК ДатаНачалаОтсутствия,
	|	Документ.ДатаУвольнения КАК ДатаОкончания,
	|	Документ.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоРасчетногоПериода,
	|	Документ.ПериодРасчетаСреднегоЗаработкаОкончание КАК ОкончаниеРасчетногоПериода,
	|	Документ.ВидРасчетаКомпенсацииУдержанияОтпуска КАК Начисление,
	|	Документ.СуммированныйУчет,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.КодПоОКПО,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации,
	|	Документ.ПериодРегистрации КАК НачалоПериодаРасчетаЗарплаты,
	|	ИСТИНА КАК РассчитатьЗарплату
	|ИЗ
	|	Документ.Увольнение КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО Документ.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И Документ.ДатаУвольнения = КадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Документ.Организация = Организации.Ссылка
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	
	ДанныеДокументов = Новый Массив;
	
	Если Результат.Пустой() Тогда
		Возврат ДанныеДокументов;
	КонецЕсли;
		
	ТаблицыДанныхОСреднем = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке("Увольнение", МассивСсылок);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Если ИмяМакета = "РасчетСреднегоЗаработкаВыходногоПособия" Тогда
			СпособРасчета = Неопределено;
			ИспользоватьСреднеЧасовойЗаработок = Выборка.СуммированныйУчет;
		Иначе
			ИспользоватьСреднеЧасовойЗаработок = Ложь;
			МассивОтпусков = ВидыОтпусковОбъекта(Выборка.Ссылка.ПолучитьОбъект());
			Если ОстаткиОтпусков.СодержатсяТолькоОтпускаПоРабочимДням(МассивОтпусков, Выборка.Сотрудник, Выборка.ДатаНачалаСобытия) Тогда
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке;
			Иначе
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням;
			КонецЕсли;
		КонецЕсли;
			
		ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработка.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
		
		ДанныеОНачислениях 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОНачислениях"], 		"Ссылка", Выборка.Ссылка);
		ДанныеОВремени 		= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОВремени"], 			"Ссылка", Выборка.Ссылка);
		ДанныеОбИндексации 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОбИндексации"], 		"Ссылка", Выборка.Ссылка);
		
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
		ДополнительныеПараметры.ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
		ДополнительныеПараметры.НачалоПериода = Выборка.НачалоРасчетногоПериода;
		ДополнительныеПараметры.ОкончаниеПериода = Выборка.ОкончаниеРасчетногоПериода;
		ДополнительныеПараметры.ПоЧасам = ИспользоватьСреднеЧасовойЗаработок;
		ДополнительныеПараметры.СпособРасчетаОтпуска = СпособРасчета;

		ДанныеДокумента.ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДополнительныеПараметры);
		
		ДанныеДокумента.ПараметрыРасчета.СпособРасчета = СпособРасчета;
		ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок = ИспользоватьСреднеЧасовойЗаработок;
		ДанныеДокумента.ПараметрыРасчета.НачалоРасчетногоПериода = Выборка.НачалоРасчетногоПериода;
		ДанныеДокумента.ПараметрыРасчета.ОкончаниеРасчетногоПериода = Выборка.ОкончаниеРасчетногоПериода;
		
		ДанныеДокументов.Добавить(ДанныеДокумента);
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.ДатаУвольнения КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.Увольнение КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости,ДатаПриема,ПриказОПриемеДатаЗавершенияТрудовогоДоговора");
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудники";
	Запрос.Выполнить();

КонецПроцедуры

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка0504425(МассивСсылок) Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос;
	ЗапросПоОрганизациям.УстановитьПараметр("МассивСсылок", МассивСсылок);
	ЗапросПоОрганизациям.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Организация КАК Организация,
	|	Документ.ДатаУвольнения КАК ДатаСобытия
	|ИЗ
	|	Документ.Увольнение КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	
	ТаблицаРезультатовПоОрганизациям = ЗапросПоОрганизациям.Выполнить().Выгрузить();
	
	ОрганизацииИСведенияОНих = ЗарплатаКадрыРасширенный.ПолучитьИННиКППОрганизаций(ТаблицаРезультатовПоОрганизациям);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.ДатаУвольнения КАК Дата,
	|	Документ.ГлавныйБухгалтер,
	|	Документ.Бухгалтер,
	|	Документ.Исполнитель
	|ПОМЕСТИТЬ ВТСотрудникиИПериод
	|ИЗ
	|	Документ.Увольнение КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "ГлавныйБухгалтер,Бухгалтер,Исполнитель", "ВТСотрудникиИПериод");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ДополнительныеОтпуска.ДнейКомпенсацииУдержания) КАК КоличествоДней,
	|	ДополнительныеОтпуска.Ссылка
	|ПОМЕСТИТЬ ВТДополнительныеОтпуска
	|ИЗ
	|	Документ.Увольнение.ДополнительныеОтпуска КАК ДополнительныеОтпуска
	|ГДЕ
	|	ДополнительныеОтпуска.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДополнительныеОтпуска.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.ВидРасчетаКомпенсацииУдержанияОтпуска КАК Начисление,
	|	Документ.ДатаУвольнения КАК ДатаНачалаОтсутствия,
	|	Документ.ДнейКомпенсацииУдержанияОтпуска КАК ДнейОсновногоОтпуска,
	|	ЕСТЬNULL(ВТДополнительныеОтпуска.КоличествоДней, 0) КАК ДнейДополнительногоОтпуска,
	|	Документ.ДнейКомпенсацииУдержанияОтпуска + ЕСТЬNULL(ВТДополнительныеОтпуска.КоличествоДней, 0) КАК ДнейОтпускаВсего,
	|	Документ.РабочийГодС КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Документ.РабочийГодПо КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ФИОГлавногоБухгалтера.РасшифровкаПодписи КАК ГлавныйБухгалтерРасшифровкаПодписи,
	|	ФИОБухгалтера.РасшифровкаПодписи КАК БухгалтерРасшифровкаПодписи,
	|	ФИОИсполнителя.РасшифровкаПодписи КАК ИсполнительРасшифровкаПодписи,
	|	Документ.ДолжностьИсполнителя
	|ИЗ
	|	Документ.Увольнение КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО Документ.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И Документ.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО Документ.Ссылка = ФИОБухгалтера.Ссылка
	|			И Документ.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОИсполнителя
	|		ПО Документ.Ссылка = ФИОИсполнителя.Ссылка
	|			И Документ.Исполнитель = ФИОИсполнителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеОтпуска КАК ВТДополнительныеОтпуска
	|		ПО Документ.Ссылка = ВТДополнительныеОтпуска.Ссылка
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеДокументов = Новый Массив;
	
	БазовыеДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок);
	
	Отбор = Новый Структура("Ссылка");
	
	Для каждого БазовыеДанныеДокумента Из БазовыеДанныеДокументов Цикл
		
		Выборка.Сбросить();		
		
		ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработка.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка0504425(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, БазовыеДанныеДокумента, , "РеквизитыДокумента");   
		
		// Т.к. структура реквизитов документа в базовых и расширенных данных различается их надо обработать отдельно.
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, БазовыеДанныеДокумента.РеквизитыДокумента);		
		Отбор.Ссылка = БазовыеДанныеДокумента.РеквизитыДокумента.Ссылка;
		Если Выборка.НайтиСледующий(Отбор) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка); 
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, 
			ОрганизацииИСведенияОНих.Получить(БазовыеДанныеДокумента.РеквизитыДокумента.Организация),
			"ИНН, КПП"); 
		
		ДанныеДокументов.Добавить(ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

#КонецОбласти

#Область ПечатьПодробногоРасчетаНачислений

// Заполняет структуру - описание документа для формирования печатной формы подробного расчета начислений.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в Обработки.ПечатьРасчетаНачислений.ОписаниеДокументаРасчетаНачислений.
//
Процедура ЗаполнитьОписаниеДокументаРасчетаНачислений(ОписаниеДокумента) Экспорт
	КатегорииСпециализированногоНачисления = Новый Массив;
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	ОписаниеДокумента.Вставить("ИмяДокумента", 								МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", 							МетаданныеДокумента.Синоним);
	ОписаниеДокумента.Вставить("ЕстьРасчетСреднегоЗаработка", 				Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетСпециализированныхНачислений",	Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетЗарплаты", 						Истина);
	ОписаниеДокумента.Вставить("КатегорииСпециализированногоНачисления", 	КатегорииСпециализированногоНачисления);
	ОписаниеДокумента.Вставить("НазваниеСпециализированногоНачисления", 	НСтр("ru='Расчет при увольнении'"));
КонецПроцедуры 

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ДанныеДокументов) Экспорт
	РасчетЗарплатыРасширенный.ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ПустаяСсылка().Метаданные().Имя, ДанныеДокументов);	
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок) Экспорт 
	Возврат РасчетЗарплатыРасширенный.НачисленияПоказателиДокументов(МассивСсылок, ПустаяСсылка().Метаданные().Имя);	
КонецФункции

#КонецОбласти

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок, ПоСпискуСотрудников = Ложь, ПеремещаемыеСовместители = Неопределено, Организация = Неопределено) Экспорт
	
	ДанныеДляРегистрацииВУчете = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Увольнение.Ссылка КАК Ссылка,
		|	Увольнение.Сотрудник КАК Сотрудник,
		|	Увольнение.ДатаУвольнения,
		|	Увольнение.Ссылка.Организация КАК Организация
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В(&МассивСсылок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник";
	
	Если ПоСпискуСотрудников Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДанныеДляРегистрацииВУчетеПоДокументу = УчетСтажаПФР.ДанныеДляРегистрацииВУчетеСтажаПФР();
		ДанныеДляРегистрацииВУчете.Вставить(Выборка.Ссылка, ДанныеДляРегистрацииВУчетеПоДокументу);
		
		Пока Выборка.Следующий() Цикл
			
			ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
			ОписаниеПериода.Сотрудник = Выборка.Сотрудник;	
			ОписаниеПериода.ДатаНачалаПериода = КонецДня(Выборка.ДатаУвольнения) + 1;
			ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.Увольнение;
			
			РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
			
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Организация", Выборка.Организация);
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Должность", Справочники.Должности.ПустаяСсылка());
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ДолжностьПоШтатномуРасписанию", Справочники.ШтатноеРасписание.ПустаяСсылка());
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ГрафикРаботы", Справочники.ГрафикиРаботыСотрудников.ПустаяСсылка());
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "КоличествоСтавок", 0);
			УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "ВидСтажаПФР", Перечисления.ВидыСтажаПФР2014.НеВключаетсяВСтраховойСтаж);
			
		КонецЦикла;
		
		Если ПеремещаемыеСовместители <> Неопределено Тогда
			
			Для каждого ДанныеПеремещаемогоСовместителя Из ПеремещаемыеСовместители Цикл
				
				ОписаниеПериода = УчетСтажаПФР.ОписаниеРегистрируемогоПериода();
				ОписаниеПериода.Сотрудник = ДанныеПеремещаемогоСовместителя.Сотрудник;
				ОписаниеПериода.ДатаНачалаПериода = ДанныеПеремещаемогоСовместителя.ДатаСобытия;
				ОписаниеПериода.Состояние = Перечисления.СостоянияСотрудника.Работа;
				ОписаниеПериода.ВидЗанятости = ДанныеПеремещаемогоСовместителя.ВидЗанятости;
				
				РегистрируемыйПериод = УчетСтажаПФР.ДобавитьЗаписьВДанныеДляРегистрацииВУчета(ДанныеДляРегистрацииВУчетеПоДокументу, ОписаниеПериода);
				УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "Организация", Организация);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляРегистрацииВУчете;
	
КонецФункции

#Область ОбработкаПроверкиЗаполнения

Функция ДатыУвольненияСотрудников(Ссылка)
	
	ПроверяемыеДаты = Новый Соответствие;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаУвольнения КАК ДатаУвольнения
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаУвольнения,
		|	Сотрудник";
	
	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДатаУвольнения") Цикл
		
		СписокСотрудников = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокСотрудников.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		
		ПроверяемыеДаты.Вставить(Выборка.ДатаУвольнения, СписокСотрудников);;
		
	КонецЦикла;
	
	Возврат ПроверяемыеДаты;
	
КонецФункции

Процедура ПроверитьЗаполнениеКомпенсацииДополнительныхОтпусков(ДокументОбъект, Отказ, ВыводитьСообщения = Истина, ПраваНаДокумент = Неопределено) Экспорт
	
	ТекстСообщения = "";
	СтруктураСообщений  = Новый Соответствие;
	
	Если ПраваНаДокумент = Неопределено Тогда 
		ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(ДокументОбъект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоСписочныйДокумент = ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.Увольнение");
	
	НомерСтрокиСотрудника = 0;
	НомерСтрокиОтпускаСотрудника = 0;
	Сотрудник = Неопределено;
	Для каждого ДополнительныйОтпуск Из ДокументОбъект.ДополнительныеОтпуска Цикл
		
		Если ЭтоСписочныйДокумент Тогда
			
			СтрокиСотрудников = ДокументОбъект.Сотрудники.НайтиСтроки(Новый Структура("ИдентификаторСтрокиСотрудника", ДополнительныйОтпуск.ИдентификаторСтрокиСотрудника));
			Если СтрокиСотрудников.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСотрудника = СтрокиСотрудников[0];
			НомерСтрокиСотрудника = СтрокаСотрудника.НомерСтроки;
			
			Если Сотрудник <> СтрокаСотрудника.Сотрудник Тогда
				
				Сотрудник = СтрокаСотрудника.Сотрудник;
				НомерСтрокиОтпускаСотрудника = 1;
				
			Иначе
				НомерСтрокиОтпускаСотрудника = НомерСтрокиОтпускаСотрудника + 1;
			КонецЕсли;
			
		Иначе
			
			Сотрудник = ДокументОбъект.Сотрудник;
			НомерСтрокиОтпускаСотрудника = ДополнительныйОтпуск.НомерСтроки;
			
		КонецЕсли;
		
		Если ДополнительныйОтпуск.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений  
			И Не ЗначениеЗаполнено(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания)
			И Не (ПолучитьФункциональнуюОпцию("СпособУдержанияИзлишнеНачисленныхОтпускных") = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм")
				И ДополнительныйОтпуск.ПризнакКомпенсацииУдержания = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом")) Тогда
			
			Если ЭтоСписочныйДокумент Тогда
				ТекстСообщения = НСтр("ru = 'По сотруднику %2, в строке %1 не заполнен вид расчета компенсации (удержания).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В строке %1 не заполнен вид расчета компенсации (удержания).'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерСтрокиОтпускаСотрудника, Сотрудник);
			
			Если ЭтоСписочныйДокумент Тогда
				НомерСтрокиДанных = НомерСтрокиСотрудника - 1;
				ПутьКДанным = "Сотрудники[" + НомерСтрокиДанных + "]";
			Иначе
				НомерСтрокиДанных = ДополнительныйОтпуск.НомерСтроки - 1;
				ПутьКДанным = "ДополнительныеОтпуска[" + НомерСтрокиДанных + "]";
			КонецЕсли;
			
			СтруктураСообщений.Вставить(ПутьКДанным, ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДополнительныйОтпуск.ДнейКомпенсацииУдержания) Тогда
			
			Если ЭтоСписочныйДокумент Тогда
				ТекстСообщения = НСтр("ru = 'По сотруднику %2, в строке %1 не заполнено количество дней компенсации (удержания).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В строке %1 не заполнено количество дней компенсации (удержания).'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерСтрокиОтпускаСотрудника, Сотрудник);
			
			НомерСтрокиДанных = ДополнительныйОтпуск.НомерСтроки - 1;
			СтруктураСообщений.Вставить("ДополнительныеОтпуска[" + НомерСтрокиДанных + "]", ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыводитьСообщения Тогда
		Для каждого Сообщение Из СтруктураСообщений Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение.Значение, , "Объект" + ?(Сообщение.Ключ = "", "", ".") + Сообщение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураСообщений.Количество() > 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПериодДействияНачислений(ДокументОбъект, Отказ)
	
	Если Не ДокументОбъект.ДокументРассчитан Тогда
	  Возврат;
	КонецЕсли;
	
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = ДокументОбъект.Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Начисления", НСтр("ru='Начисления'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Пособия", НСтр("ru='Пособия'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Удержания", НСтр("ru='Удержания'"), "Удержание"));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru='Перерасчет прошлого периода'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ДокументОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаполненностьРеквизитовКомпенсацииУдержанияОтпусков(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, ПраваНаДокумент)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ДнейКомпенсацииУдержанияОтпуска");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ВидРасчетаКомпенсацииУдержанияОтпуска");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ВыходноеПособие");
		
		ПроверяемаяКоллекция = ДокументОбъект.Сотрудники;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДнейКомпенсацииУдержанияОтпуска");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидРасчетаКомпенсацииУдержанияОтпуска");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВыходноеПособие");
		
		ПроверяемаяКоллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
		
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.Документы.Увольнение;
	СинонимДнейКомпенсацииУдержанияОтпуска = МетаданныеДокумента.Реквизиты.ДнейКомпенсацииУдержанияОтпуска.Синоним;
	СинонимВидРасчетаКомпенсацииУдержанияОтпуска = МетаданныеДокумента.Реквизиты.ВидРасчетаКомпенсацииУдержанияОтпуска.Синоним;
	СинонимВыходноеПособие = МетаданныеДокумента.Реквизиты.ВыходноеПособие.Синоним;
	
	НомерСтроки = 0;
	Для каждого ЭлементКоллекции Из ПроверяемаяКоллекция Цикл
		
		Если ЭлементКоллекции.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать
			И Не ЗначениеЗаполнено(ЭлементКоллекции.ДнейКомпенсацииУдержанияОтпуска) Тогда 
			
			Если ПроверяемаяКоллекция.Количество() = 1 Тогда
				ТекстСообщения = НСтр("ru='Поле ""%1"" не заполнено'");
				ПутьКПолю = "Объект.ДнейКомпенсацииУдержанияОтпуска";
			Иначе
				ТекстСообщения = НСтр("ru='Для сотрудника %2 не заполнено поле ""%1""'");
				ПутьКПолю = "Объект.Сотрудники[" + НомерСтроки + "].ДнейКомпенсацииУдержанияОтпуска";
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				СинонимДнейКомпенсацииУдержанияОтпуска,
				ЭлементКоллекции.Сотрудник);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКПолю, , Отказ);
			
		КонецЕсли;
		
		Если ДокументОбъект.ДокументРассчитан И ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений 
			И ЭлементКоллекции.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать Тогда
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции.ВидРасчетаКомпенсацииУдержанияОтпуска)
				И Не (ПолучитьФункциональнуюОпцию("СпособУдержанияИзлишнеНачисленныхОтпускных") = ПредопределенноеЗначение("Перечисление.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм")
				И ЭлементКоллекции.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом")) Тогда
			
				Если ПроверяемаяКоллекция.Количество() = 1 Тогда
					ТекстСообщения = НСтр("ru='Поле ""%1"" не заполнено'");
					ПутьКПолю = "Объект.ВидРасчетаКомпенсацииУдержанияОтпуска";
				Иначе
					ТекстСообщения = НСтр("ru='Для сотрудника %2 не заполнено поле ""%1""'");
					ПутьКПолю = "Объект.Сотрудники[" + НомерСтроки + "].ВидРасчетаКомпенсацииУдержанияОтпуска";
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
					СинонимВидРасчетаКомпенсацииУдержанияОтпуска,
					ЭлементКоллекции.Сотрудник);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКПолю, , Отказ);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементКоллекции.ДнейЧасовВыходногоПособия)
				И Не ЗначениеЗаполнено(ЭлементКоллекции.ВыходноеПособие) Тогда
			
				Если ПроверяемаяКоллекция.Количество() = 1 Тогда
					ТекстСообщения = НСтр("ru='Поле ""%1"" не заполнено'");
					ПутьКПолю = "Объект.ВыходноеПособие";
				Иначе
					ТекстСообщения = НСтр("ru='Для сотрудника %2 не заполнено поле ""%1""'");
					ПутьКПолю = "Объект.Сотрудники[" + НомерСтроки + "].ВыходноеПособие";
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
					СинонимВыходноеПособие,
					ЭлементКоллекции.Сотрудник);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКПолю, , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьНеобходимостьПроверкиДатыВыплаты(ДокументОбъект, ПроверяемыеРеквизиты, ПраваНаДокумент)
	
	Если Не ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда 
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПланируемаяДатаВыплаты");
		Возврат;
	КонецЕсли;
	
	МассивНачисленийДокумента = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачисленийДокумента, ДокументОбъект.Начисления.ВыгрузитьКолонку("Начисление"), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачисленийДокумента, ДокументОбъект.НачисленияПерерасчет.ВыгрузитьКолонку("Начисление"), Истина);
	
	Если НЕ УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(ДокументОбъект.ПорядокВыплаты, МассивНачисленийДокумента) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПланируемаяДатаВыплаты");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхДляПроведенияДокумента

Процедура СоздатьВТКадровыеДанныеУвольняемыхСотрудников(МенеджерВременныхТаблиц, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ДатаУвольнения КАК Период,
		|	ТаблицаДокумента.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, "ВидДоговора,ДолжностьПоШтатномуРасписанию,КоличествоСтавок,ВидЗанятости,ГоловнаяОрганизация");
	
КонецПроцедуры

Функция КадровыеСобытияУвольнение(Сотрудник, ДатаУвольнения, ФизическоеЛицо = Неопределено, Позиция = Неопределено, КоличествоСтавок = Неопределено, ВидДоговора = Неопределено) Экспорт
	
	Если ВидДоговора = Неопределено Тогда
		ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор;
	КонецЕсли;
	
	// Создаем таблицу событий
	КадровыеСобытия = КадровыйУчетРасширенный.ПустаяТаблицаКадровыхСобытийПриУвольнении();
	
	// Заполняем таблицу
	НовоеСобытие = КадровыеСобытия.Добавить();
	НовоеСобытие.Сотрудник = Сотрудник;
	НовоеСобытие.ДатаСобытия = КонецДня(ДатаУвольнения) + 1;
	НовоеСобытие.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;
	НовоеСобытие.ФизическоеЛицо = ФизическоеЛицо;
	
	Возврат КадровыеСобытия;
	
КонецФункции

Функция КадровыеСобытияУвольнениеПоВременнойТаблице(МенеджерВременныхТаблиц)
	
	КадровыеСобытия = КадровыйУчетРасширенный.ПустаяТаблицаКадровыхСобытийПриУвольнении();
	КадровыеСобытия.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Период КАК ДатаУвольнения,
		|	ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.Период, ДЕНЬ, 1) КАК ДатаСобытия,
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
		|	КадровыеДанныеСотрудников.ВидДоговора КАК ВидДоговора,
		|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
		|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(КадровыеСобытия.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КадровыеСобытия;
	
КонецФункции

Функция ДанныеДляПроведения(РеквизитыДляПроведения, МенеджерВременныхТаблиц, ПериодРегистрации, Организация, ПеремещаемыеСовместители = Неопределено, СтруктураВидовУчета = Неопределено) Экспорт
	
	Если СтруктураВидовУчета = Неопределено Тогда
		СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
		Для Каждого ВидУчета Из СтруктураВидовУчета Цикл
			СтруктураВидовУчета[ВидУчета.Ключ] = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляПроведения = РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		ДобавитьДанныеДляРегистрацииПрекращенияПлановыхНачислений(ДанныеДляПроведения, МенеджерВременныхТаблиц);
		ДобавитьДанныеДляРегистрацииПрекращенияПлановыхУдержаний(ДанныеДляПроведения, МенеджерВременныхТаблиц);
		ДобавитьДанныеДляРегистрацииСостоянийСотрудников(ДанныеДляПроведения, РеквизитыДляПроведения);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") 
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("Подработки");
			Модуль.ДобавитьДанныеДляРегистрацииПрекращенияПодработок(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		КонецЕсли;
		
		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет,Льготы", "Ссылка.ПериодРегистрации");
		РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления");
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			ПараметрыУправленческаяЗарплата = Модуль.ДополнительныеПараметрыПодготовкиДанныхДляПроведения();
			ПараметрыУправленческаяЗарплата.ПолеДатыДействия = "Ссылка.ПериодРегистрации"; 
			ПараметрыУправленческаяЗарплата.ПолеВидаНачисления = "Начисление"; 
			Модуль.ПриПодготовкеДанныхДляПроведенияДокументаРасчетаЗарплаты(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ПараметрыУправленческаяЗарплата);
		КонецЕсли;
		
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВД(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДанныеДляПроведения.НачисленияПоСотрудникам);
		
		ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации);
		
		УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьСведенияОПособияхПоУходуЗаРебенком(РеквизитыДляПроведения.Ссылка, ПособиеПлатитУчастникПилотногоПроекта, ДанныеДляПроведения, , "ПособияПерерасчет");
		
		РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплатыРасширенный.ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			КорректировкиДляРегистрацииДенежногоСодержания = Модуль.СведенияОКорректировкахСотрудниковДляРегистрацииДенежногоСодержанияДокумента(
				РеквизитыДляПроведения.Ссылка, ?(ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.Увольнение"), "", "Сотрудники"));
			ДанныеДляПроведения.Вставить("КорректировкиДляРегистрацииДенежногоСодержания", КорректировкиДляРегистрацииДенежногоСодержания);
			
			СоставМесячногоДенежногоСодержания = Модуль.СведенияОСоставеМесячногоДенежногоСодержания(РеквизитыДляПроведения.Ссылка, "ДенежноеСодержание,ДенежноеСодержаниеФактическиеНачисления");
			ДанныеДляПроведения.Вставить("СоставМесячногоДенежногоСодержания", СоставМесячногоДенежногоСодержания);
		КонецЕсли;
		
		ДополнитьДанныеДляПроведенияОтпусков(ДанныеДляПроведения, РеквизитыДляПроведения);
		
		ДобавитьДанныеДляРегистрацииДокумента(ДанныеДляПроведения, РеквизитыДляПроведения, ПеремещаемыеСовместители, РеквизитыДляПроведения.Организация);
		
		ДобавитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
			ДанныеКадровогоРезерва = Модуль.ДанныеУвольненияДляКадровогоРезерва(РеквизитыДляПроведения.Ссылка);
			ДанныеДляПроведения.Вставить("ДанныеКадровогоРезерва", ДанныеКадровогоРезерва);
		КонецЕсли;
		
		ДобавитьДанныеДляРеестраКадровыхПриказов(ДанныеДляПроведения, РеквизитыДляПроведения);
		ДобавитьДанныеДляРеестраОтпусков(ДанныеДляПроведения, РеквизитыДляПроведения);
				
		// Подготовка данных для прекращения вычетов
		ДанныеДляПрекращенияВычетов = Новый Соответствие;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаДокумента.ФизическоеЛицо,
			|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаУвольнения, МЕСЯЦ) КАК МесяцУвольнения
			|ИЗ
			|	Документ.Увольнение КАК ТаблицаДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО ТаблицаДокумента.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
			|			И ТаблицаДокумента.Ссылка.Организация.ГоловнаяОрганизация = ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
			|			И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
			|			И (ТекущиеКадровыеДанныеСотрудников.ДатаПриема < ТаблицаДокумента.ДатаУвольнения)
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &Ссылка
			|	И НЕ ТаблицаДокумента.ПрименятьВычетыПослеУвольнения
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаДокумента.ФизическоеЛицо,
			|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаУвольнения, МЕСЯЦ)
			|
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > ТаблицаДокумента.ДатаУвольнения) = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	МесяцУвольнения";
		
		Если ТипЗнч(РеквизитыДляПроведения.Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("МесяцУвольнения") Цикл
			
			СписокФизическихЛиц = Новый Массив;
			Пока Выборка.Следующий() Цикл
				СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
			КонецЦикла;
			
			ДанныеДляПрекращенияВычетов.Вставить(Выборка.МесяцУвольнения, СписокФизическихЛиц);
			
		КонецЦикла;
		
		ДанныеДляПроведения.Вставить("ДанныеДляПрекращенияВычетов", ДанныеДляПрекращенияВычетов);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка("Начисления,НачисленияПерерасчет,Пособия");
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Увольнение.Ссылка,
	|	Увольнение.Организация,
	|	Увольнение.ИсправленныйДокумент,
	|	Увольнение.ДокументРассчитан,
	|	Увольнение.ПериодРегистрации,
	|	Увольнение.Дата,
	|	Увольнение.ПорядокВыплаты,
	|	Увольнение.Номер,
	|	Увольнение.ПланируемаяДатаВыплаты
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеСписком.Ссылка,
	|	УвольнениеСписком.Организация,
	|	УвольнениеСписком.ИсправленныйДокумент,
	|	УвольнениеСписком.ДокументРассчитан,
	|	УвольнениеСписком.ПериодРегистрации,
	|	УвольнениеСписком.Дата,
	|	УвольнениеСписком.ПорядокВыплаты,
	|	УвольнениеСписком.Номер,
	|	УвольнениеСписком.ПланируемаяДатаВыплаты
	|ИЗ
	|	Документ.УвольнениеСписком КАК УвольнениеСписком
	|ГДЕ
	|	УвольнениеСписком.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.Увольнение.РаспределениеПоТерриториямУсловиямТруда КАК УвольнениеРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.УвольнениеСписком.РаспределениеПоТерриториямУсловиямТруда КАК УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, Организация, ИсправленныйДокумент, ДокументРассчитан, ПериодРегистрации, Дата, ПорядокВыплаты, Номер, РаспределениеПоТерриториямУсловиямТруда, ПланируемаяДатаВыплаты");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

Процедура ДобавитьДанныеДляРегистрацииДокумента(ДанныеДляПроведения, РеквизитыДляПроведения, ПеремещаемыеСовместители, Организация)
	
	ДанныеДляРегистрацииВУчете = ДанныеДляРегистрацииВУчетаСтажаПФР(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДляПроведения.Ссылка), ТипЗнч(РеквизитыДляПроведения.Ссылка) <> Тип("ДокументСсылка.Увольнение"), ПеремещаемыеСовместители, Организация);
		
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииВУчетаСтажаПФР", ДанныеДляРегистрацииВУчете[РеквизитыДляПроведения.Ссылка]);
	
КонецПроцедуры

Процедура ДобавитьДанныеДляРегистрацииПрекращенияПлановыхНачислений(ДанныеДляПроведения, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.Период, ДЕНЬ, 1) КАК Период,
		|	КадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
		
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииПрекращенияПлановыхНачислений", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ДобавитьДанныеДляРегистрацииПрекращенияПлановыхУдержаний(ДанныеДляПроведения, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Период КАК Период,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.ГоловнаяОрганизация КАК Организация
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)";
		
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииПрекращенияПлановыхУдержаний", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ДобавитьДанныеДляРегистрацииСостоянийСотрудников(ДанныеДляПроведения, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение) КАК Состояние,
		|	ДОБАВИТЬКДАТЕ(ТаблицаДокумента.ДатаУвольнения, ДЕНЬ, 1) КАК Начало,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли; 
	
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииСостоянийСотрудников", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ДополнитьДанныеДляПроведенияОтпусков(ДанныеДляПроведения, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.Увольнение") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Увольнение.Сотрудник КАК Сотрудник,
			|	Увольнение.ДатаУвольнения КАК ДатаУвольнения,
			|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной) КАК ВидОтпуска,
			|	Увольнение.РабочийГодС КАК РабочийПериодС,
			|	Увольнение.РабочийГодПо КАК РабочийПериодПо,
			|	Увольнение.ПризнакКомпенсацииУдержанияОтпуска КАК ПризнакКомпенсацииУдержания,
			|	Увольнение.ДнейКомпенсацииУдержанияОтпуска КАК КоличествоДнейКомпенсации,
			|	Увольнение.ОснованиеУвольнения КАК ОснованиеУвольнения
			|ПОМЕСТИТЬ ВТДанныеОтпусков
			|ИЗ
			|	Документ.Увольнение КАК Увольнение
			|ГДЕ
			|	Увольнение.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Увольнение.Сотрудник,
			|	Увольнение.ДатаУвольнения,
			|	УвольнениеДополнительныеОтпуска.ВидОтпуска,
			|	УвольнениеДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	УвольнениеДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания,
			|	УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания,
			|	Увольнение.ОснованиеУвольнения
			|ИЗ
			|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
			|		ПО УвольнениеДополнительныеОтпуска.Ссылка = Увольнение.Ссылка
			|ГДЕ
			|	УвольнениеДополнительныеОтпуска.Ссылка = &Ссылка";
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ДатаУвольнения КАК ДатаУвольнения,
			|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной) КАК ВидОтпуска,
			|	Сотрудники.РабочийГодС КАК РабочийПериодС,
			|	Сотрудники.РабочийГодПо КАК РабочийПериодПо,
			|	Сотрудники.ПризнакКомпенсацииУдержанияОтпуска КАК ПризнакКомпенсацииУдержания,
			|	Сотрудники.ДнейКомпенсацииУдержанияОтпуска КАК КоличествоДнейКомпенсации,
			|	Сотрудники.ОснованиеУвольнения КАК ОснованиеУвольнения
			|ПОМЕСТИТЬ ВТДанныеОтпусков
			|ИЗ
			|	Документ.УвольнениеСписком.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Сотрудники.Сотрудник,
			|	Сотрудники.ДатаУвольнения,
			|	ДополнительныеОтпуска.ВидОтпуска,
			|	ДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	ДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	ДополнительныеОтпуска.ПризнакКомпенсацииУдержания,
			|	ДополнительныеОтпуска.ДнейКомпенсацииУдержания,
			|	Сотрудники.ОснованиеУвольнения
			|ИЗ
			|	Документ.УвольнениеСписком.ДополнительныеОтпуска КАК ДополнительныеОтпуска
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК Сотрудники
			|		ПО ДополнительныеОтпуска.Ссылка = Сотрудники.Ссылка
			|			И ДополнительныеОтпуска.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника
			|ГДЕ
			|	ДополнительныеОтпуска.Ссылка = &Ссылка";
		
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Сотрудник,
		|	КОНЕЦПЕРИОДА(ТаблицаДокумента.ДатаУвольнения, ДЕНЬ) КАК ДатаУвольнения
		|ИЗ
		|	ВТДанныеОтпусков КАК ТаблицаДокумента";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатыНачалаКомпенсаций= Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ДатыНачалаКомпенсаций.Вставить(Выборка.Сотрудник, Выборка.ДатаУвольнения);
	КонецЦикла; 
	ДанныеДляПроведения.Вставить("ДатыНачалаКомпенсаций", ДатыНачалаКомпенсаций);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаУвольнения КАК ДатаУвольнения,
		|	ТаблицаДокумента.ВидОтпуска КАК ВидОтпуска,
		|	ТаблицаДокумента.РабочийПериодС КАК РабочийПериодС,
		|	ТаблицаДокумента.РабочийПериодПо КАК РабочийПериодПо
		|ИЗ
		|	ВТДанныеОтпусков КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	ПериодыОтпусков = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ПериодыПоВидамОтпусков = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПериодыПоВидамОтпусков.Вставить(Выборка.ВидОтпуска,
				Новый Структура("РабочийПериодС, РабочийПериодПо", Выборка.РабочийПериодС, Выборка.РабочийПериодПо));
		КонецЦикла; 
		
		ПериодыОтпусков.Вставить(Выборка.Сотрудник, ПериодыПоВидамОтпусков);
		
	КонецЦикла; 
	
	ДанныеДляПроведения.Вставить("РабочиеПериодыКомпенсацийОтпусков", ПериодыОтпусков);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ТаблицаДокумента.ВидОтпуска КАК ВидОтпуска,
	|	ТаблицаДокумента.ОснованиеУвольнения
	|ИЗ
	|	ВТДанныеОтпусков КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
		
	ОснованияКомпенсацийОтпусков = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ОснованиеПоВидамОтпусков = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ОснованиеПоВидамОтпусков.Вставить(Выборка.ВидОтпуска, Выборка.ОснованиеУвольнения);
		КонецЦикла; 
		
		ОснованияКомпенсацийОтпусков.Вставить(Выборка.Сотрудник, ОснованиеПоВидамОтпусков);
		
	КонецЦикла; 
	
	ДанныеДляПроведения.Вставить("ОснованияКомпенсацийОтпусков", ОснованияКомпенсацийОтпусков);
	
	СпособУдержанияИзлишнеНачисленныхОтпускных = ПолучитьФункциональнуюОпцию("СпособУдержанияИзлишнеНачисленныхОтпускных");
	ОснованияУдержанийОтпусков = Новый Соответствие;
	ПериодыОтпусков = Новый Соответствие;
	
	Если СпособУдержанияИзлишнеНачисленныхОтпускных = Перечисления.СпособыУдержанияИзлишнеНачисленныхОтпускных.Удержание Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
			|	ТаблицаДокумента.ВидОтпуска КАК ВидОтпуска,
			|	ТаблицаДокумента.РабочийПериодС КАК РабочийПериодС,
			|	ТаблицаДокумента.РабочийПериодПо КАК РабочийПериодПо
			|ИЗ
			|	ВТДанныеОтпусков КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ПериодыПоВидамОтпусков = Новый Соответствие;
			Пока Выборка.Следующий() Цикл
				ПериодыПоВидамОтпусков.Вставить(Выборка.ВидОтпуска,
					Новый Структура("РабочийПериодС, РабочийПериодПо", Выборка.РабочийПериодС, Выборка.РабочийПериодПо));
			КонецЦикла; 
			
			ПериодыОтпусков.Вставить(Выборка.Сотрудник, ПериодыПоВидамОтпусков);
			
		КонецЦикла; 
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
			|	ТаблицаДокумента.ВидОтпуска КАК ВидОтпуска,
			|	ТаблицаДокумента.ОснованиеУвольнения
			|ИЗ
			|	ВТДанныеОтпусков КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ОснованиеПоВидамОтпусков = Новый Соответствие;
			Пока Выборка.Следующий() Цикл
				ОснованиеПоВидамОтпусков.Вставить(Выборка.ВидОтпуска, Выборка.ОснованиеУвольнения);
			КонецЦикла; 
			
			ОснованияУдержанийОтпусков.Вставить(Выборка.Сотрудник, ОснованиеПоВидамОтпусков);
			
		КонецЦикла;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаУвольнения,
		|	ТаблицаДокумента.ВидОтпуска КАК ВидЕжегодногоОтпуска,
		|	ТаблицаДокумента.КоличествоДнейКомпенсации КАК КоличествоДнейКомпенсации
		|ИЗ
		|	ВТДанныеОтпусков КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаУвольнения,
		|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка) КАК ВидЕжегодногоОтпуска,
		|	0 КАК КоличествоДнейКомпенсации";
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("РабочиеПериодыУдержанийОтпусков", ПериодыОтпусков);
	ДанныеДляПроведения.Вставить("ОснованияУдержанийОтпусков", ОснованияУдержанийОтпусков);
	ДанныеДляПроведения.Вставить("УдержанияОтпусков", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ДобавитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.Увольнение") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПогашениеЗаймов.Ссылка КАК ДокументСсылка,
			|	ПогашениеЗаймов.ИдентификаторСтроки,
			|	ПогашениеЗаймов.НомерСтроки,
			|	ПогашениеЗаймов.ФизическоеЛицо,
			|	ПогашениеЗаймов.Ссылка.Организация КАК Организация,
			|	ПогашениеЗаймов.Подразделение,
			|	ПогашениеЗаймов.Ссылка.ПериодРегистрации КАК Месяц,
			|	ПогашениеЗаймов.ДоговорЗайма,
			|	ПогашениеЗаймов.НачисленоПроцентов,
			|	ПогашениеЗаймов.ПогашениеПроцентов,
			|	ПогашениеЗаймов.ПогашениеЗайма,
			|	ПогашениеЗаймов.МатериальнаяВыгода,
			|	ПогашениеЗаймов.НалогНаМатериальнуюВыгоду,
			|	ПогашениеЗаймов.Ссылка.ДатаУвольнения КАК ДатаОперации
			|ПОМЕСТИТЬ ВТПогашениеЗаймов
			|ИЗ
			|	Документ.Увольнение.ПогашениеЗаймов КАК ПогашениеЗаймов
			|ГДЕ
			|	ПогашениеЗаймов.Ссылка = &Ссылка";
			
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПогашениеЗаймов.Ссылка КАК ДокументСсылка,
			|	ПогашениеЗаймов.ИдентификаторСтроки,
			|	ПогашениеЗаймов.НомерСтроки,
			|	ПогашениеЗаймов.ФизическоеЛицо,
			|	ПогашениеЗаймов.Ссылка.Организация КАК Организация,
			|	ПогашениеЗаймов.Подразделение,
			|	ПогашениеЗаймов.Ссылка.ПериодРегистрации КАК Месяц,
			|	ПогашениеЗаймов.ДоговорЗайма,
			|	ПогашениеЗаймов.НачисленоПроцентов,
			|	ПогашениеЗаймов.ПогашениеПроцентов,
			|	ПогашениеЗаймов.ПогашениеЗайма,
			|	ПогашениеЗаймов.МатериальнаяВыгода,
			|	ПогашениеЗаймов.НалогНаМатериальнуюВыгоду,
			|	Сотрудники.ДатаУвольнения КАК ДатаОперации
			|ПОМЕСТИТЬ ВТПогашениеЗаймов
			|ИЗ
			|	Документ.УвольнениеСписком.ПогашениеЗаймов КАК ПогашениеЗаймов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК Сотрудники
			|		ПО ПогашениеЗаймов.Ссылка = Сотрудники.Ссылка
			|			И ПогашениеЗаймов.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника
			|ГДЕ
			|	ПогашениеЗаймов.Ссылка = &Ссылка";
			
	КонецЕсли;
		
	Запрос.Выполнить();
	
	ЗаймыСотрудникам.ЗаполнитьДанныеДляПроведенияПоЗаймамПоВременнойТаблице(ДанныеДляПроведения, Запрос.МенеджерВременныхТаблиц, РеквизитыДляПроведения.Ссылка);
	
КонецПроцедуры

Процедура ДобавитьДанныеДляРеестраКадровыхПриказов(ДанныеДляПроведения, РеквизитыДляПроведения)
	
	ДанныеРеестраКадровыхПриказов = КадровыйУчетРасширенный.ТаблицаРеестраКадровыхПриказов();
	НомерПриказа = "";
	ДатаПриказа = Дата(1, 1, 1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.Увольнение") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Увольнение.Сотрудник,
		|	Увольнение.ФизическоеЛицо,
		|	Увольнение.Ссылка КАК ДокументОснование,
		|	Увольнение.Номер КАК НомерПриказа,
		|	Увольнение.Дата КАК ДатаПриказа,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
		|	Увольнение.ДатаУвольнения КАК Дата,
		|	1 КАК Номер,
		|	Увольнение.Организация
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяСтрока.Дата);
			НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора; 
			НомерПриказа = Выборка.НомерПриказа;
			ДатаПриказа = Выборка.ДатаПриказа;
		КонецЦикла;
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УвольнениеСпискомСотрудники.Сотрудник,
		|	УвольнениеСпискомСотрудники.ФизическоеЛицо,
		|	УвольнениеСпискомСотрудники.Ссылка КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
		|	УвольнениеСпискомСотрудники.Ссылка.Номер КАК НомерПриказа,
		|	УвольнениеСпискомСотрудники.Ссылка.Дата КАК ДатаПриказа,
		|	УвольнениеСпискомСотрудники.НомерСтроки КАК Номер,
		|	УвольнениеСпискомСотрудники.ДатаУвольнения КАК Дата,
		|	УвольнениеСпискомСотрудники.Ссылка.Организация
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|ГДЕ
		|	УвольнениеСпискомСотрудники.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяСтрока.Дата);
			НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;   
			НомерПриказа = Выборка.НомерПриказа;
			ДатаПриказа = Выборка.ДатаПриказа;
		КонецЦикла;
	КонецЕсли;
	
	Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(ДатаПриказа, НомерПриказа);
	ДанныеРеестраКадровыхПриказов.ЗаполнитьЗначения(Основание, "Основание");
	ДанныеДляПроведения.Вставить("ДанныеРеестраКадровыхПриказов", ДанныеРеестраКадровыхПриказов);  
	
КонецПроцедуры

Процедура ДобавитьДанныеДляРеестраОтпусков(ДанныеДляПроведения, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);

	ДанныеРеестраОтпусков = КадровыйУчетРасширенный.ТаблицаРеестраОтпусков();
	Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.Номер);
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Увольнение.Сотрудник,
		|	Увольнение.ФизическоеЛицо,
		|	Увольнение.Ссылка КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной) КАК ВидОтпуска,
		|	Увольнение.РабочийГодС КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Увольнение.РабочийГодПо КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Увольнение.ДнейКомпенсацииУдержанияОтпуска КАК КоличествоДнейОтпуска,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачалаПериодаОтсутствия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончанияПериодаОтсутствия,
		|	Увольнение.ВидДоговора,
		|	Увольнение.ОснованиеУвольнения
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка = &Ссылка
		|	И Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник,
		|	УвольнениеДополнительныеОтпуска.Ссылка.ФизическоеЛицо,
		|	УвольнениеДополнительныеОтпуска.Ссылка,
		|	УвольнениеДополнительныеОтпуска.ВидОтпуска,
		|	УвольнениеДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	УвольнениеДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	УвольнениеДополнительныеОтпуска.Ссылка.ВидДоговора,
		|	УвольнениеДополнительныеОтпуска.Ссылка.ОснованиеУвольнения
		|ИЗ
		|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|ГДЕ
		|	УвольнениеДополнительныеОтпуска.Ссылка = &Ссылка
		|	И УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДанныеРеестраОтпусков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Номер = Номер;
			НоваяСтрока.Основание = Основание + " " + Выборка.ОснованиеУвольнения;
			Номер = Номер + 1;
		КонецЦикла;
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УвольнениеСпискомСотрудники.Сотрудник,
		|	УвольнениеСпискомСотрудники.Ссылка КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной) КАК ВидОтпуска,
		|	УвольнениеСпискомСотрудники.РабочийГодС КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	УвольнениеСпискомСотрудники.РабочийГодПо КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	УвольнениеСпискомСотрудники.ДнейКомпенсацииУдержанияОтпуска КАК КоличествоДнейОтпуска,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачалаПериодаОтсутствия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончанияПериодаОтсутствия,
		|	УвольнениеСпискомСотрудники.Ссылка.ВидДоговора КАК ВидДоговора,
		|	УвольнениеСпискомСотрудники.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	УвольнениеСпискомСотрудники.ФизическоеЛицо
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|ГДЕ
		|	УвольнениеСпискомСотрудники.Ссылка = &Ссылка
		|	И УвольнениеСпискомСотрудники.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеСпискомСотрудники.Сотрудник,
		|	УвольнениеСпискомДополнительныеОтпуска.Ссылка,
		|	УвольнениеСпискомДополнительныеОтпуска.ВидОтпуска,
		|	УвольнениеСпискомДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	УвольнениеСпискомДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	УвольнениеСпискомДополнительныеОтпуска.ДнейКомпенсацииУдержания,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	УвольнениеСпискомДополнительныеОтпуска.Ссылка.ВидДоговора,
		|	УвольнениеСпискомСотрудники.ОснованиеУвольнения,
		|	УвольнениеСпискомСотрудники.ФизическоеЛицо
		|ИЗ
		|	Документ.УвольнениеСписком.ДополнительныеОтпуска КАК УвольнениеСпискомДополнительныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|		ПО УвольнениеСпискомДополнительныеОтпуска.Ссылка = УвольнениеСпискомСотрудники.Ссылка
		|			И УвольнениеСпискомДополнительныеОтпуска.ИдентификаторСтрокиСотрудника = УвольнениеСпискомСотрудники.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	УвольнениеСпискомДополнительныеОтпуска.Ссылка = &Ссылка
		|	И УвольнениеСпискомДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДанныеРеестраОтпусков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Номер = Номер;
			НоваяСтрока.Основание = Основание + " " + Выборка.ОснованиеУвольнения;;
			Номер = Номер + 1;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ДанныеРеестраОтпусков", ДанныеРеестраОтпусков);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(
		ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, , , Истина);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(
			ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, Истина);
		
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверкаСтрокиСписочногоДокумента = ДокументОбъект.ДополнительныеСвойства.Свойство("ПроверкаСтрокиСписочногоДокумента");
	Если ПроверкаСтрокиСписочногоДокумента Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Дата");
	КонецЕсли;
	
	ПроверяетсяУвольнение = (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Увольнение"));
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(ДокументОбъект);
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		Если ПроверяетсяУвольнение Тогда
			ЗарплатаКадры.ПроверитьКорректностьДаты(ДокументОбъект.Ссылка, ДокументОбъект.ДатаУвольнения, "Объект.ДатаУвольнения", Отказ, НСтр("ru='Дата увольнения'"), , , Ложь);
			ЗарплатаКадры.ПроверитьКорректностьДаты(ДокументОбъект.Ссылка, ДокументОбъект.РабочийГодС, "Объект.РабочийГодС", Отказ, НСтр("ru='Начало периода работы'"), , , Ложь);
		КонецЕсли;
		
		Если ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда 
			ЗарплатаКадры.ПроверитьДатуВыплаты(ДокументОбъект, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроверяетсяУвольнение Тогда
		ПроверяемаяКоллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
	Иначе
		ПроверяемаяКоллекция = ДокументОбъект.Сотрудники;
	КонецЕсли;
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		Для каждого ЭлементКоллекции Из ПроверяемаяКоллекция Цикл
			
			ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
			ПараметрыПолученияСотрудниковОрганизаций.Организация 				= ДокументОбъект.Организация;
			ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= ЭлементКоллекции.ДатаУвольнения;
			ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ЭлементКоллекции.ДатаУвольнения;
			ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
			ПараметрыПолученияСотрудниковОрганизаций.ИсключаемыйРегистратор 	= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Ссылка);
			
			Если ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) Тогда
				ПараметрыПолученияСотрудниковОрганизаций.ИсключаемыйРегистратор.Добавить(ДокументОбъект.ИсправленныйДокумент);
			КонецЕсли; 
			
			КадровыйУчет.ПроверитьРаботающихСотрудников(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементКоллекции.Сотрудник),
				ПараметрыПолученияСотрудниковОрганизаций,
				Отказ,
				Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект.Сотрудники"));
			
		КонецЦикла;
		
		СотрудникиДаты = Новый ТаблицаЗначений;
		СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
		СотрудникиДаты.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
		
		Для Каждого ПроверяемаяСтруктура Из ПроверяемаяКоллекция Цикл
			СтрокаСотрудникиДаты = СотрудникиДаты.Добавить();
			СтрокаСотрудникиДаты.Сотрудник = ПроверяемаяСтруктура.Сотрудник;
			СтрокаСотрудникиДаты.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
			СтрокаСотрудникиДаты.ДатаСобытия = ПроверяемаяСтруктура.ДатаУвольнения;
		КонецЦикла;
		
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(ДокументОбъект.Ссылка, СотрудникиДаты);
		
		Для Каждого СтрокаСотрудника Из СотрудникиДаты Цикл
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаСотрудника.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				СтрокаСотрудника.ДатаСобытия = ВремяРегистрацииСотрудников.Получить(СтрокаСотрудника.Сотрудник) + 86400;
			КонецЕсли;
		КонецЦикла;
		
		ДокументыДляИсключения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Ссылка);
		Если ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) Тогда
			ДокументыДляИсключения.Добавить(ДокументОбъект.ИсправленныйДокумент);
		КонецЕсли;
		
		КадровыйУчет.ПроверитьВозможностьПроведенияПоКадровомуУчетуТаблицыСотрудников(СотрудникиДаты, ДокументыДляИсключения, Отказ);
		
	КонецЕсли;
	
	ПроверитьЗаполнениеКомпенсацииДополнительныхОтпусков(ДокументОбъект, Отказ, Истина, ПраваНаДокумент);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.ПроверитьЗаполнениеВидаРезерваВТабличнойЧасти(ДокументОбъект, "КадровыйРезерв", ПроверяемыеРеквизиты, Отказ);
	КонецЕсли;
	
	Если ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		Если Не ПроверкаСтрокиСписочногоДокумента Тогда
			
			// Проверка утверждения производится в не привилегированном режиме
			ЗарплатаКадрыРасширенный.ПроверитьУтверждениеДокумента(ДокументОбъект, Отказ);
			
		КонецЕсли;
		
		ПроверитьПериодДействияНачислений(ДокументОбъект, Отказ);
		
		// Проверка корректности распределения по источникам финансирования и по территориям и условиям труда
		ИменаТаблицРаспределяемыхПоСтатьямФинансирования   = "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет,Удержания,НДФЛ,ПогашениеЗаймов,КорректировкиВыплаты";
		ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет";
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			
			ИмяФО = "ИспользоватьЛьготыСотрудников";
			Если ПолучитьФункциональнуюОпцию(ИмяФО) Тогда
				ИменаТаблицРаспределяемыхПоСтатьямФинансирования  = ИменаТаблицРаспределяемыхПоСтатьямФинансирования + ",Льготы";
				ИменаТаблицРаспределенияПоТерриториямУсловиямТруда = ИменаТаблицРаспределенияПоТерриториямУсловиямТруда + ",Льготы";
			КонецЕсли;
			
		КонецЕсли;
		
		ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержанийОбъекта(
			ДокументОбъект, ИменаТаблицРаспределяемыхПоСтатьямФинансирования, Отказ);
		
		РасчетЗарплатыРасширенный.ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(
			ДокументОбъект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ);
		
	КонецЕсли;
	
	ПроверитьЗаполненностьРеквизитовКомпенсацииУдержанияОтпусков(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, ПраваНаДокумент);
	УточнитьНеобходимостьПроверкиДатыВыплаты(ДокументОбъект, ПроверяемыеРеквизиты, ПраваНаДокумент);
	
КонецПроцедуры

// Локально перепишем УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений()
// т.к. Увольнение требует особенной регистрации налогов.
//
Процедура ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(РеквизитыДляПроведения, Движения, ДанныеДляПроведения, ДатаОперацииПоНалогам, Отказ)
	
	ОкончательныйРасчет = (РеквизитыДляПроведения.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
	УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(
		Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, РеквизитыДляПроведения.ПланируемаяДатаВыплаты, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПериодРегистрации, Ложь, ОкончательныйРасчет, , РеквизитыДляПроведения.Ссылка);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьДоходыНДФЛСведениямиОРаспределенииПоСтатьямФинансирования(Движения);
		
	// Регистрация исчисленного налога.
	УчетНДФЛ.СформироватьНалогиВычеты(
		Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ,, ОкончательныйРасчет);
		
	УчетНДФЛРасширенный.СформироватьСоциальныеВычетыПоУдержаниям(
		РеквизитыДляПроведения.Ссылка, Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Удержания,, ОкончательныйРасчет);
	
	// Учет исчисленного налога в "зарплате".
	УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам);
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(
		Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НДФЛПоСотрудникам, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПорядокВыплаты);
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц, ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаУвольнения КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли; 
		
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроверитьПересечениеФактическогоПериодаДействия(ДокументСсылка, Отказ)
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	ИменаРеквизитов = 
	"ПериодРегистрации,
	|Организация,
	|ИсправленныйДокумент";
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ИменаРеквизитов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.*
	               |ИЗ
	               |	Документ.Увольнение.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Ссылка = &Ссылка";
				   
	Начисления = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроверки = РасчетЗарплатыРасширенный.ПараметрыПроверкиПересеченияФактическогоПериодаДействия();
	ПараметрыПроверки.Организация = РеквизитыДокумента.Организация;
	ПараметрыПроверки.ПериодРегистрации = РеквизитыДокумента.ПериодРегистрации;
	ПараметрыПроверки.Документ = ДокументСсылка;
	ПараметрыПроверки.Начисления = Начисления;
	ПараметрыПроверки.ИсправленныйДокумент = РеквизитыДокумента.ИсправленныйДокумент;
	
	РасчетЗарплатыРасширенный.ПроверитьПересечениеФактическогоПериодаДействия(ПараметрыПроверки, Отказ);
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеДляПоказателейСверхурочных(ДокументСсылка) Экспорт
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	
	ПереработаноПоСуммированномуУчетуВПределах2Часов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчетуВПределах2Часов");
	ПереработаноПоСуммированномуУчету = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчету");
	
	Если ПереработаноПоСуммированномуУчетуВПределах2Часов = Неопределено ИЛИ ПереработаноПоСуммированномуУчету = Неопределено Тогда
		Возврат ЗначенияПоказателей;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПереработаноПоСуммированномуУчетуВПределах2Часов", ПереработаноПоСуммированномуУчетуВПределах2Часов);
	Запрос.УстановитьПараметр("ПереработаноПоСуммированномуУчету", ПереработаноПоСуммированномуУчету);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаУвольнения, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	&ПереработаноПоСуммированномуУчету КАК Показатель,
		|	ТаблицаДокумента.Сверхурочно1_5 + ТаблицаДокумента.Сверхурочно2 КАК Значение
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И ТаблицаДокумента.Сверхурочно1_5 + ТаблицаДокумента.Сверхурочно2 > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаУвольнения, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка.Организация,
		|	&ПереработаноПоСуммированномуУчетуВПределах2Часов,
		|	ТаблицаДокумента.Сверхурочно1_5
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И ТаблицаДокумента.Сверхурочно1_5 > 0";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли; 
	
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	
	Возврат ЗначенияПоказателей;

КонецФункции

Процедура ЗаписатьЗначенияПоказателейРасчетаЗарплаты(Движения, ТаблицаЗначенийПоказателей)
	
	Для Каждого СтрокаЗначений Из ТаблицаЗначенийПоказателей Цикл
		НаборЗаписей = Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников;
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаЗначений);
		НаборЗаписей.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляСторнированияУдержанийЗаОтпуск(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПризнакКомпенсацииУдержания", Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Увольнение.ВидРасчетаКомпенсацииУдержанияОтпуска КАК Удержание
	|ПОМЕСТИТЬ ВТВидыУдержаний
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.ПризнакКомпенсацииУдержанияОтпуска = &ПризнакКомпенсацииУдержания
	|	И Увольнение.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеДополнительныеОтпуска.ВидРасчетаКомпенсацииУдержания
	|ИЗ
	|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
	|ГДЕ
	|	УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = &ПризнакКомпенсацииУдержания
	|	И УвольнениеДополнительныеОтпуска.Ссылка = &Ссылка";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УвольнениеУдержания.ФизическоеЛицо,
	|	УвольнениеУдержания.ДатаНачала,
	|	УвольнениеУдержания.ДатаОкончания,
	|	УвольнениеУдержания.Удержание,
	|	УвольнениеУдержания.ДокументОснование,
	|	УвольнениеУдержания.Получатель,
	|	УвольнениеУдержания.ПлатежныйАгент,
	|	УвольнениеУдержания.Результат * -1 КАК Результат,
	|	ИСТИНА КАК ФиксРасчет,
	|	ИСТИНА КАК ФиксЗаполнение,
	|	ИСТИНА КАК ФиксСтрока,
	|	УвольнениеУдержания.ИдентификаторСтрокиВидаРасчета
	|ИЗ
	|	ВТВидыУдержаний КАК ВТВидыУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.Удержания КАК УвольнениеУдержания
	|		ПО ВТВидыУдержаний.Удержание = УвольнениеУдержания.Удержание
	|			И (УвольнениеУдержания.Ссылка = &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УвольнениеПоказатели.Показатель,
	|	УвольнениеПоказатели.Значение,
	|	УвольнениеПоказатели.ИдентификаторСтрокиВидаРасчета
	|ИЗ
	|	ВТВидыУдержаний КАК ВТВидыУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.Удержания КАК УвольнениеУдержания
	|		ПО ВТВидыУдержаний.Удержание = УвольнениеУдержания.Удержание
	|			И (УвольнениеУдержания.Ссылка = &Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.Показатели КАК УвольнениеПоказатели
	|		ПО (УвольнениеУдержания.ИдентификаторСтрокиВидаРасчета = УвольнениеПоказатели.ИдентификаторСтрокиВидаРасчета)
	|			И (УвольнениеПоказатели.Ссылка = &Ссылка)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеДляСторнирования = Новый Структура("Удержания, Показатели");
	ДанныеДляСторнирования.Вставить("Удержания", Результат[0].Выгрузить());
	ДанныеДляСторнирования.Вставить("Показатели", Результат[1].Выгрузить());
	
	Возврат ДанныеДляСторнирования;
	
КонецФункции

Функция ВидыОтпусковОбъекта(ТекущийОбъект) Экспорт

	МассивВидовОтпусков = Новый Массив;
	
	Если ТекущийОбъект.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные")
		ИЛИ ТекущийОбъект.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом") Тогда
		МассивВидовОтпусков.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	КонецЕсли;
	
	Для каждого ДополнительныйОтпуск Из ТекущийОбъект.ДополнительныеОтпуска Цикл
		Если ДополнительныйОтпуск.ПризнакКомпенсацииУдержания = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные")
			ИЛИ ДополнительныйОтпуск.ПризнакКомпенсацииУдержания = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом") Тогда
			МассивВидовОтпусков.Добавить(ДополнительныйОтпуск.ВидОтпуска);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивВидовОтпусков;

КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецЕсли
