#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "НачисленияУдержанияВзносы.ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	МесяцНачисления = НачалоМесяца(ПериодРегистрации);
		
	// НДФЛ
	ДатаОперацииПоНалогам = УчетНДФЛРасширенный.ДатаОперацииПоДокументу(Дата, ПериодРегистрации);
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.ДанныеДляНДФЛДоходы, Ложь, Ложь);
	УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.ДанныеДляНДФЛИВычетов, Ложь, Ложь);
	УчетНДФЛ.СформироватьУдержанныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ПланируемаяДатаВыплаты, ДанныеДляПроведения.ДанныеДляНДФЛ);
	УчетНДФЛРасширенный.УточнитьУчетНалогаПоЦеннымБумагам(Движения);
	УчетНДФЛРасширенный.ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(Движения, Отказ, Организация, ПланируемаяДатаВыплаты, "");
	
	УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения.Начисления, , ДанныеДляПроведения.НДФЛ);
	
	// - Регистрация начислений и удержаний.
	ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоКонтрагентамАкционерам(
				Движения, Отказ, Организация, МесяцНачисления,
				ДанныеДляПроведения.Начисления,
				Неопределено,
				ДанныеДляПроведения.НДФЛ,
				Истина);
	
	// Страховые взносы
	УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения.ДанныеДляВзносов, Истина);
	УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(ЭтотОбъект.Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения.СтраховыеВзносы);
	УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(Движения, Отказ, Организация, МесяцНачисления, Ссылка, ДанныеДляПроведения.СтраховыеВзносы);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ЗарплатаКадры.ПроверитьДатуВыплаты(ЭтотОбъект, Отказ);

	ЗарплатаКадрыРасширенный.ПроверитьЗадвоениеФизическихЛицВТабличнойЧастиДокумента(
		ЭтотОбъект, "НачисленияУдержанияВзносы", Отказ);

	// Доходы с кодом НДФЛ 1010 (Дивиденды) регистрируются только документом "ДивидендыФизическимЛицам"
	ДивидендыНДФЛ = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыДоходовНДФЛ.Код1010");
	КодНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.ВидПрочегоДохода, "КодДоходаНДФЛ");
	Если КодНДФЛ = ДивидендыНДФЛ Тогда
		ТекстСообщения = "Доходы с кодом НДФЛ 1010 (Дивиденды) регистрируются только документом ""Дивиденды""";
		Поле = "Объект.ВидПрочегоДохода";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект.Ссылка, Поле, , Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоВыплачено = НачисленияУдержанияВзносы.Итог("КВыплате");
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляБухучета = Документы.РегистрацияПрочихДоходов.ДанныеДляБухучетаЗарплатыПервичныхДокументов(ЭтотОбъект);
	ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьБухучетЗарплатыПервичныхДокументов(ДанныеДляБухучета);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Документы.РегистрацияПрочихДоходов.СоздатьВТДанныеДокумента(Запрос.МенеджерВременныхТаблиц, Ссылка);
	Документы.РегистрацияПрочихДоходов.СоздатьВТНачисленияДокумента(Запрос.МенеджерВременныхТаблиц, ЭтотОбъект, Организация, ПериодРегистрации);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.СтатьяФинансирования,
	|	НачисленияДокумента.СтатьяРасходов
	|ПОМЕСТИТЬ ВТБухучетФизическихЛиц
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента";
		
	Запрос.Выполнить();
	
	ДанныеДляПроведения.Вставить("ДанныеДляНДФЛДоходы", Документы.РегистрацияПрочихДоходов.ДанныеДляПроведениеНДФЛ(Запрос.МенеджерВременныхТаблиц));
	
	ДанныеДляПроведения.Вставить("ДанныеДляНДФЛ", ДанныеДляПроведения.ДанныеДляНДФЛДоходы.Скопировать());
	ДанныеДляПроведения.ДанныеДляНДФЛ.Колонки.Удалить("МесяцНалоговогоПериода");
	ДанныеДляПроведения.ДанныеДляНДФЛ.Колонки.ДатаПолученияДохода.Имя = "МесяцНалоговогоПериода";
	ДанныеДляПроведения.ДанныеДляНДФЛ.Колонки.СуммаДохода.Имя = "СуммаВыплаченногоДохода";
	
	ДанныеДляПроведения.ДанныеДляНДФЛ.Колонки.Добавить("УчитыватьВыплаченныйДоходВ6НДФЛ", Новый ОписаниеТипов("Булево"));
	ДанныеДляПроведения.ДанныеДляНДФЛ.ЗаполнитьЗначения(Истина, "УчитыватьВыплаченныйДоходВ6НДФЛ");
	ДанныеДляПроведения.ДанныеДляНДФЛДоходы.Колонки.Добавить("НеУчитыватьДоходВ6НДФЛ", Новый ОписаниеТипов("Булево"));
	ДанныеДляПроведения.ДанныеДляНДФЛДоходы.ЗаполнитьЗначения(Истина, "НеУчитыватьДоходВ6НДФЛ");
	
	ДанныеДляНДФЛИВычетов = Документы.РегистрацияПрочихДоходов.ДанныеДляПроведенияНДФЛИВычетов(Запрос.МенеджерВременныхТаблиц);
	ДанныеДляПроведения.Вставить("ДанныеДляНДФЛИВычетов", ?(ДанныеДляНДФЛИВычетов = Неопределено, ДанныеДляПроведения.ДанныеДляНДФЛ, ДанныеДляНДФЛИВычетов));
	
	ДанныеДляПроведения.Вставить("ДанныеДляВзносов", Документы.РегистрацияПрочихДоходов.ДанныеДляПроведенияВзносы(Запрос.МенеджерВременныхТаблиц));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.Сумма,
	|	ДанныеДокумента.Начисление КАК Начисление,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.ОблагаетсяЕНВД,
	|	ДанныеДокумента.СтатьяФинансирования,
	|	ДанныеДокумента.СтатьяРасходов,
	|	ДанныеДокумента.СпособОтраженияЗарплатыВБухучете
	|ИЗ
	|	ВТНачисленияДокумента КАК ДанныеДокумента";

	ДанныеДляПроведения.Вставить("Начисления", Запрос.Выполнить().Выгрузить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.НДФЛ КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов) КАК НачислениеУдержание,
	|	БухучетФизическихЛиц.СтатьяФинансирования,
	|	БухучетФизическихЛиц.СтатьяРасходов
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетФизическихЛиц КАК БухучетФизическихЛиц
	|		ПО ДанныеДокумента.ФизическоеЛицо = БухучетФизическихЛиц.ФизическоеЛицо";
	
	ДанныеДляПроведения.Вставить("НДФЛ", Запрос.Выполнить().Выгрузить());
	
	ДанныеДляПроведения.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
	
	ИсчисленныеВзносы = УчетСтраховыхВзносов.ДанныеОВзносахИзДокумента(
							Ссылка,
							"Документ.РегистрацияПрочихДоходов.НачисленияУдержанияВзносы", 
							Ложь, , ,
							"Ссылка.ПериодРегистрации");
	
	ДанныеДляПроведения.Вставить("СтраховыеВзносы", ИсчисленныеВзносы);
	

	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура РассчитатьНДФЛИВзносыДокумента(СписокФизическихЛиц = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Если Проведен Тогда
		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Документы.РегистрацияПрочихДоходов.СоздатьВТДанныеДокумента(Запрос.МенеджерВременныхТаблиц, Ссылка, СписокФизическихЛиц);
	Документы.РегистрацияПрочихДоходов.СоздатьВТНачисленияДокумента(Запрос.МенеджерВременныхТаблиц, ЭтотОбъект, Организация, ПериодРегистрации);
	
	ДанныеДляНДФЛ = Документы.РегистрацияПрочихДоходов.ДанныеДляПроведениеНДФЛ(Запрос.МенеджерВременныхТаблиц);
	ДанныеДляВзносов = Документы.РегистрацияПрочихДоходов.ДанныеДляПроведенияВзносы(Запрос.МенеджерВременныхТаблиц);
	
	// НДФЛ
	
	// Вычеты к доходам
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.НомерСтроки,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.КодДохода,
	|	ДанныеДокумента.Сумма,
	|	ДанныеДокумента.КодВычета,
	|	0 КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Начисления.ФизическоеЛицо
	|ИЗ
	|	ВТНачисления КАК Начисления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(Ссылка, Организация, ПланируемаяДатаВыплаты, Запрос.МенеджерВременныхТаблиц);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВычетыКДоходам.ФизическоеЛицо,
		|	ВычетыКДоходам.НомерСтроки,
		|	ВычетыКДоходам.КодДохода,
		|	ВычетыКДоходам.КодВычета,
		|	ВычетыКДоходам.СуммаВычета
		|ИЗ
		|	ВТВычетыКДоходамФизическихЛиц КАК ВычетыКДоходам";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаДоходов = НачисленияУдержанияВзносы.Найти(Выборка.НомерСтроки, "НомерСтроки");
			Если СтрокаДоходов <> Неопределено Тогда
				СтрокаДоходов.СуммаВычета = Выборка.СуммаВычета;
			КонецЕсли; 
			
			СтруктураПоиска = Новый Структура("ФизическоеЛицо,КодДохода,КодВычета");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			
			СтрокиДоходов = ДанныеДляНДФЛ.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаДоходов Из СтрокиДоходов Цикл
				СтрокаДоходов.СуммаВычета = Выборка.СуммаВычета;
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура("ФизическоеЛицо,НомерСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			
			СтрокиДоходовДляВзносов = ДанныеДляВзносов.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаДоходов Из СтрокиДоходовДляВзносов Цикл
				СтрокаДоходов.Скидка = Выборка.СуммаВычета;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Регистрация доходов для НДФЛ в привилегированном режиме
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	ДатаОперацииПоНалогам = УчетНДФЛРасширенный.ДатаОперацииПоДокументу(Дата, ПериодРегистрации);
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(
		Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляНДФЛ, Истина, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента";
	
	Запрос.Выполнить();
	
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(Запрос.МенеджерВременныхТаблиц, Неопределено,
		Организация, ПериодРегистрации, Ложь);
	
	// Взносы
	
	Если ДоходОблагаетсяВзносами(Запрос.МенеджерВременныхТаблиц) Тогда
		// Регистрация доходов для старховых взносов в привилегированном режиме
		УстановитьПривилегированныйРежим(Истина);
		
		УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляВзносов, Истина);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		РезультатРасчетаСтраховыхВзносов = УчетСтраховыхВзносов.РассчитатьВзносы(Неопределено, Организация, ПериодРегистрации, Запрос.МенеджерВременныхТаблиц);
		
	Иначе
		РезультатРасчетаСтраховыхВзносов = Новый Массив;
		
	КонецЕсли;
	
	ОтменитьТранзакцию();
	
	// Очищаем расчетные данные 
	ФизическиеЛицаПоКоторымОчищалисьДанные = Новый Массив;
	ПоляВзносовСтрокой = УчетСтраховыхВзносов.РассчитываемыеВзносы();
	НулевыеСуммыВзносов = Новый Структура(ПоляВзносовСтрокой);
	Для Каждого СтрокаДанных Из ДанныеДляНДФЛ Цикл
		Если ФизическиеЛицаПоКоторымОчищалисьДанные.Найти(СтрокаДанных.ФизическоеЛицо) = Неопределено Тогда
			УчетНДФЛКлиентСерверРасширенный.УдалитьДанныеНДФЛФизическогоЛица(ЭтотОбъект, СтрокаДанных.ФизическоеЛицо);
			ФизическиеЛицаПоКоторымОчищалисьДанные.Добавить(СтрокаДанных.ФизическоеЛицо);
		КонецЕсли;
		
		СтрокаНачислений = НачисленияУдержанияВзносы.Найти(СтрокаДанных.ФизическоеЛицо, "ФизическоеЛицо");
		Если СтрокаНачислений <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, НулевыеСуммыВзносов);
		КонецЕсли;
	КонецЦикла;
	
	// Перенос в документ результатов расчета НДФЛ
	МаксимальныйИдентификатор = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(НДФЛ);
	Для каждого СтрокаРезультатаРасчетаНДФЛ Из РезультатРасчетаНДФЛ.НДФЛ Цикл
		
		Если ФизическиеЛицаПоКоторымОчищалисьДанные.Найти(СтрокаРезультатаРасчетаНДФЛ.ФизическоеЛицо) = Неопределено Тогда
			УчетНДФЛКлиентСерверРасширенный.УдалитьДанныеНДФЛФизическоголица(ЭтотОбъект, СтрокаРезультатаРасчетаНДФЛ.ФизическоеЛицо);
			ФизическиеЛицаПоКоторымОчищалисьДанные.Добавить(СтрокаРезультатаРасчетаНДФЛ.ФизическоеЛицо);
		КонецЕсли;
		
		МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
		
		НоваяСтрокаНДФЛ = НДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаРезультатаРасчетаНДФЛ);
		НоваяСтрокаНДФЛ.ИдентификаторСтрокиНДФЛ = МаксимальныйИдентификатор;
		
		СтрокиВычетов = РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные.НайтиСтроки(
			Новый Структура("ИдентификаторСтрокиНДФЛ", СтрокаРезультатаРасчетаНДФЛ.ИдентификаторСтрокиНДФЛ));
			
		Для каждого СтрокаВычетов Из СтрокиВычетов Цикл
			НоваяСтрокаВычетов = ПримененныеВычетыНаДетейИИмущественные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВычетов, СтрокаВычетов);
			НоваяСтрокаВычетов.ИдентификаторСтрокиНДФЛ = НоваяСтрокаНДФЛ.ИдентификаторСтрокиНДФЛ;
		КонецЦикла;
		
	КонецЦикла;
	
	// Перенос в документ результатов расчета взносов
	Для каждого СтрокаРезультатаРасчета Из РезультатРасчетаСтраховыхВзносов Цикл
		
		СтрокиНачислений = НачисленияУдержанияВзносы.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаРезультатаРасчета.ФизическоеЛицо));
		Если СтрокиНачислений.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокиНачислений[0], СтрокаРезультатаРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДоходОблагаетсяВзносами(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НеоблагаемыеВидыДоходов", УчетСтраховыхВзносовРасширенный.ВидыДоходовНеоблагаемыеСтраховымиВзносами());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьОблагаемыеДоходы
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ВидДохода В(&НеоблагаемыеВидыДоходов)";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли