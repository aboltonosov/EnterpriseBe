#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	ИдентификаторПлатежа   = Неопределено;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Перем Основание;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если НЕ ДанныеЗаполнения.Свойство("ДокументОснование", Основание)  Тогда
			ВызватьИсключение НСтр("ru = 'Не указан документ-основание для заполенния счета-фактуры'");
		КонецЕсли;
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьПоРеализацииТоваровиУслуг(Основание, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ЗаполнитьПоАктуВыполненныхРабот(Основание, ДанныеЗаполнения);
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство("КодВидаОперации") Тогда
		ДанныеЗаполнения.Вставить("КодВидаОперации", КодВидаОперации(Основание));
	КонецЕсли;
	
	ТаблицаТоваров = Документы.СчетФактураНаНеподтвержденнуюРеализацию0.ТоварыПоДокументыОснованию(Основание);
	Товары.Загрузить(ТаблицаТоваров);
	
	МассивОснований = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Основание);
	
	Документы.СчетФактураВыданный.ЗаполнитьПлатежноРасчетныеДокументы(
		ПлатежноРасчетныеДокументы,
		МассивОснований,
		ДанныеЗаполнения.Организация);
		
	СформироватьСтрокуРасчетноПлатежныхДокументов();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	Если Не ПометкаУдаления Тогда
		ПроверитьДублиСчетФактуры(Отказ);
	КонецЕсли;
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.СчетФактураНаНеподтвержденнуюРеализацию0.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДоходыИРасходыСервер.ОтразитьЖурналУчетаСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
	//++ НЕ УТ
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТ
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Проведен") Тогда
		
		ТекстСообщения = НСтр("ru = 'Счет-фактуру можно провести только на основании проведенного документа.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"ДокументОснование",
			, // ПутьКДанным 
			Отказ);
	
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = "0";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Функция КодВидаОперации(Основание = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Основание = ДокументОснование;
	КонецЕсли;
	
	КодВидаОперации = "";
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Дата);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		КодВидаОперации = "01";
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		КодВидаОперации = КодВидаОперацииРеализацииТоваров(Основание, ВерсияКодовВидовОпераций);
		
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции

Функция КодВидаОперацииРеализацииТоваров(РеализацияТоваров, ВерсияКодовВидовОпераций)
	
	ЕстьКомиссионныйТовар = Ложь;
	ЕстьСобственныйТовар = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Основание КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.ДокументОснование = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			ТоварыОрганизаций.Количество
	|		ИНАЧЕ
	|			-ТоварыОрганизаций.Количество
	|		КОНЕЦ
	|	) КАК Количество
	|
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПродажи КАК ДокументыПродажи
	|		ПО ТоварыОрганизаций.Регистратор = ДокументыПродажи.Ссылка
	|ГДЕ
	|	ТоварыОрганизаций.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрганизаций.ВидЗапасов.ТипЗапасов,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.НомерГТД,
	|	ТоварыОрганизаций.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(
	|		ВЫБОР КОГДА ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			ТоварыОрганизаций.Количество
	|		ИНАЧЕ
	|			-ТоварыОрганизаций.Количество
	|		КОНЕЦ) > 0
	|ИТОГИ ПО
	|	ТипЗапасов
	|");
	Запрос.УстановитьПараметр("Основание", РеализацияТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар Тогда
			ЕстьКомиссионныйТовар = Истина;
		Иначе
			ЕстьСобственныйТовар = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьКомиссионныйТовар И ЕстьСобственныйТовар Тогда
		КодВидаОперации = ?(ВерсияКодовВидовОпераций = 3, "15", "01;04");
	ИначеЕсли ЕстьКомиссионныйТовар Тогда
		КодВидаОперации = ?(ВерсияКодовВидовОпераций = 3, "01", "04");
	Иначе
		КодВидаОперации = "01";
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ПроверитьДублиСчетФактуры(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураНаНеподтвержденнуюРеализацию0 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка <> &Ссылка
	|	И ДанныеДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	И (ДанныеДокумента.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 по организации %2 уже введен счет-фактура %3'"),
				ДокументОснование,
				Организация,
				Выборка.Ссылка);
				
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ДокументОснование",
				,
				Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСтрокуРасчетноПлатежныхДокументов()
	
	СтрокаНомеровИДата = "";
	Для Каждого СтрокаТаблицы Из ПлатежноРасчетныеДокументы Цикл
		СтрокаНомеровИДата = СтрокаНомеровИДата + ?(ПустаяСтрока(СтрокаНомеровИДата), "", ", ")
			+ СтрокаТаблицы.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(СтрокаТаблицы.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
	КонецЦикла; 
		
	Если СтрокаПлатежноРасчетныеДокументы <> СтрокаНомеровИДата Тогда
		СтрокаПлатежноРасчетныеДокументы = СтрокаНомеровИДата;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализацииТоваровиУслуг(Основание, ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументОснование,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Валюта
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаполнитьРеквизитыПоРезультатуЗапроса(РезультатЗапроса, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоАктуВыполненныхРабот(Основание, ДанныеЗаполнения) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктВыполненныхРабот.Ссылка КАК ДокументОснование,
	|	АктВыполненныхРабот.Организация,
	|	АктВыполненныхРабот.Контрагент,
	|	АктВыполненныхРабот.Валюта
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|ГДЕ
	|	АктВыполненныхРабот.Ссылка = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаполнитьРеквизитыПоРезультатуЗапроса(РезультатЗапроса, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоРезультатуЗапроса(РезультатЗапроса, ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда 
		ДанныеЗаполнения = Новый Структура;
	КонецЕсли;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если ДанныеЗаполнения.Свойство(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
