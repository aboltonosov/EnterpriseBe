
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяПеремещениеТоваров = ЗначениеЗаполнено(ИнтеграцияЕГАИСПереопределяемый.ИмяРеквизитаТТНВходящаяДокументаПеремещениеТоваров());
	
	Список.ТекстЗапроса = Документы.ТТНВходящаяЕГАИС.ТекстЗапросаТТН(,,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		"ДокументОснование",
		ИнтеграцияЕГАИС.ПустоеЗначениеОпределяемогоТипа("ОснованиеТТНВходящаяЕГАИС"),
		Истина);
	
	ПравоДоступаИзменение = ПравоДоступа("Изменение", Метаданные.Документы.ТТНВходящаяЕГАИС) ИЛИ Пользователи.ЭтоПолноправныйПользователь();
	Элементы.СписокПодтвердитьПолучение.Доступность = ПравоДоступаИзменение;
	Элементы.СписокОтказатьсяОтНакладной.Доступность = ПравоДоступаИзменение;
	
	ЗаполнитьСписокВыбораПоСостояниюНакладной();
	
	// МенюОтчеты
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьПодменюОтчеты(ЭтотОбъект);
	// Конец МенюОтчеты
	
	// ВводНаОсновании
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьПодменюСоздатьНаОсновании(ЭтотОбъект);
	// Конец ВводНаОсновании
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	СобытияФормЕГАИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ТТНВходящаяЕГАИС" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И ТипЗнч(Параметр.Ссылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Организация = Настройки.Получить("Организация");
	ТорговыйОбъект = Настройки.Получить("ТорговыйОбъект");
	СтатусОбработки = Настройки.Получить("СтатусОбработки");
	СостояниеНакладной = Настройки.Получить("СостояниеНакладной");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТорговыйОбъект",
		ТорговыйОбъект,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ТорговыйОбъект));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СтатусОбработки",
		СтатусОбработки,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СтатусОбработки));
		
	Состояние = ?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"СостояниеНакладной",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Состояние));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыйОбъектОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТорговыйОбъект",
		ТорговыйОбъект,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ТорговыйОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкиОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СтатусОбработки",
		СтатусОбработки,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СтатусОбработки));
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНакладнойОтборПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"СостояниеНакладной",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Состояние));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТоварноТранспортныеНакладные

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.СписокПоступлениеТоваров Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПоступлениеТоваров) Тогда
			ПоказатьЗначение(,ТекущаяСтрока.ПоступлениеТоваров);
		ИначеЕсли ТекущаяСтрока.СтатусОбработки <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа")
			И ТекущаяСтрока.СтатусОбработки <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа") Тогда
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить("СоздатьПоступление", НСтр("ru = 'Оформить новое поступление'"), Ложь);
			СписокКнопок.Добавить("ВыбратьПоступление", НСтр("ru = 'Связать с имеющимся поступлением'"), Ложь);
			
			Если ИспользуетсяПеремещениеТоваров Тогда
				СписокКнопок.Добавить("ВыбратьПеремещение", НСтр("ru = 'Связать с имеющимся перемещением'"), Ложь);
			КонецЕсли;
			
			СписокКнопок.Добавить("Отмена", "Отмена", Ложь);
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьСвязатьПоступлениеТоваров_Подтверждение",
					ЭтотОбъект,
					Новый Структура("ТТНСсылка", ТекущаяСтрока.Ссылка)),
					НСтр("ru='Оформить новый документ или связать с уже имеющимся?'"), 
					СписокКнопок);
		ИначеЕсли ТекущаяСтрока.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа")
					ИЛИ ТекущаяСтрока.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа") Тогда
			ПоказатьПредупреждениеПоступлениеНеТребуется();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязатьПоступлениеТоваров_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = "СоздатьПоступление" Тогда
		
		СоздатьПоступлениеНаОснованииТТН(ДополнительныеПараметры.ТТНСсылка);
		
	ИначеЕсли ОтветНаВопрос = "ВыбратьПоступление" Тогда
		
		СвязатьСПоступлениемТТН(ДополнительныеПараметры.ТТНСсылка);
		
	ИначеЕсли ОтветНаВопрос = "ВыбратьПеремещение" Тогда
		
		СвязатьСПеремещениемТТН(ДополнительныеПараметры.ТТНСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодтвердитьПолучение(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'"));
		Возврат;
	КонецЕсли;
	
	ТоварноТранспортнаяНакладнаяЕГАИС = ТекущиеДанные.Ссылка;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТоварноТранспортнаяНакладнаяЕГАИС", ТоварноТранспортнаяНакладнаяЕГАИС);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПослеПередачиДанныхЕГАИС", ИнтеграцияЕГАИСКлиент);
	ИнтеграцияЕГАИСКлиент.ПередатьОтветЕГАИС(
		ТоварноТранспортнаяНакладнаяЕГАИС,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтНакладной(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'"));
		Возврат;
	КонецЕсли;
	
	ТоварноТранспортнаяНакладнаяЕГАИС = ТекущиеДанные.Ссылка;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТоварноТранспортнаяНакладнаяЕГАИС", ТоварноТранспортнаяНакладнаяЕГАИС);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПослеПередачиДанныхЕГАИС", ИнтеграцияЕГАИСКлиент);
	ИнтеграцияЕГАИСКлиент.ОтказатьсяОтДанныхЕГАИС(
		ТоварноТранспортнаяНакладнаяЕГАИС,
		ОповещениеПриЗавершении);

КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьОтменуПроведения(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'"));
		Возврат;
	КонецЕсли;
	
	ТоварноТранспортнаяНакладнаяЕГАИС = ТекущиеДанные.Ссылка;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТоварноТранспортнаяНакладнаяЕГАИС", ТоварноТранспортнаяНакладнаяЕГАИС);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПослеПередачиДанныхЕГАИС", ИнтеграцияЕГАИСКлиент);
	ИнтеграцияЕГАИСКлиент.ЗапроситьОтменуПроведения(
		ТоварноТранспортнаяНакладнаяЕГАИС,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ИнтеграцияЕГАИСКлиент.ВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	ГосударственныеИнформационныеСистемыКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ГосударственныеИнформационныеСистемыКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормЕГАИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяАктОтказа);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПоступлениеТоваров.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПоступлениеТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СтатусОбработки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<требуется оформить>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПоступлениеТоваров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПоступлениеТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СтатусОбработки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПоступлениеТоваров.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПоступлениеТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет);
	
	//
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтатусОбработки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных(Элементы.СписокСтатусОбработки.ПутьКДанным);
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение  = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЕГАИССтатусОбработкиОшибкаПередачи);
	
	//
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтатусОбработки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных(Элементы.СписокСтатусОбработки.ПутьКДанным);
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение  = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЕГАИССтатусОбработкиПередается);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "ДатаТТН");
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокВыбораПоСостояниюНакладной()
	
	СписокВыбора = Элементы.СостояниеНакладнойОтбор.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("1", НСтр("ru='Требуется оформить'"));
	СписокВыбора.Добавить("2", НСтр("ru='Оформлено'"));
	
КонецФункции

&НаСервереБезКонтекста
Функция ТТНПолностьюСопоставлена(ТТНСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ТТНСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаСопоставления = РезультатЗапроса.Выгрузить();
	
	ИнтеграцияЕГАИС.ЗаполнитьНесопоставленнуюПродукцию(ТаблицаСопоставления);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаСопоставления = ТаблицаСопоставления.Найти(Выборка.АлкогольнаяПродукция, "АлкогольнаяПродукция");
		Если СтрокаСопоставления = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаСопоставления.Номенклатура) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСопоставлениеСправочников(МассивСсылок, ДопПараметры = Неопределено)
	
	ПараметрыСопоставления = Новый Структура;
	
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("СоздатьПоступление") Тогда
		ПараметрыСопоставления.Вставить("СоздатьПоступление", ДопПараметры.СоздатьПоступление);
		ПараметрыСопоставления.Вставить("ТТНСсылка", ДопПараметры.ТТНСсылка);
	ИначеЕсли ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("ВыбратьПоступление") Тогда
		ПараметрыСопоставления.Вставить("ВыбратьПоступление", ДопПараметры.ВыбратьПоступление);
		ПараметрыСопоставления.Вставить("ТТНСсылка", ДопПараметры.ТТНСсылка);
	ИначеЕсли ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("ВыбратьПеремещение") Тогда
		ПараметрыСопоставления.Вставить("ВыбратьПеремещение", ДопПараметры.ВыбратьПеремещение);
		ПараметрыСопоставления.Вставить("ТТНСсылка", ДопПараметры.ТТНСсылка);
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ТоварноТранспортныеНакладные", МассивСсылок);
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуСопоставленияАлкогольнойПродукцииСНоменклатурой(
		ЭтотОбъект,
		Новый ОписаниеОповещения("СопоставлениеКлассификаторовЗавершение", ЭтотОбъект, ПараметрыСопоставления),
		ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеКлассификаторовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СоздатьПоступление") Тогда
		СоздатьПоступлениеНаОснованииТТН(ДополнительныеПараметры.ТТНСсылка, Ложь);
	ИначеЕсли ДополнительныеПараметры.Свойство("ВыбратьПоступление") Тогда
		СвязатьСПоступлениемТТН(ДополнительныеПараметры.ТТНСсылка, Ложь);
	ИначеЕсли ДополнительныеПараметры.Свойство("ВыбратьПеремещение") Тогда
		СвязатьСПеремещениемТТН(ДополнительныеПараметры.ТТНСсылка, Ложь);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьСтрокиВопросЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ДопПараметры.ТТНСсылка);
		ВыполнитьСопоставлениеСправочников(МассивСсылок, ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеПоступлениеНеТребуется()
	
	ПоказатьПредупреждение( , НСтр("ru='Поступление товаров для данной ТТН ЕГАИС не требуется.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеНаОснованииТТН(ТТНСсылка, СопоставлятьКлассификаторы = Истина)
	
	Если ТТНПолностьюСопоставлена(ТТНСсылка) Тогда
		
		СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуСозданияДокументаПоступленияТоваровНаОснованииТТНЕГАИС(ТТНСсылка);
		
	Иначе
		
		Если Не СопоставлятьКлассификаторы Тогда
			Возврат;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сопоставить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"СопоставитьСтрокиВопросЗавершение",
				ЭтотОбъект,
				Новый Структура("СоздатьПоступление, ТТНСсылка",Истина, ТТНСсылка)),
			НСтр("ru='В документе найдены несопоставленные элементы классификаторов ЕГАИС.
			          |Сопоставить классификаторы?'"),
			Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПоступлениемТТН(ТТНСсылка, СопоставлятьКлассификаторы = Истина)
	
	Если ТТНПолностьюСопоставлена(ТТНСсылка) Тогда
		
		СтруктураОтбора = СтруктураОтбораДляВыбораДокумента(ТТНСсылка);
		
		СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуВыбораДокументаПоступлениеТоваровУслуг(
			ЭтотОбъект,
			Новый ОписаниеОповещения("СвязатьСПоступлениемТТН_ПослеВыбораПоступления", ЭтотОбъект, Новый Структура("ТТНСсылка", ТТНСсылка)),
			СтруктураОтбора);
			
	Иначе
		
		Если Не СопоставлятьКлассификаторы Тогда
			Возврат;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сопоставить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"СопоставитьСтрокиВопросЗавершение",
				ЭтотОбъект,Новый Структура("ВыбратьПоступление, ТТНСсылка", Истина, ТТНСсылка)),
			НСтр("ru='В документе найдены несопоставленные элементы классификаторов ЕГАИС.
			          |Сопоставить классификаторы?'"),
			Кнопки);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПоступлениемТТН_ПослеВыбораПоступления(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Если ЕстьРасхожденияТоваровТТН_ЕГАИСПоступления(ДополнительныеПараметры.ТТНСсылка, ВыбранныйДокумент) Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СвязатьСПоступлениемТТН_ПодтверждениеРасхождений",
					ЭтотОбъект,
					Новый Структура("ТТНСсылка, Результат", ДополнительныеПараметры.ТТНСсылка, ВыбранныйДокумент)),
				НСтр("ru='В товарах выбранного поступления есть алкогольная продукция, которой нет в ТТН. Продолжить выбор?'"), 
				РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработкаВыбораПоступлениеТоваров(ДополнительныеПараметры.ТТНСсылка, ВыбранныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПоступлениемТТН_ПодтверждениеРасхождений(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ОбработкаВыбораПоступлениеТоваров(ДополнительныеПараметры.ТТНСсылка, ДополнительныеПараметры.Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьРасхожденияТоваровТТН_ЕГАИСПоступления(ТТН, ПоступлениеТоваров)
	
	Возврат ИнтеграцияЕГАИСПереопределяемый.ЕстьРасхожденияТоваровТТН_ЕГАИСПоступления(ТТН, ПоступлениеТоваров);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработкаВыбораПоступлениеТоваров(ТТНСсылка, ПоступлениеТоваров)
	
	Если ЗначениеЗаполнено(ПоступлениеТоваров) Тогда
		
		ИнтеграцияЕГАИСПереопределяемый.ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(ПоступлениеТоваров, ТТНСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПеремещениемТТН(ТТНСсылка, СопоставлятьКлассификаторы = Истина)
	
	Если ТТНПолностьюСопоставлена(ТТНСсылка) Тогда
		
		СтруктураОтбора = СтруктураОтбораДляВыбораДокумента(ТТНСсылка);
		
		СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуВыбораДокументаПеремещениеТоваров(
			ЭтотОбъект,
			Новый ОписаниеОповещения("СвязатьСПеремещениемТТН_ПослеВыбораПеремещения", ЭтотОбъект, Новый Структура("ТТНСсылка", ТТНСсылка)),
			СтруктураОтбора);
			
	Иначе
		
		Если Не СопоставлятьКлассификаторы Тогда
			Возврат;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сопоставить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"СопоставитьСтрокиВопросЗавершение",
				ЭтотОбъект,Новый Структура("ВыбратьПеремещение, ТТНСсылка", Истина, ТТНСсылка)),
			НСтр("ru='В документе найдены несопоставленные элементы классификаторов ЕГАИС.
			          |Сопоставить классификаторы?'"),
			Кнопки);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПеремещениемТТН_ПослеВыбораПеремещения(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Если ЕстьРасхожденияТоваровТТН_ЕГАИСПеремещения(ДополнительныеПараметры.ТТНСсылка, ВыбранныйДокумент) Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СвязатьСПеремещениемТТН_ПодтверждениеРасхождений",
					ЭтотОбъект,
					Новый Структура("ТТНСсылка, Результат", ДополнительныеПараметры.ТТНСсылка, ВыбранныйДокумент)),
				НСтр("ru='В товарах выбранного поступления есть алкогольная продукция, которой нет в ТТН. Продолжить выбор?'"), 
				РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработкаВыбораПеремещениеТоваров(ДополнительныеПараметры.ТТНСсылка, ВыбранныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПеремещениемТТН_ПодтверждениеРасхождений(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ОбработкаВыбораПеремещениеТоваров(ДополнительныеПараметры.ТТНСсылка, ДополнительныеПараметры.Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьРасхожденияТоваровТТН_ЕГАИСПеремещения(ТТН, ПеремещениеТоваров)
	
	Возврат ИнтеграцияЕГАИСПереопределяемый.ЕстьРасхожденияТоваровТТН_ЕГАИСПеремещения(ТТН, ПеремещениеТоваров);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработкаВыбораПеремещениеТоваров(ТТНСсылка, ПеремещениеТоваров)
	
	Если ЗначениеЗаполнено(ПеремещениеТоваров) Тогда
		
		ИнтеграцияЕГАИСПереопределяемый.ЗаписатьСвязьДокументаПеремещенияИТТНЕГАИС(ПеремещениеТоваров, ТТНСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураОтбораДляВыбораДокумента(ТТНСсылка)
	
	РеквизитыТТН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТТНСсылка, "Организация, ТорговыйОбъект, Грузоотправитель");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЕстьАлкогольнаяПродукция", Истина);
	СтруктураОтбора.Вставить("ТолькоБезТТН_ЕГАИС", Истина);
	
	Если ЗначениеЗаполнено(РеквизитыТТН.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", РеквизитыТТН.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыТТН.ТорговыйОбъект) Тогда
		СтруктураОтбора.Вставить("ТорговыйОбъект", РеквизитыТТН.ТорговыйОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыТТН.Грузоотправитель) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", РеквизитыТТН.Грузоотправитель);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлассификаторОрганизацийЕГАИС.Контрагент
		|ИЗ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ГДЕ
		|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка
		|	И КлассификаторОрганизацийЕГАИС.Сопоставлено";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтруктураОтбора.Вставить("Контрагент", РезультатЗапроса.Выгрузить()[0].Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

#КонецОбласти