
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииПриЧтенииНаСервере();
	КонецЕсли;
	
	ВалютаДокумента = ИнтеграцияЕГАИСПереопределяемый.ПредставлениеВалютыРегламентированногоУчета();
	
	Элементы.СтатусЕГАИСПредставление.Доступность = ПравоДоступа("Изменение", Метаданные.Документы.ТТНВходящаяЕГАИС);
	
	ОтборСтрок = "Все";
	
	// МенюОтчеты
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьПодменюОтчеты(ЭтотОбъект);
	// Конец МенюОтчеты
	
	// ВводНаОсновании
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьПодменюСоздатьНаОсновании(ЭтотОбъект);
	// Конец ВводНаОсновании
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	СобытияФормЕГАИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_КлассификаторОрганизацийЕГАИС" Тогда
		Если Параметр = Объект.Грузополучатель
			Или Параметр = Объект.Грузоотправитель
			Или Параметр = Объект.Поставщик Тогда
			
			ЗаполнитьИнформациюПоСопоставлению();
			
		КонецЕсли;
	КонецЕсли;
	Если ИмяСобытия = "Запись_КлассификаторАлкогольнойПродукцииЕГАИС"  Тогда
		ЗаполнитьСопоставленныеТовары(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ПереданОтветВ_ЕГАИС"
		И Параметр = Объект.Ссылка Тогда
		ОбновитьОтображениеДанных();
		ОбновитьВидимостьРасхождений();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПоступлениеТоваровУслуг" Тогда
		ЗаполнитьТекстПоступлениеТоваров();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Прочитать();
		ОбновитьСтатусЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		Прочитать();
		ОбновитьСтатусЕГАИС();
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	// Обновление гиперссылки на создание документа Возврат из регистра №2
	Если ИмяСобытия = "Запись_ПередачаВРегистр2ЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииПриЧтенииНаСервере();
	
	СобытияФормЕГАИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ОбновитьДанныеКлассификаторов();
	
	ОбновитьСтатусЕГАИС();
	
	СформироватьТекстДокументаЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Основание", Объект.ДокументОснование);
	Оповестить("Запись_ТТНВходящаяЕГАИС", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ТТНВходящаяЕГАИС.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ТТНВходящаяЕГАИС.Форма.ФормаДокумента.Провести");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ТТНВходящаяЕГАИС.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСопоставление(Команда)
	
	ВыполнитьСопоставлениеСправочников();
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	ГосударственныеИнформационныеСистемыКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ГосударственныеИнформационныеСистемыКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормЕГАИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГрузоотправительКонтрагентНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Объект.Грузоотправитель);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательКонтрагентНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Объект.Грузополучатель);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	ГрузополучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикКонтрагентНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Объект.Поставщик);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГрузоотправительНажатие(Элемент)
	ПоказатьЗначение(, Объект.Грузоотправитель);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГрузополучательНажатие(Элемент)
	ПоказатьЗначение(, Объект.Грузополучатель);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоставщикНажатие(Элемент)
	ПоказатьЗначение(, Объект.Поставщик);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТекстПоступлениеТоваровНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПоступлениеТоваровУслуг) Тогда
		ПоказатьЗначение(, ПоступлениеТоваровУслуг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьПоступлениеНажатие(Элемент)
	СоздатьПоступлениеНаОснованииТТН();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязатьСПоступлениемНажатие(Элемент)
	СвязатьСПоступлениемТТН();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокПриИзменении(Элемент)
	
	УстановитьОтборСтрок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРасхожденияПриИзменении(Элемент)
	Элементы.ТоварыКоличествоФакт.Видимость = Объект.ЕстьРасхождения;
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Товарно-транспортная накладная ЕГАИС (входящая) была изменена. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Товарно-транспортная накладная ЕГАИС (входящая) не проведена. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСКлиент.ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент <> Неопределено
		И Элемент.ТекущийЭлемент = Элементы.ТоварыАлкогольнаяПродукция
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыСопоставление Тогда
		
		ПоказатьЗначение(,ТекущаяСтрока.АлкогольнаяПродукция);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСопоставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВыполненоСопоставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не сопоставлено>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаЕГАИС);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСопоставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВыполненоСопоставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиГИСМ);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ЕстьПравоСозданияПоступления = ИнтеграцияЕГАИСПереопределяемый.ЕстьПравоСозданияПоступления();
	ЕстьПравоИзмененияПоступления = ИнтеграцияЕГАИСПереопределяемый.ЕстьПравоИзмененияПоступления();
	
	ОбновитьСтатусЕГАИС();
	
	СформироватьТекстДокументаЕГАИС();
	
	ОбновитьДанныеКлассификаторов();
	ЗаполнитьТекстПоступлениеТоваров();
	ОбновитьВидимостьРасхождений();
	
	КоличествоДокументов = ИнтеграцияЕГАИСПереопределяемый.ПолучитьКоличествоВозможныхДокументовПоступленияТоваров(
		Объект.Организация,
		Объект.ТорговыйОбъект,
		ПоставщикПредставлениеСопоставленного);
	
	Элементы.ДекорацияСвязатьСПоступлением.Заголовок = СтрЗаменить(
		Элементы.ДекорацияСвязатьСПоступлением.Заголовок, 
		"(0)",
		"(" + КоличествоДокументов + ")");
	
КонецПроцедуры

#Область Статус

&НаСервере
Процедура ОбновитьСтатусЕГАИС()
	
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется;
	ЦветТекста         = Неопределено;
	
	Если Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС
		Или Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа
		Или Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения
		Или Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений Тогда
		
		ДальнейшееДействие = Новый Массив;
		ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение);
		ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
		
	ИначеЕсли Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения
		Или Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа
		Или Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений Тогда
		
		ДальнейшееДействие = Новый Массив;
		ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
		
	КонецЕсли;
	
	Если Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа
		Или Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения
		Или Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений
		Или Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения Тогда
		
		ЦветТекста = ЦветаСтиля.ЕГАИССтатусОбработкиОшибкаПередачи;
		
	КонецЕсли;
	
	ТекстПредставление = Новый ФорматированнаяСтрока(Строка(Объект.СтатусОбработки),,ЦветТекста);
	
	СтатусЕГАИСПредставление = ИнтеграцияЕГАИС.ПредставлениеСтатусаЕГАИС(ТекстПредставление, ДальнейшееДействие);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	ОчиститьСообщения();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьПолучение" Тогда
		
		ИнтеграцияЕГАИСКлиент.ПередатьОтветЕГАИС(
			Объект.Ссылка,
			Новый ОписаниеОповещения("ПослеПередачиДанныхЕГАИС", ИнтеграцияЕГАИСКлиент));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтНакладной" Тогда
		
		ИнтеграцияЕГАИСКлиент.ОтказатьсяОтДанныхЕГАИС(
			Объект.Ссылка,
			Новый ОписаниеОповещения("ПослеПередачиДанныхЕГАИС", ИнтеграцияЕГАИСКлиент));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьОтменуПроведения" Тогда
		
		ИнтеграцияЕГАИСКлиент.ЗапроситьОтменуПроведения(
			Объект.Ссылка,
			Новый ОписаниеОповещения("ПослеПередачиДанныхЕГАИС", ИнтеграцияЕГАИСКлиент));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Функция ОбновитьВидимостьРасхождений()
	
	Элементы.ТоварыКоличествоФакт.Видимость = Объект.ЕстьРасхождения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)
	
	Если Форма.ОтборСтрок = "ТолькоНесопоставленные" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ВыполненоСопоставление", Ложь);
		Форма.Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Форма.Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВыполнитьСопоставлениеСправочников(ДополнительныеПараметры = Неопределено)
	
	ПараметрыСопоставления = Новый Структура;
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("СоздатьПоступление") Тогда
		ПараметрыСопоставления.Вставить("СоздатьПоступление", ДополнительныеПараметры.СоздатьПоступление);
	ИначеЕсли ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ВыбратьПоступление") Тогда
		ПараметрыСопоставления.Вставить("ВыбратьПоступление", ДополнительныеПараметры.ВыбратьПоступление);
	КонецЕсли;
	
	ТоварноТранспортныеНакладные = Новый Массив;
	ТоварноТранспортныеНакладные.Добавить(Объект.Ссылка);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ТоварноТранспортныеНакладные", ТоварноТранспортныеНакладные);
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуСопоставленияАлкогольнойПродукцииСНоменклатурой(
		ЭтотОбъект,
		Новый ОписаниеОповещения("СопоставлениеКлассификаторовЗавершение", ЭтотОбъект, ПараметрыСопоставления),
		ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеТоваровУслугПослеВыбора(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Если ЕстьРасхожденияТоваровТТН_ЕГАИСПоступления(Объект.Ссылка, ВыбранныйДокумент) Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПоступлениеТоваровУслугПослеВыбораВопрос",
					ЭтотОбъект,
					Новый Структура("Результат", ВыбранныйДокумент)),
				НСтр("ru='В товарах выбранного поступления есть алкогольная продукция, которой нет в ТТН. Продолжить выбор?'"), 
				РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработкаВыбораПоступлениеТоваров(ВыбранныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеТоваровУслугПослеВыбораВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ОбработкаВыбораПоступлениеТоваров(ДополнительныеПараметры.Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеКлассификаторов() Экспорт
	
	ЗаполнитьИнформациюПоСопоставлению();
	ЗаполнитьСопоставленныеТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеКлассификаторовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СоздатьПоступление") Тогда
		ОбновитьДанныеКлассификаторов();
		СоздатьПоступлениеНаОснованииТТН(Ложь);
	ИначеЕсли ДополнительныеПараметры.Свойство("ВыбратьПоступление") Тогда
		ОбновитьДанныеКлассификаторов();
		СвязатьСПоступлениемТТН(Ложь);
	Иначе
		ОбновитьДанныеКлассификаторов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоСопоставлению()
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Грузоотправитель);
	МассивОрганизаций.Добавить(Объект.Грузополучатель);
	МассивОрганизаций.Добавить(Объект.Поставщик);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Классификатор.Ссылка,
	|	Классификатор.Контрагент,
	|	Классификатор.СоответствуетОрганизации
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Классификатор
	|ГДЕ
	|	Классификатор.Ссылка В (&МассивОрганизаций)";
	
	Запрос.УстановитьПараметр("МассивОрганизаций",МассивОрганизаций);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Объект.Грузоотправитель = Выборка.Ссылка Тогда
			
			ГрузоотправительПредставлениеСопоставленного = Выборка.Контрагент;
			
			Если ЗначениеЗаполнено(ГрузоотправительПредставлениеСопоставленного) Тогда
				Элементы.ГруппаГрузоотправительПартнер.ТекущаяСтраница = Элементы.ГруппаГрузоотправительСопоставлен;
			Иначе
				Элементы.ГруппаГрузоотправительПартнер.ТекущаяСтраница = Элементы.ГруппаГрузоотправительНеСопоставлен;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Грузополучатель = Выборка.Ссылка Тогда
			
			ГрузополучательПредставлениеСопоставленного = Выборка.Контрагент;
			
			Если ЗначениеЗаполнено(ГрузополучательПредставлениеСопоставленного) Тогда
				Элементы.ГруппаГрузополучательПартнер.ТекущаяСтраница = Элементы.ГруппаГрузополучательСопоставлен;
			Иначе
				Элементы.ГруппаГрузополучательПартнер.ТекущаяСтраница = Элементы.ГруппаГрузополучательНеСопоставлен;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Поставщик = Выборка.Ссылка Тогда
			
			ПоставщикПредставлениеСопоставленного = Выборка.Контрагент;
			
			Если ЗначениеЗаполнено(ПоставщикПредставлениеСопоставленного) Тогда
				Элементы.ГруппаПоставщикПартнер.ТекущаяСтраница = Элементы.ГруппаПоставщикСопоставлен;
			Иначе
				Элементы.ГруппаПоставщикПартнер.ТекущаяСтраница = Элементы.ГруппаПоставщикНеСопоставлен;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаГрузоотправительПартнер.Видимость = ЗначениеЗаполнено(Объект.Грузоотправитель);
	Элементы.ГруппаГрузополучательПартнер.Видимость  = ЗначениеЗаполнено(Объект.Грузополучатель);
	Элементы.ГруппаПоставщикПартнер.Видимость        = ЗначениеЗаполнено(Объект.Поставщик);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстПоступлениеТоваров()
	
	ДанныеДокументаПоступления = ИнтеграцияЕГАИСПереопределяемый.ДанныеДокументаПоступленияПоТТНЕГАИС(Объект.Ссылка);
	
	ТекстПоступлениеТоваров = ДанныеДокументаПоступления.ТекстПоступлениеТоваров;
	ПоступлениеТоваровУслуг = ДанныеДокументаПоступления.ПоступлениеТоваровУслуг;
	
	Элементы.ДекорацияСвязатьСПоступлением.Видимость =
		НЕ ЗначениеЗаполнено(ПоступлениеТоваровУслуг)
		И ЕстьПравоИзмененияПоступления
		И Не ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ДекорацияСоздатьПоступление.Видимость =
		НЕ ЗначениеЗаполнено(ПоступлениеТоваровУслуг)
		И ЕстьПравоСозданияПоступления
		И Не ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ТекстПоступлениеТоваров.Видимость =
		НЕ ПустаяСтрока(ПоступлениеТоваровУслуг)
		И Не ЗначениеЗаполнено(Объект.ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстПоступлениеТоваров()
	
	ДанныеДокументаПоступления = ИнтеграцияЕГАИСПереопределяемый.ДанныеДокументаПоступления(ПоступлениеТоваровУслуг);
	
	ТекстПоступлениеТоваров = ДанныеДокументаПоступления.ТекстПоступлениеТоваров;
	ПоступлениеТоваровУслуг = ДанныеДокументаПоступления.ПоступлениеТоваровУслуг;
	
	Элементы.ДекорацияСвязатьСПоступлением.Видимость =
		НЕ ЗначениеЗаполнено(ПоступлениеТоваровУслуг)
		И ЕстьПравоИзмененияПоступления
		И Не ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ДекорацияСоздатьПоступление.Видимость =
		НЕ ЗначениеЗаполнено(ПоступлениеТоваровУслуг)
		И ЕстьПравоСозданияПоступления
		И Не ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ТекстПоступлениеТоваров.Видимость =
		НЕ ПустаяСтрока(ПоступлениеТоваровУслуг)
		И Не ЗначениеЗаполнено(Объект.ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПоступлениеТоваров(ДокументПоступления)
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		ИнтеграцияЕГАИСПереопределяемый.ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(ДокументПоступления, Объект.Ссылка);
		
		ПоступлениеТоваровУслуг = ДокументПоступления;
		
		ОбновитьТекстПоступлениеТоваров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСопоставленныеТовары(АлкогольнаяПродукция = Неопределено)
	
	Если ЗначениеЗаполнено(АлкогольнаяПродукция) Тогда
		Отбор = Новый Структура("АлкогольнаяПродукция", АлкогольнаяПродукция);
		СтрокиТоваровКОбработке = Объект.Товары.НайтиСтроки(Отбор);
		
		ТаблицаСопоставления = Объект.Товары.Выгрузить(СтрокиТоваровКОбработке ,"АлкогольнаяПродукция, ИдентификаторУпаковки, НомерСтроки");
		ТаблицаТовары = СтрокиТоваровКОбработке;
	Иначе
		ТаблицаСопоставления = Объект.Товары.Выгрузить(,"АлкогольнаяПродукция, ИдентификаторУпаковки, НомерСтроки");
		ТаблицаТовары = Объект.Товары;
	КонецЕсли;
	
	ИнтеграцияЕГАИС.ЗаполнитьНесопоставленнуюПродукцию(ТаблицаСопоставления);
	
	Для Каждого ТекСтрока Из ТаблицаТовары Цикл
		
		ЕстьСвязка = Ложь;
		
		СтрокаСопоставления = ТаблицаСопоставления.Найти(ТекСтрока.АлкогольнаяПродукция, "АлкогольнаяПродукция");
		Если СтрокаСопоставления <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаСопоставления.Номенклатура) Тогда
				ЕстьСвязка = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвязка Тогда
			ТекСтрока.ВыполненоСопоставление = Истина;
			ТекСтрока.Сопоставление = ИнтеграцияЕГАИСПереопределяемый.ПредставлениеНоменклатуры(
				СтрокаСопоставления.Номенклатура,
				СтрокаСопоставления.Характеристика,
				СтрокаСопоставления.Упаковка);
		Иначе
			ТекСтрока.ВыполненоСопоставление = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеНаОснованииТТН(СопоставлятьКлассификаторы = Истина)
	
	НесопоставленныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ВыполненоСопоставление", Ложь));
	
	Если НесопоставленныеСтроки.Количество() = 0 Тогда
		
		СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуСозданияДокументаПоступленияТоваровНаОснованииТТНЕГАИС(Объект.Ссылка);
		
	Иначе
		
		Если Не СопоставлятьКлассификаторы Тогда
			Возврат;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сопоставить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СопоставитьСтрокиВопросЗавершение",
				ЭтотОбъект,
				Новый Структура("СоздатьПоступление",Истина)),
			НСтр("ru='В документе найдены несопоставленные элементы классификаторов ЕГАИС.
			          |Сопоставить классификаторы?'"),
			Кнопки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПоступлениемТТН(СопоставлятьКлассификаторы = Истина)
	
	НесопоставленныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ВыполненоСопоставление", Ложь));
	
	Если НесопоставленныеСтроки.Количество() = 0 Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
		СтруктураОтбора.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
		СтруктураОтбора.Вставить("ЕстьАлкогольнаяПродукция", Истина);
		СтруктураОтбора.Вставить("ТолькоБезТТН_ЕГАИС", Истина);
		
		Если ЗначениеЗаполнено(ГрузоотправительПредставлениеСопоставленного) Тогда
			СтруктураОтбора.Вставить("Контрагент", ГрузоотправительПредставлениеСопоставленного);
		КонецЕсли;
		
		СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуВыбораДокументаПоступлениеТоваровУслуг(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ПоступлениеТоваровУслугПослеВыбора", ЭтотОбъект),
			СтруктураОтбора);
		
	Иначе
		
		Если Не СопоставлятьКлассификаторы Тогда
			Возврат;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сопоставить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СопоставитьСтрокиВопросЗавершение",
			ЭтотОбъект,
			Новый Структура("ВыбратьПоступление",Истина)),
			НСтр("ru='В документе найдены несопоставленные элементы классификаторов ЕГАИС.
			          |Сопоставить классификаторы?'"),
			Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьСтрокиВопросЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьСопоставлениеСправочников(ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстДокументаЕГАИС()
	
	ИспользоватьРегистр2 = ИнтеграцияЕГАИСПереопределяемый.ИспользоватьРегистр2(Объект.Грузополучатель);
	
	Элементы.ТекстДокументаЕГАИС.Видимость = ИспользоватьРегистр2
	                                       И (    Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений
	                                          Или Объект.СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения);
	
	Если Не ИспользоватьРегистр2 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыПоОснованию = ИнтеграцияЕГАИСВызовСервера.ДокументыПоОснованию(Объект.Ссылка);
	Данные = ИнтеграцияЕГАИС.ДанныеДокументаЕГАИС(Метаданные.Документы.ПередачаВРегистр2ЕГАИС, ДокументыПоОснованию);
	
	ФорматированныеСтроки = Новый Массив;
	ФорматированныеСтроки.Добавить(Данные.Представление);
	
	ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока(ФорматированныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ГрузополучательПриИзмененииНаСервере()
	
	СформироватьТекстДокументаЕГАИС();
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервереБезКонтекста
Функция ЕстьРасхожденияТоваровТТН_ЕГАИСПоступления(ТТН, ПоступлениеТоваров)
	
	Возврат ИнтеграцияЕГАИСПереопределяемый.ЕстьРасхожденияТоваровТТН_ЕГАИСПоступления(ТТН, ПоступлениеТоваров);
	
КонецФункции

#КонецОбласти

#КонецОбласти
