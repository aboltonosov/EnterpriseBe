
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСВызовСервера.ПриПолученииФормыДокумента(
		"ТТНВходящаяЕГАИС",
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Осуществляет поиск ТТН по идентификатору ЕГАИС.
//
// Параметры:
//  ИдентификаторЕГАИС - Строка - идентификатор ТТН в системе ЕГАИС.
//
// Возвращаемое значение:
//   ДокументСсылка.ТТНВходящаяЕГАИС - найденная ТТН. Неопределено - если не найдена.
//
Функция ТТНПоИдентификатору(ИдентификаторЕГАИС) Экспорт
	Перем Результат;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК ТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.ИдентификаторЕГАИС = &ИдентификаторЕГАИС";
	
	Запрос.УстановитьПараметр("ИдентификаторЕГАИС", ИдентификаторЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ТТН;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные ТТН в виде структуры перед выгрузкой в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - выгружаемая ТТН,
//  ВидДокумента - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид выгружаемого документа.
//
// Возвращаемое значение:
//   Структура - данные ТТН.
//
Функция ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента) Экспорт

	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН Тогда
		Возврат ИнициализироватьДанныеАктаПодтвержденияТТН(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН Тогда
		Возврат ИнициализироватьДанныеАктаОтказаОтТТН(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН Тогда
		Возврат ИнициализироватьДанныеАктаРасхожденийТТН(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
		Возврат ИнициализироватьДанныеЗапросаНаОтменуПроведенияТТН(ДокументСсылка);
		
	Иначе
		ТекстОшибки = НСтр("ru='Неподдерживаемый вид документа %1 для входящей ТТН'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВидДокумента);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	ИнтеграцияЕГАИСПереопределяемый.ДобавитьКомандуАнализРасхожденийПриПоступленииАлкогольнойПродукцииВТТН_ЕГАИС(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияЕГАИС.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                    КАК Период,
	|	ДанныеШапки.Ссылка                  КАК Ссылка,
	|	ДанныеШапки.Грузополучатель         КАК Грузополучатель,
	|	ДанныеШапки.СтатусОбработки         КАК СтатусОбработки,
	|	ДанныеШапки.ДатаРегистрацииДвижений КАК ДатаРегистрацииДвижений
	|
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("ПустаяДата",              '00010101');
	Запрос.УстановитьПараметр("Ссылка",                  Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки",         Реквизиты.СтатусОбработки);
	Запрос.УстановитьПараметр("СтатусыДвижений",         СтатусыДвиженийТТНВходящей());
	Запрос.УстановитьПараметр("Грузополучатель",         Реквизиты.Грузополучатель);
	Запрос.УстановитьПараметр("ДатаРегистрацииДвижений", Реквизиты.ДатаРегистрацииДвижений);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияЕГАИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИС.ЕстьТаблицаЗапроса("ВТТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Грузополучатель                       КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция     КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                 КАК Справка2,
	|	ВЫБОР
	|		КОГДА &СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений)
	|			ТОГДА ТаблицаТовары.КоличествоФакт
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ                                  КАК СвободныйОстаток,
	|	0                                      КАК Количество,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|ГДЕ
	|	&СтатусОбработки В(&СтатусыДвижений)
	|	И ВЫБОР
	|			КОГДА &СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений)
	|				ТОГДА ТаблицаТовары.КоличествоФакт <> 0
	|			ИНАЧЕ ТаблицаТовары.Количество <> 0
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&ДатаРегистрацииДвижений               КАК ДатаРегистрацииДвижений,
	|	&Грузополучатель                       КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция     КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                 КАК Справка2,
	|	0                                      КАК СвободныйОстаток,
	|	ВЫБОР
	|		КОГДА &СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений)
	|			ТОГДА ТаблицаТовары.КоличествоФакт
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ                                  КАК Количество,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|ГДЕ
	|	&СтатусОбработки В(&СтатусыДвижений)
	|	И &ДатаРегистрацииДвижений <> &ПустаяДата
	|	И ВЫБОР
	|			КОГДА &СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений)
	|				ТОГДА ТаблицаТовары.КоличествоФакт <> 0
	|			ИНАЧЕ ТаблицаТовары.Количество <> 0
	|		КОНЕЦ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТТовары";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка               КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Количество           КАК Количество,
	|	ТаблицаТовары.КоличествоФакт       КАК КоличествоФакт,
	|	ТаблицаТовары.Справка2             КАК Справка2
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтатусыДвиженийТТНВходящей()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений);
	Результат.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений();
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	ПолноеИмяДокумента = "Документ.ТТНВходящаяЕГАИС";
	
	Если ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВТТовары", ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	Результат = ОбновлениеИнформационнойБазыЕГАИС.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров.Вставить("ПустаяДата", '00010101');
	Результат.ЗначенияПараметров.Вставить("СтатусыДвижений", СтатусыДвиженийТТНВходящей());
	
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыЕГАИС.АдаптироватьЗапросМеханизмаПроведения(
		ТекстЗапроса,
		ПолноеИмяДокумента,
		СинонимТаблицыДокумента,
		ПереопределениеРасчетаПараметров,
		ТекстыЗапросаВременныхТаблиц);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает данные акта подтверждения ТТН.
//
Функция ИнициализироватьДанныеАктаПодтвержденияТТН(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Номер КАК Номер,
	|	ЛОЖЬ КАК Отказ,
	|	ТТНВходящаяЕГАИС.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС,
	|	ТТНВходящаяЕГАИС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеАкта = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхАктаПодтвержденияТТН();
	ЗаполнитьЗначенияСвойств(ДанныеАкта, Выборка);
	ДанныеАкта.Идентификатор = Строка(ДокументСсылка.УникальныйИдентификатор());
	
	Возврат ДанныеАкта;
	
КонецФункции

// Возвращает данные акта отказа от ТТН.
//
Функция ИнициализироватьДанныеАктаОтказаОтТТН(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Номер КАК Номер,
	|	ИСТИНА КАК Отказ,
	|	ТТНВходящаяЕГАИС.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС,
	|	ТТНВходящаяЕГАИС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеАкта = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхАктаПодтвержденияТТН();
	ЗаполнитьЗначенияСвойств(ДанныеАкта, Выборка);
	ДанныеАкта.Идентификатор = Строка(ДокументСсылка.УникальныйИдентификатор());
	
	Возврат ДанныеАкта;
	
КонецФункции

// Возвращает данные акта расхождений ТТН.
//
Функция ИнициализироватьДанныеАктаРасхожденийТТН(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Номер КАК Номер,
	|	ЛОЖЬ КАК Отказ,
	|	ТТНВходящаяЕГАИС.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС,
	|	ТТНВходящаяЕГАИС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеАкта = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхАктаПодтвержденияТТН();
	ЗаполнитьЗначенияСвойств(ДанныеАкта, Выборка);
	ДанныеАкта.Идентификатор = Строка(ДокументСсылка.УникальныйИдентификатор());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТТНВходящаяЕГАИСТовары.Справка2.РегистрационныйНомер КАК НомерСправки2,
	|	ТТНВходящаяЕГАИСТовары.КоличествоФакт КАК КоличествоФакт
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаАкта = Новый Структура;
		СтрокаАкта.Вставить("ИдентификаторСтроки", Выборка.ИдентификаторСтроки);
		СтрокаАкта.Вставить("НомерСправки2", Выборка.НомерСправки2);
		СтрокаАкта.Вставить("КоличествоФакт", Выборка.КоличествоФакт);
		
		ДанныеАкта.ТаблицаТоваров.Добавить(СтрокаАкта);
	КонецЦикла;
	
	Возврат ДанныеАкта;
	
КонецФункции

// Возвращает данные запроса на отмену проведения ТТН.
//
Функция ИнициализироватьДанныеЗапросаНаОтменуПроведенияТТН(ДокументСсылка)
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхЗапросаНаОтменуПроведения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Дата"  , ТекущаяДатаСеанса());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Грузополучатель.Код КАК ИдентификаторФСРАР,
	|	ТТНВходящаяЕГАИС.Номер КАК Номер,
	|	&Дата КАК Дата,
	|	ТТНВходящаяЕГАИС.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеЗапроса, Выборка);
	
	Возврат ДанныеЗапроса;
	
КонецФункции

Функция ТекстЗапросаТТН(Организация = Неопределено, ТорговыйОбъект = Неопределено, ОжидаетсяОформление = Неопределено, БезФильтров = Неопределено) Экспорт
	
	ИмяРеквизитаТТНПеремещения = ИнтеграцияЕГАИСПереопределяемый.ИмяРеквизитаТТНВходящаяДокументаПеремещениеТоваров();
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаТТНПеремещения) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументТТНВходящаяЕГАИС.Ссылка,
		|	ДокументТТНВходящаяЕГАИС.ПометкаУдаления,
		|	ДокументТТНВходящаяЕГАИС.Номер,
		|	ДокументТТНВходящаяЕГАИС.Дата,
		|	ДокументТТНВходящаяЕГАИС.Проведен,
		|	ДокументТТНВходящаяЕГАИС.ТорговыйОбъект,
		|	ДокументТТНВходящаяЕГАИС.Организация,
		|	ДокументТТНВходящаяЕГАИС.Идентификатор,
		|	ДокументТТНВходящаяЕГАИС.ИдентификаторЕГАИС,
		|	ДокументТТНВходящаяЕГАИС.Упакована,
		|	ДокументТТНВходящаяЕГАИС.НомерТТН,
		|	ДокументТТНВходящаяЕГАИС.ДатаТТН,
		|	ДокументТТНВходящаяЕГАИС.ДатаОтгрузки,
		|	ДокументТТНВходящаяЕГАИС.Грузоотправитель,
		|	ДокументТТНВходящаяЕГАИС.Грузополучатель,
		|	ДокументТТНВходящаяЕГАИС.Поставщик,
		|	ЕСТЬNULL(ДокументТТНВходящаяЕГАИС.Поставщик.Контрагент, ДокументТТНВходящаяЕГАИС.Грузоотправитель.Контрагент) КАК ПоставщикКонтрагент,
		|	ДокументТТНВходящаяЕГАИС.Основание,
		|	ДокументТТНВходящаяЕГАИС.Комментарий,
		|	ДокументТТНВходящаяЕГАИС.ТипДоставки,
		|	ДокументТТНВходящаяЕГАИС.Перевозчик,
		|	ДокументТТНВходящаяЕГАИС.Автомобиль,
		|	ДокументТТНВходящаяЕГАИС.Прицеп,
		|	ДокументТТНВходящаяЕГАИС.Заказчик,
		|	ДокументТТНВходящаяЕГАИС.Водитель,
		|	ДокументТТНВходящаяЕГАИС.ПунктПогрузки,
		|	ДокументТТНВходящаяЕГАИС.ПунктРазгрузки,
		|	ДокументТТНВходящаяЕГАИС.Перенаправление,
		|	ДокументТТНВходящаяЕГАИС.Экспедитор,
		|	ДокументТТНВходящаяЕГАИС.СуммаДокумента,
		|	ДокументТТНВходящаяЕГАИС.СтатусОбработки,
		|	ДокументТТНВходящаяЕГАИС.МоментВремени,
		|	ДокументТТНВходящаяЕГАИС.ЕстьРасхождения,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВведеноПоступление,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Документ." + ИнтеграцияЕГАИСПереопределяемый.ИмяДокументаПоступлениеТоваров() + ".ПустаяСсылка)
		|		ИНАЧЕ ПоступлениеТоваров.Ссылка
		|	КОНЕЦ КАК ПоступлениеТоваров,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
		|			ТОГДА """"
		|		ИНАЧЕ ПоступлениеТоваров.Номер
		|	КОНЕЦ КАК ПоступлениеТоваровПредставление,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
		|				И ДокументТТНВходящаяЕГАИС.СтатусОбработки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа)
		|			ТОГДА 1
		|		КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
		|				И ДокументТТНВходящаяЕГАИС.СтатусОбработки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа)
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеНакладной,
		|	ВЫБОР
		|		КОГДА ДокументТТНВходящаяЕГАИС.СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПустойСтатус
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ДокументТТНВходящаяЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИнтеграцияЕГАИСПереопределяемый.ИмяДокументаПоступлениеТоваров() + " КАК ПоступлениеТоваров
		|		ПО ДокументТТНВходящаяЕГАИС.Ссылка = ПоступлениеТоваров." + ИнтеграцияЕГАИСПереопределяемый.ИмяРеквизитаТТНВходящаяДокументаПоступлениеТоваров() + "
		|			И (ПоступлениеТоваров.Проведен)
		|ГДЕ
		|	&УсловиеОтбора
		|	" + ?(БезФильтров = Неопределено Или Не БезФильтров, "И ДокументТТНВходящаяЕГАИС.ДокументОснование = &ДокументОснование", "") + "
		|";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументТТНВходящаяЕГАИС.Ссылка,
		|	ДокументТТНВходящаяЕГАИС.ПометкаУдаления,
		|	ДокументТТНВходящаяЕГАИС.Номер,
		|	ДокументТТНВходящаяЕГАИС.Дата,
		|	ДокументТТНВходящаяЕГАИС.Проведен,
		|	ДокументТТНВходящаяЕГАИС.ТорговыйОбъект,
		|	ДокументТТНВходящаяЕГАИС.Организация,
		|	ДокументТТНВходящаяЕГАИС.Идентификатор,
		|	ДокументТТНВходящаяЕГАИС.ИдентификаторЕГАИС,
		|	ДокументТТНВходящаяЕГАИС.Упакована,
		|	ДокументТТНВходящаяЕГАИС.НомерТТН,
		|	ДокументТТНВходящаяЕГАИС.ДатаТТН,
		|	ДокументТТНВходящаяЕГАИС.ДатаОтгрузки,
		|	ДокументТТНВходящаяЕГАИС.Грузоотправитель,
		|	ДокументТТНВходящаяЕГАИС.Грузополучатель,
		|	ДокументТТНВходящаяЕГАИС.Поставщик,
		|	ЕСТЬNULL(ДокументТТНВходящаяЕГАИС.Поставщик.Контрагент, ДокументТТНВходящаяЕГАИС.Грузоотправитель.Контрагент) КАК ПоставщикКонтрагент,
		|	ДокументТТНВходящаяЕГАИС.Основание,
		|	ДокументТТНВходящаяЕГАИС.Комментарий,
		|	ДокументТТНВходящаяЕГАИС.ТипДоставки,
		|	ДокументТТНВходящаяЕГАИС.Перевозчик,
		|	ДокументТТНВходящаяЕГАИС.Автомобиль,
		|	ДокументТТНВходящаяЕГАИС.Прицеп,
		|	ДокументТТНВходящаяЕГАИС.Заказчик,
		|	ДокументТТНВходящаяЕГАИС.Водитель,
		|	ДокументТТНВходящаяЕГАИС.ПунктПогрузки,
		|	ДокументТТНВходящаяЕГАИС.ПунктРазгрузки,
		|	ДокументТТНВходящаяЕГАИС.Перенаправление,
		|	ДокументТТНВходящаяЕГАИС.Экспедитор,
		|	ДокументТТНВходящаяЕГАИС.СуммаДокумента,
		|	ДокументТТНВходящаяЕГАИС.СтатусОбработки,
		|	ДокументТТНВходящаяЕГАИС.МоментВремени,
		|	ДокументТТНВходящаяЕГАИС.ЕстьРасхождения,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваров.Ссылка ЕСТЬ NULL И ПеремещениеТоваров.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВведеноПоступление,
		|	ВЫБОР
		|		КОГДА НЕ ПеремещениеТоваров.Ссылка ЕСТЬ NULL 
		|			ТОГДА ПеремещениеТоваров.Ссылка
		|		КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
		|			ТОГДА ПоступлениеТоваров.Ссылка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ." + ИнтеграцияЕГАИСПереопределяемый.ИмяДокументаПоступлениеТоваров() + ".ПустаяСсылка)
		|	КОНЕЦ КАК ПоступлениеТоваров,
		|	ВЫБОР
		|		КОГДА НЕ ПеремещениеТоваров.Ссылка ЕСТЬ NULL 
		|			ТОГДА ПеремещениеТоваров.Номер
		|		КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
		|			ТОГДА ПоступлениеТоваров.Номер
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПоступлениеТоваровПредставление,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваров.Ссылка ЕСТЬ NULL И ПеремещениеТоваров.Ссылка ЕСТЬ NULL
		|				И ДокументТТНВходящаяЕГАИС.СтатусОбработки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа)
		|			ТОГДА 1
		|		КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL ИЛИ НЕ ПеремещениеТоваров.Ссылка ЕСТЬ NULL
		|				И ДокументТТНВходящаяЕГАИС.СтатусОбработки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа)
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеНакладной,
		|	ВЫБОР
		|		КОГДА ДокументТТНВходящаяЕГАИС.СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПустойСтатус
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ДокументТТНВходящаяЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИнтеграцияЕГАИСПереопределяемый.ИмяДокументаПоступлениеТоваров() + " КАК ПоступлениеТоваров
		|		ПО ДокументТТНВходящаяЕГАИС.Ссылка = ПоступлениеТоваров." + ИнтеграцияЕГАИСПереопределяемый.ИмяРеквизитаТТНВходящаяДокументаПоступлениеТоваров() + "
		|			И (ПоступлениеТоваров.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИнтеграцияЕГАИСПереопределяемый.ИмяДокументаПеремещениеТоваров() + " КАК ПеремещениеТоваров
		|		ПО ДокументТТНВходящаяЕГАИС.Ссылка = ПеремещениеТоваров." + ИмяРеквизитаТТНПеремещения + "
		|			И (ПеремещениеТоваров.Проведен)
		|ГДЕ
		|	&УсловиеОтбора
		|	" + ?(БезФильтров = Неопределено Или Не БезФильтров, "И ДокументТТНВходящаяЕГАИС.ДокументОснование = &ДокументОснование", "") + "
		|";
	КонецЕсли;
	
	УсловиеОтбора = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОтбора = УсловиеОтбора + "ДокументТТНВходящаяЕГАИС.Организация = &Организация";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора + "ДокументТТНВходящаяЕГАИС.ТорговыйОбъект = &ТорговыйОбъект";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОжидаетсяОформление) Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора +
		"(ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
		|И НЕ ДокументТТНВходящаяЕГАИС.СтатусОбработки В (
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа),
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа)))";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;
	
	ПустоеОснование = ИнтеграцияЕГАИС.ПустоеЗначениеОпределяемогоТипа("ОснованиеТТНВходящаяЕГАИС");
	Если ПустоеОснование = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументОснование", "НЕОПРЕДЕЛЕНО");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ ЕГАИС
#Область ФормированиеГиперссылкиВЖурналеЗакупок 

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не (ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийАлкоВРознице")
		И ПравоДоступа("Чтение", Метаданные.Документы.ТТНВходящаяЕГАИС)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Организация = Параметры.Организация;
	ТорговыйОбъект = Параметры.Склад;
	
	ТекстЗапроса = ТекстЗапросаТТН(Организация, ТорговыйОбъект, Истина);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	ТекстГиперссылки = НСтр("ru = 'ТТН ЕГАИС (входящие)'");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(
			ТекстГиперссылки,,
			ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИнтеграцияЕГАИСПереопределяемый.ИмяФормыРабочегоМестаПоОформлениюДокументаТТНВходящаяЕГАИС());
	Иначе
		Возврат Новый ФорматированнаяСтрока(
			ТекстГиперссылки,,,,
			ИнтеграцияЕГАИСПереопределяемый.ИмяФормыРабочегоМестаПоОформлениюДокументаТТНВходящаяЕГАИС());
	КонецЕсли;
	
КонецФункции

#КонецОбласти
//-- НЕ ЕГАИС

#КонецОбласти

#КонецЕсли