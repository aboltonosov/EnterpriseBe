
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = Параметры.АдресВоВременномХранилище;
	
	ПолучитьСчетаФактурыКомиссионеруКОформлению(Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент()

	ПеренестиВДокументВыполнить();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьПометки(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПометки(Значение)
	
	Для каждого Строка Из СчетаФактурыКомиссионеруКОформлению Цикл
		Строка.Пометка = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаФактурыКомиссионеруКОформлению.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаФактурыКомиссионеруКОформлению.ПрисутствуетВДокументе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСчетаФактурыКомиссионеруКОформлению(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Покупатели.Покупатель КАК Покупатель,
	|	Покупатели.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ИСТИНА КАК ПрисутствуетВДокументе
	|ПОМЕСТИТЬ Покупатели
	|ИЗ
	|	&Покупатели КАК Покупатели
	|;
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Покупатель,
	|	ВложенныйЗапрос.НомерСчетаФактуры,
	|	МАКСИМУМ(ВложенныйЗапрос.ПрисутствуетВДокументе) КАК ПрисутствуетВДокументе
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОформлению.Покупатель КАК Покупатель,
	|		КОформлению.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|		ЛОЖЬ КАК ПрисутствуетВДокументе
	|	ИЗ
	|		РегистрСведений.СчетаФактурыКомиссионерамКОформлению КАК КОформлению
	|	ГДЕ
	|		КОформлению.ОтчетКомиссионера = &ОтчетКомиссионера
	|		И КОформлению.ДатаСчетаФактуры = &Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Покупатели.Покупатель КАК Покупатель,
	|		Покупатели.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|		ИСТИНА КАК ПрисутствуетВДокументе
	|	ИЗ
	|		Покупатели КАК Покупатели) КАК ВложенныйЗапрос
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Покупатель,
	|	ВложенныйЗапрос.НомерСчетаФактуры
	|";
	Запрос.УстановитьПараметр("Покупатели",        ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище));
	Запрос.УстановитьПараметр("Дата",              НачалоДня(Параметры.Дата));
	Запрос.УстановитьПараметр("ОтчетКомиссионера", Параметры.ОтчетКомиссионера);
	
	СчетаФактурыКомиссионеруКОформлению.Загрузить(Запрос.Выполнить().Выгрузить())
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокументВыполнить()
	
	// Снятие модифицированности, т.к. перед закрытием признак проверяется.
	Модифицированность = Ложь;
	Закрыть(ПоместитьВоВременноеХранилищеСервер());
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеСервер()
	
	Возврат ПоместитьВоВременноеХранилище(
				СчетаФактурыКомиссионеруКОформлению.Выгрузить(Новый Структура("Пометка", Истина)),
				АдресВоВременномХранилище);
	
КонецФункции

#КонецОбласти

