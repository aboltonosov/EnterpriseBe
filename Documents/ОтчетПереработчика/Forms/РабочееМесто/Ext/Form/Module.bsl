
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если ВыполняетсяОбновлениеЧитаемыхДанных() Тогда
		ОбновлениеИнформационнойБазыУТ.СообщитьЧтоРаботаСФормойВременноОграничена(); 
	КонецЕсли; 
	
	УстановитьТекущуюСтраницу();
	
	ОбновитьДанные(ЭтаФорма);
	
	#Область СтандартныеМеханизмы
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(Список);
	
	Если Не ПроверкаКонтрагентовВызовСервераПовтИсп.ИспользованиеПроверкиВозможно() Тогда
		Элементы.ЕстьОшибкиПроверкиКонтрагентов.Видимость = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьДанные(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОтчетПереработчика"
		ИЛИ ИмяСобытия = "Запись_ПередачаСырьяПереработчику" 
		ИЛИ ИмяСобытия = "Запись_ПоступлениеОтПереработчика" 
		ИЛИ ИмяСобытия = "Запись_ЗаказПереработчику" Тогда
		ОбновитьДанные(ЭтаФорма);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереработчикПриИзменении(Элемент)
	
	ОбновитьДанные(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКОформлению

&НаКлиенте
Процедура СписокКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокКОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.Распоряжение) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Распоряжение);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	ОбновитьДанные(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтчетПереработчика(Команда)
	
	ИдентификаторыСтрок = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокКОформлению);
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеЗаполнения = ДанныеДляФормированияОтчетаПереработчику(ИдентификаторыСтрок);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
		ОткрытьФорму("Документ.ОтчетПереработчика.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОтчетПереработчика.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.Список.ТекущаяСтрока = Ссылка;
		ПоказатьЗначение(,МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);
		
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокКОформлению.ДатаРаспоряжения", Элементы.СписокКОформлениюДатаРаспоряжения.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанные(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Партнер",
		Форма.ОтборПереработчик,,,
		ЗначениеЗаполнено(Форма.ОтборПереработчик));

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокКОформлению,
		"Переработчик",
		Форма.ОтборПереработчик,,,
		ЗначениеЗаполнено(Форма.ОтборПереработчик));

	Форма.Элементы.Список.Обновить();
	Форма.Элементы.СписокКОформлению.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ВыполняетсяОбновлениеЧитаемыхДанных()

	МассивПроверяемыхОбъектов = Новый Массив;
	МассивПроверяемыхОбъектов.Добавить("РегистрНакопления.ЗаказыПоставщикам");
	МассивПроверяемыхОбъектов.Добавить("РегистрНакопления.ТоварыПолученныеОтПереработчика");
	Возврат НЕ ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, МассивПроверяемыхОбъектов);
	
КонецФункции

&НаКлиенте
Функция ДанныеДляФормированияОтчетаПереработчику(ИдентификаторыСтрок)

	Распоряжение = Неопределено;
	Организация = Неопределено;
	Переработчик = Неопределено;
	НаправлениеДеятельности = Неопределено;
	МассивРаспоряжений = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ТекущиеДанные = Элементы.СписокКОформлению.ДанныеСтроки(ИдентификаторСтроки);
		
		Если Распоряжение <> Неопределено 
			И Распоряжение <> ТекущиеДанные.Распоряжение 
			И ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления отчета необходимо выбрать один заказ.'"));
			Возврат Неопределено;
			
		ИначеЕсли ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказПереработчику")
				И ТипЗнч(ТекущиеДанные.Распоряжение) = Тип("ДокументСсылка.ПоступлениеОтПереработчика") 
			ИЛИ ТипЗнч(ТекущиеДанные.Распоряжение) = Тип("ДокументСсылка.ЗаказПереработчику")
				И ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПоступлениеОтПереработчика") Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Отчет допускается оформлять либо по заказу, либо по поступлениям.'"));
			Возврат Неопределено;
		ИначеЕсли Организация <> Неопределено 
			И Организация <> ТекущиеДанные.Организация Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления отчета необходимо выбрать поступления одной организации.'"));
			Возврат Неопределено;
		ИначеЕсли Переработчик <> Неопределено 
			И Переработчик <> ТекущиеДанные.Переработчик Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления отчета необходимо выбрать поступления одного переработчика.'"));
			Возврат Неопределено;
		ИначеЕсли НаправлениеДеятельности <> Неопределено 
			И НаправлениеДеятельности <> ТекущиеДанные.НаправлениеДеятельности Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления отчета необходимо выбрать распоряжения с одним направлением деятельности.'"));
			Возврат Неопределено;
		КонецЕсли;
		
		Распоряжение = ТекущиеДанные.Распоряжение;
		Переработчик = ТекущиеДанные.Переработчик;
		Организация = ТекущиеДанные.Организация;
		НаправлениеДеятельности = ТекущиеДанные.НаправлениеДеятельности;
		
		Если МассивРаспоряжений.Найти(ТекущиеДанные.Распоряжение) = Неопределено Тогда
			МассивРаспоряжений.Добавить(ТекущиеДанные.Распоряжение);
		КонецЕсли; 
		
	КонецЦикла;
	
	ОчиститьСообщения();
	
	РеквизитыШапки = Новый Структура;
	РеквизитыШапки.Вставить("Организация", Организация);
	РеквизитыШапки.Вставить("Партнер", Переработчик);
	РеквизитыШапки.Вставить("НаправлениеДеятельности", НаправлениеДеятельности);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ПоЗаказам", ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказПереработчику"));
	ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
	ДанныеЗаполнения.Вставить("МассивРаспоряжений", МассивРаспоряжений);
	
	Возврат ДанныеЗаполнения;

КонецФункции

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти
