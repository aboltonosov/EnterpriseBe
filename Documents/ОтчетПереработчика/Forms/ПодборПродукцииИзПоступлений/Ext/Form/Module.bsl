#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуТоваров();
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Элементы.ТаблицаТоварыОрганизация.Видимость = Ложь;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Параметры.Партнер) Тогда
		Элементы.ТаблицаТоварыПереработчик.Видимость = Ложь;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		Элементы.ТаблицаТоварыПодразделение.Видимость = Ложь;
	КонецЕсли; 
	
	ЗаказыСервер.УстановитьПризнакиПрисутствияСтрокиВДокументе(ТаблицаТовары, "Распоряжение", Параметры.МассивКодовСтрок);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И ЗавершениеРаботы Тогда
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
		Возврат;
	КонецЕсли;
	
	Если Не ВыполняетсяЗакрытие И Модифицированность Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Перенести изменения в документ?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		ПеренестиСтрокиВДокумент();
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ВыполняетсяЗакрытие = Истина;
		// Снятие модифицированности, т.к. перед закрытием признак проверяется.
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ПеренестиСтрокиВДокумент();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтроки(Команда)

	ОтметитьСтроки(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки(Команда)

	ОтметитьСтроки(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ТаблицаТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТаблицаТовары.ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "ТаблицаТоварыРаспоряжение" Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТаблицаТовары.ТекущиеДанные.Распоряжение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма,
		"ТаблицаТоварыХарактеристика",
		"ТаблицаТовары.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"ТаблицаТоварыНоменклатураЕдиницаИзмерения", 
		"ТаблицаТовары.Упаковка");
	
	#КонецОбласти
	
	// Выделение серым цветом строк которые есть в документе
	#Область ВыделениеСерым
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТовары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТовары.ПрисутствуетВДокументе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);
	#КонецОбласти
	
	// ЦветГиперссылки для поля ДокументПоступления
#Область ЦветГиперссылки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоварыРаспоряжение.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);																 
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваров()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокПоступлениеОтПереработчика.Организация                   КАК Организация,
	|	ДокПоступлениеОтПереработчика.Партнер                       КАК Переработчик,
	|	ДокПоступлениеОтПереработчика.Подразделение                 КАК Подразделение,
	|	ВложенныйЗапрос.Распоряжение                                КАК Распоряжение,
	|	ВложенныйЗапрос.КодСтроки                                   КАК КодСтроки,
	|	РегАналитика.Номенклатура                                   КАК Номенклатура,
	|	РегАналитика.Характеристика                                 КАК Характеристика,
	|	ЕСТЬNULL(ТаблицаПродукция.Упаковка, ТаблицаОтходы.Упаковка) КАК Упаковка,
	|	СУММА(ВложенныйЗапрос.Количество)                           КАК Количество,
	|	СУММА(ВложенныйЗапрос.Количество / 
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 
	|			ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)))    КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА РегАналитика.Номенклатура.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), 
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), 
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ДокПоступлениеОтПереработчика.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Распоряжение                  КАК Распоряжение,
	|		ВложенныйЗапрос.КодСтроки                     КАК КодСтроки,
	|		ВложенныйЗапрос.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|		ВложенныйЗапрос.КоличествоОстаток             КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки КАК ВложенныйЗапрос
	|	ГДЕ
	|		ВложенныйЗапрос.КоличествоОстаток > 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВложенныйЗапрос.Распоряжение                  КАК Распоряжение,
	|		ВложенныйЗапрос.КодСтроки                     КАК КодСтроки,
	|		ВложенныйЗапрос.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|		ВложенныйЗапрос.Количество                    КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПолученныеОтПереработчика КАК ВложенныйЗапрос
	|	ГДЕ
	|		ВложенныйЗапрос.Регистратор = &Регистратор
	|
	|	) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегАналитика
	|		ПО (РегАналитика.КлючАналитики = ВложенныйЗапрос.АналитикаУчетаНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеОтПереработчика КАК ДокПоступлениеОтПереработчика
	|		ПО (ДокПоступлениеОтПереработчика.Ссылка = ВложенныйЗапрос.Распоряжение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеОтПереработчика.Товары КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ВложенныйЗапрос.Распоряжение)
	|			И (ТаблицаПродукция.КодСтроки = ВложенныйЗапрос.КодСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеОтПереработчика.ВозвратныеОтходы КАК ТаблицаОтходы
	|		ПО (ТаблицаОтходы.Ссылка = ВложенныйЗапрос.Распоряжение)
	|			И (ТаблицаОтходы.КодСтроки = ВложенныйЗапрос.КодСтроки)
	|ГДЕ
	|	(&Переработчик = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ИЛИ ДокПоступлениеОтПереработчика.Партнер = &Переработчик)
	|	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ДокПоступлениеОтПереработчика.Организация = &Организация)
	|	И (&НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ИЛИ ДокПоступлениеОтПереработчика.НаправлениеДеятельности = &НаправлениеДеятельности)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокПоступлениеОтПереработчика.Ссылка,
	|	ВложенныйЗапрос.Распоряжение,
	|	ВложенныйЗапрос.КодСтроки,
	|	РегАналитика.Номенклатура,
	|	РегАналитика.Характеристика,
	|	ЕСТЬNULL(ТаблицаПродукция.Упаковка, ТаблицаОтходы.Упаковка),
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 
	|			ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)),
	|	ВЫБОР
	|		КОГДА РегАналитика.Номенклатура.ИспользованиеХарактеристик В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), 
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), 
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДокПоступлениеОтПереработчика.НаправлениеДеятельности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокПоступлениеОтПереработчика.Дата,
	|	ДокПоступлениеОтПереработчика.Номер,
	|	ДокПоступлениеОтПереработчика.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаПродукция.Упаковка",
		"ТаблицаПродукция.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаОтходы.Упаковка",
		"ТаблицаОтходы.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", Параметры.Ссылка);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Переработчик", Параметры.Партнер);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Параметры.НаправлениеДеятельности);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДанныеСтроки = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокиВДокумент()

	СтруктураПоиска = Новый Структура("СтрокаВыбрана", Истина);
 	СписокСтрок = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
	
	Если СписокСтрок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать продукцию.'"));
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ДанныеЗаполнения = ДанныеДляФормированияОтчетаПереработчику(СписокСтрок);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Закрыть(ДанныеЗаполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ДанныеДляФормированияОтчетаПереработчику(СписокСтрок)

	Распоряжение = Неопределено;
	Организация = Неопределено;
	Переработчик = Неопределено;
	НаправлениеДеятельности = Неопределено;
	СписокПродукции = Новый Массив;
	МассивРаспоряжений = Новый Массив;
	
	Для каждого ТекущиеДанные Из СписокСтрок Цикл
		
		Если Распоряжение <> Неопределено 
			И Распоряжение <> ТекущиеДанные.Распоряжение 
			И ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления отчета необходимо выбрать продукцию одного заказа.'"));
			Возврат Неопределено;
			
		ИначеЕсли ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказПереработчику")
				И ТипЗнч(ТекущиеДанные.Распоряжение) = Тип("ДокументСсылка.ПоступлениеОтПереработчика") 
			ИЛИ ТипЗнч(ТекущиеДанные.Распоряжение) = Тип("ДокументСсылка.ЗаказПереработчику")
				И ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПоступлениеОтПереработчика") Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Отчет допускается оформлять либо по заказу, либо по поступлениям.'"));
			Возврат Неопределено;
		ИначеЕсли Организация <> Неопределено 
			И Организация <> ТекущиеДанные.Организация Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления отчета необходимо выбрать продукцию одной организации.'"));
			Возврат Неопределено;
		ИначеЕсли Переработчик <> Неопределено 
			И Переработчик <> ТекущиеДанные.Переработчик Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления отчета необходимо выбрать продукцию одного переработчика.'"));
			Возврат Неопределено;
		ИначеЕсли НаправлениеДеятельности <> Неопределено 
			И НаправлениеДеятельности <> ТекущиеДанные.НаправлениеДеятельности Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления отчета необходимо выбрать продукцию с одинаковым направлением деятельности.'"));
			Возврат Неопределено;
		КонецЕсли;
		
		Распоряжение = ТекущиеДанные.Распоряжение;
		Переработчик = ТекущиеДанные.Переработчик;
		Организация = ТекущиеДанные.Организация;
		НаправлениеДеятельности = ТекущиеДанные.НаправлениеДеятельности;
		
		ДанныеПродукции = Новый Структура("Распоряжение,КодСтроки");
		ЗаполнитьЗначенияСвойств(ДанныеПродукции, ТекущиеДанные);
		СписокПродукции.Добавить(ДанныеПродукции);
		
		Если МассивРаспоряжений.Найти(ТекущиеДанные.Распоряжение) = Неопределено Тогда
			МассивРаспоряжений.Добавить(ТекущиеДанные.Распоряжение);
		КонецЕсли; 
		
	КонецЦикла;
	
	ОчиститьСообщения();
	
	РеквизитыШапки = Новый Структура;
	РеквизитыШапки.Вставить("Организация", Организация);
	РеквизитыШапки.Вставить("Партнер", Переработчик);
	РеквизитыШапки.Вставить("НаправлениеДеятельности", НаправлениеДеятельности);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ПоЗаказам", ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказПереработчику"));
	ДанныеЗаполнения.Вставить("СписокПродукции", СписокПродукции);
	ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
	ДанныеЗаполнения.Вставить("МассивРаспоряжений", МассивРаспоряжений);
	
	Возврат ДанныеЗаполнения;

КонецФункции

&НаСервере
Процедура ОтметитьСтроки(Значение)

	Для Каждого СтрокаТЧ Из ТаблицаТовары.НайтиСтроки(Новый Структура("СтрокаВыбрана", Не Значение)) Цикл

		СтрокаТЧ.СтрокаВыбрана = Значение;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
