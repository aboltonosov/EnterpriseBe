#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура заполняет табличную часть документа по правилу заполнения из различных источников
//
Процедура ЗаполнитьПоПравилуЗаполнения() Экспорт 
	
	Параметры = Новый Структура("Ссылка, Сценарий, КроссТаблица, ИзменитьРезультатНа, ЗаполненоАвтоматически, ТочностьОкругления, 
		|Подразделение, Статус, Периодичность, НачалоПериода, ОкончаниеПериода");
	
	ЗаполнитьЗначенияСвойств(Параметры, ЭтотОбъект);
	
	Параметры.Вставить("ЗаполнятьПоПравилу", Истина);
	Параметры.Вставить("ПравилоЗаполнения", ПравилоЗаполнения.Выгрузить());
	Параметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки.Получить());
	
	ЗаполняемаяТЧ = Продукция.Выгрузить();
	Если ОбновитьДополнить = 0 Тогда
		ЗаполняемаяТЧ.Очистить();
	КонецЕсли;
	
	Параметры.Вставить("ЗаполняемаяТЧ", ЗаполняемаяТЧ);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	Документы.ПланПроизводства.ЗаполнитьПоПравилуЗаполнения(Параметры, АдресХранилища);
	
	ЗаполняемаяТЧ = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Продукция.Загрузить(ЗаполняемаяТЧ);
	
	ЗаполненоАвтоматически = Истина;
	
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПланов[НовыйСтатус];
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Ответственный = Пользователи.ТекущийПользователь();
	
	ЗаполнитьДанныеПоУмолчанию();
	
	ЗаполнитьРеквизитыПланаПоСценариюВидуПлана();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Планирование.ПроверитьСтатусУтвержден(ЭтотОбъект, Отказ, РежимЗаписи, Перечисления.ТипыПланов.ПланПроизводства);
	
	//++ НЕ УТ
	Если НЕ ОтражаетсяВБюджетировании Тогда
		СтатьяБюджетов = Неопределено;
		СценарийБюджетирования = Неопределено;
	КонецЕсли;
	//-- НЕ УТ
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ЗаполнитьВерсиюУправленияПроизводством(РежимЗаписи);
	
	ПрочитатьПараметрыЗамещения(Ложь);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьПараметрыЗамещения(Истина);
	
	ЕстьЗаданияНаПересчет = Ложь;
	
	ЗаписатьОчередьПересчетаЗамещенныхДокументов(ЕстьЗаданияНаПересчет);
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И ЕстьЗаданияНаПересчет Тогда
		
		ЗапуститьФоновуюОбработкуДвижений();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	ЗаполнитьРеквизитыПланаПоСценариюВидуПлана();
	Для каждого СтрокаТовары из Продукция Цикл

		СтрокаТовары.Отменено = Ложь;

	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Документы.ПланПроизводства.ЗаписатьОчередьФоновогоПроведения(Ссылка, Сценарий, Ложь);
	
	ЗапуститьФоновуюОбработкуДвижений();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ЗаполнятьСпецификацию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "ИспользоватьДляПланированияМатериалов");
	
	Если КроссТаблица Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Продукция");
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.КоличествоУпаковок");
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.Количество");
		Если Не ЗаполнятьСпецификацию Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Продукция.Спецификация");
		КонецЕсли;
	Иначе
		ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
		ПараметрыПроверки.ИмяТЧ = "Продукция";
		ПараметрыПроверки.ПроверитьВозможностьОкругления = Ложь;
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	КонецЕсли; 
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",                    "Продукция");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",          НСтр("ru='Продукция'"));
	ПараметрыПроверки.Вставить("Периодичность",            Периодичность);
	ПараметрыПроверки.Вставить("ДатаНачала",               НачалоПериода);
	ПараметрыПроверки.Вставить("ДатаОкончания",            ОкончаниеПериода);
	ПараметрыПроверки.Вставить("ИмяПоляДатыПериода",       "ДатаВыпуска");
	ПараметрыПроверки.Вставить("ПредставлениеДатыПериода", НСтр("ru='Дата выпуска'"));
	
	ПланированиеКлиентСервер.ПроверитьДатуПериодаТЧ(ЭтотОбъект, Отказ, ПараметрыПроверки);
	
	Если КроссТаблица Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.Характеристика");
	Иначе
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "Продукция";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	КонецЕсли;
	
	Планирование.ОбработкаПроверкиЗаполненияПоСценариюВидуПлана(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	//++ НЕ УТ
	Если НЕ ОтражаетсяВБюджетировании Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяБюджетов");
		МассивНепроверяемыхРеквизитов.Добавить("СценарийБюджетирования");
	КонецЕсли;
	//-- НЕ УТ
	
	Если Не КроссТаблица Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПродукции.Номенклатура,
		|	ТаблицаПродукции.Характеристика,
		|	ТаблицаПродукции.Спецификация,
		|	ТаблицаПродукции.Назначение,
		|	ТаблицаПродукции.Количество
		|ПОМЕСТИТЬ Продукция
		|ИЗ
		|	&ТаблицаПродукции КАК ТаблицаПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Продукция.Номенклатура,
		|	Продукция.Характеристика,
		|	Продукция.Спецификация,
		|	Продукция.Назначение,
		|	СУММА(Продукция.Количество) КАК Количество
		|ИЗ
		|	Продукция КАК Продукция
		|ГДЕ
		|	Продукция.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И Продукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Продукция.Номенклатура,
		|	Продукция.Спецификация,
		|	Продукция.Назначение,
		|	Продукция.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(Продукция.Количество) = 0";
		Запрос.УстановитьПараметр("ТаблицаПродукции", Продукция.Выгрузить());
		
		ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
		
		КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Назначение,Спецификация");
		ЗаполнятьНазначениеВТЧ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана,"ЗаполнятьНазначениеВТЧ");
		
		Для Каждого СтрокаОшибки Из ТаблицаОшибок Цикл
			
			ТекстСообщения = НСтр("ru='Для строк плана с номенклатурой %Номенклатура%%Характеристика%%Назначение%%Спецификация% не запланировано количество ни в одном периоде планирования.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%", СтрокаОшибки.Номенклатура);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Характеристика%", ?(ЗначениеЗаполнено(СтрокаОшибки.Характеристика), НСтр("ru=', характеристикой'") + СтрокаОшибки.Характеристика, ""));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", ?(ЗначениеЗаполнено(СтрокаОшибки.Назначение)
				И ЗаполнятьНазначениеВТЧ,
				НСтр("ru=', назначением'") + СтрокаОшибки.Назначение, ""));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Спецификация%", ?(ЗначениеЗаполнено(СтрокаОшибки.Спецификация), НСтр("ru=' и спецификацией'") + СтрокаОшибки.Спецификация, ""));
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОшибки);
			СтрокаПоиска = Продукция.НайтиСтроки(СтруктураПоиска)[0];
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", СтрокаПоиска.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных, Поле,"Объект",Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет подразделение, сценарий, вид плана и признак кросс-таблицы в документе, значением по умолчанию.
//
Процедура ЗаполнитьДанныеПоУмолчанию()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ ДанныеДокумента.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СценарииТоварногоПланирования.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииТоварногоПланирования.ПустаяСсылка)
	|		ИНАЧЕ ДанныеДокумента.Сценарий
	|	КОНЕЦ КАК Сценарий,
	|	ВЫБОР
	|		КОГДА ВидыПланов.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|		ИНАЧЕ ДанныеДокумента.ВидПлана
	|	КОНЕЦ КАК ВидПлана,
	|	ДанныеДокумента.ЗаполнятьПоФормуле КАК ЗаполнятьПоФормуле,
	|	ДанныеДокумента.КроссТаблица КАК КроссТаблица
	|ИЗ
	|	Документ.ПланПроизводства КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|		ПО ДанныеДокумента.ВидПлана = ВидыПланов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СценарииТоварногоПланирования КАК СценарииТоварногоПланирования
	|		ПО ДанныеДокумента.Сценарий = СценарииТоварногоПланирования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО ДанныеДокумента.Подразделение = СтруктураПредприятия.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ответственный = &Ответственный
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
	Сценарий = ЗначениеНастроекПовтИсп.ПолучитьСценарийПоУмолчанию(Перечисления.ТипыПланов.ПланПроизводства, Сценарий);
	
КонецПроцедуры

Процедура ЗапуститьФоновуюОбработкуДвижений()
	
	Планирование.ЗапускВыполненияФоновогоПроведения(Ссылка);
	
КонецПроцедуры

Процедура ЗаполнитьВерсиюУправленияПроизводством(РежимЗаписи)
	
	ЗаполнитьВерсию = Ложь;
	
	Если ЭтоНовый() Тогда
		
		ЗаполнитьВерсию = Истина;
		
	Иначе
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Проведен");
			
			ЗаполнитьВерсию = НЕ ЗначенияРеквизитов.Проведен;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнитьВерсию Тогда
		
		УправлениеПроизводством2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПараметрыЗамещения(ДанныеИзОбъекта)
	
	Если НЕ ДанныеИзОбъекта И ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИзОбъекта Тогда
		Источник = ЭтотОбъект;
	Иначе
		Источник = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Ссылка, "Проведен,Замещающий,НачалоПериода,ОкончаниеПериода,Сценарий,Подразделение,Назначение,Дата");
	КонецЕсли;
	
	Если НЕ Источник.Проведен ИЛИ НЕ Источник.Замещающий Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗамещения = Новый Структура;
	
	ДанныеЗамещения.Вставить("НачалоПериода", Источник.НачалоПериода);
	ДанныеЗамещения.Вставить("ОкончаниеПериода", Источник.ОкончаниеПериода);
	ДанныеЗамещения.Вставить("Сценарий", Источник.Сценарий);
	ДанныеЗамещения.Вставить("Подразделение", Источник.Подразделение);
	ДанныеЗамещения.Вставить("Назначение", Источник.Назначение);
	ДанныеЗамещения.Вставить("СтатусЗамещения", Планирование.ПолучитьСтатусЗамещения(Ссылка));
	ДанныеЗамещения.Вставить("МоментВремени", Новый МоментВремени(Источник.Дата, Ссылка));
	
	Если ДополнительныеСвойства.Свойство("ПараметрыЗамещения") Тогда
		
		Для каждого ДанныеЗамещенияПредш Из ДополнительныеСвойства.ПараметрыЗамещения Цикл
			
			Если НЕ ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(
				ДанныеЗамещения,
				ДанныеЗамещенияПредш,
				"НачалоПериода,ОкончаниеПериода,Сценарий,Подразделение,Назначение,СтатусЗамещения,МоментВремени") Тогда
				
				ДополнительныеСвойства.ПараметрыЗамещения.Добавить(ДанныеЗамещения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ДополнительныеСвойства.Вставить("ПараметрыЗамещения", Новый Массив);
		ДополнительныеСвойства.ПараметрыЗамещения.Добавить(ДанныеЗамещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОчередьПересчетаЗамещенныхДокументов(ЕстьЗаданияНаПересчет)
	
	Если НЕ ДополнительныеСвойства.Свойство("ПараметрыЗамещения")
		ИЛИ ДополнительныеСвойства.ПараметрыЗамещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Сч = 1;
	
	Для каждого ДанныеЗамещения Из ДополнительныеСвойства.ПараметрыЗамещения Цикл
		
		ТекстЗапроса = ТекстЗапроса
			+ ?(ПустаяСтрока(ТекстЗапроса), "" ,
				"
				|	ОБЪЕДИНИТЬ
				|")
			+ "
				|ВЫБРАТЬ
				|	&ПланПроизводства КАК ПланПроизводства,
				|	&Сценарий" + Сч + " КАК Сценарий,
				|	ЗамещаемыеПланы.Ссылка КАК ПланПроизводстваПересчет
				|ИЗ
				|	Документ.ПланПроизводства КАК ЗамещаемыеПланы
				|ГДЕ
				|	&НачалоПериода" + Сч + " < ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ЗамещаемыеПланы.ОкончаниеПериода, ДЕНЬ), СЕКУНДА, 1)
				|	И &ОкончаниеПериода" + Сч + " > ЗамещаемыеПланы.НачалоПериода
				|	И &Сценарий" + Сч + " = ЗамещаемыеПланы.Сценарий
				|	И &Подразделение" + Сч + " = ЗамещаемыеПланы.Подразделение
				|	И &Назначение" + Сч + " = ЗамещаемыеПланы.Назначение
				|	И &СтатусЗамещения" + Сч + " = ЗамещаемыеПланы.Статус
				|	И &МоментВремени" + Сч + " > ЗамещаемыеПланы.МоментВремени
				|	И (ЗамещаемыеПланы.Проведен = ИСТИНА)
				|";
		
	    Запрос.УстановитьПараметр("НачалоПериода" + Сч, ДанныеЗамещения.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода" + Сч, КонецДня(ДанныеЗамещения.ОкончаниеПериода)+1);
		Запрос.УстановитьПараметр("Сценарий" + Сч, ДанныеЗамещения.Сценарий);
		Запрос.УстановитьПараметр("Подразделение" + Сч, ДанныеЗамещения.Подразделение);
		Запрос.УстановитьПараметр("Назначение" + Сч, ДанныеЗамещения.Назначение);
		Запрос.УстановитьПараметр("СтатусЗамещения" + Сч, ДанныеЗамещения.СтатусЗамещения);
		Запрос.УстановитьПараметр("МоментВремени" + Сч, ДанныеЗамещения.МоментВремени);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ПланПроизводства", Ссылка);
	
	Очередь = Запрос.Выполнить().Выгрузить();
	
	Если Очередь.Количество() > 0 Тогда
		
		РегистрыСведений.ОчередьРасчетаПланаПроизводства.ЗаписатьОчередь(Очередь, Ссылка);
		ЕстьЗаданияНаПересчет = Истина;
		
	Иначе
		
		ЕстьЗаданияНаПересчет = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПланаПоСценариюВидуПлана()
	
	РеквизитыСценария = "Периодичность";
	//++ НЕ УТ
	РеквизитыСценария = РеквизитыСценария + ", СценарийБюджетирования";
	//-- НЕ УТ
	ПараметрыСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, РеквизитыСценария);
	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		ВидПлана = Планирование.ПолучитьВидПланаПоУмолчанию(Перечисления.ТипыПланов.ПланПроизводства, Сценарий);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСценария);
	//++ НЕ УТ
	Если ЗначениеЗаполнено(ВидПлана) Тогда
		РеквизитыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "ОтражаетсяВБюджетировании, СтатьяБюджетов");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыВидаПлана);
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
