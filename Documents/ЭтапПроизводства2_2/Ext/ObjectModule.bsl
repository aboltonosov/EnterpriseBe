#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СтатусДокумента

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	СтатусДоИзменения = Статус;
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЭтаповПроизводства2_2[НовыйСтатус];
	
	Статус = ЗначениеНовогоСтатуса;
	
	ДанныеЗаполнения = УправлениеПроизводством.ДанныеЗаполненияПриИзмененииСтатуса(ЭтотОбъект);
	
	УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
		ЭтотОбъект, 
		СтатусДоИзменения, 
		ДанныеЗаполнения);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область Прочее

// Устанавливает используемый вид РЦ среди основных и альтернативных видов РЦ.
//
// Параметры:
//  КлючСвязи			 - УникальныйИдентификатор - ключ связи вида РЦ (табличная часть ВидыРабочихЦентров).
//  ВидРабочегоЦентра	 - СправочникСсылка.ВидыРабочихЦентров - вид РЦ, который необходимо назначить используемым.
//
Процедура ЗаменитьИспользуемыйВидРЦ(КлючСвязи, ВидРабочегоЦентра) Экспорт
	
	НайденнаяСтрока = ВидыРабочихЦентров.Найти(КлючСвязи, "КлючСвязи");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока.Использовать = (НайденнаяСтрока.ВидРабочегоЦентра = ВидРабочегоЦентра);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", КлючСвязи);
	НайденныеСтроки = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Использовать = (НайденнаяСтрока.ВидРабочегоЦентра = ВидРабочегоЦентра);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает используемые виды рабочих центров
// 
// Возвращаемое значение:
//   - Массив - используемые виды рабочих центров
//
Функция ИспользуемыеВидыРабочихЦентров() Экспорт
	
	УправлениеПроизводством.ИспользуемыеВидыРабочихЦентров(ЭтотОбъект);
	
КонецФункции

// Изменяет порядок этапа в цепочке этапов.
//
// Параметры:
//  ДанныеЗаполнения - Структура - содержит данные, для изменения порядка этапа:
//		* НомерЭтапа - Число - новый номер этапа.
//		* НомерСледующегоЭтапа - Число - новый номер следующего этапа.
//		* ВыпускающийЭтап - ДокументСсылка.ЭтапПроизводства2_2 - ссылка на выпускающий этап.
//		* ПоследующиеЭтапы - Массив - содержит ссылки на последующие этапы.
//		* ВыходныеИзделия - ТаблицаЗначений, Неопределено - данные выходных изделий
//			по рассчитываемой стоимости,выпускамых данной цепочкой.
//
Процедура ИзменитьПорядокСледования(ДанныеЗаполнения) Экспорт
	
	ВыпускающийЭтапДоИзменения = ВыпускающийЭтап;
	
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		ДанныеЗаполнения,
		"НомерЭтапа,
		|НомерСледующегоЭтапа,
		|ВыпускающийЭтап");
	
	Последователи.Очистить();
	
	Если ДанныеЗаполнения.Свойство("ПоследующиеЭтапы")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ПоследующиеЭтапы) Тогда
		
		Для Каждого Последователь ИЗ ДанныеЗаполнения.ПоследующиеЭтапы Цикл
			
			НоваяСтрока = Последователи.Добавить();
			НоваяСтрока.Этап     = Последователь;
			НоваяСтрока.ТипСвязи = ТипСвязиПоследователь();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыпускающийЭтап = Ссылка Тогда
		
		Если ВыпускающийЭтап <> ВыпускающийЭтапДоИзменения
			И ДанныеЗаполнения.Свойство("ВыходныеИзделия")
			И ЗначениеЗаполнено(ДанныеЗаполнения.ВыходныеИзделия) Тогда
			
			Для Каждого Строка Из ДанныеЗаполнения.ВыходныеИзделия Цикл
				ЗаполнитьЗначенияСвойств(ВыходныеИзделия.Добавить(), Строка);
			КонецЦикла;
			ЗаполнитьНазначенияПобочногоВыпускаДавальцу("ВыходныеИзделия");
			
		КонецЕсли;
		
	ИначеЕсли ВыходныеИзделия.Количество() > 0 Тогда
		
		ВыходныеИзделия.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ по данным выполненных производственных операций.
//
Процедура ЗаполнитьПоПроизводственнымОперациям() Экспорт
	
	ДанныеОпераций = ДанныеЗавершенныхОпераций();
	
	Настройки = Документы.ПроизводственнаяОперация2_2.НастройкиУчета(Подразделение, МаршрутнаяКарта);
	
	Если Настройки.ИспользоватьМатериалы Тогда
		
		ЗаполнитьМатериалыПоОперациям(ДанныеОпераций.МатериалыИРаботы);
		
	КонецЕсли;
	
	Если Настройки.ИспользоватьВыходныеИзделия Тогда
	
		ЗаполнитьВыходныеПобочныеИзделияПоОперациям(
			ДанныеОпераций.ВыходныеИзделия, ДанныеОпераций.ВыходныеИзделияСерии);
			
	КонецЕсли;
	
	ЗаполнитьТрудозатратыПоОперациям(ДанныеОпераций.Трудозатраты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполняетсяПакетноеФормирование() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроверитьПроизводственныйПроцесс(Отказ, РежимЗаписи);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	УстановитьКлючВСтрокахТабличныхЧастей(Отказ);
	
	ЗаполнитьСлужебныеРеквизиты();
	
	#Область ЗаполнениеНазначений
	Если НЕ ОтключеноФормированиеНазначения() Тогда
		
		ИсходноеНазначение = Назначение;
		ШаблонНазначения = ШаблонНазначения();
		
		Справочники.Назначения.ПередЗаписьюДокумента(Назначение, ШаблонНазначения);
		
		Если ИсходноеНазначение = НазначениеМатериалы
				И ИсходноеНазначение <> Назначение
			ИЛИ НазначениеМатериалы.Пустая() Тогда
		
			Документы.ЭтапПроизводства2_2.ПроверитьЗаполнитьНазначенияПоСхеме(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	ОчиститьНеИспользуемыеДанные();
	
	// Проверим необходимость создания задания к перерасчету себестоимости, заполним периоды изменения табличных частей
	Если РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		ОписаниеТабличныхЧастей = Новый Структура;
		ОписаниеТабличныхЧастей.Вставить("РасходМатериаловИРабот", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество,КоличествоУпаковок", "ДатаРасхода", Истина));
		ОписаниеТабличныхЧастей.Вставить("ОбеспечениеМатериаламиИРаботами", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество,КоличествоУпаковок", "ДатаОтгрузки", Истина));
		ОписаниеТабличныхЧастей.Вставить("ЭкономияМатериалов", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество,КоличествоУпаковок", "ДатаОперации", Истина));
		ОписаниеТабличныхЧастей.Вставить("Трудозатраты", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество", "ДатаВыполнения", Ложь));
		ОписаниеТабличныхЧастей.Вставить("ВыходныеИзделия", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество", "ДатаПроизводства", Истина));
		ОписаниеТабличныхЧастей.Вставить("ПобочныеИзделия", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество", "ДатаПроизводства", Истина));
		
		ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
		
		РезультатПроверки = УниверсальныеМеханизмыПартийИСебестоимости.ПериодыИзмененияТабличныеЧастиДокумента(ЭтотОбъект, ОписаниеТабличныхЧастей, ПерезаполнитьВидыЗапасов);
		
		ДополнительныеСвойства.Вставить("ПериодЗаданияКРасчетуСебестоимости", РезультатПроверки.ОбщийМинимальныйПериод);
		ДополнительныеСвойства.Вставить("ПериодЗаполненияВидыЗапасовОбеспечение", РезультатПроверки.ОбеспечениеМатериаламиИРаботами);
		ДополнительныеСвойства.Вставить("ПериодЗаполненияВидыЗапасовЭкономия", РезультатПроверки.ЭкономияМатериалов);
		ДополнительныеСвойства.Вставить("ПериодЗаполненияВидыЗапасовРасход", РезультатПроверки.МинимальныйПериод);
		
		КонецПериодаСохраняемыхДвижений = ?(ЗначениеЗаполнено(РезультатПроверки.ОбщийМинимальныйПериод),
			НачалоМесяца(РезультатПроверки.ОбщийМинимальныйПериод) - 1,
			Дата(1,1,1));
			
		РегистрыНакопления.СебестоимостьТоваров.ИнициализироватьСохранениеДвиженийДокументаЗаПериод(
			ДополнительныеСвойства, // доп. свойства документа
			, // начало периода сохраняемых движений
			КонецПериодаСохраняемыхДвижений);
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется
		И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован Тогда
		
		//ВыходныеИзделия и ПобочныеИзделия
		// заполнение аналитики в зависимости от хозяйственной операции и типа склада получателя
		
		МассивСкладов = Новый Массив;
		Для Каждого Строка Из ВыходныеИзделия Цикл
			Если ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") Тогда
				МассивСкладов.Добавить(Строка.Получатель);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из ПобочныеИзделия Цикл
			Если ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") Тогда
				МассивСкладов.Добавить(Строка.Получатель);
			КонецЕсли;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		
		РеквизитыСкладов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСкладов,"ЦеховаяКладовая,Подразделение");
		
		СтруктураАналитки = Новый Структура();
		СтруктураАналитки.Вставить("Номенклатура");
		СтруктураАналитки.Вставить("Характеристика");
		СтруктураАналитки.Вставить("Серия");
		СтруктураАналитки.Вставить("Склад");
		СтруктураАналитки.Вставить("Назначение");
		СтруктураАналитки.Вставить("СтатьяКалькуляции");
		
		Для Каждого Строка Из ВыходныеИзделия Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураАналитки, Строка);
			
			Если Строка.СписатьНаРасходы Или
				ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") И Не РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая Или 
				ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") И РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая И Подразделение <> РеквизитыСкладов[Строка.Получатель].Подразделение Тогда
				СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
				СтруктураАналитки.Склад = Подразделение;
				СтруктураАналитки.Назначение = Назначение;
			Иначе
				СтруктураАналитки.Склад = Строка.Получатель;
			КонецЕсли;
			
			Строка.АналитикаУчетаНоменклатуры = РегистрыСведений.АналитикаУчетаНоменклатуры.ЗначениеКлючаАналитики(СтруктураАналитки);
			
		КонецЦикла;
		
		Для Каждого Строка Из ПобочныеИзделия Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураАналитки, Строка);
			
			Если Строка.СписатьНаРасходы Или
				ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") И Не РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая Или 
				ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") И РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая И Подразделение <> РеквизитыСкладов[Строка.Получатель].Подразделение Тогда
				СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
				СтруктураАналитки.Склад = Подразделение;
				СтруктураАналитки.Назначение = Назначение;
			Иначе
				СтруктураАналитки.Склад = Строка.Получатель;
			КонецЕсли;
			
			СтруктураАналитки.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПустаяСсылка();
			Строка.АналитикаУчетаНоменклатуры = РегистрыСведений.АналитикаУчетаНоменклатуры.ЗначениеКлючаАналитики(СтруктураАналитки);
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		//ОбеспечениеМатериаламиИРаботами
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			Перечисления.ХозяйственныеОперации.ПередачаВПроизводство,
			Подразделение, Подразделение,
			Неопределено);
			
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		ТекстПоляНазначение =
		"ВЫБОР 
			|		КОГДА Коллекция.ВариантОбеспечения В (
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно), 
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) 
			|			ТОГДА &Назначение
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) 
			|	КОНЕЦ";
			// Аналитика отправителя содержит назначение, под которое материалы переданы в кладовую
		ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля,Значение",ТекстПоляНазначение,НазначениеМатериалы));
		ИменаПолей.Вставить("Произвольный", "Склад");
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ОбеспечениеМатериаламиИРаботами, МестаУчета, ИменаПолей);
		
		//РасходМатериаловИРабот
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			Перечисления.ХозяйственныеОперации.ВыпускПродукции,
			Подразделение, Подразделение,
			Неопределено);
			
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля,Значение","&Назначение",Назначение));
		ИменаПолей.Вставить("СтатусУказанияСерий");
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(РасходМатериаловИРабот, МестаУчета, ИменаПолей);
		
		//ЭкономияМатериалов
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства,
			Подразделение, Подразделение,
			Неопределено);
			
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
			// назначение возвращаемых материалов соответствует назначению, под которые материалы переданы под этап, то есть назначением является этап
		ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля,Значение","&Назначение",Назначение));
		ИменаПолей.Вставить("СтатусУказанияСерий");
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ЭкономияМатериалов, МестаУчета, ИменаПолей);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВыходныеИзделия);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ПобочныеИзделия);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ЭкономияМатериалов);
		
		ЗаполнитьВидыЗапасов(Отказ);
	КонецЕсли;
	Если РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		// Проверим необходимость создания задания к перерасчету себестоимости.
		ОписаниеТабличныхЧастей = Новый Структура;
		ОписаниеТабличныхЧастей.Вставить("РасходМатериаловИРабот",
			Новый Структура("Ресурсы, Дата", "Количество", "ДатаРасхода"));
		ОписаниеТабличныхЧастей.Вставить("Трудозатраты",
			Новый Структура("Ресурсы, Дата", "Количество", "ДатаВыполнения"));
		
		РезультатПроверки = УниверсальныеМеханизмыПартийИСебестоимости.ИзмененыТабличныеЧастиДокумента(ЭтотОбъект, ОписаниеТабличныхЧастей);
		Если РезультатПроверки.ЕстьИзменения Тогда
			ДополнительныеСвойства.Вставить("ЗаданиеКРасчетуСебестоимости", НачалоМесяца(РезультатПроверки.Дата));
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПризнакЕстьМаркируемаяПродукция();
	
	ЗаполнитьПоследователейПоИзделиям();
	
	ЗарегистрироватьОбновлениеСвязанныхДанных();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	#Область ЗаполнениеНазначений
	ШаблонНазначения = ШаблонНазначения();
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, ПометкаУдаления, Партнер");
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ЭтотОбъект);
	РеквизитыДокумента.Партнер = Подразделение;
	
	Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, РеквизитыДокумента);
	#КонецОбласти
	
	Если ВыполняетсяПакетноеФормирование() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	ПроверитьИЗаписатьРучноеРазмещениеВГрафике();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Распоряжение            = Неопределено;
	Организация             = Неопределено;
	ВыпускПодДеятельность   = Неопределено;
	НаправлениеДеятельности = Неопределено;
	Партнер                 = Неопределено;
	Договор                 = Неопределено;
	
	Спецификация = Неопределено;
	
	Назначение = Неопределено;
	НазначениеПродукция = Неопределено;
	НазначениеМатериалы = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("СпособЗаполнения") Тогда
			
			Если ДанныеЗаполнения.СпособЗаполнения = "ЗаполнитьПоСпецификации" Тогда
				
				ЗаполнитьПоСпецификации(ДанныеЗаполнения);
				
			ИначеЕсли ДанныеЗаполнения.СпособЗаполнения = "ЗаполнитьПоДаннымПользователя" Тогда
				
				ЗаполнитьПоДаннымПользователя(ДанныеЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоУмолчанию(ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("СпособЗаполнения")
			И ДанныеЗаполнения.СпособЗаполнения = "ЗаполнитьПоСпецификации"
			И ДанныеЗаполнения.ДанныеСпецификации.Свойство("ДокументыСозданныеДоГенерацииЭтапов") Тогда
		
		Дата = ДанныеЗаполнения.ДанныеЭтапа.Дата;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
		
		ОбработкаПроверкиЗаполненияПредварительная(Отказ, ПроверяемыеРеквизиты);
		
	Иначе
		
		ОбработкаПроверкиЗаполненияОкончательная(Отказ, ПроверяемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ВыполняетсяПакетноеФормирование() Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ЭтапПроизводства2_2.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьУслугиДавальцуКОформлению(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыМатериаловВПроизводство(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеПроизводством.ОтразитьРаспоряженияНаПередачуИзПроизводства(ДополнительныеСвойства, Движения, Отказ);
	
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	ОперативныйУчетПроизводства.ОтразитьТрудозатратыКОформлению(ДополнительныеСвойства, Движения, Отказ);
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	РегистрыНакопления.ПродукцияИПолуфабрикатыВПроизводстве.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ОтразитьДоступностьВидовРабочихЦентров(Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	ОбновитьСвязанныеДанные(Отказ);
	
	Если ЗначениеЗаполнено(ДополнительныеСвойства.ПериодЗаданияКРасчетуСебестоимости) Тогда
		РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(
			ДополнительныеСвойства.ПериодЗаданияКРасчетуСебестоимости,
			Ссылка,
			Организация);
	КонецЕсли;
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ОбновитьСвязанныеДанные(Отказ, Истина);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыОбработкиОбъекта

// При записи документа выполняется обновление нормативного графика производства,
// в случае если изменилась длительность этапа, либо его связи с другими документами
// (подробнее см. ЗарегистрироватьОбновлениеПараметровНормативногоГрафика).
// Однако такое поведение может быть нежелательно при групповом изменении этапов.
// Для отключения пересчета нормативного графика следует использовать данную процедуру.
// В этом случае пересчет нормативного графика выполнен не будет, и его требуется
// инициировать самостоятельно. 
//
Процедура ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи() Экспорт
	
	ДополнительныеСвойства.Вставить(
		КлючНеЗаполнятьНормативныйГрафик());
	
КонецПроцедуры

// Взводит служебный флаг, при наличии которого не будет выполняться стандартная процедура
// формирования нового назначения для данного документа.
//
Процедура ОтключитьФормированиеНазначения() Экспорт
	
	ДополнительныеСвойства.Вставить(
		КлючОтключитьФормированиеНазначения());
	
КонецПроцедуры

// Взводит служебный флаг, при наличии которого не будет регистрироваться 
// обработчик обновления состояния заказа на производство.
//
Процедура ОтключитьОбновлениеСостоянияЗаказа() Экспорт
	
	ДополнительныеСвойства.Вставить(
		КлючОтключитьОбновлениеСостоянияЗаказа());
	
КонецПроцедуры

// Взводит служебный флаг, при наличии которого не контролируется изменение параметров размещения
// этапа в графике.
//
Процедура ОтключитьКонтрольПараметровРазмещенияВГрафике() Экспорт
	
	ДополнительныеСвойства.Вставить(
		КлючОтключитьКонтрольПараметровРазмещенияВГрафике());
	
КонецПроцедуры

// Взводит служебный флаг сигнализирующий о том, что данный документ создается
// механизмами группового формирования этапов производства.
//
Процедура УстановитьРежимПакетногоФормирования() Экспорт
	
	ДополнительныеСвойства.Вставить(
		КлючПакетныйРежимФормирования());
	
КонецПроцедуры

// Добавляет в дополнительные свойства флаг автоматического заполнения этапа.
//
// Параметры:
//  Значение - Булево - устанавливаемое значение.
//
Процедура УстановитьФлагЗаполненоАвтоматически(Значение) Экспорт
	
	ДополнительныеСвойства.Вставить(
		КлючЗаполненоАвтоматически(),
		Значение);
	
КонецПроцедуры

// Определяет включен ли пакетный режим
//  формирования этапов производства.
// 
// Возвращаемое значение:
//  Булево - Истина - выполняется пакетное формирование этапов
//
Функция ВыполняетсяПакетноеФормирование() Экспорт
	
	Возврат УправлениеПроизводством.ВыполняетсяПакетноеФормированиеЭтапов(ЭтотОбъект);
	
КонецФункции

Функция ОтключеноФормированиеНазначения()
	
	Возврат ДополнительныеСвойства.Свойство(КлючОтключитьФормированиеНазначения());
	
КонецФункции

Функция ОтключенКонтрольПараметровРазмещенияВГрафике()
	
	Возврат ДополнительныеСвойства.Свойство(КлючОтключитьКонтрольПараметровРазмещенияВГрафике());
	
КонецФункции

Функция ОтключеноОбновлениеСостоянияЗаказа()
	
	Возврат ДополнительныеСвойства.Свойство(КлючОтключитьОбновлениеСостоянияЗаказа());
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ОбработкаПроверкиЗаполненияПредварительная(Отказ, ПроверяемыеРеквизиты)
	
	ОбязательныеРеквизиты = Документы.ЭтапПроизводства2_2.СписокОбязательныхРеквизитовВСтатусеФормируется(ЭтотОбъект);
	
	Для Сч = -ПроверяемыеРеквизиты.Количество() + 1 По 0 Цикл
		
		Если ОбязательныеРеквизиты.Найти(ПроверяемыеРеквизиты[-Сч]) = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(-Сч);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияОкончательная(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, МинимальнаяДатаДокумента(), Отказ);
	
	Если ПланироватьРаботуВидовРабочихЦентров ИЛИ РучноеРазмещениеВГрафике Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
	КонецЕсли;
	
	Если НЕ ПланироватьРаботуВидовРабочихЦентров ИЛИ РучноеРазмещениеВГрафике Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.СтатьяРасходов");
	МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.АналитикаРасходов");
	
	Если ОбеспечениеМатериаламиИРаботами.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЖелаемаяДатаОбеспечения");
	КонецЕсли;
	
	Если НЕ НачатоВыполнениеЭтапа() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ФактическоеНачалоЭтапа");
	КонецЕсли;
	
	ВыполнениеЭтапаЗавершено = (Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	Если НЕ ВыполнениеЭтапаЗавершено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ФактическоеОкончаниеЭтапа");
	КонецЕсли;
	
	Если РасходОднойДатой Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасходМатериаловИРабот.ДатаРасхода");
		МассивНепроверяемыхРеквизитов.Добавить("ЭкономияМатериалов.ДатаОперации");
	КонецЕсли;
	Если НЕ РасходОднойДатой ИЛИ РасходМатериаловИРабот.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаРасхода");
	КонецЕсли;
	
	ДанныеПодразделения = ДанныеИзКэшаОбъекта("Подразделение");
	
	#Область МаршрутнаяКарта
	
	Если ПроизводствоНаСтороне
		ИЛИ Не ДанныеПодразделения.ИспользоватьПооперационноеУправление Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МаршрутнаяКарта");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентМаршрутнойКарты");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НаличиеЗаказаПереработчику
	
	Если ПроизводствоНаСтороне 
		И ЗаказПереработчику.Пустая()
		И (Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат 
			ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен) Тогда
			
		ТекстСообщения = НСтр("ru = 'Проведение документа со статусом ""Начат"" или ""Завершен"" доступно только при наличии заказа переработчику.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					ЭтотОбъект, 
					"Статус",, 
					Отказ); 
		
	КонецЕсли; 
	
	#КонецОбласти
	
	#Область ДатаОкончанияПравееДатыПроизводства
	
	Если Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен
		И Не ПроизводствоНаСтороне Тогда
		
		ДатаПроизводстваИзделий = МаксимальнаяДатаПроизводства();
		
		Если ЗначениеЗаполнено(ФактическоеОкончаниеЭтапа) И ЗначениеЗаполнено(ДатаПроизводстваИзделий)
			И ФактическоеОкончаниеЭтапа < ДатаПроизводстваИзделий Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Дата выполнения этапа не может быть меньше даты производства выходных изделий (%1).'"),
				Формат(ДатаПроизводстваИзделий, "ДЛФ=D"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						"ФактическоеОкончаниеЭтапа",, 
						Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВыпускПоРассчитываемойСтоимостиНаПоследнемЭтапе
	
	Если НЕ ЭтоВыпускающийЭтап(ЭтотОбъект) И ВыходныеИзделия.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Выходные изделия по рассчитываемой стоимости могут быть только в выпускающем этапе.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					ЭтотОбъект, 
					"ВыходныеИзделия",, 
					Отказ);
		
	КонецЕсли;
	
	#КонецОбласти
	
	МенеджерВременныхТаблиц = Документы.ЭтапПроизводства2_2.СформироватьВременныеТаблицыДляПроверки(ЭтотОбъект);
	Документы.ЭтапПроизводства2_2.ПроверитьЗаполнениеОбъекта(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПроверяемыеРеквизиты);
	
	Если Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		
		ПроверитьРеквизитыЦепочкиЭтапов(Отказ);
		
		ПроверитьРасходМатериаловИРабот(МенеджерВременныхТаблиц,Отказ);
		ПроверитьЭкономияМатериалов(МенеджерВременныхТаблиц,Отказ);
		ПроверитьТрудозатраты(МенеджерВременныхТаблиц,Отказ);
		
		РеквизитыПроверкиАналитик = Новый Массив;
		РеквизитыПроверкиАналитик.Добавить(Новый Структура("ЭкономияМатериалов"));
			ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтотОбъект, РеквизитыПроверкиАналитик, МассивНепроверяемыхРеквизитов, Отказ);

		ПроверитьРавенствоПоМатериалам(МенеджерВременныхТаблиц, Отказ);
		ПроверитьОтметкиВыполнения(Отказ);
		
	Иначе
		
		ОтключитьПроверкуЗаполненияТЧ("РасходМатериаловИРабот", ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		ОтключитьПроверкуЗаполненияТЧ("ЭкономияМатериалов",     ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
		МассивНепроверяемыхРеквизитов.Добавить("ПобочныеИзделия.СтатьяКалькуляции");
		
	КонецЕсли;
	
	РеквизитыПроверкиАналитик = Новый Массив;
	РеквизитыПроверкиАналитик.Добавить(Новый Структура("ВыходныеИзделия"));
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, РеквизитыПроверкиАналитик, МассивНепроверяемыхРеквизитов, Отказ);
	
	РеквизитыПроверкиАналитик = Новый Массив;
	РеквизитыПроверкиАналитик.Добавить(Новый Структура("ПобочныеИзделия"));
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, РеквизитыПроверкиАналитик, МассивНепроверяемыхРеквизитов, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПроверитьЭкономияМатериалов(МенеджерВременныхТаблиц, Отказ)

	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = Документы.ЭтапПроизводства2_2.ПараметрыПроверкиТабличнойЧасти();
	ПараметрыПроверки.ИмяПоля = "ПолучательРедактирование";
	ПараметрыПроверки.ИмяПоляПроверки = "СкладНеЗаполнен";
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru='Не заполнена колонка ""Склад"" в строке %1 списка ""%2"".'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = Документы.ЭтапПроизводства2_2.ПараметрыПроверкиТабличнойЧасти();
	ПараметрыПроверки.ИмяПоля = "ПолучательРедактирование";
	ПараметрыПроверки.ИмяПоляПроверки = "СтатьяРасходовНеЗаполнена";
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru='Не заполнена колонка ""Статья расходов"" в строке %1 списка ""%2"".'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = Документы.ЭтапПроизводства2_2.ПараметрыПроверкиТабличнойЧасти();
	ПараметрыПроверки.ИмяПоля = "ПолучательРедактирование";
	ПараметрыПроверки.ИмяПоляПроверки = "ВыбранаЧужаяКладовая";
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru='Не допускается выбор цеховых кладовых других подразделений (строка %1 списка ""%2"").'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ПараметрыПроверки = Документы.ЭтапПроизводства2_2.ПараметрыПроверкиТабличнойЧасти();
	ПараметрыПроверки.ИмяПоля = "ДатаОперации";
	ПараметрыПроверки.ИмяПоляПроверки = "ДатаОперацииНеЗапонена";
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru='Не заполнена колонка ""Дата операции"" в строке %1 списка ""%2"".'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.СкладНеЗаполнен,
	|	ВложенныйЗапрос.СтатьяРасходовНеЗаполнена,
	|	ВложенныйЗапрос.ДатаОперацииНеЗапонена,
	|	ВложенныйЗапрос.ВыбранаЧужаяКладовая
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.ДатаОперации = ДАТАВРЕМЯ(1, 1, 1)
	|					И (ТабличнаяЧасть.Склад.ЦеховаяКладовая
	|						ИЛИ ТабличнаяЧасть.СписатьНаРасходы)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДатаОперацииНеЗапонена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СкладНеЗаполнен,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|					И ТабличнаяЧасть.СписатьНаРасходы
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатьяРасходовНеЗаполнена,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					И ТабличнаяЧасть.Склад.ЦеховаяКладовая
	|					И ТабличнаяЧасть.Склад.Подразделение <> &Подразделение
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбранаЧужаяКладовая
	|	ИЗ
	|		ЭкономияМатериалов КАК ТабличнаяЧасть) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.СкладНеЗаполнен
	|			ИЛИ ВложенныйЗапрос.СтатьяРасходовНеЗаполнена
	|			ИЛИ ВложенныйЗапрос.ДатаОперацииНеЗапонена
	|			ИЛИ ВложенныйЗапрос.ВыбранаЧужаяКладовая)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Документы.ЭтапПроизводства2_2.СообщитьОбОшибкахЗаполнения(
			ЭтотОбъект, 
			Выборка, 
			СписокРеквизитов, 
			"ЭкономияМатериалов", 
			НСтр("ru = 'Неизрасходованные материалы'"),
			Отказ);
	
КонецПроцедуры

Процедура ПроверитьРасходМатериаловИРабот(МенеджерВременныхТаблиц, Отказ)

	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = Документы.ЭтапПроизводства2_2.ПараметрыПроверкиТабличнойЧасти();
	ПараметрыПроверки.ИмяПоля = "СтатьяКалькуляции";
	ПараметрыПроверки.ИмяПоляПроверки = "СтатьяКалькуляцииНеЗаполнена";
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru='В статусе ""Начат"" и ""Завершен"" указание статьи калькуляции является обязательным (строка %1 списка ""%2"").'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|				И РеквизитыЭтапов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СтатьяКалькуляцииНеЗаполнена
	|	ИЗ
	|		РасходМатериаловИРабот КАК ТабличнаяЧасть
	|			ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|				ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.СтатьяКалькуляцииНеЗаполнена
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Документы.ЭтапПроизводства2_2.СообщитьОбОшибкахЗаполнения(
			ЭтотОбъект, 
			Выборка, 
			СписокРеквизитов, 
			"РасходМатериаловИРабот", 
			НСтр("ru = 'Расход материалов и работ'"), 
			Отказ);
	
КонецПроцедуры

Процедура ПроверитьТрудозатраты(МенеджерВременныхТаблиц, Отказ)

	СписокРеквизитов = Новый Массив;
	
	ПараметрыПроверки = Документы.ЭтапПроизводства2_2.ПараметрыПроверкиТабличнойЧасти();
	ПараметрыПроверки.ИмяПоля = "Бригада";
	ПараметрыПроверки.ИмяПоляПроверки = "БригадаНеЗаполнена";
	ПараметрыПроверки.ШаблонСообщения = НСтр("ru='Не заполнена колонка ""Бригада"" в строке %1 списка ""%2"".'");
	СписокРеквизитов.Добавить(ПараметрыПроверки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.БригадаНеЗаполнена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.Выполнено И ТабличнаяЧасть.Бригада = Значение(Справочник.Бригады.ПустаяСсылка)
	|				И НЕ РеквизитыЭтапов.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК БригадаНеЗаполнена
	|	ИЗ
	|		Трудозатраты КАК ТабличнаяЧасть
	|			ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыЭтапов КАК РеквизитыЭтапов
	|				ПО РеквизитыЭтапов.Ссылка = ТабличнаяЧасть.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.БригадаНеЗаполнена
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Документы.ЭтапПроизводства2_2.СообщитьОбОшибкахЗаполнения(
			ЭтотОбъект, 
			Выборка, 
			СписокРеквизитов, 
			"Трудозатраты", 
			НСтр("ru = 'Трудозатраты'"), 
			Отказ);
	
КонецПроцедуры

Процедура ПроверитьРеквизитыЦепочкиЭтапов(Отказ)
	
	ОбщиеРеквизиты = Документы.ЭтапПроизводства2_2.ОбщиеРеквизитыЦепочкиЭтапов(Истина);
	
	ИспользуетсяОбособлениеПоЭтапамПроизводства = Документы.ЗаказНаПроизводство2_2.ИспользуетсяОбособлениеПоЭтапамПроизводства(Распоряжение);
	Если Не ИспользуетсяОбособлениеПоЭтапамПроизводства Тогда
		ОбщиеРеквизиты.Добавить("НазначениеМатериалы");
	КонецЕсли;
	
	ТекстПодстановки = "";
	Для каждого ИмяРеквизита Из ОбщиеРеквизиты Цикл
		ТекстПодстановки = ТекстПодстановки+?(ПустаяСтрока(ТекстПодстановки),"","+")+"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ " + ИмяРеквизита + ")";
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапыЦепочки
		|ГДЕ
		|	ЭтапыЦепочки.ВыпускающийЭтап = &ВыпускающийЭтап
		|	И НЕ ЭтапыЦепочки.ПометкаУдаления
		|
		|ИМЕЮЩИЕ
		|	&КоличествоПолей <> " + ТекстПодстановки + "
		|	И НЕ МАКСИМУМ(ЭтапыЦепочки.ВыпускающийЭтап) ЕСТЬ NULL
		|");
	
	Запрос.УстановитьПараметр("ВыпускающийЭтап", ВыпускающийЭтап);
	Запрос.УстановитьПараметр("КоличествоПолей", ОбщиеРеквизиты.Количество());

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Общие реквизиты одной цепочки этапов отличаются. Обратитесь к администратору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					ЭтотОбъект,
					,,
					Отказ);

	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОтметкиВыполнения(Отказ)

	Если Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен 
		ИЛИ ПроизводствоНаСтороне Тогда
		Возврат;
	КонецЕсли;
	
#Область ВыходныеИзделия
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Новый Структура("Имя, Представление", "ВыходныеИзделия", НСтр("ru = 'Продукция'")));
	МассивТЧ.Добавить(Новый Структура("Имя, Представление", "ПобочныеИзделия", НСтр("ru = 'Побочный и промежуточный выпуск'")));
	
	ПараметрыОтбора = Новый Структура("Произведено", Ложь);
	
	ШаблонСообщения = НСтр("ru = 'Не установлена отметка ""Произведено"" в строке %1 списка ""%2"".'");
	
	Для Каждого СтрокаТЧ Из МассивТЧ Цикл
		
		Для Каждого Строка Из ЭтотОбъект[СтрокаТЧ.Имя].НайтиСтроки(ПараметрыОтбора) Цикл
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						СтрокаТЧ.Имя, Строка.НомерСтроки, "Произведено");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, 
						Строка.НомерСтроки,
						СтрокаТЧ.Представление);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект,
						Поле,,
						Отказ);
			
		КонецЦикла;
		
	КонецЦикла;
	
#КонецОбласти

#Область Трудозатраты

	ПараметрыОтбора = Новый Структура("Выполнено", Ложь);
	
	ШаблонСообщения = НСтр("ru = 'Не установлена отметка ""Выполнено"" в строке %1 списка ""Трудозатраты""'");
	
	Для Каждого Строка Из ЭтотОбъект.Трудозатраты.НайтиСтроки(ПараметрыОтбора) Цикл
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Трудозатраты", Строка.НомерСтроки, "Выполнено");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					ЭтотОбъект,
					Поле,,
					Отказ);
		
	КонецЦикла;
	
#КонецОбласти
	
КонецПроцедуры

Процедура ПроверитьРавенствоПоМатериалам(МенеджерВременныхТаблиц, Отказ)

	Если Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен 
		ИЛИ ПроизводствоНаСтороне Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщенияОбеспечениеБольше = НСтр("ru = 'Не указан расход материала ""%1"" в количестве %2 %3'");
	ШаблонСообщенияОбеспечениеБольшеРабота = НСтр("ru = 'Не указан расход работ ""%1"" в количестве %2 %3'");
	ШаблонСообщенияРасходБольше = НСтр("ru = 'Расход материала ""%1"" превышает запланированное к обеспечению на %2 %3'");
	ШаблонСообщенияРасходБольшеРабота = НСтр("ru = 'Расход работы ""%1"" превышает запланированное к обеспечению на %2 %3'");
	ШаблонСообщенияЭкономия = НСтр("ru = 'Количество неизрасходованного материала ""%1"" превышает запланированное к обеспечению на %2 %3'");
	ШаблонСообщенияПотреблениеПозжеВыпуска = НСтр("ru = 'В периоде %1 по этапу есть потребление матералов (работ), при этом выходные изделия отсутствуют. Требуется указать выходное изделие, на которое будут отнесены затраты.'");
	
	ТекстЗапроса = 
	// 0
	"ВЫБРАТЬ
	|	ОбеспечениеМатериаламиИРаботами.Номенклатура          КАК Номенклатура,
	|	ОбеспечениеМатериаламиИРаботами.Характеристика        КАК Характеристика,
	|	МИНИМУМ(ОбеспечениеМатериаламиИРаботами.НомерСтроки)  КАК НомерСтроки,
	|	СУММА(ОбеспечениеМатериаламиИРаботами.Количество)     КАК Количество
	|ПОМЕСТИТЬ Обеспечение
	|ИЗ
	|	ОбеспечениеМатериаламиИРаботами КАК ОбеспечениеМатериаламиИРаботами
	|ГДЕ
	|	ОбеспечениеМатериаламиИРаботами.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ОбеспечениеМатериаламиИРаботами.Количество <> 0
	|	И (ОбеспечениеМатериаламиИРаботами.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ ВЫРАЗИТЬ(ОбеспечениеМатериаламиИРаботами.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбеспечениеМатериаламиИРаботами.Номенклатура,
	|	ОбеспечениеМатериаламиИРаботами.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1
	|ВЫБРАТЬ
	|	РасходМатериаловИРабот.Номенклатура          КАК Номенклатура,
	|	РасходМатериаловИРабот.Характеристика        КАК Характеристика,
	|	МИНИМУМ(РасходМатериаловИРабот.НомерСтроки)  КАК НомерСтроки,
	|	СУММА(РасходМатериаловИРабот.Количество)     КАК Количество
	|ПОМЕСТИТЬ Расход
	|ИЗ
	|	РасходМатериаловИРабот КАК РасходМатериаловИРабот
	|ГДЕ
	|	РасходМатериаловИРабот.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И РасходМатериаловИРабот.Количество <> 0
	|	И (РасходМатериаловИРабот.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ ВЫРАЗИТЬ(РасходМатериаловИРабот.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходМатериаловИРабот.Номенклатура,
	|	РасходМатериаловИРабот.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2
	|ВЫБРАТЬ
	|	ЭкономияМатериалов.Номенклатура          КАК Номенклатура,
	|	ЭкономияМатериалов.Характеристика        КАК Характеристика,
	|	МИНИМУМ(ЭкономияМатериалов.НомерСтроки)  КАК НомерСтроки,
	|	СУММА(ЭкономияМатериалов.Количество)     КАК Количество
	|ПОМЕСТИТЬ Экономия
	|ИЗ
	|	ЭкономияМатериалов КАК ЭкономияМатериалов
	|ГДЕ
	|	ЭкономияМатериалов.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ЭкономияМатериалов.Количество <> 0
	|	И (ЭкономияМатериалов.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ ВЫРАЗИТЬ(ЭкономияМатериалов.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭкономияМатериалов.Номенклатура,
	|	ЭкономияМатериалов.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3
	|ВЫБРАТЬ
	|	Обеспечение.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры                КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ВЫРАЗИТЬ(Обеспечение.Номенклатура КАК Справочник.Номенклатура).Представление                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(Обеспечение.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Представление  КАК Характеристика,
	|	ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление           КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	Обеспечение.Количество - (ЕСТЬNULL(Расход.Количество, 0) + ЕСТЬNULL(Экономия.Количество, 0)) КАК Количество
	|ИЗ
	|	Обеспечение КАК Обеспечение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбеспечениеМатериаламиИРаботами КАК ИсходнаяТЧ
	|		ПО ИсходнаяТЧ.НомерСтроки = Обеспечение.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расход КАК Расход
	|		ПО (Расход.Номенклатура = Обеспечение.Номенклатура)
	|			И (Расход.Характеристика = Обеспечение.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Экономия КАК Экономия
	|		ПО (Экономия.Номенклатура = Обеспечение.Номенклатура)
	|			И (Экономия.Характеристика = Обеспечение.Характеристика)
	|ГДЕ
	|	Обеспечение.Количество > ЕСТЬNULL(Расход.Количество, 0) + ЕСТЬNULL(Экономия.Количество, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4
	|ВЫБРАТЬ
	|	Расход.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры                  КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление   КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ВЫРАЗИТЬ(Расход.Номенклатура КАК Справочник.Номенклатура).Представление                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(Расход.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Представление    КАК Характеристика,
	|	ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление        КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	Расход.Количество - ЕСТЬNULL(Обеспечение.Количество, 0) КАК Количество
	|ИЗ
	|	Расход КАК Расход
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭкономияМатериалов КАК ИсходнаяТЧ
	|		ПО ИсходнаяТЧ.НомерСтроки = Расход.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обеспечение КАК Обеспечение
	|		ПО Расход.Номенклатура = Обеспечение.Номенклатура
	|			И Расход.Характеристика = Обеспечение.Характеристика
	|ГДЕ
	|	Расход.Количество > ЕСТЬNULL(Обеспечение.Количество, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5
	|ВЫБРАТЬ
	|	Экономия.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры                КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ВЫРАЗИТЬ(Экономия.Номенклатура КАК Справочник.Номенклатура).Представление                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(Экономия.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).Представление  КАК Характеристика,
	|	ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Представление        КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	Экономия.Количество - (ЕСТЬNULL(Обеспечение.Количество, 0) - ЕСТЬNULL(Расход.Количество, 0)) КАК Количество
	|ИЗ
	|	Экономия КАК Экономия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭкономияМатериалов КАК ИсходнаяТЧ
	|		ПО ИсходнаяТЧ.НомерСтроки = Экономия.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обеспечение КАК Обеспечение
	|		ПО Экономия.Номенклатура = Обеспечение.Номенклатура
	|			И Экономия.Характеристика = Обеспечение.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расход КАК Расход
	|		ПО Экономия.Номенклатура = Расход.Номенклатура
	|			И Экономия.Характеристика = Расход.Характеристика
	|ГДЕ
	|	Экономия.Количество > (ЕСТЬNULL(Обеспечение.Количество, 0) - ЕСТЬNULL(Расход.Количество, 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 6
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ВыходныеИзделия.ДатаПроизводства,МЕСЯЦ)) КАК ДатаПроизводства
	|ПОМЕСТИТЬ ДатыВыпуска
	|ИЗ
	|	ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Произведено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ВыходныеИзделия.ДатаПроизводства,МЕСЯЦ)) КАК ДатаПроизводства
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка.ВыпускающийЭтап = &ВыпускающийЭтап
	|	И ВыходныеИзделия.Ссылка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 7
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДатыВыпуска.ДатаПроизводства) КАК ДатаПроизводства
	|ПОМЕСТИТЬ МаксимальныеДатыВыпуска
	|ИЗ
	|	ДатыВыпуска КАК ДатыВыпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 8
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Обеспечение.ДатаОтгрузки,МЕСЯЦ)) КАК ДатаПотребления
	|ПОМЕСТИТЬ ДатыПотребления
	|ИЗ
	|	ОбеспечениеМатериаламиИРаботами КАК Обеспечение
	|ГДЕ
	|	Обеспечение.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|									ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Обеспечение.ДатаОтгрузки,МЕСЯЦ)) КАК ДатаПотребления
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
	|ГДЕ
	|	Обеспечение.Ссылка.ВыпускающийЭтап = &ВыпускающийЭтап
	|	И Обеспечение.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расход.ДатаРасхода,МЕСЯЦ)) КАК ДатаПотребления
	|ИЗ
	|	РасходМатериаловИРабот КАК Расход
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расход.ДатаРасхода,МЕСЯЦ)) КАК ДатаПотребления
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК Расход
	|ГДЕ
	|	Расход.Ссылка.ВыпускающийЭтап = &ВыпускающийЭтап
	|	И Расход.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Трудозатраты.ДатаВыполнения,МЕСЯЦ)) КАК ДатаПотребления
	|ИЗ
	|	Трудозатраты КАК Трудозатраты
	|ГДЕ
	|	Трудозатраты.Выполнено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Трудозатраты.ДатаВыполнения,МЕСЯЦ)) КАК ДатаПотребления
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Трудозатраты
	|ГДЕ
	|	Трудозатраты.Ссылка.ВыпускающийЭтап = &ВыпускающийЭтап
	|	И Трудозатраты.Выполнено
	|	И Трудозатраты.Ссылка <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 9
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДатыПотребления.ДатаПотребления) КАК ДатаПотребления
	|ПОМЕСТИТЬ МаксимальныеДатыПотребления
	|ИЗ
	|	ДатыПотребления КАК ДатыПотребления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 10
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Этапы.Ссылка КАК Этап
	|ПОМЕСТИТЬ ФормирующиесяЭтапы
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Этапы
	|ГДЕ
	|	Этапы.Ссылка = &ВыпускающийЭтап
	|	И Этапы.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Формируется),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 11
	|ВЫБРАТЬ
	|	ДатыВыпуска.ДатаПроизводства КАК ДатаПроизводства,
	|	ДатыПотребления.ДатаПотребления КАК ДатаПотребления
	|ИЗ
	|	МаксимальныеДатыВыпуска КАК ДатыВыпуска
	|	ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеДатыПотребления КАК ДатыПотребления
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ ФормирующиесяЭтапы КАК ФормирующиесяЭтапы
	|		ПО ИСТИНА
	|ГДЕ
	|	ДатыВыпуска.ДатаПроизводства < ДатыПотребления.ДатаПотребления
	|	И ФормирующиесяЭтапы.Этап Есть NULL";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(ИсходнаяТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(ИсходнаяТЧ.Номенклатура КАК Справочник.Номенклатура)"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВыпускающийЭтап", ВыпускающийЭтап);
	Запрос.УстановитьПараметр("Ссылка",          Ссылка);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результат = Запрос.ВыполнитьПакет();

	// Не указан расход материала
	Выборка = Результат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
									Выборка.Номенклатура, 
									Выборка.Характеристика);
									
		Если ЗначениеЗаполнено(Выборка.Упаковка)
			И (Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
				ИЛИ Цел(Выборка.Количество / Выборка.КоэффициентУпаковки) = (Выборка.Количество / Выборка.КоэффициентУпаковки)) Тогда
			Количество = Окр(Выборка.Количество / Выборка.КоэффициентУпаковки, 3);
			ЕдиницаИзмерения = Выборка.Упаковка;
		Иначе
			Количество = Выборка.Количество;
			ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		
		ТекстШаблона = ?(Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа, ШаблонСообщенияОбеспечениеБольшеРабота, ШаблонСообщенияОбеспечениеБольше);
		ТекстСообщения = СтрШаблон(ТекстШаблона, НоменклатураПредставление, Формат(Количество, "ЧН=0; ЧГ=0"), ЕдиницаИзмерения);
							
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОбеспечениеМатериаламиИРаботами", Выборка.НомерСтроки, "КоличествоУпаковок");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
	
	КонецЦикла;
	
	// Расход превышает запланированное к обеспечению
	Выборка = Результат[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
									Выборка.Номенклатура, 
									Выборка.Характеристика);
									
		Если ЗначениеЗаполнено(Выборка.Упаковка)
			И (Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
				ИЛИ Цел(Выборка.Количество / Выборка.КоэффициентУпаковки) = (Выборка.Количество / Выборка.КоэффициентУпаковки)) Тогда
			Количество = Окр(Выборка.Количество / Выборка.КоэффициентУпаковки, 3);
			ЕдиницаИзмерения = Выборка.Упаковка;
		Иначе
			Количество = Выборка.Количество;
			ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		
		ТекстШаблона = ?(Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа, ШаблонСообщенияРасходБольшеРабота, ШаблонСообщенияРасходБольше);
		ТекстСообщения = СтрШаблон(ТекстШаблона, НоменклатураПредставление, Формат(Количество, "ЧН=0; ЧГ=0"), ЕдиницаИзмерения);
							
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасходМатериаловИРабот", Выборка.НомерСтроки, "КоличествоУпаковок");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
	
	КонецЦикла;
	
	// Количество неизрасходованного материала превышает запланированное к обеспечению
	Выборка = Результат[5].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
									Выборка.Номенклатура, 
									Выборка.Характеристика);
									
		Если ЗначениеЗаполнено(Выборка.Упаковка)
			И (Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
				ИЛИ Цел(Выборка.Количество / Выборка.КоэффициентУпаковки) = (Выборка.Количество / Выборка.КоэффициентУпаковки)) Тогда
			Количество = Окр(Выборка.Количество / Выборка.КоэффициентУпаковки, 3);
			ЕдиницаИзмерения = Выборка.Упаковка;
		Иначе
			Количество = Выборка.Количество;
			ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
									
		ТекстСообщения = СтрШаблон(ШаблонСообщенияЭкономия, 
							НоменклатураПредставление,
							Формат(Количество, "ЧН=0; ЧГ=0"),
							ЕдиницаИзмерения);
							
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭкономияМатериалов", Выборка.НомерСтроки, "КоличествоУпаковок");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
	
	КонецЦикла;
	
	// Месяц потребления раньше последнего месяца производства
	Выборка = Результат[11].Выбрать();
	Если Выборка.Следующий() Тогда
		
		ТекстСообщения = СтрШаблон(ШаблонСообщенияПотреблениеПозжеВыпуска,
			Формат(Выборка.ДатаПотребления, "ЧН=0; ЧГ=0; ДФ='MMМM yyyy'"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПроизводственныйПроцесс(Отказ, РежимЗаписи)
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|	И Таблица.Проведен");
		
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Распоряжение);
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		ТекстШаблона = НСтр("ru='Невозможно провести этап производства № %1 от %2, относящийся к непроведенному заказу на производство.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстШаблона,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, Истина),
			Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ,, Отказ);
		
		Возврат;
		
	КонецЕсли;
		
	Если Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
		
		Если ЭтотОбъект.НомерЭтапа >= ЭтотОбъект.НомерСледующегоЭтапа И ЭтотОбъект.НомерСледующегоЭтапа <> 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Номер следующего этапа должен быть больше номера этапа.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						ЭтотОбъект,,, 
						Отказ);
			
		КонецЕсли;
		
		Если ЭтотОбъект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			Если ЭтотОбъект.ВидыРабочихЦентров.Количество() > 0 Тогда
				
				ДублиВидовРЦ = Новый Массив;
				
				ПараметрыОтбора = Новый Структура("Использовать", Истина);
				СписокВидыРабочихЦентров = ЭтотОбъект.ВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора);
				Для Сч = 1 По 2 Цикл
					Для Каждого СтрокаВидРЦ Из СписокВидыРабочихЦентров Цикл
						
						Если ЗначениеЗаполнено(СтрокаВидРЦ.ВидРабочегоЦентра)
							И ДублиВидовРЦ.Найти(СтрокаВидРЦ.ВидРабочегоЦентра) = Неопределено Тогда
							
							ПараметрыОтбора.Вставить("ВидРабочегоЦентра", СтрокаВидРЦ.ВидРабочегоЦентра);
							СписокСтрок = ЭтотОбъект.ВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора);
							КоличествоДублей = СписокСтрок.Количество(); 
							СписокСтрок = ЭтотОбъект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора);
							КоличествоДублей = КоличествоДублей + СписокСтрок.Количество(); 
							Если КоличествоДублей > 1 Тогда
								ДублиВидовРЦ.Добавить(СтрокаВидРЦ.ВидРабочегоЦентра);
							КонецЕсли; 
							
						КонецЕсли; 
						
					КонецЦикла;
					ПараметрыОтбора = Новый Структура("Использовать", Истина);
					СписокВидыРабочихЦентров = ЭтотОбъект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора);
					
				КонецЦикла; 
				
				ШаблонДублиВидовРЦ = НСтр("ru = 'Вид рабочего центра ""%1"" допускается указывать не более одного раза.'");
				
				Для Каждого ВидРЦ Из ДублиВидовРЦ Цикл
					
					ТекстСообщения = СтрШаблон(ШаблонДублиВидовРЦ, Строка(ВидРЦ));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								ТекстСообщения, 
								ЭтотОбъект, 
								"ВидыРабочихЦентров",, 
								Отказ);
					
				КонецЦикла;
				
				НомерСтроки = 0;
				Для Каждого СтрокаОсновнойВидРЦ Из ЭтотОбъект.ВидыРабочихЦентров Цикл
					
					НомерСтроки = НомерСтроки + 1;
					
					ПроверитьВидыРабочихЦентров(СтрокаОсновнойВидРЦ, НомерСтроки, ЭтотОбъект, Отказ);
					
					СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", СтрокаОсновнойВидРЦ.КлючСвязи);
					
					Для Каждого СтрокаАльтернативныйВидРЦ Из ЭтотОбъект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска) Цикл
						
						НомерСтроки = НомерСтроки + 1;
						
						ПроверитьВидыРабочихЦентров(СтрокаАльтернативныйВидРЦ, НомерСтроки, ЭтотОбъект, Отказ);
						
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе 
				
				ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Виды рабочих центров"".'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, 
							ЭтотОбъект, 
							"ВидыРабочихЦентров",, 
							Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВидыРабочихЦентров(ТекущаяСтрока, НомерСтроки, Объект, Отказ)

	ПараметрыТабличнойЧасти = Новый Структура;
	ПараметрыТабличнойЧасти.Вставить("Имя",           "ВидыРабочихЦентров");
	ПараметрыТабличнойЧасти.Вставить("Представление", НСтр("ru = 'Виды рабочих центров'"));
	ПараметрыТабличнойЧасти.Вставить("НомерСтроки",   НомерСтроки);
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"".'");
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидРабочегоЦентра) Тогда
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ВидРабочегоЦентра");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
									НСтр("ru = 'Вид рабочего центра'"),
									НомерСтроки,
									ПараметрыТабличнойЧасти.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					Объект, 
					Поле,, 
					Отказ); 
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВремяРаботы) Тогда
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ВремяРаботы");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
									НСтр("ru = 'Время работы'"),
									НомерСтроки,
									ПараметрыТабличнойЧасти.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					Объект, 
					Поле,, 
					Отказ); 
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ЕдиницаИзмерения");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
									НСтр("ru = 'Единица измерения времени'"),
									НомерСтроки,
									ПараметрыТабличнойЧасти.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					Объект, 
					Поле,, 
					Отказ); 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтключитьПроверкуЗаполненияТЧ(ИмяТЧ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов)
	
	Для Каждого ПутьКРеквизиту Из ПроверяемыеРеквизиты Цикл
		Если Найти(ПутьКРеквизиту, ИмяТЧ) > 0
			И МассивНепроверяемыхРеквизитов.Найти(ПутьКРеквизиту) = Неопределено Тогда
			МассивНепроверяемыхРеквизитов.Добавить(ПутьКРеквизиту);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСлужебныхРеквизитов

Процедура ЗаполнитьСлужебныеРеквизиты() Экспорт
	
	ЗаполнитьНомерПоРаспоряжению();
	
	ОсновноеИзделиеНоменклатура = Неопределено;
	ОсновноеИзделиеХарактеристика = Неопределено;
	Если ЭтоВыпускающийЭтап(ЭтотОбъект) И ЭтотОбъект.ВыходныеИзделия.Количество() > 0 Тогда
		ОсновноеИзделиеНоменклатура = ЭтотОбъект.ВыходныеИзделия[0].Номенклатура;
		ОсновноеИзделиеХарактеристика = ЭтотОбъект.ВыходныеИзделия[0].Характеристика;
	КонецЕсли;

	Если ПланироватьРаботуВидовРабочихЦентров Тогда
		
		ДанныеПодразделения = ДанныеИзКэшаОбъекта("Подразделение");
		Если ДанныеПодразделения <> Неопределено Тогда
			УправлениеДаннымиОбИзделиях.ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ(
				ЭтотОбъект, ДанныеПодразделения.ИнтервалПланирования);
		Иначе
			УправлениеДаннымиОбИзделиях.ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ(
				ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеПроизводством.ЗаполнитьФлагПередатьДавальцуВТабличнойЧастиЭтапаПроизводства(ВыходныеИзделия);
	УправлениеПроизводством.ЗаполнитьФлагПередатьДавальцуВТабличнойЧастиЭтапаПроизводства(ПобочныеИзделия);
	
	ЗаполнитьМаксимальнуюДатуПроизводства();
	ЗаполнитьМаксимальнуюДатуОтгрузки();
	ЗаполнитьМаксимальнуюДатуРасхода();
	
	Если ЭтотОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат Тогда
		
		Если ДополнительныеСвойства.Свойство("ГрафикПроизводства") Тогда
			ОкончаниеПоГрафику = ДополнительныеСвойства.ГрафикПроизводства.ОкончаниеЭтапа;
		Иначе
			ГрафикПроизводства = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
			ОкончаниеПоГрафику = ГрафикПроизводства[0].ОкончаниеЭтапа;
		КонецЕсли;
		
		ФактическоеОкончаниеЭтапа = Макс(
			ДатаПроизводства,
			ОкончаниеПоГрафику,
			ФактическоеНачалоЭтапа);
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство(КлючЗаполненоАвтоматически()) Тогда
		ЗаполненоАвтоматически = ДополнительныеСвойства[КлючЗаполненоАвтоматически()];
	Иначе
		ЗаполненоАвтоматически = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьНеИспользуемыеДанные()
	
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		Если ПроизводствоНаСтороне Тогда
			ПланироватьРаботуВидовРабочихЦентров = Ложь;
		КонецЕсли;
	Иначе
		РучноеРазмещениеВГрафике = Ложь;
		ПланироватьРаботуВидовРабочихЦентров = Ложь;
	КонецЕсли;
	
	Если НЕ ПланироватьРаботуВидовРабочихЦентров Тогда
		ВидыРабочихЦентров.Очистить();
		АльтернативныеВидыРабочихЦентров.Очистить();
	КонецЕсли;
	
	Если РучноеРазмещениеВГрафике Тогда
		ПланироватьНеРанее = '00010101';
	Иначе
		ЗанятостьВидовРабочихЦентров.Очистить();
	КонецЕсли;
	
	Если НЕ НачатоВыполнениеЭтапа() Тогда
		
		ИменаТаблицИзделия = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
		Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
			Для Каждого Строка Из ЭтотОбъект[ИмяТаблицы] Цикл
				Строка.Произведено = Ложь;
				Если НЕ ПроизводствоНаСтороне ИЛИ ЗаказПереработчику.Пустая() Тогда
					Строка.ДатаПроизводства = '00010101';
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Строка Из ЭтотОбъект.Трудозатраты Цикл
			Строка.Выполнено = Ложь;
			Строка.ДатаВыполнения = '00010101';
		КонецЦикла;
		
		РасходМатериаловИРабот.Очистить();
		ЭкономияМатериалов.Очистить();
		
	КонецЕсли;
	
	Если ПроизводствоНаСтороне Тогда
		
		МаршрутнаяКарта = Справочники.МаршрутныеКарты.ПустаяСсылка();
		КоэффициентМаршрутнойКарты = 0;
		
		РасходМатериаловИРабот.Очистить();
		ЭкономияМатериалов.Очистить();
		Трудозатраты.Очистить();
		ВидыРабочихЦентров.Очистить();
		АльтернативныеВидыРабочихЦентров.Очистить();
		ЗанятостьВидовРабочихЦентров.Очистить();
		ВидыЗапасовЭкономия.Очистить();
		
	Иначе
		
		ЗаказПереработчику = Документы.ЗаказПереработчику.ПустаяСсылка();
		
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЭтапПроизводства2_2);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ПобочныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ЭкономияМатериалов);
	
КонецПроцедуры

Процедура ЗаполнитьНомерПоРаспоряжению()
	
	Если ЗначениеЗаполнено(Номер) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		
		ДанныеРаспоряжения = ДанныеИзКэшаОбъекта("Распоряжение");
		
		Если ДанныеРаспоряжения <> Неопределено Тогда
			НомерРаспоряжения = ДанныеРаспоряжения.Номер;
		Иначе
			НомерРаспоряжения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Номер");
		КонецЕсли;
		
		Номер = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерРаспоряжения);
		Номер = СокрЛП(Номер);
		
	Иначе
		Номер = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерПартииЗапуска) И ЗначениеЗаполнено(НомерЭтапаВПартииЗапуска) Тогда
		Номер = Номер
			+ "."
			+ Формат(НомерПартииЗапуска, "ЧГ=0")
			+ "."
			+ Формат(НомерЭтапаВПартииЗапуска, "ЧГ=0");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоследователейПоИзделиям() Экспорт
	
	Потребители = Новый Массив;
	НазначенияИзделий = Новый Массив;
	
	Для каждого Строка Из ВыходныеИзделия Цикл
		Если Не Строка.ЭтапПотребитель.Пустая() Тогда
			Потребители.Добавить(Строка.ЭтапПотребитель);
		ИначеЕсли ЗначениеЗаполнено(Строка.Назначение) Тогда
			НазначенияИзделий.Добавить(Строка.Назначение);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из ПобочныеИзделия Цикл
		Если Не Строка.ЭтапПотребитель.Пустая() Тогда
			Потребители.Добавить(Строка.ЭтапПотребитель);
		ИначеЕсли ЗначениеЗаполнено(Строка.Назначение) Тогда
			НазначенияИзделий.Добавить(Строка.Назначение);
		КонецЕсли;
	КонецЦикла;
	
	Если НазначенияИзделий.Количество() > 0 Тогда
		НайденныеЭтапы = Документы.ЭтапПроизводства2_2.НайтиЭтапыПоНазначению(НазначенияИзделий, Истина);
		Для каждого НайденныйЭтап Из НайденныеЭтапы Цикл
			Потребители.Добавить(НайденныйЭтап);
		КонецЦикла;
	КонецЕсли;
	
	Для Индекс = -Последователи.Количество() + 1 По 0 Цикл
		
		Строка = Последователи[-Индекс];
		
		ИндексПотребители = Потребители.Найти(Строка.Этап);
		Если ИндексПотребители <> Неопределено Тогда
			
			Потребители.Удалить(ИндексПотребители);
			
		ИначеЕсли Строка.ТипСвязи = ТипСвязиПотребитель() Тогда
			
			Последователи.Удалить(-Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Потребитель Из Потребители Цикл
		
		НоваяСтрока = Последователи.Добавить();
		НоваяСтрока.Этап     = Потребитель;
		НоваяСтрока.ТипСвязи = ТипСвязиПотребитель();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоСпецификации

Процедура ЗаполнитьПоСпецификации(ДанныеЗаполнения)
	
	ДанныеСпецификации  = ДанныеЗаполнения.ДанныеСпецификации;
	ДанныеЭтапа         = ДанныеЗаполнения.ДанныеЭтапа;
	ТаблицыСвязей       = ДанныеЗаполнения.ТаблицыСвязей;
	ЭтапыЦепочки        = ДанныеЗаполнения.ЭтапыЦепочки;
	ВариантыОбеспечения = ДанныеЗаполнения.ВариантыОбеспечения;
	
	ВыпускающийЭтап = ДанныеЗаполнения.ВыпускающийЭтап;
	
	ЗаполнитьШапкуПоСпецификации(
				ДанныеСпецификации, 
				ДанныеЭтапа);
	
	ЗаполнитьОбеспечениеМатериаламиИРаботамиПоСпецификации(
				ДанныеСпецификации, 
				ДанныеЭтапа, 
				ВариантыОбеспечения,
				ТаблицыСвязей);
	
	ЗаполнитьВидыРабочихЦентровПоСпецификации(
				ДанныеСпецификации, 
				ДанныеЭтапа);
	
	ЗаполнитьТрудозатратыПоСпецификации(
				ДанныеСпецификации, 
				ДанныеЭтапа);
	
	ЗаполнитьПоследователейПоСпецификации(
				ДанныеЭтапа, 
				ЭтапыЦепочки);
	
	ЗаполнитьПоСпецификацииПереопределяемый(
				ДанныеСпецификации,
				ДанныеЭтапа,
				ТаблицыСвязей);
	
	Если ЭтоНовый() Тогда
		
		ЭтотОбъект.УстановитьСсылкуНового(СсылкаНаТекущийЭтап(ДанныеЭтапа));
		
	КонецЕсли;
	
	ПриЗаполненииДополненииПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей);
	
КонецПроцедуры

Процедура ДополнитьПоСпецификации(ДанныеЗаполнения) Экспорт
	
	ДанныеСпецификации  = ДанныеЗаполнения.ДанныеСпецификации;
	ДанныеЭтапа         = ДанныеЗаполнения.ДанныеЭтапа;
	ТаблицыСвязей       = ДанныеЗаполнения.ТаблицыСвязей;
	ВариантыОбеспечения = ДанныеЗаполнения.ВариантыОбеспечения;
	
	ЗапланированоНов = Запланировано + ДанныеСпецификации.ЕдиницПартийИзделий;
	
	КоэффициентДок  = ?(Запланировано > 0, ЗапланированоНов / Запланировано, ЗапланированоНов);
	КоэффициентСпец = ?(ДанныеСпецификации.ЕдиницПартийИзделий > 0,
		ЗапланированоНов / ДанныеСпецификации.ЕдиницПартийИзделий, ЗапланированоНов);
		
	Запланировано = ЗапланированоНов;
	
	Если ДанныеСпецификации.Свойство("МатериалыИУслуги")
			И ОбеспечениеМатериаламиИРаботами.Количество() > 0 Тогда
		
		МатериалыИУслугиДоИзменения = ДанныеСпецификации.МатериалыИУслуги.Скопировать();
		
		ОбеспечениеМатериаламиИРаботами.Очистить();
		ПересчитатьДанныеТаблицыПоКоэффициенту(ДанныеСпецификации.МатериалыИУслуги, "Количество", КоэффициентСпец);
		ПересчитатьДанныеТаблицыПоКоэффициенту(ДанныеСпецификации.МатериалыИУслуги, "КоличествоУпаковок", КоэффициентСпец);
		ЗаполнитьОбеспечениеМатериаламиИРаботамиПоСпецификации(
			ДанныеСпецификации, ДанныеЭтапа, ВариантыОбеспечения, ТаблицыСвязей);
		
		ДанныеСпецификации.МатериалыИУслуги = МатериалыИУслугиДоИзменения;
		
	КонецЕсли;
	
	Если ДанныеСпецификации.Свойство("ВидыРабочихЦентров")
		И ВидыРабочихЦентров.Количество() > 0 Тогда
		
		ВидыРабочихЦентров.Очистить();
		АльтернативныеВидыРабочихЦентров.Очистить();
		
		ЗаполнитьВидыРабочихЦентровПоСпецификации(ДанныеСпецификации, ДанныеЭтапа);
		
	КонецЕсли;
	
	ПересчитатьДанныеТаблицыПоКоэффициенту(Трудозатраты, "Количество", КоэффициентДок);
	
	ПриЗаполненииДополненииПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей);
	
КонецПроцедуры

Процедура ПриЗаполненииДополненииПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей)
	
	ЗаполнитьВыходныеИзделияПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей);
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСтатусыУказанияСерий();
	
	Отказ = Ложь;
	УстановитьКлючВСтрокахТабличныхЧастей(Отказ);
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при заполнении кодов строк в табличных частях.'");
	КонецЕсли;
	
	ПрочитатьКодыСтрокДляЗаполненияОбеспечения(ДанныеЭтапа, ТаблицыСвязей);
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерий()
	
	ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(ЭтотОбъект);
	
	ЗаполнитьСтатусыУказанияСерийВТЧ("ВыходныеИзделия", ПараметрыУказанияСерий);
	ЗаполнитьСтатусыУказанияСерийВТЧ("ПобочныеИзделия", ПараметрыУказанияСерий);
	ЗаполнитьСтатусыУказанияСерийВТЧ("ОбеспечениеМатериаламиИРаботами", ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеСпецификации,"Распоряжение");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЭтапа,,"КоэффициентМаршрутнойКарты");
	
	Если ДанныеЭтапа.Владелец().Колонки.Найти("ЭтапСпецификации") <> Неопределено Тогда
		ЭтотОбъект.Этап = ДанныеЭтапа.ЭтапСпецификации;
	Иначе
		ЭтотОбъект.Этап = ДанныеЭтапа.Этап;
	КонецЕсли;
	
	ЭтотОбъект.НаименованиеЭтапа = ДанныеЭтапа.ЭтапПредставление;
	
	ЭтотОбъект.Запланировано = ДанныеСпецификации.ЕдиницПартийИзделий;
	ЭтотОбъект.КоэффициентМаршрутнойКарты = ДанныеСпецификации.ЕдиницПартийИзделий * ДанныеЭтапа.КоэффициентМаршрутнойКарты;
	
	Если ПланироватьРаботуВидовРабочихЦентров
		И НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяПланированиеПоПроизводственнымРесурсам() Тогда
		ПланироватьРаботуВидовРабочихЦентров = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбеспечениеМатериаламиИРаботамиПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ПереченьВариантов, ТаблицыСвязей)
	
	Если НЕ ДанныеСпецификации.Свойство("МатериалыИУслуги")
		ИЛИ ДанныеСпецификации.МатериалыИУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляЗаполненияОбеспечения = ТаблицыСвязей.СтрокиДляЗаполненияОбеспечения;
	ИндексыСтрок = Новый Массив;
	
	ЗаполнитьОбеспеченияПоУмолчанию = НЕ ЗначениеЗаполнено(ПереченьВариантов);

	Если ДанныеСпецификации.МатериалыИУслуги.Колонки.Найти("ДатаОтгрузки") = Неопределено Тогда
		ЗаполнитьДатуОтгрузкиЖелаемойДатой = Истина;
	Иначе
		ЗаполнитьДатуОтгрузкиЖелаемойДатой = Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	НайденныеСтроки = ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = ОбеспечениеМатериаламиИРаботами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.КлючСвязиСпецификация = Строка.КлючСвязи;
			
		Если ЗаполнитьДатуОтгрузкиЖелаемойДатой Тогда
			НоваяСтрока.ДатаОтгрузки = ЖелаемаяДатаОбеспечения;
		КонецЕсли;
		
		ЗаполнитьОбеспечениеВПакетномРежиме = НЕ(
			ЗаполнитьОбеспеченияПоУмолчанию 
			
			ИЛИ Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации
			ИЛИ Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе
			
			ИЛИ (Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется 
				 И Строка.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа)
			
			ИЛИ Строка.ЗапрещеноИзменятьПараметрыОбеспечения);
		
		Если ЗаполнитьОбеспечениеВПакетномРежиме Тогда
			ИндексыСтрок.Добавить(ОбеспечениеМатериаламиИРаботами.Индекс(НоваяСтрока));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИндексыСтрок.Количество() > 0 Тогда
		
		ЭтапПроизводства = СсылкаНаТекущийЭтап(ДанныеЭтапа);
		
		Строка = СтрокиДляЗаполненияОбеспечения.Найти(ЭтапПроизводства, "ЭтапПроизводства");
		
		Если Строка = Неопределено Тогда
			Строка = СтрокиДляЗаполненияОбеспечения.Добавить();
			Строка.ЭтапПроизводства = ЭтапПроизводства;
		КонецЕсли;
		
		Строка.ИндексыСтрок = ИндексыСтрок;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИтоговоеВремяРаботыВидаРабочегоЦентра(ТекущаяСтрока)
	
	ОдновременноПроизводимое =
		?(ТекущаяСтрока.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий = 0,
		1,
		ТекущаяСтрока.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
		
	Коэффициент = Цел(ЭтотОбъект.Запланировано / ОдновременноПроизводимое)
		+ ?(ЭтотОбъект.Запланировано % ОдновременноПроизводимое > 0, 1, 0);
		
	Возврат ТекущаяСтрока.ВремяРаботы * Коэффициент;
	
КонецФункции

Процедура ЗаполнитьВидыРабочихЦентровПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	Если НЕ ДанныеСпецификации.Свойство("ВидыРабочихЦентров")
		ИЛИ ДанныеСпецификации.ВидыРабочихЦентров.Количество() = 0
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяПланированиеПоПроизводственнымРесурсам() Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПоУмолчанию = Новый Структура;
	Если ДанныеСпецификации.ВидыРабочихЦентров.Колонки.Найти("Использовать") = Неопределено Тогда
		ЗначенияПоУмолчанию.Вставить("Использовать", Истина);
	КонецЕсли;
	
	СоответствиеВидовРабочихЦентров = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	НайденныеСтроки = ДанныеСпецификации.ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = ЭтотОбъект.ВидыРабочихЦентров.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияПоУмолчанию);
		
		НоваяСтрока.ВремяРаботы = ИтоговоеВремяРаботыВидаРабочегоЦентра(Строка);
		
		НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		
		СоответствиеВидовРабочихЦентров.Вставить(
			НоваяСтрока.ВидРабочегоЦентра, 
			НоваяСтрока.КлючСвязи);
		
	КонецЦикла;
	
	Если ДанныеСпецификации.Свойство("АльтернативныеВидыРабочихЦентров")
		И ДанныеСпецификации.АльтернативныеВидыРабочихЦентров.Количество() > 0 Тогда
		
		НайденныеСтроки = ДанныеСпецификации.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			НоваяСтрока = ЭтотОбъект.АльтернативныеВидыРабочихЦентров.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.ВремяРаботы = ИтоговоеВремяРаботыВидаРабочегоЦентра(Строка);
			
			НоваяСтрока.КлючСвязиВидыРабочихЦентров = СоответствиеВидовРабочихЦентров[Строка.ОсновнойВидРабочегоЦентра];
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТрудозатратыПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	Если ДанныеСпецификации.Трудозатраты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	НайденныеСтроки = ДанныеСпецификации.Трудозатраты.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Трудозатраты.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоследователейПоСпецификации(ДанныеЭтапа, ЭтапыЦепочки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеЭтапа.НомерСледующегоЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("НомерЭтапа", ДанныеЭтапа.НомерСледующегоЭтапа);
	
	НайденныеСтроки = ЭтапыЦепочки.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = Последователи.Добавить();
		НоваяСтрока.Этап     = Строка.Этап;
		НоваяСтрока.ТипСвязи = ТипСвязиПоследователь();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВыходныеИзделияПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей)
	
	ТаблицыСвязей.ПФВыпуск.Очистить();
	
	Если ДанныеСпецификации.Свойство("ВыходныеИзделия") И ДанныеСпецификации.ВыходныеИзделия.Количество() > 0 Тогда
		
		ЗагрузитьВыходныеИзделияСпецификации(
			ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей.ПФВыпуск);
		
	КонецЕсли;
	
	Если ДанныеСпецификации.Свойство("ВозвратныеОтходы") И ДанныеСпецификации.ВозвратныеОтходы.Количество() > 0 Тогда
		
		ЗагрузитьВозвратныеОтходыСпецификации(
			ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей.ПФВыпуск);
		
	КонецЕсли;
	
	ЗаполнитьПоследователейПоИзделиям();
	
	ЗаполнитьНазначенияВВыходныхИзделиях(ТаблицыСвязей, Не ДанныеСпецификации.Свойство("ДокументыСозданныеДоГенерацииЭтапов"));
	
КонецПроцедуры

Процедура ЗаполнитьПоСпецификацииПереопределяемый(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей)
	
	Если Не ДанныеСпецификации.Свойство("РасходМатериаловИРабот") Тогда
		
		Возврат;
		
	КонецЕсли;
	РасходМатериаловИРабот.Загрузить(ДанныеСпецификации.РасходМатериаловИРабот);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеСпецификации, ДанныеСпецификации.ДопРеквизиты);
	
КонецПроцедуры

Процедура ЗагрузитьВыходныеИзделияСпецификации(ДанныеСпецификации, ДанныеЭтапа, ПФВыпуск)
	
	КэшПересчетаУпаковок = Неопределено;
	ПроверитьДолиСтоимости = Ложь;
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	НайденныеСтроки = ДанныеСпецификации.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Если ЗначениеЗаполнено(Строка.КлючСвязиНазначение) Тогда
			
			НоваяСтрокаДокумент = ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумент, Строка);
			
			НоваяСтрокаПФВыпуск = ПФВыпуск.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПФВыпуск, Строка);
			
			НоваяСтрокаПФВыпуск.Спецификация = ДанныеСпецификации.Спецификация;
			НоваяСтрокаПФВыпуск.ЭтапПроизводства = ДанныеЭтапа.ЭтапПроизводства;
			НоваяСтрокаПФВыпуск.ИндексСтроки = ВыходныеИзделия.Индекс(НоваяСтрокаДокумент);
			
		Иначе
			
			ДобавитьСтрокуВТаблицуИзделий(Строка, ПФВыпуск, "ВыходныеИзделия", КэшПересчетаУпаковок);
			
		КонецЕсли;
		
		Если НЕ ПроверитьДолиСтоимости И Строка.ДоляСтоимости <> 0 Тогда
			ПроверитьДолиСтоимости = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроверитьДолиСтоимости
		И НЕ Документы.ЭтапПроизводства2_2.ИспользоватьДолюСтоимостиВВыходныхИзделиях(ЭтотОбъект) Тогда
		
		Для каждого Строка Из ВыходныеИзделия Цикл
			Строка.ДоляСтоимости = 0;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьВозвратныеОтходыСпецификации(ДанныеСпецификации, ДанныеЭтапа, ПФВыпуск)
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшПересчетаУпаковок = Неопределено;
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	НайденныеСтроки = ДанныеСпецификации.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		ПолуфабрикатыНаЭтапе = ПроизводимыеНаЭтапеПолуфабрикаты(ДанныеСпецификации, Строка);
		
		Если ПолуфабрикатыНаЭтапе.Количество() > 0 Тогда
			
			Индекс = 0;
			КоличествоОстаток = Строка.Количество;
			
			Пока КоличествоОстаток > 0 Цикл
				
				НоваяСтрокаДокумент = ПобочныеИзделия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумент, Строка);
				
				Если Индекс < ПолуфабрикатыНаЭтапе.Количество() Тогда
					
					СтрокаПолуфабрикат = ПолуфабрикатыНаЭтапе[Индекс];
					Количество = СтрокаПолуфабрикат.Количество;
					
					НоваяСтрокаПФВыпуск = ПФВыпуск.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПФВыпуск, Строка);
					НоваяСтрокаПФВыпуск.Спецификация = ДанныеСпецификации.Спецификация;
					НоваяСтрокаПФВыпуск.ЭтапПроизводства = ДанныеЭтапа.ЭтапПроизводства;
					НоваяСтрокаПФВыпуск.ИндексСтроки = ПобочныеИзделия.Индекс(НоваяСтрокаДокумент);
					НоваяСтрокаПФВыпуск.ФиксированнаяСтоимость = Истина;
					
					НоваяСтрокаПФВыпуск.КлючСвязиНазначение = ВыпускающийЭтап;
					НоваяСтрокаПФВыпуск.ЭтапНазначение = СтрокаПолуфабрикат.Этап;
					
				Иначе
					
					Количество = КоличествоОстаток;
					
				КонецЕсли;
				
				КоличествоДоИзменения = НоваяСтрокаДокумент.Количество;
				НоваяСтрокаДокумент.Количество = Количество;
				
				Если НЕ КоличествоДоИзменения = НоваяСтрокаДокумент.Количество Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
					НоваяСтрокаДокумент, СтруктураДействий, КэшПересчетаУпаковок);
				КонецЕсли;
				
				Индекс = Индекс + 1;
				КоличествоОстаток = КоличествоОстаток - Количество;
				
			КонецЦикла;
			
		Иначе
			
			ДобавитьСтрокуВТаблицуИзделий(Строка, ПФВыпуск, "ПобочныеИзделия", КэшПересчетаУпаковок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуИзделий(Строка, ПФВыпуск, ИмяТаблицы, КэшПересчетаУпаковок)
	
	СуществующаяСтрокаДокумента = ПодобратьСтрокуИзделийДляДополнения(Строка, ПФВыпуск, ИмяТаблицы);
	
	Если СуществующаяСтрокаДокумента = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТаблицы].Добавить(), Строка);
		
	Иначе
		
		УвеличитьКоличествоВТаблицеИзделий(ИмяТаблицы, СуществующаяСтрокаДокумента, Строка);
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
			СуществующаяСтрокаДокумента, СтруктураДействий, КэшПересчетаУпаковок);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодобратьСтрокуИзделийДляДополнения(ЗначенияЗаполнения, ПФВыпуск, ИмяТаблицы)
	
	Результат = Неопределено;
	
	СтруктураПоискаДокумент = Новый Структура("Номенклатура, Характеристика, Назначение, ЭтапПотребитель, Получатель");
	ЗаполнитьЗначенияСвойств(СтруктураПоискаДокумент, ЗначенияЗаполнения);
	
	СтрокиДокумента = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(СтруктураПоискаДокумент);
	
	СтруктураПоискаКэш = Новый Структура;
	СтруктураПоискаКэш.Вставить("ЭтапПроизводства", Ссылка);
	СтруктураПоискаКэш.Вставить("ФиксированнаяСтоимость", ИмяТаблицы = "ПобочныеИзделия");
	СтруктураПоискаКэш.Вставить("ИндексСтроки");
	
	Для каждого СтрокаДокумента Из СтрокиДокумента Цикл
		
		СтруктураПоискаКэш.ИндексСтроки = ЭтотОбъект[ИмяТаблицы].Индекс(СтрокаДокумента);
		СтрокиКэша = ПФВыпуск.НайтиСтроки(СтруктураПоискаКэш);
		
		Если СтрокиКэша.Количество() = 0 Тогда
			
			Результат = СтрокаДокумента;
			Прервать;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПроизводимыеНаЭтапеПолуфабрикаты(ДанныеСпецификации, СтрокаВозвратныеОтходы)
	
	Если ДанныеСпецификации.Свойство("МатериалыИУслуги") Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаВозвратныеОтходы.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаВозвратныеОтходы.Характеристика);
		СтруктураПоиска.Вставить("ИсточникПолученияПолуфабриката", СтрокаВозвратныеОтходы.Этап);
		СтруктураПоиска.Вставить("СпособПолученияМатериала", Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе);
		
		Результат = ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
		
	Иначе
		
		Результат = Новый Массив;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНазначенияВВыходныхИзделиях(ТаблицыСвязей, СвернутьТаблицуИзделий)
	
	// Заполнение назначений для полуфабрикатов в процессе
	Если ТаблицыСвязей.ПФВыпуск.Количество() > 0 Тогда
		
		КэшПересчетаУпаковок = Неопределено;
		КоэффициентыСтоимости = Неопределено;
		
		ПФВыпуск      = ТаблицыСвязей.ПФВыпуск;
		ПФПотребность = ТаблицыСвязей.ПФПотребность;
		ПФСвязи       = ТаблицыСвязей.ПФСвязи;
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		
		СтруктураПоискаСвязи = Новый Структура("КлючСвязиНазначение, ЭтапНазначение");
		СтруктураПоискаПотребность = Новый Структура("ЭтапПроизводства, Номенклатура, Характеристика, Спецификация");
		
		ЗаполнятьДолюСтоимости = Документы.ЭтапПроизводства2_2.ИспользоватьДолюСтоимостиВВыходныхИзделиях(ЭтотОбъект);
		
		Для каждого СтрокаВыпуск Из ПФВыпуск Цикл

		Если СтрокаВыпуск.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаВыпуск.ФиксированнаяСтоимость Тогда
			ИмяТаблицы = "ПобочныеИзделия";
		Иначе
			ИмяТаблицы = "ВыходныеИзделия";
		КонецЕсли;
		
		СтрокаЭтапа = ЭтотОбъект[ИмяТаблицы][СтрокаВыпуск.ИндексСтроки];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСвязи, СтрокаВыпуск);
		НайденныеСвязи = ПФСвязи.НайтиСтроки(СтруктураПоискаСвязи);
		Для каждого СтрокаСвязь Из НайденныеСвязи Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаПотребность, СтрокаВыпуск, "Номенклатура, Характеристика, Спецификация");
			СтруктураПоискаПотребность.ЭтапПроизводства = СтрокаСвязь.ЭтапПроизводства;
			
			НайденныеПотребности = ПФПотребность.НайтиСтроки(СтруктураПоискаПотребность);
			Для каждого СтрокаПотребность Из НайденныеПотребности Цикл
				
				КоличествоПотребность = СтрокаПотребность.Количество - СтрокаПотребность.КоличествоОбеспеченоТекущимЭтапом;
				Если КоличествоПотребность = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЭтапПотребитель = СтрокаПотребность.ЭтапПроизводства;
				
				НазначениеИзделия = ТаблицыСвязей.НазначенияПолуфабрикатов.Получить(ЭтапПотребитель);
				ПолучательИзделия = СтрокаПотребность.Склад;
				
				Если СтрокаВыпуск.Количество <= КоличествоПотребность Тогда
					
					КоличествоЗачет = СтрокаВыпуск.Количество;
					
					СтрокаЭтапа.ЭтапПотребитель = ЭтапПотребитель;
					СтрокаЭтапа.Назначение = НазначениеИзделия;
					СтрокаЭтапа.Получатель = ПолучательИзделия;
					
					ОбособленнаяСтрока = СтрокаЭтапа;
					
				Иначе
					
					Если ИмяТаблицы = "ВыходныеИзделия" И ЗаполнятьДолюСтоимости И КоэффициентыСтоимости = Неопределено Тогда
						
						ПроизводствоСервер.РассчитатьКоэффициентыИЗаполнитьДолиСтоимости(ВыходныеИзделия, КоэффициентыСтоимости);
						
					КонецЕсли;
						
					КоличествоЗачет = КоличествоПотребность;
					
					НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭтапа);
					
					НоваяСтрока.Количество = КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшПересчетаУпаковок);
					
					НоваяСтрока.ЭтапПотребитель = ЭтапПотребитель;
					НоваяСтрока.Назначение = НазначениеИзделия;
					НоваяСтрока.Получатель = ПолучательИзделия;
					
					ОбособленнаяСтрока = НоваяСтрока;
					
					СтрокаЭтапа.Количество = СтрокаЭтапа.Количество - КоличествоЗачет;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаЭтапа, СтруктураДействий, КэшПересчетаУпаковок);
					
					Если ИмяТаблицы = "ВыходныеИзделия" И ЗаполнятьДолюСтоимости Тогда
						
						ПроизводствоСервер.ПересчитатьДолиСтоимостиПриРазбиенииСтроки(
							ВыходныеИзделия, СтрокаЭтапа, НоваяСтрока, КоэффициентыСтоимости);
						
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаВыпуск.Количество = СтрокаВыпуск.Количество - КоличествоЗачет;
				СтрокаПотребность.КоличествоОбеспеченоТекущимЭтапом = СтрокаПотребность.КоличествоОбеспеченоТекущимЭтапом
					+ КоличествоЗачет;
				СтрокаПотребность.ОбеспеченаТекущимЭтапом = Истина;
				
				НоваяСтрокаПоследователи = Последователи.Добавить();
				НоваяСтрокаПоследователи.Этап     = ЭтапПотребитель;
				НоваяСтрокаПоследователи.ТипСвязи = ТипСвязиПотребитель();
				
				Если СтрокаВыпуск.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
				
			Если СтрокаВыпуск.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	КонецЕсли;
	
	ЗаполнитьНазначенияПобочногоВыпускаДавальцу();
	
	Если СвернутьТаблицуИзделий Тогда
		СвернутьТаблицуИзделий("ВыходныеИзделия");
	КонецЕсли;
	
	УпорядочитьТаблицуИзделийПоНазначениям("ВыходныеИзделия");
	
	Если СвернутьТаблицуИзделий Тогда
		СвернутьТаблицуИзделий("ПобочныеИзделия");
	КонецЕсли;
	
	УпорядочитьТаблицуИзделийПоНазначениям("ПобочныеИзделия");
	
КонецПроцедуры

Процедура СвернутьТаблицуИзделий(ИмяТаблицы)
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТаблицы];
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Получатель, Назначение, ЭтапПотребитель, Серия");
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшПересчетаУпаковок = Неопределено;
	
	Индекс = 0;
	Пока Индекс < ТабличнаяЧасть.Количество()-1 Цикл
		
		ТекущаяСтрока = ТабличнаяЧасть[Индекс];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если Строка.НомерСтроки = ТекущаяСтрока.НомерСтроки Тогда
					Продолжить;
				Иначе
					
					УвеличитьКоличествоВТаблицеИзделий(ИмяТаблицы, ТекущаяСтрока, Строка);
					
					ТабличнаяЧасть.Удалить(Строка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
				ТекущаяСтрока, СтруктураДействий, КэшПересчетаУпаковок);
				
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНазначенияПобочногоВыпускаДавальцу(ИменаТаблиц = "")
	
	// побочный выпуск для давальца должен быть обособленным
	ХозяйственнаяОперация = ДанныеИзКэшаОбъекта("Распоряжение").ХозяйственнаяОперация;
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
		Возврат;
	КонецЕсли;
	
	НазначениеПобочногоВыпуска = Документы.ЭтапПроизводства2_2.НазначениеПобочногоВыпускаДавальцу(ЭтотОбъект);
	
	Если ПустаяСтрока(ИменаТаблиц) Тогда
		СписокИменТаблиц = СтрРазделить("ВыходныеИзделия,ПобочныеИзделия",",");
	Иначе
		СписокИменТаблиц = СтрРазделить(ИменаТаблиц,",");
	КонецЕсли;
	
	Для каждого ИмяТаблицы Из СписокИменТаблиц Цикл
		Для каждого Строка Из ЭтотОбъект[ИмяТаблицы] Цикл
			Если Строка.Назначение.Пустая() Тогда
				Строка.Назначение = НазначениеПобочногоВыпуска;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УпорядочитьТаблицуИзделийПоНазначениям(ИмяТаблицы)
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТаблицы];
	
	Если ТабличнаяЧасть.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексНазначение = 0;
	
	Для Индекс = 0 По ТабличнаяЧасть.Количество() - 1 Цикл
		
		Если ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].Назначение) Тогда
			
			Если НЕ Индекс = ИндексНазначение Тогда
				
				ТабличнаяЧасть.Сдвинуть(Индекс, ИндексНазначение - Индекс);
				
			КонецЕсли;
			
			ИндексНазначение = ИндексНазначение + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьДанныеТаблицыПоКоэффициенту(Таблица, ИмяРеквизита, Коэффициент)
	
	Для каждого Строка Из Таблица Цикл
		
		Строка[ИмяРеквизита] = Строка[ИмяРеквизита] * Коэффициент;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьКодыСтрокДляЗаполненияОбеспечения(ДанныеЭтапа, ТаблицыСвязей)
	
	Таблица = ТаблицыСвязей.СтрокиДляЗаполненияОбеспечения;
	
	ЭтапПроизводства = СсылкаНаТекущийЭтап(ДанныеЭтапа);
	
	Строка = Таблица.Найти(ЭтапПроизводства, "ЭтапПроизводства");
	
	Если НЕ Строка = Неопределено Тогда
		
		КодыСтрок = Новый Массив;
		
		Для каждого Индекс Из Строка.ИндексыСтрок Цикл
			
			КодыСтрок.Добавить(ОбеспечениеМатериаламиИРаботами[Индекс].КодСтроки);
			
		КонецЦикла;
		
		Строка.КодыСтрок = КодыСтрок;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаНаТекущийЭтап(ДанныеЭтапа)
	
	Если ЭтоНовый() Тогда
		
		Результат = ДанныеЭтапа.ЭтапПроизводства;
		
	Иначе
		
		Результат = Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УвеличитьКоличествоВТаблицеИзделий(ИмяТаблицы, Строка, ЗначенияЗаполнения)
	
	Строка.Количество = Строка.Количество + ЗначенияЗаполнения.Количество;
	
	Если ИмяТаблицы = "ВыходныеИзделия" Тогда
		
		Строка.ДоляСтоимости = Строка.ДоляСтоимости + ЗначенияЗаполнения.ДоляСтоимости;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоОперациям

#Область ОбщиеДействия

Функция ДанныеЗавершенныхОпераций()
	
	ДанныеОпераций = Документы.ПроизводственнаяОперация2_2.ДанныеЗавершенныхОпераций(Ссылка);
	
	НастроитьТаблицуМатериаловОпераций(ДанныеОпераций.МатериалыИРаботы);
	
	НастроитьТаблицуВыходныхИзделийОпераций(ДанныеОпераций.ВыходныеИзделия);
	НастроитьТаблицуВыходныхИзделийОпераций(ДанныеОпераций.ВыходныеИзделияСерии);
	
	Возврат ДанныеОпераций;
	
КонецФункции

Процедура НастроитьТаблицуМатериаловОпераций(Таблица)
	
	Таблица.Колонки.ДатаВыполнения.Имя = "ДатаРасхода";
	
КонецПроцедуры

Процедура НастроитьТаблицуВыходныхИзделийОпераций(Таблица)
	
	Таблица.Колонки.ДатаВыполнения.Имя = "ДатаПроизводства";
	
	ОТСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25));
	
	Таблица.Колонки.Добавить("ИмяТЧ", ОТСтрока);
	
	Для каждого Строка Из Таблица Цикл
		
		НайденнаяСтрока = ВыходныеИзделия.Найти(Строка.Номенклатура, "Номенклатура");
		
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Строка.ИмяТЧ = "ВыходныеИзделия";
		Иначе
			Строка.ИмяТЧ = "ПобочныеИзделия";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтроками

Процедура СверитьКоличествоТЧСДаннымиОпераций(ДанныеОпераций, СтруктураПоискаОпераций, КоличествоТЧ)
	
	НайденныеСтроки = ДанныеОпераций.НайтиСтроки(СтруктураПоискаОпераций);
		
	Для каждого СтрокаОперация Из НайденныеСтроки Цикл
		
		КоличествоЗачет = МИН(КоличествоТЧ, СтрокаОперация.Количество);
		
		СтрокаОперация.Количество = СтрокаОперация.Количество - КоличествоЗачет;
		Если СтрокаОперация.Количество = 0 Тогда
			ДанныеОпераций.Удалить(СтрокаОперация);
		КонецЕсли;
		
		КоличествоТЧ = КоличествоТЧ - КоличествоЗачет;
		Если КоличествоТЧ = 0 Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УменьшитьПроизведенноеКоличествоВСтрокеТЧ(ИмяТЧ, СтрокаТЧ, КоличествоНеПроизведено, ИмяФлагаПроизведено, КоэффициентыСтоимости = Неопределено)
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ЗаполнятьДолюСтоимости = Документы.ЭтапПроизводства2_2.ИспользоватьДолюСтоимостиВВыходныхИзделиях(ЭтотОбъект);
	Иначе
		ЗаполнятьДолюСтоимости = Ложь;
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ОчиститьСерию = Истина;
	Иначе
		ОчиститьСерию = Ложь;
	КонецЕсли;
	
	Если СтрокаТЧ.Количество = КоличествоНеПроизведено Тогда
		
		СтрокаТЧ[ИмяФлагаПроизведено] = Ложь;
		
		Если ОчиститьСерию Тогда
			СтрокаТЧ.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Если ЗаполнятьДолюСтоимости И КоэффициентыСтоимости = Неопределено Тогда
			
			ПроизводствоСервер.РассчитатьКоэффициентыИЗаполнитьДолиСтоимости(ВыходныеИзделия, КоэффициентыСтоимости);
			
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.КодСтроки = 0;
		НоваяСтрока.Количество = КоличествоНеПроизведено;
		НоваяСтрока[ИмяФлагаПроизведено] = Ложь;
		
		Если ОчиститьСерию Тогда
			НоваяСтрока.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество - КоличествоНеПроизведено;
		
		Если ЗаполнятьДолюСтоимости Тогда
		
			ПроизводствоСервер.ПересчитатьДолиСтоимостиПриРазбиенииСтроки(
				ВыходныеИзделия, СтрокаТЧ, НоваяСтрока, КоэффициентыСтоимости);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеОперацииВСтрокуНеПроизведено(ИмяТЧ, ДанныеОперации, СтруктураПоиска, ИменаПолей, КоэффициентыСтоимости = Неопределено)
	
	Перем КэшированныеЗначения;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ЗаполнятьДолюСтоимости = Документы.ЭтапПроизводства2_2.ИспользоватьДолюСтоимостиВВыходныхИзделиях(ЭтотОбъект);
	Иначе
		ЗаполнятьДолюСтоимости = Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеОперации);
	СтруктураПоиска[ИменаПолей.ФлагПроизведено] = Ложь;
	
	НайденныеСтроки = ЭтотОбъект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаВыпуск Из НайденныеСтроки Цикл
		
		КоличествоЗачет = МИН(СтрокаВыпуск.Количество, ДанныеОперации.Количество);
		
		Если КоличествоЗачет = СтрокаВыпуск.Количество Тогда
			
			СтрокаВыпуск[ИменаПолей.ФлагПроизведено] = Истина;
			
			ЗаполнитьЗначенияСвойств(СтрокаВыпуск, ДанныеОперации, ИменаПолей.ЗаполнитьПоОперации);
			
		Иначе
			
			Если ЗаполнятьДолюСтоимости И КоэффициентыСтоимости = Неопределено Тогда
				
				ПроизводствоСервер.РассчитатьКоэффициентыИЗаполнитьДолиСтоимости(ВыходныеИзделия, КоэффициентыСтоимости);
				
			КонецЕсли;
			
			НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыпуск);
		
			НоваяСтрока.КодСтроки = 0;
			НоваяСтрока.Количество = КоличествоЗачет;
			НоваяСтрока[ИменаПолей.ФлагПроизведено] = Истина;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОперации, ИменаПолей.ЗаполнитьПоОперации);
			
			СтрокаВыпуск.Количество = СтрокаВыпуск.Количество - КоличествоЗачет;
			
			Если ЗаполнятьДолюСтоимости Тогда
		
				ПроизводствоСервер.ПересчитатьДолиСтоимостиПриРазбиенииСтроки(
					ВыходныеИзделия, СтрокаВыпуск, НоваяСтрока, КоэффициентыСтоимости);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеОперации.Количество = ДанныеОперации.Количество - КоличествоЗачет;
		
		Если ДанныеОперации.Количество = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОперацииВСтрокуПроизведено(ИмяТЧ, ДанныеОперации, СтруктураПоиска, ИменаПолей)
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеОперации);
	СтруктураПоиска[ИменаПолей.ФлагПроизведено] = Истина;
	
	НайденныеСтроки = ЭтотОбъект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + ДанныеОперации.Количество;
		
		ДанныеОперации.Количество = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеОперацииВНовуюСтроку(ИмяТЧ, ДанныеОперации, ИменаПолей)
	
	Перем КэшированныеЗначения;
	
	НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОперации);
	
	НоваяСтрока[ИменаПолей.ФлагПроизведено] = Истина;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ЗаполнитьТипПолучателяИзделия(НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТипПолучателяИзделия(Строка)
	
	Если Строка.Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "ТипНоменклатуры");
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	Иначе
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли;
	
	Строка.Получатель = ОписаниеТипа.ПривестиЗначение(Строка.Получатель);
	
КонецПроцедуры

Процедура ЗаполнитьДатуПроизводстваПоТЧ(ИмяТЧ, ДатаТЧ, ОднаДата, ИменаПолей)
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		
		ОбрабатыватьСтроку = НЕ ИменаПолей.Свойство("ФлагПроизведено")
			ИЛИ Строка[ИменаПолей.ФлагПроизведено];
		
		Если ОбрабатыватьСтроку Тогда
			
			Если ЗначениеЗаполнено(ДатаТЧ) Тогда
				
				Если ДатаТЧ = Строка[ИменаПолей.Дата] Тогда
					Продолжить;
				Иначе
					ОднаДата = Ложь;
					Прервать;
				КонецЕсли;
				
			Иначе
				ДатаТЧ = Строка[ИменаПолей.Дата];
				ОднаДата = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Материалы

Процедура ЗаполнитьМатериалыПоОперациям(МатериалыОпераций)
	
	РасходМатериаловИРабот.Очистить();
	
	Для каждого СтрокаОперация Из МатериалыОпераций Цикл
		
		НоваяСтрока = РасходМатериаловИРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОперация);
		
		ЗаполнитьСтрокуРасходаПоДаннымОбеспечения(НоваяСтрока);
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийВТЧ("РасходМатериаловИРабот");
	
	Документы.ЭтапПроизводства2_2.ЗаполнитьНеизрасходованныеМатериалы(ЭтотОбъект);
	
	ЗаполнитьДатуРасходаМатериаловВШапке();
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуРасходаПоДаннымОбеспечения(СтрокаРасход)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРасход);
	
	НайденныеСтроки = ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаРасход.СтатьяКалькуляции = НайденныеСтроки[0].СтатьяКалькуляции;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатуРасходаМатериаловВШапке()
	
	ДатаТЧ = '00010101';
	ОднаДата = Ложь;
	
	ИменаПолей = Новый Структура;
	
	ИменаПолей.Вставить("Дата", "ДатаРасхода");
	ЗаполнитьДатуПроизводстваПоТЧ("РасходМатериаловИРабот", ДатаТЧ, ОднаДата, ИменаПолей);
	
	ИменаПолей.Вставить("Дата", "ДатаОперации");
	ЗаполнитьДатуПроизводстваПоТЧ("ЭкономияМатериалов", ДатаТЧ, ОднаДата, ИменаПолей);
	
	Если ОднаДата Тогда
		ДатаРасхода = ДатаТЧ;
	Иначе
		ДатаРасхода = '00010101';
	КонецЕсли;
	
	РасходОднойДатой = ОднаДата;
	
КонецПроцедуры

#КонецОбласти

#Область ВыходныеПобочныеИзделия

Процедура ЗаполнитьВыходныеПобочныеИзделияПоОперациям(ИзделияОпераций, ИзделияОперацийСерии)
	
	ЗаполнитьИзделияПоОперациям("ВыходныеИзделия", ИзделияОпераций, ИзделияОперацийСерии);
	ЗаполнитьИзделияПоОперациям("ПобочныеИзделия", ИзделияОпераций, ИзделияОперацийСерии);
	
	ЗаполнитьДатуПроизводстваИзделийВШапке();
	
КонецПроцедуры

Процедура ЗаполнитьИзделияПоОперациям(ИмяТЧ, ИзделияОпераций, ИзделияОперацийСерии)
	
	КоэффициентыСтоимости = Неопределено;
	
	СверитьИзделияСДаннымиОпераций(ИмяТЧ, ИзделияОпераций, ИзделияОперацийСерии, КоэффициентыСтоимости);
	
	ЗагрузитьДанныеОперацийВИзделия(ИмяТЧ, ИзделияОпераций, КоэффициентыСтоимости);
	
	ЗаполнитьСерииИзделийПоОперациям(ИмяТЧ, ИзделияОперацийСерии, КоэффициентыСтоимости);
	
	НормализоватьДолиСтоимостиИзделий(ИмяТЧ);
	
	ОбработатьИзделияПослеЗаполненияПоОперациям(ИмяТЧ);
	
КонецПроцедуры

Процедура СверитьИзделияСДаннымиОпераций(ИмяТЧ, ИзделияОпераций, ИзделияОперацийСерии, КоэффициентыСтоимости)
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		
		Если НЕ Строка.Произведено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОстаток = Строка.Количество;
		
		СверитьВыпускСДаннымиОпераций(Строка, КоличествоОстаток, ИзделияОпераций, ИзделияОперацийСерии);
		
		Если КоличествоОстаток > 0 Тогда
			
			УменьшитьВыпуск(ИмяТЧ, Строка, КоличествоОстаток, КоэффициентыСтоимости);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СверитьВыпускСДаннымиОпераций(СтрокаВыпуск, КоличествоВыпуск, ИзделияОпераций, ИзделияОперацийСерии)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаПроизводства");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаВыпуск);
	
	НайденныеСтроки = ИзделияОпераций.НайтиСтроки(СтруктураПоиска);
		
	Для каждого СтрокаОперация Из НайденныеСтроки Цикл
		
		КоличествоЗачет = МИН(КоличествоВыпуск, СтрокаОперация.Количество);
		
		СерииСверены = СверитьСериюВыпускаСДаннымиОпераций(СтрокаВыпуск, ИзделияОперацийСерии, КоличествоЗачет);
		Если НЕ СерииСверены Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОперация.Количество = СтрокаОперация.Количество - КоличествоЗачет;
		Если СтрокаОперация.Количество = 0 Тогда
			ИзделияОпераций.Удалить(СтрокаОперация);
		КонецЕсли;
		
		КоличествоВыпуск = КоличествоВыпуск - КоличествоЗачет;
		Если КоличествоВыпуск = 0 Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция СверитьСериюВыпускаСДаннымиОпераций(СтрокаВыпуск, ИзделияОперацийСерии, Знач КоличествоВыпуск)
	
	Если ЗначениеЗаполнено(СтрокаВыпуск.Серия) Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаПроизводства, Серия");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаВыпуск);
		
		НайденныеСтроки = ИзделияОперацийСерии.НайтиСтроки(СтруктураПоиска);
		
		Количество = 0;
		Для каждого Строка Из НайденныеСтроки Цикл
			Количество = Количество + Строка.Количество;
		КонецЦикла;
		
		Если Количество >= КоличествоВыпуск Тогда
			
			СерииСверены = Истина;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				КоличествоЗачет = Мин(КоличествоВыпуск, Строка.Количество);
				
				Строка.Количество = Строка.Количество - КоличествоЗачет;
				Если Строка.Количество = 0 Тогда
					ИзделияОперацийСерии.Удалить(Строка);
				КонецЕсли;
				
				КоличествоВыпуск = КоличествоВыпуск - КоличествоЗачет;
				Если КоличествоВыпуск = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СерииСверены = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		СерииСверены = Истина;
		
	КонецЕсли;
	
	Возврат СерииСверены;
	
КонецФункции

Процедура УменьшитьВыпуск(ИмяТЧ, СтрокаВыпуск, КоличествоНеПроизведено, КоэффициентыСтоимости)
	
	УменьшитьПроизведенноеКоличествоВСтрокеТЧ(
		ИмяТЧ, СтрокаВыпуск, КоличествоНеПроизведено, "Произведено", КоэффициентыСтоимости);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОперацийВИзделия(ИмяТЧ, ИзделияОпераций, КоэффициентыСтоимости)
	
	Для каждого Строка Из ИзделияОпераций Цикл
		
		Если НЕ Строка.ИмяТЧ = ИмяТЧ Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаПолей = Новый Структура;
		ИменаПолей.Вставить("ФлагПроизведено", "Произведено");
		ИменаПолей.Вставить("ЗаполнитьПоОперации", "ДатаПроизводства, Серия");
		
		СтруктураПоискаНеПроизведено = Новый Структура("Номенклатура, Характеристика, Произведено");
		
		ДобавитьДанныеОперацииВСтрокуНеПроизведено(
			ИмяТЧ, Строка, СтруктураПоискаНеПроизведено, ИменаПолей, КоэффициентыСтоимости);
		
		Если Строка.Количество > 0 Тогда
			ДобавитьДанныеОперацииВНовуюСтроку(ИмяТЧ, Строка, ИменаПолей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НормализоватьДолиСтоимостиИзделий(ИмяТЧ)
	
	Если НЕ ИмяТЧ = "ВыходныеИзделия"
		ИЛИ НЕ Документы.ЭтапПроизводства2_2.ИспользоватьДолюСтоимостиВВыходныхИзделиях(ЭтотОбъект) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НОД = ПроизводствоСервер.НаибольшийОбщийДелительВКоллекции(ВыходныеИзделия, "ДоляСтоимости");
	
	Если НОД > 1 Тогда
		
		Для каждого Строка Из ВыходныеИзделия Цикл
			
			Строка.ДоляСтоимости = Строка.ДоляСтоимости/НОД;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзделияПослеЗаполненияПоОперациям(ИмяТЧ)
	
	Если ЭтотОбъект[ИмяТЧ].Количество() > 0 Тогда
		
		Если ИмяТЧ = "ПобочныеИзделия" Тогда
			Документы.ЭтапПроизводства2_2.ЗаполнитьЦеныПоВидуЦен(ЭтотОбъект);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ЭтотОбъект[ИмяТЧ], СтруктураДействий, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСерииИзделийПоОперациям(ИмяТЧ, ИзделияОперацийСерии, КоэффициентыСтоимости)
	
	ИмяТЧСерии = ИмяТЧ + "Серии";
	ЭтотОбъект[ИмяТЧСерии].Очистить();
	
	Если ИзделияОперацийСерии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИзделия = ЭтотОбъект[ИмяТЧ].Выгрузить(
		Новый Структура("Произведено", Истина),
		"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Количество");
	
	ТаблицаИзделия.Свернуть(
		"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение", "Количество");
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаПроизводства");
	
	Для каждого СтрокаСерии Из ИзделияОперацийСерии Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСерии);
		
		НайденныеСтроки = ТаблицаИзделия.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаИзделие Из НайденныеСтроки Цикл
			
			Количество = МИН(СтрокаСерии.Количество, СтрокаИзделие.Количество);
			
			НоваяСтрока = ЭтотОбъект[ИмяТЧСерии].Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзделие, "Получатель, Назначение");
			
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.Произведено = Истина;
			
			СтрокаИзделие.Количество = СтрокаИзделие.Количество - Количество;
			Если СтрокаИзделие.Количество = 0 Тогда
				ТаблицаИзделия.Удалить(СтрокаИзделие);
			КонецЕсли;
			
			СтрокаСерии.Количество = СтрокаСерии.Количество - Количество;
			Если СтрокаСерии.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ);
	
	ПеренестиСерииВТаблицуИзделий(ИмяТЧ, КоэффициентыСтоимости);
	
КонецПроцедуры

Процедура ЗаполнитьДатуПроизводстваИзделийВШапке()
	
	ДатаТЧ = '00010101';
	ОднаДата = Ложь;
	
	ИменаПолей = Новый Структура;
	ИменаПолей.Вставить("ФлагПроизведено", "Произведено");
	ИменаПолей.Вставить("Дата", "ДатаПроизводства");
	
	ЗаполнитьДатуПроизводстваПоТЧ("ВыходныеИзделия", ДатаТЧ, ОднаДата, ИменаПолей);
	ЗаполнитьДатуПроизводстваПоТЧ("ПобочныеИзделия", ДатаТЧ, ОднаДата, ИменаПолей);
	
	Если ОднаДата Тогда
		ДатаПроизводства = ДатаТЧ;
	Иначе
		ДатаПроизводства = '00010101';
	КонецЕсли;
	
	ПроизводствоОднойДатой = ОднаДата;
	
КонецПроцедуры

Процедура ПеренестиСерииВТаблицуИзделий(ИмяТЧ, КоэффициентыСтоимости)
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ЗаполнятьДолюСтоимости = Документы.ЭтапПроизводства2_2.ИспользоватьДолюСтоимостиВВыходныхИзделиях(ЭтотОбъект);
	Иначе
		ЗаполнятьДолюСтоимости = Ложь;
	КонецЕсли;
	
	ПересчитатьСтатусы = Ложь;
	СтатусСерииВТекущейТЧ = 13;
	ИмяТЧСерии = ИмяТЧ + "Серии";
	
	СтруктураПоиска = Новый Структура(
		"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Произведено");
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		
		Если НЕ Строка.Произведено 
			ИЛИ Строка.СтатусУказанияСерий <> СтатусСерииВТекущейТЧ
			ИЛИ ЗначениеЗаполнено(Строка.Серия) Тогда
			Продолжить;
		КонецЕсли;
		
		ПересчитатьСтатусы = Истина;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		НайденныеСтроки = ЭтотОбъект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаСерии Из НайденныеСтроки Цикл
				
			КоличествоЗачет = МИН(Строка.Количество, СтрокаСерии.Количество);
			
			Если Строка.Количество = КоличествоЗачет Тогда
				
				Строка.Серия = СтрокаСерии.Серия;
				
			Иначе
				
				Если ЗаполнятьДолюСтоимости И КоэффициентыСтоимости = Неопределено Тогда
				
					ПроизводствоСервер.РассчитатьКоэффициентыИЗаполнитьДолиСтоимости(ВыходныеИзделия, КоэффициентыСтоимости);
					
				КонецЕсли;
			
				НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.Количество = КоличествоЗачет;
				НоваяСтрока.Серия = СтрокаСерии.Серия;
				НоваяСтрока.КодСтроки = 0;
				
				Строка.Количество = Строка.Количество - КоличествоЗачет;
				
				Если ЗаполнятьДолюСтоимости Тогда
		
					ПроизводствоСервер.ПересчитатьДолиСтоимостиПриРазбиенииСтроки(
						ВыходныеИзделия, Строка, НоваяСтрока, КоэффициентыСтоимости);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаСерии.Количество = КоличествоЗачет Тогда
				
				ЭтотОбъект[ИмяТЧСерии].Удалить(СтрокаСерии);
				
			Иначе
				
				СтрокаСерии.Количество = СтрокаСерии.Количество - КоличествоЗачет;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПересчитатьСтатусы Тогда
		ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Трудодзатраты

Процедура ЗаполнитьТрудозатратыПоОперациям(ТрудозатратыОпераций)
	
	СверитьТрудозатратыСДаннымиОпераций(ТрудозатратыОпераций);
	
	ЗагрузитьДанныеОперацийВТрудозатраты(ТрудозатратыОпераций);
	
КонецПроцедуры

Процедура СверитьТрудозатратыСДаннымиОпераций(ТрудозатратыОпераций)
	
	Для каждого Строка Из Трудозатраты Цикл
		
		Если НЕ Строка.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОстаток = Строка.Количество;
		
		СверитьТрудозатратуСДаннымиОпераций(Строка, КоличествоОстаток, ТрудозатратыОпераций);
		
		Если КоличествоОстаток > 0 Тогда
			
			УменьшитьТрудозатрату(Строка, КоличествоОстаток);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СверитьТрудозатратуСДаннымиОпераций(СтрокаТрудозатрата, КоличествоТрудозатрата, ТрудозатратыОпераций)
	
	СтруктураПоиска = Новый Структура("ВидРабот, Бригада, НазначениеРабот, ДатаВыполнения");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТрудозатрата);
	
	СверитьКоличествоТЧСДаннымиОпераций(ТрудозатратыОпераций, СтруктураПоиска, КоличествоТрудозатрата);
	
КонецПроцедуры

Процедура УменьшитьТрудозатрату(СтрокаТрудозатрата, КоличествоНеВыполнено)
	
	УменьшитьПроизведенноеКоличествоВСтрокеТЧ(
		"Трудозатраты", СтрокаТрудозатрата, КоличествоНеВыполнено, "Выполнено");
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОперацийВТрудозатраты(ТрудозатратыОпераций)
	
	Для каждого Строка Из ТрудозатратыОпераций Цикл
		
		ИменаПолей = Новый Структура;
		ИменаПолей.Вставить("ФлагПроизведено", "Выполнено");
		ИменаПолей.Вставить("ЗаполнитьПоОперации", "ДатаВыполнения, Бригада");
		
		СтруктураПоискаНеПроизведено = Новый Структура("ВидРабот, НазначениеРабот, Выполнено");
		
		ДобавитьДанныеОперацииВСтрокуНеПроизведено(
			"Трудозатраты", Строка, СтруктураПоискаНеПроизведено, ИменаПолей);
		
		Если Строка.Количество > 0 Тогда
				
			СтруктураПоискаПроизведено = Новый Структура(
				"ВидРабот, Бригада, НазначениеРабот, ДатаВыполнения, Выполнено");
				
			ДобавитьДанныеОперацииВСтрокуПроизведено(
				"Трудозатраты", Строка, СтруктураПоискаПроизведено, ИменаПолей);
			
		КонецЕсли;
		
		Если Строка.Количество > 0 Тогда
			ДобавитьДанныеОперацииВНовуюСтроку("Трудозатраты", Строка, ИменаПолей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеВидовЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
#Область ВыходныеИзделия
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаТоваров.Назначение КАК Назначение
	|
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                                  КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                                 КАК Номенклатура,
	|	ЛОЖЬ                                                        КАК ЭтоВозвратнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)          КАК Сделка,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)              КАК Менеджер,
	|	&Подразделение                                              КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО                                                КАК Назначение,
	|	&Организация                                                КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНазначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	КОНЕЦ                                                       КАК ТипЗапасов,
	|	СпрНазначения.Партнер                                       КАК Поставщик,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)   КАК Соглашение,
	|	ЕСТЬNULL(СпрНазначения.Договор.Контрагент, ВЫРАЗИТЬ(СпрНазначения.Заказ КАК Документ.ЗаказДавальца).Контрагент) КАК Контрагент,
	|	СпрНазначения.Договор                                       КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                    КАК Валюта,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРаздельныйУчетПоНалогообложению ТОГДА
	|			&ВыпускПодДеятельность
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ                                                       КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации                                 КАК НалогообложениеОрганизации,
	|	НЕОПРЕДЕЛЕНО                                                КАК ГруппаПродукции
	|
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ТаблицаТоваров.ВидЗапасов = ВидыЗапасов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО
	|		СпрНоменклатура.Ссылка = ТаблицаТоваров.Номенклатура
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
	|	ПО
	|		ЗаказНаПроизводство.Ссылка = &Распоряжение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Назначения КАК СпрНазначения
	|	ПО
	|		СпрНазначения.Ссылка = ТаблицаТоваров.Назначение
	|
	|ГДЕ
	|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	ИЛИ ВидыЗапасов.Организация <> &Организация
	|	ИЛИ ВидыЗапасов.ТипЗапасов <> ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНазначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	КОНЕЦ 
	|	ИЛИ (&ИспользоватьРаздельныйУчетПоНалогообложению
	|		И ВидыЗапасов.НалогообложениеНДС <> &ВыпускПодДеятельность
	|		И &ВыпускПодДеятельность <> &НалогообложениеОрганизации
	|		И &ВыпускПодДеятельность <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|	ИЛИ ВидыЗапасов.Контрагент <> ЕСТЬNULL(СпрНазначения.Договор.Контрагент, ВЫРАЗИТЬ(СпрНазначения.Заказ КАК Документ.ЗаказДавальца).Контрагент)  
	|	ИЛИ ВидыЗапасов.Договор <> СпрНазначения.Договор
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ВыходныеИзделия.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов, Назначение"));
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("Подразделение",              Подразделение);
	Запрос.УстановитьПараметр("ВыпускПодДеятельность",      ВыпускПодДеятельность);
	Запрос.УстановитьПараметр("Распоряжение",               Распоряжение);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению", ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
	
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, ВыходныеИзделия);
#КонецОбласти

#Область ПобочныеИзделия
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ПобочныеИзделия.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов, Назначение"));
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, ПобочныеИзделия);
#КонецОбласти

#Область ВидыЗапасовОбеспечение
	
	Если ПроизводствоНаСтороне Тогда
		ВидыЗапасовОбеспечение.Очистить();
	Иначе
		
		МенеджерВременныхТаблиц = ВременныеТаблицыДанныхОбеспечения();
		ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
		
		Если ДополнительныеСвойства.ПериодЗаполненияВидыЗапасовОбеспечение <> Неопределено Тогда
			
			СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
			УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
			
			ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
			
			ДополнительныеСвойства.Вставить("ТаблицаВидыЗапасов", ВидыЗапасовОбеспечение.ВыгрузитьКолонки());
			ДополнительныеСвойства.Вставить("ПериодЗаполнения", ДополнительныеСвойства.ПериодЗаполненияВидыЗапасовОбеспечение);
			ДополнительныеСвойства.Вставить("ЕстьТаблицаПриходуемыхВидовЗапасов", Ложь);
			ДополнительныеСвойства.Вставить("ДополнительноеУсловиеВычитаемыхДвижений", Ложь);
			
			ЗапасыСервер.ЗаполнитьВидыЗапасовРазныхПериодов(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ДополнительныеСвойства, ТаблицаОшибок);
			
			СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
			
			Если Не Отказ Тогда
				ЗаполнитьАналитикуПолучателяОбеспечение(МенеджерВременныхТаблиц, ДополнительныеСвойства);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти

#Область ВидыЗапасовЭкономия
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхЭкономия();
	
	Если ДополнительныеСвойства.ПериодЗаполненияВидыЗапасовЭкономия <> Неопределено Тогда
		
		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
		УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
		
		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
		
		ДополнительныеСвойства.Вставить("ТаблицаВидыЗапасов", ВидыЗапасовЭкономия.ВыгрузитьКолонки());
		ДополнительныеСвойства.Вставить("ПериодЗаполнения", ДополнительныеСвойства.ПериодЗаполненияВидыЗапасовЭкономия);
		ДополнительныеСвойства.Вставить("ЕстьТаблицаПриходуемыхВидовЗапасов", Истина);
		ДополнительныеСвойства.Вставить("ДополнительноеУсловиеВычитаемыхДвижений", Ложь);
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовРазныхПериодов(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ДополнительныеСвойства, ТаблицаОшибок);
		
		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
		
		Если Не Отказ Тогда
			ЗаполнитьАналитикуПолучателяЭкономия(МенеджерВременныхТаблиц, ДополнительныеСвойства);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

КонецПроцедуры

Функция ВременныеТаблицыДанныхОбеспечения() Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаТаблицыДанныхДокумента() + "
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                 КАК Характеристика,
	|	ТаблицаТоваров.Склад                          КАК Склад,
	|	ТаблицаТоваров.Серия                          КАК Серия,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ВариантОбеспечения             КАК ВариантОбеспечения,
	|	ТаблицаТоваров.ДатаОтгрузки                   КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			&Назначение
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                         КАК Назначение,
	|	ТаблицаТоваров.Количество                     КАК Количество,
	|	ТаблицаТоваров.ДокументРеализации             КАК ДокументРеализации,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                 КАК Характеристика,
	|	ТаблицаТоваров.Склад                          КАК Склад,
	|	ТаблицаТоваров.Назначение                     КАК Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество                     КАК Количество,
	|	ТаблицаТоваров.ВариантОбеспечения             КАК ВариантОбеспечения,
	|	ТаблицаТоваров.ДатаОтгрузки                   КАК ДатаОтгрузки,
	|	НЕОПРЕДЕЛЕНО                                  КАК ДатаПоступления,
	|	ТаблицаТоваров.ДокументРеализации             КАК ДокументРеализации,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0                                             КАК СуммаСНДС,
	|	0                                             КАК СуммаНДС,
	|	0                                             КАК СуммаВознаграждения,
	|	0                                             КАК СуммаНДСВознаграждения,
	|	ТаблицаТоваров.ГруппаПродукции                КАК ГруппаПродукции,
	|	ИСТИНА                                        КАК ПодбиратьВидыЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)   КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваровПоПериодам
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.Склад.ЦеховаяКладовая И ТаблицаТоваров.Склад.Подразделение = &Подразделение
	|	И ТаблицаТоваров.ВариантОбеспечения В(ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ТаблицаТоваров.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(ТаблицаТоваров.ДатаОтгрузки, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	ТаблицаТоваровПоПериодам КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                     КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ДокументРеализации              КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов                      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                      КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)           КАК СкладОтгрузки,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаВидыЗапасов.ГруппаПродукции                 КАК ГруппаПродукции,
	|	ТаблицаВидыЗапасов.ДатаОтгрузки                    КАК ДатаОтгрузки,
	|	&ВидыЗапасовУказаныВручную                         КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                 КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура                         КАК Номенклатура,
	|	Аналитика.Характеристика                       КАК Характеристика,
	|	Аналитика.Серия                                КАК Серия,
	|	Аналитика.Склад                                КАК Склад,
	|	Аналитика.Назначение                           КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)       КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.ДокументРеализации          КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов                  КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                    КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                  КАК Количество,
	|	ТаблицаВидыЗапасов.Сделка                      КАК Сделка,
	|	ТаблицаВидыЗапасов.ГруппаПродукции             КАК ГруппаПродукции,
	|	ТаблицаВидыЗапасов.ДатаОтгрузки                КАК ДатаОтгрузки,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную   КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасовПоПериодам
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",                     Ссылка);
	Запрос.УстановитьПараметр("Дата",                       Дата);
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("Менеджер",                   Ответственный);
	Запрос.УстановитьПараметр("Подразделение",              Подразделение);
	Запрос.УстановитьПараметр("ВыпускПодДеятельность",      ВыпускПодДеятельность);
	Запрос.УстановитьПараметр("Назначение",                 Назначение);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную",  Ложь);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров",             ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ОбеспечениеМатериаламиИРаботами.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",         ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасовОбеспечение.Выгрузить()));
	Запрос.УстановитьПараметр("ПериодЗаполнения",           ДополнительныеСвойства.ПериодЗаполненияВидыЗапасовОбеспечение);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ВременныеТаблицыДанныхЭкономия() Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаТаблицыДанныхДокумента() + "
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                 КАК Характеристика,
	|	ТаблицаТоваров.Склад                          КАК СкладПолучатель,
	|	ТаблицаТоваров.Серия                          КАК Серия,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	&Подразделение                                КАК Подразделение,
	|	ТаблицаТоваров.ДатаОперации                   КАК ДатаОтгрузки,
	|	&Назначение                                   КАК Назначение,
	|	ТаблицаТоваров.Количество                     КАК Количество,
	|	ТаблицаТоваров.ДокументРеализации             КАК ДокументРеализации,
	|	ТаблицаТоваров.СписатьНаРасходы               КАК СписатьНаРасходы,
	|	ТаблицаТоваров.СтатьяРасходов                 КАК СтатьяРасходов,
	|	ТаблицаТоваров.АналитикаРасходов              КАК АналитикаРасходов,
	|	ТаблицаТоваров.АналитикаАктивовПассивов       КАК АналитикаАктивовПассивов,
	|	ТаблицаТоваров.Обособить                      КАК Обособить,
	|	ТаблицаТоваров.ИдентификаторСтроки            КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                 КАК Характеристика,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество                     КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)      КАК Склад,
	|	ТаблицаТоваров.СкладПолучатель                КАК СкладПолучатель,
	|	ТаблицаТоваров.Подразделение                  КАК Подразделение,
	|	ТаблицаТоваров.ДатаОтгрузки                   КАК ДатаОтгрузки,
	|	НЕОПРЕДЕЛЕНО                                  КАК ДатаПоступления,
	|	ТаблицаТоваров.ДокументРеализации             КАК ДокументРеализации,
	
	|	ВЫБОР КОГДА ТаблицаТоваров.Обособить ТОГДА ТаблицаТоваров.Назначение КОНЕЦ КАК Назначение,
	|	ТаблицаТоваров.ГруппаПродукции                КАК ГруппаПродукции,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0                                             КАК СуммаСНДС,
	|	0                                             КАК СуммаНДС,
	|	0                                             КАК СуммаВознаграждения,
	|	0                                             КАК СуммаНДСВознаграждения,
	|	ИСТИНА                                        КАК ПодбиратьВидыЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)   КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваровПоПериодам
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|	ПО СпрСклады.Ссылка = ТаблицаТоваров.СкладПолучатель
	|
	|ГДЕ
	|	(СпрСклады.ЦеховаяКладовая
	|		И СпрСклады.Подразделение = &Подразделение
	|		ИЛИ ТаблицаТоваров.СписатьНаРасходы)
	|	И ТаблицаТоваров.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(ТаблицаТоваров.ДатаОтгрузки, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	ТаблицаТоваровПоПериодам КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                     КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ДокументРеализации              КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов                      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                      КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)           КАК СкладОтгрузки,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаВидыЗапасов.ГруппаПродукции                 КАК ГруппаПродукции,
	|	ТаблицаВидыЗапасов.ДатаОперации                    КАК ДатаОтгрузки,
	|	&ВидыЗапасовУказаныВручную                         КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                 КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура                         КАК Номенклатура,
	|	Аналитика.Характеристика                       КАК Характеристика,
	|	Аналитика.Серия                                КАК Серия,
	|	Аналитика.Склад                                КАК Склад,
	|	Аналитика.Назначение                           КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)       КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.ДокументРеализации          КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов                  КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                    КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                  КАК Количество,
	|	ТаблицаВидыЗапасов.Сделка                      КАК Сделка,
	|	ТаблицаВидыЗапасов.ГруппаПродукции             КАК ГруппаПродукции,
	|	ТаблицаВидыЗапасов.ДатаОтгрузки                КАК ДатаОтгрузки,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную   КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасовПоПериодам
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасовОбеспечение.НомерСтроки                     КАК НомерСтроки,
	|	ТаблицаВидыЗапасовОбеспечение.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасовОбеспечение.НазначениеПолучателя            КАК НазначениеПолучателя,
	|	ТаблицаВидыЗапасовОбеспечение.ВидЗапасов                      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасовОбеспечение.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасовОбеспечение.Количество                      КАК Количество,
	|	ТаблицаВидыЗапасовОбеспечение.ДатаОтгрузки                    КАК ДатаОтгрузки
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасовОбеспечение
	|ИЗ
	|	&ТаблицаВидыЗапасовОбеспечение КАК ТаблицаВидыЗапасовОбеспечение
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация                                  КАК Организация,
	|	АналитикаПолучателя.КлючАналитики             КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасовОбеспечение.ВидЗапасов      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасовОбеспечение.НомерГТД        КАК НомерГТД,
	|	ТаблицаВидыЗапасовОбеспечение.Количество      КАК Количество,
	|	КОНЕЦПЕРИОДА(ТаблицаВидыЗапасовОбеспечение.ДатаОтгрузки, МЕСЯЦ) КАК Период
	|	
	|ПОМЕСТИТЬ ПриходуемыеВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасовОбеспечение КАК ТаблицаВидыЗапасовОбеспечение
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасовОбеспечение.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПолучателя
	|		ПО Аналитика.Номенклатура = АналитикаПолучателя.Номенклатура
	|		И Аналитика.Характеристика = АналитикаПолучателя.Характеристика
	|		И Аналитика.Серия = АналитикаПолучателя.Серия
	|		И &Подразделение = АналитикаПолучателя.Склад
	|		И &Назначение = АналитикаПолучателя.Назначение
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаПолучателя.СтатьяКалькуляции
	|
	|ГДЕ
	|	ТаблицаВидыЗапасовОбеспечение.ДатаОтгрузки >= &ПериодЗаполнения
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",                     Ссылка);
	Запрос.УстановитьПараметр("Дата",                       Дата);
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("Менеджер",                   Ответственный);
	Запрос.УстановитьПараметр("Подразделение",              Подразделение);
	Запрос.УстановитьПараметр("ВыпускПодДеятельность",      ВыпускПодДеятельность);
	Запрос.УстановитьПараметр("Назначение",                 Назначение);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную",  Ложь);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров",             ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ЭкономияМатериалов.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",         ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасовЭкономия.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасовОбеспечение", ВидыЗапасовОбеспечение.Выгрузить());
	Запрос.УстановитьПараметр("ПериодЗаполнения",           ДополнительныеСвойства.ПериодЗаполненияВидыЗапасовЭкономия);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Процедура ЗаполнитьАналитикуПолучателяОбеспечение(МенеджерВременныхТаблиц, ПараметрыЗаполнения)
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого Строка Из ВидыЗапасовОбеспечение Цикл
		Если Строка.ДатаОтгрузки >= ДополнительныеСвойства.ПериодЗаполненияВидыЗапасовОбеспечение Тогда
			МассивУдаляемыхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасовОбеспечение.Удалить(Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПериодЗаполнения", ДополнительныеСвойства.ПериодЗаполненияВидыЗапасовОбеспечение);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры           КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура                         КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                       КАК Характеристика,
	|	ТаблицаТоваров.Серия                                КАК Серия,
	|	&Подразделение                                      КАК Склад,
	|	&Назначение                                         КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) КАК СтатьяКалькуляции,
	|	КОНЕЦПЕРИОДА(ТаблицаТоваров.ДатаОтгрузки, МЕСЯЦ)    КАК Период,
	|	ТаблицаТоваров.ДатаОтгрузки                         КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА АналитикаПолучателя.КлючАналитики ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК СоздатьКлючАналитики,
	|	СУММА(ТаблицаТоваров.Количество)                    КАК Количество
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПолучателя
	|		ПО (ТаблицаТоваров.Номенклатура = АналитикаПолучателя.Номенклатура)
	|			И (ТаблицаТоваров.Характеристика = АналитикаПолучателя.Характеристика)
	|			И (ТаблицаТоваров.Серия = АналитикаПолучателя.Серия)
	|			И (&Подразделение = АналитикаПолучателя.Склад)
	|			И (&Назначение = АналитикаПолучателя.Назначение)
	|			И (ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаПолучателя.СтатьяКалькуляции)
	|ГДЕ
	|	ТаблицаТоваров.Склад.ЦеховаяКладовая И ТаблицаТоваров.Склад.Подразделение = &Подразделение
	|	И ТаблицаТоваров.ВариантОбеспечения В(ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ТаблицаТоваров.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.ДатаОтгрузки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	АналитикаПолучателя.КлючАналитики
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ДатаОтгрузки,
	|	Количество";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	ОтборТоваров = Новый Структура("АналитикаУчетаНоменклатуры, Период");
	
	ТаблицаВидыЗапасов = ПараметрыЗаполнения.ТаблицаВидыЗапасов;
	ТаблицаВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, Период", "Количество");
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		КоличествоТоваров = ВыборкаТовары.Количество;
		
		ЗаполнитьЗначенияСвойств(ОтборТоваров, ВыборкаТовары);
		
		Для Каждого СтрокаЗапасов Из ТаблицаВидыЗапасов.НайтиСтроки(ОтборТоваров) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасовОбеспечение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.ДатаОтгрузки = ВыборкаТовары.ДатаОтгрузки;
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.НазначениеПолучателя = Назначение;
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыборкаТовары.СоздатьКлючАналитики Тогда
			РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(ВыборкаТовары);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуПолучателяЭкономия(МенеджерВременныхТаблиц, ПараметрыЗаполнения)
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого Строка Из ВидыЗапасовЭкономия Цикл
		Если Строка.ДатаОперации >= ДополнительныеСвойства.ПериодЗаполненияВидыЗапасовЭкономия Тогда
			МассивУдаляемыхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасовЭкономия.Удалить(Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Назначение", НазначениеМатериалы);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПериодЗаполнения", ДополнительныеСвойства.ПериодЗаполненияВидыЗапасовЭкономия);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры           КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ДатаОтгрузки                         КАК ДатаОперации,
	|	КОНЕЦПЕРИОДА(ТаблицаТоваров.ДатаОтгрузки, МЕСЯЦ)    КАК Период,
	|	ТаблицаТоваров.Серия                                КАК Серия,
	|	ВЫБОР КОГДА ТаблицаТоваров.Обособить ТОГДА &Назначение КОНЕЦ  КАК НазначениеПолучателя,
	|	ТаблицаТоваров.СкладПолучатель                      КАК Склад,
	|	ТаблицаТоваров.СтатьяРасходов                       КАК СтатьяРасходов,
	|	ТаблицаТоваров.АналитикаРасходов                    КАК АналитикаРасходов,
	|	ТаблицаТоваров.СписатьНаРасходы                     КАК СписатьНаРасходы,
	|	ТаблицаТоваров.АналитикаАктивовПассивов             КАК АналитикаАктивовПассивов,
	|	ТаблицаТоваров.ИдентификаторСтроки                  КАК ИдентификаторСтроки,
	|	СУММА(ТаблицаТоваров.Количество)                    КАК Количество
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|	ПО СпрСклады.Ссылка = ТаблицаТоваров.СкладПолучатель
	|
	|ГДЕ
	|	(СпрСклады.ЦеховаяКладовая
	|		И СпрСклады.Подразделение = &Подразделение
	|		ИЛИ ТаблицаТоваров.СписатьНаРасходы)
	|	И ТаблицаТоваров.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.ДатаОтгрузки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Обособить,
	|	ТаблицаТоваров.СкладПолучатель,
	|	ТаблицаТоваров.СтатьяРасходов,
	|	ТаблицаТоваров.АналитикаРасходов,
	|	ТаблицаТоваров.СписатьНаРасходы,
	|	ТаблицаТоваров.АналитикаАктивовПассивов,
	|	ТаблицаТоваров.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ДатаОтгрузки,
	|	Количество";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	ОтборТоваров = Новый Структура("АналитикаУчетаНоменклатуры, Период");
	
	ТаблицаВидыЗапасов = ПараметрыЗаполнения.ТаблицаВидыЗапасов;
	ТаблицаВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, Период", "Количество");
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		КоличествоТоваров = ВыборкаТовары.Количество;
		
		ЗаполнитьЗначенияСвойств(ОтборТоваров, ВыборкаТовары);
		
		Для Каждого СтрокаЗапасов Из ТаблицаВидыЗапасов.НайтиСтроки(ОтборТоваров) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасовЭкономия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
			НоваяСтрока.Количество = Количество;
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТаблицыДанныхДокумента()
	
	Возврат "
	|ВЫБРАТЬ
	|	&Дата                                                     КАК Дата,
	|	&Организация                                              КАК Организация,
	|	Неопределено                                              КАК Партнер,
	|	Неопределено                                              КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)    КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                  КАК Валюта,
	|	&ВыпускПодДеятельность                                    КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства) КАК ХозяйственнаяОперация,
	|	ЛОЖЬ                                                      КАК ЕстьСделкиВТабличнойЧасти,
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ                                                     КАК Подразделение,
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ                                                     КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)        КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)                  КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|	ПО
	|		СтруктураПредприятия.Ссылка = &Подразделение
	|
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	
	ЗапасыСервер.ВидыЗапасовНеОбособленныеИОбособленные(
		Организация,
		Справочники.СделкиСКлиентами.ПустаяСсылка(),
		Ответственный,
		Подразделение,
		МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаДанныхДокумента.Организация КАК Организация
	|ИЗ
	|	ТаблицаТоваровПоПериодам КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	)
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыОрганизаций");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналитикаУчетаНоменклатуры", "АналитикаУчетаНоменклатуры");
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
		
		ШаблонСообщения = НСтр("ru = 'Потребление превышает остаток товара организации %1'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			Организация);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект);
		
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.Серия),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'с указанными номерами ГТД'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСвязанныхДанных

#Область РегистрацияОбработчиков

Процедура ЗарегистрироватьОбновлениеСвязанныхДанных()
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьОбновлениеСвязанныхДанных();
	
	ДанныеДоИзменения = ДанныеДоИзменения();
	
	ЗарегистрироватьОбновлениеСостоянияЭтапов(ДанныеДоИзменения);
	ЗарегистрироватьОбновлениеСостоянияЗаказа(ДанныеДоИзменения);
	
	ЗарегистрироватьРасчетОчередиПроизводственныхОпераций(ДанныеДоИзменения);
	
	ЗарегистрироватьОбновлениеПараметровРазмещенияВГрафике(ДанныеДоИзменения);
	ЗарегистрироватьПроверкуГрафикаСмежныхЭтапов(ДанныеДоИзменения);
	ЗарегистрироватьОбновлениеПараметровНормативногоГрафика(ДанныеДоИзменения);
	
	ЗарегистрироватьОчисткуГрафикаПроизводства();
	ЗарегистрироватьОчисткуЗаданийКРасчетуГрафикаПроизводства();
	ЗарегистрироватьОчисткуПризнакаНаКритическомПути();
	ЗарегистрироватьОчисткуЗаданийКЗаполнениюЭтаповПроизводства();
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеСостоянияЭтапов(ДанныеДоИзменения)
	
	ЭтапыКОбновлению = Новый Массив;
	ИзменилсяСоставПоследователей = Ложь;
	
	ПараметрыОтбора          = Новый Структура("Этап");
	ПоследователиДоИзменения = ДанныеДоИзменения.Последователи;
	
	ПерваяТаблица = ПоследователиДоИзменения;
	ВтораяТаблица = Последователи;
	
	Для Сч = 1 По 2 Цикл
		
		Для Каждого Строка Из ПерваяТаблица Цикл
			
			Если ИзменилсяСоставПоследователей = Ложь Тогда
				ПараметрыОтбора.Этап = Строка.Этап;
				Если ВтораяТаблица.НайтиСтроки(ПараметрыОтбора).ВГраница() = -1 Тогда
					ИзменилсяСоставПоследователей = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтапыКОбновлению.Найти(Строка.Этап) = Неопределено Тогда
				ЭтапыКОбновлению.Добавить(Строка.Этап);
			КонецЕсли;
			
		КонецЦикла;
		
		ПерваяТаблица = Последователи;
		ВтораяТаблица = ПоследователиДоИзменения;
		
	КонецЦикла;
	
	УдалитьНепроведенныеДокументыИзМассива(ЭтапыКОбновлению);
	
	ЕстьИзменения = ИзменилсяСоставПоследователей
					ИЛИ ИзменилсяСтатусИлиПризнакПроведенности(ДанныеДоИзменения)
					ИЛИ ИзменилосьОбеспечениеМатериалами(ДанныеДоИзменения)
					ИЛИ ИзменилисьТрудозатратыКОформлению(ДанныеДоИзменения);
	
	Если ЕстьИзменения Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных(
			"ОбновитьСостоянияЭтапов", ЭтапыКОбновлению);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеСостоянияЗаказа(ДанныеДоИзменения)
	
	Если ОтключеноОбновлениеСостоянияЗаказа() Тогда
		Возврат;
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОбновитьСостоянияЭтапов")
		ИЛИ ИзменилосьСостояниеВыпускаПродукции(ДанныеДоИзменения) 
		ИЛИ ДанныеИзКэшаОбъекта("ИзменилосьРучноеРазмещениеЭтапаВГрафике") Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных(
			"ОбновитьСостояниеЗаказаВОчереди");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьРасчетОчередиПроизводственныхОпераций(ДанныеДоИзменения)
	
	ДанныеПодразделения = ДанныеИзКэшаОбъекта("Подразделение");
	Если Не ДанныеПодразделения.ИспользоватьПооперационноеУправление Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСтатусы = Документы.ЭтапПроизводства2_2.СтатусыДоступноВыполнениеОпераций();
	
	Если (ПроверяемыеСтатусы.Найти(ЭтотОбъект.Статус) <> Неопределено 
			ИЛИ ПроверяемыеСтатусы.Найти(ДанныеДоИзменения.Реквизиты.Статус) <> Неопределено)
		И (ИзменилсяСтатусИлиПризнакПроведенности(ДанныеДоИзменения)
			ИЛИ ЭтотОбъект.МаршрутнаяКарта <> ДанныеДоИзменения.Реквизиты.МаршрутнаяКарта
			ИЛИ ЭтотОбъект.КоэффициентМаршрутнойКарты <> ДанныеДоИзменения.Реквизиты.КоэффициентМаршрутнойКарты) Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных(
			"РассчитатьОчередьПроизводственныхОпераций");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеПараметровРазмещенияВГрафике(ДанныеДоИзменения)
	
	Если ДополнительныеСвойства.ЭтоНовый
		ИЛИ ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		ИЛИ ОтключенКонтрольПараметровРазмещенияВГрафике() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыИзменились = Ложь;
	ПроверитьИзменилисьПараметрыРучногоРазмещенияВГрафике(ПараметрыИзменились);
	
	Если НЕ ПараметрыИзменились Тогда
		ПроверитьИзменилисьПараметрыРазмещенияВГрафикеРеквизиты(ДанныеДоИзменения, ПараметрыИзменились);
	КонецЕсли;
	
	Если НЕ ПараметрыИзменились Тогда
		ПроверитьИзменилисьПараметрыРазмещенияВГрафикеТаблицы(ДанныеДоИзменения, ПараметрыИзменились);
	КонецЕсли;
	
	Если ПараметрыИзменились Тогда
		
		Если РучноеРазмещениеВГрафике Тогда
			
			ДобавитьОбработчикОбновленияСвязанныхДанных("ЗаписатьРучноеРазмещениеЭтапаВГрафике");
			ДобавитьОбработчикОбновленияСвязанныхДанных("ПроверитьГрафикСмежныхЭтапов");
			
		КонецЕсли;
		
		ДобавитьОбработчикОбновленияСвязанныхДанных("ИзменилисьПараметрыРазмещенияВГрафике");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеПараметровНормативногоГрафика(ДанныеДоИзменения)

	Если ДополнительныеСвойства.ЭтоНовый 
		ИЛИ НЕ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
		ИЛИ ДополнительныеСвойства.Свойство(КлючНеЗаполнятьНормативныйГрафик()) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыИзменились = Ложь;
	
	ПроверитьИзменилисьПараметрыНормативногоГрафикаРеквизиты(ДанныеДоИзменения, ПараметрыИзменились);
	
	Если НЕ ПараметрыИзменились Тогда
		ПроверитьИзменилисьПараметрыНормативногоГрафикаТаблицы(ДанныеДоИзменения, ПараметрыИзменились);
	КонецЕсли;
	
	Если ПараметрыИзменились Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных(
			"ИзменилисьПараметрыНормативногоГрафика")
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьОчисткуГрафикаПроизводства()
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ГрафикПроизводства = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
		ГрафикРассчитан = ГрафикПроизводства.Количество() > 0
			И ГрафикПроизводства[0].Рассчитан;
		
		Если ГрафикРассчитан Тогда
			
			ДобавитьОбработчикОбновленияСвязанныхДанных("ОчиститьГрафикПроизводства")
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОчисткуЗаданийКРасчетуГрафикаПроизводства()
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		
		ЕстьЗаданияКРасчетуГрафика = НЕ РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ГрафикЭтапаАктуален(Ссылка);
		
		ОтменаПроведения = ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		
		СтатусыПланирование = Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован();
		НеМожетБытьЗапланирован = (СтатусыПланирование.Найти(Статус) = Неопределено);
		
		РедактированиеРучногоРазмещения = ОтредактированыПараметрыРучногоРазмещенияВГрафике();
		
		Если ЕстьЗаданияКРасчетуГрафика
			И (ОтменаПроведения ИЛИ НеМожетБытьЗапланирован ИЛИ РедактированиеРучногоРазмещения) Тогда
			
			ДобавитьОбработчикОбновленияСвязанныхДанных(
				"ОчиститьЗаданияКРасчетуГрафикаПроизводства");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОчисткуЗаданийКЗаполнениюЭтаповПроизводства()
	
	Перем НомерЗадания;
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодразделения = ДанныеИзКэшаОбъекта("Подразделение");
	
	Если ДополнительныеСвойства.Свойство("ЗаполненПоОперациям", НомерЗадания) 
		Или ДанныеПодразделения.ИспользоватьПооперационноеУправление Тогда
		
		ОтменаПроведения = ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		НачатоВыполнение = (ЭтотОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
		
		Если НомерЗадания <> Неопределено 
			ИЛИ ОтменаПроведения ИЛИ Не НачатоВыполнение Тогда
			
			ДобавитьОбработчикОбновленияСвязанныхДанных(
				"ОчиститьЗаданияКЗаполнениюЭтаповПроизводства", НомерЗадания);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьПроверкуГрафикаСмежныхЭтапов(ДанныеДоИзменения)
	
	Если ДополнительныеСвойства.ЭтоНовый
		ИЛИ НЕ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
		ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		ИЛИ ОтключенКонтрольПараметровРазмещенияВГрафике()
		ИЛИ НеобходимоВыполнитьОбработчик("ПроверитьГрафикСмежныхЭтапов") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ГрафикИзменился = Ложь;
	ПроверитьИзменилисьПараметрыРучногоРазмещенияВГрафике(ГрафикИзменился);
	
	Если НЕ ГрафикИзменился Тогда
		ПроверитьИзменилисьГраницыГрафика(ДанныеДоИзменения, ГрафикИзменился);
	КонецЕсли;
	
	Если ГрафикИзменился Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных("ПроверитьГрафикСмежныхЭтапов");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОчисткуПризнакаНаКритическомПути()
	
	Если ДополнительныеСвойства.ЭтоНовый 
		ИЛИ ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение
		ИЛИ Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		ИЛИ НеобходимоВыполнитьОбработчик("ОчиститьГрафикПроизводства") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеГрафика = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
	
	Если ЗначениеЗаполнено(ДанныеГрафика) И ДанныеГрафика[0].НаКритическомПути Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных("ОчиститьПризнакЭтапНаКритическомПути");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИзменений

Функция ДанныеДоИзменения()
	
	СоставРеквизитов = 
		"Статус, 
		|Проведен, 
		|МаршрутнаяКарта,
		|КоэффициентМаршрутнойКарты,
		|ДлительностьЭтапа, 
		|ЕдиницаИзмеренияДлительностиЭтапа, 
		|РучноеРазмещениеВГрафике,
		|ПланироватьНеРанее, 
		|ПланироватьРаботуВидовРабочихЦентров, 
		|ДатаОтгрузки, 
		|ПредварительныйБуфер, 
		|ЕдиницаИзмеренияПредварительногоБуфера, 
		|ЗавершающийБуфер, 
		|ЕдиницаИзмеренияЗавершающегоБуфера, 
		|Непрерывный,
		|ФактическоеНачалоЭтапа,
		|ФактическоеОкончаниеЭтапа";
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ " + СоставРеквизитов + "
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Получатель      КАК Получатель,
		|	Таблица.Назначение      КАК Назначение,
		|	Таблица.ЭтапПотребитель КАК ЭтапПотребитель,
		|	Таблица.Произведено     КАК Произведено,
		|	Таблица.Количество      КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Получатель      КАК Получатель,
		|	Таблица.Назначение      КАК Назначение,
		|	Таблица.ЭтапПотребитель КАК ЭтапПотребитель,
		|	Таблица.Произведено     КАК Произведено,
		|	Таблица.Количество      КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.ВариантОбеспечения КАК ВариантОбеспечения,
		|	Таблица.Производится       КАК Производится,
		|	Таблица.Склад              КАК Склад,
		|	Таблица.Количество         КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Этап КАК Этап
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Таблица.ВремяРаботы       КАК ВремяРаботы,
		|	Таблица.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Таблица.Использовать      КАК Использовать,
		|	Таблица.ВариантНаладки    КАК ВариантНаладки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Таблица.ВремяРаботы       КАК ВремяРаботы,
		|	Таблица.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Таблица.Использовать      КАК Использовать,
		|	Таблица.ВариантНаладки    КАК ВариантНаладки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.АльтернативныеВидыРабочихЦентров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Таблица.ДатаИнтервала     КАК ДатаИнтервала,
		|	Таблица.Количество        КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЗанятостьВидовРабочихЦентров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабот КАК ВидРабот,
		|	Таблица.Бригада КАК Бригада,
		|	Таблица.Количество КАК Количество,
		|	Таблица.ДатаВыполнения КАК ДатаВыполнения
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки");
		
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		
		Реквизиты = Новый Структура(СоставРеквизитов);
		ЗаполнитьЗначенияСвойств(Реквизиты, ЭтотОбъект);
		
	Иначе
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		
		Реквизиты = Новый Структура(СоставРеквизитов);
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		
	КонецЕсли;
	
	ДанныеДоИзменения = Новый Структура;
	
	ДанныеДоИзменения.Вставить("Реквизиты", Реквизиты);
	ДанныеДоИзменения.Вставить("ВыходныеИзделия", РезультатЗапроса[1].Выгрузить());
	ДанныеДоИзменения.Вставить("ПобочныеИзделия", РезультатЗапроса[2].Выгрузить());
	ДанныеДоИзменения.Вставить("ОбеспечениеМатериаламиИРаботами", РезультатЗапроса[3].Выгрузить());
	ДанныеДоИзменения.Вставить("Последователи", РезультатЗапроса[4].Выгрузить());
	ДанныеДоИзменения.Вставить("ВидыРабочихЦентров", РезультатЗапроса[5].Выгрузить());
	ДанныеДоИзменения.Вставить("АльтернативныеВидыРабочихЦентров", РезультатЗапроса[6].Выгрузить());
	ДанныеДоИзменения.Вставить("ЗанятостьВидовРабочихЦентров", РезультатЗапроса[7].Выгрузить());
	ДанныеДоИзменения.Вставить("Трудозатраты", РезультатЗапроса[8].Выгрузить());
	
	Возврат ДанныеДоИзменения;
	
КонецФункции

Функция ИзменилсяСтатусИлиПризнакПроведенности(ДанныеДоИзменения)
	
	Возврат ЭтотОбъект.Статус <> ДанныеДоИзменения.Реквизиты.Статус
		ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
			И НЕ ДанныеДоИзменения.Реквизиты.Проведен
		ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения 
			И ДанныеДоИзменения.Реквизиты.Проведен;
	
КонецФункции

Функция ИзменилосьОбеспечениеМатериалами(ДанныеДоИзменения)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номенклатура");
	Реквизиты.Добавить("Характеристика");
	Реквизиты.Добавить("ВариантОбеспечения");
	Реквизиты.Добавить("Производится");
	Реквизиты.Добавить("Склад");
	Реквизиты.Добавить("Количество");
	
	Результат = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ОбеспечениеМатериаламиИРаботами", Реквизиты);
	Возврат Результат;
	
КонецФункции

Функция ИзменилисьТрудозатратыКОформлению(ДанныеДоИзменения)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("ВидРабот");
	Реквизиты.Добавить("Бригада");
	Реквизиты.Добавить("Количество");
	Реквизиты.Добавить("ДатаВыполнения");
	
	ИзмененаТабличнаяЧасть = ИзмененаТабличнаяЧастьДокумента(
		ДанныеДоИзменения, "Трудозатраты", Реквизиты);
	
	Результат = ИзмененаТабличнаяЧасть
		ИЛИ ИзменилсяСтатусИлиПризнакПроведенности(ДанныеДоИзменения);
		
	Возврат Результат;
	
КонецФункции

Функция ИзменилосьСостояниеВыпускаПродукции(ДанныеДоИзменения)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номенклатура");
	Реквизиты.Добавить("Характеристика");
	Реквизиты.Добавить("Получатель");
	Реквизиты.Добавить("Назначение");
	Реквизиты.Добавить("ЭтапПотребитель");
	Реквизиты.Добавить("Произведено");
	Реквизиты.Добавить("Количество");
	
	Возврат ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ПобочныеИзделия", Реквизиты)
			ИЛИ ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВыходныеИзделия", Реквизиты);
	
КонецФункции

Функция ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, ИмяТаблицы, Реквизиты = Неопределено)
	
	Возврат УправлениеПроизводством.ИзмененаТабличнаяЧастьДокумента(
				ЭтотОбъект,
				ДанныеДоИзменения,
				ИмяТаблицы,
				Реквизиты);
	
КонецФункции

Процедура ПроверитьИзменилисьПараметрыРучногоРазмещенияВГрафике(ПараметрыИзменились)
	
	ЕстьИзменения = ДанныеИзКэшаОбъекта("ИзменилосьРучноеРазмещениеЭтапаВГрафике");
	
	Если ЕстьИзменения Тогда
		
		ПараметрыИзменились = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменилисьПараметрыРазмещенияВГрафикеРеквизиты(ДанныеДоИзменения, ПараметрыИзменились)
	
	Реквизиты = ПараметрыРазмещенияВГрафикеРеквизиты();
	
	Для каждого Реквизит Из Реквизиты Цикл
		Если ДанныеДоИзменения.Реквизиты[Реквизит] <> ЭтотОбъект[Реквизит] Тогда
			
			Если Реквизит = "ДатаОтгрузки" Тогда
				
				ДанныеГрафика = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
				
				Если ЗначениеЗаполнено(ДанныеГрафика)
					И ДанныеГрафика[0].НачалоЭтапа >= ДатаОтгрузки Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли Реквизит = "ПланироватьНеРанее"
				И ПланироватьНеРанее <> '00010101' Тогда
				
				ДанныеГрафика = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
				
				Если ЗначениеЗаполнено(ДанныеГрафика)
					И ДанныеГрафика[0].НачалоЭтапа >= ПланироватьНеРанее Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыИзменились = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПараметрыИзменились Тогда
		
		ПараметрыИзменились = НЕ ДанныеДоИзменения.Реквизиты.Проведен
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменилисьПараметрыРазмещенияВГрафикеТаблицы(ДанныеДоИзменения, ПараметрыИзменились)
	
	ТаблицаИзменилась = Ложь;
	
	Если РучноеРазмещениеВГрафике Тогда
		
		ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ЗанятостьВидовРабочихЦентров");
		
	ИначеЕсли ПланироватьРаботуВидовРабочихЦентров Тогда
		
		ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВидыРабочихЦентров");
		
		Если НЕ ТаблицаИзменилась Тогда
			
			ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "АльтернативныеВидыРабочихЦентров")
			
		КонецЕсли;
		
		Если НЕ ТаблицаИзменилась Тогда
			
			ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "Последователи")
			
		КонецЕсли;
		
		Если НЕ ТаблицаИзменилась Тогда
			
			Реквизиты = Новый Массив;
			Реквизиты.Добавить("Назначение");
	
			ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВыходныеИзделия", Реквизиты)
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаИзменилась Тогда
		
		ПараметрыИзменились = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменилисьПараметрыНормативногоГрафикаРеквизиты(ДанныеДоИзменения, ПараметрыИзменились)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Проведен");
	Реквизиты.Добавить("ДлительностьЭтапа");
	Реквизиты.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
	
	Для каждого Реквизит Из Реквизиты Цикл
		Если НЕ ДанныеДоИзменения.Реквизиты[Реквизит] = ЭтотОбъект[Реквизит] Тогда
			
			ПараметрыИзменились = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИзменилисьПараметрыНормативногоГрафикаТаблицы(ДанныеДоИзменения, ПараметрыИзменились)
	
	ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "Последователи");
	
	Если НЕ ТаблицаИзменилась Тогда
		
		Реквизиты = Новый Массив;
		Реквизиты.Добавить("Назначение");
		Реквизиты.Добавить("ЭтапПотребитель");
		
		ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВыходныеИзделия", Реквизиты)
		
	КонецЕсли;
	
	Если ТаблицаИзменилась Тогда
		
		ПараметрыИзменились = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыРазмещенияВГрафикеРеквизиты()
	
	Результат = Новый Массив;
	
	Результат.Добавить("РучноеРазмещениеВГрафике");
	Результат.Добавить("ПланироватьНеРанее");
	
	Если НЕ РучноеРазмещениеВГрафике Тогда
		
		Результат.Добавить("ПланироватьРаботуВидовРабочихЦентров");
		Результат.Добавить("ДатаОтгрузки");
		
		Если ПланироватьРаботуВидовРабочихЦентров Тогда
			
			Результат.Добавить("ПредварительныйБуфер");
			Результат.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
			Результат.Добавить("ЗавершающийБуфер");
			Результат.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
			Результат.Добавить("Непрерывный");
			
		Иначе
			
			Результат.Добавить("ДлительностьЭтапа");
			Результат.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДанных

Процедура ОбновитьСвязанныеДанные(Отказ, УдалениеПроведения = Ложь)
	
	Если Отказ ИЛИ ОбновлениеСвязанныхДанныхНеТребуется() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Неопределено;
	
	Если НеобходимоВыполнитьОбработчик("ИзменилисьПараметрыРазмещенияВГрафике") Тогда
		
		ПриИзмененииПараметровРазмещенияВГрафике();
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ПроверитьГрафикСмежныхЭтапов") Тогда
		
		ПроверитьГрафикСмежныхЭтапов();
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОчиститьГрафикПроизводства") Тогда
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ОчиститьГрафикЭтапов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОчиститьЗаданияКРасчетуГрафикаПроизводства") Тогда
		
		РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.УдалитьЗадания(Распоряжение, Ссылка);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ИзменилисьПараметрыНормативногоГрафика") Тогда
		
		РегистрыСведений.НормативныйГрафикЭтаповПроизводства.РассчитатьГрафикВФоне(Распоряжение);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОчиститьПризнакЭтапНаКритическомПути") Тогда
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ОчиститьПризнакЭтапНаКритическомПути(Ссылка);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОчиститьЗаданияКЗаполнениюЭтаповПроизводства", ПараметрыОбработки) Тогда
		
		РегистрыСведений.ЗаданияКЗаполнениюЭтаповПроизводства.УдалитьЗадания(Ссылка, ПараметрыОбработки);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("РассчитатьОчередьПроизводственныхОпераций") Тогда
		
		РегистрыСведений.ОчередьПроизводственныхОпераций.РассчитатьОчередь(
			ЭтотОбъект.Ссылка, УдалениеПроведения, Отказ);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОбновитьСостоянияЭтапов", ПараметрыОбработки) Тогда
		
		ЭтапыКОбновлению = ПараметрыОбработки;
		ЭтапыКОчистке    = Новый Массив;
		
		Если УдалениеПроведения Тогда
			ЭтапыКОчистке.Добавить(ЭтотОбъект.Ссылка);
		Иначе
			ЭтапыКОбновлению.Добавить(ЭтотОбъект.Ссылка);
		КонецЕсли;
		
		РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(
			ЭтапыКОбновлению, ЭтапыКОчистке);
		
	КонецЕсли;

	Если НеобходимоВыполнитьОбработчик("ОбновитьСостояниеЗаказаВОчереди") Тогда
		
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(
			ЭтотОбъект.Распоряжение);
		
	КонецЕсли;
	
	ОчиститьСписокОбработчиковОбновленияСвязанныхДанных();
	
КонецПроцедуры

Процедура ПроверитьИЗаписатьРучноеРазмещениеВГрафике()
	
	Если НеобходимоВыполнитьОбработчик("ЗаписатьРучноеРазмещениеЭтапаВГрафике") Тогда
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ЗаписатьРучноеРазмещениеЭтапаВГрафике(
			Распоряжение, ЭтотОбъект.Ссылка, ДополнительныеСвойства.ГрафикПроизводства);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗаданиеКРасчетуГрафикаПроизводства()
	
	СтатусыЭтапа = Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован();
	
	Если НЕ СтатусыЭтапа.Найти(Статус) = Неопределено Тогда
		
		РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииПараметровРазмещенияВГрафике()
	
	Если РучноеРазмещениеВГрафике Тогда
		
		Если ЗанятостьВидовРабочихЦентров.Количество() > 0 Тогда
			
			КолонкиИнтервалов = "ВидРабочегоЦентра, ДатаИнтервала";
			Интервалы = ЗанятостьВидовРабочихЦентров.Выгрузить(, КолонкиИнтервалов);
			Интервалы.Свернуть(КолонкиИнтервалов);
			РегистрыНакопления.ДоступностьВидовРабочихЦентров.ПроверитьЗагрузкаНеПревышаетДоступностьГрафика(Интервалы);
			
		КонецЕсли;
		
	Иначе
		
		ДобавитьЗаданиеКРасчетуГрафикаПроизводства();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ИнициализироватьОбновлениеСвязанныхДанных()
	
	ДополнительныеСвойства.Вставить("ОбработчикиОбновленияСвязанныхДанных", Новый Структура);
	
КонецПроцедуры

Функция ОбновлениеСвязанныхДанныхНеТребуется()
	
	Перем Обработчики;
	
	Если ДополнительныеСвойства.Свойство("ОбработчикиОбновленияСвязанныхДанных", Обработчики) Тогда
		Возврат (Обработчики.Количество() = 0);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьСписокОбработчиковОбновленияСвязанныхДанных()
	
	Если ДополнительныеСвойства.Свойство("ОбработчикиОбновленияСвязанныхДанных") Тогда
		ДополнительныеСвойства.Удалить("ОбработчикиОбновленияСвязанныхДанных");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбработчикОбновленияСвязанныхДанных(ИмяОбработчика, ПараметрыОбработки = Неопределено)
	
	ОбработчикиОбновленияСвязанныхДанных = ДополнительныеСвойства.ОбработчикиОбновленияСвязанныхДанных;
	ОбработчикиОбновленияСвязанныхДанных.Вставить(ИмяОбработчика, ПараметрыОбработки);
	
КонецПроцедуры

Функция НеобходимоВыполнитьОбработчик(ИмяОбработчика, ПараметрыОбработки = Неопределено)
	
	Перем Обработчики;
	
	Если ДополнительныеСвойства.Свойство("ОбработчикиОбновленияСвязанныхДанных", Обработчики) Тогда
		Возврат Обработчики.Свойство(ИмяОбработчика, ПараметрыОбработки);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КэшированныеЗначения

Функция СтруктураКэшированныеЗначения()
	
	Если Не ДополнительныеСвойства.Свойство("КэшированныеЗначения") Тогда
		ДополнительныеСвойства.Вставить("КэшированныеЗначения", Новый Структура);
	КонецЕсли;
	
	Возврат ДополнительныеСвойства.КэшированныеЗначения;

КонецФункции

Функция ДанныеИзКэшаОбъекта(Ключ)
	
	Перем Результат;
	
	КэшированныеЗначения = СтруктураКэшированныеЗначения();
	
	Если Не КэшированныеЗначения.Свойство(Ключ, Результат) Тогда
		
		РеквизитыОбъекта = "Распоряжение,Подразделение,НазначениеПродукция";
		
		Если СтрНайти(РеквизитыОбъекта, Ключ) = 0 Тогда
			
			Если Ключ = "ГрафикПроизводства" Тогда
				
				Результат = РегистрыСведений.ГрафикЭтаповПроизводства2_2.ГрафикПроизводства(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭтотОбъект.Ссылка));
				
			ИначеЕсли Ключ = "ИзменилосьРучноеРазмещениеЭтапаВГрафике" Тогда
				
				Результат = Ложь;
				
				Если ОтредактированыПараметрыРучногоРазмещенияВГрафике() Тогда
					
					Если РегистрыСведений.ГрафикЭтаповПроизводства2_2.ИзменилосьРазмещениеЭтапаВГрафике(
						ЭтотОбъект.Ссылка, ДополнительныеСвойства.ГрафикПроизводства) Тогда
						
						Результат = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Результат = Документы.ЭтапПроизводства2_2.ДанныеИзКэша(Ключ);
				
			КонецЕсли;
			
		Иначе
			
			Результат = Документы.ЭтапПроизводства2_2.ДанныеИзКэша(ЭтотОбъект[Ключ]);
			
		КонецЕсли;
		
		КэшированныеЗначения.Вставить(Ключ, Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Константы

Функция ТипСвязиПоследователь()
	
	Возврат 0;
	
КонецФункции

Функция ТипСвязиПотребитель()
	
	Возврат 1;
	
КонецФункции

Функция КлючПакетныйРежимФормирования()
	
	Возврат УправлениеПроизводством.КлючПакетныйРежимФормированияЭтапов();
	
КонецФункции

Функция КлючЗаполненоАвтоматически()
	
	Возврат "ЗаполненоАвтоматически";
	
КонецФункции

Функция КлючОтключитьКонтрольПараметровРазмещенияВГрафике()
	
	Возврат "ОтключитьКонтрольПараметровРазмещенияВГрафике";
	
КонецФункции

Функция КлючНеЗаполнятьНормативныйГрафик()
	
	Возврат "НеЗаполнятьНормативныйГрафик"
	
КонецФункции

Функция КлючОтключитьФормированиеНазначения()
	
	Возврат "ОтключитьФормированиеНазначения";
	
КонецФункции

Функция КлючОтключитьОбновлениеСостоянияЗаказа()
	
	Возврат "ОтключитьОбновлениеСостоянияЗаказа";
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьРеквизитыПоУмолчанию(ДанныеЗаполнения = Неопределено)
	
	Дата          = ТекущаяДатаСеанса();
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		
		ДанныеРаспоряжения = ДанныеИзКэшаОбъекта("Распоряжение");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеРаспоряжения,, "Номер,Дата");
		
		ВыпускПодДеятельность = ДанныеРаспоряжения.ЗаказПодДеятельность;
		
	КонецЕсли;
	
	Если Не ОтключеноФормированиеНазначения() Тогда
		
		Назначение = Неопределено;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НазначениеПродукция) Тогда
		
		ДанныеНазначения = ДанныеИзКэшаОбъекта("НазначениеПродукция");
		НаправлениеДеятельности = ДанныеНазначения.НаправлениеДеятельности;
		
	КонецЕсли;
	
	ЗначенияПоУмолчанию = ДанныеИзКэшаОбъекта("ЗначенияПоУмолчанию");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияПоУмолчанию);
	
КонецПроцедуры

Процедура УдалитьНепроведенныеДокументыИзМассива(МассивСсылок)
	
	ЗначенияРеквизитовОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, "Проведен");
	
	Для Сч = -МассивСсылок.Количество() + 1 По 0 Цикл
		
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов[МассивСсылок[-Сч]];
		
		// Последователи еще не записаны (при формировании) или не проведены
		Если ЗначенияРеквизитов = Неопределено  
			ИЛИ ЗначенияРеквизитов.Проведен <> Истина Тогда
			
			МассивСсылок.Удалить(-Сч);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля() Экспорт

	Массив = Новый Массив;

	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		
		Массив.Добавить(Движения.ЗаказыМатериаловВПроизводство);
		Массив.Добавить(Движения.РаспоряженияНаПередачуИзПроизводства);
		Массив.Добавить(Движения.ТрудозатратыКОформлению);
		Если ПроизводствоНаСтороне Тогда
			Массив.Добавить(Движения.ЗаказыПоставщикам);
			Массив.Добавить(Движения.ЗаказыКлиентов);
		КонецЕсли; 
		
	КонецЕсли;
	
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	// Контроль выполняется при перепроведении, отмене проведения или если используются серии, чтобы проверить возможность резервирования серий
	Если Не ДополнительныеСвойства.ЭтоНовый
		Или ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура()) Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ГрафикОтгрузкиТоваров);
		
	КонецЕсли;
	
	Если Не ВыполняетсяПакетноеФормирование()
		И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЭтапПроизводства2_2);
		Если ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры Тогда
			Массив.Добавить(Движения.ТоварыНаСкладах);
		КонецЕсли;
		
	КонецЕсли;
	
	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция ЭтоВыпускающийЭтап(ДанныеЭтапа)
	
	Возврат УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(ДанныеЭтапа);

КонецФункции

Процедура ЗаполнитьПоДаннымПользователя(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.ЗначенияЗаполнения);
	
	ЭтотОбъект.УстановитьСсылкуНового(ДанныеЗаполнения.ЗначенияЗаполнения.СсылкаНового);
	
	Если ДанныеЗаполнения.Свойство("ПоследующиеЭтапы")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ПоследующиеЭтапы) Тогда
		
		Для каждого Последователь ИЗ ДанныеЗаполнения.ПоследующиеЭтапы Цикл
			
			НоваяСтрока = Последователи.Добавить();
			НоваяСтрока.Этап     = Последователь;
			НоваяСтрока.ТипСвязи = ТипСвязиПоследователь();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВыходныеИзделия")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ВыходныеИзделия) Тогда
		
		ВыходныеИзделия.Загрузить(ДанныеЗаполнения.ВыходныеИзделия);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблонНазначения()
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	ШаблонНазначения.НаправлениеДеятельности = НаправлениеДеятельности;
	ШаблонНазначения.Партнер                 = Партнер;
	ШаблонНазначения.Договор                 = Договор;
	ШаблонНазначения.Заказ                   = Ссылка;
	
	Возврат ШаблонНазначения;
	
КонецФункции

// При переработке на стороне у всех этапов, включенных в один заказ переработчику, должен быть сквозной код строки
//
Процедура ЗаполнитьНовыйКодСтрокиПриПереработкеНаСтороне(Отказ)

	Если ВыходныеИзделия.Найти(0, "КодСтроки") = Неопределено
		И ПобочныеИзделия.Найти(0, "КодСтроки") = Неопределено 
		И ОбеспечениеМатериаламиИРаботами.Найти(0, "КодСтроки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("ЗаказПереработчику", ЗаказПереработчику);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецПопытки; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЭтапПроизводства2_2.МаксимальныйКодСтрокиИзделия), 0)    КАК МаксимальныйКодСтрокиИзделия,
	|	ЕСТЬNULL(МАКСИМУМ(ЭтапПроизводства2_2.МаксимальныйКодСтрокиОбеспечение),0) КАК МаксимальныйКодСтрокиОбеспечение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.ЗаказПереработчику = &ЗаказПереработчику";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаказПереработчику", ЗаказПереработчику);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ВыборкаКоды = Результат.Выбрать();
	ВыборкаКоды.Следующий();
	МаксимальныйКодСтрокиИзделия     = ВыборкаКоды.МаксимальныйКодСтрокиИзделия;
	МаксимальныйКодСтрокиОбеспечение = ВыборкаКоды.МаксимальныйКодСтрокиОбеспечение;
	
	Документы.ЗаказПереработчику.ЗаполнитьКодСтрокиВТабличнойЧасти(
				ВыходныеИзделия, Ложь, МаксимальныйКодСтрокиИзделия);
				
	Документы.ЗаказПереработчику.ЗаполнитьКодСтрокиВТабличнойЧасти(
				ПобочныеИзделия, Ложь, МаксимальныйКодСтрокиИзделия);
	
	Документы.ЗаказПереработчику.ЗаполнитьКодСтрокиВТабличнойЧасти(
				ОбеспечениеМатериаламиИРаботами, Ложь, МаксимальныйКодСтрокиОбеспечение);
						
КонецПроцедуры

Процедура ОтразитьДоступностьВидовРабочихЦентров(Отказ)
	
	// Движения формируются при расчете графика производства.
	Если НЕ РучноеРазмещениеВГрафике Тогда
		Движения.ДоступностьВидовРабочихЦентров.Записывать = Ложь;
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.ДоступностьВидовРабочихЦентров.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

Процедура ПроверитьИзменилисьГраницыГрафика(ДанныеДоИзменения, ГрафикИзменился)
	
	Если НЕ ДанныеДоИзменения.Реквизиты.ФактическоеНачалоЭтапа = ЭтотОбъект.ФактическоеНачалоЭтапа
		ИЛИ НЕ ДанныеДоИзменения.Реквизиты.ФактическоеОкончаниеЭтапа = ЭтотОбъект.ФактическоеОкончаниеЭтапа Тогда
		
		ГрафикИзменился = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтредактированыПараметрыРучногоРазмещенияВГрафике()
	
	Возврат РучноеРазмещениеВГрафике И ДополнительныеСвойства.Свойство("ГрафикПроизводства");
	
КонецФункции

Процедура ПроверитьГрафикСмежныхЭтапов()
	
	РегистрыСведений.ГрафикЭтаповПроизводства2_2.ПроверитьСоблюдениеУсловийПредшествования(Ссылка);
	
КонецПроцедуры

Функция МаксимальнаяДатаПроизводства()
	
	Если ПроизводствоОднойДатой Тогда
		ДатаПроизводстваИзделий = ДатаПроизводства;
	Иначе
		ДатаПроизводстваИзделий = МаксимальнаяДатаПроизводстваВТЧ();
	КонецЕсли;
	
	Возврат ДатаПроизводстваИзделий;
	
КонецФункции

Функция МаксимальнаяДатаПроизводстваВТЧ()
	
	Возврат Макс(
		Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(ВыходныеИзделия, "ДатаПроизводства"),
		Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(ПобочныеИзделия, "ДатаПроизводства"));
	
КонецФункции

Функция НачатоВыполнениеЭтапа()
	
	Возврат Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
КонецФункции

Функция МинимальнаяДатаДокумента()
	
	Результат = Дата('00010101');
	
	Если РасходОднойДатой Тогда
		Если ЗначениеЗаполнено(ДатаРасхода) И ЗначениеЗаполнено(Результат) Тогда
			Результат = Мин(Результат,ДатаРасхода);
		КонецЕсли;
	Иначе
		Для Каждого Строка Из РасходМатериаловИРабот Цикл
			Если ЗначениеЗаполнено(Строка.ДатаРасхода) И ЗначениеЗаполнено(Результат) Тогда
				Результат = Мин(Результат,Строка.ДатаРасхода);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из ЭкономияМатериалов Цикл
			Если ЗначениеЗаполнено(Строка.ДатаОперации) И ЗначениеЗаполнено(Результат) Тогда
				Результат = Мин(Результат,Строка.ДатаОперации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПроизводствоОднойДатой Тогда
		Если ЗначениеЗаполнено(ДатаПроизводства) И ЗначениеЗаполнено(Результат) Тогда
			Результат = Мин(Результат,ДатаПроизводства);
		КонецЕсли;
	Иначе
		Для Каждого Строка Из ВыходныеИзделия Цикл
			Если ЗначениеЗаполнено(Строка.ДатаПроизводства) И ЗначениеЗаполнено(Результат) Тогда
				Результат = Мин(Результат,Строка.ДатаПроизводства);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из ПобочныеИзделия Цикл
			Если ЗначениеЗаполнено(Строка.ДатаПроизводства) И ЗначениеЗаполнено(Результат) Тогда
				Результат = Мин(Результат,Строка.ДатаПроизводства);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НеОтгружатьЧастями Тогда
		Если ЗначениеЗаполнено(ДатаОтгрузки) И ЗначениеЗаполнено(Результат) Тогда
			Результат = Мин(Результат,ДатаОтгрузки);
		КонецЕсли;
	Иначе
		Для Каждого Строка Из ОбеспечениеМатериаламиИРаботами Цикл
			Если ЗначениеЗаполнено(Строка.ДатаОтгрузки) И ЗначениеЗаполнено(Результат) Тогда
				Результат = Мин(Результат,Строка.ДатаОтгрузки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьКлючВСтрокахТабличныхЧастей(Отказ)
	
	Если ПроизводствоНаСтороне И НЕ ЗаказПереработчику.Пустая() Тогда
		
		ЗаполнитьНовыйКодСтрокиПриПереработкеНаСтороне(Отказ);
		
	Иначе
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ВыходныеИзделия", "МаксимальныйКодСтрокиИзделия");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ПобочныеИзделия", "МаксимальныйКодСтрокиИзделия");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ОбеспечениеМатериаламиИРаботами", "МаксимальныйКодСтрокиОбеспечение");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ЭкономияМатериалов", "МаксимальныйКодСтрокиЭкономия");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "Трудозатраты", "МаксимальныйКодСтрокиТрудозатраты");
		
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияГИСМ
Процедура ЗаполнитьПризнакЕстьМаркируемаяПродукция()
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаНоменклатура
	|ГДЕ
	|	ТаблицаНоменклатура.ПродукцияМаркируемаяДляГИСМ
	|	И ТаблицаНоменклатура.Ссылка В (&Номенклатура)";
	
	Номенклатура = Новый Массив;
	Для Каждого ЭлементКоллекции Из ВыходныеИзделия.ВыгрузитьКолонку("Номенклатура") Цикл
		Номенклатура.Добавить(ЭлементКоллекции);
	КонецЦикла;
	Для Каждого ЭлементКоллекции Из ПобочныеИзделия.ВыгрузитьКолонку("Номенклатура") Цикл
		Номенклатура.Добавить(ЭлементКоллекции);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ЕстьМаркируемаяПродукцияГИСМ = НЕ Запрос.Выполнить().Пустой();
	
КонецПроцедуры

// Конец ИнтеграцияГИСМ

Процедура ЗаполнитьМаксимальнуюДатуПроизводства() Экспорт
	
	Если НЕ ПроизводствоОднойДатой Тогда
		ДатаПроизводства = МаксимальнаяДатаПроизводстваВТЧ();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьМаксимальнуюДатуОтгрузки() Экспорт
	
	Если НЕ НеОтгружатьЧастями Тогда
		ДатаОтгрузки = '000101010000';
		Для каждого ДанныеСтроки Из ОбеспечениеМатериаламиИРаботами Цикл
			Если ДанныеСтроки.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить
				И ДанныеСтроки.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
				ДатаОтгрузки = Макс(ДанныеСтроки.ДатаОтгрузки, ДатаОтгрузки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМаксимальнуюДатуРасхода() Экспорт
	
	Если НЕ РасходОднойДатой Тогда
		ДатаРасхода = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(РасходМатериаловИРабот, "ДатаРасхода"),
								Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(ЭкономияМатериалов, "ДатаОперации"));
	КонецЕсли;
	
КонецПроцедуры

#Область КорректировкаЗаказа

// Корректирует строки, по которым не была оформлено поступление или складские ордера или имеются расхождения по мерным товарам.
//
// Параметры:
// 		СтруктураПараметров - Структура - Структура параметров корректировки, конструктор: ЗаказыСервер.ПолучитьСтруктуруКорректировкиСтрокЗаказа()
// 		ЗапретитьРазделениеСтрок - Булево - Взводится при корректировке объекта (форма этапа закрыта), в случае если установлен статус Завершен,
// 											т.к. в этом статусе строки с Произведено = Ложь будут удалены, и разделение не имеет смысла.
//
// Возвращаемое значение:
// 		Структура
// 		*	КоличествоСтрок - Количество отмененных/скорректированных строк
// 		*	СуммаОтклонения - Сумма увеличения заказа из-за превышения отгрузки мерных товаров
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров, ЗапретитьРазделениеСтрок = Ложь) Экспорт
	
	СкорректированоСтрок = 0;
	
	ИспользуетсяПередачаПереработчику = Ложь;
	
	Распоряжения = Новый Массив();
	Распоряжения.Добавить(Ссылка);
	Если ЗначениеЗаполнено(ЗаказПереработчику) Тогда
		Распоряжения.Добавить(ЗаказПереработчику);
		ИспользуетсяПередачаПереработчику = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = Документы.ЭтапПроизводства2_2.ТекстЗапросаТаблицыДокументаДляКорректировки();
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаМатериалы         = РезультатЗапроса[0].Выгрузить();
	ТаблицаПродукция         = РезультатЗапроса[1].Выгрузить();
	ТаблицаПобочнаяПродукция = РезультатЗапроса[2].Выгрузить();
	
	Если СтруктураПараметров.СкорректироватьМерныеТовары Тогда
		ПараметрыЗаполнения = ЗаказыСервер.ПолучитьСтруктуруКорректировкиСтрокЗаказа();
		ПараметрыЗаполнения.ЗаполнениеПоПоступлению                 = Ложь;
		ПараметрыЗаполнения.КорректироватьПриемкуВПлюсНеограниченно = Ложь;
		ПараметрыЗаполнения.ИмяРегистраЗаказов                      = ?(ИспользуетсяПередачаПереработчику,
			"ЗаказыКлиентов",
			"ЗаказыМатериаловВПроизводство");
		ПараметрыЗаполнения.ИмяДокумента                            = "ЭтапПроизводства2_2";
		ПараметрыЗаполнения.ИмяТабличнойЧасти                       = "ОбеспечениеМатериаламиИРаботами";
		
		СкорректированоСтрок = СкорректированоСтрок +
			ЗаказыСервер.СкорректироватьОтгрузкуПриемку(Распоряжения, ТаблицаМатериалы, ПараметрыЗаполнения);
	КонецЕсли;
	Если СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке Тогда
		ПараметрыЗаполнения = ЗаказыСервер.ПолучитьСтруктуруКорректировкиСтрокЗаказа();
		ПараметрыЗаполнения.ЗаполнениеПоПоступлению                 = Истина;
		ПараметрыЗаполнения.КорректироватьПриемкуВПлюсНеограниченно = Истина;
		ПараметрыЗаполнения.ИмяРегистраЗаказов                      =  ?(ИспользуетсяПередачаПереработчику,
			"ЗаказыПоставщикам",
			"РаспоряженияНаПередачуИзПроизводства");
		ПараметрыЗаполнения.ИмяДокумента                            = "ЭтапПроизводства2_2";
		ПараметрыЗаполнения.ИмяТабличнойЧасти                       = "ВыходныеИзделия";
		
		Если Не ЗапретитьРазделениеСтрок Тогда
			ПараметрыЗаполнения.РазделятьСтрокиСОтрицательнымОтклонением = Истина;
		КонецЕсли;
		
		СкорректированоСтрок = СкорректированоСтрок +
			ЗаказыСервер.СкорректироватьОтгрузкуПриемку(Распоряжения, ТаблицаПродукция, ПараметрыЗаполнения);
			
		ПараметрыЗаполнения.ИмяТабличнойЧасти                       = "ПобочныеИзделия";
		
		СкорректированоСтрок = СкорректированоСтрок +
			ЗаказыСервер.СкорректироватьОтгрузкуПриемку(Распоряжения, ТаблицаПобочнаяПродукция, ПараметрыЗаполнения);
	КонецЕсли;
	
	ЗаказыСервер.ПеренестиИзмененияВТаблицуПоИндексу(ТаблицаМатериалы, ОбеспечениеМатериаламиИРаботами, "Количество", Истина);
	ЗаказыСервер.ПеренестиИзмененияВТаблицуПоИндексу(ТаблицаПродукция, ВыходныеИзделия, "Количество", Истина);
	ЗаказыСервер.ПеренестиИзмененияВТаблицуПоИндексу(ТаблицаПобочнаяПродукция, ПобочныеИзделия, "Количество", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОбеспечениеМатериаламиИРаботами, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ВыходныеИзделия, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ПобочныеИзделия, СтруктураДействий, Неопределено);
	
	РезультатОтмены = ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(СкорректированоСтрок, Ложь);
	
	Возврат РезультатОтмены;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ, ПараметрыУказанияСерий = Неопределено)
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(ЭтотОбъект);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий[ИмяТЧ]);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
