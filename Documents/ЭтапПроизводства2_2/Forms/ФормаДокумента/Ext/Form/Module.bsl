#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	
	СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ПобочныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ЭкономияМатериалов);
		
	КонецЕсли;
	
	#Область УниверсальныеМеханизмы
	
	УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма, "РасходМатериаловИРабот_,ЭкономияМатериалов_,ВыходныеИзделия_,ПобочныеИзделия_");
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	#КонецОбласти
	
	УстановитьВидимостьКомандВводаНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда
		
		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда
		
		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда
		
		Оповещение = ЗаполнитьОбеспечениеЭтапа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РазрешениеНаЗаменуМатериалов.Форма.ПодборАналогов" Тогда
		
		ЗаменитьМатериалыНаАналоги(ВыбранноеЗначение.АдресВХранилище);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий[ВыбранноеЗначение.ИмяТЧ], ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаказПереработчику" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			Прочитать();
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "ИзменениеПоследовательностиЭтапов"
		И Объект.ВыпускающийЭтап = Параметр Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_МаркировкаТоваровГИСМ"
		И Параметр = Объект.Ссылка Тогда
		
		СформироватьНадписьМаркировкаПродукции();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
				ВидыРабочихЦентров, 
				ТекущийОбъект.ПланироватьРаботуВидовРабочихЦентров,
				ТекущийОбъект.ВидыРабочихЦентров,
				ТекущийОбъект.АльтернативныеВидыРабочихЦентров);
	
	ПередЗаписьюСохранитьГрафикПроизводства(ТекущийОбъект);
	
	УстановитьФлагЗаполненоАвтоматически(ТекущийОбъект);
	УстановитьФлагЗаполненоПоПроизводственнымОперациям(ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПроизводствоНаСтороне Тогда
		// Нужно разблокировать объект
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли; 
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	ЗаполнитьСостояниеВыполненияОпераций();
	
	// ИнтеграцияГИСМ
	СформироватьНадписьМаркировкаПродукции();
	// Конец ИнтеграцияГИСМ
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЭтапПроизводства2_2", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	#Область ГрафикПроизводства
	
	ОбработкаПроверкиРазмещенияЭтапаВГрафике(Отказ);
	
	Если ОтметкаПланироватьНеРанее 
		И Объект.ПланироватьНеРанее = '00010101' Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Планировать не ранее"" не заполнено.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, 
			Объект.Ссылка,,
			"Объект.ПланироватьНеРанее",
			Отказ);
		
	КонецЕсли;
	
	#КонецОбласти
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ПоказатьНормативы И Объект.Спецификация.Пустая() Тогда
		ПоказатьНормативы = Ложь;
	КонецЕсли;
	
	Если ПоказатьНормативы Тогда
		ПоказатьНормативыПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "НаименованиеЭтапа");

КонецПроцедуры

&НаКлиенте
Процедура ЗапланированоПриИзменении(Элемент)
	
	ЗапланированоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ОбработатьИзменениеСтатусаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияДлительностиЭтапаПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияДлительностиЭтапа.Пустая() Тогда
		Объект.ЕдиницаИзмеренияДлительностиЭтапа = ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ;
	КонецЕсли; 
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЕдиницаИзмеренияДлительностиЭтапа");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаОбеспеченияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЖелаемаяДатаОбеспечения");
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьДатуВТЧ("ОбеспечениеМатериаламиИРаботами", "ДатаОтгрузки", Объект.ДатаОтгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводствоОднойДатойПриИзменении(Элемент)
	
	ПроизводствоОднойДатойПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваПриИзменении(Элемент)
	
	ДатаПроизводстваПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходОднойДатойПриИзменении(Элемент)
	
	РасходОднойДатойПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасходаПриИзменении(Элемент)
	
	ДатаРасходаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьПродукцияНажатие(Элемент)
	
	ПродукцияСвернута = НЕ ПродукцияСвернута;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ВыходныеИзделия, 
		Элементы.ГиперСсылкаНадписьПродукция, 
		ПродукцияСвернута);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьПобочныеИзделияНажатие(Элемент)
	
	ПобочныеИзделияСвернуты = НЕ ПобочныеИзделияСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ПобочныеИзделия, 
		Элементы.ГиперСсылкаНадписьПобочныеИзделия, 
		ПобочныеИзделияСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьРасходМатериаловИРаботНажатие(Элемент)
	
	ИзрасходованныеМатериалыСвернуты = НЕ ИзрасходованныеМатериалыСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.РасходМатериаловИРабот, 
		Элементы.ГиперСсылкаНадписьРасходМатериаловИРабот, 
		ИзрасходованныеМатериалыСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьРЭкономияМатериаловНажатие(Элемент)
	
	НеизрасходованныеМатериалыСвернуты = НЕ НеизрасходованныеМатериалыСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ЭкономияМатериалов, 
		Элементы.ГиперСсылкаНадписьРЭкономияМатериалов, 
		НеизрасходованныеМатериалыСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтап(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЭтапЗавершение", ЭтотОбъект),
						НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?'"),РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗакрытьЭтапФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтапЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьЭтапФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтапФрагмент()
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ЭтапПроизводства2_2.ФормаДокумента.Команда.ЗакрытьЗаказФрагмент");
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	Если ЗначениеЗаполнено(Объект.ЗаказПереработчику) Тогда
		СписокЗаказовКЗакрытию.Добавить(Объект.ЗаказПереработчику);
	КонецЕсли;
	
	СтруктураЗакрытия = ЗаказыКлиентСервер.ПараметрыПомощникаЗакрытияЗаказов();
	СтруктураЗакрытия.Заказы                               = СписокЗаказовКЗакрытию;
	СтруктураЗакрытия.ДокументИнициатор                    = Объект.Ссылка;
	СтруктураЗакрытия.СкорректироватьМерныеТоварыПоПриемке = Истина;
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстМаркировкаТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Объект.Ссылка, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьМаркировкуТоваров" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.МаркировкаТоваровГИСМ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры
//Конец ИнтеграцияГИСМ

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыФормыОсновная

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЭтапаПриИзменении(Элемент)
	
	НаименованиеЭтапаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПроизводстваПриИзменении(Элемент)
	
	ОбработатьИзменениеСпособаПроизводстваНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияЭтапОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ПоказатьЭтапы" Тогда
		
		ПоказатьЭтапы();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#ОткрытьСпецификацию" Тогда
		
		ОткрытьСпецификацию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПроизводстваНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуРучногоРедактированияГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПланированияПриИзменении(Элемент)
	
	ОбработатьИзменениеСпособаПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкаПланироватьНеРанееПриИзменении(Элемент)
	
	Если Не ОтметкаПланироватьНеРанее Тогда
		Объект.ПланироватьНеРанее = '00010101';
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтметкаПланироватьНеРанее");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстКомментарийКонвертацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#Далее" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеПросмотраКомментарияКонвертации", ЭтотОбъект);
		
		Строка    = Объект.КомментарийПриКонвертации;
		Подсказка = НСтр("ru = 'Служебная информация'");
		
		ПоказатьВводСтроки(Оповещение, Строка, Подсказка, 0, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПросмотраКомментарияКонвертации(Строка, Параметры) Экспорт
	
	Если Строка = "" Тогда
		Объект.КомментарийПриКонвертации = "";
		СформироватьКомментарийКонвертации(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьГруппуКомментарийКонвертации(Элемент)
	
	Объект.КомментарийПриКонвертации = "";
	СформироватьКомментарийКонвертации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатоВыполнениеЭтапаПриИзменении(Элемент)
	
	ОбработатьНачалоВыполненияЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершеноВыполнениеЭтапаПриИзменении(Элемент)
	
	ОбработатьЗавершениеВыполненияЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполненоПриИзменении(Элемент)
	
	Если Объект.Выполнено = Объект.Запланировано Тогда
		
		ЗавершеноВыполнениеЭтапа = Истина;
		ОбработатьЗавершениеВыполненияЭтапа();
		
	ИначеЕсли Объект.Выполнено > 0 И НЕ НачатоВыполнениеЭтапа Тогда
		
		НачатоВыполнениеЭтапа = Истина;
		ОбработатьНачалоВыполненияЭтапа();
		
	Иначе
		
		ЗавершеноВыполнениеЭтапа = Ложь;
		ОбработатьЗавершениеВыполненияЭтапа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаказПереработчикуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#СоздатьЗаказ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстВопроса = Неопределено;
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован") Тогда
			
			ТекстВопроса = НСтр("ru = 'Для создания заказа необходимо установить статус ""К выполнению"".
										|Изменить статус этапа и создать заказ?'");
										
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Изменить статус и создать заказ'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
			
			ТекстВопроса = НСтр("ru = 'Для создания заказа необходимо записать документ.
										|Записать документ и создать заказ?'");
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать и создать заказ'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			
		КонецЕсли; 
		
		Если ТекстВопроса <> Неопределено Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьОбъектИСоздатьЗаказПереработчику", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		Иначе
			СоздатьЗаказПереработчику();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутнаяКартаПриИзменении(Элемент)
	
	КоэффициентМаршрутнойКарты = 1;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если (Поле = Элементы.ВыходныеИзделияСерия 
			ИЛИ Поле = Элементы.ВыходныеИзделияСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		ОткрытьПодборСерий("ВыходныеИзделия");
	КонецЕсли;
	
	Если Поле = Элементы.ВыходныеИзделияСчетРеглУчетаАктивовПассивов Тогда
		РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма, "ВыходныеИзделия", ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ВыходныеИзделия");
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПриНачалеРедактирования(
		ЭтаФорма, ТекущиеДанные, НоваяСтрока, Копирование);
	
	ВыходныеИзделияЭтапаПриНачалеРедактирования(ТекущиеДанные, НоваяСтрока, "ВыходныеИзделия", Копирование);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ("ВыходныеИзделия", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия);
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыходныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия);

КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ВыходныеИзделия", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ВыходныеИзделия");

КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ВыходныеИзделия.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ВыходныеИзделия.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ВыходныеИзделия, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ВыходныеИзделия", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПроизведеноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ВыходныеИзделия);
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	Если ТекущиеДанные.Произведено Тогда
		
		Если НЕ НачатоВыполнениеЭтапа Тогда
			НачатоВыполнениеЭтапа = Истина;
			ОбработатьНачалоВыполненияЭтапа();
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНазначениеРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	НазначениеРедактированиеНачалоВыбора(ТекущиеДанные, "ВыходныеИзделия")
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНазначениеРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиентСервер.ОчиститьНазначениеРедактированиеВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНаправленияВыпуска(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ВыходныеИзделияЭтапаПолучательПриИзменении(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПолучательРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.СписатьНаРасходы Тогда
		
		СтандартнаяОбработка = Ложь;
		СтатьяРасходовНачалоВыбора(ТекущиеДанные, "ВыходныеИзделия");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация  
		Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПобочныеИзделия

&НаКлиенте
Процедура ПобочныеИзделияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если (Поле = Элементы.ПобочныеИзделияСерия 
			ИЛИ Поле = Элементы.ПобочныеИзделияСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		ОткрытьПодборСерий("ПобочныеИзделия");
	КонецЕсли;
	
	Если Поле = Элементы.ПобочныеИзделияСчетРеглУчетаАктивовПассивов Тогда
		РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма, "ПобочныеИзделия", ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ПобочныеИзделия");
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПриНачалеРедактирования(
		ЭтаФорма, ТекущиеДанные, НоваяСтрока, Копирование);
	
	ВыходныеИзделияЭтапаПриНачалеРедактирования(ТекущиеДанные, НоваяСтрока, "ПобочныеИзделия", Копирование);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ("ПобочныеИзделия", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия);
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПобочныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия);

КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ПобочныеИзделия", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ПобочныеИзделия");

КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ПобочныеИзделия.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ПобочныеИзделия.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ПобочныеИзделия, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ПобочныеИзделия", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПроизведеноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ПобочныеИзделия);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	Если ТекущиеДанные.Произведено Тогда
		
		Если НЕ НачатоВыполнениеЭтапа Тогда
			НачатоВыполнениеЭтапа = Истина;
			ОбработатьНачалоВыполненияЭтапа();
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияЗаполнитьЦенуПобочногоВыпуска(
		Объект, Валюта, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНазначениеРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	НазначениеРедактированиеНачалоВыбора(ТекущиеДанные, "ПобочныеИзделия")
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНазначениеРедактированиеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиентСервер.ОчиститьНазначениеРедактированиеВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииНаправленияВыпуска(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ВыходныеИзделияЭтапаПолучательПриИзменении(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПолучательРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.СписатьНаРасходы Тогда
		
		СтандартнаяОбработка = Ложь;
		СтатьяРасходовНачалоВыбора(ТекущиеДанные, "ПобочныеИзделия");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ПобочныеИзделияЭтапаЦенаПриИзменении(ТекущиеДанные, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ПобочныеИзделияЭтапаСуммаПриИзменении(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПобочныеИзделия.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПобочныеИзделия.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПобочныеИзделия.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация  
		Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Выполнено = Ложь;
		ТекущиеДанные.ДатаВыполнения = '000101010000';
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыВыполненоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ТрудозатратыВыполненоПриИзмененииНаСервере(Идентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбеспечениеМатериаламиИРаботами

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Элементы.ОбеспечениеМатериаламиИРаботами.Выбор");
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если Поле = Элементы.ОбеспечениеМатериаламиИРаботамиВариантОбеспечения И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбеспечениеМатериаламиИРаботамиВыборВариантОбеспечения(ТекущиеДанные);
		
	ИначеЕсли Поле = Элементы.ОбеспечениеМатериаламиИРаботамиЕстьАналогиМатериала И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьПодборАналогов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаПриНачалеРедактирования(
		ЭтаФорма, ТекущиеДанные, НоваяСтрока, Копирование);
	
	СкладыКлиент.ОбновитьКешированныеЗначения(
		Элемент, 
		КэшированныеЗначения, 
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, 
		Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ПоказатьНормативы Тогда
		
		МассивДанных = Новый Массив;
		ДанныеСтроки = Новый Структура("Номенклатура,Характеристика,ХарактеристикиИспользуются,Упаковка");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
		МассивДанных.Добавить(ДанныеСтроки);
		Нормативы = ПолучитьНормативыПриИзмененииСтрок(МассивДанных, АдресХранилищаНормативыМатериалов);
		ТекущиеДанные.Норматив = Нормативы[0];
										
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПослеУдаления(Элемент)
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(
			Объект.ОбеспечениеМатериаламиИРаботами, 
			ДатаОтгрузкиОбязательна, 
			СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ОбеспечениеМатериаламиИРаботами", Элемент.ТекстРедактирования, Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПроизводитсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ПроизводитсяПриИзменении(
		ТекущиеДанные,
		Объект,
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСпецификацияПриИзменении(
		Объект, 
		ТекущиеДанные, 
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСкладПриИзменении(
		ТекущиеДанные, 
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, 
		КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура НеОтгружатьЧастямиПриИзмененииНаСервере()

	Если Объект.НеОтгружатьЧастями Тогда
		Объект.ДатаОтгрузки = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
									Объект.ОбеспечениеМатериаламиИРаботами, "ДатаОтгрузки");
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "НеОтгружатьЧастями");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.РасходМатериаловИРабот, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("РасходМатериаловИРабот", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭкономияМатериалов

&НаКлиенте
Процедура ЭкономияМатериаловПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
		Если НЕ Копирование Тогда
			ТекущиеДанные.Действия = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства");
			СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
					ИспользоватьНесколькоСкладов, 
					СкладПоУмолчанию, 
					ТекущиеДанные);
			
			ОграничениеТипаПолучательНеизрасходованныхМатериалов(ТекущиеДанные);
			
			ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяРасходов");
			ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяРасходов");
			
		КонецЕсли;
	КонецЕсли;
	
	СкладыКлиент.ОбновитьКешированныеЗначения(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ЭкономияМатериалов, Копирование);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			"ЭкономияМатериалов", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ЭкономияМатериалов);
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЭкономияМатериалов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов);

КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ЭкономияМатериалов", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловУпаковкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	ПриИзмененииУпаковки(ДанныеСтроки, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ЭкономияМатериалов, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ЭкономияМатериалов", Элемент.ТекстРедактирования, Элементы.ЭкономияМатериалов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловДействияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Действия) Тогда
		ТекущиеДанные.Действия = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства");
	КонецЕсли;
	
	ТекущиеДанные.СписатьНаРасходы = (ТекущиеДанные.Действия = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	
	ОграничениеТипаПолучательНеизрасходованныхМатериалов(ТекущиеДанные);
	
	ТекущиеДанные.ПолучательРедактирование = Элементы.ЭкономияМатериаловПолучательРедактирование.ОграничениеТипа.ПривестиЗначение(
												ТекущиеДанные.ПолучательРедактирование);
	
	ПриИзмененииПолучателяНеизрасходованныхМатериалов(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПолучательРедактированиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииПолучателяНеизрасходованныхМатериалов(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация  
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаСервере
Процедура ТрудозатратыВыполненоПриИзмененииНаСервере(Знач Идентификатор)
	
	ТекущиеДанные = Объект.Трудозатраты.НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущиеДанные.Выполнено Тогда
		
		Если НЕ НачатоВыполнениеЭтапа Тогда
			НачатоВыполнениеЭтапа = Истина;
			ОбработатьНачалоВыполненияЭтапа();
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
				ТекущиеДанные.Выполнено,
				ТекущиеДанные.ДатаВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыФормыПроизводственныйПроцесс

&НаКлиенте
Процедура ВидыРабочихЦентровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.ВидыРабочихЦентровПередНачаломДобавления(
				ТекущиеДанные, 
				ВидыРабочихЦентров, 
				Элементы.ВидыРабочихЦентров, 
				Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
		Если НЕ ТекущиеДанные.Альтернативный Тогда
			ТекущиеДанные.Использовать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьКоличествоВидовРабочихЦентров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПослеУдаления(Элемент)
	
	// Нужно проверить что выбран вид РЦ
	КоллекцияОсновныхВидовРЦ = ВидыРабочихЦентров.ПолучитьЭлементы();
	Для каждого СтрокаОсновнойВидРЦ Из КоллекцияОсновныхВидовРЦ Цикл
		Если СтрокаОсновнойВидРЦ.Использовать Тогда
			Продолжить;
		КонецЕсли;
		КоллекцияАльтернатив = СтрокаОсновнойВидРЦ.ПолучитьЭлементы();
		ИспользуетсяАльтернатива = Ложь;
		Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
			Если СтрокаАльтернатива.Использовать Тогда
				ИспользуетсяАльтернатива = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ИспользуетсяАльтернатива Тогда
			СтрокаОсновнойВидРЦ.Использовать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьКоличествоВидовРабочихЦентров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровИспользоватьПриИзменении(Элемент)
	
	// Это всегда установка флажка
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
	Если РодительЭлемента = Неопределено Тогда
		РодительЭлемента = ТекущиеДанные;
		КоллекцияАльтернатив = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		КоллекцияАльтернатив = РодительЭлемента.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
		Если СтрокаАльтернатива.Использовать И СтрокаАльтернатива <> ТекущиеДанные Тогда
			СтрокаАльтернатива.Использовать = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если РодительЭлемента.Использовать И РодительЭлемента <> ТекущиеДанные Тогда
		РодительЭлемента.Использовать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВидРабочегоЦентраПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВариантНаладкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйБуферПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПредварительныйБуфер");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершающийБуферПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЗавершающийБуфер");
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПредварительногоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияЗавершающегоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПроизводствоИПланирование

&НаКлиенте
Процедура Производство_ОткрытьСпецификацию(Команда)
	
	ОткрытьСпецификацию();
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ПоказатьЭтапы(Команда)
	
	ПоказатьЭтапы();
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ПерейтиКРучномуРедактированиюГрафика(Команда)
	
	ОткрытьФормуРучногоРедактированияГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ЗаполнитьПоОперациям(Команда)
	
	ПоказатьВопросИЗаполнитьПоОперациям();
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ВыполнениеОпераций(Команда)
	
	УправлениеПроизводствомКлиент.ОткрытьВыполнениеОпераций(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЖелаемуюДатуОбеспечения(Команда)
	
	Если ТипЗнч(ГрафикПроизводства) = Тип("Структура")
		И ГрафикПроизводства.Свойство("НачалоЭтапа") Тогда
		
		ИзменитьЖелаемуюДатуОбеспеченияЭтапаНаСервере(ГрафикПроизводства.НачалоЭтапа);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ОбеспечениеМатериаламиИРаботами 

&НаКлиенте
Процедура Обеспечение_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьПоСпецификации(Команда)
	
	Если Объект.ОбеспечениеМатериаламиИРаботами.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть по спецификации?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Обеспечение_ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		Обеспечение_ЗаполнитьПоСпецификацииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СостояниеОбеспечения(Команда)
	
	ТекстПредупреждения = НСтр("ru = 'Не введено ни одной строки в список ""Обеспечение материалами и работами"".
		|Просмотр состояния обеспечения невозможен.'");
	
	Если ОбеспечениеКлиент.ПроверитьВозможностьВыполненияКомандыСостояниеОбеспеченияВДокументе(
			ЭтаФорма, "ОбеспечениеМатериаламиИРаботами", ТекстПредупреждения) Тогда
		
		ДанныеДляОбеспечения = ПодготовитьДанныеДляОбеспеченияЗаказа();
		ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ДанныеДляОбеспечения, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьОбеспечение(Команда)

	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЗаполнитьОбеспечение(
			Объект, 
			Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки, 
			ЭтаФорма, 
			"Объект");

КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, МинимальныйСтатус);
	ИначеЕсли Модифицированность Или Не СтруктураОбъектаОснования.Проведен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ.'"));
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Истина, МинимальныйСтатус);
	ИначеЕсли Модифицированность Или Не СтруктураОбъектаОснования.Проведен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ.'"));
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_УточнитьМатериалПредыдущий(Команда)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено или Не ЕстьУточненияМатериалов Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКМатериалуКоторыйТребуетсяУточнить(ТекущиеДанные.НомерСтроки, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_УточнитьМатериалСледующий(Команда)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено или Не ЕстьУточненияМатериалов Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКМатериалуКоторыйТребуетсяУточнить(ТекущиеДанные.НомерСтроки, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПоказатьНормативы(Команда)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	ПоказатьНормативы = НЕ ПоказатьНормативы;
	ПоказатьНормативыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПоказатьЗапланированныеКОбеспечению(Команда)
	
	ПоказатьЗапланированныеКОбеспечениюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПодобратьАналоги(Команда)
	
	ОткрытьПодборАналогов();
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСерииПоFEFO(Команда)
	
	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		
		НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO(
			Новый ОписаниеОповещения("ЗаполнитьСерииПоFEFOЗавершение", ЭтотОбъект));
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_РасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРабот_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспечения(Команда)
	
	Если Объект.РасходМатериаловИРабот.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть по данным обеспечения
									|с учетом неизрасходованных материалов?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьДатуРасхода(Команда)
	
	Если Элементы.РасходМатериаловИРабот.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Необходимо выбрать материалы, для которых необходимо заполнить дату расхода.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РасходМатериаловИРабот_ЗаполнитьДатуРасходаЗавершение", ЭтотОбъект, Элементы.РасходМатериаловИРабот.ВыделенныеСтроки);
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			ТекущаяДата(), 
			НСтр("ru='Введите дату расхода материалов (работ)'"), 
			ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗагрузитьДанныеИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСД("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ПоискПоШтрихкоду(Команда)
	
	ПоискПоШтрихкоду("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ПолучитьВес(Команда)
	
	ПолучитьВес("РасходМатериаловИРабот");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ЭкономияМатериалов

&НаКлиенте
Процедура ЭкономияМатериалов_СкопироватьСтроки(Команда)

	СкопироватьСтрокиТЧ("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьНеизрасходованными(Команда)
	
	ЗаполнитьНеизрасходованнымиМатериалами();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗагрузитьДанныеИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСД("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ПоискПоШтрихкоду(Команда)
	
	ПоискПоШтрихкоду("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ПолучитьВес(Команда)
	
	ПолучитьВес("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьСтатьюРасходов(Команда)
	
	Если Элементы.ЭкономияМатериалов.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Необходимо выбрать материалы, для которых необходимо заполнить статью расходов.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить("НаНаправленияДеятельности");
	МассивВариантов.Добавить("НаРасходыБудущихПериодов");
	МассивВариантов.Добавить("НаПроизводственныеЗатраты");
	МассивВариантов.Добавить("НаВнеоборотныеАктивы");
	
	ПараметрыФормы = Новый Структура("ВариантыРаспределенияРасходов, ХозяйственнаяОперация",
		МассивВариантов,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭкономияМатериалов_ЗаполнитьСтатьюРасходовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ПланВидовХарактеристик.СтатьиРасходов.Форма.ФормаВыбораСтатьиИАналитики", ПараметрыФормы,ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьДату(Команда)
	
	Если Элементы.ЭкономияМатериалов.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Необходимо выбрать материалы, для которых требуется заполнить дату передачи (списания).'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЭкономияМатериалов_ЗаполнитьДатуЗавершение", ЭтотОбъект, Элементы.ЭкономияМатериалов.ВыделенныеСтроки);
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			ТекущаяДата(), 
			НСтр("ru='Введите дату передачи (списания)'"),
			ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ЭкономияМатериалов");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделия_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ВыходныеИзделия");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыходныеИзделия_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ИзменитьКачество(Команда)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ВыходныеИзделия", 
			ЭтаФорма, 
			СтруктураДействий);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ПолучитьВес(Команда)
	
	ПолучитьВес("ВыходныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ПобочныеИзделия

&НаКлиенте
Процедура ПобочныеИзделия_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ПобочныеИзделия");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПобочныеИзделия_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ИзменитьКачество(Команда)
	
	ТекущаяСтрока = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ПобочныеИзделия", 
			ЭтаФорма, 
			СтруктураДействий);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ПолучитьВес(Команда)
	
	ПолучитьВес("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ЗаполнитьЦены(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.ВидЦены.Пустая() Тогда
		
		ТекстСообщения = НСтр("ru='Не заполнено поле ""Вид цены""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ВидЦены","Объект");
		
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ПобочныеИзделия.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ТекстШаблона = НСтр("ru='В таблице ""%1"" не выбрано ни одной строки. Цены не могут быть заполнены'");
		ПоказатьПредупреждение( , СтрШаблон(ТекстШаблона, НадписьПобочныеИзделия));
		
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.ПобочныеИзделия.НайтиПоИдентификатору(Строка);
		Если ДанныеСтроки.Произведено ИЛИ ДанныеСтроки.Цена <> 0 Тогда
			Идентификаторы.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='В выделенных строках отсутствуют позиции, доступные для заполнения по виду цен.'");
		ПоказатьПредупреждение( , ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(Объект.ВидЦены, Идентификаторы);
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ВидыРабочихЦентров

&НаКлиенте
Процедура КомандаДобавитьАльтернативныйВидРЦ(Команда)
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.ДобавитьАльтернативныйВидРЦ(
				ТекущиеДанные, 
				ВидыРабочихЦентров, 
				Элементы.ВидыРабочихЦентров);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)

	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	УстановитьУсловноеОформлениеОбеспечения();
	
	УстановитьУсловноеОформлениеРасходМатериаловИРабот();
	УстановитьУсловноеОформлениеЭкономияМатериалов();
	
	УстановитьУсловноеОформлениеВыходныеИзделия();
	
	УстановитьУсловноеОформлениеТрудозатраты();
	УстановитьУсловноеОформлениеВидыРабочихЦентров();
	
	УстановитьУсловноеОформлениеОбщее();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбеспечения()
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеОбеспеченияЭтапаПроизводства(
		ЭтаФорма, "Объект", "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформлениеВыходныеИзделия()

	УправлениеПроизводством.УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, "Объект", "ВыходныеИзделия");
		
	УправлениеПроизводством.УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, "Объект", "ПобочныеИзделия");
		
	// Статья калькуляции для побочных изделий обязательна в статусе Начат и Завершен
	#Область СтатьяКалькуляции
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияСтатьяКалькуляции.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	// Цена и сумма для побочных изделий обязательна в статусе Начат и Завершен, если продукция выпущена
	// Цена и сумма для побочных изделий доступна, если продукция выпущена или вид цен не заполнен
	#Область СтоимостьПобочногоВыпуска
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияЦена.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияСумма.Имя);
	
	ГруппаОтбораИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияЦена.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияСумма.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
			ЭтаФорма, 
			Ложь, 
			"ВыходныеИзделияСерия", 
			"Объект.ВыходныеИзделия.СтатусУказанияСерий", 
			"Объект.ВыходныеИзделия.ТипНоменклатуры");
			
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
			ЭтаФорма, 
			Ложь, 
			"ПобочныеИзделияСерия", 
			"Объект.ПобочныеИзделия.СтатусУказанияСерий", 
			"Объект.ПобочныеИзделия.ТипНоменклатуры");
			
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
			ЭтаФорма, 
			Ложь, 
			"ВыходныеИзделияСтатусУказанияСерий", 
			"Объект.ВыходныеИзделия.СтатусУказанияСерий");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
			ЭтаФорма, 
			Ложь, 
			"ПобочныеИзделияСтатусУказанияСерий", 
			"Объект.ПобочныеИзделия.СтатусУказанияСерий");
			
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("ВыходныеИзделия"));
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "ВыходныеИзделия", ТипыСтатей);
	РеглУчетВызовСервера.УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(ЭтаФорма, "ВыходныеИзделия", ТипыСтатей);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("ПобочныеИзделия"));
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "ПобочныеИзделия", ТипыСтатей);
	РеглУчетВызовСервера.УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(ЭтаФорма, "ПобочныеИзделия", ТипыСтатей);
	
	#Область ВыходныеИзделия_АналитикаРасходов
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияАналитикаАктивовПассивов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСчетРеглУчетаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСчетРеглУчетаАктивовПассивов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// текст аналитики расходов, если статья не выбрана
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияАналитикаАктивовПассивов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ПолучательРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите статью>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область ПобочныеИзделия_АналитикаРасходов
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияАналитикаАктивовПассивов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияСчетРеглУчетаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияСчетРеглУчетаАктивовПассивов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// текст аналитики расходов, если статья не выбрана
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияАналитикаАктивовПассивов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.ПолучательРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите статью>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	#КонецОбласти
	
	#Область ВыходныеИзделия_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоВыпускающийЭтап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыходныеИзделияКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоВыпускающийЭтап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыходныеИзделияКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ПобочныеИзделия_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоВыпускающийЭтап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПобочныеИзделияКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	#КонецОбласти

	#Область ПередачаВПереработку_ДатаПроизводства_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроизводства.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДатаПроизводства.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СозданЗаказПереработчику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЭкономияМатериалов()
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
			ЭтаФорма, 
			Ложь, 
			"ЭкономияМатериаловСерия", 
			"Объект.ЭкономияМатериалов.СтатусУказанияСерий", 
			"Объект.ЭкономияМатериалов.ТипНоменклатуры");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
			ЭтаФорма, 
			Ложь, 
			"ЭкономияМатериаловСтатусУказанияСерий", 
			"Объект.ЭкономияМатериалов.СтатусУказанияСерий");
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("ЭкономияМатериалов"));
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "ЭкономияМатериалов", ТипыСтатей);
	РеглУчетВызовСервера.УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(ЭтаФорма, "ЭкономияМатериалов", ТипыСтатей);
	
	// Текст для поля Действия
	#Область ЭкономияМатериалов_Действия__Текст
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭкономияМатериаловДействия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЭкономияМатериалов.Действия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Передать на склад'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭкономияМатериаловДействия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЭкономияМатериалов.Действия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Списать на статью'"));
	#КонецОбласти
	
	// Текст для поля Назначение
#Область ЭкономияМатериалов_Назначение__Текст
	
	УстановитьУсловноеОформлениеЭкономияМатериаловНазначение();
	
#КонецОбласти

	// ТолькоПросмотр для поля АналитикаРасходов
	#Область ЭкономияМатериалов_АналитикаРасходов__ТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭкономияМатериаловАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭкономияМатериаловАналитикаАктивовПассивов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭкономияМатериаловСчетРеглУчетаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭкономияМатериаловСчетРеглУчетаАктивовПассивов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЭкономияМатериалов.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ЭкономияМатериаловХарактеристика",
																		     "Объект.ЭкономияМатериалов.ХарактеристикиИспользуются");
																   
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма,
																   "ЭкономияМатериаловНоменклатураЕдиницаИзмерения",
																   "Объект.ЭкономияМатериалов.Упаковка");
	
КонецПроцедуры

&НаСервере
Функция УстановитьУсловноеОформлениеЭкономияМатериаловНазначение()
	
	ЭкономияМатериаловНазначениеПредставление = "ЭкономияМатериаловНазначениеТекстНаименованиеЭтапа";
	Для Каждого Элемент Из УсловноеОформление.Элементы Цикл
		
		Если Элемент.Представление = ЭкономияМатериаловНазначениеПредставление Тогда
			
			УсловноеОформление.Элементы.Удалить(Элемент);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элемент = УсловноеОформление.Элементы.Вставить(0);
	Элемент.Представление = ЭкономияМатериаловНазначениеПредставление;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭкономияМатериаловНадписьНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЭкономияМатериалов.Обособить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<%1>", Объект.НазначениеМатериалы));
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеРасходМатериаловИРабот()

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтаФорма, 
		"СерииВсегдаВТЧТовары",
		"РасходМатериаловИРаботСерия",
		"Объект.РасходМатериаловИРабот.СтатусУказанияСерий",
		"Объект.РасходМатериаловИРабот.ТипНоменклатуры");

	//Статья калькуляции
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходМатериаловИРаботСтатьяКалькуляции.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "РасходМатериаловИРаботХарактеристика",
																		     "Объект.РасходМатериаловИРабот.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма,
																   "РасходМатериаловИРаботНоменклатураЕдиницаИзмерения",
																   "Объект.РасходМатериаловИРабот.Упаковка");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидыРабочихЦентров()
	
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеВидыРабочихЦентров(
		ЭтаФорма, "ВидыРабочихЦентров");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТрудозатраты()

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыБригада.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.Выполнено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбщее()
	
	#Область ДатаПроизводства_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоВыходныхИзделий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти

	#Область ДатаРасхода_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаРасхода.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасходОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоСтрокРасхода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ПланироватьНеРанее_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланироватьНеРанее.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтметкаПланироватьНеРанее");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
		
	УстановитьУсловноеОформлениеПлановаяДатаПоступления();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПлановаяДатаПоступления()
	
	// Реквизит в шапке
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СтатусНачат();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаПоступления");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	// Выходные изделия
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДатаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаПоступления");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	// Побочные изделия
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.ДатаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаПоступления");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ЭтоВыпускающийЭтап = ЭтоВыпускающийЭтап(ЭтаФорма);
	
	Элементы.ГруппаСпособПроизводства.Видимость = ИспользуетсяПроизводствоНаСтороне;
	
	Элементы.ВыпускающийЭтап.Видимость = НЕ ЭтоВыпускающийЭтап;
	Элементы.НазначениеПродукция.Видимость = НЕ Объект.НазначениеПродукция.Пустая();

	Элементы.Выполнено.МинимальноеЗначение  = 0;
	Элементы.Выполнено.МаксимальноеЗначение = Объект.Запланировано;
	
	Если ЭтоВыпускающийЭтап Тогда
		
		ПобочныеИзделияСвернуты = Истина;
		
		УстановитьСвойстваСворачиваемойГруппы(
			Элементы.ПобочныеИзделия, 
			Элементы.ГиперСсылкаНадписьПобочныеИзделия, 
			ПобочныеИзделияСвернуты);
		
	КонецЕсли;
	
	НеизрасходованныеМатериалыСвернуты = Истина;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ЭкономияМатериалов, 
		Элементы.ГиперСсылкаНадписьРЭкономияМатериалов, 
		НеизрасходованныеМатериалыСвернуты);
	
	НадписьСпецификацияЭтап = ФорматированнаяСтрокаСпецификацияЭтап();
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		ИЛИ НЕ Документы.ЗаказНаПроизводство2_2.ИспользуетсяОбособлениеПоЭтапамПроизводства(Объект.Распоряжение) Тогда
		Элементы.Обеспечение_СоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.Обеспечение_СоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ПравоЧтенияАналогов Тогда
		Элементы.ОбеспечениеМатериаламиИРаботамиЕстьАналогиМатериала.Видимость = Ложь;
		Элементы.Обеспечение_ПодобратьАналоги.Видимость = Ложь;
	КонецЕсли; 
	Элементы.ЗакрытьЭтап.Доступность = ПравоДоступа("Изменение", Метаданные.Документы.ЭтапПроизводства2_2);
	
	Если ЗначениеЗаполнено(Объект.ВидЦены)
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		Элементы.ВидЦены.Видимость = Ложь;
	Иначе
		Элементы.ВидЦены.Видимость = Истина;
	КонецЕсли;
	
	РассчитатьКоличествоВидовРабочихЦентров(ЭтаФорма);
	
	СформироватьКомментарийКонвертации(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

// Процедура вызывается при изменении реквизитов от которых зависят свойства других реквизитов, например, видимость.
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	// Заголовок формы
	#Область ЗаголовокФормы
	Если СтруктураРеквизитов.Свойство("НаименованиеЭтапа") 
		ИЛИ Инициализация Тогда
		
		ЗаголовокСтроки = Новый Массив;
		
		РеквизитыПредставления = Новый Структура("Номер, НаименованиеЭтапа");
		ЗаполнитьЗначенияСвойств(РеквизитыПредставления, Объект);
		
		ПредставлениеЭтапа = ПредставлениеЭтапа(РеквизитыПредставления);
		ЗаголовокСтроки.Добавить(ПредставлениеЭтапа);
		ЗаголовокСтроки.Добавить(НСтр("ru = '(Этап производства)'"));
		
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок     = СтрСоединить(ЗаголовокСтроки, " ");
		
	КонецЕсли;
	#КонецОбласти
	
	// Подразделение
	#Область Подразделение
	Если СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ Инициализация Тогда
		
		Элементы.Подразделение.ТолькоПросмотр = Форма.ИспользоватьПооперационноеУправление И Форма.НачатоВыполнениеОпераций;
		
	КонецЕсли;
	#КонецОбласти
	
	// Маршрутная карта
	#Область МаршрутнаяКарта
	Если СтруктураРеквизитов.Свойство("Статус")
		ИЛИ СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаМаршрутнаяКарта.Видимость = Форма.ИспользоватьПооперационноеУправление И Не Форма.Объект.ПроизводствоНаСтороне;
		
		Если Форма.ИспользоватьПооперационноеУправление Тогда
			
			Элементы.МаршрутнаяКарта.ТолькоПросмотр = Форма.НачатоВыполнениеОпераций;
			Элементы.КоэффициентМаршрутнойКарты.ТолькоПросмотр = Форма.НачатоВыполнениеОпераций;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	// Переработка на стороне
	#Область СпособПроизводства
	Если СтруктураРеквизитов.Свойство("СпособПроизводства") ИЛИ Инициализация Тогда
		
		Элементы.СтраницаТрудозатраты.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
		Элементы.ОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
		Элементы.ВыходныеИзделияПроизведено.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		Элементы.ПобочныеИзделияПроизведено.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		Элементы.ВыходныеИзделияАналитикаРасходов.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		Элементы.ПобочныеИзделияАналитикаРасходов.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		Элементы.ВыходныеИзделияНаправлениеВыпуска.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		Элементы.ПобочныеИзделияНаправлениеВыпуска.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
		Если Объект.ПроизводствоНаСтороне Тогда
			
			Если Форма.СозданЗаказПереработчику Тогда
				
				МассивСтрок = Новый Массив;
				ПредставлениеЗаказа = СтрШаблон(НСтр("ru = 'заказ переработчику № %1 от %2'"), 
											ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
													Форма.РеквизитыЗаказаПереработчика.Номер, Ложь, Истина),
											Формат(Форма.РеквизитыЗаказаПереработчика.Дата, "ДЛФ=D"));
											
				Если Форма.ПравоПросмотраЗаказаПереработчику Тогда
					СсылкаНаЗаказ = ПолучитьНавигационнуюСсылку(Форма.Объект.ЗаказПереработчику);
				Иначе
					СсылкаНаЗаказ = Неопределено;
				КонецЕсли;
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗаказа,,,, СсылкаНаЗаказ));
				
				Если НЕ Форма.РеквизитыЗаказаПереработчика.Проведен Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
												НСтр("ru = 'не проведен'"),, Форма.ЦветОсобогоТекста));
				КонецЕсли;
				ТекстЗаказ = Новый ФорматированнаяСтрока(МассивСтрок);
			ИначеЕсли Форма.ПравоДобавленияЗаказаПереработчику Тогда
				ТекстЗаказ = Новый ФорматированнаяСтрока(НСтр("ru = 'создать заказ переработчику'"),,,, "#СоздатьЗаказ");
			Иначе
				ТекстЗаказ = Новый ФорматированнаяСтрока(НСтр("ru = 'нет заказа переработчику'"));
			КонецЕсли; 
			
			Форма.НадписьЗаказПереработчику = Новый ФорматированнаяСтрока("(", ТекстЗаказ, ")");
			ВыходныеИзделияПолучательЗаголовок = НСтр("ru = 'Склад'");
		Иначе
			Форма.НадписьЗаказПереработчику = Новый ФорматированнаяСтрока("");
			ВыходныеИзделияПолучательЗаголовок = НСтр("ru = 'Получатель / статья и аналитика'");
		КонецЕсли; 
		
		Элементы.ВыходныеИзделияГруппаПолучатель.Заголовок = ВыходныеИзделияПолучательЗаголовок;
		Элементы.ПобочныеИзделияГруппаПолучатель.Заголовок = ВыходныеИзделияПолучательЗаголовок;
		
		МассивПараметровВыбора = Новый Массив;
		Если Объект.ПроизводствоНаСтороне Тогда
			// Нельзя передавать материалы переработчику из цеховой кладовой
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЦеховаяКладовая", Ложь));
		КонецЕсли;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		Если НЕ Объект.ПроизводствоНаСтороне Тогда
			МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		КонецЕсли;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТипов)));
		Элементы.ОбеспечениеМатериаламиИРаботамиСклад.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТипов)));
		Элементы.ВыходныеИзделияНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		Если Объект.ПроизводствоНаСтороне И Форма.СозданЗаказПереработчику 
			ИЛИ Форма.ИспользоватьПооперационноеУправление И Форма.НачатоВыполнениеОпераций Тогда
			
			Элементы.СпособПроизводства.ТолькоПросмотр = Истина;
		Иначе
			Элементы.СпособПроизводства.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		Элементы.ПобочныеИзделия_ЗаполнитьЦены.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
	КонецЕсли;
	#КонецОбласти
	
	// График производства
	#Область ГрафикПроизводства
	
	// Параметры планирования
	Если СтруктураРеквизитов.Свойство("СпособПланирования")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства") 
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаГрафикПроизводства.Видимость = Форма.ПланируетсяГрафикПроизводства;
		Элементы.ГруппаСпособПланирования.Видимость = Форма.ПланируетсяГрафикПроизводства;
		
		Если Форма.ПланируетсяГрафикПроизводства Тогда
			
			Элементы.ГруппаГрафикПроизводства.Доступность = Форма.ПравоРедактированияГрафикаПроизводства;
			Элементы.ГруппаСпособПланирования.Доступность = Форма.ПравоРедактированияГрафикаПроизводства
															И Объект.Статус <> СтатусЗавершен();
			
			Элементы.ГруппаДлительностьПроизводства.Видимость = НЕ Форма.Объект.РучноеРазмещениеВГрафике
																И НЕ Форма.Объект.ПланироватьРаботуВидовРабочихЦентров;
			
			Элементы.ГруппаРучноеРазмещениеВГрафикеББВУББВ.Видимость = Форма.Объект.РучноеРазмещениеВГрафике
																		И ДоступноПланированиеПоПроизводственнымРесурсам(Форма);
			
			Элементы.ГруппаРучноеРазмещениеВГрафикеУББВ.Видимость = Форма.Объект.РучноеРазмещениеВГрафике
																	И НЕ ДоступноПланированиеПоПроизводственнымРесурсам(Форма);
		
			Элементы.ГруппаПланироватьНеРанее.Доступность = Не Форма.Объект.РучноеРазмещениеВГрафике
															И Объект.Статус <> СтатусНачат()
															И Объект.Статус <> СтатусЗавершен();
			
		КонецЕсли;
		
		Элементы.СтраницаВидыРабочихЦентров.Видимость = НЕ Форма.Объект.РучноеРазмещениеВГрафике
														 И Форма.Объект.ПланироватьРаботуВидовРабочихЦентров 
														 И ДоступноПланированиеПоПроизводственнымРесурсам(Форма);
														 
		Элементы.СтраницаВидыРабочихЦентров.Доступность = Форма.ПравоРедактированияГрафикаПроизводства;
		
		Элементы.ГруппаДлительностьПроизводстваБезГрафика.Видимость = НЕ Форма.ПланируетсяГрафикПроизводства;
		Элементы.ГруппаДлительностьПроизводстваБезГрафика.Доступность = Форма.ПравоРедактированияГрафикаПроизводства;
		
	КонецЕсли;
	
	// Предварительный буфер
	Если СтруктураРеквизитов.Свойство("ПредварительныйБуфер") ИЛИ Инициализация Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияПредварительногоБуфера)
			И Форма.Объект.ПредварительныйБуфер <> 0 Тогда
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Завершающий буфер
	Если СтруктураРеквизитов.Свойство("ЗавершающийБуфер") ИЛИ Инициализация Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияЗавершающегоБуфера)
			И Форма.Объект.ЗавершающийБуфер <> 0 Тогда
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	// Единица измерения длительности этапа УББВ
	Если СтруктураРеквизитов.Свойство("ЕдиницаИзмеренияДлительностиЭтапа") ИЛИ Инициализация Тогда
		
		ЕдиницаИзмеренияДень = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День");
		
		Если Форма.Объект.ЕдиницаИзмеренияДлительностиЭтапа = ЕдиницаИзмеренияДень Тогда
			ТекстПодсказки = НСтр("ru = 'При планировании используется календарь работы подразделения.'");
		Иначе
			ТекстПодсказки = НСтр("ru = 'При планировании используется расписание работы подразделения.'");
		КонецЕсли;
		
		Если Форма.ПланируетсяГрафикПроизводства Тогда
			Форма.Элементы.ЕдиницаИзмеренияДлительностиЭтапа.Подсказка = ТекстПодсказки;
		Иначе
			Форма.Элементы.ЕдиницаИзмеренияДлительностиЭтапаБезГрафика.Подсказка = ТекстПодсказки;
		КонецЕсли;
		
	КонецЕсли;
		
	// Период планирования
	Если СтруктураРеквизитов.Свойство("ГрафикПроизводства")
		ИЛИ Инициализация Тогда
		
		ТекстПериодПроизводства = "";
		
		Если Форма.ПланируетсяГрафикПроизводства Тогда
			
			Если Форма.ГрафикПроизводства.Рассчитан Тогда
				
				ШаблонПериодПроизводства = НСтр("ru = 'с %1 по %2'");
				
				ТекстПериодПроизводства = СтрШаблон(ШаблонПериодПроизводства,
											Формат(Форма.ГрафикПроизводства.НачалоЭтапа, Форма.ФорматДатыГрафика),
											Формат(Форма.ГрафикПроизводства.ОкончаниеЭтапа, Форма.ФорматДатыГрафика));
				
			Иначе
				
				ТекстПериодПроизводства = НСтр("ru = '<график производства не рассчитан>'");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.НадписьПериодПроизводства = ТекстПериодПроизводства;
		
	КонецЕсли;
	
	// Планировать не ранее
	Если СтруктураРеквизитов.Свойство("ОтметкаПланироватьНеРанее")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПланирования")
		ИЛИ Инициализация Тогда
		
		Элементы.ПланироватьНеРанее.Доступность          = Форма.ОтметкаПланироватьНеРанее;
		Элементы.ПланироватьНеРанее.ФорматРедактирования = Форма.ФорматДатыГрафика;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Обеспечение, Расход, Экономия
	#Область Обеспечение_РасходМатериаловИРабот_ЭкономияМатериалов
	
	Если СтруктураРеквизитов.Свойство("РасходМатериаловИРабот")
		ИЛИ СтруктураРеквизитов.Свойство("ЭкономияМатериалов") 
		ИЛИ Инициализация Тогда
		
		РасходМатериаловИРаботКоличество = Форма.Объект.РасходМатериаловИРабот.Количество();
		ЭкономияМатериаловКоличество = Форма.Объект.ЭкономияМатериалов.Количество();
		
		Форма.КоличествоСтрокРасхода = РасходМатериаловИРаботКоличество + ЭкономияМатериаловКоличество;
		
		Если СтруктураРеквизитов.Свойство("РасходМатериаловИРабот") ИЛИ Инициализация Тогда
			Форма.НадписьРасходМатериаловИРабот = 
					НСтр("ru = 'Израсходованные материалы и работы'")
					+ ?(РасходМатериаловИРаботКоличество <> 0, " (" + РасходМатериаловИРаботКоличество + ")", "");
		КонецЕсли; 
				
		Если СтруктураРеквизитов.Свойство("ЭкономияМатериалов") ИЛИ Инициализация Тогда
			Форма.НадписьЭкономияМатериалов = 
					НСтр("ru = 'Неизрасходованные материалы'")
					+ ?(ЭкономияМатериаловКоличество <> 0, " (" + ЭкономияМатериаловКоличество + ")", "");
		КонецЕсли;
		
	КонецЕсли; 
	
	Если СтруктураРеквизитов.Свойство("СпособПроизводства") 
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		ВидимостьЭлементов = НЕ Форма.Объект.ПроизводствоНаСтороне 
							И (Форма.Объект.Статус = СтатусНачат() ИЛИ Форма.Объект.Статус = СтатусЗавершен());
							
		Элементы.СтраницаРасходМатериаловИРабот.Видимость = ВидимостьЭлементов;
		
	КонецЕсли;
	
	// Отгрузка одной датой и дата отгрузки
	Если СтруктураРеквизитов.Свойство("НеОтгружатьЧастями")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		// Если этап включен в заказ переработчику, 
		// то в этапе нельзя изменять режим ввода дат, 
		// т.к. он должен быть единым для всех этапов заказа
		Если Объект.ПроизводствоНаСтороне Тогда
			
			Если Форма.СозданЗаказПереработчику И НЕ Объект.НеОтгружатьЧастями Тогда
				Элементы.НеОтгружатьЧастями.Видимость = Ложь;
			Иначе
				Элементы.НеОтгружатьЧастями.Видимость = Истина;
			КонецЕсли;
			
			Элементы.НеОтгружатьЧастями.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			Элементы.ДатаОтгрузки.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			
		КонецЕсли;
		
		Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
		Элементы.ОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Спецификация") ИЛИ Инициализация Тогда
		Элементы.Обеспечение_ПоказатьНормативы.Видимость = НЕ Форма.Объект.Спецификация.Пустая();
		Элементы.Обеспечение_ЗаполнитьПоСпецификации.Видимость = НЕ Форма.Объект.Спецификация.Пустая();
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПоказатьНормативы") ИЛИ Инициализация Тогда
		Элементы.ОбеспечениеМатериаламиИРаботамиНорматив.Видимость = Форма.ПоказатьНормативы;
		Элементы.Обеспечение_ПоказатьНормативы.Пометка = Форма.ПоказатьНормативы;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЕстьУточненияМатериалов") ИЛИ Инициализация Тогда
		Элементы.ГруппаУточнениеМатериалов.Видимость = Форма.ЕстьУточненияМатериалов;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЖелаемаяДатаОбеспечения") 
		ИЛИ СтруктураРеквизитов.Свойство("ГрафикПроизводства")
		ИЛИ Инициализация Тогда
		
		ПеренестиЖелаемуюДату = Форма.ПланируетсяГрафикПроизводства
			И ЗначениеЗаполнено(Форма.ГрафикПроизводства.НачалоЭтапа)
			И Форма.Объект.ЖелаемаяДатаОбеспечения <> НачалоДня(Форма.ГрафикПроизводства.НачалоЭтапа);
		
		Форма.Элементы.ПеренестиЖелаемуюДатуОбеспечения.Видимость = ПеренестиЖелаемуюДату;
		
		Если ПеренестиЖелаемуюДату Тогда
			
			Форма.Элементы.ПеренестиЖелаемуюДатуОбеспечения.Заголовок = СтрШаблон(
				НСтр("ru = 'установить %1 (по графику)'"),
				Формат(Форма.ГрафикПроизводства.НачалоЭтапа, "ДЛФ=D"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("РасходОднойДатой")
		ИЛИ Инициализация Тогда
		
		Элементы.ДатаРасхода.Видимость = Объект.РасходОднойДатой;
		Элементы.РасходМатериаловИРаботДатаРасхода.Видимость = НЕ Объект.РасходОднойДатой;
		Элементы.ЭкономияМатериаловДатаОперации.Видимость = НЕ Объект.РасходОднойДатой;
		Элементы.РасходМатериаловИРабот_ЗаполнитьДатуРасхода.Видимость = НЕ Объект.РасходОднойДатой;
		Элементы.ЭкономияМатериалов_ЗаполнитьДату.Видимость = НЕ Объект.РасходОднойДатой;
		
	КонецЕсли;
		
	#КонецОбласти
	
	// Выходные изделия
	#Область ВыходныеИзделия_ПобочныеИзделия
	
	Если СтруктураРеквизитов.Свойство("ВыходныеИзделия")
		ИЛИ СтруктураРеквизитов.Свойство("ПобочныеИзделия") 
		ИЛИ Инициализация Тогда
		
		Форма.ВыходныеИзделияКоличество = Форма.Объект.ВыходныеИзделия.Количество();
		Форма.ПобочныеИзделияКоличество = Форма.Объект.ПобочныеИзделия.Количество();
		
		Форма.КоличествоВыходныхИзделий = Форма.ВыходныеИзделияКоличество + Форма.ПобочныеИзделияКоличество;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ВыходныеИзделия") ИЛИ Инициализация Тогда
		Форма.НадписьПродукция = 
				НСтр("ru = 'Продукция по рассчитываемой стоимости'")
				+ ?(Форма.ВыходныеИзделияКоличество <> 0, " (" + Форма.ВыходныеИзделияКоличество + ")", "");
	КонецЕсли; 
	
	Если СтруктураРеквизитов.Свойство("ПобочныеИзделия") ИЛИ Инициализация Тогда
		Форма.НадписьПобочныеИзделия = 
				НСтр("ru = 'Побочный и промежуточный выпуск по фиксированной стоимости'")
				+ ?(Форма.ПобочныеИзделияКоличество <> 0, " (" + Форма.ПобочныеИзделияКоличество + ")", "");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЭтоВыпускающийЭтап")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаПродукция.Видимость = ЭтоВыпускающийЭтап(Форма)
			ИЛИ Форма.Объект.ВыходныеИзделия.Количество() > 0;
		Если НЕ Элементы.ГруппаПродукция.Видимость Тогда
			Элементы.ГиперСсылкаНадписьПобочныеИзделия.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// Производство одной датой и дата производства
	Если СтруктураРеквизитов.Свойство("ПроизводствоОднойДатой")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		// Если этап включен в заказ переработчику, 
		// то в этапе нельзя изменять режим ввода дат, 
		// т.к. он должен быть единым для всех этапов заказа
		Если Объект.ПроизводствоНаСтороне Тогда
			
			Если Форма.СозданЗаказПереработчику И НЕ Объект.ПроизводствоОднойДатой Тогда 
				Элементы.ПроизводствоОднойДатой.Видимость = Ложь;
			Иначе
				Элементы.ПроизводствоОднойДатой.Видимость = Истина;
			КонецЕсли;
			
			Элементы.ДатаПроизводства.Видимость = Объект.ПроизводствоОднойДатой;
			
			Элементы.ВыходныеИзделияДатаПроизводства.Видимость = Не Объект.ПроизводствоОднойДатой;
			Элементы.ПобочныеИзделияДатаПроизводства.Видимость = Не Объект.ПроизводствоОднойДатой;
			
			Элементы.ПроизводствоОднойДатой.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			Элементы.ДатаПроизводства.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			
		Иначе
			
			НачатоПроизводство = Объект.Статус = СтатусНачат() Или Объект.Статус = СтатусЗавершен();
			
			Элементы.ПроизводствоОднойДатой.Видимость = НачатоПроизводство;
			Элементы.ДатаПроизводства.Видимость = Объект.ПроизводствоОднойДатой И НачатоПроизводство;
			
			Элементы.ВыходныеИзделияДатаПроизводства.Видимость = Не Объект.ПроизводствоОднойДатой И НачатоПроизводство;
			Элементы.ПобочныеИзделияДатаПроизводства.Видимость = Не Объект.ПроизводствоОднойДатой И НачатоПроизводство;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Выполнение
	#Область ВыполнениеЭтапа
	
	// Группа "Выполнение этапа"
	Если СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаВыполнение.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
	КонецЕсли;
	
	// Сроки выполнения
	Если СтруктураРеквизитов.Свойство("НачатоВыполнениеЭтапа")
		ИЛИ СтруктураРеквизитов.Свойство("ЗавершеноВыполнениеЭтапа")
		ИЛИ Инициализация Тогда
		
		Элементы.ФактическоеНачалоЭтапа.АвтоОтметкаНезаполненного = Форма.НачатоВыполнениеЭтапа;
		Элементы.ФактическоеОкончаниеЭтапа.АвтоОтметкаНезаполненного = Форма.ЗавершеноВыполнениеЭтапа;
		
	КонецЕсли;
	
	// Фактическое начало этапа
	Если СтруктураРеквизитов.Свойство("НачатоВыполнениеЭтапа")
		ИЛИ Инициализация Тогда
		
		Элементы.ФактическоеНачалоЭтапа.ТолькоПросмотр = НЕ Форма.НачатоВыполнениеЭтапа;
		
	КонецЕсли;
	
	// Фактическое окончание этапа
	Если СтруктураРеквизитов.Свойство("ЗавершеноВыполнениеЭтапа")
		ИЛИ Инициализация Тогда
		
		Элементы.ФактическоеОкончаниеЭтапа.ТолькоПросмотр = НЕ Форма.ЗавершеноВыполнениеЭтапа;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Команда Производство_ЗаполнитьПоОперациям
	#Область Команда_Производство_ЗаполнитьПоОперациям
	Если СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ СтруктураРеквизитов.Свойство("ТребуетсяЗаполнитьПоОперациям")
		ИЛИ Инициализация Тогда
		
		// видимость элементов
		ВидимостьЭлементов = Форма.ИспользоватьПооперационноеУправление И Не Форма.Объект.ПроизводствоНаСтороне;
		
		Элементы.ФормаЗаполнитьПоОперациям.Видимость = ВидимостьЭлементов;
		Элементы.ФормаВыполнениеОпераций.Видимость   = ВидимостьЭлементов;
		
		Элементы.ТребуетсяЗаполнитьПоОперациям.Видимость = ВидимостьЭлементов И Форма.ТребуетсяЗаполнитьПоОперациям;
		
		// доступность элементов
		ДоступностьЭлементов = УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(
			Форма.Объект.Статус, СтатусНачат()) >= 0;
		
		Элементы.ФормаЗаполнитьПоОперациям.Доступность = ДоступностьЭлементов;
		Элементы.ФормаВыполнениеОпераций.Доступность   = ДоступностьЭлементов;
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, Текст = "", ТекущиеДанные = Неопределено)
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения
		И ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
		Если ПараметрыФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ВыборСерии", Истина);
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	НуженСерверныйВызов = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
							ЭтаФорма, 
							ПараметрыУказанияСерий[ИмяТЧ], 
							Текст, 
							ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий", 
											ПараметрыУказанияСерий[ИмяТЧ], ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтаФорма,,,,
						ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(
				ДополнительныеПараметры.ПараметрыУказанияСерий, 
				ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия"
		ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = "ПобочныеИзделия"
		ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = "ЭкономияМатериалов" Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
				Неопределено, 
				ПараметрыУказанияСерий.ИмяТЧТовары, 
				СтруктураДействий);
	Иначе
		СтруктураДействий = Неопределено;
	КонецЕсли; 
	
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ПараметрыФормыУказанияСерий, 
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(
					Объект, 
					ПараметрыУказанияСерий[ИмяТЧ], 
					ТекущиеДанныеИдентификатор, 
					ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИмяТЧ, ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий[ИмяТЧ], ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер(СписокТЧ = Неопределено, ОбновитьПараметрыУказанияСерий = Ложь)
	
	Если ОбновитьПараметрыУказанияСерий Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЭтапПроизводства2_2));
		УстановитьВидимостьЭлементовСерий();
	КонецЕсли; 
	
	Если СписокТЧ <> Неопределено Тогда
		МассивТЧ = СтрРазделить(СписокТЧ, ",");
		Для каждого ИмяТЧ Из МассивТЧ Цикл
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ]);
		КонецЦикла; 
	Иначе
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ПобочныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ЭкономияМатериалов);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ОбеспечениеМатериаламиИРаботамиСерия.Видимость = ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры;
	Элементы.Обеспечение_ЗаполнитьСерииПоFEFO.Видимость = ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры;
	
	Элементы.ЭкономияМатериаловСерия.Видимость = ПараметрыУказанияСерий.ЭкономияМатериалов.ИспользоватьСерииНоменклатуры;
	Элементы.РасходМатериаловИРаботСерия.Видимость = ПараметрыУказанияСерий.РасходМатериаловИРабот.ИспользоватьСерииНоменклатуры;
	
	Элементы.ВыходныеИзделияСерия.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ВыходныеИзделияСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ВыходныеИзделия_УказатьСерии.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	
	Элементы.ПобочныеИзделияСерия.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ПобочныеИзделияСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ПобочныеИзделия_УказатьСерии.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()

	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.ОбеспечениеМатериаламиИРаботами);

КонецФункции

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()
	
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.ОбеспечениеМатериаламиИРаботами) Тогда
		
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);	
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFOЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Результат Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Статус

&НаСервере
Процедура ОбработатьНачалоВыполненияЭтапа()
	
	ИзмененныеРеквизиты = "";
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
				НачатоВыполнениеЭтапа, 
				Объект.ФактическоеНачалоЭтапа);

	ДобавитьВСписокИзмененныхРеквизитов(
				ИзмененныеРеквизиты, 
				"НачатоВыполнениеЭтапа");

	Если НЕ НачатоВыполнениеЭтапа
		И ЗначениеЗаполнено(Объект.ФактическоеОкончаниеЭтапа) Тогда
		
		ЗавершеноВыполнениеЭтапа = Ложь;
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					ЗавершеноВыполнениеЭтапа, 
					Объект.ФактическоеОкончаниеЭтапа);
		
		ДобавитьВСписокИзмененныхРеквизитов(
					ИзмененныеРеквизиты, 
					"ЗавершеноВыполнениеЭтапа");
		
	КонецЕсли;
	
	ОбработатьИзменениеОтметкиВыполнения(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеВыполненияЭтапа()
	
	ИзмененныеРеквизиты = "";
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
				ЗавершеноВыполнениеЭтапа, 
				Объект.ФактическоеОкончаниеЭтапа,
				,
				Истина);
	
	ДобавитьВСписокИзмененныхРеквизитов(
				ИзмененныеРеквизиты, 
				"ЗавершеноВыполнениеЭтапа");
	
	Если ЗавершеноВыполнениеЭтапа И НЕ НачатоВыполнениеЭтапа Тогда
		
		НачатоВыполнениеЭтапа = Истина;
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					НачатоВыполнениеЭтапа, 
					Объект.ФактическоеНачалоЭтапа);
		
		ДобавитьВСписокИзмененныхРеквизитов(
					ИзмененныеРеквизиты, 
					"НачатоВыполнениеЭтапа");
	
	КонецЕсли;
	
	ОбработатьИзменениеОтметкиВыполнения(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтметкиВыполнения(СписокРеквизитов = "")
	
	ДанныеЗаполнения = ДанныеЗаполненияПриИзмененииСтатуса();
	
	ИзмененныеРеквизиты = УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииОтметкиВыполнения(
		Объект,
		ДанныеЗаполнения);
	
	ДобавитьВСписокИзмененныхРеквизитов(
		СписокРеквизитов,
		ИзмененныеРеквизиты);
	
	Если ТекущийСтатус <> Объект.Статус Тогда
		
		ПослеИзмененияСтатусаНаСервере(СписокРеквизитов);
		
	Иначе
		
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтатусаНаСервере()
	
	ДанныеЗаполнения = ДанныеЗаполненияПриИзмененииСтатуса();
	
	ИзмененныеРеквизиты = УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
		Объект, 
		ТекущийСтатус, 
		ДанныеЗаполнения);
	
	ПослеИзмененияСтатусаНаСервере(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияСтатусаНаСервере(ИзмененныеРеквизиты = "")

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЭтапПроизводства2_2));
	
	УстановитьВидимостьЭлементовСерий();
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ИзмененныеРеквизиты);

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИзмененныеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводствоИПланирование

#Область ГрафикПроизводства

&НаСервере
Функция ПараметрыФормыРучногоРазмещенияЭтапаВГрафике()
	
	Результат = УправлениеПроизводством.ПараметрыФормыРучногоРазмещенияЭтапаВГрафике(Объект, УникальныйИдентификатор);
	
	Результат.ГрафикПроизводства = ГрафикПроизводства;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГрафикПроизводства(ДанныеЗаполнения = Неопределено)
	
	ГрафикПроизводства = Неопределено;
	
	Если ПланируетсяГрафикПроизводства Тогда
		
		Если ДанныеЗаполнения = Неопределено Тогда
			ГрафикПроизводства = Документы.ЭтапПроизводства2_2.ГрафикПроизводства(Объект.Ссылка);
		Иначе
			ГрафикПроизводства = ДанныеРучноеРазмещениеВГрафике(ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПлановуюДатуПоступления();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлановуюДатуПоступления()
	
	ПредыдущееЗначение = ПлановаяДатаПоступления;
	
	Если ПланируетсяГрафикПроизводства Тогда
		ПлановаяДатаПоступления = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступленияПоГрафику(ГрафикПроизводства);
	Иначе
		ПлановаяДатаПоступления = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступления(Объект.Ссылка);
	КонецЕсли;
	
	ОбновитьПлановыеДатыПоступления(ПлановаяДатаПоступления, ПредыдущееЗначение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеРучноеРазмещениеВГрафике(ДанныеЗаполнения)
	
	СтруктураРазмещения = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();
	
	ЗаполнитьЗначенияСвойств(СтруктураРазмещения, ДанныеЗаполнения);
	
	Возврат СтруктураРазмещения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеРучногоРазмещения(ДанныеЗаполнения = Неопределено)
	
	Объект.ЗанятостьВидовРабочихЦентров.Очистить();
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		ЗаполнитьГрафикПроизводства(ДанныеЗаполнения.ДанныеРучноеРазмещениеВГрафике);
		
		Если ЭтоАдресВременногоХранилища(ДанныеЗаполнения.АдресЗанятоЭтапом) Тогда
			
			ЗанятоЭтапом = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресЗанятоЭтапом);
			Объект.ЗанятостьВидовРабочихЦентров.Загрузить(ЗанятоЭтапом);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗанятоЭтапом = РегистрыНакопления.ДоступностьВидовРабочихЦентров.ЗанятоЭтапом(Объект.Ссылка);
		Объект.ЗанятостьВидовРабочихЦентров.Загрузить(ЗанятоЭтапом);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПлановыеДатыПоступления(НовоеЗначение, ПредыдущееЗначение)
	
	// После ручного изменения графика, необходимо обновить плановые даты произодства
	Если ПредыдущееЗначение = Неопределено
		 ИЛИ ПредыдущееЗначение = НовоеЗначение
		 ИЛИ НЕ ПланируетсяГрафикПроизводства
		 ИЛИ НЕ Объект.РучноеРазмещениеВГрафике
		 ИЛИ Объект.Статус <> СтатусНачат() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПроизводствоОднойДатой
		И Объект.ДатаПроизводства = ПредыдущееЗначение Тогда
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					Истина, 
					Объект.ДатаПроизводства,
					НовоеЗначение,
					Истина);
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("Произведено", Ложь);
	СтруктураОтбора.Вставить("ДатаПроизводства", ПредыдущееЗначение);
	
	ИменаТаблиц = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		Для Каждого Строка Из Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора) Цикл
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
						Истина, 
						Строка.ДатаПроизводства,
						НовоеЗначение,
						Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеРучногоРазмещения()
	
	ЗаполнитьГрафикПроизводства();
	
	Объект.ЗанятостьВидовРабочихЦентров.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюСохранитьГрафикПроизводства(ТекущийОбъект)
	
	Если Не ПланируетсяГрафикПроизводства ИЛИ Не Объект.РучноеРазмещениеВГрафике Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГрафикПроизводства", ГрафикПроизводства);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагЗаполненоАвтоматически(ТекущийОбъект)
	
	Если Модифицированность Тогда
		Значение = Ложь;
	Иначе
		Значение = ТекущийОбъект.ЗаполненоАвтоматически;
	КонецЕсли;
	
	ТекущийОбъект.УстановитьФлагЗаполненоАвтоматически(Значение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагЗаполненоПоПроизводственнымОперациям(Знач ТекущийОбъект)
	
	Если Не ИспользоватьПооперационноеУправление Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НомерЗаданияКЗаполнениюЭтаповПроизводства > 0 Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаполненПоОперациям", НомерЗаданияКЗаполнениюЭтаповПроизводства);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиРазмещенияЭтапаВГрафике(Отказ)
	
	Если Не ПланируетсяГрафикПроизводства ИЛИ Не Объект.РучноеРазмещениеВГрафике Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = "СпособПланирования";
	
	УправлениеПроизводствомКлиентСервер.ПроверитьРазмещениеЭтапаВГрафике(
		ГрафикПроизводства, 
		Объект.Ссылка, 
		ПутьКДанным, 
		Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СпособыПланирования

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСпособПланирования(Форма)
	
	Если НЕ Форма.ПланируетсяГрафикПроизводства Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.РучноеРазмещениеВГрафике Тогда
		
		Возврат СпособПланированияВручную();
		
	ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров 
				И ДоступноПланированиеПоПроизводственнымРесурсам(Форма) Тогда
		
		Возврат СпособПланированияПоДоступности();
		
	Иначе
		
		Возврат СпособПланированияПоОбщейДлительности();
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСпособыПланирования(Форма)
	
	Если НЕ Форма.ПланируетсяГрафикПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Форма.Элементы.СпособПланирования.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(0, НСтр("ru = 'по общей длительности'"));
	
	Если ДоступноПланированиеПоПроизводственнымРесурсам(Форма) Тогда
		
		СписокВыбора.Добавить(1, НСтр("ru = 'по доступности ВРЦ'"));
		
	КонецЕсли;
	
	СписокВыбора.Добавить(2, НСтр("ru = 'вручную'"));
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСпособаПланирования(ДанныеЗаполнения = Неопределено)
	
	Объект.ПланироватьРаботуВидовРабочихЦентров = (СпособПланирования = СпособПланированияПоДоступности());
	Объект.РучноеРазмещениеВГрафике = (СпособПланирования = СпособПланированияВручную());
	
	Если Объект.РучноеРазмещениеВГрафике Тогда
		Объект.ПланироватьНеРанее = '00010101';
		ОтметкаПланироватьНеРанее = Ложь;
		ЗаполнитьДанныеРучногоРазмещения(ДанныеЗаполнения);
	Иначе
		ОчиститьДанныеРучногоРазмещения();
	КонецЕсли;
	
	Если Объект.РучноеРазмещениеВГрафике И ДанныеЗаполнения <> Неопределено Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СпособПланирования, ГрафикПроизводства");
	Иначе
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СпособПланирования");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СпособыПроизводства

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСпособПроизводства(Форма)
	
	Возврат Число(Форма.Объект.ПроизводствоНаСтороне);
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеСпособаПроизводстваНаСервере()

	Объект.ПроизводствоНаСтороне = (СпособПроизводства = СпособПроизводстваНаСтороне());
	
	Если Объект.ПроизводствоНаСтороне Тогда
		ПриВыбореСпособаПроизводствоНаСтороне();
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерийСервер("ВыходныеИзделия,ПобочныеИзделия", Истина);
	
	ЗаполнитьСпособыПланирования(ЭтаФорма);
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СпособПроизводства");
	УстановитьВидимостьКомандВводаНаОсновании();

КонецПроцедуры

#КонецОбласти

#Область ПроизводствоНаСтороне

&НаСервере
Процедура ЗаполнитьРеквизитыЗаказаПереработчика()
	
	СозданЗаказПереработчику = Объект.ПроизводствоНаСтороне И Не Объект.ЗаказПереработчику.Пустая();
	
	Если СозданЗаказПереработчику Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЗаказПереработчику, "Номер,Дата,Проведен");
		РеквизитыЗаказаПереработчика = Новый ФиксированнаяСтруктура(РеквизитыЗаказа);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		РеквизитыЗаказаПереработчика = Новый ФиксированнаяСтруктура;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъектИСоздатьЗаказПереработчику(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован") Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");
	КонецЕсли;
	
	Если Записать() Тогда
		СоздатьЗаказПереработчику();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказПереработчику()

	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ЗаказПереработчику.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

// Изменяет данные этапа которые не доступны при переработке на стороне
//
&НаСервере
Процедура ПриВыбореСпособаПроизводствоНаСтороне()

	Объект.ПланироватьРаботуВидовРабочихЦентров = Ложь;
	СпособПланирования = ПолучитьСпособПланирования(ЭтаФорма);
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ВыходныеИзделия");
	СписокТЧ.Добавить("ПобочныеИзделия");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		Для каждого ДанныеСтроки Из Объект[ИмяТЧ] Цикл
			ДанныеСтроки.СписатьНаРасходы = Ложь;
			ДанныеСтроки.СтатьяРасходов = Неопределено;
			ДанныеСтроки.АналитикаРасходов = Неопределено;
			ДанныеСтроки.Произведено = Ложь;
			ДанныеСтроки.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
			Если ТипЗнч(ДанныеСтроки.Получатель) <> Тип("СправочникСсылка.Склады") Тогда
				ДанныеСтроки.Получатель = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область Состояние

&НаСервере
Процедура ЗаполнитьСостояниеВыполненияОпераций()
	
	НачатоВыполнениеОпераций      = Ложь;
	ТребуетсяЗаполнитьПоОперациям = Ложь;
	НомерЗаданияКЗаполнениюЭтаповПроизводства = 0;
	
	Если НЕ ИспользоватьПооперационноеУправление
		ИЛИ Объект.ПроизводствоНаСтороне
		ИЛИ Объект.Статус = СтатусФормируется()
		ИЛИ Объект.Статус = СтатусСформирован()
		ИЛИ Объект.Статус = СтатусКВыполнению() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Этап = &Этап
		|	И Операции.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ЗаданияКЗаполнениюЭтаповПроизводства КАК ЗаданияКЗаполнениюЭтаповПроизводства
		|ГДЕ
		|	ЗаданияКЗаполнениюЭтаповПроизводства.ЭтапПроизводства = &Этап");
		
	Запрос.УстановитьПараметр("Этап", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НачатоВыполнениеОпераций      = Не РезультатЗапроса[0].Пустой();
	ТребуетсяЗаполнитьПоОперациям = Не РезультатЗапроса[1].Пустой();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоВидовРабочихЦентров(Форма)
	
	Форма.ВидыРабочихЦентровКоличество = Форма.ВидыРабочихЦентров.ПолучитьЭлементы().Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступноПланированиеПоПроизводственнымРесурсам(Форма)
	
	Возврат Форма.ИспользуетсяПланированиеПоПроизводственнымРесурсам
			И НЕ Форма.Объект.ПроизводствоНаСтороне;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСпецификацию()
	
	Если ЗначениеЗаполнено(Объект.Спецификация) Тогда
		ПоказатьЗначение(, Объект.Спецификация)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЭтапы()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Распоряжение", Объект.Распоряжение);
	ПараметрыФормы.Вставить("ВыпускающийЭтап", Объект.ВыпускающийЭтап);
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.ПоследовательностьЭтапов",
		ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРучногоРедактированияГрафика()
	
	Если НЕ ПланируетсяГрафикПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОткрываемойФормы = "Документ.ЭтапПроизводства2_2.Форма.РучноеРазмещениеВГрафике";
	
	ПараметрыФормы = ПараметрыФормыРучногоРазмещенияЭтапаВГрафике();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОткрытьФормуРучногоРедактированияГрафикаЗавершение", 
				ЭтотОбъект);
	
	ОткрытьФорму(
			ИмяОткрываемойФормы, 
			ПараметрыФормы, 
			ЭтаФорма,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРучногоРедактированияГрафикаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено
		И РезультатЗакрытия.РучноеРазмещениеВГрафике Тогда
		
		СпособПланирования = СпособПланированияВручную(); 
		
		ОбработатьИзменениеСпособаПланирования(РезультатЗакрытия);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыборВариантОбеспечения(ТекущиеДанные)

	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
			
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
	Иначе

		ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
										"ОбеспечениеМатериаламиИРаботами", 
										НСтр("ru = 'Обеспечение'"));
		
		ПараметрыПроверки.Поля.Вставить("Склад", "Объект.ОбеспечениеМатериаламиИРаботами[%1].Склад");
		ПараметрыПроверки.Тексты.Вставить("Склад", НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Обеспечение материалами и работами""'"));
			
		ПараметрыПроверки.Поля.Удалить("Подразделение");
		
		НетОшибок = ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
						Объект, 
						Объект.ОбеспечениеМатериаламиИРаботами, 
						Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока, 
						ПараметрыПроверки);
			
		Если НетОшибок Тогда
			                              	
			ПараметрыФормы = ПараметрыВыбораОбеспечения();
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
			Иначе
				Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
								ПараметрыФормы, 
								"ОбеспечениеМатериаламиИРаботами",
								НСтр("ru = 'Обеспечение'"));
								ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)

	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		Элемент.Вставить("Идентификатор", Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
	КонецЦикла;
	
	ИсходныйСтатус = Объект.Статус;
	
	ТекстОповещения = Документы.ЭтапПроизводства2_2.ЗаполнитьВариантОбеспечения(
							Объект, 
							ЭтаФорма, 
							"СтрокаТовары", 
							ВыбранноеЗначение, 
							ПараметрыУказанияСерий);
							
	Если ИсходныйСтатус <> Объект.Статус Тогда
		ОбработатьИзменениеСтатусаНаСервере();
	КонецЕсли;
	
	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеЭтапа(ВыбранноеЗначение)

	ТаблицаОбеспечения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	
	ИсходныйСтатус = Объект.Статус;
	
	ТекстОповещения    = Документы.ЭтапПроизводства2_2.ЗаполнитьВариантОбеспечения(
							Объект, 
							ЭтаФорма, 
							"Заказ", 
							ТаблицаОбеспечения, 
							ПараметрыУказанияСерий);

	Если ИсходныйСтатус <> Объект.Статус Тогда
		ОбработатьИзменениеСтатусаНаСервере();
	КонецЕсли;
	
	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение)
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	
	ПутиКДанным = УправлениеПроизводством.ПутиКДаннымДляОбеспечения();
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыМатериаловВПроизводство);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
	ПараметрыДокумента.Вставить("СтатусКВыполнению", Объект.Статус <> СтатусФормируется() И Объект.Статус <> СтатусСформирован());
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки,
		Объект,
		Объект.ОбеспечениеМатериаламиИРаботами,
		ПараметрыЗаполнения,
		ПараметрыДокумента);
	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура(
			"Ошибки",
			ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
				Таблица, "ОбеспечениеМатериаламиИРаботами", НСтр("ru = 'Обеспечение'")));
	КонецЕсли;
	
	ИсходныйСтатус = Объект.Статус;
	
	//Перенос результатов в документ.
	ТекстОповещения = Документы.ЭтапПроизводства2_2.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыУказанияСерий);
	
	Если ИсходныйСтатус <> Объект.Статус Тогда
		ОбработатьИзменениеСтатусаНаСервере();
	КонецЕсли;
	
	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);
	
КонецФункции

&НаСервере
Функция ПараметрыВыбораОбеспечения()

	ТекущаяСтрока = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока;
	
	Результат = УправлениеПроизводством.ПараметрыВыбораОбеспечения(Объект, ТекущаяСтрока);
	
	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ПолучитьОбъектОснования()
	
	ОбъектОснования = Объект.Ссылка;
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("ОбъектОснования", ОбъектОснования);
	СтруктураОтвета.Вставить("Проведен", ОбъектОснования.Проведен);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура Обеспечение_ЗаполнитьПоСпецификацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьОбеспечениеПоСпецификацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбеспечениеПоСпецификацииНаСервере()

	Объект.ОбеспечениеМатериаламиИРаботами.Очистить();
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("МатериалыИУслуги");
	ДанныеСпецификации = ПолучитьДанныеСпецификации(ПереченьДанных);
	Если ДанныеСпецификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПолей = Новый Структура;
	СоответствиеПолей.Вставить("КлючСвязиСпецификация", "КлючСвязи");
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(Объект.ОбеспечениеМатериаламиИРаботами, ДанныеСпецификации.МатериалыИУслуги, СоответствиеПолей);
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами");
	
	ПроверитьНаличиеУточненийМатериалов();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЕстьУточненияМатериалов");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьНормативыПриИзмененииНаСервере()

	ЗаполнитьИнформациюОНормативах();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказатьНормативы");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОНормативах()

	Если НЕ ПоказатьНормативы Тогда
		Возврат;
	КонецЕсли;
	
	МатериалыИУслугиЭтапа = МатериалыИУслугиЭтапа();
	Если МатериалыИУслугиЭтапа = Неопределено Тогда
		Для каждого ТекущиеДанные Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
			ТекущиеДанные.Норматив = 0;
		КонецЦикла;
		Возврат;
	КонецЕсли; 
	
	ДанныеСтрокСУпаковками = Новый Массив;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
	Для каждого ТекущиеДанные Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
			ИЛИ ТекущиеДанные.ХарактеристикиИспользуются 
				И НЕ ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
			ТекущиеДанные.Норматив = 0;
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
  		СписокСтрок = МатериалыИУслугиЭтапа.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ТекущиеДанные.Норматив = СписокСтрок[0].Количество;
			Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
				ДанныеСтрокСУпаковками.Добавить(ТекущиеДанные);
			КонецЕсли; 
		Иначе
			ТекущиеДанные.Норматив = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеСтрокСУпаковками.Количество() <> 0 Тогда
		КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(ДанныеСтрокСУпаковками);
		Для каждого ТекущиеДанные Из ДанныеСтрокСУпаковками Цикл
			КоэффициентУпаковки = КоэффициентыУпаковок.Получить(ТекущиеДанные.Номенклатура).Получить(ТекущиеДанные.Упаковка);
			ТекущиеДанные.Норматив = ТекущиеДанные.Норматив / КоэффициентУпаковки;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция МатериалыИУслугиЭтапа()

	Если ЭтоАдресВременногоХранилища(АдресХранилищаНормативыМатериалов) Тогда
		МатериалыИУслугиЭтапа = ПолучитьИзВременногоХранилища(АдресХранилищаНормативыМатериалов);
	Иначе
		ПереченьДанных = Новый Массив;
		ПереченьДанных.Добавить("МатериалыИУслуги");
		ДанныеСпецификации = ПолучитьДанныеСпецификации(ПереченьДанных);
		Если ДанныеСпецификации = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		МатериалыИУслугиЭтапа = ДанныеСпецификации.МатериалыИУслуги.Скопировать(, "Номенклатура,Характеристика,Количество");
		МатериалыИУслугиЭтапа.Свернуть("Номенклатура,Характеристика", "Количество");
		АдресХранилищаНормативыМатериалов = ПоместитьВоВременноеХранилище(МатериалыИУслугиЭтапа, УникальныйИдентификатор);
	КонецЕсли;

	Возврат МатериалыИУслугиЭтапа;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНормативыПриИзмененииСтрок(Знач МассивДанных, Знач АдресХранилищаНормативыМатериалов)

	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилищаНормативыМатериалов) Тогда
		Нормативы = Новый Массив;
		Для каждого ДанныеСтроки Из МассивДанных Цикл
			Нормативы.Добавить(0);
		КонецЦикла;
		Возврат Нормативы;
	КонецЕсли;
	
	МатериалыИУслугиЭтапа = ПолучитьИзВременногоХранилища(АдресХранилищаНормативыМатериалов);
	
	Нормативы = Новый Массив;
	
	ДанныеСтрокСУпаковками = Новый Массив;
	СоответствиеСтрокСУпаковками = Новый Соответствие;
	НомерСтрокиСУпаковкой = 0;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
	Для ИсходныйНомерСтроки = 0 По МассивДанных.ВГраница() Цикл
		ДанныеСтроки = МассивДанных[ИсходныйНомерСтроки];
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
			ИЛИ ДанныеСтроки.ХарактеристикиИспользуются 
				И НЕ ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
			Нормативы.Добавить(0);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
		СписокСтрок = МатериалыИУслугиЭтапа.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			
			Нормативы.Добавить(СписокСтрок[0].Количество);
			Если ЗначениеЗаполнено(ДанныеСтроки.Упаковка) Тогда
				ДанныеСтрокСУпаковками.Добавить(ДанныеСтроки);
				СоответствиеСтрокСУпаковками.Вставить(НомерСтрокиСУпаковкой, ИсходныйНомерСтроки);
				НомерСтрокиСУпаковкой = НомерСтрокиСУпаковкой + 1;
			КонецЕсли;
			
		Иначе
			Нормативы.Добавить(0);
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ДанныеСтрокСУпаковками.Количество() <> 0 Тогда
		КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(ДанныеСтрокСУпаковками);
		Для Сч = 0 По ДанныеСтрокСУпаковками.ВГраница() Цикл
			ИсходныйНомерСтроки = СоответствиеСтрокСУпаковками.Получить(Сч);
			ТекущиеДанные = МассивДанных[ИсходныйНомерСтроки];
			КоэффициентУпаковки = КоэффициентыУпаковок.Получить(ТекущиеДанные.Номенклатура).Получить(ТекущиеДанные.Упаковка);
			Нормативы[ИсходныйНомерСтроки] = Нормативы[ИсходныйНомерСтроки] / КоэффициентУпаковки;
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Нормативы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНормативыВСтроках(МассивСтрок)

	Если НЕ ПоказатьНормативы Тогда
		Возврат;
	КонецЕсли; 
	
	МассивДанных = Новый Массив;
	Для каждого ТекущиеДанные Из МассивСтрок Цикл
		ДанныеСтроки = Новый Структура("Номенклатура,Характеристика,ХарактеристикиИспользуются,Упаковка");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
		МассивДанных.Добавить(ДанныеСтроки);
	КонецЦикла; 
	
	Нормативы = ПолучитьНормативыПриИзмененииСтрок(МассивДанных, АдресХранилищаНормативыМатериалов);
	Для Сч = 0 По МассивСтрок.ВГраница() Цикл
		МассивСтрок[Сч].Норматив = Нормативы[Сч];
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСпецификации(ПереченьДанных = Неопределено)

	Если ДанныеВыпускающегоЭтапа.ОсновноеИзделиеКоличество = 0 
		ИЛИ ДанныеВыпускающегоЭтапа.ОсновноеИзделиеНоменклатура.Пустая()
		ИЛИ Объект.Спецификация.Пустая() 
		ИЛИ Объект.Этап.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ПараметрыДляПолученияДанныхСпецификации();
	ДанныеПоНоменклатуре.Номенклатура    = ДанныеВыпускающегоЭтапа.ОсновноеИзделиеНоменклатура;
	ДанныеПоНоменклатуре.Характеристика  = ДанныеВыпускающегоЭтапа.ОсновноеИзделиеХарактеристика;
	ДанныеПоНоменклатуре.Подразделение   = Объект.Подразделение;
	ДанныеПоНоменклатуре.Спецификация    = Объект.Спецификация;
	ДанныеПоНоменклатуре.Этап            = Объект.Этап;
	ДанныеПоНоменклатуре.Количество      = ДанныеВыпускающегоЭтапа.ОсновноеИзделиеКоличество;
	
	ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
								ДанныеПоНоменклатуре, Ложь, Истина, Истина, ПереченьДанных);
	
	Возврат ДанныеСпецификации;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий()
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
		"ОбеспечениеМатериаламиИРаботами", 
		НСтр("ru = 'Обеспечение'"));
		
	ПараметрыПроверки.Поля.Вставить("Склад", "Объект.ОбеспечениеМатериаламиИРаботами[%1].Склад");
	ПараметрыПроверки.Тексты.Вставить("Склад", НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Обеспечение материалами и работами""'"));
	
	Если Не ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
			Объект, Объект.ОбеспечениеМатериаламиИРаботами, Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока, ПараметрыПроверки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения();
	
	Если Не ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
								ПараметрыФормы, 
								"ОбеспечениеМатериаламиИРаботами",
								НСтр("ru = 'Обеспечение'"));
								ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПодборТоваров", Ложь);
	ТекущаяСтрока = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Дата",                              Объект.Дата);
	ПараметрыФормы.Вставить("Склад",                             ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("Упаковка",                          ТекущаяСтрока.Упаковка);
	ПараметрыФормы.Вставить("Серия",                             ТекущаяСтрока.Серия);

	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	
	// Остальные параметры получены при вызове ПараметрыВыбораОбеспечения()
	ПараметрыФормы.Вставить("Назначение",                        ПараметрыФормы.Отбор.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                     ПараметрыФормы.Отбор.Подразделение);
	
	ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыФормы.Отбор.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",                    ПараметрыФормы.Отбор.Характеристика);
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыФормы.Отбор.ТипНоменклатуры);
	
	ПараметрыФормы.Вставить("СкладВТЧ",                          ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ВариантОбеспечения",                ПараметрыФормы.ТекущийВариант.ВариантОбеспечения);
	ПараметрыФормы.Вставить("Количество",                        ПараметрыФормы.ТекущийВариант.Количество);
	
	Возврат ПараметрыФормы
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляОбеспеченияЗаказа()

	РеквизитыЗаказа = Новый Структура("Ссылка, Статус, Дата");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Объект);
	РеквизитыЗаказа.Вставить("ЖелаемаяДатаОтгрузки", Объект.ЖелаемаяДатаОбеспечения);
	РеквизитыЗаказа.Вставить("НеОтгружатьЧастями", Ложь);
	РеквизитыЗаказа.Вставить("Менеджер", Объект.Ответственный);
	
	// Описание особенностей формы - дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПутиКДанным = УправлениеПроизводством.ПутиКДаннымДляОбеспечения();
	ПутиКДанным.Вставить("ДатаОтгрузки", "ДатаОтгрузки");
	
	ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(Объект.ОбеспечениеМатериаламиИРаботами, Объект, ПутиКДанным);
	АдресТаблицыТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары);

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ИмяМенеджераРегистра",
		Объект.Статус <> СтатусФормируется() И Объект.Статус <> СтатусСформирован(), 
		"ЗаказыМатериаловВПроизводство");
	
	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыСостояниеОбеспеченияЗаказов();
	ПараметрыФормы.ВызовИзФормыЗаказа          = Истина;
	ПараметрыФормы.РеквизитыЗаказа             = РеквизитыЗаказа;
	ПараметрыФормы.АдресТаблицыТовары          = АдресТаблицыТовары;
	ПараметрыФормы.ПараметрыВыполненияДействий = ПараметрыЗаполнения;

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспечения(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	ЗначенияРеквизитов.ДатаОтгрузки         = Объект.ДатаОтгрузки;
	ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОбеспечения;
	ЗначенияРеквизитов.НеОтгружатьЧастями   = Объект.НеОтгружатьЧастями;
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияПослеВопроса",
		Объект.ОбеспечениеМатериаламиИРаботами.Количество() > 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
		Элементы.ОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
	КонецЕсли;
	
	Оповещение = ЗаполнитьВариантОбеспечения(ДополнительныеПараметры.ПодобранныеТовары);
	ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
КонецПроцедуры

// Процедуру следует использовать, если строки были добавлены программно (не интерактивно), например, при вставке из буфера, при заполнении по спецификации.
// Процедура выполняет действия которые зависят от данных в строках
//
&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивИдентификаторовСтрок = Неопределено, СтруктураРанееВыполненныхДействий = Неопределено)

	МассивСтрок = Неопределено;
	КоллекцияСтрок = Объект[ИмяТЧ];
	Если МассивИдентификаторовСтрок <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
			МассивСтрок.Добавить(Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла; 
		КоллекцияСтрок = МассивСтрок;
	КонецЕсли;
	
	Если СтруктураРанееВыполненныхДействий = Неопределено Тогда
		СтруктураРанееВыполненныхДействий = Новый Структура;
	КонецЕсли;
	
	Если (ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
			ИЛИ ИмяТЧ = "ВыходныеИзделия"
			ИЛИ ИмяТЧ = "РасходМатериаловИРабот"
			ИЛИ ИмяТЧ = "ЭкономияМатериалов")
		И НЕ СтруктураРанееВыполненныхДействий.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
		ЗаполнитьСтатусыУказанияСерийСервер(ИмяТЧ);
	КонецЕсли; 
	
	Если НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакАртикул")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры") Тогда
		
		ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ИмяТЧ, МассивСтрок);
		
	Иначе
		
		Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
			Если МассивСтрок = Неопределено Тогда
				ЗаполнитьИнформациюОНормативах();
			Иначе
				ЗаполнитьНормативыВСтроках(МассивСтрок);
			КонецЕсли; 
		КонецЕсли; 

	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		Если Объект.НеОтгружатьЧастями И Объект.ДатаОтгрузки <> '000101010000' Тогда
			Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
				ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
			КонецЦикла; 
		КонецЕсли; 
		
		СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
				ИспользоватьНесколькоСкладов, 
				СкладПоУмолчанию, 
				КоллекцияСтрок);
				
		ОбеспечениеКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
				Объект.ОбеспечениеМатериаламиИРаботами, 
				ДатаОтгрузкиОбязательна, 
				СкладОбязателен);
				
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		СтруктураДействий = Новый Структура;
		УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
				Объект.Подразделение, СтруктураДействий, "Склад,ПолучательРедактирование");
		
		Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			Если НЕ ТекущиеДанные.СписатьНаРасходы Тогда
				Если НЕ СтруктураРанееВыполненныхДействий.Свойство("ПроверитьЗаполнитьСкладПроизводства") Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
				КонецЕсли; 
				СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
						ИспользоватьНесколькоСкладов, 
						СкладПоУмолчанию, 
						ТекущиеДанные);
			КонецЕсли;
			Если Объект.РасходОднойДатой И Объект.ДатаРасхода <> '000101010000' Тогда
				ТекущиеДанные.ДатаОперации = Объект.ДатаРасхода;
			КонецЕсли;
		КонецЦикла; 
		
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		Если Объект.ПроизводствоОднойДатой И Объект.ДатаПроизводства <> '000101010000' Тогда
			Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
				ТекущиеДанные.ДатаПроизводства = Объект.ДатаПроизводства;
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьЗапланированныеКОбеспечениюНаСервере()

	ПоказатьЗапланированныеКОбеспечению = НЕ ПоказатьЗапланированныеКОбеспечению;
	Элементы.Обеспечение_ПоказатьЗапланированныеКОбеспечению.Пометка = ПоказатьЗапланированныеКОбеспечению;
	
	Если ПоказатьЗапланированныеКОбеспечению Тогда
		Для каждого ТекущиеДанные Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
			ТекущиеДанные.СкрытьСтроку = (ТекущиеДанные.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется);
		КонецЦикла;
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Новый ФиксированнаяСтруктура("СкрытьСтроку", Истина);
	Иначе
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Неопределено;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ИзменитьЖелаемуюДатуОбеспеченияЭтапаНаСервере(ЖелаемаяДата)
	
	УправлениеПроизводством.ИзменитьЖелаемуюДатуОбеспеченияЭтапа(
		Объект,
		ЖелаемаяДата);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЖелаемаяДатаОбеспечения");
	
КонецПроцедуры

#КонецОбласти

#Область УточнениеМатериаловИРабот

&НаСервере
Процедура ПроверитьНаличиеУточненийМатериалов()
	
	ЕстьУточненияМатериалов = Ложь;
	
	НайденныеСтроки = Объект.ОбеспечениеМатериаламиИРаботами.НайтиСтроки(Новый Структура("ИспользуетсяАвтовыбор", Истина));
	
	Для Каждого СтрокаМатерилы Из НайденныеСтроки Цикл
		
		Если (СтрокаМатерилы.Номенклатура.Пустая()
			ИЛИ СтрокаМатерилы.Характеристика.Пустая() И СтрокаМатерилы.ХарактеристикиИспользуются) Тогда
			
			ЕстьУточненияМатериалов = Истина;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКМатериалуКоторыйТребуетсяУточнить(ТекущийНомерСтроки, Направление)
	
	Если Объект.ОбеспечениеМатериаламиИРаботами.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление = 1 Тогда
		
		Для Каждого СтрокаМатериал из Объект.ОбеспечениеМатериаламиИРаботами Цикл
			
			Если СтрокаМатериал.ИспользуетсяАвтовыбор
				И (СтрокаМатериал.Номенклатура.Пустая()
					ИЛИ СтрокаМатериал.Характеристика.Пустая() И СтрокаМатериал.ХарактеристикиИспользуются) Тогда
				
				Если СтрокаМатериал.НомерСтроки > ТекущийНомерСтроки Тогда
					
					Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока = СтрокаМатериал.ПолучитьИдентификатор();
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СчМатериал = Объект.ОбеспечениеМатериаламиИРаботами.Количество() - 1;
		
		Пока СчМатериал >= 0 Цикл
			
			СтрокаМатериал = Объект.ОбеспечениеМатериаламиИРаботами[СчМатериал];
			
			Если СтрокаМатериал.ИспользуетсяАвтовыбор
				И (СтрокаМатериал.Номенклатура.Пустая()
					ИЛИ СтрокаМатериал.Характеристика.Пустая() И СтрокаМатериал.ХарактеристикиИспользуются) Тогда
				
				Если СтрокаМатериал.НомерСтроки < ТекущийНомерСтроки Тогда
					
					Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока = СтрокаМатериал.ПолучитьИдентификатор();
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СчМатериал = СчМатериал - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьДатуРасходаЗавершение(ВыбраннаяДата, МассивВыделенныхСтрок) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТаблицы = Объект.РасходМатериаловИРабот.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы.ДатаРасхода = ВыбраннаяДата;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере()

	Документы.ЭтапПроизводства2_2.ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения(Объект);	
	ПослеИзмененияСтрокТЧПрограммноНаСервере("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляции()

	Если Элементы.РасходМатериаловИРабот.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Необходимо выбрать материалы, для которых необходимо заполнить статью калькуляции.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипЗатрат", ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные"));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСтатьюКалькуляцииЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.СтатьиКалькуляции.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из Элементы.РасходМатериаловИРабот.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.РасходМатериаловИРабот.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.СтатьяКалькуляции = РезультатЗакрытия;
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Процедура РасходОднойДатойПриИзмененииНаСервере()

	Если Объект.РасходОднойДатой Тогда
		Объект.ДатаРасхода = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.РасходМатериаловИРабот, "ДатаРасхода"), 
										Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.ЭкономияМатериалов, "ДатаОперации"));
	КонецЕсли; 

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходОднойДатой");
	
КонецПроцедуры

&НаСервере
Процедура ДатаРасходаПриИзмененииНаСервере()
	
	ЗаполнитьДатуВТЧ("РасходМатериаловИРабот",  "ДатаРасхода", Объект.ДатаРасхода);
	ЗаполнитьДатуВТЧ("ЭкономияМатериалов",      "ДатаОперации", Объект.ДатаРасхода);
	ЗаполнитьДатуВТЧ("ЭкономияМатериаловСерии", "ДатаОперации", Объект.ДатаРасхода);
	
КонецПроцедуры

#КонецОбласти

#Область Экономия

&НаКлиенте
Процедура ЭкономияМатериаловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ЭкономияМатериаловСчетРеглУчетаАктивовПассивов Тогда
		РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма, "ЭкономияМатериалов", ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПолучательРедактированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	Если ТекущиеДанные.Действия = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
		
		СтандартнаяОбработка = Ложь;
		СтатьяРасходовНачалоВыбора(ТекущиеДанные, "ЭкономияМатериалов");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект[Параметры.ИмяТЧ].НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Строка.ПолучательРедактирование = Результат;
	Строка.СтатьяРасходов = Результат;
	СтатьяРасходовПриИзмененииСервер(Параметры.ИмяТЧ, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНеизрасходованнымиМатериалами()

	Если Объект.ЭкономияМатериалов.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьНеизрасходованнымиМатериаламиЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		ЗаполнитьНеизрасходованнымиМатериаламиЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНеизрасходованнымиМатериаламиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНеизрасходованнымиМатериаламиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНеизрасходованнымиМатериаламиНаСервере()

	Документы.ЭтапПроизводства2_2.ЗаполнитьНеизрасходованныеМатериалы(Объект);
	
	СтруктураРанееВыполненныхДействий = Новый Структура;
	СтруктураРанееВыполненныхДействий.Вставить("ПроверитьЗаполнитьСкладПроизводства");
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ЭкономияМатериалов",, СтруктураРанееВыполненныхДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеТипаПолучательНеизрасходованныхМатериалов(ТекущиеДанные)
	
	Если ТекущиеДанные.Действия = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
		ОграничениеТипаПолучатель = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов, ПланВидовХарактеристикСсылка.СтатьиРасходов");
	Иначе
		ОграничениеТипаПолучатель = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли;
	
	Элементы.ЭкономияМатериаловПолучательРедактирование.ОграничениеТипа = ОграничениеТипаПолучатель;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПолучателяНеизрасходованныхМатериалов(ТекущиеДанные, КэшированныеЗначения)
	
	Если ТекущиеДанные.ПолучательРедактирование = Неопределено Тогда
		ТекущиеДанные.ПолучательРедактирование = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
	КонецЕсли;
	
	ТекущиеДанные.СтатьяРасходов = ТекущиеДанные.ПолучательРедактирование;
	СтатьяРасходовПриИзмененииСервер("ЭкономияМатериалов", КэшированныеЗначения);

	ТекущиеДанные.Склад = ТекущиеДанные.ПолучательРедактирование;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипСклада", Новый Структура("Склад,ТипСклада", "Склад", "ТипСклада"));
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", 
				Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий.ЭкономияМатериалов));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзмененииСервер(ИмяТЧ, КэшированныеЗначения)
	
	СтрокаТаблицы = Объект[ИмяТЧ].НайтиПоИдентификатору(Элементы[ИмяТЧ].ТекущаяСтрока);
	
	Если СтрокаТаблицы.СтатьяРасходов = Неопределено Тогда
		СтрокаТаблицы.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
			СтрокаТаблицы.АналитикаРасходовЗаказРеализация = Ложь;
		КонецЕсли;
	Иначе
		
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
		
		СтрокаТаблицы.СчетУчета = Неопределено;
		СтрокаТаблицы.Субконто1 = Неопределено;
		СтрокаТаблицы.Субконто2 = Неопределено;
		СтрокаТаблицы.Субконто3 = Неопределено;
		СтрокаТаблицы.ПредставлениеОтраженияВРеглУчете = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(СтрокаТаблицы);
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("
		|ЗаполнитьПризнакАналитикаРасходовОбязательна,
		|ЗаполнитьПризнакАналитикаРасходовЗаказРеализация,
		|ЗаполнитьТипСтатьи");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьСтатьюРасходовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из Элементы.ЭкономияМатериалов.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ДанныеСтроки.СписатьНаРасходы Тогда
			ДанныеСтроки.СтатьяРасходов = РезультатЗакрытия.СтатьяРасходов;
			ДанныеСтроки.АналитикаРасходов = РезультатЗакрытия.АналитикаРасходов;
			ДанныеСтроки.ПолучательРедактирование = РезультатЗакрытия.СтатьяРасходов;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьДатуЗавершение(ВыбраннаяДата, МассивВыделенныхСтрок) Экспорт

	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТаблицы = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы.ДатаОперации = ВыбраннаяДата;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЭкономияМатериаловЗаполнитьРеквизитОбособитьВСтроке()
	
	ТекущиеДанные = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(Элементы.ЭкономияМатериалов.ТекущаяСтрока);
	
	ДействиеОбеспечиватьОбособленно = Перечисления.ВариантыОбеспечения.Обособленно;
	ДействиеОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	
	Для Каждого СтрокаТаблицы Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
		
		Если СтрокаТаблицы.Номенклатура = ТекущиеДанные.Номенклатура
			И СтрокаТаблицы.Характеристика = ТекущиеДанные.Характеристика
			И (СтрокаТаблицы.ВариантОбеспечения = ДействиеОтгрузитьОбособленно
				Или СтрокаТаблицы.ВариантОбеспечения = ДействиеОбеспечиватьОбособленно) Тогда
			
			ТекущиеДанные.Обособить = Истина;
			Возврат;
				
			КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеЭтапаПриИзмененииНаСервере()
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "НаименованиеЭтапа");
	УстановитьУсловноеОформлениеЭкономияМатериаловНазначение();
	
КонецПроцедуры

#КонецОбласти

#Область ВыходныеИзделия

&НаКлиенте
Процедура ПриИзмененииНаправленияВыпуска(ТекущиеДанные, ИмяТЧ)
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НаправлениеВыпуска) Тогда
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
	КонецЕсли;
	
	ТекущиеДанные.СписатьНаРасходы = (ТекущиеДанные.НаправлениеВыпуска 
		= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	
	ОграничениеТипаПолучатель(ТекущиеДанные, ИмяТЧ);
	
	ТекущиеДанные.ПолучательРедактирование = Элементы[ИмяТЧ + "ПолучательРедактирование"].ОграничениеТипа.ПривестиЗначение(
		ТекущиеДанные.ПолучательРедактирование);
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПолучательПриИзменении(ТекущиеДанные, КэшированныеЗначения);
	
	ВыходныеИзделияЭтапаПолучательПриИзменении(ТекущиеДанные, ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭтапаПриНачалеРедактирования(ТекущиеДанные, НоваяСтрока, ИмяТЧ, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяРасходов");
		ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяРасходов");
		ТекущиеДанные.ПолучательРедактирование = ТекущиеДанные.Получатель;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНаправлениеВыпуска(ТекущиеДанные, ИмяТЧ);
	
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(ТекущиеДанные.НаправлениеВыпуска) Тогда
		ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Произведено = Ложь;
		ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучательРедактирование = Неопределено Тогда
		Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение") Тогда
			ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		ИначеЕсли ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
			ТекущиеДанные.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
		Иначе
			ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли; 
		ТекущиеДанные.ПолучательРедактирование = ?(НЕ ТекущиеДанные.СписатьНаРасходы, ТекущиеДанные.Получатель, ТекущиеДанные.СтатьяРасходов);
	КонецЕсли; 
	
	ОграничениеТипаПолучатель(ТекущиеДанные, ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеТипаПолучатель(ТекущиеДанные, ИмяТЧ)

	Если ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение") Тогда
		ОграничениеТипаПолучатель = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ИначеЕсли ТекущиеДанные.НаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
		ОграничениеТипаПолучатель = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов, ПланВидовХарактеристикСсылка.СтатьиРасходов");
	Иначе
		ОграничениеТипаПолучатель = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли; 
	
	Элементы[ИмяТЧ + "ПолучательРедактирование"].ОграничениеТипа = ОграничениеТипаПолучатель;

КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСписокВыбораНаправлениеВыпуска(ТекущиеДанные, ИмяТЧ)

	СписокВыбораЭлемента = Элементы[ИмяТЧ + "НаправлениеВыпуска"].СписокВыбора;
	СписокВыбораЭлемента.Очистить();
	
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение"), НСтр("ru = 'В подразделение'"));
	Иначе
		СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад"), НСтр("ru = 'На склад'"));
	КонецЕсли; 
	
	СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"), НСтр("ru = 'Списать на статью'"));
	
	Возврат СписокВыбораЭлемента;
	
КонецФункции

&НаКлиенте
Процедура ВыходныеИзделияЭтапаПолучательПриИзменении(ТекущиеДанные, ИмяТЧ)
	
	Если ТекущиеДанные.ПолучательРедактирование = Неопределено Тогда
		ТекущиеДанные.ПолучательРедактирование = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
	КонецЕсли;
	
	ТекущиеДанные.СтатьяРасходов = ТекущиеДанные.ПолучательРедактирование;
	СтатьяРасходовПриИзмененииСервер(ИмяТЧ, КэшированныеЗначения);
	
	ТекущиеДанные.Получатель = ТекущиеДанные.ПолучательРедактирование;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипСклада", Новый Структура("Склад,ТипСклада", "Склад", "ТипСклада"));
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", 
	Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Получатель, ПараметрыУказанияСерий[ИмяТЧ]));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПолучательПриИзменении(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеРедактированиеНачалоВыбора(ТекущиеДанные, ИмяТЧ)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы[ИмяТЧ].ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ОписаниеОповещения = Новый ОписаниеОповещения("НазначениеРедактированиеВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеПроизводствомКлиент.ОткрытьФормуВыбораПотребностейВПроизводстве(
		Объект, ТекущиеДанные, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеРедактированиеВыборЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект[Параметры.ИмяТЧ].НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	ЗаполнитьЗначенияСвойств(Строка, Результат);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводствоОднойДатойПриИзмененииНаСервере()

	Если Объект.ПроизводствоОднойДатой Тогда
		Объект.ДатаПроизводства = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.ВыходныеИзделия, "ДатаПроизводства"), 
										Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.ПобочныеИзделия, "ДатаПроизводства"));
	КонецЕсли;
	ДатаПроизводстваПриИзмененииНаСервере();

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПроизводствоОднойДатой");
	
КонецПроцедуры

&НаСервере
Процедура ДатаПроизводстваПриИзмененииНаСервере()

	ЗаполнитьДатуВТЧ("ВыходныеИзделия",      "ДатаПроизводства", Объект.ДатаПроизводства);
	ЗаполнитьДатуВТЧ("ВыходныеИзделияСерии", "ДатаПроизводства", Объект.ДатаПроизводства);
	ЗаполнитьДатуВТЧ("ПобочныеИзделия",      "ДатаПроизводства", Объект.ДатаПроизводства);
	ЗаполнитьДатуВТЧ("ПобочныеИзделияСерии", "ДатаПроизводства", Объект.ДатаПроизводства);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПроизводстваВСтроке(ТекущаяСтрока)
	
	Если Объект.Статус = СтатусФормируется()
		ИЛИ Объект.Статус = СтатусСформирован()
		ИЛИ Объект.Статус = СтатусКВыполнению() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаСобытия = Неопределено;
	
	Если Объект.ПроизводствоОднойДатой Тогда
		
		ДатаСобытия = Объект.ДатаПроизводства;
		
	ИначеЕсли НЕ ТекущаяСтрока.Произведено Тогда
		
		ДатаСобытия = ПлановаяДатаПоступления;
		
	КонецЕсли;
	
	УправлениеПроизводствомВызовСервера.УстановитьДатуПоОтметке(Истина, ТекущаяСтрока.ДатаПроизводства, ДатаСобытия, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен, Идентификаторы)
	
	СтрокиКОбработке = Новый Массив;
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		ДанныеСтроки = Объект.ПобочныеИзделия.НайтиПоИдентификатору(Идентификатор);
		Если ДанныеСтроки.Произведено Тогда
			СтрокиКОбработке.Добавить(ДанныеСтроки);
		КонецЕсли;
		ДанныеСтроки.Цена  = 0;
		ДанныеСтроки.Сумма = 0;
	КонецЦикла;
	
	ПараметрыЗаполнения = УправлениеПроизводствомКлиентСервер.ПараметрыЗаполненияЦенПобочногоВыпуска(Объект, Валюта);
	
	ЦеныЗаполнены = ПродажиСервер.ЗаполнитьЦены(
		Объект.ПобочныеИзделия, // Табличная часть
		СтрокиКОбработке, // Массив строк или структура отбора
		ПараметрыЗаполнения, // Параметры заполнения
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму",
			"КоличествоУпаковок"));
	
	Возврат ЦеныЗаполнены;
	
КонецФункции

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтрокиТЧ(ИмяТЧ)

	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы[ИмяТЧ].ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере(ИмяТЧ);
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТЧ].ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТЧ].ВыделенныеСтроки, Объект[ИмяТЧ]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ)
	
	КоличествоТоваровДоВставки = Объект[ИмяТЧ].Количество();
	
	ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ);
	
	КоличествоВставленных = Объект[ИмяТЧ].Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ)
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	Если ИмяТЧ <> "ЭкономияМатериалов" И НЕ Объект.ПроизводствоНаСтороне Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок");
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ТекущаяСтрока, 
				ИмяТЧ, 
				ЭтаФорма,
				СтруктураДействий);
				
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ДоступностьРеквизитов)
	
	Форма.Элементы.Обеспечение_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.ОбеспечениеМатериаламиИРаботамиКонтекстноеМенюОбеспечение_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.РасходМатериаловИРабот_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.РасходМатериаловИРаботКонтекстноеМенюРасходМатериаловИРабот_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.ЭкономияМатериалов_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.ЭкономияМатериаловКонтекстноеМенюЭкономияМатериалов_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
КонецПроцедуры

#КонецОбласти

#Область Аналоги

&НаСервере
Процедура ОтметитьНаличиеАналогов(СтрокиЗаполнения = Неопределено)

	Если НЕ ПравоЧтенияАналогов Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокиЗаполнения <> Неопределено Тогда
		ТаблицаМатериалы = Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить(СтрокиЗаполнения, "НомерСтроки, Номенклатура, Характеристика,Производится");
		СтрокиКУдалению = Новый Массив;
		Для Каждого ДанныеСтроки из ТаблицаМатериалы Цикл
			Если ДанныеСтроки.Производится Тогда
				СтрокиКУдалению.Добавить(ДанныеСтроки);
			КонецЕсли;
		КонецЦикла;
		Для каждого ДанныеСтроки Из СтрокиКУдалению Цикл
			ТаблицаМатериалы.Удалить(ДанныеСтроки);
		КонецЦикла; 
	Иначе
		ПараметрыОтбора = Новый Структура("Производится", Ложь);
		ТаблицаМатериалы = Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить(ПараметрыОтбора, "НомерСтроки, Номенклатура, Характеристика");
	КонецЕсли;
	
	ПараметрыВыбораАналогов = ПараметрыВыбораАналогов(ЭтаФорма);
	УправлениеПроизводством.ОтметитьНаличиеАналогов(Объект.ОбеспечениеМатериаламиИРаботами, ПараметрыВыбораАналогов, ТаблицаМатериалы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборАналогов()
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Необходимо выбрать строку для которой есть аналоги'"));
		Возврат;
	ИначеЕсли НЕ ТекущиеДанные.ЕстьАналогиМатериала Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Для выделенной строки аналоги не найдены'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораАналогов = ПараметрыВыбораАналогов(ЭтаФорма, ТекущиеДанные);
	УправлениеПроизводствомКлиент.ОткрытьПодборАналогов(ПараметрыВыбораАналогов, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьМатериалыНаАналоги(АдресВХранилище)
	
	ТекущаяСтрока = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Результат = УправлениеПроизводством.ВыполнитьЗаменуНаАналог(Объект.ОбеспечениеМатериаламиИРаботами, АдресВХранилище);
	
	Если Результат.СписокОшибок <> Неопределено Тогда
		ТекущиеДанные = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(ТекущаяСтрока);
		ПутьКСтроке = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"ОбеспечениеМатериаламиИРаботами", ТекущиеДанные.НомерСтроки, "ЕстьАналогиМатериала");
		Для каждого ТекстСообщения Из Результат.СписокОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКСтроке, "Объект");
		КонецЦикла; 
		Возврат;
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	
	МассивСтрок = Новый Массив;
	Для каждого ДанныеСтроки Из Результат.СписокИзмененныхСтрок Цикл
		МассивСтрок.Добавить(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла; 
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами", МассивСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыВыбораАналогов(Форма, ТекущиеДанные = Неопределено)

	ПараметрыФормы = УправлениеПроизводствомКлиентСервер.ПараметрыВыбораАналогов();
	
	ПараметрыФормы.ИспользоватьПроизводство2_2 = Истина;
	ПараметрыФормы.ДатаОкончанияДействияРазрешений = НачалоДня(Форма.Объект.ЖелаемаяДатаОбеспечения);
	
	ПараметрыФормы.ЗаказНаПроизводство    = Форма.Объект.Распоряжение;
	ПараметрыФормы.Изделие                = Форма.Объект.ОсновноеИзделиеНоменклатура;
	ПараметрыФормы.ХарактеристикаИзделия  = Форма.Объект.ОсновноеИзделиеХарактеристика;
	
	ПараметрыФормы.Подразделение          = Форма.Объект.Подразделение;
	ПараметрыФормы.Спецификация           = Форма.Объект.Спецификация;
	
	ПараметрыФормы.ЗаказКлиента = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.КлючСвязиСпецификация = ТекущиеДанные.КлючСвязиСпецификация;
		ПараметрыФормы.Материал = ТекущиеДанные.Номенклатура;
		ПараметрыФормы.ХарактеристикаМатериала = ТекущиеДанные.Характеристика;
		ПараметрыФормы.УпаковкаМатериала = ТекущиеДанные.Упаковка;
		ПараметрыФормы.КоличествоУпаковокМатериала = ТекущиеДанные.КоличествоУпаковок;
		ПараметрыФормы.КоличествоМатериала = ТекущиеДанные.Количество;
		ПараметрыФормы.ПоказатьДоступныеОстатки = (ТекущиеДанные.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	КонецЕсли; 

	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ПоискПоШтрихкоду(ИмяТЧ)

	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ИмяТЧ);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ИмяТЧ) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ИмяТЧ)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			Неопределено, 
			ИмяТЧ, 
			ЭтаФорма, 
			СтруктураДействийСДобавленнымиСтроками);
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			Неопределено, 
			ИмяТЧ, 
			СтруктураДействийСДобавленнымиСтроками);
			
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			Неопределено, 
			ИмяТЧ, 
			СтруктураДействийСИзмененнымиСтроками);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий[ИмяТЧ];
	СтруктураДействий.ИзменятьКоличество                     = Истина;
	СтруктураДействий.ТолькоТовары                           = Истина;
	СтруктураДействий.ИмяТЧ                                  = ИмяТЧ;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_" + ИмяТЧ, 0.1, Истина);
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы[ИмяТЧ].ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(ИмяТЧ)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект, ИмяТЧ),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, ИмяТЧ) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров, ИмяТЧ);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_РасходМатериаловИРабот()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.РасходМатериаловИРабот.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий("РасходМатериаловИРабот",,ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_ЭкономияМатериалов()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий("ЭкономияМатериалов",,ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(ИмяТЧ)
		
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма, ИмяТЧ);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока,ИмяТЧ", ТекущаяСтрока, ИмяТЧ)),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			ДополнительныеПараметры.ТекущаяСтрока, 
			ДополнительныеПараметры.ИмяТЧ,
			СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДополнительныеПараметры.ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ДополнительныеПараметры.ИмяТЧ = "ВыходныеИзделия"
			ИЛИ ДополнительныеПараметры.ИмяТЧ = "ПобочныеИзделия"
			ИЛИ ДополнительныеПараметры.ИмяТЧ = "ЭкономияМатериалов" Тогда
			ТекущаяСтрокаИдентификатор = ДополнительныеПараметры.ТекущаяСтрока.ПолучитьИдентификатор();
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
					ДополнительныеПараметры.ИмяТЧ, 
					ТекущаяСтрокаИдентификатор, 
					КэшированныеЗначения);
		КонецЕсли; 
		
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция СпособПланированияПоОбщейДлительности()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПланированияПоДоступности()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПланированияВручную()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПроизводстваСобственное()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПроизводстваНаСтороне()
	
	Возврат 1;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПодсистемыПроизводство);
	
	ПараметрыРедактированияЭтапа = Новый ФиксированнаяСтруктура(УправлениеПроизводством.ПараметрыРедактированияЭтапа());

	ПравоДобавленияЗаказаПереработчику = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПереработчику);
	ПравоПросмотраЗаказаПереработчику  = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПереработчику);
	ПравоЧтенияАналогов = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.АналогиВПроизводстве);
	ПравоРедактированияГрафикаПроизводства = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ГрафикЭтаповПроизводства2_2);
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	
	ОсновнаяЕдиницаВремениБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
	ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ();
	
	ЦветОсобогоТекста = ЦветаСтиля.ЦветОсобогоТекста;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЭтапПроизводства2_2));
	УстановитьВидимостьЭлементовСерий();
	
	ЗаполнитьРеквизитыПоПодразделению();
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ЗаполнитьГрафикПроизводства();
	ЗаполнитьСостояниеВыполненияОпераций();
	ЗаполнитьРеквизитыЗаказаПереработчика();
	
	РассчитатьКоличествоОсновногоИзделия();
	ПроверитьНаличиеУточненийМатериалов();
	
	НастроитьЭлементыФормы();
	
	// ИнтеграцияГИСМ
	СформироватьНадписьМаркировкаПродукции();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоПодразделению(Инициализация = Истина)
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Объект.Подразделение);
	
	ИнтервалПланирования                 = ПараметрыПодразделения.ИнтервалПланирования;
	ИспользоватьПооперационноеУправление = ПараметрыПодразделения.ИспользоватьПооперационноеУправление;
	
	Если НЕ Инициализация Тогда
		
		УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
					ВидыРабочихЦентров, 
					Объект.ПланироватьРаботуВидовРабочихЦентров,
					Объект.ВидыРабочихЦентров,
					Объект.АльтернативныеВидыРабочихЦентров);
		
		УправлениеДаннымиОбИзделиях.ПроверитьСоответствиеРеквизитовПодразделению(Объект, "ВидыРабочихЦентров");
		
	КонецЕсли; 
	
	ЗаполнитьВидыРабочихЦентров();
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования, 
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.СписокВыбора);
			
	УправлениеДаннымиОбИзделиях.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования, 
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.СписокВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()

	ТекущийСтатус = Объект.Статус;
	
	ЗаполнитьСпособыПланирования(ЭтаФорма);
	
	СпособПроизводства = ПолучитьСпособПроизводства(ЭтаФорма);
	СпособПланирования = ПолучитьСпособПланирования(ЭтаФорма);
	
	ОтметкаПланироватьНеРанее = ЗначениеЗаполнено(Объект.ПланироватьНеРанее);
	
	НачатоВыполнениеЭтапа = (ТекущийСтатус = СтатусНачат())
		ИЛИ (ТекущийСтатус = СтатусЗавершен());
	ЗавершеноВыполнениеЭтапа = (ТекущийСтатус = СтатусЗавершен());

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(СписокТЧ = "", СтрокиЗаполнения = Неопределено)
	
	СтруктураТЧ = Новый Структура(СписокТЧ);
	ВсеТЧ = (СтруктураТЧ.Количество() = 0);
	
	Если СтруктураТЧ.Свойство("ВыходныеИзделия") ИЛИ ВсеТЧ Тогда
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(Объект.ВыходныеИзделия, СтрокиЗаполнения);
		ЗаполнитьСлужебныеРеквизитыВыходныхИзделий(Объект.ВыходныеИзделия, СтрокиЗаполнения);
	КонецЕсли; 
	
	Если СтруктураТЧ.Свойство("ПобочныеИзделия") ИЛИ ВсеТЧ Тогда
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(Объект.ПобочныеИзделия, СтрокиЗаполнения);
		ЗаполнитьСлужебныеРеквизитыВыходныхИзделий(Объект.ПобочныеИзделия, СтрокиЗаполнения);
	КонецЕсли; 
	
	Если СтруктураТЧ.Свойство("РасходМатериаловИРабот") ИЛИ ВсеТЧ Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.РасходМатериаловИРабот,
			СтруктураДействий,
			СтрокиЗаполнения);
			
	КонецЕсли; 
	
	Если СтруктураТЧ.Свойство("ЭкономияМатериалов") ИЛИ ВсеТЧ Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЦеховаяКладовая", Новый Структура("Склад", "ЦеховаяКладовая"));	// нужно чтобы не округлять количество до целых
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.ЭкономияМатериалов,
			СтруктураДействий,
			СтрокиЗаполнения);
			
		КоллекцияСтрок = ?(СтрокиЗаполнения <> Неопределено, СтрокиЗаполнения, Объект.ЭкономияМатериалов);
		Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
			ДанныеСтроки.Действия = ?(ДанныеСтроки.СписатьНаРасходы, 
										Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию, 
										Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства);
			ДанныеСтроки.ПолучательРедактирование = ?(ДанныеСтроки.СписатьНаРасходы, ДанныеСтроки.СтатьяРасходов, ДанныеСтроки.Склад);
		КонецЦикла; 
		
		ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ЭкономияМатериалов);
		ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ЭкономияМатериалов);
		РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(Объект.ЭкономияМатериалов);
		
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("ОбеспечениеМатериаламиИРаботами") ИЛИ ВсеТЧ Тогда
		
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаПроизводства(
			Объект.ОбеспечениеМатериаламиИРаботами, СтрокиЗаполнения);
		
		Для каждого Строка из Объект.ОбеспечениеМатериаламиИРаботами Цикл
			УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоАвтовыборуМатериала(Строка);
		КонецЦикла;
		
		Если СтрокиЗаполнения = Неопределено Тогда
			ЗаполнитьИнформациюОНормативах();
		КонецЕсли;		
		
		ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь);
		ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(
				Объект.ОбеспечениеМатериаламиИРаботами, 
				ПараметрыЗаполнения, 
				ДатаОтгрузкиОбязательна, 
				СкладОбязателен);
		
		ОтметитьНаличиеАналогов(СтрокиЗаполнения);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВыходныхИзделий(ТабличнаяЧасть, СтрокиЗаполнения)
	
	КоллекцияСтрок = ?(СтрокиЗаполнения <> Неопределено, СтрокиЗаполнения, ТабличнаяЧасть);
	
	Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
		
		ЗаполнитьПолучательРедактированиеВСтроке(ДанныеСтроки);
		
	КонецЦикла;
	
	УправлениеПроизводством.ЗаполнитьНазначениеРедактированиеВТЧ(КоллекцияСтрок);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(ТабличнаяЧасть);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(ТабличнаяЧасть);
	РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(ТабличнаяЧасть);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучательРедактированиеВСтроке(ДанныеСтроки)
	
	Если ДанныеСтроки.СписатьНаРасходы Тогда
		ДанныеСтроки.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		ПолучательРедактирование = ДанныеСтроки.СтатьяРасходов;
	ИначеЕсли ДанныеСтроки.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		ДанныеСтроки.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
		ПолучательРедактирование = ДанныеСтроки.Получатель;
	Иначе
		ДанныеСтроки.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
		ПолучательРедактирование = ДанныеСтроки.Получатель;
	КонецЕсли; 
	
	ДанныеСтроки.ПолучательРедактирование = ПолучательРедактирование;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРабочихЦентров()

	УправлениеДаннымиОбИзделиях.ЗаполнитьВидыРабочихЦентров(
			Объект.ВидыРабочихЦентров,
			Объект.АльтернативныеВидыРабочихЦентров,
			ВидыРабочихЦентров);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(Идентификатор)
	
	ДанныеСтроки = ВидыРабочихЦентров.НайтиПоИдентификатору(Идентификатор);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
				Неопределено, 
				Неопределено, 
				Истина, 
				ДанныеСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьКомментарийКонвертации(Форма)
	
	ВидимостьЭлемента = НЕ ПустаяСтрока(Форма.Объект.КомментарийПриКонвертации);
	
	Если ВидимостьЭлемента Тогда
		
		Форма.ТекстКомментарийКонвертации = Новый ФорматированнаяСтрока(
			Лев(Форма.Объект.КомментарийПриКонвертации, 60),
			" (",
			Новый ФорматированнаяСтрока(НСтр("ru = 'далее...'"),,,, "#Далее"),
			")");
			
	КонецЕсли;
	
	Форма.Элементы.ГруппаКомментарийКонвертации.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

&НаСервере
Функция ФорматированнаяСтрокаСпецификацияЭтап()
	
	Если НЕ Объект.Спецификация.Пустая() Тогда
		ПредставлениеСпецификацииЭтапа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Спецификация, "Наименование");
	Иначе
		ПредставлениеСпецификацииЭтапа = "<" + НСтр("ru = 'нет спецификации'") + ">";
	КонецЕсли;

	Если НЕ ЭтоВыпускающийЭтап(ЭтаФорма) Тогда
		
		ОсновноеИзделиеПредставление = Документы.ЭтапПроизводства2_2.ОсновноеИзделиеПредставление(Объект.Ссылка);
		
		Если ЗначениеЗаполнено(ОсновноеИзделиеПредставление) Тогда
			
			ПредставлениеСпецификацииЭтапа = СтрШаблон(НСтр("ru = '%1, %2'"), 
				ПредставлениеСпецификацииЭтапа, ОсновноеИзделиеПредставление);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрДлина(ПредставлениеСпецификацииЭтапа) > 71 Тогда
		ПредставлениеСпецификацииЭтапа = Лев(ПредставлениеСпецификацииЭтапа, 68) + "...";
	КонецЕсли;
	
	ГиперссылкаОткрытьСпецификацию = Новый ФорматированнаяСтрока(
		ПредставлениеСпецификацииЭтапа,,,,?(Объект.Спецификация.Пустая(),"","#ОткрытьСпецификацию"));

	ГиперссылкаПоказатьЭтапы = Новый ФорматированнаяСтрока(
		НСтр("ru = 'показать этапы'"),,,, "#ПоказатьЭтапы"); 
	
	Возврат Новый ФорматированнаяСтрока(ГиперссылкаОткрытьСпецификацию, 
										"  ",
										ГиперссылкаПоказатьЭтапы);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеЭтапа(ДанныеЭтапа)
	
	Возврат Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(ДанныеЭтапа);
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииИзделия(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Произведено = Ложь;
	
	ЗаполнитьДатуПроизводстваВСтроке(СтрокаТабличнойЧасти);
	
	УправлениеПроизводствомКлиентСервер.ОчиститьНазначениеРедактированиеВСтроке(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ИмяТЧ)
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ПриИзмененииИзделия(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Получатель;
	ИначеЕсли ИмяТЧ = "РасходМатериаловИРабот" Тогда
		СкладДляСерий = Объект.Подразделение;
	Иначе
		СкладДляСерий = СтрокаТабличнойЧасти.Склад;
	КонецЕсли; 
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", СкладДляСерий);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			СтрокаТабличнойЧасти, 
			ИмяТЧ, 
			ЭтаФорма, 
			СтруктураДействий);
			
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
			Объект.Подразделение, СтруктураДействий, "Получатель,ПолучательРедактирование");
	КонецЕсли;
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		
		УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияЗаполнитьЦенуПобочногоВыпуска(
			Объект, Валюта, СтруктураДействий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		СписокВыбораЭлемента = ЗаполнитьСписокВыбораНаправлениеВыпуска(СтрокаТабличнойЧасти, ИмяТЧ);
		Если СписокВыбораЭлемента.НайтиПоЗначению(СтрокаТабличнойЧасти.НаправлениеВыпуска) = Неопределено Тогда
			СтрокаТабличнойЧасти.НаправлениеВыпуска = СписокВыбораЭлемента[0].Значение;
			ПриИзмененииНаправленияВыпуска(СтрокаТабличнойЧасти, ИмяТЧ);
		КонецЕсли;

	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(
				Объект.ОбеспечениеМатериаламиИРаботами, 
				ДатаОтгрузкиОбязательна, 
				СкладОбязателен);
				
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		ЭкономияМатериаловЗаполнитьРеквизитОбособитьВСтроке();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииХарактеристики(СтрокаТабличнойЧасти, ИмяТЧ)
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ПриИзмененииИзделия(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		
		УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияЗаполнитьЦенуПобочногоВыпуска(
			Объект, Валюта, СтруктураДействий);
		
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
			Объект.Подразделение, СтруктураДействий, "Склад,ПолучательРедактирование");
		
	КонецЕсли;
		
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, ИмяТЧ));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		ЭкономияМатериаловЗаполнитьРеквизитОбособитьВСтроке();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковок(СтрокаТабличнойЧасти, ИмяТЧ)

	УправлениеПроизводствомКлиент.ПриИзмененииКоличестваУпаковокЭтапа(
			СтрокаТабличнойЧасти, 
			ИмяТЧ, 
			ЭтаФорма, 
			КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУпаковки(СтрокаТабличнойЧасти, ИмяТЧ)

	УправлениеПроизводствомКлиент.ПриИзмененииУпаковки(СтрокаТабличнойЧасти, ИмяТЧ, ЭтаФорма, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваров(ИмяТЧ)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	Если НЕ Объект.ПроизводствоНаСтороне Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	КонецЕсли;	
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			Элементы[ИмяТЧ], 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТЧ)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТЧ].Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ТекущаяСтрока, 
				ИмяТЧ, 
				ЭтаФорма, 
				СтруктураДействий);
				
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;

	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоОсновногоИзделия()

	ДанныеЭтапа = Новый Структура;
	ДанныеЭтапа.Вставить("ОсновноеИзделиеНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	ДанныеЭтапа.Вставить("ОсновноеИзделиеХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ДанныеЭтапа.Вставить("ОсновноеИзделиеКоличество", 0);
	
	Если Объект.ВыпускающийЭтап.Пустая() Тогда
		ДанныеВыпускающегоЭтапа = Новый ФиксированнаяСтруктура(ДанныеЭтапа);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапПроизводства2_2.ОсновноеИзделиеНоменклатура,
	|	ЭтапПроизводства2_2.ОсновноеИзделиеХарактеристика,
	|	РесурсныеСпецификацииВыходныеИзделия.Количество * &Запланировано КАК ОсновноеИзделиеКоличество
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|		ПО (РесурсныеСпецификацииВыходныеИзделия.Ссылка = ЭтапПроизводства2_2.Спецификация)
	|			И (РесурсныеСпецификацииВыходныеИзделия.Номенклатура = ЭтапПроизводства2_2.ОсновноеИзделиеНоменклатура)
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка = &ВыпускающийЭтап";
	
	Запрос.УстановитьПараметр("ВыпускающийЭтап", Объект.ВыпускающийЭтап);
	Запрос.УстановитьПараметр("Запланировано", Объект.Запланировано);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЭтапа, Выборка);
	КонецЕсли;
	
	ДанныеВыпускающегоЭтапа = Новый ФиксированнаяСтруктура(ДанныеЭтапа);
	
КонецПроцедуры

&НаСервере
Процедура ЗапланированоПриИзмененииНаСервере()

	РассчитатьКоличествоОсновногоИзделия();
	ЗаполнитьИнформациюОНормативах();

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧ(ИмяТЧ)

	Если Элементы[ИмяТЧ].ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧЗавершение", ЭтотОбъект, ИмяТЧ);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(Объект[ИмяТЧ], Элементы[ИмяТЧ], Оповещение, ПараметрыРазбиенияСтроки);

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧЗавершение(НоваяСтрока, ИмяТЧ) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" 
		ИЛИ ИмяТЧ = "ПобочныеИзделия" 
		ИЛИ ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" 
		ИЛИ ИмяТЧ = "ЭкономияМатериалов" Тогда
		НоваяСтрока.КодСтроки = 0;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			ТекущиеДанные, 
			ИмяТЧ, 
			СтруктураДействий);
			
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		НоваяСтрока.ДоляСтоимости = НоваяСтрока.Количество * ТекущиеДанные.ДоляСтоимости / (НоваяСтрока.Количество + ТекущиеДанные.Количество);
		ТекущиеДанные.ДоляСтоимости = ТекущиеДанные.ДоляСтоимости - НоваяСтрока.ДоляСтоимости;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);

КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()

	ЗаполнитьСтатусыУказанияСерийСервер(, Истина);
	ЗаполнитьРеквизитыПоПодразделению(Ложь);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Подразделение");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущаяСтрока, ИмяТЧ, Форма, СтруктураДействий)

	Если НЕ СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус")
		И (ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия") Тогда
		
		ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
		ПараметрыПроверкиСерий.ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий[ИмяТЧ];
		ПараметрыПроверкиСерий.Склад = ?(ТекущаяСтрока <> Неопределено, ТекущаяСтрока.Получатель, Неопределено);
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	ИначеЕсли НЕ СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус")
		И ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
		ПараметрыПроверкиСерий.ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий[ИмяТЧ];
		ПараметрыПроверкиСерий.Склад = ?(ТекущаяСтрока <> Неопределено, ТекущаяСтрока.Склад, Неопределено);
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	КонецЕсли; 
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			ИмяТЧ, 
			Форма, 
			СтруктураДействий);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВыпускающийЭтап(Форма)
	
	Возврат УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(Форма.Объект);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусФормируется()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусСформирован()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусКВыполнению()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусНачат()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусЗавершен()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");

КонецФункции

&НаСервере
Процедура ЗаполнитьДатуВТЧ(Знач ИмяТЧ, Знач ПолеДата, Знач НоваяДата)

	Если НоваяДата = '000101010000' Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеСтроки Из Объект[ИмяТЧ] Цикл
		ДанныеСтроки[ПолеДата] = НоваяДата;
	КонецЦикла; 	

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(ТекущиеДанные, ИмяТЧ)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы[ИмяТЧ].ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", ТекущиеДанные.ПолучательРедактирование);
	
	ПараметрыВыбораСтатьи = Новый Массив;
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина));
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина));
	
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию")));
	
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НеРаспределять"));
	
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("Отбор.ВариантРаспределенияРасходов", Новый ФиксированныйМассив(МассивВариантов)));
	
	ПараметрыФормы.Вставить("ПараметрыВыбора", Новый ФиксированныйМассив(ПараметрыВыбораСтатьи));
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаполненияПриИзмененииСтатуса()
	
	Возврат УправлениеПроизводством.ДанныеЗаполненияПриИзмененииСтатуса(
		Объект, ПлановаяДатаПоступления);
	
КонецФункции

&НаКлиенте
Процедура ПослеУдаленияСтрокТЧДляКоторойЕстьСерии(ИмяТЧ, Элемент)

	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ], Истина);
	
	Если НеобходимоОбновитьСтатусыСерий Тогда

		ПослеУдаленияСтрокТЧДляКоторойЕстьСерииНаСервере(ИмяТЧ, КэшированныеЗначения); // серверный вызов

		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ]);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияСтрокТЧДляКоторойЕстьСерииНаСервере(ИмяТЧ, КэшированныеЗначения)

	ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИмяТЧ, Неопределено, КэшированныеЗначения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваСворачиваемойГруппы(ЭлементГруппа, КартинкаГруппы, ГруппаСвернута)

	ЭлементГруппа.Видимость = НЕ ГруппаСвернута;
	
	Если ГруппаСвернута Тогда
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВСписокИзмененныхРеквизитов(ИзмененныеРеквизиты, Реквизиты)
	
	ИзмененныеРеквизиты = ИзмененныеРеквизиты + ?(ПустаяСтрока(Реквизиты),"", ",") + Реквизиты;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандВводаНаОсновании()

	ВидимостьКоманды = НЕ Объект.ПроизводствоНаСтороне;
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "Документ.ДвижениеПродукцииИМатериалов", ВидимостьКоманды);
	ВводНаОсновании.УстановитьВидимостьЭлементаФормыСервер(ЭтотОбъект, "СоздатьНаОснованииВозвратМатериалов", ВидимостьКоманды);
	
КонецПроцедуры

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.ПолучитьНазначениеЗаказа(Объект.Ссылка);
	Возврат Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	
КонецФункции

// ИнтеграцияГИСМ
&НаСервере
Процедура СформироватьНадписьМаркировкаПродукции()
	
	Элементы.ТекстМаркировкаТоваров.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ;
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеМаркировки = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеМаркировки);
	ПравоЧтения          = ПравоДоступа("Чтение", МетаданныеМаркировки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи = НСтр("ru = 'Оформить маркировку товаров'");
		ИмяКоманды   = "ОформитьМаркировкуТоваров";
	Иначе
		ТекстНадписи = НСтр("ru = 'Маркировка товаров не создана'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МаркировкаТоваровГИСМ.Ссылка,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ КАК МаркировкаТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = МаркировкаТоваровГИСМ.Ссылка)
	|ГДЕ
	|	МаркировкаТоваровГИСМ.Основание = &ОснованиеСсылка
	|	И НЕ МаркировкаТоваровГИСМ.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОснованиеСсылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Маркировка товаров: %1'"), НРег (Строка(Выборка.Статус)));
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	ТекстМаркировкаТоваров = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		ЦветаСтиля.ЦветГиперссылки,
		,
		ИмяКоманды);
	
КонецПроцедуры 

//Конец ИнтеграцияГИСМ

&НаКлиенте
Процедура ПоказатьВопросИЗаполнитьПоОперациям()
	
	Модифицированность = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВопросИЗаполнитьПоОперациямЗавершение", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'Заполнить по производственным операциям?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросИЗаполнитьПоОперациямЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Истина;
		ЗаполнитьПоОперациямНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОперациямНаСервере()
	
	НомерЗадания = РегистрыСведений.ЗаданияКЗаполнениюЭтаповПроизводства.ТекущийНомерЗаданияПоЭтапу(Объект.Ссылка);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПроизводственнымОперациям();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЭтаФорма.ТребуетсяЗаполнитьПоОперациям = Ложь;
	ЭтаФорма.НомерЗаданияКЗаполнениюЭтаповПроизводства = НомерЗадания;
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураДополнительныхПараметров.ПроверятьОстатки = Не (ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	
	ИндексПоследнейСтрокиВыходныхИзделийДоКорректировки = Объект.ВыходныеИзделия.Количество() - 1;
	ИндексПоследнейСтрокиПобочныхИзделийДоКорректировки = Объект.ПобочныеИзделия.Количество() - 1;
	
	ЗапретитьРазделениеСтрок = ДокументОбъект.ПроизводствоНаСтороне;
	
	СтруктураРезультата = ДокументОбъект.СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров, ЗапретитьРазделениеСтрок);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
		ОбработатьИзменениеСтатусаНаСервере();
	КонецЕсли;
	
	// Снятие флага "Произведено" для новых строк (при установке статуса Завершен флаг "Произведено" автоматически взводится для всех строк)
	Если ИндексПоследнейСтрокиВыходныхИзделийДоКорректировки <> Неопределено
		И ИндексПоследнейСтрокиВыходныхИзделийДоКорректировки < Объект.ВыходныеИзделия.Количество() - 1 Тогда
		Для ИндексСтроки = ИндексПоследнейСтрокиВыходныхИзделийДоКорректировки + 1 По Объект.ВыходныеИзделия.Количество() - 1 Цикл
			Строка = Объект.ВыходныеИзделия[ИндексСтроки];
			Строка.Произведено = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	Если ИндексПоследнейСтрокиПобочныхИзделийДоКорректировки <> Неопределено
		И ИндексПоследнейСтрокиПобочныхИзделийДоКорректировки < Объект.ПобочныеИзделия.Количество() - 1 Тогда
		Для ИндексСтроки = ИндексПоследнейСтрокиПобочныхИзделийДоКорректировки По Объект.ПобочныеИзделия.Количество() - 1 Цикл
			Строка = Объект.ПобочныеИзделия[ИндексСтроки];
			Строка.Произведено = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ЗаполнитьСлужебныеРеквизитыВыходныхИзделий(Объект.ВыходныеИзделия, Неопределено);
	ЗаполнитьСлужебныеРеквизитыВыходныхИзделий(Объект.ПобочныеИзделия, Неопределено);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
