&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыпускающийЭтап", ВыпускающийЭтап)
		И Не ВыпускающийЭтап.Пустая() Тогда
		
		ПрочитатьЭтапыЦепочки();
	
		Параметры.Свойство("ВыпускающийЭтап", ВыпускающийЭтапДоИзменения);
		
	Иначе
		
		ДобавитьНовыйВыпускающийЭтап();
		
		Параметры.Свойство("Потребность", Потребность);
		
	КонецЕсли;
	
	НастроитьФормуПоПараметрам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОЗаписиПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Записать изменения?'");
		Кнопки = РежимДиалогаВопрос.ДаНетОтмена;
		КнопкаПоУмолчанию = КодВозвратаДиалога.Отмена;
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КнопкаПоУмолчанию);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НадписьОписаниеПотребностиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = СсылкаОткрытьПродукциюЗаказа() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеСтроки = УправлениеПроизводствомКлиентСервер.СтруктураПродукцииЗаказа();
		Если Потребность <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, Потребность);
			ДанныеСтроки.Склад         = Потребность.Получатель;
			ДанныеСтроки.Подразделение = Потребность.Получатель;
		КонецЕсли;
		
		УправлениеПроизводствомКлиент.ОткрытьСтрокуЗаказаНаПроизводства(Параметры.Распоряжение, ДанныеСтроки, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЦепочкаЭтапов

&НаКлиенте
Процедура ЦепочкаЭтаповПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.ЦепочкаЭтапов.ТекущиеДанные;
		ПриДобавленииНовогоЭтапа(ТекущиеДанные, ЦепочкаЭтапов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦепочкаЭтаповПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьТекущийЭтап();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦепочкаЭтаповПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УдалитьЭтап(Команда)
	
	УдалитьТекущийЭтап();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПоследовательностиЭтапов(Команда)
	
	ОчиститьСообщения();
	ДанныеКорректны = ПоследовательностьЭтаповКорректна();
	
	Если ДанныеКорректны Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Последовательность этапов заполнена корректно.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭтап(Команда)
	
	ТекущиеДанные = Элементы.ЦепочкаЭтапов.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если ЭтоДанныеСуществующегоДокумента(ТекущиеДанные) Тогда
			
			ПоказатьЗначение(, ТекущиеДанные.Этап);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Для выбранной строки еще не создан этап производства.
				|Для создания этапа следует записать изменения.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		
		СообщитьНеобходимоВыбратьЭтап();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Для ранее созданных документов недоступны для редактирования некоторые реквизиты.
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦепочкаЭтаповНаименование.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦепочкаЭтаповПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦепочкаЭтапов.Этап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПараметрам()
	
	#Область РежимРаботы
	
	Если ВыпускающийЭтап.Пустая() Тогда
		
		Режим = РежимСозданиеНовойЦепочки();
		
	Иначе
		
		Режим = РежимИзменениеЦепочки();
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Заголовок
	
	Если Режим = РежимСозданиеНовойЦепочки() Тогда
		
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = НСтр("ru = 'Создание новой цепочки этапов'");
		
	Иначе
		
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = НСтр("ru = 'Последовательность этапов'");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НадписьОсновноеИзделие
	
	Если ТипЗнч(Потребность) = Тип("Структура") Тогда
		
		МассивСтрок = Новый Массив;
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
			Потребность.Номенклатура,
			Потребность.Характеристика);
		МассивСтрок.Добавить(ПредставлениеНоменклатуры);
		
		Если ЗначениеЗаполнено(Потребность.Назначение) Тогда
			
			МассивСтрок.Добавить(", " + Потребность.Назначение);
			
		КонецЕсли;
	
		НадписьОсновноеИзделие = Новый ФорматированнаяСтрока(МассивСтрок
			,
			,
			,
			,
			СсылкаОткрытьПродукциюЗаказа());
		
	Иначе
		
		Представление = Документы.ЭтапПроизводства2_2.ОсновноеИзделиеПредставление(ВыпускающийЭтап);
		
		НадписьОсновноеИзделие = Новый ФорматированнаяСтрока(Представление
				,
				,
				,
				,
				ПолучитьНавигационнуюСсылку(ВыпускающийЭтап));
		
	КонецЕсли;
	
	Элементы.НадписьОписаниеПотребности.Видимость = ЗначениеЗаполнено(НадписьОсновноеИзделие);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЭтапыЦепочки()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДанныеЭтапа.НомерЭтапа КАК НомерЭтапа,
		|	ДанныеЭтапа.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
		|	ДанныеЭтапа.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ДанныеЭтапа.Ссылка КАК Этап,
		|	ДанныеЭтапа.Подразделение КАК Подразделение,
		|	ДанныеЭтапа.Запланировано КАК Запланировано,
		|	ДанныеЭтапа.Выполнено КАК Выполнено,
		|	ДанныеЭтапа.Ссылка = &ВыпускающийЭтап КАК ЭтоВыпускающийЭтап
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ДанныеЭтапа
		|ГДЕ
		|	ДанныеЭтапа.ВыпускающийЭтап = &ВыпускающийЭтап
		|	И ДанныеЭтапа.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЭтапа,
		|	НомерСледующегоЭтапа");
		
	Запрос.УстановитьПараметр("ВыпускающийЭтап", ВыпускающийЭтап);
	
	ЦепочкаЭтапов.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для каждого Строка Из ЦепочкаЭтапов Цикл
		
		Строка.НомерКартинки = НомерКартинки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовыйВыпускающийЭтап()
	
	ПриДобавленииНовогоЭтапа(ЦепочкаЭтапов.Добавить(), ЦепочкаЭтапов)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриДобавленииНовогоЭтапа(НоваяСтрока, ЦепочкаЭтапов)
	
	НовыйНомер = 1;
	Для каждого Строка Из ЦепочкаЭтапов Цикл
		НовыйНомер = Макс(НовыйНомер, Строка.НомерЭтапа + 1);
	КонецЦикла;
	
	НоваяСтрока.НомерЭтапа           = НовыйНомер;
	НоваяСтрока.НомерСледующегоЭтапа = ?(НовыйНомер > 1, НовыйНомер + 1, 0);
	
	НоваяСтрока.НомерКартинки = НомерКартинки(НоваяСтрока);

	Если НовыйНомер = 2 И ЦепочкаЭтапов.Количество() = 2 Тогда
		Для каждого Строка Из ЦепочкаЭтапов Цикл
			Если Строка.НомерЭтапа = 1 И Строка.НомерСледующегоЭтапа = 0 Тогда
				Строка.НомерСледующегоЭтапа = НовыйНомер;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерКартинки(ДанныеЭтапаЦепочки)
	
	Если ЭтоДанныеСуществующегоДокумента(ДанныеЭтапаЦепочки) Тогда
		
		Если НЕ ДанныеЭтапаЦепочки.ПометитьНаУдаление Тогда
			
			Результат = 1;
			
		Иначе
			
			Результат = 2;
			
		КонецЕсли;
		
	Иначе
		
		Результат = 0;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоДанныеСуществующегоДокумента(ДанныеЭтапаЦепочки)
	
	Возврат ЗначениеЗаполнено(ДанныеЭтапаЦепочки.Этап)
	
КонецФункции

&НаКлиенте
Процедура УдалитьТекущийЭтап()

	ТекущиеДанные = Элементы.ЦепочкаЭтапов.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если ЭтоДанныеСуществующегоДокумента(ТекущиеДанные) Тогда
			
			ТекущиеДанные.ПометитьНаУдаление = НЕ ТекущиеДанные.ПометитьНаУдаление;
			ТекущиеДанные.НомерКартинки = НомерКартинки(ТекущиеДанные);
			
		Иначе
			
			ЦепочкаЭтапов.Удалить(ТекущиеДанные);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		СообщитьНеобходимоВыбратьЭтап();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьНеобходимоВыбратьЭтап()
	
	ТекстСообщения = НСтр("ru = 'Необходимо выбрать этап.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция ПоследовательностьЭтаповКорректна()
	
	Для каждого Строка Из ЦепочкаЭтапов Цикл
		Строка.ЕстьОшибкиЗаполнения = Ложь;
	КонецЦикла;
	
	ДанныеКорректны = РеквизитыЭтаповЗаполнены();
	
	Если ДанныеКорректны Тогда
		ДанныеКорректны = ПорядокЭтаповКорректен();
	КонецЕсли;
	
	Если ДанныеКорректны Тогда
		ДанныеКорректны = СвязиЭтаповКорректны();
	КонецЕсли;
	
	Возврат ДанныеКорректны;
	
КонецФункции

&НаСервере
Функция РеквизитыЭтаповЗаполнены()
	
	Отказ = Ложь;
	СписокОшибок = Неопределено;
	
	ИмяСписка = НСтр("ru = 'Этапы'");
	
	Для каждого Строка Из ЦепочкаЭтапов Цикл
		
		Если Строка.ПометитьНаУдаление Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСтроки = ЦепочкаЭтапов.Индекс(Строка);
		
		Если НЕ ЗначениеЗаполнено(Строка.НомерЭтапа) Тогда
			
			ИмяПоля = НСтр("ru = 'Номер этапа'");
			ПолеОшибки = "ЦепочкаЭтапов[%1].НомерЭтапа";
			ДобавитьОшибкуЗаполнения(Строка, СписокОшибок, ИмяСписка, ИндексСтроки, ИмяПоля, ПолеОшибки);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.НаименованиеЭтапа) Тогда
			
			ИмяПоля = НСтр("ru = 'Наименование'");
			ПолеОшибки = "ЦепочкаЭтапов[%1].НаименованиеЭтапа";
			ДобавитьОшибкуЗаполнения(Строка, СписокОшибок, ИмяСписка, ИндексСтроки, ИмяПоля, ПолеОшибки);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.Подразделение) Тогда
			
			ИмяПоля = НСтр("ru = 'Подразделение'");
			ПолеОшибки = "ЦепочкаЭтапов[%1].Подразделение";
			ДобавитьОшибкуЗаполнения(Строка, СписокОшибок, ИмяСписка, ИндексСтроки, ИмяПоля, ПолеОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок, Отказ);
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура ДобавитьОшибкуЗаполнения(Строка, СписокОшибок, ИмяСписка, ИндексСтроки, ИмяПоля, ПолеОшибки)
	
	ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", ИмяПоля, ИндексСтроки + 1, ИмяСписка);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
		СписокОшибок,
		ПолеОшибки,
		ТекстОшибки,
		Неопределено,
		ИндексСтроки);
	
	Строка.ЕстьОшибкиЗаполнения = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПорядокЭтаповКорректен()
	
	Колонки = "НомерЭтапа, НомерСледующегоЭтапа, НаименованиеЭтапа, ПометитьНаУдаление";
	СписокОпераций = ЦепочкаЭтапов.Выгрузить(, Колонки);
	
	СписокОпераций.Колонки.НомерЭтапа.Имя = "НомерОперации";
	СписокОпераций.Колонки.НомерСледующегоЭтапа.Имя = "НомерСледующейОперации";
	СписокОпераций.Колонки.НаименованиеЭтапа.Имя = "Представление";
	
	СписокОпераций.Колонки.Добавить("Операция");
	СписокОпераций.Колонки.Добавить("НетСледующейОперации", Новый ОписаниеТипов("Булево"));
	СписокОпераций.Колонки.Добавить("ПолеНомерСледующейОперации", Новый ОписаниеТипов("Строка"));
	
	СтрокиУдалить = Новый Массив;
	Для каждого Строка Из СписокОпераций Цикл
		
		Если НЕ Строка.ПометитьНаУдаление Тогда
			
			Если ЗначениеЗаполнено(Строка.НомерСледующейОперации) Тогда
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("НомерОперации", Строка.НомерСледующейОперации);
				СтруктураПоиска.Вставить("ПометитьНаУдаление", Ложь);
				
				НайденныеСтроки = СписокОпераций.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					ИндексСтроки = СписокОпераций.Индекс(Строка);
					
					ЦепочкаЭтапов[ИндексСтроки].ЕстьОшибкиЗаполнения = Истина;
					
					Строка.НетСледующейОперации = Истина;
					Строка.ПолеНомерСледующейОперации = "ЦепочкаЭтапов[" + ИндексСтроки + "].НомерСледующегоЭтапа";
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СтрокиУдалить.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из СтрокиУдалить Цикл
		СписокОпераций.Удалить(Строка);
	КонецЦикла;
	
	СтруктураСообщений = Новый Структура;
	СтруктураСообщений.Вставить("НесколькоПервыхОпераций", НСтр("ru = 'Не может быть несколько первых этапов.'"));
	СтруктураСообщений.Вставить("НесколькоПоследнихОпераций", НСтр("ru = 'Не может быть несколько последних этапов.'"));
	СтруктураСообщений.Вставить("НетПервойОперации",    НСтр("ru = 'Отсутствует первый этап.'"));
	СтруктураСообщений.Вставить("НетПоследнейОперации", НСтр("ru = 'Отсутствует последний этап.'"));
	СтруктураСообщений.Вставить("НетСледующейОперации", НСтр("ru = 'Этап ""%1"" ссылается на несуществующий этап.'"));
	
	Возврат УправлениеДаннымиОбИзделиях.ПоследовательностьСпискаОперацийПравильная(СписокОпераций, СтруктураСообщений);
	
КонецФункции

&НаСервере
Функция СвязиЭтаповКорректны()
	
	СвязиПоВыпускуКорректны = ПроверитьСвязиЭтаповПоВыпуску();
	СвязиПоПорядкуКорректны = ПроверитьСвязиЭтаповПоПорядку();
	
	Возврат СвязиПоВыпускуКорректны И СвязиПоПорядкуКорректны;
	
КонецФункции

&НаСервере
Функция ПроверитьСвязиЭтаповПоВыпуску()
	
	Результат = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Этапы.Этап КАК Этап,
	|	Этапы.НомерЭтапа КАК НомерЭтапа
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	&Этапы КАК Этапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2ПобочныеИзделия.Ссылка КАК Этап,
	|	ЭтапПроизводства2_2.Ссылка КАК СледующийЭтап
	|
	|ПОМЕСТИТЬ ВТСвязи
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ЭтапПроизводства2_2ПобочныеИзделия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ПО ЭтапПроизводства2_2ПобочныеИзделия.Назначение = ЭтапПроизводства2_2.Назначение
	|ГДЕ
	|	ЭтапПроизводства2_2ПобочныеИзделия.Ссылка.Проведен
	|	И ЭтапПроизводства2_2ПобочныеИзделия.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТЭтапы.Этап
	|			ИЗ
	|				ВТЭтапы)
	|	И ЭтапПроизводства2_2.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТЭтапы.Этап
	|			ИЗ
	|				ВТЭтапы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСвязи.Этап КАК Этап
	|ИЗ
	|	ВТСвязи КАК ВТСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапы КАК НомераЭтапов
	|		ПО ВТСвязи.Этап = НомераЭтапов.Этап
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЭтапы КАК НомераСледующихЭтапов
	|		ПО ВТСвязи.СледующийЭтап = НомераСледующихЭтапов.Этап
	|ГДЕ
	|	НомераСледующихЭтапов.НомерЭтапа < НомераЭтапов.НомерЭтапа");
	
	Этапы = Новый ТаблицаЗначений;
	Этапы.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Этапы.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число"));
	
	Для каждого Строка Из ЦепочкаЭтапов Цикл
		Если ЗначениеЗаполнено(Строка.Этап) И НЕ Строка.ПометитьНаУдаление Тогда
			
			НоваяСтрока = Этапы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Этап, НомерЭтапа");
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Этапы", Этапы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Этап", Выборка.Этап);
		Строка = ЦепочкаЭтапов.НайтиСтроки(СтруктураПоиска)[0];
		ИндексСтроки = ЦепочкаЭтапов.Индекс(Строка);
		
		Строка.ЕстьОшибкиЗаполнения = Истина;
		
		ТекстСообщения = НСтр("ru = 'Нарушен порядок этапов. Этап, выпускающий полуфабрикаты, расположен после этапа-потребителя.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"ЦепочкаЭтапов[" + ИндексСтроки + "].НомерСледующегоЭтапа");
			
		Результат = Ложь;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьСвязиЭтаповПоПорядку()
	
	Результат = Истина;
	
	Для каждого Строка Из ЦепочкаЭтапов Цикл
		
		Если ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа)
			И Строка.НомерЭтапа >= Строка.НомерСледующегоЭтапа
			И НЕ Строка.ПометитьНаУдаление Тогда
			
			Строка.ЕстьОшибкиЗаполнения = Истина;
			
			ТекстСообщения = НСтр("ru = 'Номер следующего этапа должен быть больше номера этапа.'");
			
			ИндексСтроки = ЦепочкаЭтапов.Индекс(Строка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"ЦепочкаЭтапов[" + ИндексСтроки + "].НомерСледующегоЭтапа");
			
			Результат = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ПередЗакрытием)
	
	ЗаписьПередЗакрытием = ПередЗакрытием;
	
	ОчиститьСообщения();
	Результат = ПроверитьИЗаписатьНаСервере();
	
	Если Результат.ПроверкаВыполнена Тогда
		
		Если Результат.ЗаданиеВыполнено Тогда
			
			ОповеститьОбИзмененииПоследовательностиЭтапов();
			
			Если ЗаписьПередЗакрытием Тогда
				Закрыть();
			КонецЕсли;
			
		Иначе
			
			Если ПередЗакрытием Тогда
				ПодключитьОбработчикОжидания("НачатьОжиданиеФоновойОперации", 0.1, Истина);
			Иначе
				НачатьОжиданиеФоновойОперации();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьИЗаписатьНаСервере()
	
	Если ПоследовательностьЭтаповКорректна() Тогда
		
		Колонки = "НомерЭтапа, НомерСледующегоЭтапа, НаименованиеЭтапа, Подразделение, Этап, ПометитьНаУдаление";
		ДанныеЦепочки = ЦепочкаЭтапов.Выгрузить(, Колонки);
		ДанныеЦепочки.Сортировать("НомерЭтапа, НомерСледующегоЭтапа");
		
		ПараметрыЗадания = Новый Структура;
		
		ПараметрыЗадания.Вставить("Распоряжение",    Параметры.Распоряжение);
		ПараметрыЗадания.Вставить("ВыпускающийЭтап", ВыпускающийЭтап);
		
		ПараметрыЗадания.Вставить("Потребность",   Потребность);
		ПараметрыЗадания.Вставить("ЦепочкаЭтапов", ДанныеЦепочки);
		
		НаименованиеЗадания = НСтр("ru = 'Запись последовательности этапов'");
		
		РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.ЭтапПроизводства2_2.МодифицироватьЦепочкуЭтапов",
			ПараметрыЗадания,
			НаименованиеЗадания);
		
		РезультатРасчета.Вставить("ПроверкаВыполнена", Истина);
		
		АдресХранилищаФоноваяОперация = РезультатРасчета.АдресХранилища;
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
	
		Если РезультатРасчета.ЗаданиеВыполнено Тогда
			
			ПослеЗаписиВФоновомРежиме(ЭтотОбъект);
			Если НЕ ЗаписьПередЗакрытием Тогда
				ПослеЗаписиНаСервере();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		РезультатРасчета = Новый Структура("ПроверкаВыполнена", Ложь);
		
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаКлиенте
Процедура НачатьОжиданиеФоновойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ПослеЗаписиВФоновомРежиме(ЭтотОбъект);
				ОповеститьОбИзмененииПоследовательностиЭтапов();
				
				Если ЗаписьПередЗакрытием Тогда
					Закрыть();
				Иначе
					ПослеЗаписиНаСервере();
				КонецЕсли;
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПослеЗаписиВФоновомРежиме(Форма)
	
	Форма.Модифицированность = Ложь;
	Форма.ВыпускающийЭтапДоИзменения = Форма.ВыпускающийЭтап;
	Форма.ВыпускающийЭтап = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаФоноваяОперация);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере()
	
	Потребность = Неопределено;
	
	ПрочитатьЭтапыЦепочки();
	НастроитьФормуПоПараметрам();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиПередЗакрытиемЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОтветПользователя = РезультатЗакрытия;
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьНаКлиенте(Истина);
		
	ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииПоследовательностиЭтапов()
	
	Оповестить("ИзменениеПоследовательностиЭтапов", ВыпускающийЭтапДоИзменения);
	
КонецПроцедуры

#Область Константы 

&НаКлиентеНаСервереБезКонтекста
Функция РежимСозданиеНовойЦепочки()
	
	Возврат "СозданиеНовойЦепочки";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимИзменениеЦепочки()
	
	Возврат "ИзменениеЦепочки";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СсылкаОткрытьПродукциюЗаказа()
	
	Возврат "ОткрытьПродукциюЗаказа";
	
КонецФункции

#КонецОбласти

#КонецОбласти
