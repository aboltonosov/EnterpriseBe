
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ОбновитьОтборыПриПовторномОткрытии;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСписокВыбораОтбораПоАктуальности();
	
	#Область СписокЭтапов
	
	Если Параметры.Свойство("СтруктураОтборов") Тогда
		
		ЗаполнитьОтборыПоСтруктуреОтборов(Параметры.СтруктураОтборов);
		
	ИначеЕсли Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		
		ЗаполнитьОтборыПоСтруктуреОтборов(Параметры.СтруктураБыстрогоОтбора);
		
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, ДатаСобытия, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "ПодразделениеДиспетчер", ПодразделениеДиспетчер, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Подразделение", Подразделение, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Распоряжение", Распоряжение, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Статус", Статус, СтруктураБыстрогоОтбора);	
	
	УстановитьДатуАктуальности();
	
	Список.Параметры.УстановитьЗначениеПараметра("ПланируетсяГрафикПроизводства", ПланируетсяГрафикПроизводства);
	
	Список.Параметры.УстановитьЗначениеПараметра("СтатусФормируется", Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусСформирован", Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусКВыполнению", Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусЗавершен",    Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	Список.Параметры.УстановитьЗначениеПараметра("ПустаяСсылкаСостояние", Перечисления.СостоянияЭтаповНаМежцеховомУровне.ПустаяСсылка());
	
	Список.Параметры.УстановитьЗначениеПараметра("СтатусРабочийГрафик", РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	НастроитьДинамическийСписок();
	
	Если ТребуетсяУстановитьОтборПоСостоянию() Тогда
		
		УстановитьОтборПоСостоянию();
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область УниверсальныеМеханизмы
	
	ТекущиеДелаПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Список);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанельГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	#КонецОбласти
	
	НастроитьЭлементыФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжиданияОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ОбновитьОтборыПриПовторномОткрытии = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТребуетсяОбновитьУстановленныеОтборы(ИмяСобытия, Источник) Тогда
		
		УстановитьОтборыПоСтруктуреОтборов(Параметр);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗакрытиеЗаказов" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Настройки.Удалить("ПодразделениеДиспетчер");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ДопПанельСвернута") = Истина Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоложениеДопПанели");
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "ПодразделениеДиспетчер", ПодразделениеДиспетчер, СтруктураБыстрогоОтбора, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КоманднаяПанельЭтапы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЭтапПроизводства2_2.Диспетчирование.Команда.ОбновитьСписок");
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭтап(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦепочкуЭтапов(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		УправлениеПроизводствомКлиент.ОткрытьПоследовательностьЭтапов(
			ТекущиеДанные.Распоряжение,
			ТекущиеДанные.ВыпускающийЭтап,
			,
			ЭтаФорма);
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПланироватьЗаказ(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПланированияЗаказа(ТекущиеДанные.Распоряжение);

КонецПроцедуры

&НаКлиенте
Процедура ПланироватьВыбранные(Команда)
	
	ОпределитьПараметрыИЗапланировать(ВыбранныеЭтапы());
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИЗапланировать(Этапы)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПланированиеГрафикаЭтапов", Истина);
	ПараметрыФормы.Вставить("Этапы", Этапы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьПараметрыИЗапланироватьЗавершение", 
			ЭтотОбъект, Этапы);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.НастройкиПланированияСпискаРаспоряженийИЭтапов", 
			ПараметрыФормы, ЭтаФорма, 
			УникальныйИдентификатор,,, 
			ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИЗапланироватьЗавершение(Результат, Этапы) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Этапы", Этапы);
	
	Для Каждого КлючИЗначение Из Результат Цикл
		ПараметрыЗадания.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ЗапуститьФоновоеЗадание("ПланироватьГрафикПроизводства", ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПередатьКВыполнению(Команда)
	
	ВыделенныеСтроки = ВыбранныеЭтапы();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке этапов будет установлен статус ""К выполнению"". Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередатьКВыполнениюЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьКВыполнениюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "КВыполнению");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='К выполнению'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьНачалоВыполнения(Команда)
	
	ВыделенныеСтроки = ВыбранныеЭтапы();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке этапов будет установлен статус ""Начат"". Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтметитьНачалоВыполненияЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьНачалоВыполненияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Начат");
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Начат'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьВыполненным(Команда)
	
	ВыделенныеСтроки = ВыбранныеЭтапы();
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения(ВыделенныеСтроки);
	
	СтруктураЗакрытия = ЗаказыКлиентСервер.ПараметрыПомощникаЗакрытияЗаказов();
	СтруктураЗакрытия.Заказы                               = СписокЗаказов;
	СтруктураЗакрытия.СкорректироватьМерныеТовары          = Истина;
	СтруктураЗакрытия.СкорректироватьМерныеТоварыПоПриемке = Истина;
	СтруктураЗакрытия.ЗакрыватьЗаказы                      = Истина;
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЦепочкеЭтаповПриИзменении(Команда)
	
	ТипОтбораПоЦепочкеЭтапов = Команда.Имя;
	
	УстановитьОтборПоЦепочкеЭтапов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбораПоДаннымЭтапа(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Подразделение);
	ПараметрыФормы.Вставить("СтруктураОтбораПоДаннымЭтапа", СтруктураОтбораПоДаннымЭтапа);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииОтбораПоДаннымЭтапаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.ОтборПоСодержанию",
					ПараметрыФормы,
					ЭтотОбъект,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбораПоДаннымЭтапаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.ИспользуетсяОтборПоИзделию
			ИЛИ Результат.ИспользуетсяОтборПоМатериалу
			ИЛИ Результат.ИспользуетсяОтборПоВРЦ
			ИЛИ Результат.ИспользуетсяОтборПоБригаде Тогда
			
			СтруктураОтбораПоДаннымЭтапа = Результат;
			
		Иначе
			
			СтруктураОтбораПоДаннымЭтапа = Неопределено;
			
		КонецЕсли;
		
		УстановитьОтборыПоДаннымЭтапа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСнятииОтбораПоДаннымЭтапа(Команда)
	
	Если СтруктураОтбораПоДаннымЭтапа <> Неопределено Тогда
		
		СтруктураОтбораПоДаннымЭтапа = Неопределено;
		
		УстановитьОтборыПоДаннымЭтапа();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Универсальные

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти

#Область ОбработчикиЭлементовФормы

#Область Шапка

&НаКлиенте
Процедура ОтборПодразделениеДиспетчерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПодразделениеДиспетчер", ПодразделениеДиспетчер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПодразделениеДиспетчер));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Подразделение", Подразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Подразделение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	УстановитьОтборПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборСтатусНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныеЗначения", Статус);
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.ОтборПоСтатусу",
					ПараметрыФормы,
					ЭтотОбъект,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусОчистка(Элемент, СтандартнаяОбработка)
	
	Если Статус.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Статус.Очистить();
	
	УстановитьОтборПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Статус = ВыбранноеЗначение;
		УстановитьОтборПоСтатусу();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаЗапускаПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаЗапускаОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаЗапускаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.ПриВыбореОтбораПоАктуальности(
		ВыбранноеЗначение, 
		СтандартнаяОбработка, 
		ЭтаФорма,
		Список, 
		"Актуальность", 
		"ДатаСобытия");
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеПриИзменении(Элемент)
	
	УстановитьОтборПоРаспоряжению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДоступныхСтатусовРаспоряжения = Новый Массив;
	
	МассивДоступныхСтатусовРаспоряжения.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству"));
	МассивДоступныхСтатусовРаспоряжения.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт"));
			
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Статус", МассивДоступныхСтатусовРаспоряжения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	Если НЕ Распоряжение.Пустая() Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Распоряжение);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборРаспоряжениеОбработкаВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаВыбора", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтборРаспоряжениеОбработкаВыбораЗавершение(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеОбработкаВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Распоряжение = ВыбранноеЗначение;
	
	УстановитьОтборПоРаспоряжению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		АвтоПодборЗаказовНаПроизводство(Текст, ДанныеВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		АвтоПодборЗаказовНаПроизводство(Текст, ДанныеВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРаспоряжениеОчистка(Элемент, СтандартнаяОбработка)
	
	Если Распоряжение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Распоряжение = Неопределено;
	
	УстановитьОтборПоРаспоряжению();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационныйТекстОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиПерейтиКТекущемуЭтапуЦепочки() Тогда
		
		Элементы.Список.ТекущаяСтрока = ТекущийЭтапЦепочки;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = ЗначениеГиперссылкиОтключитьОтборПоЦепочкеЭтапов() Тогда
		
		ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьВсеЭтапы();
		
		УстановитьОтборПоЦепочкеЭтапов();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Список

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Поле.Имя = "СписокЭтаповТребуетсяОбеспечение" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ТребуетсяОбеспечение Тогда
			
			ОткрытьСостояниеОбеспечения(ВыбраннаяСтрока);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокЭтаповТребуетсяПланироватьГрафик" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если КомандаПланированияДоступна Тогда
		
			ОткрытьФормуПланированияЗаказа(ТекущиеДанные.Распоряжение);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокЭтаповСостояниеОграниченийВГрафике" Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельДопОтборовЭтапы

&НаКлиенте
Процедура СвернутьДопПанель(Команда)
	
	ДопПанельСвернута = Истина;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоложениеДопПанели");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДопПанель(Команда)
	
	ДопПанельСвернута = Ложь;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоложениеДопПанели");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСостояниюПриИзменении(Элемент)
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Константы

&НаСервереБезКонтекста
Функция ЗначениеПоказатьВсеЭтапы()
	
	Возврат "ПоказатьВсеЭтапы";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеПоказатьЭтапИСмежныеЭтапы()
	
	Возврат "ПоказатьЭтапИСмежныеЭтапы";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеПоказатьПоследователей()
	
	Возврат "ПоказатьПоследователей";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеПоказатьПредшественников()
	
	Возврат "ПоказатьПредшественников";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеГиперссылкиПерейтиКТекущемуЭтапуЦепочки()
	
	Возврат "#ПерейтиКТекущемуЭтапуЦепочки";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеГиперссылкиОтключитьОтборПоЦепочкеЭтапов()
	
	Возврат "#ОтключитьОтборПоЦепочкеЭтапов";
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Текст полей "Дата начала" и "Дата завершения" если график не рассчитан
	#Область ГрафикНеРассчитан
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЭтаповДатаНачала.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЭтаповДатаЗавершения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ГрафикРассчитан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не рассчитана>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
	
	// Оформление цветом периода по графику производства
	#Область ЕстьОтставаниеОтГрафика
	
	// Дата начала
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЭтаповДатаНачала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ГрафикРассчитан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	СписокЗначений.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	СписокЗначений.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаАктуальности");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДатаНачала");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	// Дата завершения
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЭтаповДатаЗавершения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ГрафикРассчитан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаАктуальности");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДатаЗавершения");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	#КонецОбласти
	
	// Оформление цветом желаемой даты обеспечения
	#Область ЖелаемаяДатаОбеспеченияПросрочена
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЖелаемаяДатаОбеспечения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ЖелаемаяДатаОбеспеченияПросрочена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	#КонецОбласти
	
	// Не отображаем состояние в статусе "Завершен"
	#Область СостояниеЗавершен
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСостояниеЭтапа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
	// дата начала
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляДатаПроизводства(ЭтотОбъект, "Список", "СписокЭтаповДатаНачала");
	
	// дата завершения
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляДатаПроизводства(ЭтотОбъект, "Список", "СписокЭтаповДатаЗавершения");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	ПланируетсяГрафикПроизводства = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	КомандаПланированияДоступна   = Обработки.ПланированиеГрафикаПроизводства2_2.ПланированиеДоступно();
	
	ФоновоеЗадание = Новый Структура("
		|ИмяЗадания,
		|ИдентификаторЗадания,
		|АдресХранилища");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	// Настроим видимость элементов в зависимости от использования графика производства
	Элементы.СписокЭтаповТребуетсяПланироватьГрафик.Видимость   = ПланируетсяГрафикПроизводства;
	Элементы.ГруппаДопОтборТребуетсяПланироватьГрафик.Видимость = ПланируетсяГрафикПроизводства;
	
	Элементы.ПланироватьЗаказ.Видимость                    = КомандаПланированияДоступна;
	Элементы.ПланироватьВыбранные.Видимость                = КомандаПланированияДоступна;
	Элементы.КонтекстноеМенюПланироватьЗаказ.Видимость     = КомандаПланированияДоступна;
	Элементы.КонтекстноеМенюПланироватьВыбранные.Видимость = КомандаПланированияДоступна;
	
	// Установим по умолчанию отбор по цепочке этапов
	ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьВсеЭтапы();
	Элементы.ПоказатьВсеЭтапы.Пометка = Истина;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("Статус") Тогда
		
		Если ЗначениеЗаполнено(Форма.Статус) Тогда
			Форма.СтатусСтрока = ПолучитьПредставлениеСтатуса(Форма.Статус);
		Иначе
			Форма.СтатусСтрока = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("Распоряжение") Тогда
		
		Если ЗначениеЗаполнено(Форма.Распоряжение) Тогда
			Форма.РаспоряжениеСтрока = ПолучитьПредставлениеРаспоряжения(Форма.Распоряжение);
		Иначе
			Форма.РаспоряжениеСтрока = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация ИЛИ СтруктураРеквизитов.Свойство("ПоложениеДопПанели") Тогда
		
		Элементы.РазвернутьДопПанель.Видимость = Форма.ДопПанельСвернута;
		Элементы.СвернутьДопПанель.Видимость = НЕ Форма.ДопПанельСвернута;
		
		Элементы.ДекорацияОтобратьЭтапы.Заголовок = 
				?(Форма.ДопПанельСвернута, НСтр("ru='Отобрать'"), НСтр("ru='Отобрать этапы, которые'"));
		
		Элементы.ДекорацияОтобратьЭтапыПродолжение.Заголовок = 
				?(НЕ Форма.ДопПанельСвернута, НСтр("ru='И которые'"), "");
			
		ТекущееОтображениеПодсказки = ?(Форма.ДопПанельСвернута, 
											ОтображениеПодсказки.Всплывающая,
											ОтображениеПодсказки.ОтображатьСправа);
		
		МассивЭлементов = Новый Массив;
		
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаТребуетсяУточнение);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборГотовКВыполнению);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборОжидаетПредшественников);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборОжидаетНачала);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборОжидаетЗавершения);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборЗавершен);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборТребуетсяПланироватьГрафик);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборТребуетсяОбеспечение);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборПросрочен);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборНаКритическомПути);
		МассивЭлементов.Добавить(Элементы.ДекорацияИконкаДопОтборЗадерживаютЗаказ);
		
		Для Каждого ТекущийЭлемент Из МассивЭлементов Цикл
			
			ТекущийЭлемент.ОтображениеПодсказки = ТекущееОтображениеПодсказки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("УстановитьОтборПоЦепочкеЭтапов") Тогда
		
		ПоказатьВсеЭтапы          = Форма.ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьВсеЭтапы();
		ПоказатьЭтапИСмежныеЭтапы = Форма.ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьЭтапИСмежныеЭтапы();
		ПоказатьПоследователей    = Форма.ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьПоследователей();
		ПоказатьПредшественников  = Форма.ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьПредшественников();
		
		Если НЕ ПоказатьВсеЭтапы Тогда
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(НСтр("ru = 'Установлен отбор по'"));
			МассивСтрок.Добавить(" ");
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'этапу'"),,,, 
					ЗначениеГиперссылкиПерейтиКТекущемуЭтапуЦепочки()));
					
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(НСтр("ru = 'и всем его'"));
			МассивСтрок.Добавить(" ");
			
			Если ПоказатьЭтапИСмежныеЭтапы Тогда
				МассивСтрок.Добавить(НСтр("ru = 'смежным этапам'"));
			ИначеЕсли ПоказатьПоследователей Тогда
				МассивСтрок.Добавить(НСтр("ru = 'последователям'"));
			ИначеЕсли ПоказатьПредшественников Тогда
				МассивСтрок.Добавить(НСтр("ru = 'предшественникам'"));
			КонецЕсли;
			
			МассивСтрок.Добавить(" (");
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отключить'"),,,, 
					ЗначениеГиперссылкиОтключитьОтборПоЦепочкеЭтапов()));
			
			МассивСтрок.Добавить(") ");
			
			Форма.ИнформационныйТекст = Новый ФорматированнаяСтрока(МассивСтрок);
			Элементы.ИнформационныйТекст.Видимость = Истина;
			
		Иначе
			
			Форма.ИнформационныйТекст = Новый ФорматированнаяСтрока("");
			Элементы.ИнформационныйТекст.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.ПоказатьВсеЭтапы.Пометка          = ПоказатьВсеЭтапы;
		Элементы.ПоказатьЭтапИСмежныеЭтапы.Пометка = ПоказатьЭтапИСмежныеЭтапы;
		Элементы.ПоказатьПоследователей.Пометка    = ПоказатьПоследователей;
		Элементы.ПоказатьПредшественников.Пометка  = ПоказатьПредшественников;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("УстановитьОтборыПоДаннымЭтапа") Тогда
		
		Элементы.СнятьОтборыПоДаннымЭтапа.Доступность = Форма.СтруктураОтбораПоДаннымЭтапа <> Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСписка
&НаСервере
Процедура УстановитьДатуАктуальности()
	
	ДатаАктуальности = НачалоДня(ТекущаяДатаСеанса());
	Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", ДатаАктуальности);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДинамическийСписок(Действия = "")
	
	Инициализация = ПустаяСтрока(Действия);
	СтруктураДействий = Новый Структура(Действия);
	
	Если СтруктураДействий.Свойство("НастроитьПредставлениеЭтапа") ИЛИ Инициализация Тогда
		
		ТекстЗапроса = Список.ТекстЗапроса;
	
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ПредставлениеЭтапа",
			Документы.ЭтапПроизводства2_2.ТекстЗапросаПредставлениеЭтапа("Этапы"));
	
		Список.ТекстЗапроса = ТекстЗапроса;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьОтборыПоДаннымЭтапа") Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Список.ТекстЗапроса);
		
		Отбор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
		
		КоличествоОтборов = Отбор.Количество();
		Если КоличествоОтборов > 1 Тогда
			Для Индекс = -КоличествоОтборов По -1 Цикл
				Отбор.Удалить(-Индекс);
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		МассивПараметров = Новый Массив;
		
		Если СтруктураОтбораПоДаннымЭтапа <> Неопределено Тогда
			
			Если СтруктураОтбораПоДаннымЭтапа.ИспользуетсяОтборПоИзделию Тогда
				
				ТекстЗапроса = ТекстЗапроса + " И ИСТИНА В (
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА
					|ИЗ
					|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Т
					|ГДЕ
					|	Т.Ссылка = Этапы.Ссылка
					|	И Т.Номенклатура = &НоменклатураИзделия
					|	И (Т.Характеристика = &ХарактеристикаИзделия
					|		ИЛИ &ХарактеристикаИзделия = &ПустаяСсылкаХарактеристика))
					|";
				
				МассивПараметров.Добавить("НоменклатураИзделия");
				МассивПараметров.Добавить("ХарактеристикаИзделия");
				
			КонецЕсли;
			
			Если СтруктураОтбораПоДаннымЭтапа.ИспользуетсяОтборПоМатериалу Тогда
				
				ТекстЗапроса = ТекстЗапроса + " И ИСТИНА В (
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА
					|ИЗ
					|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Т
					|ГДЕ
					|	Т.Ссылка = Этапы.Ссылка
					|	И Т.Номенклатура = &НоменклатураМатериала
					|	И (Т.Характеристика = &ХарактеристикаМатериала
					|		ИЛИ &ХарактеристикаМатериала = &ПустаяСсылкаХарактеристика)
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА
					|ИЗ
					|	Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК Т
					|ГДЕ
					|	Т.Ссылка = Этапы.Ссылка
					|	И Т.Номенклатура = &НоменклатураМатериала
					|	И (Т.Характеристика = &ХарактеристикаМатериала
					|		ИЛИ &ХарактеристикаМатериала = &ПустаяСсылкаХарактеристика)
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА
					|ИЗ
					|	Документ.ЭтапПроизводства2_2.ЭкономияМатериалов КАК Т
					|ГДЕ
					|	Т.Ссылка = Этапы.Ссылка
					|	И Т.Номенклатура = &НоменклатураМатериала
					|	И (Т.Характеристика = &ХарактеристикаМатериала
					|		ИЛИ &ХарактеристикаМатериала = &ПустаяСсылкаХарактеристика))
					|";
				
				МассивПараметров.Добавить("НоменклатураМатериала");
				МассивПараметров.Добавить("ХарактеристикаМатериала");
				
			КонецЕсли;
			
			Если СтруктураОтбораПоДаннымЭтапа.ИспользуетсяОтборПоВРЦ Тогда
				
				ТекстЗапроса = ТекстЗапроса + " И ИСТИНА В (
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА
					|ИЗ
					|	Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК Т
					|ГДЕ
					|	Т.Ссылка = Этапы.Ссылка
					|	И Т.ВидРабочегоЦентра = &ВидРабочегоЦентра
					|	И Т.Использовать
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА
					|ИЗ
					|	Документ.ЭтапПроизводства2_2.АльтернативныеВидыРабочихЦентров КАК Т
					|ГДЕ
					|	Т.Ссылка = Этапы.Ссылка
					|	И Т.ВидРабочегоЦентра = &ВидРабочегоЦентра
					|	И Т.Использовать)
					|";
				
				МассивПараметров.Добавить("ВидРабочегоЦентра");
				
			КонецЕсли;
		
			Если СтруктураОтбораПоДаннымЭтапа.ИспользуетсяОтборПоБригаде Тогда
				
				ТекстЗапроса = ТекстЗапроса + " И ИСТИНА В (
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА
					|ИЗ
					|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Т
					|ГДЕ
					|	Т.Ссылка = Этапы.Ссылка
					|	И Т.Бригада = &Бригада)
					|";
				
				МассивПараметров.Добавить("Бригада");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Список.ТекстЗапроса = ТекстЗапроса;
		
		Если СтруктураОтбораПоДаннымЭтапа <> Неопределено
			И (СтруктураОтбораПоДаннымЭтапа.ИспользуетсяОтборПоИзделию
				ИЛИ СтруктураОтбораПоДаннымЭтапа.ИспользуетсяОтборПоМатериалу) Тогда
			
			Список.Параметры.УстановитьЗначениеПараметра("ПустаяСсылкаХарактеристика", 
						Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			
		КонецЕсли;
		
		Для Каждого ИмяПараметра Из МассивПараметров Цикл
			
			Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, СтруктураОтбораПоДаннымЭтапа[ИмяПараметра]);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура ЗаполнитьОтборыПоСтруктуреОтборов(СтруктураОтборов)
	
	СтруктураБыстрогоОтбора = Новый Структура;
	
	Если СтруктураОтборов.Свойство("ПодразделениеДиспетчер", ПодразделениеДиспетчер) Тогда
		СтруктураБыстрогоОтбора.Вставить("ПодразделениеДиспетчер", ПодразделениеДиспетчер);
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Подразделение", Подразделение) Тогда
		СтруктураБыстрогоОтбора.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Статус", Статус) Тогда
		СтруктураБыстрогоОтбора.Вставить("Статус", Статус);
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Распоряжение", Распоряжение) Тогда
		СтруктураБыстрогоОтбора.Вставить("Распоряжение", Распоряжение);
	КонецЕсли;
	
	СтруктураОтборов.Свойство("ТребуетсяУточнение",         ДопОтборТребуетсяУточнение);
	СтруктураОтборов.Свойство("ГотовКВыполнению",           ДопОтборГотовКВыполнению);
	СтруктураОтборов.Свойство("ОжидаетПредшественников",    ДопОтборОжидаетПредшественников);
	СтруктураОтборов.Свойство("ОжидаетНачала",              ДопОтборОжидаетНачала);
	СтруктураОтборов.Свойство("ОжидаетЗавершения",          ДопОтборОжидаетЗавершения);
	СтруктураОтборов.Свойство("ОтборЗавершен",              ДопОтборЗавершен);
	СтруктураОтборов.Свойство("ТребуетсяПерерасчетГрафика", ДопОтборТребуетсяПланироватьГрафик);
	СтруктураОтборов.Свойство("ТребуетсяОбеспечение",       ДопОтборТребуетсяОбеспечение);
	СтруктураОтборов.Свойство("Просрочен",                  ДопОтборПросрочен);
	СтруктураОтборов.Свойство("НаКритическомПути",          ДопОтборНаКритическомПути);
	СтруктураОтборов.Свойство("ЗадерживаютЗаказ",           ДопОтборЗадерживаютЗаказ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоСтруктуреОтборов(СтруктураОтборов)
	
	ЗаполнитьОтборыПоСтруктуреОтборов(СтруктураОтборов);
	
	УстановитьОтборПоПодразделениюДиспетчеру();
	УстановитьОтборПоПодразделению();
	
	УстановитьОтборПоРаспоряжению();
	УстановитьОтборПоСтатусу();
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделениюДиспетчеру()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПодразделениеДиспетчер", ПодразделениеДиспетчер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПодразделениеДиспетчер));

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Подразделение", Подразделение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Подразделение));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСтатусу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Статус", Статус, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(Статус));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Статус");

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоРаспоряжению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Распоряжение", Распоряжение, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Распоряжение));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Распоряжение");

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСостоянию()
	
	МассивОтборов = Новый Массив;
	
	// Отбор по текущему состоянию этапа
	
	МассивЗначений = Новый Массив;
	
	Если ДопОтборТребуетсяУточнение Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.ТребуетУточнения);
		
	КонецЕсли;
	
	Если ДопОтборГотовКВыполнению Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.ГотовКВыполнению);
		
	КонецЕсли;
	
	Если ДопОтборОжидаетПредшественников Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.ОжидаетПредшественников);
		
	КонецЕсли;
	
	Если ДопОтборОжидаетНачала Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.ОжидаетНачала);
		
	КонецЕсли;
	
	Если ДопОтборОжидаетЗавершения Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.ОжидаетЗавершения);
		
	КонецЕсли;
	
	Если ДопОтборЗавершен Тогда
		
		МассивЗначений.Добавить(Перечисления.СостоянияЭтаповНаМежцеховомУровне.Завершен);
		
	КонецЕсли;
	
	Отбор = СтруктураОтбора("СостояниеЭтапа");
	Отбор.Использование = МассивЗначений.ВГраница() <> -1;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.Значение      = МассивЗначений;
	
	МассивОтборов.Добавить(Отбор);
	
	// Отбор по состоянию графика производства
	
	Отбор = СтруктураОтбора("ТребуетсяПланироватьГрафик");
	Отбор.Использование = ДопОтборТребуетсяПланироватьГрафик;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Значение      = Истина;
	
	МассивОтборов.Добавить(Отбор);
	
	// Отбор по состоянию обеспечения этапа
	
	Отбор = СтруктураОтбора("ТребуетсяОбеспечение");
	Отбор.Использование = ДопОтборТребуетсяОбеспечение;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Значение      = Истина;
	
	МассивОтборов.Добавить(Отбор);
	
	// Отбор по отставанию от графика
	
	Отбор = СтруктураОтбора("ЕстьОтставаниеОтГрафика");
	Отбор.Использование = ДопОтборПросрочен;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Значение      = Истина;
	
	МассивОтборов.Добавить(Отбор);
	
	// Отбор по состоянию ограничений в графике
	
	МассивЗначений = Новый Массив;
	
	Если ДопОтборНаКритическомПути
		ИЛИ ДопОтборЗадерживаютЗаказ Тогда
		МассивЗначений.Добавить(2);
	КонецЕсли;
	
	Если ДопОтборЗадерживаютЗаказ Тогда
		МассивЗначений.Добавить(3);
	КонецЕсли;
	
	Отбор = СтруктураОтбора("СостояниеОграниченийВГрафике");
	Отбор.Использование = МассивЗначений.ВГраница() <> -1;
	Отбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.Значение      = МассивЗначений;
	
	МассивОтборов.Добавить(Отбор);
	
	// Устанавливаем отборы
	
	Для Каждого ЭлементОтбора Из МассивОтборов Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
															Список,
															ЭлементОтбора.Поле,
															ЭлементОтбора.Значение,
															ЭлементОтбора.ВидСравнения,,
															ЭлементОтбора.Использование);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоЦепочкеЭтапов()
	
	МенеджерЭтапа = Документы.ЭтапПроизводства2_2;
	
	МассивСсылок = Новый Массив;
	
	Если ТипОтбораПоЦепочкеЭтапов <> ЗначениеПоказатьВсеЭтапы() Тогда
		
		ТекущийЭтапЦепочки = Элементы.Список.ТекущаяСтрока;
		
		Если ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьЭтапИСмежныеЭтапы() Тогда
			
			МассивСсылок = МенеджерЭтапа.СмежныеЭтапы(ТекущийЭтапЦепочки);
			
		ИначеЕсли ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьПоследователей() Тогда
			
			МассивСсылок = МенеджерЭтапа.ВсеПоследователи(ТекущийЭтапЦепочки);

		ИначеЕсли ТипОтбораПоЦепочкеЭтапов = ЗначениеПоказатьПредшественников() Тогда
			
			МассивСсылок = МенеджерЭтапа.ВсеПредшественники(ТекущийЭтапЦепочки);
			
		КонецЕсли;
		
		МассивСсылок.Добавить(ТекущийЭтапЦепочки);
		
	Иначе
		
		ТекущийЭтапЦепочки = Неопределено;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", МассивСсылок, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(МассивСсылок));
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "УстановитьОтборПоЦепочкеЭтапов");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоДаннымЭтапа()
	
	НастроитьДинамическийСписок("УстановитьОтборыПоДаннымЭтапа");
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "УстановитьОтборыПоДаннымЭтапа");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОтбораПоАктуальности()
	
	ОтборыСписковКлиентСервер.ЗаполнитьСписокВыбораОтбораПоАктуальности(Элементы.ОтборДатаЗапуска.СписокВыбора);
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяУстановитьОтборПоСостоянию()
	
	Возврат ДопОтборТребуетсяУточнение
		ИЛИ ДопОтборГотовКВыполнению
		ИЛИ ДопОтборОжидаетПредшественников
		ИЛИ ДопОтборОжидаетНачала
		ИЛИ ДопОтборОжидаетЗавершения
		ИЛИ ДопОтборЗавершен
		ИЛИ ДопОтборТребуетсяПланироватьГрафик
		ИЛИ ДопОтборТребуетсяОбеспечение
		ИЛИ ДопОтборПросрочен
		ИЛИ ДопОтборНаКритическомПути
		ИЛИ ДопОтборЗадерживаютЗаказ;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяОбновитьУстановленныеОтборы(ИмяСобытия, Источник)
	
	Возврат ОбновитьОтборыПриПовторномОткрытии
			И ИмяСобытия = УправлениеПроизводствомКлиентСервер.ИмяСобытияОбновитьДиспетчированиеЭтапов()
			И Источник   = ВладелецФормы;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДанных

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновитьДанные()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанные", 60, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбработчикОжиданияОбновитьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДанные");

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияОбновитьДанныеПриАктивизации()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанные", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанные()
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(ОбновлениеПоРасписанию = Ложь)
	
	Если НЕ ОбновлениеПоРасписанию Тогда
		ОтключитьОбработчикОжиданияОбновитьДанные();
	КонецЕсли;
	
	Если ВводДоступен() Тогда
		
		Элементы.Список.Обновить();
		
		ПодключитьОбработчикОжиданияОбновитьДанные();
		
	Иначе
		
		ПодключитьОбработчикОжиданияОбновитьДанныеПриАктивизации();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	 
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ИмяЗадания, ПараметрыЗадания)
	
	ЗаданиеВыполнено = ЗапуститьФоновоеЗаданиеНаСервере(ИмяЗадания, ПараметрыЗадания);
	
	Если ЗаданиеВыполнено Тогда
		ОбработатьЗавершениеЗаданияНаКлиенте(Ложь);
	Иначе
		ОткрытьФормуДлительнойОперации();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(Знач ИмяЗадания, Знач ПараметрыЗадания)
	
	Если ИмяЗадания = "ПланироватьГрафикПроизводства" Тогда
		
		РезультатЗапускаЗадания = ЗапуститьЗаданиеПланироватьГрафикПроизводства(ПараметрыЗадания);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Неизвестное задание ""%1""'"),
							ИмяЗадания);
	КонецЕсли;
	
	ФоновоеЗадание.ИмяЗадания           = ИмяЗадания;
	ФоновоеЗадание.ИдентификаторЗадания = РезультатЗапускаЗадания.ИдентификаторЗадания;
	ФоновоеЗадание.АдресХранилища       = РезультатЗапускаЗадания.АдресХранилища;
	
	Возврат РезультатЗапускаЗадания.ЗаданиеВыполнено;

КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗаданияНаКлиенте(ОбновитьДанные = Истина)

	Если ФоновоеЗадание.ИмяЗадания = "ПланироватьГрафикПроизводства" Тогда
		ЗавершениеЗаданияПланироватьГрафикПроизводства(ФоновоеЗадание.АдресХранилища, ОбновитьДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(
		ЭтаФорма, ФоновоеЗадание.ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() Тогда
			
			Если ЗаданиеВыполнено(ФоновоеЗадание.ИдентификаторЗадания) Тогда
				ОбработатьЗавершениеЗаданияНаКлиенте();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#Область ВыполнениеЗаданий

&НаСервере
Функция ЗапуститьЗаданиеПланироватьГрафикПроизводства(ПараметрыЗадания)
	
	НаименованиеЗадания = НСтр("ru = 'Планирование графика этапов производства'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
									УникальныйИдентификатор,
									"Обработки.ПланированиеГрафикаПроизводства2_2.ПланироватьРабочийГрафикЭтапов",
									ПараметрыЗадания,
									НаименованиеЗадания);
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаКлиенте
Процедура ЗавершениеЗаданияПланироватьГрафикПроизводства(АдресХранилища, ОбновитьДанные)
	
	Если ОбновитьДанные Тогда
		
		Результат = ЗавершениеЗаданияНаСервере(АдресХранилища);
		
	Иначе
		
		Результат = ЗавершениеЗаданияНаСервереБезКонтекста(АдресХранилища);
		
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ОповеститьПользователяОПланированииГрафикаПроизводства(Результат);
	
КонецПроцедуры

&НаСервере
Функция ЗавершениеЗаданияНаСервере(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ОбновитьДанныеНаСервере();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗавершениеЗаданияНаСервереБезКонтекста(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ВыбранныеЭтапы()

	Возврат ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтатуса(СписокСтатусов)
	
	Результат = "";
	СтатусЗавершен     = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");
	КоличествоСтатусов = Перечисления.СтатусыЭтаповПроизводства2_2.Количество();
	
	Если СписокСтатусов.Количество() = КоличествоСтатусов - 1
		И СписокСтатусов.НайтиПоЗначению(СтатусЗавершен) = Неопределено Тогда
		
		Результат = НСтр("ru = 'Незавершенные'");
		
	Иначе
		
		Для Каждого Элемент Из СписокСтатусов Цикл
			
			Результат = Результат + ?(ПустаяСтрока(Результат), "", "; ") + Элемент.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеРаспоряжения(Распоряжение)
	
	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "Номер, Дата");
	
	НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыРаспоряжения.Номер), " " + РеквизитыРаспоряжения.Номер, "");
	ДатаДокумента = Формат(РеквизитыРаспоряжения.Дата, "ДЛФ=D");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = '№%1 от %2'"),
											НомерДокумента,
											ДатаДокумента);
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураОтбора(Поле = "")
	
	Возврат Новый Структура("Поле, Значение, ВидСравнения, Использование", Поле);
	
КонецФункции

&НаСервереБезКонтекста
Процедура АвтоПодборЗаказовНаПроизводство(Текст, ДанныеВыбора)
	
	МассивСсылок = Документы.ЗаказНаПроизводство2_2.АвтоПодборЗаказовНаПроизводство(Текст);
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивСсылок);

КонецПроцедуры

&НаКлиенте
Функция ОткрытьСостояниеОбеспечения(ВыбраннаяСтрока)
	
	Заказы = Новый СписокЗначений;
	Заказы.Добавить(ВыбраннаяСтрока);

	ПараметрыОткрытия = Новый Структура("Заказы", Заказы);
	ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПланированияЗаказа(Распоряжение)
	
	ПараметрыФормы = Новый Структура("Распоряжение", Распоряжение);
	
	ОткрытьФорму("Обработка.ПланированиеГрафикаПроизводства2_2.Форма.ПланированиеГрафикаЗаказа", ПараметрыФормы,, Распоряжение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ОбновитьОтборыПриПовторномОткрытии = Ложь;

#КонецОбласти