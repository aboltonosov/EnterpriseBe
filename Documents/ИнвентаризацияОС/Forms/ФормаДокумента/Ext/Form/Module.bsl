
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаВыбора" Тогда
		Если ВыбранноеЗначение.Количество() > 0 Тогда
			Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
				Объект.ОС.Добавить().ОсновноеСредство = ЭлементМассива;
			КонецЦикла;
			ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ИнициализироватьСтруктуруДействий();
	ЗаполнитьКэшированныеСчетаУчета();
	
	Элементы.ОСДействие.Видимость = Объект.Проведен;
	
	ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьДокументаНаОснованииИнвентаризации" Тогда
		ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.ОС.Количество() > 0 Тогда
		ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.ОС.Количество() > 0 Тогда
		ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОС

&НаКлиенте
Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОСДокументНаОсновании Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаГиперссылкиДокументаНаОсновании(ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	Если Копирование = Истина Тогда
		СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
		СтрокаТЧ.НаличиеПоДаннымУчета = Ложь;
	КонецЕсли;
	
	ОбновитьПараметрыВыбораСчетаУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
	СтрокаТЧ.НаличиеПоДаннымУчета = Ложь;
	
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Элементы.ОС.ВыделенныеСтроки);
	Иначе
		СтрокаТЧ.ИнвентарныйНомер = "";
		СтрокаТЧ.Подразделение = Неопределено;
		СтрокаТЧ.Состояние = Неопределено;
		СтрокаТЧ.СчетУчета = Неопределено;
	КонецЕсли;
	ОбновитьПараметрыВыбораСчетаУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОССчетУчетаПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	СтрокаТЧ.ЭтоСчетГруппы08 = (СчетаГруппы08.НайтиПоЗначению(СтрокаТЧ.СчетУчета)<>Неопределено);
	ЗаполнитьДействие(СтрокаТЧ, Объект.ПодразделениеОрганизации, КэшированныеЗначенияДокументовНаОсновании);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСНаличиеФактическоеПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	Если СтрокаТЧ.НаличиеФактическое Тогда
		Если СтрокаТЧ.СтоимостьФактическая = 0 Тогда
			СтрокаТЧ.СтоимостьФактическая = СтрокаТЧ.СтоимостьПоДаннымУчета;
		КонецЕсли;
	Иначе
		СтрокаТЧ.СтоимостьФактическая = 0;
	КонецЕсли;
	
	РассчитатьВычисляемыеПоляПоСтроке(СтрокаТЧ);
	
	ЗаполнитьДействие(СтрокаТЧ, Объект.ПодразделениеОрганизации, КэшированныеЗначенияДокументовНаОсновании);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСНаличиеПоДаннымУчетаПриИзменении(Элемент)
	
	ТекущаяСтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ.НаличиеПоДаннымУчета Тогда
		Если ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = 0 Тогда
			ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = ТекущаяСтрокаТЧ.СтоимостьФактическая;
		КонецЕсли;
	Иначе
		ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = 0;
	КонецЕсли;
	
	РассчитатьВычисляемыеПоляПоСтроке(ТекущаяСтрокаТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьФактическаяПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	РассчитатьВычисляемыеПоляПоСтроке(СтрокаТЧ);
	
	ЗаполнитьДействие(СтрокаТЧ, Объект.ПодразделениеОрганизации, КэшированныеЗначенияДокументовНаОсновании);
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьПоДаннымУчетаПриИзменении(Элемент)
	
	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриИзменении(Элемент)
	
	Если Элементы.ОС.ТекущиеДанные <> Неопределено Тогда
		РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.Председатель Тогда
		ИндексУдаляемойСтроки = Объект.ИнвентаризационнаяКомиссия.Индекс(ТекущаяСтрокаТЧ);
		КоличествоСтрок = Объект.ИнвентаризационнаяКомиссия.Количество() - 1;
		
		Если КоличествоСтрок > 0 Тогда
			Если ИндексУдаляемойСтроки <= КоличествоСтрок - 1 Тогда
				ИндексНовогоПредседателя = ИндексУдаляемойСтроки + 1;
			Иначе
				ИндексНовогоПредседателя = КоличествоСтрок - 1;
			КонецЕсли;
			Объект.ИнвентаризационнаяКомиссия[ИндексНовогоПредседателя].Председатель = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
		ТекущаяСтрокаТЧ.ФизЛицо = Неопределено;
		ТекущаяСтрокаТЧ.Председатель = Ложь;
	Иначе // Создание заново
		Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
			Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строки = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));
	
	Если Строки.Количество() > 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Физическое лицо <%1> уже подобрано!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
		ПоказатьПредупреждение(Неопределено, ТекстСообщения, 60);
	Иначе
		НоваяСтрока = Объект.ИнвентаризационнаяКомиссия.Добавить();
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение;
		Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
			НоваяСтрока.Председатель = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПредседательПриИзменении(Элемент)
	
	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрокаТЧ.Председатель Тогда
		// Снимать флажок нельзя
		ТекущаяСтрокаТЧ.Председатель = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Объект.ИнвентаризационнаяКомиссия Цикл
		Если СтрокаТЧ.НомерСтроки <> ТекущаяСтрокаТЧ.НомерСтроки Тогда
			СтрокаТЧ.Председатель = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияФизЛицоПриИзменении(Элемент)
	
	Если Объект.ИнвентаризационнаяКомиссия.Количество() = 1 Тогда
		Объект.ИнвентаризационнаяКомиссия[0].Председатель = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрокаТЧ = Элементы.ИнвентаризационнаяКомиссия.ТекущиеДанные;
	Если ТекущаяСтрокаТЧ.ФизЛицо <> ВыбранноеЗначение Тогда
		СтрокиТабличнойЧасти = Объект.ИнвентаризационнаяКомиссия.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение));
		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ШаблонСообщения = НСтр("ru = 'Физическое лицо <%1> уже включено в состав комиссии!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
			ПоказатьПредупреждение(Неопределено, ТекстСообщения, 60);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборОС(Команда)
	
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКУчету"));
	СписокСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОС.НеПринятоКУчету"));
	СписокСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету"));
	
	ПараметрыОтбор = Новый Структура;
	ПараметрыОтбор.Вставить("БУСостояние", СписокСостояний);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контекст", "БУ, МФУ");
	ПараметрыФормы.Вставить("ДатаСведений", Объект.Дата);
	ПараметрыФормы.Вставить("ТекущийРегистратор", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбор);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборФизическихЛиц(Команда)
	
	ПараметрыФормы = Новый Структура("РежимВыбора, МножественныйВыбор, ЗакрыватьПриВыборе", Истина, Ложь, Ложь);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.ИнвентаризационнаяКомиссия, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	ПродолжитьЗаполнениеИзОстатков("ЗаполнитьПоОстаткам");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеУчета(Команда)
	
	ПродолжитьЗаполнениеИзОстатков("ЗаполнитьДанныеУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическиеДанные(Команда)
	
	ПродолжитьЗаполнениеИзОстатков("ЗаполнитьФактическиеДанные");
	
КонецПроцедуры

#Область СтандартныеПодсистемы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область ПредставлениеДействий
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДействие.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ДокументНаОсновании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
	#Область ТолькоПросмотр_СчетУчета
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССчетУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ОсновноеСредство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область СчетУчетаЦФ
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОССчетУчетаЦФПоДаннымУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.СчетУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.СчетУчетаПоДаннымУчета");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИнициализироватьСтруктуруДействий();
	ЗаполнитьКэшированныеСчетаУчета();
	
	ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
	
	Элементы.ОСДействие.Видимость = Объект.Проведен;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшированныеСчетаУчета()
	
	// 4D:ERP для Беларуси, Дмитрий, 01.10.2015 17:03:49 
	// Локализация плана счетов, №8969
	// TODO
	// {
	СчетаГруппы08.Очистить();
	СчетаГруппы08.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	СчетаГруппы08.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИнвестиционнойНедвижимости);
	СчетаГруппы08.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеПредметовФинансовойАренды);
	СчетаГруппы08.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИныхДолгосрочныхАктивов);
	СчетаГруппы08.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	// }
	// 4D
	
	СчетаГруппы01и08.Очистить();
	СчетаГруппы01и08.ЗагрузитьЗначения(СчетаГруппы08.ВыгрузитьЗначения());
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ))
	|	И НЕ Хозрасчетный.Ссылка В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеМЦ))
	|	И НЕ Хозрасчетный.Забалансовый
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И НЕ Хозрасчетный.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	НЕ Хозрасчетный.Ссылка В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредстваСданныеВАренду), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ИзносОсновныхСредств), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения))
	|	И Хозрасчетный.Забалансовый
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И НЕ Хозрасчетный.ПометкаУдаления
	|	И Хозрасчетный.Ссылка В
	|			(ВЫБРАТЬ
	|				ХозрасчетныйВидыСубконто.Ссылка
	|			ИЗ
	|				ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|			ГДЕ
	|				ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СчетаГруппы01и08.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруДействий()
	
	Если СтруктураДействий <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(Перечисления.ДействияНаОснованииИнвентаризацииОС.Перемещение, "ПеремещениеОС");
	Соответствие.Вставить(Перечисления.ДействияНаОснованииИнвентаризацииОС.Списание, "СписаниеОС");
	Соответствие.Вставить(Перечисления.ДействияНаОснованииИнвентаризацииОС.ВыбытиеАрендованныхОС, "ВыбытиеАрендованныхОС");
	Соответствие.Вставить(Перечисления.ДействияНаОснованииИнвентаризацииОС.ПринятиеКУчету, "ПринятиеКУчетуОС");
	Соответствие.Вставить(Перечисления.ДействияНаОснованииИнвентаризацииОС.Операция, "ОперацияБух");
	
	СтруктураДействий = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВычисляемыеПоляПоСтроке(Строка)
	
	РазницаПоНаличию = Число(Строка.НаличиеФактическое) - Число(Строка.НаличиеПоДаннымУчета);
	РазницаПоСтоимости = Строка.СтоимостьФактическая - Строка.СтоимостьПоДаннымУчета;
	
	Строка.ИзлишекКоличество = ?(РазницаПоНаличию > 0, РазницаПоНаличию, 0);
	Строка.НедостачаКоличество = ?(РазницаПоНаличию < 0, -РазницаПоНаличию, 0);
	Строка.ИзлишекСумма = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
	Строка.НедостачаСумма = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеИзОстатков(Действия)
	
	ТекстВопроса = НСтр(
		"ru = 'При заполнении существующие данные будут перезаполнены.
		|Продолжить?'");
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения(
			"ПродолжитьЗаполнениеИзОстатковЗавершение",
			ЭтаФорма,
			Новый Структура(Действия)),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеИзОстатковЗавершение(Результат, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Или ДополнительныеПараметры=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЗаполнитьПоОстаткам") Тогда
		ЗаполнитьПоОстаткамСервер();
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЗаполнитьДанныеУчета") Тогда
		ЗаполнитьДанныеУчетаСервер();
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЗаполнитьФактическиеДанные") Тогда
		ЗаполнитьФактическиеДанныеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамСервер()
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеУчетаСервер()
	
	ЗаполнитьТабличнуюЧасть(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактическиеДанныеСервер()
	
	Для Каждого СтрокаОС Из Объект.ОС Цикл
		СтрокаОС.СтоимостьФактическая = СтрокаОС.СтоимостьПоДаннымУчета;
		СтрокаОС.НаличиеФактическое = СтрокаОС.НаличиеПоДаннымУчета;
		РассчитатьВычисляемыеПоляПоСтроке(СтрокаОС);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧасть(ЗаполнитьПоСпискуОС=Ложь, Знач Строки=Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтрок = Неопределено;
	Если ЗаполнитьПоСпискуОС И Строки <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Если ТипЗнч(Строки) = Тип("Массив") Тогда
			Для Каждого ИдентификаторСтроки Из Строки Цикл
				МассивСтрок.Добавить(Объект.ОС.НайтиПоИдентификатору(ИдентификаторСтроки));
			КонецЦикла;
		Иначе
			МассивСтрок.Добавить(Строки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнитьПоСпискуОС Тогда
		ТаблицаОС = Объект.ОС.Выгрузить(МассивСтрок);
	Иначе
		ТаблицаОС = Объект.ОС.Выгрузить().СкопироватьКолонки();
	КонецЕсли;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	Документы.ИнвентаризацияОС.ДобавитьВременнуюТаблицуСозданныхДокументовНаОсновании(МВТ, Объект.Ссылка);
	
	МассивВидовСубконтоОС = Новый Массив;
	МассивВидовСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	МассивВидовСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ДанныеДокумента", ТаблицаОС);
	Запрос.УстановитьПараметр("ЗаполнитьПоСпискуОС", ЗаполнитьПоСпискуОС);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивВидовСубконтоОС", МассивВидовСубконтоОС);
	
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	(ВЫРАЗИТЬ(ДанныеДокумента.НомерСтроки КАК ЧИСЛО)) - 1 КАК ИндексСтроки,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации) КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СчетУчета КАК ПланСчетов.Хозрасчетный) КАК СчетУчета,
	|	ВЫРАЗИТЬ(ДанныеДокумента.МОЛ КАК Справочник.ФизическиеЛица) КАК МОЛ,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СтоимостьФактическая КАК ЧИСЛО) КАК СтоимостьФактическая,
	|	ВЫРАЗИТЬ(ДанныеДокумента.НаличиеФактическое КАК БУЛЕВО) КАК НаличиеФактическое
	|ПОМЕСТИТЬ втДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Состояния.ОсновноеСредство, втДанныеДокумента.ОсновноеСредство) КАК ОсновноеСредство,
	|	Состояния.Организация,
	|	ЕСТЬNULL(втДанныеДокумента.ИндексСтроки, НЕОПРЕДЕЛЕНО) КАК ИндексСтроки,
	|	ЕСТЬNULL(Состояния.Состояние, НЕОПРЕДЕЛЕНО) КАК Состояние,
	|	НЕ СостоянияАрендодателя.ОсновноеСредство ЕСТЬ NULL КАК АрендодательОрганизация,
	|	втДанныеДокумента.СчетУчета КАК СчетУчета,
	|	втДанныеДокумента.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ втДанныеДокументаИСостояние
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И (НЕ &ЗаполнитьПоСпискуОС
	|					ИЛИ ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втДанныеДокумента КАК Т))) КАК Состояния
	|		ПОЛНОЕ СОЕДИНЕНИЕ втДанныеДокумента КАК втДанныеДокумента
	|		ПО Состояния.ОсновноеСредство = втДанныеДокумента.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|				&Дата,
	|				Организация <> &Организация
	|					И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|					И (НЕ &ЗаполнитьПоСпискуОС
	|						ИЛИ ОсновноеСредство В
	|							(ВЫБРАТЬ
	|								Т.ОсновноеСредство
	|							ИЗ
	|								втДанныеДокумента КАК Т))) КАК СостоянияАрендодателя
	|		ПО Состояния.ОсновноеСредство = СостоянияАрендодателя.ОсновноеСредство
	|			И (ЕСТЬNULL(Состояния.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету))
	|ГДЕ
	|	(НЕ &ЗаполнитьПоСпискуОС
	|			ИЛИ НЕ втДанныеДокумента.ОсновноеСредство ЕСТЬ NULL)
	|	И (&ЗаполнитьПоСпискуОС
	|			ИЛИ ЕСТЬNULL(Состояния.Состояние, НЕОПРЕДЕЛЕНО) В (ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету), ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеДокументаИСостояние.ИндексСтроки КАК ИндексСтроки,
	|	втДанныеДокументаИСостояние.ОсновноеСредство КАК ОсновноеСредство,
	|	втДанныеДокументаИСостояние.Организация КАК Организация,
	|	втДанныеДокументаИСостояние.АрендодательОрганизация КАК АрендодательОрганизация,
	|	ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	Местонахождения.Местонахождение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ &ЗаполнитьПоСпискуОС
	|			ТОГДА ЕСТЬNULL(СчетаБухгалтерскогоУчета.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|		КОГДА втДанныеДокументаИСостояние.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СчетаБухгалтерскогоУчета.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|		ИНАЧЕ втДанныеДокументаИСостояние.СчетУчета
	|	КОНЕЦ КАК СчетУчета,
	|	ЕСТЬNULL(Местонахождения.МОЛ, втДанныеДокументаИСостояние.МОЛ) КАК МОЛ,
	|	СчетаБухгалтерскогоУчета.СчетУчета КАК СчетУчетаПоДаннымУчета,
	|	ПараметрыЦелевогоФинансирования.СчетУчета КАК СчетУчетаЦФПоДаннымУчета,
	|	ЕСТЬNULL(Местонахождения.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК МОЛПоДаннымУчета,
	|	втДанныеДокументаИСостояние.Состояние КАК Состояние
	|ПОМЕСТИТЬ втСведения
	|ИЗ
	|	втДанныеДокументаИСостояние КАК втДанныеДокументаИСостояние
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И (НЕ &ЗаполнитьПоСпискуОС
	|						ИЛИ ОсновноеСредство В
	|							(ВЫБРАТЬ
	|								Т.ОсновноеСредство
	|							ИЗ
	|								втДанныеДокумента КАК Т))) КАК ПервоначальныеСведения
	|		ПО втДанныеДокументаИСостояние.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втДанныеДокументаИСостояние КАК Т)) КАК СчетаБухгалтерскогоУчета
	|		ПО втДанныеДокументаИСостояние.ОсновноеСредство = СчетаБухгалтерскогоУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втДанныеДокументаИСостояние КАК Т)) КАК Местонахождения
	|		ПО втДанныеДокументаИСостояние.ОсновноеСредство = Местонахождения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЦелевогоФинансированияОС.СрезПоследних(
	|				&Дата,
	|				ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						Т.ОсновноеСредство
	|					ИЗ
	|						втДанныеДокументаИСостояние КАК Т)) КАК ПараметрыЦелевогоФинансирования
	|		ПО (НЕ ПервоначальныеСведения.Организация ЕСТЬ NULL)
	|			И (ПараметрыЦелевогоФинансирования.ПрименениеЦелевогоФинансирования)
	|			И втДанныеДокументаИСостояние.ОсновноеСредство = ПараметрыЦелевогоФинансирования.ОсновноеСредство
	|ГДЕ
	|	(&ЗаполнитьПоСпискуОС
	|			ИЛИ Местонахождения.Местонахождение = &Подразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведения.ОсновноеСредство КАК ОсновноеСредство,
	|	втСведения.СчетУчета КАК СчетУчета,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0) + ЕСТЬNULL(ХозрасчетныйОстаткиЦФ.СуммаОстаток, 0) КАК Сумма
	|ПОМЕСТИТЬ втСтоимости01
	|ИЗ
	|	втСведения КАК втСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Дата,
	|				Счет В
	|					(ВЫБРАТЬ
	|						Т.СчетУчета
	|					ИЗ
	|						втСведения КАК Т),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|				Организация = &Организация
	|					И Подразделение = &Подразделение
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втСведения КАК Т)) КАК ХозрасчетныйОстатки
	|		ПО втСведения.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1
	|			И втСведения.СчетУчета = ХозрасчетныйОстатки.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Дата,
	|				Счет В
	|					(ВЫБРАТЬ
	|						Т.СчетУчетаЦФПоДаннымУчета
	|					ИЗ
	|						втСведения КАК Т),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|				Организация = &Организация
	|					И Подразделение = &Подразделение
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втСведения КАК Т)) КАК ХозрасчетныйОстаткиЦФ
	|		ПО втСведения.ОсновноеСредство = ХозрасчетныйОстаткиЦФ.Субконто1
	|			И втСведения.СчетУчетаЦФПоДаннымУчета = ХозрасчетныйОстаткиЦФ.Счет
	|ГДЕ
	|	НЕ ЕСТЬNULL(ХозрасчетныйОстатки.Счет, ХозрасчетныйОстаткиЦФ.Счет) ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ втСтоимости08
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Подразделение = &Подразделение
	|				И (НЕ &ЗаполнитьПоСпискуОС
	|					ИЛИ Субконто1 В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втДанныеДокумента КАК Т))) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства),
	|			Организация = &Организация
	|				И Подразделение = &Подразделение
	|				И (НЕ &ЗаполнитьПоСпискуОС
	|					ИЛИ Субконто1 В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втДанныеДокумента КАК Т))) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументыНаОсновании.Ссылка КАК Ссылка,
	|	втДокументыНаОсновании.ОсновноеСредство КАК ОсновноеСредство,
	|	втДокументыНаОсновании.Подразделение КАК Подразделение,
	|	втДокументыНаОсновании.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
	|	втДокументыНаОсновании.Действие
	|ИЗ
	|	втДокументыНаОсновании КАК втДокументыНаОсновании
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеДокумента.ИндексСтроки,
	|	втДанныеДокумента.ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА втДанныеДокумента.СчетУчета = втСтоимости08.СчетУчета
	|			ТОГДА &Организация
	|		ИНАЧЕ втСведения.Организация
	|	КОНЕЦ КАК Организация,
	|	втСведения.АрендодательОрганизация,
	|	втСведения.ИнвентарныйНомер,
	|	ВЫБОР
	|		КОГДА втДанныеДокумента.СчетУчета = втСтоимости08.СчетУчета
	|				ИЛИ втДанныеДокумента.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					И НЕ втСтоимости08.СчетУчета ЕСТЬ NULL
	|			ТОГДА &Подразделение
	|		ИНАЧЕ втСведения.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	втСведения.МОЛ,
	|	ЕСТЬNULL(втСтоимости01.СчетУчета, ЕСТЬNULL(втСтоимости08.СчетУчета, втСведения.СчетУчета)) КАК СчетУчета,
	|	ЕСТЬNULL(втСтоимости01.Сумма, втСтоимости08.Сумма) КАК СтоимостьПоДаннымУчета,
	|	втСведения.Состояние,
	|	(втСведения.Подразделение = &Подразделение
	|		ИЛИ втДанныеДокумента.СчетУчета = втСтоимости08.СчетУчета
	|		ИЛИ втДанныеДокумента.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			И НЕ втСтоимости08.СчетУчета ЕСТЬ NULL)
	|		И (втДанныеДокумента.МОЛ = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				И НЕ втСведения.МОЛПоДаннымУчета ЕСТЬ NULL
	|			ИЛИ втСведения.МОЛПоДаннымУчета = втДанныеДокумента.МОЛ)
	|		И (втДанныеДокумента.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				И НЕ(втСведения.СчетУчетаПоДаннымУчета ЕСТЬ NULL
	|						И втСтоимости08.СчетУчета ЕСТЬ NULL)
	|			ИЛИ втСведения.СчетУчетаПоДаннымУчета = втДанныеДокумента.СчетУчета
	|			ИЛИ втДанныеДокумента.СчетУчета = втСтоимости08.СчетУчета) КАК НаличиеПоДаннымУчета,
	|	втСведения.СчетУчетаПоДаннымУчета,
	|	втСведения.СчетУчетаЦФПоДаннымУчета,
	|	втСведения.МОЛПоДаннымУчета
	|ИЗ
	|	втДанныеДокумента КАК втДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведения КАК втСведения
	|		ПО втДанныеДокумента.ОсновноеСредство = втСведения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтоимости01 КАК втСтоимости01
	|		ПО втДанныеДокумента.ОсновноеСредство = втСтоимости01.ОсновноеСредство
	|			И (втДанныеДокумента.СчетУчета = втСтоимости01.СчетУчета
	|				ИЛИ втДанныеДокумента.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтоимости08 КАК втСтоимости08
	|		ПО втДанныеДокумента.ОсновноеСредство = втСтоимости08.ОсновноеСредство
	|			И (втДанныеДокумента.СчетУчета = втСтоимости08.СчетУчета
	|				ИЛИ втДанныеДокумента.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					И втСтоимости01.СчетУчета ЕСТЬ NULL)
	|ГДЕ
	|	&ЗаполнитьПоСпискуОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	втСведения.ОсновноеСредство,
	|	втСведения.Организация,
	|	втСведения.АрендодательОрганизация,
	|	втСведения.ИнвентарныйНомер,
	|	втСведения.Подразделение,
	|	втСведения.МОЛ,
	|	ЕСТЬNULL(втСтоимости01.СчетУчета, втСведения.СчетУчета),
	|	втСтоимости01.Сумма,
	|	втСведения.Состояние,
	|	втСведения.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету), ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)),
	|	втСведения.СчетУчетаПоДаннымУчета,
	|	втСведения.СчетУчетаЦФПоДаннымУчета,
	|	втСведения.МОЛПоДаннымУчета
	|ИЗ
	|	втСведения КАК втСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтоимости01 КАК втСтоимости01
	|		ПО втСведения.ОсновноеСредство = втСтоимости01.ОсновноеСредство
	|			И втСведения.СчетУчетаПоДаннымУчета = втСтоимости01.СчетУчета
	|ГДЕ
	|	НЕ &ЗаполнитьПоСпискуОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	втСтоимости08.ОсновноеСредство,
	|	&Организация,
	|	ЛОЖЬ,
	|	"""",
	|	&Подразделение,
	|	НЕОПРЕДЕЛЕНО,
	|	втСтоимости08.СчетУчета,
	|	втСтоимости08.Сумма,
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА,
	|	втСтоимости08.СчетУчета,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	втСтоимости08 КАК втСтоимости08
	|ГДЕ
	|	НЕ &ЗаполнитьПоСпискуОС";
	
	#КонецОбласти
	
	Пакет = Запрос.ВыполнитьПакет();
	ЗаполнитьКэшированныеЗначенияДокументовНаОсновании(Пакет[Пакет.Количество()-2]);
	
	Результат = Пакет[Пакет.Количество()-1];
	
	Если Не ЗаполнитьПоСпискуОС Тогда
		Объект.ОС.Очистить();
	КонецЕсли;
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Строка = ?(ЗаполнитьПоСпискуОС, Объект.ОС[Выборка.ИндексСтроки], Объект.ОС.Добавить());
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		Строка.ЭтоСчетГруппы08 = (СчетаГруппы08.НайтиПоЗначению(Строка.СчетУчета)<>Неопределено);
		РассчитатьВычисляемыеПоляПоСтроке(Строка);
		ЗаполнитьДействие(Строка, Объект.ПодразделениеОрганизации, КэшированныеЗначенияДокументовНаОсновании);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличнойЧасти(Знач Строки=Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтрок = Неопределено;
	Если Строки <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Если ТипЗнч(Строки) = Тип("Массив") Тогда
			Для Каждого ИдентификаторСтроки Из Строки Цикл
				МассивСтрок.Добавить(Объект.ОС.НайтиПоИдентификатору(ИдентификаторСтроки));
			КонецЦикла;
		Иначе
			МассивСтрок.Добавить(Строки);
		КонецЕсли;
	КонецЕсли;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	Документы.ИнвентаризацияОС.ДобавитьВременнуюТаблицуСозданныхДокументовНаОсновании(МВТ, Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("ДанныеДокумента", Объект.ОС.Выгрузить(МассивСтрок));
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	(ВЫРАЗИТЬ(ДанныеДокумента.НомерСтроки КАК ЧИСЛО)) - 1 КАК ИндексСтроки,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации) КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СчетУчета КАК ПланСчетов.Хозрасчетный) КАК СчетУчета,
	|	ВЫРАЗИТЬ(ДанныеДокумента.МОЛ КАК Справочник.ФизическиеЛица) КАК МОЛ,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СтоимостьФактическая КАК ЧИСЛО) КАК СтоимостьФактическая,
	|	ВЫРАЗИТЬ(ДанныеДокумента.НаличиеФактическое КАК БУЛЕВО) КАК НаличиеФактическое
	|ПОМЕСТИТЬ втДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументыНаОсновании.Ссылка КАК Ссылка,
	|	втДокументыНаОсновании.ОсновноеСредство,
	|	втДокументыНаОсновании.Подразделение,
	|	втДокументыНаОсновании.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
	|	втДокументыНаОсновании.Действие
	|ИЗ
	|	втДокументыНаОсновании КАК втДокументыНаОсновании
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеДокумента.ИндексСтроки КАК ИндексСтроки,
	|	втДанныеДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	Местонахождения.Местонахождение КАК Подразделение,
	|	Состояния.Состояние КАК Состояние,
	|	НЕ СостоянияАрендодателя.ОсновноеСредство ЕСТЬ NULL  КАК АрендодательОрганизация,
	|	СчетаБухгалтерскогоУчета.СчетУчета КАК СчетУчетаПоДаннымУчета,
	|	ПараметрыЦелевогоФинансирования.СчетУчета КАК СчетУчетаЦФПоДаннымУчета,
	|	Местонахождения.МОЛ КАК МОЛПоДаннымУчета
	|ИЗ
	|	втДанныеДокумента КАК втДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втДанныеДокумента КАК Т)) КАК ПервоначальныеСведения
	|		ПО втДанныеДокумента.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втДанныеДокумента КАК Т)) КАК СчетаБухгалтерскогоУчета
	|		ПО втДанныеДокумента.ОсновноеСредство = СчетаБухгалтерскогоУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втДанныеДокумента КАК Т)) КАК Состояния
	|		ПО втДанныеДокумента.ОсновноеСредство = Состояния.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|				&Дата,
	|				Организация <> &Организация
	|					И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втДанныеДокумента КАК Т)) КАК СостоянияАрендодателя
	|		ПО втДанныеДокумента.ОсновноеСредство = СостоянияАрендодателя.ОсновноеСредство
	|			И (ЕСТЬNULL(Состояния.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							втДанныеДокумента КАК Т)) КАК Местонахождения
	|		ПО втДанныеДокумента.ОсновноеСредство = Местонахождения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЦелевогоФинансированияОС.СрезПоследних(
	|				&Дата,
	|				ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						Т.ОсновноеСредство
	|					ИЗ
	|						втДанныеДокумента КАК Т)) КАК ПараметрыЦелевогоФинансирования
	|		ПО (НЕ ПервоначальныеСведения.Организация ЕСТЬ NULL )
	|			И (ПараметрыЦелевогоФинансирования.ПрименениеЦелевогоФинансирования)
	|			И втДанныеДокумента.ОсновноеСредство = ПараметрыЦелевогоФинансирования.ОсновноеСредство";
	
	#КонецОбласти
	
	Пакет = Запрос.ВыполнитьПакет();
	ЗаполнитьКэшированныеЗначенияДокументовНаОсновании(Пакет[Пакет.Количество()-2]);
	
	Результат = Пакет[Пакет.Количество()-1];
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Объект.ОС[Выборка.ИндексСтроки];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, , "ОсновноеСредство");
		Строка.ЭтоСчетГруппы08 = (СчетаГруппы08.НайтиПоЗначению(Строка.СчетУчета)<>Неопределено);
		РассчитатьВычисляемыеПоляПоСтроке(Строка);
		ЗаполнитьДействие(Строка, Объект.ПодразделениеОрганизации, КэшированныеЗначенияДокументовНаОсновании);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаГиперссылкиДокументаНаОсновании(ВыбраннаяСтрока)
	
	ДанныеСтроки = Объект.ОС.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДокументНаОсновании) Тогда
		ПоказатьЗначение(, ДанныеСтроки.ДокументНаОсновании);
		Возврат;
	КонецЕсли;
	
	
	Если Объект.Проведен
		И ЗначениеЗаполнено(ДанныеСтроки.Действие)
		И СтруктураДействий.Получить(ДанныеСтроки.Действие) <> Неопределено Тогда
		
		МассивНомеровСтрок = Новый Массив;
		МассивНомеровСтрок.Добавить(ДанныеСтроки.НомерСтроки);
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("МассивНомеровСтрок", МассивНомеровСтрок);
		ЗначенияЗаполнения.Вставить("СообщатьОбОшибках", Истина);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ИмяОткрываемойФормы = СтрШаблон("Документ.%1.ФормаОбъекта", СтруктураДействий.Получить(ДанныеСтроки.Действие));
		
		Если Модифицированность Тогда
			
			Если Записать() Тогда
				ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтаФорма, ЭтаФорма);
			КонецЕсли;
			
		Иначе
			ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтаФорма, ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшированныеЗначенияДокументовНаОсновании(РезультатЗапроса)
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	КэшированныеЗначения = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Ключ = ?(ЗначениеЗаполнено(Выборка.ОсновноеСредство), Строка(Выборка.ОсновноеСредство.УникальныйИдентификатор()), "")
			+ ?(ЗначениеЗаполнено(Выборка.Подразделение), Строка(Выборка.Подразделение.УникальныйИдентификатор()), "");
		
		Значения = КэшированныеЗначения.Получить(Ключ);
		Если Значения = Неопределено Тогда
			Значения = Новый Соответствие;
			КэшированныеЗначения.Вставить(Ключ, Значения);
		КонецЕсли;
		Значения.Вставить(Выборка.Действие, Выборка.Ссылка);
	КонецЦикла;
	
	КэшированныеЗначенияДокументовНаОсновании = Новый ФиксированноеСоответствие(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДействие(Строка, Подразделение, КэшированныеЗначенияДокументовНаОсновании)
	
	Строка.Действие = Неопределено;
	
	Если Строка.ЭтоСчетГруппы08 Тогда
		
		Если Строка.СтоимостьПоДаннымУчета <> Строка.СтоимостьФактическая Тогда
			Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризацииОС.Операция");
		КонецЕсли;
		
	ИначеЕсли Строка.НаличиеПоДаннымУчета И Строка.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКУчету") Тогда
		
		Если Строка.НаличиеФактическое
			И Строка.СтоимостьПоДаннымУчета <> Строка.СтоимостьФактическая
			И Строка.СтоимостьФактическая = 0
			Тогда
			
			Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризацииОС.Списание");
			
		ИначеЕсли Строка.НаличиеФактическое
			И Строка.СтоимостьПоДаннымУчета > Строка.СтоимостьФактическая
			Тогда
			
			Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризацииОС.Списание");
			
		ИначеЕсли Строка.НаличиеФактическое
			И Строка.СтоимостьПоДаннымУчета < Строка.СтоимостьФактическая
			Тогда
			
			Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризацииОС.Операция");
			
		ИначеЕсли Не Строка.НаличиеФактическое Тогда
			
			Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризацииОС.Списание");
			
		КонецЕсли;
	ИначеЕсли Строка.НаличиеПоДаннымУчета И Строка.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету") Тогда
		Если Не Строка.НаличиеФактическое И Не Строка.АрендодательОрганизация Тогда
			
			Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризацииОС.ВыбытиеАрендованныхОС");
			
		КонецЕсли;
	ИначеЕсли Не Строка.НаличиеПоДаннымУчета Тогда
		
		Если Строка.НаличиеФактическое
			И Строка.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.ПустаяСсылка")
			Тогда
			
			Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризацииОС.ПринятиеКУчету");
			
		ИначеЕсли Строка.НаличиеФактическое
			И Строка.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКУчету")
			И Строка.Подразделение <> Подразделение
			Тогда
			
			Строка.Действие = ПредопределенноеЗначение("Перечисление.ДействияНаОснованииИнвентаризацииОС.Перемещение");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка.Действие) И КэшированныеЗначенияДокументовНаОсновании <> Неопределено Тогда
		Ключ = ?(ЗначениеЗаполнено(Строка.ОсновноеСредство), Строка(Строка.ОсновноеСредство.УникальныйИдентификатор()), "")
			+ ?(ЗначениеЗаполнено(Подразделение), Строка(Подразделение.УникальныйИдентификатор()), "");
		
		Значения = КэшированныеЗначенияДокументовНаОсновании.Получить(Ключ);
		Если Значения = Неопределено Тогда
			Строка.ДокументНаОсновании = Неопределено;
		Иначе
			Строка.ДокументНаОсновании = Значения[Строка.Действие];
		КонецЕсли;
	Иначе
		Строка.ДокументНаОсновании = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыВыбораСчетаУчета()
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТЧ.ОсновноеСредство) Тогда
		
		Если СтрокаТЧ.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКУчету") Тогда
			Ссылки = СчетаГруппы08.ВыгрузитьЗначения();
			Ссылки.Добавить(СтрокаТЧ.СчетУчетаПоДаннымУчета);
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(Ссылки));
		Иначе
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаГруппы01и08.ВыгрузитьЗначения()));
		КонецЕсли;
		МассивПВ = Новый Массив;
		МассивПВ.Добавить(ПараметрВыбора);
		Элементы.ОССчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПВ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
