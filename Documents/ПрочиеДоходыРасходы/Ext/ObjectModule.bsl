
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	РеквизитыСтатьиРасходов = "СтатьяРасходов,АналитикаРасходов";
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеклассификацияРасходов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.СтатьяАктивовПассивов");
		РеквизитыСтатьиРасходов = РеквизитыСтатьиРасходов+",КорСтатьяРасходов,КорАналитикаРасходов";
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.КорСтатьяРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.КорАналитикаРасходов");
	КонецЕсли;
	
	РеквизитыСтатьиДоходов = "СтатьяДоходов,АналитикаДоходов";
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеклассификацияДоходов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеДоходы.СтатьяАктивовПассивов");
		РеквизитыСтатьиДоходов = РеквизитыСтатьиДоходов+",КорСтатьяДоходов,КорАналитикаДоходов";
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеДоходы.КорСтатьяДоходов");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеДоходы.КорАналитикаДоходов");
	КонецЕсли;
	
	ЭтоДоходы = ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторнированиеПрочихДоходов
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеклассификацияДоходов;
		
	Если ЭтоДоходы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.КорСтатьяРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.КорАналитикаРасходов");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеДоходы.СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеДоходы.КорСтатьяДоходов");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеДоходы.КорАналитикаДоходов");
	КонецЕсли;
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, Новый Структура("ПрочиеРасходы", РеквизитыСтатьиРасходов), МассивНепроверяемыхРеквизитов, Отказ);
	
	ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, Новый Структура("ПрочиеДоходы", РеквизитыСтатьиДоходов), МассивНепроверяемыхРеквизитов, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		РеквизитыДляЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Организация");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыДляЗаполнения);
		
		ЗаполнитьНаправленияДеятельностиПоПоступлению(ДанныеЗаполнения); 
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		Для Каждого ТекСтрока Из ПрочиеРасходы Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.СтатьяАктивовПассивов) Тогда
				ТекСтрока.СтатьяАктивовПассивов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из ПрочиеДоходы Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.СтатьяАктивовПассивов) Тогда
				ТекСтрока.СтатьяАктивовПассивов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеАктивы;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторнированиеПрочихДоходов
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеклассификацияДоходов Тогда
		ПрочиеРасходы.Очистить();
	Иначе
		ПрочиеДоходы.Очистить();
	КонецЕсли;
	
	Для Каждого Строка ИЗ ПрочиеРасходы Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДатаОтражения) Тогда
			Строка.ДатаОтражения = Дата;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка ИЗ ПрочиеДоходы Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ДатаОтражения) Тогда
			Строка.ДатаОтражения = Дата;
		КонецЕсли;
	КонецЦикла;
	
	//++ НЕ УТ
	ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ПрочиеРасходы);
	ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ПрочиеДоходы);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УстановитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете();
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ПрочиеДоходыРасходы.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения
	ПроведениеСерверУТ.ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, Движения);
	
	//++ НЕ УТ
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТ
	
	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ЗаполнитьНаправленияДеятельностиПоПоступлению(ДокументПоступления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасходы.Подразделение КАК КорПодразделение,
	|	ПрочиеРасходы.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ПрочиеРасходы.СтатьяРасходов КАК КорСтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов КАК КорАналитикаРасходов,
	|	СУММА(ПрочиеРасходы.Сумма) КАК Сумма,
	|	СУММА(ПрочиеРасходы.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ПрочиеРасходы.СуммаРегл) КАК СуммаРегл,
	|	СУММА(ПрочиеРасходы.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(ПрочиеРасходы.ВременнаяРазница) КАК ВременнаяРазница
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ПрочиеРасходы.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасходы.Подразделение,
	|	ПрочиеРасходы.НаправлениеДеятельности,
	|	ПрочиеРасходы.СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартииПрочихРасходов.Подразделение,
	|	ПартииПрочихРасходов.НаправлениеДеятельности,
	|	ПартииПрочихРасходов.СтатьяРасходов,
	|	ПартииПрочихРасходов.АналитикаРасходов,
	|	СУММА(ПартииПрочихРасходов.Стоимость),
	|	СУММА(ПартииПрочихРасходов.СтоимостьБезНДС),
	|	СУММА(ПартииПрочихРасходов.СтоимостьРегл),
	|	СУММА(ПартииПрочихРасходов.ПостояннаяРазница),
	|	СУММА(ПартииПрочихРасходов.ВременнаяРазница)
	|ИЗ
	|	РегистрНакопления.ПартииПрочихРасходов КАК ПартииПрочихРасходов
	|ГДЕ
	|	ПартииПрочихРасходов.Регистратор = &Ссылка
	|	И ПартииПрочихРасходов.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииПрочихРасходов.Подразделение,
	|	ПартииПрочихРасходов.НаправлениеДеятельности,
	|	ПартииПрочихРасходов.СтатьяРасходов,
	|	ПартииПрочихРасходов.АналитикаРасходов";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеклассификацияРасходов;
		ПрочиеРасходы.Загрузить(РезультатЗапроса.Выгрузить());
	Иначе
		Текст = НСтр("ru = 'Нет данных для реклассификации расходов'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ

Процедура УстановитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете()
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Новый Структура;
	НепроверяемыеРеквизиты.Вставить("Комментарий");
	
	НепроверяемыеТабличныеЧасти = Новый Структура;
	НепроверяемыеТабличныеЧасти.Вставить("ДополнительныеРеквизиты");
	
	ИзмененияДокумента = ОбщегоНазначенияУТ.ИзмененияДокумента(ЭтотОбъект, НепроверяемыеРеквизиты, НепроверяемыеТабличныеЧасти);
	
	Если ИзмененияДокумента.Свойство("Реквизиты") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИзмененияДокумента.Свойство("ТабличныеЧасти") Тогда
		РеглУчетПроведениеСервер.НеРегистрироватьКОтражениюВРеглУчете(ДополнительныеСвойства);
		Возврат;
	КонецЕсли; 
	
	ТабличныеЧастиДоходовРасходов = Новый Структура;
	ТабличныеЧастиДоходовРасходов.Вставить("ПрочиеДоходы");
	ТабличныеЧастиДоходовРасходов.Вставить("ПрочиеРасходы");
	
	Для каждого ТабличнаяЧасть Из ИзмененияДокумента.ТабличныеЧасти Цикл
		Если НЕ ТабличныеЧастиДоходовРасходов.Свойство(ТабличнаяЧасть.Ключ) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТабличнаяЧасть Из ИзмененияДокумента.ТабличныеЧасти Цикл
		
		Для каждого Строка Из ТабличнаяЧасть.Значение Цикл
			
			РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
				ДополнительныеСвойства, 
				Организация, 
				Строка.ДатаОтражения);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли