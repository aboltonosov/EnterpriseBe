
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = Параметры.Валюта;
	Организация = Параметры.Организация;
	СтатьяКалькуляции  = Параметры.СтатьяКалькуляции;
	СуммаДокумента = Параметры.СуммаДокумента;
	
	ФильтрПоСтатьеКалькуляции = ЗначениеЗаполнено(СтатьяКалькуляции);
	
	//++ НЕ УТ
	ЗаполнитьТаблицуРаспределения();
	//-- НЕ УТ
	
	МодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтборСтрокТаблицыРаспределения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьСтроки(Команда)
	
	Если ФильтрПоСтатьеКалькуляции Тогда
		Для Каждого СтрокаТаблицы Из РаспределениеПоСчетам Цикл
			Если СтрокаТаблицы.СтатьяКалькуляции = СтатьяКалькуляции Тогда
				СтрокаТаблицы.СтрокаВыбрана = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы Из РаспределениеПоСчетам Цикл
			СтрокаТаблицы.СтрокаВыбрана = Истина;
		КонецЦикла;
	КонецЕсли;
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки(Команда)
	
	Для Каждого СтрокаТаблицы Из РаспределениеПоСчетам Цикл
		СтрокаТаблицы.СтрокаВыбрана = Ложь;
	КонецЦикла;
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	АдресТаблицы = ПеренестиВДокументНаСервере();
	
	Если АдресТаблицы <> Неопределено Тогда
		Закрыть(АдресТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПеренестиВДокументНаСервере()
	
	ТаблицаПроверки = РаспределениеПоСчетам.Выгрузить(Новый Структура("СтрокаВыбрана", Истина));
	ТаблицаПроверки.Свернуть("СтатьяКалькуляции");
	Если ТаблицаПроверки.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Платеж может быть отнесен только на одну статью калькуляции.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьРаспределениеВХранилище();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФильтрПоСтатьеКалькуляцииПриИзменении(Элемент)
	
	ОтборСтрокТаблицыРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяКалькуляцииПриИзменении(Элемент)
	
	ФильтрПоСтатьеКалькуляции = ЗначениеЗаполнено(СтатьяКалькуляции);
	ОтборСтрокТаблицыРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоСчетамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.РаспределениеПоСчетам.ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "РаспределениеПоСчетамКонтрактСЗаказчиком" Тогда
			ПоказатьЗначение(Неопределено, Элементы.РаспределениеПоСчетам.ТекущиеДанные.КонтрактСЗаказчиком);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоСчетамСуммаПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Статья "Прибыль"
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеПоСчетамСтатьяКалькуляции.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспределениеПоСчетам.СтатьяКалькуляции");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Прибыль'"));
	
	// Сумма платежа
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеПоСчетамСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспределениеПоСчетам.СтрокаВыбрана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспределениеПоСчетам.Сумма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура ЗаполнитьТаблицуРаспределения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДоговора.Ссылка КАК КонтрактСЗаказчиком,
	|	ДанныеДоговора.БанковскийСчет,
	|	ДанныеКалькуляции.СтатьяКалькуляции,
	|	ДанныеКалькуляции.Сумма КАК СуммаПлан,
	|	0 КАК СуммаФакт,
	|	0 КАК СуммаЗаявлено
	|ПОМЕСТИТЬ Смета
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.КалькуляцияЗатрат КАК ДанныеКалькуляции
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеКалькуляции.Ссылка = ДанныеДоговора.Ссылка
	|ГДЕ
	|	ДанныеДоговора.ДоговорСУчастникомГОЗ
	|	И ДанныеДоговора.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|	И ДанныеДоговора.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫбРАТЬ
	|	ДанныеДоговора.Ссылка КАК КонтрактСЗаказчиком,
	|	ДанныеДоговора.БанковскийСчет,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка),
	|	ДанныеДоговора.СуммаПрибыли КАК СуммаПлан,
	|	0,
	|	0
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|ГДЕ
	|	ДанныеДоговора.ДоговорСУчастникомГОЗ
	|	И ДанныеДоговора.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|	И ДанныеДоговора.СуммаПрибыли <> 0
	|	И ДанныеДоговора.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК КонтрактСЗаказчиком,
	|	ДенежныеСредства.БанковскийСчет КАК БанковскийСчет,
	|	ДенежныеСредства.СтатьяКалькуляции,
	|	0,
	|	СУММА(ДенежныеСредства.Сумма) КАК СуммаФакт,
	|	0
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	ПО
	|		БанковскиеСчета.Ссылка = ДенежныеСредства.БанковскийСчет
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ПО
	|		ДоговорыКонтрагентов.БанковскийСчет = БанковскиеСчета.Ссылка
	|		И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|		И ДоговорыКонтрагентов.ДоговорСУчастникомГОЗ
	|		
	|ГДЕ
	|	БанковскиеСчета.ОтдельныйСчетГОЗ
	|	И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДенежныеСредства.Организация = &Организация
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредства.БанковскийСчет,
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДенежныеСредства.СтатьяКалькуляции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК КонтрактСЗаказчиком,
	|	ДенежныеСредства.БанковскийСчет КАК БанковскийСчет,
	|	ДенежныеСредства.СтатьяКалькуляции,
	|	0,
	|	СУММА(ДенежныеСредства.КСписанию) КАК СуммаФакт,
	|	0
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	ПО
	|		БанковскиеСчета.Ссылка = ДенежныеСредства.БанковскийСчет
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ПО
	|		ДоговорыКонтрагентов.БанковскийСчет = БанковскиеСчета.Ссылка
	|		И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|		И ДоговорыКонтрагентов.ДоговорСУчастникомГОЗ
	|		
	|ГДЕ
	|	БанковскиеСчета.ОтдельныйСчетГОЗ
	|	И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДенежныеСредства.Организация = &Организация
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредства.БанковскийСчет,
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДенежныеСредства.СтатьяКалькуляции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК КонтрактСЗаказчиком,
	|	ДенежныеСредства.БанковскийСчетКасса КАК БанковскийСчет,
	|	ЕСТЬNULL(ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.СтатьяКалькуляции, ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)) КАК СтатьяКалькуляции,
	|	0,
	|	0,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаЗаявлено
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, Организация = &Организация) КАК ДенежныеСредства
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	ПО
	|		БанковскиеСчета.Ссылка = ДенежныеСредства.БанковскийСчетКасса
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ПО
	|		ДоговорыКонтрагентов.БанковскийСчет = БанковскиеСчета.Ссылка
	|		И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|		И ДоговорыКонтрагентов.ДоговорСУчастникомГОЗ
	|		
	|ГДЕ
	|	БанковскиеСчета.ОтдельныйСчетГОЗ
	|;
	|////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Смета.КонтрактСЗаказчиком,
	|	Смета.БанковскийСчет КАК БанковскийСчетКасса,
	|	Договоры.ДатаОкончанияДействия КАК ДатаЗавершения,
	|	ВЫБОР
	|		КОГДА Договоры.ДатаНачалаДействия <> ДАТАВРЕМЯ(0001,01,01) И Договоры.ДатаОкончанияДействия <> ДАТАВРЕМЯ(0001,01,01) ТОГДА
	|			ВЫБОР КОГДА &ТекущаяДата >= Договоры.ДатаОкончанияДействия ТОГДА
	|				0
	|			ИНАЧЕ
	|				100 * РАЗНОСТЬДАТ(Договоры.ДатаОкончанияДействия, &ТекущаяДата, СЕКУНДА)/РАЗНОСТЬДАТ(Договоры.ДатаОкончанияДействия, Договоры.ДатаНачалаДействия, СЕКУНДА)
	|			КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ПроцентСрока,
	|	Смета.БанковскийСчет,
	|	Смета.СтатьяКалькуляции,
	|	СУММА(Смета.СуммаПлан - Смета.СуммаФакт - Смета.СуммаЗаявлено) КАК Лимит,
	|	ВЫБОР
	|		КОГДА Сумма(Смета.СуммаПлан) <> 0 ТОГДА
	|			100 * (СУММА(Смета.СуммаФакт) + СУММА(Смета.СуммаЗаявлено)) / СУММА(Смета.СуммаПлан)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ПроцентРасхода,
	|	ВЫБОР
	|		КОГДА Сумма(Смета.СуммаПлан) <> 0 ТОГДА
	|			100 * (1 - (СУММА(Смета.СуммаФакт) + СУММА(Смета.СуммаЗаявлено)) / СУММА(Смета.СуммаПлан))
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ПроцентОстатка
	|ИЗ
	|	Смета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО
	|		Договоры.Ссылка = Смета.КонтрактСЗаказчиком
	|	
	|СГРУППИРОВАТЬ ПО
	|	Смета.КонтрактСЗаказчиком,
	|	Смета.БанковскийСчет,
	|	Смета.СтатьяКалькуляции,
	|	Договоры.Ссылка
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Смета.КонтрактСЗаказчиком,
	|	Смета.СтатьяКалькуляции
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РаспределениеПоСчетам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура ОтборСтрокТаблицыРаспределения()
	
	Если ФильтрПоСтатьеКалькуляции Тогда
		Элементы.РаспределениеПоСчетам.ОтборСтрок = Новый ФиксированнаяСтруктура("СтатьяКалькуляции", СтатьяКалькуляции);
	Иначе
		Элементы.РаспределениеПоСчетам.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРаспределениеВХранилище()
	
	ТаблицаВыбранныхСчетов = РаспределениеПоСчетам.Выгрузить(Новый Структура("СтрокаВыбрана", Истина));
	АдресРаспределенияВХранилище = ПоместитьВоВременноеХранилище(ТаблицаВыбранныхСчетов);
	
	Возврат АдресРаспределенияВХранилище;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуПлатежей()
	
	СуммаПлатежей = 0;
	Для Каждого СтрокаТаблицы Из РаспределениеПоСчетам Цикл
		Если СтрокаТаблицы.СтрокаВыбрана Тогда
			СуммаПлатежей = СуммаПлатежей + СтрокаТаблицы.Сумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти