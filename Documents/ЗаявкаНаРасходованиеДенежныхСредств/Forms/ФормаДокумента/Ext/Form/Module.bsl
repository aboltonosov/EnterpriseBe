// 4D:ERP для Беларуси
// {
// Форма изменена
// }
// 4D

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);

	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	
	ФормаОплатыБезналичная = Перечисления.ФормыОплаты.Безналичная;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьПоказателиПлатежаВБюджетПоУмолчаниюСервер();
		КонецЕсли;
		ПриЧтенииСозданииНаСервере();
		Если Параметры.Свойство("Основание") Тогда
			Основание = Параметры.Основание;
		КонецЕсли;
	КонецЕсли;
	
	УточнитьСписокХозяйственныхОпераций();
	
	УстановитьЗаголовокСтатьяДоходовРасходов();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(Отказ, СтандартнаяОбработка, ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Неопределено,
		Объект.Контрагент,
		ПараметрыПроцедуры);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
			Объект,
			Основание);
			
		ТекущаяДата = Объект.Дата;
		ПрименениеПриказа107н = Объект.Дата >= ДатаНачалаПримененияПриказа107н;
		
		Если ПериодАвансовогоОтчета = "Через неделю" Тогда
			Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.ДатаПлатежа), Объект.ДатаПлатежа, ТекущаяДата()) + 7 * 24 * 3600;
		КонецЕсли;
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		Модифицированность = Истина;
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище, КэшированныеЗначения);
		
	//++ НЕ УТ
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВедомостиНаВыплатуЗарплаты" Тогда
		
		Модифицированность = Истина;
		
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатВыбора);
		Элементы.РасшифровкаПлатежа.ЗакончитьРедактированиеСтроки(Ложь);
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	//-- НЕ УТ
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РанееСовершенныеПлатежи" Тогда
		
		Модифицированность = Истина;
		ЗаполнитьПоРанееСовершенномуПлатежу(РезультатВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СписаниеБезналичныхДенежныхСредств.Форма.РеквизитыПлательщика" Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора);
		УстановитьНадписьРеквизитыПлательщика();
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполненияИзФайла"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПрисоединенныйФайл"
			И Параметр.Свойство("ВладелецФайла")
			И Параметр.ВладелецФайла = ВыбранныйВладелецФайла
			И Параметр.ЭтоНовый
			И ДобавляетсяФайлПодтверждающегоДокумента Тогда
			
		Элементы.ПодтверждающиеДокументы.ТекущиеДанные.Файл = Источник[0];
		ДобавляетсяФайлПодтверждающегоДокумента = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ПереключательРасшифровки Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ДополнительныеСвойства.Вставить("РасшифровкаБезРазбиения", Истина);
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты") 
		  и НЕ ИспользоватьНачислениеЗарплаты 
		  и Объект.ХозяйственнаяОперацияПоЗарплате = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета") Тогда
		  
		ТабличнаяЧасть = "ЛицевыеСчетаСотрудников";
	Иначе
		ТабличнаяЧасть = "РасшифровкаПлатежа";
	КонецЕсли;
		
	Если Объект.СуммаДокумента = 0 Тогда
		Объект.СуммаДокумента = Объект[ТабличнаяЧасть].Итог("Сумма");
	КонецЕсли;
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(
			ЭтаФорма,
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ТабличнаяЧасть);
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса Тогда
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуДокументаПоРасшифровкеПлатежаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ИмяТабличнойЧасти") Тогда
		ТабличнаяЧасть = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧасть = Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		ОтветПередЗаписью = Истина;
		Объект.СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РасшифровкаПлатежа);
		ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.РасшифровкаПлатежа);
		ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа);
	КонецЕсли; 
	//++ НЕ УТ
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		Элементы.НастроитьОтражениеВРеглУчете.Заголовок = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(Объект);
	Иначе
		РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(Объект.РасшифровкаПлатежа);
	КонецЕсли; 
	//-- НЕ УТ
	
	ЗаполнитьДанныеОбОплатеЗаявки();
	УстановитьВидимость();
	УстановитьДоступностьЭлементовПоСтатусу(Истина);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Используется для автоматического обновления формы платежного календаря
	Оповестить("Запись_ЗаявкаНаРасходованиеДенежныхСредств", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.ДатаПлатежа < Объект.Дата Тогда
		Объект.ДатаПлатежа = Объект.Дата;
	КонецЕсли;
	
	ТекущаяДата = Объект.Дата;
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
КонецПроцедуры

//++ НЕ УТ
&НаКлиенте
Процедура ИзменениеСуммаДокументаЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
		Возврат;
	КонецЕсли;
	
	СуммаДокументаПриИзмененииФрагмент();
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	//++ НЕ УТ
	Если ИспользоватьНачислениеЗарплаты
		И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет")
		И Объект.ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛ")
		И Не Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма")
		И Объект.НДФЛПоВедомостям Тогда
		
		ТекстВопроса = НСтр("ru = 'Сумма документа будет приведена к сумме по Ведомостям на закладке ""Расшифровка платежа"". Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ИзменениеСуммаДокументаЗавершение", ЭтаФорма, Неопределено);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	//-- НЕ УТ
	
	СуммаДокументаПриИзмененииФрагмент();
	
	ПересчитатьНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ТекущаяВалюта <> Объект.Валюта Тогда
		
		ВалютаПриИзмененииСервер();
		
		Объект.Касса = Неопределено;
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		ТекущаяВалюта = Объект.Валюта;
		
		ПересчитатьНДС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзмененииФрагмент()
	
	СуммаДокументаПриИзмененииСервер();
	
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	ТипыРаспределения = Новый Массив;
	Для каждого СтрокаРаспределения Из Объект.РаспределениеПоСчетам Цикл
		ТипыРаспределения.Добавить(ТипЗнч(СтрокаРаспределения.БанковскийСчетКасса));
	КонецЦикла;
	
	НесоответствиеТиповРаспределения = Ложь;
	Если ФормаОплаты = "Наличная" Тогда
		НесоответствиеТиповРаспределения =
			(ТипыРаспределения.Найти(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций")) <> Неопределено);
	ИначеЕсли ФормаОплаты = "Безналичная" Тогда
		НесоответствиеТиповРаспределения =
			(ТипыРаспределения.Найти(Тип("СправочникСсылка.Кассы")) <> Неопределено);
	КонецЕсли;
	
	Если НесоответствиеТиповРаспределения Тогда
		ТекстВопроса = НСтр("ru = 'Выбранная форма оплаты отличается от указанной в распределении по счетам. Удалить некорректные строки распределения?'");
		Оповещение = Новый ОписаниеОповещения("ФормаОплатыПриИзмененииЗавершение", ЭтаФорма, Неопределено);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФормаОплатыПриИзмененииФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПоЗарплатеПриИзменении(Элемент)
	
	Если СохраненнаяХозяйственнаяОперацияПоЗарплате = Объект.ХозяйственнаяОперацияПоЗарплате Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперацияПоЗарплатеПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПоЗарплатеПриИзмененииСервер()
	
	Если СохраненнаяХозяйственнаяОперацияПоЗарплате <> Объект.ХозяйственнаяОперацияПоЗарплате Тогда
		//++ НЕ УТ
		Если ИспользоватьНачислениеЗарплаты Тогда
			ОчиститьВедомостиВРасшифровкеПлатежа();
		КонецЕсли;
		//-- НЕ УТ
	КонецЕсли;
	
	УстановитьФормыОплатыПоХозяйственнойОперации();
	ФормаОплатыОграничена = ФормаОплатыОграничена();
	
	УправлениеЭлементамиФормы();
	
	СохраненнаяХозяйственнаяОперацияПоЗарплате = Объект.ХозяйственнаяОперацияПоЗарплате;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаПриИзменении(Элемент)
	
	БанковскийСчетКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		ПодотчетноеЛицоПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)

	ОрганизацияПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ТекущийСтатус <> Объект.Статус Тогда
		СтатусПриИзмененииСервер();
		ТекущийСтатус = Объект.Статус;
	КонецЕсли;
	
	ПересчитатьДатуАвансовогоОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	
	ВалютаКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсКонвертацииПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСуммыПриИзменении(Элемент)
	
	ПланированиеСуммыПриИзмененииСервер();
	
	ПересчитатьНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяАктивовПассивовПриИзменении(Элемент)
	
	СтатьяАктивовПассивовПриИзмененииСервер(Объект.СтатьяАктивовПассивов, Объект.АналитикаАктивовПассивов);
	
КонецПроцедуры

&НаКлиенте
Процедура СверхЛимитаПриИзменении(Элемент)
	
	НастроитьЭлементСверхЛимита();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПослеКонвертацииПриИзменении(Элемент)
	
	СуммаПослеКонвертацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СуммаПослеКонвертацииПриИзмененииНаСервере()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.КурсКонвертации <> 0 И Объект.СуммаДокумента = 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.СуммаДокумента = Объект.СуммаПослеКонвертации / Объект.КурсКонвертации;
		Иначе
			Объект.СуммаДокумента = Объект.СуммаПослеКонвертации * Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = ?(Объект.СуммаДокумента <> 0, Объект.СуммаПослеКонвертации / Объект.СуммаДокумента, 0);
		Иначе
			Объект.КурсКонвертации = ?(Объект.СуммаПослеКонвертации <> 0, Объект.СуммаДокумента / Объект.СуммаПослеКонвертации, 0);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.РасшифровкаПлатежа[0].Сумма = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОплатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ОплатаЗаявокНаРасходованиеДенежныхСредств");
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОплатаЗаявокНаРасходованиеДенежныхСредств");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЗаявкаНаРасходованиеДенежныхСредств", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму(
		"Отчет.ОплатаЗаявокНаРасходованиеДенежныхСредств.Форма",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПо275ФЗПриИзменении(Элемент)
	
	//++ НЕ УТ
	ПлатежиПо275ФЗПриИзмененииНаСервере();
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура ПлатежиПо275ФЗПриИзмененииНаСервере()
	
	УстановитьФормыОплатыПоХозяйственнойОперации();
	ФормаОплатыОграничена = ФормаОплатыОграничена();
	
	Если Объект.ПлатежиПо275ФЗ
		И Объект.РасшифровкаПлатежа.Количество() > 0
		И ТипЗнч(Объект.РасшифровкаПлатежа[0].Заказ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.РасшифровкаПлатежа[0].Заказ,
			"ДоговорСУчастникомГОЗ, ОплатаРасходовПоТарифамСГосрегулированием,
			|ГосударственныйКонтракт, СтатьяКалькуляции,
			|ИностранныйИсполнительВУтвержденномПеречнеГОЗ");
		ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов, "ДоговорСУчастникомГОЗ, СтатьяКалькуляции");
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов,
			"ОплатаРасходовПоТарифамСГосрегулированием, ИностранныйИсполнительВУтвержденномПеречнеГОЗ, ГосударственныйКонтракт");
	КонецЕсли;
	
	ПроверитьЗаполнитьТипПлатежа275ФЗ();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура ПеречислениеВБюджетПриИзменении(Элемент)
	
	ПеречислениеВБюджетПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежаВБюджетНажатие(Элемент, СтандартнаяОбработка)
	
	// 4D:ERP для Беларуси, Дмитрий, 27.09.2017 9:03:30 
	// {
	// В этой конфигурации действий не требуется
	// }
	// 4D
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежаВБюджетНажатиеЗавершение(РеквизитыПлатежаВБюджет, ДополнительныеПараметры) Экспорт
	
	// 4D:ERP для Беларуси, Дмитрий, 27.09.2017 9:03:30 
	// {
	// В этой конфигурации действий не требуется
	// }
	// 4D
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПлатежаПриИзменении(Элемент)
	
	Если Объект.ПеречислениеВБюджет Тогда
		ОчиститьСообщения();
		ПроверитьРеквизитыБюджетаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРасшифровка И Не ПереключательРасшифровки Тогда
		РасшифровкаПлатежаПриНачалеРедактирования(Элемент, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПлатежаФЗ275ПриИзменении(Элемент)
	
	//++ НЕ УТ
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодтверждающиеДокументыЗавершение", 
		ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма,
		Объект.ПодтверждающиеДокументы,
		,
		Ложь,
		"""" + НСтр("ru= 'Подтверждающие документы'") + """");
		
	УправлениеЭлементамиОплатыЗасчетСредствГОЗ();
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ТипНалогаПриИзмененииНаСервере()

	ИнициализироватьРасшифровкуПлатежа();
	
	//++ НЕ УТ
	Если ИспользоватьНачислениеЗарплаты И Объект.ТипНалога <> Перечисления.ТипыНалогов.НДФЛ Тогда
		ОчиститьВедомостиВРасшифровкеПлатежа();
	КонецЕсли;
	//-- НЕ УТ
	
	УправлениеЭлементамиФормы();
	
	//++ НЕ УТ
	ПроставитьСчетУчетаНалоговНаСервере();
	//-- НЕ УТ

КонецПроцедуры // ТипНалогаПриИзмененииНаСервере()

&НаКлиенте
Процедура ТипНалогаПриИзменении(Элемент)
	
	ТипНалогаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПоВедомостямПриИзменении(Элемент)
	
	//++ НЕ УТ
	НДФЛПоВедомостямПриИзмененииНаСервере();
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлательщикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураПараметров.Вставить("Объект",         Объект);
	СтруктураПараметров.Вставить("ЮрФизЛицо",      ЮрФизЛицо);
	
	ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.Форма.РеквизитыПлательщика", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	
	Если Не ПереключательРасшифровки Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока, Объект.ХозяйственнаяОперация);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда
				Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииЯчейки(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//++ НЕ УТ
	Если Элемент.ТекущийЭлемент <> Неопределено
		И Элемент.ТекущийЭлемент.Имя = "РасшифровкаПлатежаТипПлатежаПоЛизингу" Тогда
		ТипыПлатежей = ЗаполнитьТипыПлатежейПоДоговору(СтрокаТаблицы.ДоговорЛизинга);
		Элементы.РасшифровкаПлатежаТипПлатежаПоЛизингу.СписокВыбора.ЗагрузитьЗначения(ТипыПлатежей);
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект,
		Партнер,
		ДоговорКонтрагента,
		СтрокаТаблицы,
		НоваяСтрока,
		Копирование);
		
	Если НоваяСтрока И Не Копирование Тогда
		
		ПриДобавлениСтрокиРасшифровкиПлатежа(СтрокаТаблицы, Объект.ХозяйственнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияЗаказПриИзменении(Элемент)
	
	РасшифровкаБезРазбиенияЗаказПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаБезРазбиенияЗаказПриИзмененииСервер()
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначенияОтбора = Новый Структура;
	
	ОплатаМеждуОрганизациями = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию"));
	ВозвратМеждуОрганизациями = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию"));
	Если ОплатаМеждуОрганизациями Или ВозвратМеждуОрганизациями Тогда
		МассивОрганизаций = Новый Массив();
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			МассивОрганизаций.Добавить(Объект.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
			МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
		КонецЕсли;
		
		ЗначенияОтбора.Вставить("Организация", МассивОрганизаций);
		ЗначенияОтбора.Вставить("Контрагент", МассивОрганизаций);
		ЗначенияОтбора.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
	Иначе
		ЗначенияОтбора.Вставить("Организация", Объект.Организация);
		ЗначенияОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	ЭтоРасчетыСклиентами = ВозвратМеждуОрганизациями Или ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация);
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами = ЭтоРасчетыСклиентами;
	НастройкиВыбора.Валюта = Объект.Валюта;
	НастройкиВыбора.Сумма = Элементы.РасшифровкаПлатежа.ТекущиеДанные.Сумма;
	
	//++ НЕ УТ
	Если ПоддержкаПлатежей275ФЗ Тогда
		НастройкиВыбора.ПлатежиПо275ФЗ = Объект.ПлатежиПо275ФЗ;
		Если Объект.ПлатежиПо275ФЗ Тогда
			ЗначенияОтбора.Вставить("ПлатежиПо275ФЗ", Истина);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
		
		//++ НЕ УТ
		Если ПоддержкаПлатежей275ФЗ И ВыбранноеЗначение.ПлатежиПо275ФЗ Тогда
			Если ВыбранноеЗначение.Свойство("Договор")
				И (ТипЗнч(ВыбранноеЗначение.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
					Или ТипЗнч(ВыбранноеЗначение.Договор) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями")) Тогда
				ЗаполнитьПоДоговору(ВыбранноеЗначение.Договор);
			КонецЕсли;
		КонецЕсли;
		//-- НЕ УТ
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзменении(Элемент)
	
	РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзменении(Элемент)
	
	ИдентификаторСтроки = Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор();
	
	РасшифровкаПлатежаПараметрыОплатыПоКредитамПриИзмененииСервер(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияТипСуммыКредитаДепозитаПриИзменении(Элемент)
	
	ИдентификаторСтроки = Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор();
	
	РасшифровкаПлатежаПараметрыОплатыПоКредитамПриИзмененииСервер(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорЛизингаПриИзменении(Элемент)
	
	//++ НЕ УТ
	РасшифровкаПлатежаДоговорЛизингаПриИзмененииНаСервере(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтаСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПараметрыВыбораСтатьиДДС = ПараметрыВыбораСтатьиДДС(ЭтаСтрока.ДоговорКредитаДепозита);
	Если ЗначениеЗаполнено(ПараметрыВыбораСтатьиДДС) Тогда
		Элемент.ПараметрыВыбора = ПараметрыВыбораСтатьиДДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораСтатьиДДС(ДоговорКредитаДепозита)
	
	Возврат ДенежныеСредстваСервер.ПолучитьПараметрыВыбораСтатьиДДС(
		Объект,
		Новый Структура("ДоговорКредитаДепозита", ДоговорКредитаДепозита));
	
КонецФункции

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТ
	Если Поле.Имя = "РасшифровкаПлатежаСчетРеглУчетаАктивовПассивов" Тогда
		РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма, "РасшифровкаПлатежа", ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.РасшифровкаПлатежа.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаТипСуммыКредитаДепозитаПриИзменении(Элемент)
	
	//++ НЕ УТ
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ТипСуммыКредитаДепозитаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	//++ НЕ УТ
	РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма, "РасшифровкаПлатежа", Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	СтандартнаяОбработка = Ложь;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТ
	ВедомостьНачалоВыбора(СтандартнаяОбработка);
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТ
	ВедомостьНачалоВыбора(СтандартнаяОбработка);
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

//++ НЕ УТ
&НаКлиенте
Процедура ВедомостьНачалоВыбора(СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
	
	Если Объект.ХозяйственнаяОперацияПоЗарплате = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу") Тогда
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком"));
		МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу"));
		ПараметрыОтбора.Вставить("МассивОпераций", МассивОпераций);
		ПараметрыОтбора.Вставить("ИсключатьОплаченные");
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет") Тогда
		ПараметрыОтбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	Иначе
		ПараметрыОтбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперацияПоЗарплате);
		ПараметрыОтбора.Вставить("ИсключатьОплаченные");
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("ИсключатьВключенныеВЗаявки");
	ПараметрыОтбора.Вставить("Заявка", Объект.Ссылка);
		
	ПеречислениеВБюджет = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет");
	
	ОткрытьФорму("ОбщаяФорма.ВедомостиНаВыплатуЗарплаты", Новый Структура("ОтборВедомостей, ВедомостиДляПеречисленияНалога", ПараметрыОтбора, ПеречислениеВБюджет), ЭтаФорма);

КонецПроцедуры //ВедомостьНачалоВыбора
//-- НЕ УТ

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВедомостиНаВыплатуЗарплаты

&НаКлиенте
Процедура ЛицевыеСчетаСотрудниковФизическоеЛицоПриИзменении(Элемент)
	
	ТекущаяСтрокаТЧЛицевыеСчета = Элементы.ЛицевыеСчетаСотрудников.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧЛицевыеСчета.ЛицевойСчет) Тогда
		ТекущаяСтрокаТЧЛицевыеСчета.ЛицевойСчет = ПолучитьЛицевойСчетФЛ(ТекущаяСтрокаТЧЛицевыеСчета.ФизическоеЛицо);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеПоСчетам

&НаКлиенте
Процедура РаспределениеПоСчетамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Объект.РаспределениеПоСчетам.Количество() = 1 Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Сумма = Объект.СуммаДокумента;
		ТекущиеДанные.ДатаПлатежа = Объект.ДатаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоСчетамБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивТипов = Новый Массив;
	
	Если Объект.ФормаОплатыБезналичная Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	КонецЕсли;
	Если Объект.ФормаОплатыНаличная Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Кассы"));
	КонецЕсли;
	
	Элементы.РаспределениеПоСчетамБанковскийСчет.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодтверждающиеДокументы

&НаКлиенте
Процедура ПодтверждающиеДокументыФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ УТ
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждающиеДокументыФайлНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПунктыМеню = Новый СписокЗначений;
	ПунктыМеню.Добавить("ВыборИзПрисоединенныхФайлов", "Выбрать из присоединенных файлов ...",, БиблиотекаКартинок.ВыбратьЗначение);
	ПунктыМеню.Добавить("ДобавлениеФайлаСДиска", "Добавить файл с диска ...",, БиблиотекаКартинок.ОткрытьФайл);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, ПунктыМеню, Элементы.ПодтверждающиеДокументыФайл);
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	ОплатаВДругуюОрганизацию = 
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
		или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию");
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Валюта");
	
	Если ОплатаВДругуюОрганизацию Тогда
		Если Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда
			СтруктураРеквизитов.Вставить("КассаПолучатель", НСтр("ru= 'Касса получателя'"));
		Иначе
			СтруктураРеквизитов.Вставить("БанковскийСчетПолучатель", НСтр("ru= 'Счет получателя'"));
		КонецЕсли;
	Иначе
		СтруктураРеквизитов.Вставить("Контрагент");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамЗавершение",
		ЭтотОбъект,
		Новый Структура("ОплатаВДругуюОрганизацию", ОплатаВДругуюОрганизацию));
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Неопределено,
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ОплатаВДругуюОрганизацию = ДополнительныеПараметры.ОплатаВДругуюОрганизацию;
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", ?(ОплатаВДругуюОрганизацию, Объект.ОрганизацияПолучатель, Объект.Контрагент));
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	//++ НЕ УТ
	Если Объект.ПлатежиПо275ФЗ И ПоддержкаПлатежей275ФЗ Тогда
		ПараметрыПодбора.Вставить("ПлатежиПо275ФЗ", Истина);
	КонецЕсли;
	//-- НЕ УТ
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткам(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткамЗавершение",
		ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Объект.РасшифровкаПлатежа,
		Новый Структура("Организация"),
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьВедомостиПоОстаткамНаСервере();
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлДляОбменаСБанком(Команда)
	
	//++ НЕ УТ
	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса =
			НСтр("ru = 'Данные еще не записаны.
					|Выполнение действия ""Выгрузить файл обмена с банком"" возможно только после записи данных.
					|Данные будут записаны.'");
		Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлДляОбменаСБанкомЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОбменСБанкамиПоЗарплатнымПроектамКлиент.ВыгрузитьВФайлПлатежныеДокументыПеречисленияЗарплаты(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка), ЭтотОбъект);
	КонецЕсли;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

//++ НЕ УТ
&НаКлиенте
Процедура ВыгрузитьФайлДляОбменаСБанкомЗавершение(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		Записать();
		СсылкаНаОбъект = Объект.Ссылка;
		ОбменСБанкамиПоЗарплатнымПроектамКлиент.ВыгрузитьВФайлПлатежныеДокументыПеречисленияЗарплаты(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОбъект), ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура ЗаполнитьОстаткамиНевыданныхСумм(Команда)
	
	//++ НЕ УТ
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику") Тогда
		ЗаполнитьОстаткамиНевыданныхСуммНаСервере();
	КонецЕсли;
	//-- НЕ УТ
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаЗаймов") Тогда
		ЗаполнитьОстаткамиНевыданныхСуммКонтрагентуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодтверждающиеДокументы(Команда)
	
	//++ НЕ УТ
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодтверждающиеДокументыЗавершение",
		ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Объект.ПодтверждающиеДокументы,
		Новый Структура("ТипПлатежаФЗ275", НСтр("ru= 'Тип платежа 275-ФЗ'")),
		Ложь);
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПодтверждающийДокумент(Команда)
	
	//++ НЕ УТ
	Если Элементы.ПодтверждающиеДокументы.ТекущаяСтрока <> Неопределено Тогда
		Файл = Элементы.ПодтверждающиеДокументы.ТекущиеДанные.Файл;
		
		Если Файл = Неопределено Или Файл.Пустая() Тогда
			ПоказатьПредупреждение(,НСтр("ru= 'Файл не указан.'"));
			Возврат
		КонецЕсли;
		
		РеквизитыФайла = РеквизитыПодтверждающегоДокумента(Файл);
		
		Если РеквизитыФайла.Зашифрован Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, РеквизитыФайла.ФайлРедактируется);
	КонецЕсли;
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредыдущемуПлатежу(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",                  Объект.Ссылка);
	ПараметрыФормы.Вставить("БанковскийСчет",          Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("ПрименениеПриказа107н",   ПрименениеПриказа107н);
	ПараметрыФормы.Вставить("ПрименениеПриказа126н",   ПрименениеПриказа126н);
	
	Если ЗначениеЗаполнено(Объект.ТипНалога) Тогда
		ПараметрыФормы.Вставить("ТипНалога", Объект.ТипНалога);
	КонецЕсли; 
	
	ОткрытьФорму(
		"ОбщаяФорма.РанееСовершенныеПлатежи",
		ПараметрыФормы,
		ЭтаФорма,
		);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтражениеВРеглУчете(Команда)
	
	//++ НЕ УТ
	РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассива(ЭтаФорма);
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура ЗаполнитьОстаткамиНевыданныхСуммНаСервере()
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	РасшифровкаПлатежа = ДенежныеСредстваСервер.ДанныеРасшифровкиПлатежаДокументаДДСПоДоговоруЗаймаСотруднику(Объект, Ложь, Объект.Ссылка);
	
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа);
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура ЗаполнитьОстаткамиНевыданныхСуммКонтрагентуНаСервере()
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	ДействующиеДоговоры = Справочники.ДоговорыКредитовИДепозитов.ДействующиеДоговорыПоКонтрагенту(
		Объект.Организация,
		Объект.Контрагент,
		Перечисления.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный);
	
	Для Каждого Договор Из ДействующиеДоговоры Цикл
		
		ДанныеРасшифровки = Справочники.ДоговорыКредитовИДепозитов.ДанныеРасшифровкиПлатежаДокументаДДС(Договор, Ложь, Объект.Ссылка);
		
		Для Каждого Строка Из ДанныеРасшифровки Цикл
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока, Объект.ХозяйственнаяОперация);
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

//++ НЕ УТ
&НаКлиенте
Процедура ЗаполнитьПодтверждающиеДокументыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьПодтверждающиеДокументыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодтверждающиеДокументыСервер()
	
	ДенежныеСредстваСервер.ЗаполнитьПодтверждающиеДокументы(Объект, Объект.ПодтверждающиеДокументы, ГосуДарственныйКонтракт);
	
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура ПодобратьСчета(Команда)
	
	//++ НЕ УТ
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("СтатьяКалькуляции", Объект.СтатьяКалькуляции);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ПодборСчетов");
	
	Оповещение = Новый ОписаниеОповещения("ПодобратьСчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ПодборСчетов",
		ПараметрыПодбора,
		ЭтаФорма,
		Неопределено,
		,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//++ НЕ УТ
	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		ПолучитьРаспределениеПоСчетамИзХранилища(Результат);
	КонецЕсли;
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("РасшифровкаПлатежа"));
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "РасшифровкаПлатежа", ТипыСтатей);
	//++ НЕ УТ
	РеглУчетВызовСервера.УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(ЭтаФорма, "РасшифровкаПлатежа", ТипыСтатей);
	//-- НЕ УТ
	
	// В статусах "Не согласована", "Отклонена" заполнение полей "СтатьяАктивовПассивов" и "СтатьяРасходов" необязательно

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяАктивовПассивов.Имя);
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСтатьяРасходов.Имя);
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияСтатьяРасходов.Имя);
	//++ НЕ УТ
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяКалькуляции.Имя);
	//-- НЕ УТ
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Аналитики

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетКонтрагента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскийСчетКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскийСчетПолучатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетКонтрагента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыБезналичная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыЗаявки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыОплаты.Безналичная;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетКонтрагента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскийСчетКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскийСчетКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыБезналичная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыЗаявки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыОплаты.Безналичная;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыЗаявки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.БанковскийСчетПолучатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыБезналичная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыЗаявки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ФормыОплаты.Безналичная;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормаОплатыЗаявки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БанковскийСчетПолучатель.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КассаПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.КонвертацияВалюты;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаПартнер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаВалютаВзаиморасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Видимость статьи расходов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСтатьяРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьУчетПрочихАктивовПассивов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость счета учета

	СписокОпераций = Новый СписокЗначений;
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаАктивовПассивов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОпераций;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//++ НЕ УТ
	// Подтверждающие документы
	
	ВидыПодтверждающиеИсполнениеКонтракта = Новый СписокЗначений;
	ВидыПодтверждающиеИсполнениеКонтракта.ЗагрузитьЗначения(Справочники.ВидыПодтверждающихДокументов.ВидыПодтверждающиеИсполнениеКонтракта());
	
	// Обязательное заполнение номера для документов, подтверждающих исполнение контракта

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыНомер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ВидыПодтверждающиеИсполнениеКонтракта;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Номер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Обязательное заполнение даты для документов, подтверждающих исполнение контракта

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыДата.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ВидыПодтверждающиеИсполнениеКонтракта;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Дата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Обязательное заполнение суммы для документов, подтверждающих исполнение контракта

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ВидыПодтверждающиеИсполнениеКонтракта;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Сумма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Текст номера и даты для документов, подтверждающих исполнение контракта

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыВидДокумента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.ВидДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru= 'Выберите вид документа...'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Пометка автозаполнения поля "Файл" из ТЧ "ПодтверждающиеДокументы"
	СтатусыОтменыПроверкиФайла = Новый СписокЗначений;
	СтатусыОтменыПроверкиФайла.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	СтатусыОтменыПроверкиФайла.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодтверждающиеДокументыФайл.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СтатусыОтменыПроверкиФайла;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//-- НЕ УТ
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

//++ НЕ УТ
&НаСервере
Процедура ОчиститьВедомостиВРасшифровкеПлатежа()
	
	Если ЗначениеЗаполнено(Объект.ХозяйственнаяОперацияПоЗарплате) Тогда
		Объект.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперацияПоЗарплате);
	Иначе
		Объект.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	КонецЕсли;
	
	Для Каждого ТекСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		ТекСтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
		ТекСтрокаРасшифровки.Ведомость = Неопределено;
		ТекСтрокаРасшифровки.Сумма = 0;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьВедомостиВРасшифровкеПлатежа()
//-- НЕ УТ

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ИнициализироватьРасшифровкуПлатежа();
	
	ОплатаПоставщику = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		
	ОплатаПоКредитамДепозитам = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
		
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		ПриДобавлениСтрокиРасшифровкиПлатежа(СтрокаРасшифровки, Объект.ХозяйственнаяОперация);
	КонецЦикла;
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМассивыРеквизитов(
		Объект.ХозяйственнаяОперация, Объект.ПеречислениеВБюджет, МассивВсехРеквизитов, МассивРеквизитовОперации);
	Если МассивРеквизитовОперации.Найти("Контрагент") = Неопределено Тогда
		Объект.Контрагент = Неопределено;
		Для каждого ТекСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ТекСтрокаРасшифровки.Заказ = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	//++ НЕ УТ
	Если ИспользоватьНачислениеЗарплаты Тогда
		ОчиститьВедомостиВРасшифровкеПлатежа();
	КонецЕсли;
	//-- НЕ УТ
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		Элементы.ЗаполнитьВедомостиПоОстаткам.Видимость = ИспользоватьНачислениеЗарплаты;
		Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту;
		СохраненнаяХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту;
	Иначе
		Элементы.ЗаполнитьВедомостиПоОстаткам.Видимость = Ложь;
		Объект.ХозяйственнаяОперацияПоЗарплате = Неопределено;
		СохраненнаяХозяйственнаяОперацияПоЗарплате = Неопределено;
	КонецЕсли;
	
	//++ НЕ УТ
	ПеречислениеВБюджет = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	
	Если ПеречислениеВБюджет Тогда
		Элементы.НастроитьОтражениеВРеглУчете.Заголовок = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(Объект);
	Иначе
		Объект.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		Объект.Субконто1 = Неопределено;
		Объект.Субконто2 = Неопределено;
		Объект.Субконто3 = Неопределено;
		РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(Объект.РасшифровкаПлатежа);
	КонецЕсли;
	//-- НЕ УТ
	
	УстановитьФормыОплатыПоХозяйственнойОперации();
	ФормаОплатыОграничена = ФормаОплатыОграничена();

	ПроверитьИОчиститьОрганизацию();
	ПроверитьИОчиститьОрганизациюПолучатель();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		СчетСоответствуетВладельцу = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента,
			Объект.ПодотчетноеЛицо);
	Иначе
		СчетСоответствуетВладельцу = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента,
			Объект.Контрагент);
	КонецЕсли;
	
	Если Не СчетСоответствуетВладельцу Тогда
		Объект.БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;
	
	Объект.СтатьяДвиженияДенежныхСредств = 
		Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
			?(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты,
				Объект.ХозяйственнаяОперацияПоЗарплате, Объект.ХозяйственнаяОперация));
	
	//++ НЕ УТ
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМассивыРеквизитов(
		Объект.ХозяйственнаяОперация, Объект.ПеречислениеВБюджет, МассивВсехРеквизитов, МассивРеквизитовОперации);
	Если МассивРеквизитовОперации.Найти("ПлатежиПо275ФЗ") = Неопределено Тогда
		Объект.ПлатежиПо275ФЗ = Ложь;
	КонецЕсли;
	
	Если Не ОплатаПоставщику Тогда
		Объект.ДоговорСУчастникомГОЗ = Ложь;
	КонецЕсли;
	
	ПроверитьЗаполнитьТипПлатежа275ФЗ();
	//-- НЕ УТ
	
	ЗаполнитьПоказателиПлатежаВБюджетПоУмолчаниюСервер();
	
	ПолучитьДоговорПоУмолчаниюСервер();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ЗаполнитьРеквизитыПлательщика();
		УстановитьНадписьРеквизитыПлательщика();
	КонецЕсли;
	
	СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	
	УправлениеЭлементамиФормы();
	
	УстановитьДоступностьЭлементовПоСтатусу(Ложь);
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаПлатежаПартнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаБезРазбиенияПартнер", Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	УстановитьПараметрыВыбораДоговоровКредитовДепозитов();
	//++ НЕ УТ
	УстановитьПараметрыВыбораДоговораЛизинга();
	//-- НЕ УТ
	ПроверитьИОчиститьОрганизациюПолучатель();
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ФормаОплатыЗаявки) Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = Объект.Организация;
		СтруктураПараметров.ФормаОплаты = Объект.ФормаОплатыЗаявки;
		СтруктураПараметров.БанковскийСчет = Объект.БанковскийСчет;
		Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
			СтруктураПараметров.Валюта = Объект.Валюта;
		КонецЕсли;
		Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		ПроверитьСоответствиеВалют();
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = Объект.Организация;
		СтруктураПараметров.ФормаОплаты = Объект.ФормаОплатыЗаявки;
		СтруктураПараметров.Касса 		= Объект.Касса;
		Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
			СтруктураПараметров.Валюта = Объект.Валюта;
		КонецЕсли;
		Объект.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
		ПолучитьДоговорПоУмолчаниюСервер();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЮрФизЛицо");
	КонецЕсли;
	
	ЗаполнитьРеквизитыПлательщика();
	УстановитьНадписьРеквизитыПлательщика();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ВалютаСчетаПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПолучательПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		Объект.БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Объект.ОрганизацияПолучатель,
			Объект.Валюта);
			
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
		Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.Партнер = Партнер;
		КонецЦикла;
		ПолучитьДоговорПоУмолчаниюСервер();
		УстановитьПараметрыВыбораДоговоровКредитовДепозитов();
		//++ НЕ УТ
		УстановитьПараметрыВыбораДоговораЛизинга();
		//-- НЕ УТ
		
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				Объект.Контрагент,
				Объект.Валюта);
		КонецЕсли;
		ЗаполнитьНазначениеПлатежаПоСчетуПолучателя();
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
		Объект.ПодотчетноеЛицо,
		Объект.Валюта);
		
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	УстановитьОтметкуНезаполненного();
	
	Если (Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		Или Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
		И Не ЗначениеЗаполнено(Объект.ДатаПлатежа)
		И ЗначениеЗаполнено(Объект.ЖелательнаяДатаПлатежа) Тогда
		
		Объект.ДатаПлатежа = Макс(Объект.Дата, Объект.ЖелательнаяДатаПлатежа);
		
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		Или ТекущийСтатус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
			И Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
		Объект.КтоРешил = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусу(Ложь);
	УстановитьСписокСтатусов();
	
КонецПроцедуры

&НаСервере
Процедура ФормаОплатыЗаявкиПриИзмененииСервер()
	
	УстановитьВидимость();
	ЗаполнитьРеквизитыДокументаПоФормеОплаты();
	
	УстановитьПараметрыВыбораБанковскогоСчета();
	УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.КассаПолучатель);
	УстановитьПараметрыВыбораДоговоровКредитовДепозитов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФормуОплаты()
	
	Если Объект.ФормаОплатыНаличная И Объект.ФормаОплатыБезналичная Тогда
		ФормаОплаты = "Любая";
	
	ИначеЕсли Объект.ФормаОплатыНаличная Тогда
		ФормаОплаты = "Наличная";
		
	ИначеЕсли Объект.ФормаОплатыБезналичная Тогда
		ФормаОплаты = "Безналичная";
		
	ИначеЕсли Объект.ФормаОплатыПлатежнаяКарта Тогда
		ФормаОплаты = "ПлатежнаяКарта";
		
	Иначе
		ФормаОплаты = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер()
	
	ПересчетСуммДокументаВВалюту(ТекущаяВалюта);
	
	ПроверитьСоответствиеВалют();
	
	ЗаполнитьРеквизитыДокументаПоФормеОплаты();
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
		ВалютаКонвертацииПриИзмененииСервер();
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
	ВалютаСчетаПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
	
КонецПроцедуры

&НаСервере
Процедура ВалютаКонвертацииПриИзмененииСервер()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта,
		Объект.ВалютаКонвертации,
		Объект.Дата);
	Если КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = КурсКонвертации;
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.КурсКонвертации = 1 / КурсКонвертации;
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.КурсКонвертации = 0;
		Объект.СуммаПослеКонвертации = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КурсКонвертацииПриИзмененииСервер()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.СуммаПослеКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
		КонецЕсли;
	Иначе
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("
		|ЗаполнитьПризнакАналитикаРасходовОбязательна, 
		|ЗаполнитьПризнакАналитикаРасходовЗаказРеализация, 
		|ЗаполнитьТипСтатьи");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаСервере
Процедура ПланированиеСуммыПриИзмененииСервер()
	
	Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		
		Объект.Валюта = ВалютаПлатежаСервер();
		
	Иначе
		
		МассивВалют = Новый Массив;
		Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВалютаВзаиморасчетов)
				И МассивВалют.Найти(СтрокаТаблицы.ВалютаВзаиморасчетов) = Неопределено Тогда
				МассивВалют.Добавить(СтрокаТаблицы.ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВалют.Количество() = 1 Тогда
			Объект.Валюта = МассивВалют[0];
		Иначе
			Объект.Валюта = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		КоэффициентПересчета =
			РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ТекущаяВалюта, Объект.Валюта, Объект.Дата);
		
		ИтогСумма = Объект.РасшифровкаПлатежа.Итог("Сумма");
		СуммаДокумента = Окр(КоэффициентПересчета * ИтогСумма, 2, 1);
		Объект.СуммаДокумента = СуммаДокумента;
		
		// Пересчитаем суммы в табличной части документа.
		Если ИтогСумма <> 0 Тогда
			Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				Сумма = ?(ИтогСумма <> 0, Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1), 0);
				ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
				СуммаДокумента = СуммаДокумента - Сумма;
				СтрокаТаблицы.Сумма = Сумма;
			КонецЦикла;
		КонецЕсли;
		
		Элементы.РасшифровкаПлатежаСумма.Заголовок = НСтр("ru = 'Сумма ('") + Строка(Объект.Валюта) + ")";
		ТекущаяВалюта = Объект.Валюта;
	КонецЕсли;
	
	ПроверитьСоответствиеВалют();
	
	ВалютаСчетаПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
	
	УстановитьПараметрыВыбораБанковскогоСчета();
	УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.КассаПолучатель);
	
КонецПроцедуры

&НаСервере
Процедура СтатьяАктивовПассивовПриИзмененииСервер(СтатьяАктивовПассивов, АналитикаАктивовПассивов);
	
	ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтатьяАктивовПассивов, АналитикаАктивовПассивов);
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
		КурсКонвертацииПриИзмененииСервер();
	КонецЕсли;
	
	// Заполним реквизит "Партнер"
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаРасшифровки.Партнер.Пустая() Тогда
			СтрокаРасшифровки.Партнер = Партнер;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И Не ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Заказ) Тогда
		
		Объект.РасшифровкаПлатежа[0].Заказ = ДоговорКонтрагента;
		ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа[0],
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств, СтавкаНДС"));
		
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвансовогоОтчетаПриИзменении(Элемент)
	
	ПересчитатьДатуАвансовогоОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвансовогоОтчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ДоДаты" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтотОбъект);
		
		ПоясняющийТекст = НСтр("ru='Выберите дату отчета по выдаваемому авансу'") + " ";
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДаты",
			Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст),
			,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элемент.ОграничениеТипа = ОписаниеТиповДата;
		
		Элемент.КнопкаВыбора = Ложь;
		Элемент.РедактированиеТекста = Ложь;
	КонецЕсли;
	
	Элементы.ДатаАвансовогоОтчета.Видимость = (ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") И ВыбранноеЗначение <> "ДоДаты");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		Если ВыбраннаяДата < Объект.ДатаПлатежа Тогда
			ВыбраннаяДата = Объект.ДатаПлатежа;
		КонецЕсли;
		
		Объект.ДатаАвансовогоОтчета = ВыбраннаяДата;
		ПериодАвансовогоОтчета = ВыбраннаяДата;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = ОписаниеТиповДата;
		
		Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
		Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
	Иначе
		
		Если ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата") Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 7 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через неделю";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 14 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через две недели";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ДобавитьМесяц(ТекущаяДата(), 1) Тогда
			ПериодАвансовогоОтчета = "Через месяц";
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДатаАвансовогоОтчета.Видимость = (ТипЗнч(ПериодАвансовогоОтчета) <> Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДатуАвансовогоОтчета()
	
	Если ПериодАвансовогоОтчета = "Через неделю" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.ДатаПлатежа), Объект.ДатаПлатежа, ТекущаяДата()) + 7 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "Через две недели" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.ДатаПлатежа), Объект.ДатаПлатежа, ТекущаяДата()) + 14 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "Через месяц" Тогда
		Объект.ДатаАвансовогоОтчета = ДобавитьМесяц(?(ЗначениеЗаполнено(Объект.ДатаПлатежа), Объект.ДатаПлатежа, ТекущаяДата()), 1);
		
	ИначеЕсли ПериодАвансовогоОтчета = "ДоДаты" Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтаФорма, );
		ПоказатьВводДаты(Оповещение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), НСтр("ru='Дата отчета по выдаваемому авансу'"), ЧастиДаты.Дата);
		Возврат;
		
	ИначеЕсли ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата") Тогда
		Если ПериодАвансовогоОтчета < Объект.ДатаПлатежа Тогда
			ПериодАвансовогоОтчета = Объект.ДатаПлатежа;
		КонецЕсли;
		
		Объект.ДатаАвансовогоОтчета = ПериодАвансовогоОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеречислениеВБюджетПриИзмененииСервер()
	
	Если Объект.ПеречислениеВБюджет Тогда
		
		МассивОпераций = Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет();
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
		ИначеЕсли МассивОпераций.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		КонецЕсли;
		УстановитьЗначенияПоказателейПлатежаВБюджетПоВиду();
		
		Если ПустаяСтрока(Объект.КодОКАТО) Тогда
			Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(Объект.Организация);
			Если ПрименениеПриказа107н Тогда
				Объект.КодОКАТО = Реквизиты.КодПоОКТМО;
			Иначе
				Объект.КодОКАТО = Реквизиты.КодПоОКАТО;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеПоказателямиПлатежаВБюджет();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоказателейПлатежаВБюджетПоВиду()
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
		Объект.СтатусСоставителя = "01";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательТипа = "";
		
	ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		
		Объект.СтатусСоставителя = "06";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательТипа = "";
		
	ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
		
		Объект.СтатусСоставителя = "08";
		Объект.ПоказательОснования = "0";
		Объект.ПоказательПериода = "0";
		Объект.ПоказательНомера = "0";
		Объект.ПоказательДаты = "0";
		Объект.ПоказательТипа = ?(ПрименениеПриказа126н, "", "0");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетКонтрагентаПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		ЗаполнитьНазначениеПлатежаПоСчетуПолучателя();
	КонецЕсли;
	УстановитьПараметрыВыбораДоговоровКредитовДепозитов();
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура ПроверитьЗаполнитьТипПлатежа275ФЗ()
	
	ПараметрыПлатежа = Новый Структура;
	ПараметрыПлатежа.Вставить("ПлатежиПо275ФЗ", Объект.ПлатежиПо275ФЗ);
	ПараметрыПлатежа.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ПараметрыПлатежа.Вставить("ДоговорСУчастникомГОЗ", Объект.ДоговорСУчастникомГОЗ);
	ПараметрыПлатежа.Вставить("ОплатаРасходовПоТарифамСГосрегулированием", ОплатаРасходовПоТарифамСГосрегулированием);
	ПараметрыПлатежа.Вставить("ИностранныйИсполнительВУтвержденномПеречнеГОЗ", ИностранныйИсполнительВУтвержденномПеречнеГОЗ);
	ПараметрыПлатежа.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	
	ДоступныеТипыПлатежа275ФЗ = Справочники.ТипыПлатежейФЗ275.ДоступныеТипыПлатежа275ФЗ(ПараметрыПлатежа);
	Если ДоступныеТипыПлатежа275ФЗ.Найти(Объект.ТипПлатежаФЗ275) = Неопределено Тогда
		Если ДоступныеТипыПлатежа275ФЗ.Количество() Тогда
			Объект.ТипПлатежаФЗ275 = ДоступныеТипыПлатежа275ФЗ[0];
			ЗаполнитьПодтверждающиеДокументыСервер();
		Иначе
			Объект.ТипПлатежаФЗ275 = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыФайлНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбновитьСписокВладельцевПодтверждающихДокументов();
		
		ДополнительныеПараметрыВыбораВладельца = Новый Структура("Действие", Результат.Значение);
		Если ВладельцыПодтверждающихДокументов.Количество() > 1 Тогда
			
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.ЗагрузитьЗначения(ВладельцыПодтверждающихДокументов.ВыгрузитьЗначения());
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборВладельцаФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметрыВыбораВладельца);
		
			СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru= 'Выбор договора для создания файла'")); 
			
		ИначеЕсли ВладельцыПодтверждающихДокументов.Количество() = 1 Тогда
			
			ВыборВладельцаФайлаЗавершение(Новый Структура("Значение", ВладельцыПодтверждающихДокументов[0].Значение), ДополнительныеПараметрыВыбораВладельца);
			
		Иначе
			
			Если Результат.Значение = "ДобавлениеФайлаСДиска" Тогда
				ПоказатьПредупреждение(,НСтр("ru='В документе не указан ни один договор. Добавление файла невозможно.'"));
			ИначеЕсли Результат.Значение = "ВыборИзПрисоединенныхФайлов" Тогда
				ПоказатьПредупреждение(,НСтр("ru='В документе не указан ни один договор. Выбор файла невозможен.'"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВладельцаФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыбранныйВладелецФайла = Результат.Значение;
		
		Если ДополнительныеПараметры.Действие = "ДобавлениеФайлаСДиска" Тогда
			
			ИдентификаторФайла = Новый УникальныйИдентификатор;
			ДобавляетсяФайлПодтверждающегоДокумента = Истина;
			
			ПрисоединенныеФайлыКлиент.ДобавитьФайлы(ВыбранныйВладелецФайла, ИдентификаторФайла);
			
		ИначеЕсли ДополнительныеПараметры.Действие = "ВыборИзПрисоединенныхФайлов" Тогда
			
			ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов(ВыбранныйВладелецФайла, Элементы.ПодтверждающиеДокументыФайл);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВладельцевПодтверждающихДокументов()
	
	ВладельцыПодтверждающихДокументов.Очистить();
	
	ВладелецРасшифровка = Неопределено;
	ВладелецДоговорСЗаказчиком = Неопределено;
	
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл 
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКредитаДепозита) Тогда
			ВладелецРасшифровка = СтрокаРасшифровки.ДоговорКредитаДепозита;
		ИначеЕсли ЗначениеЗаполнено(СтрокаРасшифровки.Заказ) Тогда
			ВладелецРасшифровка = СтрокаРасшифровки.Заказ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВладелецРасшифровка) Тогда
			ВладельцыПодтверждающихДокументов.Добавить(ВладелецРасшифровка);
		КонецЕсли;
	КонецЦикла;
		
	Если Объект.ТипПлатежаФЗ275 = ПредопределенноеЗначение("Справочник.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю") 
		Или Объект.ТипПлатежаФЗ275 = ПредопределенноеЗначение("Справочник.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю") 
		Или Объект.ТипПлатежаФЗ275 = ПредопределенноеЗначение("Справочник.ТипыПлатежейФЗ275.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств") Тогда
		
		Для Каждого СтрокаДоговоровСЗаказчиками Из Объект.ДоговорыСЗаказчиками Цикл 
			Если ЗначениеЗаполнено(СтрокаДоговоровСЗаказчиками.ДоговорСЗаказчиком) Тогда
				ВладелецДоговорСЗаказчиком = СтрокаДоговоровСЗаказчиками.ДоговорСЗаказчиком;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВладелецДоговорСЗаказчиком) Тогда
				ВладельцыПодтверждающихДокументов.Добавить(ВладелецДоговорСЗаказчиком);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНазначениеПлатежа(Команда)
	
	ЗаполнитьНазначениеПлатежаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеПлатежаСервер()
	
	ДенежныеСредстваСервер.ЗаполнитьТекстНазначенияПлатежа(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ПоддержкаПлатежей275ФЗ = ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейВСоответствииС275ФЗ");
	ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	ОплатаПоставщику = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		
	ОплатаПоКредитамДепозитам = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
		
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	ДатаНачалаПримененияПриказа107н = Константы.ДатаНачалаПримененияПриказа107н.Получить();
	ПрименениеПриказа107н = ТекущаяДата >= ДатаНачалаПримененияПриказа107н;
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	ПрименениеПриказа126н = ДатаНачалаПримененияПриказа126н <> '00010101' И ТекущаяДата >= ДатаНачалаПримененияПриказа126н;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЮрФизЛицо");
	КонецЕсли;
	
	ИспользоватьУчетПрочихАктивовПассивов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов");
	
	ПравоСогласования = ПраваПользователяПовтИсп.СогласованиеЗаявокНаРасходованиеДенежныхСредств();
	ПравоУтверждения  = ПраваПользователяПовтИсп.УтверждениеЗаявокНаРасходованиеДенежныхСредств();
	
	ТекущаяВалюта = Объект.Валюта;
	ТекущийСтатус = Объект.Статус;
	
	ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	ПолучитьДоговорПоУмолчаниюСервер(Ложь);
	
	ИнициализироватьРасшифровкуПлатежа();
	
	ТоварыРаботыУслугиСТарифнымРегулированием.Загрузить(ОбщегоНазначения.ПрочитатьXMLВТаблицу(
		Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМакет("ТоварыРаботыУслугиСТарифнымРегулированием").ПолучитьТекст()).Данные);
	
	ЗаполнитьДанныеОбОплатеЗаявки();
	ЗаполнитьСписокВыбораПериодов();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РасшифровкаПлатежа);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.РасшифровкаПлатежа);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа);
	//++ НЕ УТ
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		Элементы.НастроитьОтражениеВРеглУчете.Заголовок = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(Объект);
	Иначе
		РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(Объект.РасшифровкаПлатежа);
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТ
	Если Объект.ПлатежиПо275ФЗ
		И Объект.РасшифровкаПлатежа.Количество() > 0
		И ТипЗнч(Объект.РасшифровкаПлатежа[0].Заказ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ДоговорКонтрагента = Объект.РасшифровкаПлатежа[0].Заказ;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
			"ОплатаРасходовПоТарифамСГосрегулированием, ИностранныйИсполнительВУтвержденномПеречнеГОЗ, ГосударственныйКонтракт");
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов);
	КонецЕсли;
	//-- НЕ УТ
	
	УстановитьНадписьРеквизитыПлательщика();
	
	ФормаОплатыОграничена = ФормаОплатыОграничена();
	УправлениеЭлементамиФормы();
	УстановитьСписокХозяйственныхОпераций();
	УстановитьСписокСтатусов();
	
	СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	СохраненнаяХозяйственнаяОперацияПоЗарплате = Объект.ХозяйственнаяОперацияПоЗарплате;
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаПлатежаПартнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаБезРазбиенияПартнер", Объект.ХозяйственнаяОперация);
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРасшифровкуПлатежа()
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМассивыРеквизитов(
		Объект.ХозяйственнаяОперация, Объект.ПеречислениеВБюджет, МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") = Неопределено Тогда
		Объект.РасшифровкаПлатежа.Очистить();
		ПереключательРасшифровки = 0;
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока, Объект.ХозяйственнаяОперация);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
		Иначе
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМассивыРеквизитов(
		Объект.ХозяйственнаяОперация, Объект.ПеречислениеВБюджет, МассивВсехРеквизитов, МассивРеквизитовОперации);
		
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассивуРасширенный(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		"РасшифровкаПлатежа",
		"РасшифровкаБезРазбиения");
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьПодбораПоОстаткамРасчетов(
		Объект.ХозяйственнаяОперация,
		Элементы.РасшифровкаПлатежаПодборПоОстаткам);
		
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость =
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость И ИспользоватьНесколькоВалют;
	Элементы.РасшифровкаБезРазбиенияСуммаВзаиморасчетов.Видимость =
		Элементы.РасшифровкаБезРазбиенияСуммаВзаиморасчетов.Видимость И ИспользоватьНесколькоВалют;
		
	Элементы.РасшифровкаПлатежаЗаполнитьРасшифровкуПлатежа.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ")) 
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов;;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Элементы.НомерВедомостиНаВыплатуЗарплаты.АвтоОтметкаНезаполненного = Ложь;
		Элементы.НомерВедомостиНаВыплатуЗарплаты.ОтметкаНезаполненного = Ложь;
		Элементы.ДатаВедомостиНаВыплатуЗарплаты.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДатаВедомостиНаВыплатуЗарплаты.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты и ИспользоватьНачислениеЗарплаты Тогда
		Элементы.ЗаполнитьВедомостиПоОстаткам.Видимость = Истина;
	Иначе
		Элементы.ЗаполнитьВедомостиПоОстаткам.Видимость = Ложь;
	КонецЕсли;
	
	ПеречислениеВБюджет = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Элементы.ГруппаОтражениеВРеглУчете.Видимость = ПеречислениеВБюджет И ИспользоватьРеглУчет;
	
	//++ НЕ УТ
	Если ПеречислениеВБюджет Тогда
		ПеречислениеНДФЛ = (Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛ);
		Элементы.НДФЛПоВедомостям.Видимость = ПеречислениеНДФЛ И ИспользоватьНачислениеЗарплаты;
		ОтображатьВедомость = ПеречислениеНДФЛ И Объект.НДФЛПоВедомостям;
		УстановитьВидимостьВедомостей(ОтображатьВедомость);
	КонецЕсли;
	//-- НЕ УТ
	
	Элементы.СтраницаРасшифровка.Видимость = (МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") <> Неопределено);
	Если ПереключательРасшифровки Тогда
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаСписком;
	Иначе
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаБезРазбиения;
	КонецЕсли;
	Если НЕ ПереключательРасшифровки Тогда
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;
	
	УстановитьВидимостьПоФормеОплаты();
	УстановитьВидимостьРеквизитовЗарплаты();
	
	Элементы.ПериодАвансовогоОтчета.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Элементы.ДатаАвансовогоОтчета.Видимость = (Элементы.ПериодАвансовогоОтчета.Видимость И ТипЗнч(ПериодАвансовогоОтчета) <> Тип("Дата"));
	
	Элементы.НадписьФактическаяОплата.Видимость = (Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	
	Элементы.ГруппаПеречислениеВБюджет.Видимость = Элементы.ПеречислениеВБюджет.Видимость;
	УправлениеПоказателямиПлатежаВБюджет();
	
	Элементы.НадписьРеквизитыПлательщика.Видимость =
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
	УстановитьФормуОплаты();
	НастроитьДоступныеФормыОплаты();
	УстановитьОтметкуНезаполненного();
	УстановитьДоступностьЭлементовПоСтатусу(Истина);
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКонтрагента(Объект, Элементы.Контрагент);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаБезРазбиенияПартнер);
	УстановитьПараметрыВыбораБанковскогоСчета();
	УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.КассаПолучатель);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьиРасходов(Объект, Элементы.РасшифровкаПлатежаСтатьяРасходов);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьиРасходов(Объект, Элементы.РасшифровкаБезРазбиенияСтатьяРасходов);
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтавкиНДС(Элементы.РасшифровкаПлатежаСтавкаНДС);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтавкиНДС(Элементы.РасшифровкаБезРазбиенияСтавкаНДС);
	
	УстановитьПараметрыВыбораОрганизации();
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	УстановитьПараметрыВыбораДоговоровКредитовДепозитов();
	//++ НЕ УТ
	УстановитьПараметрыВыбораДоговораЛизинга();
	//-- НЕ УТ
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, Элементы.СтатьяДвиженияДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, Элементы.РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		Элементы.ПодотчетноеЛицо.Заголовок = НСтр("ru = 'Сотрудник'");
		Элементы.БанковскийСчетКонтрагента.Заголовок = НСтр("ru = 'Лицевой счет'");
	Иначе
		Элементы.ПодотчетноеЛицо.Заголовок = НСтр("ru = 'Подотчетное лицо'");
		Элементы.БанковскийСчетКонтрагента.Заголовок = НСтр("ru = 'Счет получателя'");
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		Элементы.КассаПолучатель.Заголовок = НСтр("ru = 'Касса конвертации'");
		Элементы.БанковскийСчетПолучатель.Заголовок = НСтр("ru = 'Счет конвертации'");
	Иначе
		Элементы.КассаПолучатель.Заголовок = НСтр("ru = 'Касса получателя'");
		Элементы.БанковскийСчетПолучатель.Заголовок = НСтр("ru = 'Счет получателя'");
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(
		Объект.Валюта,
		Элементы);
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		УстановитьЗаголовокСуммыПлатежаВыплатаЗарплаты()
	КонецЕсли;
	Элементы.РаспределениеПоСчетамСумма.Заголовок = СтрШаблон(НСтр("ru = 'Сумма (%1)'"), Строка(Объект.Валюта));
	
	НастроитьЭлементСверхЛимита();
	
	//++ НЕ УТ
	УправлениеЭлементамиОплатыЗасчетСредствГОЗ();
	//-- НЕ УТ
	
КонецПроцедуры

&НаСервере
Процедура УправлениеПоказателямиПлатежаВБюджет()
	
	// 4D:ERP для Беларуси, Дмитрий, 27.09.2017 9:03:30 
	// {
	// В этой конфигурации действий не требуется
	// }
	// 4D
	
КонецПроцедуры

&НаСервере
Процедура УточнитьСписокХозяйственныхОпераций()
	
	ЭлементХозяйственнаяОперация = Элементы.ХозяйственнаяОперация;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПеречислениеТаможне(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочаяВыдачаДенежныхСредств(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииОплатаЛизингодателю(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийЗаймамСотрудникам(ЭлементХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСуммыПлатежаВыплатаЗарплаты()
	
	Если Не ИспользоватьНачислениеЗарплаты Тогда
		Элементы.ЛицевыеСчетаСотрудниковСумма.Заголовок = СтрШаблон(НСтр("ru = 'Сумма (%1)'"), Строка(Объект.Валюта));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементСверхЛимита()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СверхЛимита", 
		"ЦветТекстаЗаголовка", 
		?(Объект.СверхЛимита, ЦветаСтиля.ЦветОсобогоТекста, ЦветаСтиля.ЦветТекстаФормы));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненного()
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована Тогда
		
		Элементы.СтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СтатьяДвиженияДенежныхСредств.ОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.ОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств.ОтметкаНезаполненного = Ложь;
		
		Элементы.Контрагент.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Контрагент.ОтметкаНезаполненного = Ложь;
		Элементы.БанковскийСчетКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.БанковскийСчетКонтрагента.ОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаПлатежаПартнер.АвтоОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаПлатежаПартнер.ОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаБезРазбиенияПартнер.АвтоОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаБезРазбиенияПартнер.ОтметкаНезаполненного = Ложь;
		
		//++ НЕ УТ
		Элементы.ТипПлатежаФЗ275.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СтатьяКалькуляции.АвтоОтметкаНезаполненного = Ложь И Не ОплатаПоКредитамДепозитам;
		//-- НЕ УТ
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		
		Элементы.БанковскийСчетКонтрагента.ОтметкаНезаполненного = Ложь;
		
	Иначе
		
		Элементы.СтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
		Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
		Элементы.РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
		
		Элементы.Контрагент.АвтоОтметкаНезаполненного = Истина;
		Элементы.БанковскийСчетКонтрагента.АвтоОтметкаНезаполненного = Истина;
		Элементы.РасшифровкаПлатежаПартнер.АвтоОтметкаНезаполненного = Истина;
		Элементы.РасшифровкаБезРазбиенияПартнер.АвтоОтметкаНезаполненного = Истина;
		
		//++ НЕ УТ
		Элементы.ТипПлатежаФЗ275.АвтоОтметкаНезаполненного = Истина;
		Элементы.СтатьяКалькуляции.АвтоОтметкаНезаполненного = Истина И Не ОплатаПоКредитамДепозитам;
		//-- НЕ УТ
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокХозяйственныхОпераций()
	
	СписокВыбора = Элементы.ХозяйственнаяОперация.СписокВыбора;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ТипДокумента = ТипЗнч(Объект.ДокументОснование);
		Если ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионера")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетКомитенту")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
			Если ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
				СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
			КонецЕсли;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);	
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокСтатусов()
	
	СписокВыбора = Элементы.Статус.СписокВыбора;
	
	Если Не ПравоСогласования Или Не ПравоУтверждения Тогда
		
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
		СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
		
		Если ПравоСогласования Или Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
			СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
		КонецЕсли;
		
		Если ПравоУтверждения Или Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
			СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусу(УстанавливатьТолькоПросмотр)
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		Или Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
		
		ТолькоПросмотрЭлементов = Объект.Проведен И УстанавливатьТолькоПросмотр;
	Иначе
		ТолькоПросмотрЭлементов = Ложь;
	КонецЕсли;
	
	ВыплатаЗаработнойПлаты = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	
	ЭлементыТолькоПросмотр = Новый Массив;
	ЭлементыТолькоПросмотр.Добавить(Элементы.Номер);
	ЭлементыТолькоПросмотр.Добавить(Элементы.Дата);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ПланированиеСуммы);
	ЭлементыТолькоПросмотр.Добавить(Элементы.СуммаДокумента);
	ЭлементыТолькоПросмотр.Добавить(Элементы.Валюта);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ФормаОплаты);
	ЭлементыТолькоПросмотр.Добавить(Элементы.Организация);
	ЭлементыТолькоПросмотр.Добавить(Элементы.Подразделение);
	ЭлементыТолькоПросмотр.Добавить(Элементы.Заявитель);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ХозяйственнаяОперация);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ТипНалога);
	ЭлементыТолькоПросмотр.Добавить(Элементы.НДФЛПоВедомостям);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ЛицевыеСчетаСотрудников);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ХозяйственнаяОперацияПоЗарплате);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ЖелательнаяДатаПлатежа);
	ЭлементыТолькоПросмотр.Добавить(Элементы.Контрагент);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ОрганизацияПолучатель);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ПодотчетноеЛицо);
	ЭлементыТолькоПросмотр.Добавить(Элементы.БанковскийСчетКонтрагента);
	ЭлементыТолькоПросмотр.Добавить(Элементы.БанковскийСчетПолучатель);
	ЭлементыТолькоПросмотр.Добавить(Элементы.КассаПолучатель);
	ЭлементыТолькоПросмотр.Добавить(Элементы.СтатьяДвиженияДенежныхСредств);
	ЭлементыТолькоПросмотр.Добавить(Элементы.РасшифровкаПлатежа);
	ЭлементыТолькоПросмотр.Добавить(Элементы.РасшифровкаБезРазбиения);
	ЭлементыТолькоПросмотр.Добавить(Элементы.СтатьяАктивовПассивов);
	ЭлементыТолькоПросмотр.Добавить(Элементы.АналитикаАктивовПассивов);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ПеречислениеВБюджет);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ПлатежиПо275ФЗ);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ПлатежиПо275ФЗВыплатаЗарплаты);
	ЭлементыТолькоПросмотр.Добавить(Элементы.НазначениеПлатежа);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ИдентификаторПлатежа);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ВалютаКонвертации);
	ЭлементыТолькоПросмотр.Добавить(Элементы.КурсКонвертации);
	ЭлементыТолькоПросмотр.Добавить(Элементы.СуммаПослеКонвертации);
	ЭлементыТолькоПросмотр.Добавить(Элементы.СверхЛимита);
	ЭлементыТолькоПросмотр.Добавить(Элементы.НомерВедомостиНаВыплатуЗарплаты);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ТипПлатежаФЗ275);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ПредметОплаты);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ВариантОплаты);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ПунктКонтрактаПредмета);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ПунктКонтрактаОплаты);
	ЭлементыТолькоПросмотр.Добавить(Элементы.СтатьяКалькуляции);
	ЭлементыТолькоПросмотр.Добавить(Элементы.БанковскийСчет);
	ЭлементыТолькоПросмотр.Добавить(Элементы.Касса);
	ЭлементыТолькоПросмотр.Добавить(Элементы.ПодтверждающиеДокументы);
	
	Для каждого Элемент Из ЭлементыТолькоПросмотр Цикл
		Элемент.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	КонецЦикла;
	
	ЭлементыДоступность = Новый Массив;
	ЭлементыДоступность.Добавить(Элементы.ЗаполнитьПоПредыдущемуПлатежу);
	ЭлементыДоступность.Добавить(Элементы.НадписьРеквизитыПлатежаВБюджет);
	ЭлементыДоступность.Добавить(Элементы.РасшифровкаПлатежаПодборПоОстаткам);
	ЭлементыДоступность.Добавить(Элементы.РасшифровкаПлатежаЗаполнитьРасшифровкуПлатежа);
	ЭлементыДоступность.Добавить(Элементы.ЗаполнитьНазначениеПлатежа);
	ЭлементыДоступность.Добавить(Элементы.ЗаполнитьВедомостиПоОстаткам);
	ЭлементыДоступность.Добавить(Элементы.РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчете);
	ЭлементыДоступность.Добавить(Элементы.РасшифровкаПлатежаСчетРеглУчетаАктивовПассивов);
	ЭлементыДоступность.Добавить(Элементы.ЗаполнитьПодтверждающиеДокументы);
	ЭлементыДоступность.Добавить(Элементы.НадписьРеквизитыПлательщика);
	//++ НЕ УТ
	ЭлементыДоступность.Добавить(Элементы.НастроитьОтражениеВРеглУчете);
	//-- НЕ УТ
	
	Для каждого Элемент Из ЭлементыДоступность Цикл
		Элемент.Доступность = Не ТолькоПросмотрЭлементов;
	КонецЦикла;
	
	Элементы.РаспределениеПоСчетам.ТолькоПросмотр =
		(ТолькоПросмотрЭлементов И Не ПравоУтверждения)
		Или (Не ПравоСогласования И Не ПравоУтверждения);
	
	Если УстанавливатьТолькоПросмотр Тогда
		Элементы.КтоРешил.Видимость = (Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
			Или Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
		Элементы.Статус.ТолькоПросмотр = Объект.Проведен И ПустаяСтрока(ТекстНеОплачено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступныеФормыОплаты()
	
	СписокВыбора = Элементы.ФормаОплаты.СписокВыбора;
	СписокВыбора.Очистить();
	ОплатаНаличная = СписокВыбора.Добавить("Наличная", НСтр("ru = 'Наличными'"));
	ОплатаБезналичная = СписокВыбора.Добавить("Безналичная", НСтр("ru = 'Безналичными'"));
	ОплатаЛюбая = СписокВыбора.Добавить("Любая", НСтр("ru = 'В любой форме'"));
	ОплатаКартой = СписокВыбора.Добавить("ПлатежнаяКарта", НСтр("ru = 'Платежной картой'"));
	
	Если (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту)
		Или Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьОплатуПлатежнымиКартами") Тогда
		Элементы.ФормаОплаты.СписокВыбора.Удалить(ОплатаКартой);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор);
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище, КэшированныеЗначения)

	ТаблицаОстатковРасчетов = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	
	//++ НЕ УТ
	ЗаполнитьПоДоговоруГОЗ(ТаблицаОстатковРасчетов);
	//-- НЕ УТ
	
	Объект.РасшифровкаПлатежа.Загрузить(ТаблицаОстатковРасчетов);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаПлатежа, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура ЗаполнитьПоДоговоруГОЗ(Таблица)
	
	ТаблицаОстатковРасчетов = Таблица.Скопировать();
	
	Отбор = Новый Структура("ПлатежиПо275ФЗ", Истина);
	
	Договоры = Новый Массив;
	Платежи = ТаблицаОстатковРасчетов.НайтиСтроки(Отбор);
	Если Платежи.Количество() Тогда
		
		ТаблицаОстатковРасчетов.Свернуть("Договор");
		
		Отбор = Новый Структура("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ПустыеДоговоры = ТаблицаОстатковРасчетов.НайтиСтроки(Отбор);
		Для каждого ПустойДоговор Из ПустыеДоговоры Цикл
			ТаблицаОстатковРасчетов.Удалить(ПустойДоговор);
		КонецЦикла;
		
		Если ТаблицаОстатковРасчетов.Количество() = 1 И ЗначениеЗаполнено(ТаблицаОстатковРасчетов[0].Договор) Тогда
			ЗаполнитьПоДоговору(ТаблицаОстатковРасчетов[0].Договор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура ЗаполнитьДанныеОбОплатеЗаявки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В (&МассивЗаявок)
	|	И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.СуммаОстаток КАК НеОплачено
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		ЗаявкаНаРасходованиеДенежныхСредств В (&МассивЗаявок)
	|	) КАК ДенежныеСредства
	|");
	
	МассивЗаявок = Новый Массив;
	//++ НЕ УТ
	Если Не Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		МассивЗаявок = Объект.РасшифровкаПлатежа.Выгрузить(, "Ведомость").ВыгрузитьКолонку("Ведомость");
	КонецЕсли;
	//-- НЕ УТ
	
	МассивЗаявок.Добавить(Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		ФактическаяОплата = Истина;
	Иначе
		ФактическаяОплата = Ложь;
	КонецЕсли;
	
	ТекстНеОплачено = "";
	Выборка = МассивРезультатов[1].Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.НеОплачено <> 0 Тогда;
			ТекстНеОплачено = НСтр("ru = 'не оплачено:'") + " " +
				ФормированиеПечатныхФорм.ФорматСумм(
					Выборка.НеОплачено,
					Объект.Валюта);
		КонецЕсли;
	КонецЕсли;
	
	Оформление = Новый Структура;
	Оформление.Вставить("ЦветПредупреждение", WebЦвета.Кирпичный);
	Оформление.Вставить("ЦветВыделение", Новый Цвет(22, 39, 121));
	Оформление.Вставить("ФорматДаты", "ДЛФ=D");
	Оформление.Вставить("ФорматДоли", "ЧЦ=3; ЧДЦ=; ЧН=0");
	
	МассивСтрок = Новый Массив;
	
	Если ФактическаяОплата Тогда
		Если Не ЗначениеЗаполнено(ТекстНеОплачено) Тогда
			МассивСтрок.Добавить(НСтр("ru='Оплачена полностью'"));
		Иначе
			МассивСтрок.Добавить(НСтр("ru='Оплачена частично'"));
			МассивСтрок.Добавить(", ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстНеОплачено, , Оформление.ЦветПредупреждение));
		КонецЕсли;
	Иначе
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Не оплачена'"), , Оформление.ЦветПредупреждение));
	КонецЕсли;
	
	НадписьФактическаяОплата = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты()
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
			Получатель = Объект.ПодотчетноеЛицо;
		Иначе
			Получатель = Объект.Контрагент;
		КонецЕсли;
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			Получатель,
			Объект.Валюта);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Объект.Организация,
			Объект.Валюта);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
			Объект.Организация,
			Объект.Валюта);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетПолучатель) Тогда
		Объект.БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Объект.ОрганизацияПолучатель,
			Объект.Валюта);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КассаПолучатель) Тогда
		Объект.КассаПолучатель = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
			Объект.ОрганизацияПолучатель,
			Объект.Валюта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер(ЗаполнятьСчетПоДоговору = Истина)
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		
		ХозяйственнаяОперацияДоговора = Новый Массив;
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		КонецЕсли;
		ДоговорКонтрагента = ДенежныеСредстваСервер.ДоговорПоУмолчанию(
			ДоговорКонтрагента,
			Партнер,
			Объект.Контрагент,
			Объект.Организация,
			ХозяйственнаяОперацияДоговора);
		
		Если ЗаполнятьСчетПоДоговору Тогда
			ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(ДоговорКонтрагента, , Объект.БанковскийСчетКонтрагента);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
			Справочники.ДоговорыКонтрагентов.ЗаполнитьСтатьюДвиженияДенежныхСредствПоДоговору(ДоговорКонтрагента, Объект.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер, ХозяйственнаяОперация)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеПлатежаПоСчетуПолучателя()
	
	Реквизиты = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
		Объект.БанковскийСчетКонтрагента);
	ТекстНазначенияПлатежа = Реквизиты.ТекстНазначения;
	
	Если ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		Объект.НазначениеПлатежа = Объект.НазначениеПлатежа + "
			|" + ТекстНазначенияПлатежа;
	Иначе
		Объект.НазначениеПлатежа = ТекстНазначенияПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОрганизации()
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоВзаимосвязанные"));
	КонецЕсли;
	
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОрганизацииПолучателя()
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоВзаимосвязанные"));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Организация", Объект.Организация));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные"));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Организация", Объект.Организация));
		
	КонецЕсли;
	
	Элементы.ОрганизацияПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИОчиститьОрганизацию()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
		Объект.Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИОчиститьОрганизациюПолучатель()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(
			Объект.Организация,
			Объект.ОрганизацияПолучатель) Тогда
		Объект.ОрганизацияПолучатель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВедомостиПоОстаткамНаСервере()
	
	Если Не ИспользоватьНачислениеЗарплаты Тогда
		ВызватьИсключение НСтр("ru='Не используется начисление зарплаты'");
	КонецЕсли;
	
	//++ НЕ УТ
	Объект.РасшифровкаПлатежа.Очистить();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперацияПоЗарплате);
	Если Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу Тогда
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
		СтруктураПараметров.Вставить("МассивОпераций", МассивОпераций);
	КонецЕсли;

	Если Объект.ХозяйственнаяОперацияПоЗарплате = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту") Тогда
		СтруктураПараметров.Вставить("РасчетныйСчет", Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Заявка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ИсключатьОплаченные");
	СтруктураПараметров.Вставить("ИсключатьВключенныеВЗаявки");
	СтруктураПараметров.Вставить("ЗаполнятьСуммуПоДокументу");
	
	ДенежныеСредстваСервер.ЗаполнитьПоВедомостямКОплате(Объект.РасшифровкаПлатежа, СтруктураПараметров);
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	//-- НЕ УТ
	
КонецПроцедуры

&НаСервере
Функция ВалютаПлатежаСервер()
	
	Результат = Объект.Валюта;
	Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
		Если ЗначениеЗаполнено(Объект.Касса) Тогда
			Результат = Объект.Касса.ВалютаДенежныхСредств;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Результат = Объект.БанковскийСчет.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, ЭлементБанковскийСчетКонтрагента)
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПодотчетноеЛицо", РежимИзмененияСвязанногоЗначения.Очищать);
		МассивПараметров.Добавить(СвязьПараметров);
	Иначе
		СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать);
		МассивПараметров.Добавить(СвязьПараметров);
	КонецЕсли;
	
	ЭлементБанковскийСчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСуммДокументаВВалюту(ТекущаяВалюта)
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(
		Объект,
		ТекущаяВалюта,
		Объект.Валюта);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЛицевойСчетФЛ(ФизЛицо)
	
	Возврат Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ФизЛицо, Объект.Валюта);
	
КонецФункции

&НаСервере
Процедура РасшифровкаПлатежаПараметрыОплатыПоКредитамПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущаяСтрока.СуммаВзаиморасчетов = 0;
	
	ДоговорКредитаДепозита = ТекущаяСтрока.ДоговорКредитаДепозита;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКредитаДепозита,
		"ВалютаВзаиморасчетов, ХарактерДоговора, СтатьяДДСОсновногоДолга, СтатьяДДСПоступленияВыдачи, БанковскийСчет.ОтдельныйСчетГОЗ");
		
	ТекущаяСтрока.ВалютаВзаиморасчетов = Реквизиты.ВалютаВзаиморасчетов;
	Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
		ТекущаяСтрока.СтатьяДвиженияДенежныхСредств = Реквизиты.СтатьяДДСОсновногоДолга;
	Иначе
		ТекущаяСтрока.СтатьяДвиженияДенежныхСредств = Реквизиты.СтатьяДДСПоступленияВыдачи;
	КонецЕсли;
	
	ТипСуммыКредитаДепозита = ТекущаяСтрока.ТипСуммыКредитаДепозита;
	
	//++ НЕ УТ
	Если Реквизиты.БанковскийСчетОтдельныйСчетГОЗ <> Неопределено Тогда
		Объект.ПлатежиПо275ФЗ = Реквизиты.БанковскийСчетОтдельныйСчетГОЗ;
	Иначе
		Объект.ПлатежиПо275ФЗ = Ложь;
	КонецЕсли;
	
	УстановитьТипПлатежаФЗ275ПриОплатеПоКредитам(ДоговорКредитаДепозита, ТипСуммыКредитаДепозита, Объект.ТипПлатежаФЗ275);
	
	ПлатежиПо275ФЗПриИзмененииНаСервере();
	//-- НЕ УТ
	
КонецПроцедуры

//++ НЕ УТ
&НаСервереБезКонтекста
Процедура УстановитьТипПлатежаФЗ275ПриОплатеПоКредитам(Договор, ТипСуммыКредитаДепозита, ТипПлатежаФЗ275)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ТипПлатежаФЗ275, ТипДоговора");
	ДепозитныйДоговор = (Реквизиты.ТипДоговора = Перечисления.ТипыДоговораКредитовИДепозитов.ДепозитВБанке) 
		Или (Реквизиты.ТипДоговора = Перечисления.ТипыДоговораКредитовИДепозитов.ДепозитВБанкеСКапитализацией);
		
	Если ДепозитныйДоговор
			Или ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг Тогда
		ТипПлатежаФЗ275 = Реквизиты.ТипПлатежаФЗ275;
	Иначе 
		ТипПлатежаФЗ275 = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДоговорЛизингаПриИзмененииНаСервере(ИдСтроки)
	
	ТекущаяСтрока = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока,
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.ДоговорЛизинга, "СтатьяДвиженияДенежныхСредств, ВалютаВзаиморасчетов, СтавкаНДС"));
	
	ТекущаяСтрока.СуммаВзаиморасчетов = 0;
	ТекущаяСтрока.ТипПлатежаПоЛизингу = Справочники.ДоговорыЛизинга.ТипыПлатежейПоДоговору(ТекущаяСтрока.ДоговорЛизинга)[0];
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьТипыПлатежейПоДоговору(ДоговорЛизинга)
	
	Возврат Справочники.ДоговорыЛизинга.ТипыПлатежейПоДоговору(ДоговорЛизинга);
	
КонецФункции
//-- НЕ УТ

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения()
	
	Если Объект.РасшифровкаПлатежа.Количество() Тогда
		
		ТекСтрока = Объект.РасшифровкаПлатежа[0];
		
		ТолькоПросмотрПартнераВалюты = ЗначениеЗаполнено(ТекСтрока.Заказ);
		Элементы.РасшифровкаБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.РасшифровкаБезРазбиенияВалютаВзаиморасчетов.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		
		ВидимостьАналитикПоХО = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
		Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Видимость =         (ТекСтрока.ТипСтатьи = 1 И ВидимостьАналитикПоХО);
		Элементы.РасшифровкаБезРазбиенияАналитикаАктивовПассивов.Видимость =  (ТекСтрока.ТипСтатьи = 3 И ВидимостьАналитикПоХО);
		
		Элементы.РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчете.Видимость = (ТекСтрока.ТипСтатьи = 3 И ВидимостьАналитикПоХО);
	КонецЕсли;
	
	Элементы.ВалютаНДС.Видимость = Элементы.РасшифровкаБезРазбиенияСуммаНДС.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДоговоровКредитовДепозитов()

	МассивПараметров = Новый Массив;
	
	Если НЕ Объект.Организация.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФормаОплатыЗаявки)
		И (Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная
		ИЛИ Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ФормаОплаты", Объект.ФормаОплатыЗаявки));
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора",
		Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация)));
		
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.РасшифровкаПлатежаДоговорКредитаДепозита.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура УстановитьПараметрыВыбораДоговораЛизинга()

	МассивПараметров = Новый Массив;
	Если НЕ Объект.Организация.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорЛизинга.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ТипСуммыКредитаДепозитаПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Идентификатор);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		СтатьиДДС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.ДоговорКредитаДепозита, "СтатьяДДСОсновногоДолга, СтатьяДДСПроцентов");
		Если ТекущиеДанные.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг Тогда
			ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСОсновногоДолга;
		ИначеЕсли ТекущиеДанные.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты Тогда
			ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСПроцентов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

&НаСервере
Процедура УстановитьФормыОплатыПоХозяйственнойОперации()
	
	СтруктураДанныхЗаполнения = Новый Структура;
	СтруктураДанныхЗаполнения.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	СтруктураДанныхЗаполнения.Вставить("ХозяйственнаяОперацияПоЗарплате", Объект.ХозяйственнаяОперацияПоЗарплате);
	СтруктураДанныхЗаполнения.Вставить("ПлатежиПо275ФЗ", Объект.ПлатежиПо275ФЗ);
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьФормуОплатыПоХозОперации(СтруктураДанныхЗаполнения);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанныхЗаполнения,
		"ФормаОплатыНаличная, ФормаОплатыБезналичная, ФормаОплатыПлатежнаяКарта, ФормаОплатыЗаявки");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоФормеОплаты()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		Элементы.БанковскийСчетПолучатель.Видимость  = (Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная);
		Элементы.КассаПолучатель.Видимость           = (Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная);
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		ОплатаПеречислением = (Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		Элементы.Контрагент.Видимость                = ОплатаПеречислением;
		Элементы.БанковскийСчетКонтрагента.Видимость = ОплатаПеречислением;
	КонецЕсли;
	
	Элементы.БанковскийСчет.Видимость   = (Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная);
	Элементы.Касса.Видимость            = (Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная);
	
	Элементы.ФормаОплаты.Видимость = Не ФормаОплатыОграничена;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовЗарплаты()
	
	ВыплатаЗаработнойПлаты = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	ПеречислениеЗаработнойПлатыНаЛицевойСчет =
		(Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	
	Элементы.ХозяйственнаяОперацияПоЗарплате.Видимость  = ВыплатаЗаработнойПлаты;
	Элементы.Валюта.ТолькоПросмотр                      = ВыплатаЗаработнойПлаты;
	
	Элементы.ЛицевыеСчетаСотрудников.Видимость          = Элементы.ЛицевыеСчетаСотрудников.Видимость
														  И НЕ ИспользоватьНачислениеЗарплаты
														  И ПеречислениеЗаработнойПлатыНаЛицевойСчет;
	Элементы.НомерВедомостиНаВыплатуЗарплаты.Видимость  = Элементы.НомерВедомостиНаВыплатуЗарплаты.Видимость
														  И Не ИспользоватьНачислениеЗарплаты;
	Элементы.ДатаВедомостиНаВыплатуЗарплаты.Видимость   = Элементы.ДатаВедомостиНаВыплатуЗарплаты.Видимость
														  И Не ИспользоватьНачислениеЗарплаты;
		
	Элементы.ФормаВыгрузитьФайлДляОбменаСБанком.Видимость = 
		(Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		И ИспользоватьНачислениеЗарплаты);
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура УправлениеЭлементамиОплатыЗасчетСредствГОЗ()
	
	Элементы.ТипПлатежаФЗ275.Видимость = Объект.ПлатежиПо275ФЗ;
	Элементы.ПодтверждающиеДокументы.Видимость = Объект.ПлатежиПо275ФЗ
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
	
	ЗависимыеЭлементы = Новый Массив;
	ЗависимыеЭлементы.Добавить(Элементы.ПредметОплаты);
	ЗависимыеЭлементы.Добавить(Элементы.ПунктКонтрактаПредмета);
	ЗависимыеЭлементы.Добавить(Элементы.ВариантОплаты);
	ЗависимыеЭлементы.Добавить(Элементы.ПунктКонтрактаОплаты);
	
	Для каждого Элемент Из ЗависимыеЭлементы Цикл
		Элемент.Видимость = (Объект.ПлатежиПо275ФЗ И ОплатаПоставщику);
	КонецЦикла;
	
	ПараметрыПлатежа = Новый Структура;
	ПараметрыПлатежа.Вставить("ПлатежиПо275ФЗ", Объект.ПлатежиПо275ФЗ);
	ПараметрыПлатежа.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ПараметрыПлатежа.Вставить("ДоговорСУчастникомГОЗ", Объект.ДоговорСУчастникомГОЗ);
	ПараметрыПлатежа.Вставить("ОплатаРасходовПоТарифамСГосрегулированием", ОплатаРасходовПоТарифамСГосрегулированием);
	ПараметрыПлатежа.Вставить("ИностранныйИсполнительВУтвержденномПеречнеГОЗ", ИностранныйИсполнительВУтвержденномПеречнеГОЗ);
	ПараметрыПлатежа.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	
	Справочники.ТипыПлатежейФЗ275.ПараметрыВыбораТипаПлатежа275ФЗ(Элементы.ТипПлатежаФЗ275, ПараметрыПлатежа);
	
	Элементы.ПлатежиПо275ФЗВыплатаЗарплаты.Видимость = Не ИспользоватьНачислениеЗарплаты
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
		И (Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
			Или Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту));
	
	Элементы.ПредметОплаты.СписокВыбора.Очистить();
	Если Объект.ТипПлатежаФЗ275 = Справочники.ТипыПлатежейФЗ275.ОплатаТоваровРаботУслугПоРегулируемымЦенам Тогда
		Для каждого ПредметОплаты Из ТоварыРаботыУслугиСТарифнымРегулированием Цикл
			Элементы.ПредметОплаты.СписокВыбора.Добавить(ПредметОплаты.Наименование);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.СтатьяКалькуляции.Видимость = Объект.ПлатежиПо275ФЗ
		И Не (Объект.ТипПлатежаФЗ275 = Справочники.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю
			Или Объект.ТипПлатежаФЗ275 = Справочники.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю)
		И Не (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	Элементы.СтатьяКалькуляции.АвтоОтметкаНезаполненного = Объект.ПлатежиПо275ФЗ;
	
	Элементы.РаспределениеПоСчетамПодобратьСчета.Видимость = (Объект.ПлатежиПо275ФЗ И Не Объект.ДоговорСУчастникомГОЗ);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРаспределениеПоСчетамИзХранилища(АдресРаспределенияВХранилище)
	
	Если ЭтоАдресВременногоХранилища(АдресРаспределенияВХранилище) Тогда
		ТаблицаРаспределения = ПолучитьИзВременногоХранилища(АдресРаспределенияВХранилище);
		ТаблицаРаспределения.Колонки.Добавить("ДатаПлатежа");
		ТаблицаРаспределения.ЗаполнитьЗначения(Объект.ЖелательнаяДатаПлатежа, "ДатаПлатежа");
		Объект.РаспределениеПоСчетам.Загрузить(ТаблицаРаспределения);
		
		Если ТаблицаРаспределения.Количество() Тогда
			Объект.СтатьяКалькуляции = ТаблицаРаспределения[0].СтатьяКалькуляции;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

//++ НЕ УТ
&НаСервере
Процедура НДФЛПоВедомостямПриИзмененииНаСервере()
	
	ПеречислениеВБюджет = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	ПеречислениеНДФЛ = (Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛ);
	
	ОтображатьВедомость = (ПеречислениеВБюджет И ПеречислениеНДФЛ И Объект.НДФЛПоВедомостям);
	
	УстановитьВидимостьВедомостей(ОтображатьВедомость);
	
	Если Не Объект.НДФЛПоВедомостям Тогда
		ОчиститьВедомостиВРасшифровкеПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВедомостей(ОтображатьВедомость)
	
	Элементы.РасшифровкаПлатежаВедомость.Видимость = (ОтображатьВедомость И ПереключательРасшифровки И ИспользоватьНачислениеЗарплаты);
	Элементы.РасшифровкаБезРазбиенияВедомость.Видимость = (ОтображатьВедомость И Не ПереключательРасшифровки И ИспользоватьНачислениеЗарплаты);
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьСчетУчетаНалоговНаСервере()
	
	СчетУчетДоИзменения = Объект.СчетУчета;
	
	Объект.СчетУчета = Перечисления.ТипыНалогов.СчетУчетаПоТипуНалога(Объект.ТипНалога);
	
	Если СчетУчетДоИзменения <> Объект.СчетУчета Тогда
		Объект.Субконто1 = Неопределено;
		Объект.Субконто2 = Неопределено;
		Объект.Субконто3 = Неопределено;
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И Объект.ТипНалога <> Перечисления.ТипыНалогов.НДФЛ Тогда
		Для Каждого ТекСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ТекСтрокаРасшифровки.Ведомость = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.НастроитьОтражениеВРеглУчете.Заголовок = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(Объект);
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ФормаОплатыОграничена() // Одним значением
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		ДопустимаяФормаОплаты = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОграничениеФормыОплаты(Объект.ХозяйственнаяОперацияПоЗарплате);
	Иначе
		ДопустимаяФормаОплаты = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОграничениеФормыОплаты(Объект.ХозяйственнаяОперация);
	КонецЕсли;
	
	Если Объект.ПлатежиПо275ФЗ Тогда
		ДопустимаяФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	КонецЕСли;
	
	Возврат (ДопустимаяФормаОплаты <> Неопределено);
	
КонецФункции

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.СтатьяРасходов = Результат;
	РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПериодов()
	
	СписокВыбораПериода = Элементы.ПериодАвансовогоОтчета.СписокВыбора;
	
	СписокВыбораПериода.Добавить("Через неделю",     НСтр("ru='Через неделю'"));
	СписокВыбораПериода.Добавить("Через две недели", НСтр("ru='Через две недели'"));
	СписокВыбораПериода.Добавить("Через месяц",      НСтр("ru='Через месяц'"));
	СписокВыбораПериода.Добавить("ДоДаты",           НСтр("ru='До даты...'"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Объект.ДатаАвансовогоОтчета) Тогда
		
		ПериодАвансовогоОтчета = "Через неделю";
		
	Иначе
		Если Объект.ДатаАвансовогоОтчета = НачалоДня(Объект.ДатаПлатежа) + 7 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через неделю";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = НачалоДня(Объект.ДатаПлатежа) + 14 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через две недели";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ДобавитьМесяц(НачалоДня(Объект.ДатаПлатежа), 1) Тогда
			ПериодАвансовогоОтчета = "Через месяц";
		Иначе
			ПериодАвансовогоОтчета = Объект.ДатаАвансовогоОтчета;
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("Дата"));
			ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
			
			Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = ОписаниеТиповДата;
			
			Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
			Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриДобавлениСтрокиРасшифровкиПлатежа(Строка, ХозОперация)
	
	Если ХозОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет") Тогда
		Строка["СтатьяРасходов"] = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка");
	Иначе
		ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов");
	КонецЕсли;
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов")
	
КонецПроцедуры

//++ НЕ УТ
&НаСервере
Процедура ЗаполнитьПоДоговору(Ссылка)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"ПлатежиПо275ФЗ, ДоговорСУчастникомГОЗ, ОплатаРасходовПоТарифамСГосрегулированием,
		|БанковскийСчет, ДоговорыСЗаказчиками, ГосударственныйКонтракт, СтатьяКалькуляции,
		|ИностранныйИсполнительВУтвержденномПеречнеГОЗ");
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов, "ПлатежиПо275ФЗ, ДоговорСУчастникомГОЗ, СтатьяКалькуляции, БанковскийСчет");
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, "ОплатаРасходовПоТарифамСГосрегулированием, ГосударственныйКонтракт, ИностранныйИсполнительВУтвержденномПеречнеГОЗ");
	
	Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная;
	ДоговорКонтрагента = Ссылка;
	
	УстановитьФормыОплатыПоХозяйственнойОперации();
	ФормаОплатыОграничена = ФормаОплатыОграничена();
	
	ПроверитьЗаполнитьТипПлатежа275ФЗ();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Функция РеквизитыПодтверждающегоДокумента(ПодтверждающийДокумент)
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодтверждающийДокумент, "Зашифрован, Редактирует");
	
	ФайлРедактируется = ЗначениеЗаполнено(РеквизитыОбъекта.Редактирует)
		И РеквизитыОбъекта.Редактирует = ПараметрыСеанса.ТекущийПользователь;
	РеквизитыОбъекта.Вставить("ФайлРедактируется", ФайлРедактируется);
	
	Возврат РеквизитыОбъекта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции
//-- НЕ УТ

&НаСервере
Процедура ПроверитьРеквизитыБюджетаНаСервере()
	
	НомерСчетаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "НомерСчета");
	Ошибка = ПлатежиВБюджетКлиентСервер.ПроверитьУИН(Объект.ИдентификаторПлатежа,
		ПлатежиВБюджетКлиентСервер.АдминистраторНачисленияФедеральныйОрганГосударственнойВласти(НомерСчетаКонтрагента));
		
	Если Не ПустаяСтрока(Ошибка) Тогда
		ШаблонТекста = НСтр("ru = '%1
			|Если УИН достоверно не известен, не указывайте его (очистите поле).'");
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Ошибка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка, , "ИдентификаторПлатежа", "Объект");
	КонецЕсли;
	
	// Проверяем дубли УИН
	ДублиУИН = ПлатежиВБюджет.ПроверитьДублиУИН(Объект.ИдентификаторПлатежа, Объект.Ссылка);
	
	Если ДублиУИН.Количество() > 0 Тогда
		// Информацию о дублях УИН выводим отдельно
		Для Каждого ОписаниеОшибки Из ДублиУИН Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Описание, , "ИдентификаторПлатежа", "Объект");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПлатежаВБюджетПоУмолчаниюСервер()
	
	МассивОпераций = Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		Объект.ПеречислениеВБюджет = Истина;
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		
		Периодичность = "МС";
		НомерПериода = Месяц(ТекущаяДата);
		ГодПериода = Год(ТекущаяДата);
		Объект.ПоказательПериода = Периодичность
					+ "." 
					+ ?(СтрДлина(СокрЛП(НомерПериода)) = 1, "0" + НомерПериода, НомерПериода)
					+ "." 
					+ СтрЗаменить(Строка(ГодПериода), Символы.НПП, "");
				
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		
		Объект.ПеречислениеВБюджет = Истина;
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
		Объект.ПоказательПериода = "";
		
	ИначеЕсли МассивОпераций.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		
	Иначе
		Объект.ПеречислениеВБюджет = Ложь;
	КонецЕсли;
	
	УстановитьЗначенияПоказателейПлатежаВБюджетПоВиду();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРанееСовершенномуПлатежу(РезультатВыбора)
	
	Объект.ПеречислениеВБюджет = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.ТипНалога) Тогда
		Объект.ТипНалога = РезультатВыбора.АналитикаАктивовПассивов;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора,,);
	Если Не Объект.РасшифровкаПлатежа.Количество() Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока, Объект.ХозяйственнаяОперация);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа[0], РезультатВыбора, "СтатьяДвиженияДенежныхСредств");
	//++ НЕ УТ
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "СчетУчета, Субконто1, Субконто2, Субконто3");
	Элементы.НастроитьОтражениеВРеглУчете.Заголовок = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(Объект);
	//-- НЕ УТ
	
	УправлениеПоказателямиПлатежаВБюджет();
	УстановитьНадписьРеквизитыПлательщика();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПлательщика()
	
	РеквизитыПлательщика = ДенежныеСредстваСервер.РеквизитыПлательщика(Объект);
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыПлательщика);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписьРеквизитыПлательщика()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НадписьРеквизитыПлательщика = ДенежныеСредстваСервер.НадписьРеквизитыПлательщика(
			Объект.ИННПлательщика, Объект.КПППлательщика, Объект.ТекстПлательщика, ЮрФизЛицо, Объект.ХозяйственнаяОперация);
	Иначе
		НадписьРеквизитыПлательщика = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтатьяДоходовРасходов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.РасшифровкаБезРазбиенияСтатьяРасходов.Заголовок = НСтр("ru = 'Статья расходов'");
		Элементы.РасшифровкаПлатежаСтатьяРасходов.Заголовок      = НСтр("ru = 'Статья расходов'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	БанковскийСчетПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииСервер()
	
	Если Объект.ПланированиеСуммы = ПредопределенноеЗначение("Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов") Тогда
		ВалютаСчетаПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
		ПроверитьСоответствиеВалют();
	КонецЕсли;
	
	//++ НЕ УТ
	Если Объект.ПлатежиПо275ФЗ Тогда
		ПроверитьЗаполнитьТипПлатежа275ФЗ();
		УправлениеЭлементамиОплатыЗасчетСредствГОЗ();
	КонецЕсли;
	//-- НЕ УТ
	
	ЗаполнитьРеквизитыПлательщика();
	УстановитьНадписьРеквизитыПлательщика();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораБанковскогоСчета()
	
	МассивПараметров = Новый Массив;
	СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать);
	МассивПараметров.Добавить(СвязьПараметров);
	
	Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта", РежимИзмененияСвязанногоЗначения.Очищать);
		МассивПараметров.Добавить(СвязьПараметров);
	КонецЕсли;
	
	Элементы.БанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.Касса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
		Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов Тогда
			СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "ВалютаСчетаПолучателя", РежимИзмененияСвязанногоЗначения.Очищать);
			МассивПараметров.Добавить(СвязьПараметров);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.РаспределениеПоСчетамБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеВалют()
	
	Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная
		И Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		
		ВалютаКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Касса, "ВалютаДенежныхСредств");
		ВалютаСравнения = Объект.Валюта;
		
		Если ВалютаКассы <> ВалютаСравнения Тогда
			Объект.Касса = Неопределено;
		КонецЕсли;
		
	ИначеЕсли Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
		
		ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
		ВалютаСчетаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "ВалютаДенежныхСредств");
		МассивСчетов = Новый Массив;
		
		Для Каждого СтрокаСчета из Объект.РаспределениеПоСчетам Цикл
			Если ЗначениеЗаполнено(СтрокаСчета.БанковскийСчетКасса)
				И ТипЗнч(СтрокаСчета.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
				МассивСчетов.Добавить(СтрокаСчета.БанковскийСчетКасса);
			КонецЕсли;
		КонецЦикла;
		ВалютыСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСчетов, "ВалютаДенежныхСредств");
		
		ВалютаСравнения = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ВалютаПланированияДенежныхСредств(Объект, ВалютаСчета);
		
		Если ВалютаСчетаКонтрагента <> ВалютаСравнения Тогда
			Объект.БанковскийСчетКонтрагента = Неопределено;
		КонецЕсли;
		
		КУдалению = Новый Массив;
		Для Каждого СтрокаСчета из Объект.РаспределениеПоСчетам Цикл
			Если ЗначениеЗаполнено(СтрокаСчета.БанковскийСчетКасса)
				И ТипЗнч(СтрокаСчета.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
				Если ВалютыСчетов[СтрокаСчета.БанковскийСчетКасса].ВалютаДенежныхСредств <> ВалютаСравнения Тогда 
					КУдалению.Добавить(СтрокаСчета);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаСчета из КУдалению Цикл
			Объект.РаспределениеПоСчетам.Удалить(СтрокаСчета);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзмененииФрагмент()
	
	Если ФормаОплаты = "Наличная" Тогда
		Объект.ФормаОплатыНаличная = Истина;
		Объект.ФормаОплатыБезналичная = Ложь;
		Объект.ФормаОплатыПлатежнаяКарта = Ложь;
		Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
		
	ИначеЕсли ФормаОплаты = "Безналичная" Тогда
		Объект.ФормаОплатыНаличная = Ложь;
		Объект.ФормаОплатыБезналичная = Истина;
		Объект.ФормаОплатыПлатежнаяКарта = Ложь;
		Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная");
		
	ИначеЕсли ФормаОплаты = "Любая" Тогда
		Объект.ФормаОплатыНаличная = Истина;
		Объект.ФормаОплатыБезналичная = Истина;
		Объект.ФормаОплатыПлатежнаяКарта = Ложь;
		Объект.ФормаОплатыЗаявки = Объект.ФормаОплатыЗаявки.Пустая();
		
	ИначеЕсли ФормаОплаты = "ПлатежнаяКарта" Тогда
		Объект.ФормаОплатыНаличная = Ложь;
		Объект.ФормаОплатыБезналичная = Ложь;
		Объект.ФормаОплатыПлатежнаяКарта = Истина;
		Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта");
		
	Иначе
		Объект.ФормаОплатыНаличная = Ложь;
		Объект.ФормаОплатыБезналичная = Ложь;
		Объект.ФормаОплатыПлатежнаяКарта = Ложь;
		
	КонецЕсли;
	
	ФормаОплатыЗаявкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзмененииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Инд = Объект.РаспределениеПоСчетам.Количество() - 1;
		Пока Инд >= 0 Цикл
			Если ФормаОплаты = "Наличная"
				И ТипЗнч(Объект.РаспределениеПоСчетам[Инд].БанковскийСчетКасса) <> Тип("СправочникСсылка.Кассы") Тогда
				Объект.РаспределениеПоСчетам.Удалить(Инд);
			ИначеЕсли ФормаОплаты = "Безналичная"
				И ТипЗнч(Объект.РаспределениеПоСчетам[Инд].БанковскийСчетКасса) <> Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
				Объект.РаспределениеПоСчетам.Удалить(Инд);
			КонецЕсли;
			Инд = Инд - 1;
		КонецЦикла;
		
		ФормаОплатыПриИзмененииФрагмент();
	Иначе
		УстановитьФормуОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияСПАРКПодробноНажатие(Элемент)
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	
КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Неопределено,
		Объект.Контрагент, // Искать по ссылке
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС()
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	Для каждого СтрокаРасшифровка Из Объект.РасшифровкаПлатежа Цикл
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаРасшифровка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

ОтветПередЗаписью = Ложь;

#КонецОбласти
