#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьФормуОплатыПоХозОперации(ДанныеЗаполнения);
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ЗаполнитьПоАвансовомуОтчету(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкеНаВозвратТоваровОтКлиента(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоВозвратуТоваровОтКлиента(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
		ЗаполнитьПоПоступлениюУслугИВнеоборотныхАктивов(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		ЗаполнитьПоОтчетуКомитенту(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
		ЗаполнитьПоОтчетуКомитентуОСписании(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		ЗаполнитьПоОтчетуКомиссионера(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		ЗаполнитьПоПередачеТоваров(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		ЗаполнитьПоОтчетуПоКомиссии(ДанныеЗаполнения, ДанныеЗаполнения, ДанныеЗаполнения.Комиссионер);
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗаполнитьПоДоговору(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		ЗаполнитьПоВозвратуМеждуОрганизациями(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		ЗаполнитьПоТаможеннойДекларацииИмпорта(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда 
		ЗаполнитьПоСчетуФактуреНалоговогоАгента(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда 
		ЗаполнитьПоЗаявлениюОВвозеТоваров(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
		И ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		И ДанныеЗаполнения.Свойство("ПодотчетноеЛицо") Тогда
		
		Если Не ДанныеЗаполнения.Свойство("Подразделение") Тогда
			ДанныеЗаполнения.Вставить("Подразделение", ФизическиеЛицаУТ.ПодразделениеФизическогоЛица(ДанныеЗаполнения.ПодотчетноеЛицо));
		КонецЕсли;
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
		
	//++ НЕ УТ
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ДоговорЗаймаСотруднику") Тогда
		ДенежныеСредстваСервер.ЗаполнитьПоДоговоруЗаймаСотруднику(ДанныеЗаполнения, ДанныеЗаполнения, РасшифровкаПлатежа, Ложь);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		ЗаполнитьПоЗаказуПереработчику(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		ЗаполнитьПоОтчетуПереработчика(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
		Документы.ПоступлениеДенежныхДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
		ЗаполнитьРеквизитыЗначениямиПоУмолчанию();
		Возврат;
		
	ИначеЕсли ТипОснования = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивВедомостей") Тогда
		ЗаполнитьПоВедомостямНаВыплатуЗарплаты(
			ДанныеЗаполнения,
			ДанныеЗаполнения,
			ДанныеЗаполнения.МассивВедомостей);
			
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ОтчетПоКомиссииМеждуОрганизациями") 
			И ТипЗнч(ДанныеЗаполнения.ОтчетПоКомиссииМеждуОрганизациями) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			
		ОтчетПоКомиссии = ДанныеЗаполнения.ОтчетПоКомиссииМеждуОрганизациями;
		Если ОтчетПоКомиссии.УдержатьВознаграждение Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить Заявку на расходование ДС: Вознаграждение на основании документа %1, поскольку в нем удержано вознаграждение'"),
			ОтчетПоКомиссии);
			ВызватьИсключение Текст;
		КонецЕсли;

		ЗаполнитьПоОтчетуПоКомиссии(ОтчетПоКомиссии, ДанныеЗаполнения, ОтчетПоКомиссии.Организация);	
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование")
		И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
		
		
	//-- НЕ УТ
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		ЗаполнитьПоОперацииПоЯндексКассе(ДанныеЗаполнения, ДанныеЗаполнения);
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСтатьюДвиженияДенежныхСредств(
		ЭтотОбъект,
		ДанныеЗаполнения,
		Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь", Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	КтоЗаявил = Пользователи.ТекущийПользователь();
	Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	
	РаспределениеПоСчетам.Очистить();
	
	ДатаПлатежа = Дата(1, 1, 1);
	ЖелательнаяДатаПлатежа = Дата(1, 1, 1);
	ДокументОснование = Неопределено;
	
	ПоказательТипа = "";
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем Ошибки;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	РасшифровкаБезРазбиения = Ложь;
	Если ДополнительныеСвойства.Свойство("РасшифровкаБезРазбиения") И ДополнительныеСвойства.РасшифровкаБезРазбиения Тогда
		РасшифровкаБезРазбиения = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Организация = ОрганизацияПолучатель Тогда
		
		Текст = НСтр("ru = 'Одна и та же организация не может являться отправителем и получателем одновременно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"Организация",
			,
			Отказ);
	КонецЕсли;
	
	// Проверяем соответствие хозяйственной операции и формы оплаты.
	// Платежной картой можно оплачивать только возврат оплаты клиенту.
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		И (ФормаОплатыПлатежнаяКарта ИЛИ ФормаОплатыЗаявки = Перечисления.ФормыОплаты.ПлатежнаяКарта)
	Тогда
		ТекстОшибки = НСтр("ru='Оплату платежной картой можно выбирать только для возврата оплаты клиенту'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ХозяйственнаяОперация",
			, // ПутьКДанным
			Отказ);
	КонецЕсли;
	
	// Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(
			Организация, ОрганизацияПолучатель) Тогда
		
		ТекстОшибки = НСтр("ru='Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОрганизацияПолучатель",
			,
			Отказ);
	КонецЕсли;
	
	// Проверяем заполнение табличной части "Расшифровка платежа".
	ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиПлатежа(
		ЭтотОбъект,
		СуммаДокумента,
		ХозяйственнаяОперация,
		Отказ);
	
	// Проверяем соответствие валюты заявки, валюты взаиморасчетов и валюты платежа
	Если НЕ (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты) Тогда
		
		ПроверитьСоответствиеВалютыВзаиморасчетов(Отказ);
	КонецЕсли;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМассивыРеквизитов(
		ХозяйственнаяОперация,
		ПеречислениеВБюджет,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	Если Не ФормаОплатыБезналичная
		И ФормаОплатыЗаявки <> Перечисления.ФормыОплаты.Безналичная
		И ЗначениеЗаполнено(ФормаОплатыЗаявки) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.СтатьяРасходов") <> Неопределено Тогда
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтотОбъект,
			Новый Структура("РасшифровкаПлатежа"),
			МассивНепроверяемыхРеквизитов,
			Отказ);
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
		Или Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
		
		//++ НЕ УТ
		МассивНепроверяемыхРеквизитов.Добавить("ТипПлатежаФЗ275");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяКалькуляции");
		МассивНепроверяемыхРеквизитов.Добавить("ПодтверждающиеДокументы.Файл");
		//-- НЕ УТ
	ИначеЕсли Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		Если ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетПолучатель");
		ИначеЕсли  ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
			МассивНепроверяемыхРеквизитов.Добавить("КассаПолучатель");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетПолучатель");
			МассивНепроверяемыхРеквизитов.Добавить("КассаПолучатель");
		КонецЕсли;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетПолучатель");
		МассивНепроверяемыхРеквизитов.Добавить("КассаПолучатель");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.АналитикаРасходов");
		Если ТипНалога <> Перечисления.ТипыНалогов.НДФЛ Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Подразделение");
		КонецЕсли;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаАвансовогоОтчета");
		Если Не ЗначениеЗаполнено(ДатаАвансовогоОтчета) Тогда
			ТекстОшибки = НСтр("ru='Поле ""Отчитаться"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"ПериодАвансовогоОтчета",
				, // ПутьКДанным
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяКалькуляции");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(
		ЭтотОбъект,
		МассивНепроверяемыхРеквизитов,
		ЭтотОбъект.ХозяйственнаяОперацияПоЗарплате);
	
	//++ НЕ УТ
	Если ПлатежиПо275ФЗ Тогда
		ДенежныеСредстваСервер.ОбработкаПроверкиЗаполненияПодтверждающиеДокументы(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Ошибки);
		ДенежныеСредстваСервер.ПроверитьЗаполнениеРеквизитовПлатежаГОЗ(ЭтотОбъект, Отказ);
		ПроверитьЗаполнениеДоговоровГОЗ(Отказ, РасшифровкаБезРазбиения);
		ПроверитьЗаполнениеТипаСуммыКредитаДепозита(Отказ, РасшифровкаБезРазбиения);
		
		Если ТипПлатежаФЗ275 = Справочники.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю
			Или ТипПлатежаФЗ275 = Справочники.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СтатьяКалькуляции");
		КонецЕсли;
	Иначе
	//-- НЕ УТ
		МассивНепроверяемыхРеквизитов.Добавить("ПодтверждающиеДокументы");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорСУчастникомГОЗ");
		МассивНепроверяемыхРеквизитов.Добавить("ТипПлатежаФЗ275");
		МассивНепроверяемыхРеквизитов.Добавить("ПредметОплаты");
		МассивНепроверяемыхРеквизитов.Добавить("ВариантОплаты");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяКалькуляции");
	//++ НЕ УТ
	КонецЕсли;
	//-- НЕ УТ
	
	// 4D:ERP для Беларуси, Дмитрий, 27.09.2017 15:46:39 
	// ПеречислениеВБюджет
	// {
	МассивНепроверяемыхРеквизитов.Добавить("ВидПеречисленияВБюджет");
	МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеВБюджет");
	МассивНепроверяемыхРеквизитов.Добавить("КодБК");
	МассивНепроверяемыхРеквизитов.Добавить("КодОКАТО");
	МассивНепроверяемыхРеквизитов.Добавить("ПоказательДаты");
	МассивНепроверяемыхРеквизитов.Добавить("ПоказательНомера");
	МассивНепроверяемыхРеквизитов.Добавить("ПоказательОснования");
	МассивНепроверяемыхРеквизитов.Добавить("ПоказательПериода");
	МассивНепроверяемыхРеквизитов.Добавить("СтатусСоставителя");
	МассивНепроверяемыхРеквизитов.Добавить("ПоказательТипа");
	// }
	// 4D
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнениеПартнера(ЭтотОбъект,
	                                                   ХозяйственнаяОперация,
	                                                   МассивНепроверяемыхРеквизитов,
	                                                   РасшифровкаБезРазбиения,
	                                                   Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
		
	ДенежныеСредстваСервер.ПроверитьБанковскийСчетПолучатель(ЭтотОбъект, Отказ);
	ДенежныеСредстваСервер.ПроверитьВалютуКонвертации(ЭтотОбъект, Отказ);
	ПроверитьНаличиеОплатыЗаявки(Отказ);
	
	Если РаспределениеПоСчетам.Итог("Сумма") > СуммаДокумента Тогда
		ТекстОшибки = НСтр("ru='Сумма распределения по счетам не может быть больше суммы документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"РаспределениеПоСчетам", // Поле
			, // ПутьКДанным
			Отказ);
	КонецЕсли;
	
	Если ЖелательнаяДатаПлатежа < НачалоДня(Дата) Тогда
		Текст = НСтр("ru = 'Желательная дата платежа не может быть меньше даты документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ЖелательнаяДатаПлатежа",
			,
			Отказ);
	КонецЕсли;
	
	Для Каждого СтрокаРаспределения из РаспределениеПоСчетам Цикл
		Если СтрокаРаспределения.ДатаПлатежа < НачалоДня(Дата) Тогда
			Текст = НСтр("ru = 'Дата платежа не может быть меньше даты документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"РаспределениеПоСчетам[" + РаспределениеПоСчетам.Индекс(СтрокаРаспределения) + "].ДатаПлатежа",
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		ПравоСогласования = ПраваПользователяПовтИсп.СогласованиеЗаявокНаРасходованиеДенежныхСредств();
		Если Не ПравоСогласования Тогда
			ТекстОшибки = НСтр("ru='У вас нет права согласования заявок на расходование денежных средств'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				, // Поле
				, // ПутьКДанным
				Отказ);
		КонецЕсли;
	ИначеЕсли Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
		ПравоУтверждения = ПраваПользователяПовтИсп.УтверждениеЗаявокНаРасходованиеДенежныхСредств();
		Если Не ПравоУтверждения Тогда
			ТекстОшибки = НСтр("ru='У вас нет права утверждения к оплате заявок на расходование денежных средств'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				, // Поле
				, // ПутьКДанным
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	//++ НЕ УТ
	ПроверитьВедомостиНаВыплатуЗарплаты(Отказ);
	//-- НЕ УТ
	
	Если РасшифровкаБезРазбиения Тогда
		ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиБезРазбиения(ЭтотОбъект, ПроверяемыеРеквизиты, "РасшифровкаПлатежа", "РасшифровкаБезРазбиения", Отказ);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Очистим табличную часть, если она не должна заполняться.
	Если РасшифровкаПлатежа.Количество() > 0 
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику И Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ")) Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	Если ЛицевыеСчетаСотрудников.Количество() > 0
		И ХозяйственнаяОперацияПоЗарплате <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		ЛицевыеСчетаСотрудников.Очистить();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов
			//++ НЕ УТ
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю
			//-- НЕ УТ
			)
	Тогда
		// Заполнение суммы взаиморасчетов в табличной части "Расшифровка платежа".
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
			Валюта,
			Дата,
			РасшифровкаПлатежа);
		ДенежныеСредстваСервер.ЗаполнитьВладельцаОбъектаРасчета(ЭтотОбъект);
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМассивыРеквизитов(
		ХозяйственнаяОперация,
		ПеречислениеВБюджет,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
		
	Если ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
		Или ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу Тогда
		
		НеиспользуемыеРеквизиты = Новый Массив;
		НеиспользуемыеРеквизиты.Добавить("Контрагент");
		НеиспользуемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
		
		Для каждого НеиспользуемыйРеквизит Из НеиспользуемыеРеквизиты Цикл
			УдаляемыйРеквизит = МассивРеквизитовОперации.Найти(НеиспользуемыйРеквизит);
			Если УдаляемыйРеквизит <> Неопределено Тогда
				МассивРеквизитовОперации.Удалить(УдаляемыйРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизитыФормыОплаты(ЭтотОбъект, ФормаОплатыЗаявки, Истина);
	
	//++ НЕ УТ
	Если Не ПлатежиПо275ФЗ Тогда
		ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизитыОплатыЗаСчетСредствГОЗ(ЭтотОбъект);
	КонецЕсли;
	//-- НЕ УТ
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты) И
		СтатьяАктивовПассивов <> ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда Тогда
		СтатьяАктивовПассивов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка();
		АналитикаАктивовПассивов = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		КассаБанковскийСчет = БанковскийСчет;
	ИначеЕсли ЗначениеЗаполнено(Касса) Тогда
		КассаБанковскийСчет = Касса;
	Иначе
		КассаБанковскийСчет = Неопределено;
	КонецЕсли;
	
	//++ НЕ УТ
	Если ДоговорСУчастникомГОЗ И Не ПеречислениеВБюджет И РасшифровкаПлатежа.Количество() Тогда
		Заказ = РасшифровкаПлатежа[0].Заказ;
		Если ЗначениеЗаполнено(Заказ) Тогда
			Если ТипЗнч(Заказ) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				Или ТипЗнч(Заказ) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
				ИдентификаторПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "ГосударственныйКонтракт.Код");
			Иначе
				ИдентификаторПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Договор.ГосударственныйКонтракт.Код");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(РасшифровкаПлатежа, "СтатьяРасходов");
	
	Если РаспределениеПоСчетам.Количество() Тогда
		ДатыПлатежей = РаспределениеПоСчетам.Выгрузить(,"ДатаПлатежа");
		ДатыПлатежей.Сортировать("ДатаПлатежа");
		ДатаПлатежа = ДатыПлатежей[0].ДатаПлатежа;
	Иначе
		ДатаПлатежа = ЖелательнаяДатаПлатежа;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		МассивСтатейДДС = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(РасшифровкаПлатежа.ВыгрузитьКолонку("СтатьяДвиженияДенежныхСредств"));
		Если МассивСтатейДДС.Количество() = 1 Тогда
			СтатьяДвиженияДенежныхСредств = МассивСтатейДДС[0];
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРаспределения = РаспределениеПоСчетам.Выгрузить();
	ТаблицаРаспределения.Свернуть("БанковскийСчетКасса, ДатаПлатежа", "Сумма");
	РаспределениеПоСчетам.Загрузить(ТаблицаРаспределения);
	РаспределениеПоСчетам.Сортировать("ДатаПлатежа");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по регистрам
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьЛимитыРасходаДенежныхСредств(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныхСредств(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваКонтрагент(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ЛимитыРасходованияДенежныхСредствСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьРеквизитыПоРезультатуЗапроса(ДокументОснование, РезультатЗапроса, ДанныеЗаполнения, ЗаполнениеПоДоговору = Ложь)
	
	Если РезультатЗапроса.Пустой() Тогда
		Если ЗаполнениеПоДоговору Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется вводить Заявку на расходование ДС на основании договора %1'"),
				ДокументОснование);
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется вводить Заявку на расходование ДС на основании документа %1'"),
				ДокументОснование);
		КонецЕсли;
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		//++ НЕ УТ
		Если ЗаполнениеПоДоговору Тогда
			ДоступныеТипыПлатежа275ФЗ = Справочники.ТипыПлатежейФЗ275.ДоступныеТипыПлатежа275ФЗ(ДанныеЗаполнения);
			Если ДоступныеТипыПлатежа275ФЗ.Количество() Тогда
				ДанныеЗаполнения.Вставить("ТипПлатежаФЗ275", ДоступныеТипыПлатежа275ФЗ[0]);
			КонецЕсли;
		КонецЕсли;
		//-- НЕ УТ
		
		ДанныеЗаполнения.Вставить("ЖелательнаяДатаПлатежа");
		
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплатыЗаявки) Тогда
			ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
			ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				ДанныеЗаполнения.Контрагент,
				ДанныеЗаполнения.Валюта);
		Иначе
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				ДанныеЗаполнения.Контрагент);
		КонецЕсли;
		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
			БанковскийСчетКонтрагента);
		НазначениеПлатежа = РеквизитыСчета.ТекстНазначения;
		
		ЗаказыПоставщику = ДокументОснование;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТовары.ЗаказПоставщику КАК ЗаказПоставщику
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &Ссылка
			|	И ТаблицаТовары.Ссылка.ПоступлениеПоЗаказам
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
			
			РезультатЗапросаПоЗаказам = Запрос.Выполнить();
			Если НЕ РезультатЗапросаПоЗаказам.Пустой() Тогда
				ЗаказыПоставщику = РезультатЗапросаПоЗаказам.Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
				ЗаказыПоставщику.Добавить(ДокументОснование);
			КонецЕсли;
			
		//++ НЕ УТ
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТовары.ЗаказПереработчику КАК ЗаказПереработчику
			|ИЗ
			|	Документ.ОтчетПереработчика.Продукция КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &Ссылка
			|	И ТаблицаТовары.Ссылка.ПоЗаказам
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
			
			РезультатЗапросаПоЗаказам = Запрос.Выполнить();
			Если НЕ РезультатЗапросаПоЗаказам.Пустой() Тогда
				ЗаказыПоставщику = РезультатЗапросаПоЗаказам.Выгрузить().ВыгрузитьКолонку("ЗаказПереработчику");
				ЗаказыПоставщику.Добавить(ДокументОснование);
			КонецЕсли;
		//-- НЕ УТ
		КонецЕсли;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
			ЗаказыПоставщику,
			Выборка.Договор,
			ДанныеЗаполнения.Валюта,
			?(ДанныеЗаполнения.Свойство("Сумма"), ДанныеЗаполнения.Сумма, 0), // СуммаКОплате,
			РасшифровкаПлатежа,
			ДанныеЗаполнения.ЖелательнаяДатаПлатежа);
		
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуПоставщику(
	Знач ДокументОснование,
	ДанныеЗаполнения)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Приоритет КАК Приоритет,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет
	|	ИНАЧЕ
	|		ДанныеДокумента.Договор.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	ДанныеДокумента.Касса КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеДокумента.Договор.БанковскийСчет.ВалютаДенежныхСредств, ДанныеДокумента.Валюта)
	|	КОНЕЦ КАК Валюта,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоАвансовомуОтчету(
	Знач ДокументОснование,
	ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);

	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.ПодотчетноеЛицо.Наименование КАК Выдать,
	|	ДанныеДокумента.Ссылка КАК АвансовыйОтчет,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Ссылка) КАК Основание,
	|	(-ДенежныеСредства.СуммаОстаток) КАК Сумма,
	|	(-ДенежныеСредства.СуммаОстаток) КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(, ) КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Организация = ДанныеДокумента.Организация
	|		И ДенежныеСредства.ПодотчетноеЛицо = ДанныеДокумента.ПодотчетноеЛицо
	|		И ДенежныеСредства.Валюта = ДанныеДокумента.Валюта
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.ПодотчетноеЛицо,
			ДанныеЗаполнения.Валюта);
		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента);
		НазначениеПлатежа = РеквизитыСчета.ТекстНазначения;
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоВозвратуТоваровОтКлиента(
	Знач ДокументОснование,
	ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
	|	КОНЕЦ КАК ФормаОплатыЗаявки,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СпособКомпенсации КАК СпособКомпенсации,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить заявку на основании документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
	
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Договор) Тогда
			БанковскийСчетКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Договор, "БанковскийСчетКонтрагента");
		Иначе
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				ДанныеЗаполнения.Контрагент,
				ДанныеЗаполнения.Валюта);
		КонецЕсли;
		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента);
		НазначениеПлатежа = РеквизитыСчета.ТекстНазначения;
		
		ОбъектыРасчетов = Новый Массив;
		Если Выборка.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства Тогда
			ОбъектыРасчетов.Добавить(ДокументОснование);
		Иначе
			ОбъектыРасчетов.Добавить(Неопределено);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
			ОбъектыРасчетов.Добавить(Выборка.ЗаявкаНаВозвратТоваровОтКлиента);
		КонецЕсли;
		ОбъектыРасчетов.Добавить(Выборка.Договор);
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(
			ОбъектыРасчетов,
			ДанныеЗаполнения.Валюта,
			ДанныеЗаполнения.Сумма,
			ДанныеЗаполнения.Партнер,
			РасшифровкаПлатежа);
				
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаВозвратТоваровОтКлиента(
	Знач ДокументОснование,
	ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер         КАК Партнер,
	|	ДанныеДокумента.Приоритет       КАК Приоритет,
	|	ДанныеДокумента.Контрагент      КАК Контрагент,
	|	&Ссылка                         КАК Заказ,
	|	ДанныеДокумента.Валюта          КАК Валюта,
	|	ДанныеДокумента.Валюта          КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДанныеДокумента.СуммаДокумента - ДанныеДокумента.СуммаЗамены КАК Сумма,
	|	ДанныеДокумента.СуммаДокумента - ДанныеДокумента.СуммаЗамены КАК СуммаВзаиморасчетов,
	|	НЕ ДанныеДокумента.Проведен     КАК ЕстьОшибкиПроведен,
	|	ДанныеДокумента.Статус          КАК СтатусДокумента,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ФормаОплатыЗаявки,
	|	Неопределено КАК Касса,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
			Выборка.ДокументОснование,
			Выборка.СтатусДокумента,
			Выборка.ЕстьОшибкиПроведен,
			Истина);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент,
			ДанныеЗаполнения.Валюта);
		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента);
		НазначениеПлатежа = РеквизитыСчета.ТекстНазначения;
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
		
		Если Выборка.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
			
			ОбъектыРасчетов = Новый Массив;
			ОбъектыРасчетов.Добавить(ДокументОснование);
			
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(
				ОбъектыРасчетов,
				ДанныеЗаполнения.Валюта,
				ДанныеЗаполнения.Сумма,
				ДанныеЗаполнения.Партнер,
				РасшифровкаПлатежа);
			
		Иначе
			
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЕсли;
		
		// Заполнение суммы шапки документа
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюТоваровУслуг(
	Знач ДокументОснование,
	ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) ТОГДА
	|		&Ссылка
	|	ИНАЧЕ
	|		ДанныеДокумента.ЗаказПоставщику
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|		)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения);
			
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюУслугИВнеоборотныхАктивов(
	Знач ДокументОснование,
	ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	&Ссылка КАК Заказ,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомитенту(
	Знач ДокументОснование,
	ДанныеЗаполнения)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Касса КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)  КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомитентуОСписании(
	Знач ДокументОснование,
	ДанныеЗаполнения)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомиссионера(
	Знач ДокументОснование,
	ДанныеЗаполнения)

	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Касса КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаВознаграждения КАК Сумма,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаВознаграждения > 0
	|	И Не ДанныеДокумента.УдержатьВознаграждение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	|	-ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаДокумента < 0
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить заявку на основании документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
	
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплатыЗаявки) Тогда
			ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
			ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент,
			ДанныеЗаполнения.Валюта);
		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента);
		НазначениеПлатежа = РеквизитыСчета.ТекстНазначения;
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
		
		Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ОбъектыРасчетов = Новый Массив;
			ОбъектыРасчетов.Добавить(ДокументОснование);
			ОбъектыРасчетов.Добавить(Выборка.Договор);
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(
				ОбъектыРасчетов,
				ДанныеЗаполнения.Валюта,
				Выборка.Сумма,
				ДанныеЗаполнения.Партнер,
				РасшифровкаПлатежа);
		Иначе
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
				ДокументОснование,
				Выборка.Договор,
				ДанныеЗаполнения.Валюта,
				0, // СуммаКОплате
				РасшифровкаПлатежа,
				ЖелательнаяДатаПлатежа);
		КонецЕсли;
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПередачеТоваров(
	Знач ДокументОснование,
	ДанныеЗаполнения)

	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
	|	ДанныеДокумента.Организация КАК ОрганизацияПолучатель,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетПолучатель,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|	НЕОПРЕДЕЛЕНО КАК КассаПолучатель,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию) КАК ХозяйственнаяОперация,
	|
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчет,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетПолучатель,
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|	Неопределено КАК КассаПолучатель,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не требуется вводить заявку на расходование денежных средств на основании документа %1'"),
		ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			
			Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплатыЗаявки) Тогда
				ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
				ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
			КонецЕсли;
			
			ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
				ДанныеЗаполнения.ФормаОплатыЗаявки,
				ДанныеЗаполнения);
			
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				ДанныеЗаполнения.Контрагент,
				ДанныеЗаполнения.Валюта);
			РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента);
			НазначениеПлатежа = РеквизитыСчета.ТекстНазначения;
			БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
				ДанныеЗаполнения.ОрганизацияПолучатель,
				ДанныеЗаполнения.Валюта);
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
				ДокументОснование,
				Неопределено, // Договор
				ДанныеЗаполнения.Валюта,
				0, // СуммаКОплате
				РасшифровкаПлатежа,
				ЖелательнаяДатаПлатежа);
			
			СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуПоКомиссии(
	Знач ДокументОснование,
	ДанныеЗаполнения, ОрганизацияЗаполнения=Неопределено)
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Комиссионер КАК Организация,
	|	Неопределено КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию) КАК ХозяйственнаяОперация,
	|
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.СуммаДокумента > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Комиссионер КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.СуммаДокумента > 0
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
		
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Не ОрганизацияЗаполнения = Неопределено И ДанныеЗаполнения.Организация <> ОрганизацияЗаполнения Тогда
			Если Не ДокументОснование.РасчетыЧерезОтдельногоКонтрагента Тогда
				ДанныеЗаполнения.ОрганизацияПолучатель = ДанныеЗаполнения.Организация;
			КонецЕсли;
			ДанныеЗаполнения.Организация = ОрганизацияЗаполнения;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплатыЗаявки) Тогда
			ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
			ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
		
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент,
			ДанныеЗаполнения.Валюта);
		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента);
		НазначениеПлатежа = РеквизитыСчета.ТекстНазначения;
		БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДанныеЗаполнения.ОрганизацияПолучатель,
			ДанныеЗаполнения.Валюта);
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
			ДокументОснование,
			Неопределено, // Договор
			ДанныеЗаполнения.Валюта,
			0, // СуммаКОплате
			РасшифровкаПлатежа,
			ЖелательнаяДатаПлатежа,
			ДанныеЗаполнения.Организация);
			
		ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств", 
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ДанныеЗаполнения.ХозяйственнаяОперация));

		Если ЗначениеЗаполнено(ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств) Тогда
			Для Каждого Стр Из РасшифровкаПлатежа Цикл
				Стр.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			КонецЦикла;
		КонецЕсли;
		
		ДанныеЗаполнения.СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	Иначе
		ВызватьИсключение
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заявка на расходование ДС не требуется для документа %1'"), ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоВозвратуМеждуОрганизациями(
	Знач ДокументОснование,
	ДанныеЗаполнения)

	// Заполним данные шапки документа.
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА Неопределено
		|		ИНАЧЕ ДанныеДокумента.Организация КОНЕЦ) КАК ОрганизацияПолучатель,
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА ДанныеДокумента.Контрагент
		|		ИНАЧЕ Неопределено КОНЕЦ) КАК Контрагент,
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА ДанныеДокумента.Партнер
		|		ИНАЧЕ Неопределено КОНЕЦ) КАК Партнер,
		|	ДанныеДокумента.ДокументПоступления КАК Заказ,
		|	ДанныеДокумента.РасшифровкаПлатежа.(Заказ) КАК ЗаказРасшифровки,
		|	ДОБАВИТЬКДАТЕ(ДанныеДокумента.Дата,ДЕНЬ,
		|			РАЗНОСТЬДАТ(ДанныеДокумента.ДокументПоступления.Дата,ДанныеДокумента.ДокументПоступления.ДатаПлатежа,ДЕНЬ)
		|		) КАК ЖелательнаяДатаПлатежа,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|
		|	Неопределено КАК ФормаОплатыЗаявки,
		|	Истина КАК ФормаОплатыНаличная,
		|	Истина КАК ФормаОплатыБезналичная,
		|
		|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчет,
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА Неопределено ИНАЧЕ ДанныеДокумента.БанковскийСчетОрганизации КОНЕЦ) КАК БанковскийСчетПолучатель,
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА ДанныеДокумента.БанковскийСчетКонтрагента ИНАЧЕ Неопределено КОНЕЦ) КАК БанковскийСчетКонтрагента,
		|	Неопределено КАК Касса,
		|	Неопределено КАК КассаПолучатель,
		|
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) КОНЕЦ) КАК ХозяйственнаяОперация,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	&Ссылка КАК ДокументОснование
		|ИЗ
		|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить заявку на расходование денежных средств на основании документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			
			ОбъектыРасчетов = Выборка.ЗаказРасшифровки.Выгрузить().ВыгрузитьКолонку("Заказ");
			ОбъектыРасчетов.Добавить(ДанныеЗаполнения.Заказ);
			
			ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
				ДанныеЗаполнения.ФормаОплатыЗаявки,
				ДанныеЗаполнения);
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				ДанныеЗаполнения.Контрагент,
				ДанныеЗаполнения.Валюта);
			РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента);
			НазначениеПлатежа = РеквизитыСчета.ТекстНазначения;
			БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
				ДанныеЗаполнения.ОрганизацияПолучатель,
				ДанныеЗаполнения.Валюта);
			
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(
				ОбъектыРасчетов,
				ДанныеЗаполнения.Валюта,
				Выборка.Сумма,
				ДанныеЗаполнения.Партнер, // партнер
				РасшифровкаПлатежа);
			
			СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоТаможеннойДекларацииИмпорта(Знач ДокументОснование, ДанныеЗаполнения)
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|		ТОГДА ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств ИНАЧЕ ДанныеДокумента.Валюта КОНЕЦ КАК Валюта,
	|
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ФормаОплатыНаличная,
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ВариантОформления = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОформлениеГТДСамостоятельно)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КОНЕЦ КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(ДокументОснование, РезультатЗапроса, ДанныеЗаполнения);
КонецПроцедуры

Процедура ЗаполнитьПоДоговору(
	Знач ДокументОснование,
	ДанныеЗаполнения)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Ссылка КАК Договор,
	|
	|	Ложь КАК ФормаОплатыНаличная,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			И ДанныеДокумента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			И ДанныеДокумента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ФормаОплатыЗаявки,
	|
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК Валюта,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование,
	|	
	|	ДанныеДокумента.ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ,
	|	ДанныеДокумента.ДоговорСУчастникомГОЗ КАК ДоговорСУчастникомГОЗ
	|	
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения,
		Истина); // ЗаполнениеПоДоговору
	
КонецПроцедуры

//++ НЕ УТ
Процедура ЗаполнитьПоВедомостямНаВыплатуЗарплаты(Знач ДанныеКоманды, ДанныеЗаполнения, МассивВедомостей)
	
	ДанныеЗаполнения = Новый Структура("Организация, ФормаОплатыБезналичная, ФормаОплатыНаличная,
		|ФормаОплатыЗаявки, ХозяйственнаяОперацияПоЗарплате, Касса, БанковскийСчет, СуммаДокумента");
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДанныеВедомостей = ДенежныеСредстваСервер.ДанныеВедомостейНаВыплатуЗарплаты(МассивВедомостей);
	
	Если ДанныеВедомостей.РеквизитыШапки = Неопределено Тогда
		Текст = НСтр("ru='Команда не может быть выполнена для указанного объекта!'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ДанныеВедомостей.МассивОшибок.Количество() > 0 Тогда
		Текст = ДанныеВедомостей.МассивОшибок[0].Текст;
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеВедомостей.РеквизитыШапки,
		"Организация, ФормаОплатыБезналичная, ФормаОплатыНаличная, ФормаОплатыЗаявки, ХозяйственнаяОперацияПоЗарплате, Касса");
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	
	Если ДанныеВедомостей.РеквизитыШапки.ТребуетсяЗаполнениеСчета И Не ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет) Тогда
		
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
		ДанныеВедомостей.РеквизитыШапки.Организация, ВалютаРегламентированногоУчета);
		
		ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
		
	ИначеЕсли Не ДанныеВедомостей.РеквизитыШапки.ТребуетсяЗаполнениеСчета И Не ЗначениеЗаполнено(ДанныеЗаполнения.Касса) Тогда
		
		Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
		ДанныеВедомостей.РеквизитыШапки.Организация,
		ВалютаРегламентированногоУчета);
		
		ДанныеЗаполнения.Вставить("Касса", Касса);
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация",           ДанныеЗаполнения.Организация);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", ДанныеЗаполнения.ХозяйственнаяОперацияПоЗарплате);
	
	Если ДанныеЗаполнения.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу Тогда
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
		СтруктураПараметров.Вставить("МассивОпераций", МассивОпераций);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РасчетныйСчет",         Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Заявка",                Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка());
	СтруктураПараметров.Вставить("МассивВедомостей",      МассивВедомостей);
	СтруктураПараметров.Вставить("БезФильтраЗарплатныхПроектов");
	СтруктураПараметров.Вставить("ИсключатьОплаченные");
	СтруктураПараметров.Вставить("ОтображатьДепонированные");
	СтруктураПараметров.Вставить("ИсключатьВключенныеВЗаявки");
	СтруктураПараметров.Вставить("ЗаполнятьСуммуПоДокументу");
	
	ДенежныеСредстваСервер.ЗаполнитьПоВедомостямКОплате(РасшифровкаПлатежа, СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Текст = НСтр("ru='На основании выбранных ведомостей заявки уже созданы или оплата не требуется.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ДанныеЗаполнения.СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
	ДанныеЗаполнения.Вставить("Валюта", ВалютаРегламентированногоУчета);
	
КонецПроцедуры
//-- НЕ УТ

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	КтоЗаявил = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФормаОплатыЗаявки) Тогда
		ФормаОплатыНаличная = Истина;
		ФормаОплатыБезналичная = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или НЕ ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	
	ПриоритетОплаты = Справочники.ПриоритетыОплаты.ПолучитьПриоритетПоУмолчанию(ПриоритетОплаты);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		РеквизитыПлательщика = ДенежныеСредстваСервер.РеквизитыПлательщика(ЭтотОбъект);
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ИННПлательщика") Тогда
			ИННПлательщика = РеквизитыПлательщика.ИННПлательщика;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("КПППлательщика") Тогда
			КПППлательщика = РеквизитыПлательщика.КПППлательщика;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ТекстПлательщика") Тогда
			ТекстПлательщика = РеквизитыПлательщика.ТекстПлательщика;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ
Процедура ЗаполнитьРеквизитыЗначениямиПоУмолчанию()
	
	КтоЗаявил = Пользователи.ТекущийПользователь();
	
	ПриоритетОплаты = Справочники.ПриоритетыОплаты.ПолучитьПриоритетПоУмолчанию(Неопределено);
	
	Если Не ЗначениеЗаполнено(ФормаОплатыЗаявки) Тогда
		ФормаОплатыНаличная = Истина;
		ФормаОплатыБезналичная = Истина;
	Иначе
		ФормаОплатыНаличная = (ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная);
		ФормаОплатыБезналичная = (ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная);
		ФормаОплатыПлатежнаяКарта = (ФормаОплатыЗаявки = Перечисления.ФормыОплаты.ПлатежнаяКарта);
	КонецЕсли;
		
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ФормаОплаты = ФормаОплатыЗаявки;
	СтруктураПараметров.Валюта      = Валюта;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ФормаОплаты = ФормаОплатыЗаявки;
	СтруктураПараметров.Валюта      = Валюта;

	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	БанковскийСчетКонтрагента =
		Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Контрагент, Валюта);
	НазначениеПлатежа =
		Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#Область Прочее

Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		Или Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
			И ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
		КтоРешил = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
	
		Массив.Добавить(Движения.ДенежныеСредстваКВыплате);
	
	КонецЕсли;
	
	Массив.Добавить(Движения.ЛимитыРасходаДенежныхСредств);
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Процедура ПроверитьНаличиеОплатыЗаявки(Отказ)
	
	Если Не ЭтоНовый() И Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДенежныеСредства.СуммаРасход КАК Оплачено
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Обороты(,,Период,
		|		ЗаявкаНаРасходованиеДенежныхСредств = &Заявка
		|	) КАК ДенежныеСредства
		|ГДЕ
		|	ДенежныеСредства.СуммаРасход > 0
		|");
		Запрос.УстановитьПараметр("Заявка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Текст = НСтр("ru = 'Заявка оплачена. Нельзя изменять статус заявки ""К оплате""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"Статус",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ
Процедура ПроверитьВедомостиНаВыплатуЗарплаты(Отказ)
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты 
		 и Не (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет и ТипНалога = Перечисления.ТипыНалогов.НДФЛ) 
		 или Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	МассивВедомостей = РасшифровкаПлатежа.ВыгрузитьКолонку("Ведомость");
	
	КоличествоСтрокРасшифровки = МассивВедомостей.Количество();
	
	МассивВедомостей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВедомостей);
	Если Не КоличествоСтрокРасшифровки = МассивВедомостей.Количество() Тогда
		ТекстОшибки = НСтр("ru='Одна и та же ведомость не может быть использована 2 раза'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "РасшифровкаПлатежа", , Отказ);
	КонецЕсли; 
	
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
	
		ДанныеВедомостей = ДенежныеСредстваСервер.ДанныеВедомостейНаВыплатуЗарплаты(МассивВедомостей);
		
		Если ДанныеВедомостей.МассивОшибок.Количество() > 0 Тогда
			Текст = ДанныеВедомостей.МассивОшибок[0].Текст;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, "РасшифровкаПлатежа", , Отказ);
		КонецЕсли;
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ТаблицаВедомости.Ссылка КАК Заявка,
		|	ТаблицаВедомости.Ведомость КАК Ведомость
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаВедомости
		|ГДЕ
		|	ТаблицаВедомости.Ссылка <> &Ссылка
		|	И ТаблицаВедомости.Ведомость В (&МассивВедомостей)
		|	И ТаблицаВедомости.Ссылка.Проведен
		|	И НЕ ТаблицаВедомости.Ссылка.ХозяйственнаяОперация = &ПеречислениеВБюджет
		|");
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
		Запрос.УстановитьПараметр("ПеречислениеВБюджет", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = НСтр("ru='По документу %Ведомость% уже оформлена %Заявка%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Ведомость%", Выборка.Ведомость);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заявка%", Выборка.Заявка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Заявка, , , Отказ);
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры
//-- НЕ УТ

Процедура ПроверитьСоответствиеВалютыВзаиморасчетов(Отказ)
	
	Если ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение суммы взаиморасчетов в табличной части "Расшифровка платежа".
	ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
		Валюта,
		Дата,
		РасшифровкаПлатежа);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.ВалютаВзаиморасчетов <> &ВалютаЗаявки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	ТаблицаДокумента = РасшифровкаПлатежа.Выгрузить();	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ВалютаЗаявки",Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Валюта взаиморасчетов в строке %1 списка ""Расшифровка платежа"" не соответствует валюте документа %2'"),
			Выборка.НомерСтроки,
			Валюта);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"РасшифровкаПлатежа[" + (Выборка.НомерСтроки - 1) + "].ВалютаВзаиморасчетов",
			,
			Отказ);
	
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТ
Процедура ПроверитьЗаполнениеДоговоровГОЗ(Отказ, РасшифровкаБезРазбиения)

	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьСоответствиеГосКонтракта = Ложь;
	ГосКонтракт = Неопределено;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ГосКонтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ГосударственныйКонтракт");
		ПроверятьСоответствиеГосКонтракта = ЗначениеЗаполнено(ГосКонтракт);
	КонецЕсли;
	
	СписокДоговоров = Новый Массив;
	
	Для каждого СтрокаРасшифровки из РасшифровкаПлатежа Цикл
		
		Если РасшифровкаБезРазбиения Тогда
			ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.Заказ";
			КлючДанных = Неопределено;
		Иначе
			ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", СтрокаРасшифровки.НомерСтроки, "Заказ");
			КлючДанных = ЭтотОбъект;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.Заказ) Тогда
			
			Если ТипЗнч(СтрокаРасшифровки.Заказ) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				Или ТипЗнч(СтрокаРасшифровки.Заказ) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
				ПроверяемыйДоговор = СтрокаРасшифровки.Заказ;
			Иначе
				ПроверяемыйДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровки.Заказ, "Договор");
			КонецЕсли;
			
			СписокДоговоров.Добавить(ПроверяемыйДоговор);
			
			Если Не ЗначениеЗаполнено(ПроверяемыйДоговор) Тогда
				
				Текст = НСтр("ru = 'При осуществлении платежей за счет средств ГОЗ должен быть указан договор с поставщиком / исполнителем.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					КлючДанных,
					ИмяПоля,
					,
					Отказ);
			КонецЕсли;
		Иначе
			
			Текст = НСтр("ru = 'При осуществлении платежей за счет средств ГОЗ должен быть указан договор с поставщиком / исполнителем.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				КлючДанных,
				ИмяПоля,
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	СписокДоговоров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокДоговоров);
	Если СписокДоговоров.Количество() > 1 Тогда
		
		Текст = НСтр("ru = 'Не допускается заявка на оплату за счет средств ГОЗ более чем по одному договору с поставщиком / исполнителем.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			КлючДанных,
			,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТипаСуммыКредитаДепозита(Отказ, РасшифровкаБезРазбиения)

	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		Возврат;
	КонецЕсли;
	
	СписокТиповСумм = Новый Массив;
	
	Для каждого СтрокаРасшифровки из РасшифровкаПлатежа Цикл
		
		Если РасшифровкаБезРазбиения Тогда
			ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.ТипСуммыКредитаДепозита";
			КлючДанных = Неопределено;
		Иначе
			ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", СтрокаРасшифровки.НомерСтроки, "ТипСуммыКредитаДепозита");
			КлючДанных = ЭтотОбъект;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ТипСуммыКредитаДепозита) Тогда
			
			СписокТиповСумм.Добавить(СтрокаРасшифровки.ТипСуммыКредитаДепозита);
			
		Иначе
			
			Текст = НСтр("ru = 'При осуществлении платежей за счет средств ГОЗ должен быть указан тип суммы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				КлючДанных,
				ИмяПоля,
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	СписокТиповСумм = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокТиповСумм);
	Если СписокТиповСумм.Количество() > 1 Тогда
		
		Текст = НСтр("ru = 'Не допускается завка на оплату за счет средств ГОЗ более чем по одному типу суммы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			КлючДанных,
			,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

//++ НЕ УТ
Процедура ЗаполнитьПоЗаказуПереработчику(Знач ДокументОснование, ДанныеЗаполнения)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Приоритет КАК Приоритет,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет
	|	ИНАЧЕ
	|		ДанныеДокумента.Договор.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	ДанныеДокумента.Касса КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеДокумента.Договор.БанковскийСчет.ВалютаДенежныхСредств, ДанныеДокумента.Валюта)
	|	КОНЕЦ КАК Валюта,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуПереработчика(Знач ДокументОснование, ДанныеЗаполнения)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации
	|	ИНАЧЕ
	|		ДанныеДокумента.Договор.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеДокумента.Договор.БанковскийСчет.ВалютаДенежныхСредств, ДанныеДокумента.Валюта)
	|	КОНЕЦ КАК Валюта,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения);
	
КонецПроцедуры

//-- НЕ УТ

Процедура ЗаполнитьПоСчетуФактуреНалоговогоАгента(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.СуммаНДС КАК СуммаНДС,
	|	ДанныеДокумента.Валюта,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	НоваяСтрока.ВалютаВзаиморасчетов = Выборка.Валюта;
	НоваяСтрока.Сумма = Выборка.СуммаНДС;
	НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаНДС;
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявлениюОВвозеТоваров(Знач ДокументОснование, ДанныеЗаполнения)
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация    КАК Организация,
	|	&ТекущаяДата                   КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаНДС,
	|	&Ссылка                        КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)                   КАК ФормаОплатыЗаявки,
	|	ЛОЖЬ                           КАК ФормаОплатыНаличная,
	|	ИСТИНА                         КАК ФормаОплатыБезналичная
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	НоваяСтрока.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	НоваяСтрока.Сумма = Выборка.СуммаНДС;
	НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаНДС;
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоОперацииПоЯндексКассе(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	&ТекущаяДата КАК ЖелательнаяДатаПлатежа,
	                      |	ДанныеДокумента.ИдентификаторТранзакции КАК ИдентификаторТранзакции,
						  |
	                      |	ДанныеДокумента.Организация КАК Организация,
	                      |	ДанныеДокумента.Подразделение КАК Подразделение,
						  |
	                      |	ДанныеДокумента.Партнер КАК Партнер,
	                      |	ДанныеДокумента.Эквайер КАК Контрагент,
						  |
	                      |	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	                      |	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	                      |	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	                      |	ДанныеДокумента.СуммаДокумента КАК Сумма,
						  |
	                      |	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов,
	                      |	ДанныеДокумента.АналитикаРасходов КАК АналитикаРасходов,
	                      |	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
						  |
	                      |	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	                      |	&Ссылка КАК ДокументОснование
						  |
	                      |ИЗ
	                      |	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	                      |ГДЕ
	                      |	ДанныеДокумента.Ссылка = &Ссылка
	                      |	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	Если ДанныеЗаполнения.ДокументОснование = Неопределено Тогда 
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не требуется вводить Заявку на расходование денежных средств на основании документа %1, поскольку ввод доступен только на основании операций Поступления оплаты от клиента'"),
		ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;	
	
	ДанныеЗаполнения.Вставить("НазначениеПлатежа",
		 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		 НСтр("ru = 'Возврат средств по договору %1 по переводу № %2 пользователя № %3, без НДС'"),
		 "<номер и дата Договора с Яндексом>",
		 Формат(ДанныеЗаполнения.ИдентификаторТранзакции, "ЧГ="),
		 "<номер, присвоенный Плательщику Оператором>"));
	
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	НоваяСтрока.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
	НоваяСтрока.Сумма 					= Выборка.Сумма;
	НоваяСтрока.СуммаВзаиморасчетов 	= Выборка.Сумма;
	НоваяСтрока.Партнер 				= Выборка.Партнер;
	НоваяСтрока.СтатьяРасходов 			= Выборка.СтатьяРасходов; 
	НоваяСтрока.АналитикаРасходов 		= Выборка.АналитикаРасходов; 
	НоваяСтрока.СтавкаНДС 				= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
