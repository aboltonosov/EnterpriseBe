#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
//
// Параметры:
// 		КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
// 		КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеВЭксплуатации) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ПеремещениеВЭксплуатации.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ПеремещениеВЭксплуатации);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнутреннееПотребление";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуМатериалыВЭксплуатации(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТМЦВЭксплуатации(ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Ложь, Ложь, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Подразделение КАК Подразделение,
	|	ДанныеШапки.ПодразделениеПолучатель КАК ПодразделениеПолучатель
	|ИЗ
	|	Документ.ПеремещениеВЭксплуатации КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ПодразделениеПолучатель", Реквизиты.ПодразделениеПолучатель);
	
КонецПроцедуры

Процедура ТМЦВЭксплуатации(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТМЦВЭксплуатации";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = "
	|////////////////////////////////////////////////////////////////////////////////////////////////////
	|// ТМЦВЭксплуатации
	|" +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	ТабличнаяЧасть.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.ПартияТМЦВЭксплуатации КАК Партия,
	|	-ТабличнаяЧасть.Количество КАК Количество
	|ИЗ
	|	Документ.ПеремещениеВЭксплуатации.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Организация,
	|	&ПодразделениеПолучатель,
	|	ТабличнаяЧасть.ФизическоеЛицоПолучатель,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.ПартияТМЦВЭксплуатации,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ПеремещениеВЭксплуатации.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка" + ";";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать
// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// 4D:ERP для Беларуси, ВладимирР, 21.09.2015 14:30:43 
	// Учет бланков строгой отчетности, №10038
	// {
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяБСО") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяБСО", НСтр("ru = 'Приходно-расходная накладная БСО'"), СформироватьПечатнуюФормуНакладнаяБСО(МассивОбъектов, ОбъектыПечати, Неопределено));
	КонецЕсли;
	// }
	// 4D
	
	// 4D:ERP для Беларуси, Яна, 02.12.2015 15:19:52 
	// Печатные формы по спецодежде, № 10070
	// {
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПеремещениеМатериалов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПеремещениеМатериалов", НСтр("ru = 'Перемещение материалов в эксплуатации'"),
		СформироватьПечатнуюФормуПеремещениеВЭксплуатации(МассивОбъектов, ОбъектыПечати, Неопределено));
	КонецЕсли;
	// }
	// 4D
	
    // 4D:ERP для Беларуси, Евгений, 09.12.2016 10:07:43  
	// М13, №13506
	// {	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М13") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"М13", "Накладная на внутреннее перемещение материалов", ПечатьМ13(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	// }
	// 4D
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// 4D:ERP для Беларуси, ВладимирР, 21.09.2015 14:30:43 
// Учет бланков строгой отчетности, №10038
// {
Функция СформироватьПечатнуюФормуНакладнаяБСО(МассивОбъектов, ОбъектыПечати, КомплектыПечати)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка,
	|	ПеремещениеТоваров.Дата КАК Дата,
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	ПеремещениеТоваров.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваров.Организация.НаименованиеПолное) КАК ОрганизацияНаименованиеПолное,
	|	ПеремещениеТоваров.Организация КАК ОрганизацияПолучатель,
	|	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваров.Организация.НаименованиеПолное) КАК ОрганизацияПолучательНаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО КАК СкладПолучатель,
	|	НЕОПРЕДЕЛЕНО КАК СкладПолучательПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК СкладПолучательДолжность,
	|	НЕОПРЕДЕЛЕНО КАК СкладПолучательОтветственный,
	|	НЕОПРЕДЕЛЕНО КАК СкладОтправитель,
	|	НЕОПРЕДЕЛЕНО КАК СкладОтправительПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК СкладОтправительДолжность,
	|	НЕОПРЕДЕЛЕНО КАК СкладОтправительОтветственный
	|ИЗ
	|	Документ.ПеремещениеВЭксплуатации КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
	|	ПеремещениеТоваровТовары.Номенклатура.НаименованиеПолное КАК Номенклатура,
	|	1 КАК КоличествоКниг,
	|	ПеремещениеТоваровТовары.Количество КАК Количество,
	|	ПеремещениеТоваровТовары.СерияБСО КАК Серия,
	|	ПеремещениеТоваровТовары.НачальныйНомерБСО КАК НачальныйНомер,
	|	ПеремещениеТоваровТовары.КонечныйНомерБСО КАК КонечныйНомер
	|ИЗ
	|	Документ.ПеремещениеВЭксплуатации.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПеремещениеТоваровТовары.НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[0].Пустой() Или Результат[1].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеВЭксплуатации_НакладнаяБСО";
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ПолеСверху = 5;
	ТабДокумент.ПолеСлева = 10;
	ТабДокумент.ПолеСнизу = 5;
	ТабДокумент.ПолеСправа = 5;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеВЭксплуатации.ПФ_MXL_НакладнаяБСО");
	
	ПервыйДокумент = Истина;
	
	Шапка = Результат[0].Выбрать();
	ВыборкаНоменклатура = Результат[1].Выбрать();
	
	Пока Шапка.Следующий() Цикл
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакетаШапка.Параметры.ФиоПолучил = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.СкладПолучательОтветственный);
		
		ОбластьМакетаШапка.Параметры.ОрганизацияОтправитель = Шапка.ОрганизацияНаименованиеПолное + ", " + Шапка.СкладОтправительПодразделение;
		Если ЗначениеЗаполнено(Шапка.ОрганизацияПолучательНаименованиеПолное) Тогда
			ОбластьМакетаШапка.Параметры.ОрганизацияПолучатель = Шапка.ОрганизацияПолучательНаименованиеПолное + ", " + Шапка.СкладПолучательПодразделение;
		Иначе
			ОбластьМакетаШапка.Параметры.ОрганизацияПолучатель = Шапка.ОрганизацияНаименованиеПолное + ", " + Шапка.СкладПолучательПодразделение;
		КонецЕсли;
		
		ОбластьМакетаШапка.Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Истина);
		ОбластьМакетаШапка.Параметры.ДатаДок = Шапка.Дата;
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		НомерСтроки = 1;
		
		ВыборкаНоменклатура.Сбросить();
		СтуктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
		Пока ВыборкаНоменклатура.НайтиСледующий(СтуктураПоиска) Цикл
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
			ОбластьМакетаСтрока.Параметры.Серия = СокрЛП(ВыборкаНоменклатура.Серия);
			ОбластьМакетаСтрока.Параметры.НомерСтроки = НомерСтроки;
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ОбластьМакетаПодвал.Параметры.ОтправительМОЛДолжность = Шапка.СкладОтправительДолжность;
		ОбластьМакетаПодвал.Параметры.ОтправительМОЛ = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.СкладОтправительОтветственный);
		
		ОбластьМакетаПодвал.Параметры.ПолучательМОЛДолжность = Шапка.СкладПолучательДолжность;
		ОбластьМакетаПодвал.Параметры.ПолучательМОЛ = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.СкладПолучательОтветственный);
		
		ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
		ОбластьМакетаПодвал.Параметры.ГлБухгалтерДолжность = ОтветственныеЛица.ГлавныйБухгалтерДолжностьПредставление;
		ОбластьМакетаПодвал.Параметры.ГлБухгалтерМОЛ = ОтветственныеЛица.ГлавныйБухгалтерПредставление;
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабДокумент;
КонецФункции
// }
// 4D

// 4D:ERP для Беларуси, Яна, 02.12.2015 15:21:14 
// Печатные формы по спецодежде, № 10070
// {
Функция СформироватьПечатнуюФормуПеремещениеВЭксплуатации(МассивОбъектов, ОбъектыПечати, КомплектыПечати)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПеремещениеВЭксплуатации.Ссылка,
	               |	ПеремещениеВЭксплуатации.Номер,
	               |	ПеремещениеВЭксплуатации.Дата,
	               |	ПеремещениеВЭксплуатации.Организация.Представление КАК ПечОрганизация,
	               |	ПеремещениеВЭксплуатации.Организация КАК Организация,
	               |	ПеремещениеВЭксплуатации.Подразделение КАК Подразделение,
	               |	ПеремещениеВЭксплуатации.Подразделение.Представление КАК ПечПодразделение,
	               |	ПеремещениеВЭксплуатации.Товары.(
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура,
	               |		Номенклатура.Код КАК Код,
	               |		Номенклатура.Артикул КАК Артикул,
	               |		Номенклатура.НаименованиеПолное КАК ПечНоменклатура,
	               |		Характеристика КАК ХарактеристикаНоменклатуры,
	               |		ФизическоеЛицо КАК ФизЛицо,
	               |		ФизическоеЛицоПолучатель КАК ФизЛицоПолучатель,
	               |		ФизическоеЛицо.Представление КАК ПечФизЛицо,
	               |		ФизическоеЛицоПолучатель.Представление КАК ПечФизЛицоПолучатель,
	               |		Количество КАК Количество,
	               |		Номенклатура.ЕдиницаДляОтчетов КАК ЕдиницаИзмерения,
	               |		Номенклатура.ЕдиницаДляОтчетов.Представление КАК ПечЕдиницаИзмерения,
	               |		ПартияТМЦВЭксплуатации
	               |	),
				   |	ПеремещениеВЭксплуатации.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
	               |	ПеремещениеВЭксплуатации.ПодразделениеПолучатель.Представление КАК ПечПодразделениеПолучатель
	               |ИЗ
	               |	Документ.ПеремещениеВЭксплуатации КАК ПеремещениеВЭксплуатации
	               |ГДЕ
	               |	ПеремещениеВЭксплуатации.Ссылка В(&МассивОбъектов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр( "МассивОбъектов",   МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Шапка = РезультатЗапроса.Выбрать();
	Шапка.Следующий();
	
	// Вывод заголовка
	ТабДок  = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеВЭксплуатации.ПФ_MXL_ПеремещениеМатериалов");
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	
	СинонимДокумента = Метаданные.Документы.ПеремещениеВЭксплуатации.Синоним;
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Шапка);
	Область.Параметры.Заголовок        = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
	Область.Параметры.Организация      = Шапка.Организация;
	Область.Параметры.ПечОрганизация   = Шапка.ПечОрганизация;
	Область.Параметры.Подразделение    = Шапка.ПодразделениеПолучатель;
	Область.Параметры.ПечПодразделение = Шапка.ПечПодразделениеПолучатель;
	
	ТабДок.Вывести(Область);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	ФлагВыводКода = НЕ ПустаяСтрока(ДопКолонка) 
		И ДопКолонка <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	Область = Макет.ПолучитьОбласть("ТабШапка" + ?(ФлагВыводКода, "", "Доп") + "|Материал");
	Если ФлагВыводКода Тогда
		Область.Параметры.КодАртикул = ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул, "Артикул",
							 		   ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код,     "Код", ""));
	КонецЕсли;
								   							   
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ТабШапка" +  "Доп" + "|Данные");
	
	ТабДок.Присоединить(Область);
	
	// Вывод таб. части
	ОбластьМат    = Макет.ПолучитьОбласть("ТабСтрока" + ?(ФлагВыводКода,    "", "Доп") + "|Материал");
	
	ОбластьДанные = Макет.ПолучитьОбласть("ТабСтрока" +  "Доп" + "|Данные");
	
	ТабЧасть = Шапка.Товары.Выбрать();
	
	
	Пока ТабЧасть.Следующий() Цикл
		
		ЗапросСерии = Новый Запрос;
		ЗапросСерии.УстановитьПараметр("Номенклатура", ТабЧасть.Номенклатура); 
		ЗапросСерии.УстановитьПараметр("Характеристика", ТабЧасть.ХарактеристикаНоменклатуры);
		ЗапросСерии.УстановитьПараметр("Регистратор", ТабЧасть.ПартияТМЦВЭксплуатации.Документ);
		ЗапросСерии.Текст = 
		"ВЫБРАТЬ
		|	СерийТоваров.Регистратор,
		|	СерийТоваров.Серия,
		|	СерийТоваров.Номенклатура,
		|	СерийТоваров.Характеристика
		|ИЗ
		|	РегистрНакопления.ДвиженияСерийТоваров КАК СерийТоваров
		|ГДЕ
		|	СерийТоваров.Номенклатура = &Номенклатура
		|	И СерийТоваров.Характеристика = &Характеристика
		|	И СерийТоваров.Регистратор = &Регистратор";
		
			
		СерииНомеклатуры = ЗапросСерии.Выполнить().Выбрать();
		СерииНомеклатуры.Следующий();
		
		ОбластьМат.Параметры.ПечНом = ТабЧасть.НомерСтроки;	
		
		
		Если СерииНомеклатуры.Количество() <> 0 Тогда
		ОбластьМат.Параметры.ТоварНаименование = СокрЛП(ТабЧасть.ПечНоменклатура)
			+ ПредставлениеСерий(СерииНомеклатуры);
		Иначе 
			ОбластьМат.Параметры.ТоварНаименование = СокрЛП(ТабЧасть.ПечНоменклатура) + СокрЛП(ТабЧасть.ХарактеристикаНоменклатуры) ;
		КонецЕсли;
		
		ОбластьМат.Параметры.Номенклатура  = ТабЧасть.Номенклатура;

		Если ФлагВыводКода Тогда
			ОбластьМат.Параметры.ПечКод = ТабЧасть[ДопКолонка];
		КонецЕсли;
		ТабДок.Вывести(ОбластьМат);
		
		ОбластьДанные.Параметры.ФизЛицо              = ТабЧасть.ФизЛицо;
		ОбластьДанные.Параметры.ПечФизЛицо           = ТабЧасть.ПечФизЛицо;
		ОбластьДанные.Параметры.ФизЛицоПолучатель    = ТабЧасть.ФизЛицоПолучатель;
		ОбластьДанные.Параметры.ПечФизЛицоПолучатель = ТабЧасть.ПечФизЛицоПолучатель;
		ОбластьДанные.Параметры.Подразделение        = Шапка.ПодразделениеПолучатель;
		ОбластьДанные.Параметры.ПечПодразделение     = Шапка.ПечПодразделениеПолучатель;
		
		ОбластьДанные.Параметры.ПечКол            = ТабЧасть.Количество;
		ОбластьДанные.Параметры.ПечЕд             = ТабЧасть.ПечЕдиницаИзмерения;
		ОбластьДанные.Параметры.ЕдИзм             = ТабЧасть.ЕдиницаИзмерения;
	
		ТабДок.Присоединить(ОбластьДанные);
		
	КонецЦикла;
	
	
	Область = Макет.ПолучитьОбласть("ТабПодвал");
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.СтрокаИтог = "Всего наименований: " + ТабЧасть.Количество();
	ТабДок.Вывести( Область);
	
	Возврат ТабДок;

КонецФункции

// Формирует описание серий и характеристик ТМЦ для печати
	//
	// Параметры
	//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
	//
	// Возвращаемое значение:
	//   Строка - Описание серий и характеристик ТМЦ
	//
Функция ПредставлениеСерий(Выборка) 
		
		// 4D:УПП для Беларуси, Дмитрий, 23.05.2010 16:51:56 
		// Немного оптимизируем для печатной формы
		// {
		Результат = "";
		
		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			Результат = Результат + Выборка.Характеристика;
			Результат = СтрЗаменить(Результат, "<>", "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Серия) Тогда
			Результат = ?(Результат = "(", Результат, Результат + "; ");
			Результат = Результат + Выборка.Серия;
			Результат = СтрЗаменить(Результат,  "(<>", "(");
			Результат = СтрЗаменить(Результат, "; <>",  "");
		КонецЕсли;
		
		Возврат ?(Результат = "", "", " " + Результат);
		// }
		// 4D
		
	КонецФункции // ПредставлениеСерий()	
// }
// 4D

// 4D:ERP для Беларуси, Евгений, 09.12.2016 10:12:39  
 // М13, №13506
 // { 
 Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыМ13()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПеремещениеВЭксплуатацииТовары.Ссылка.Номер,
	               |	ПеремещениеВЭксплуатацииТовары.Ссылка.Ссылка,
	               |	ПеремещениеВЭксплуатацииТовары.Ссылка.Дата,
	               |	ПеремещениеВЭксплуатацииТовары.Ссылка.Организация,
	               |	ПеремещениеВЭксплуатацииТовары.Ссылка.Организация.НаименованиеПолное,
	               |	ПеремещениеВЭксплуатацииТовары.Ссылка.Организация.КодПоОКПО КАК КодОКПО,
	               |	ПеремещениеВЭксплуатацииТовары.Ссылка.ПодразделениеПолучатель,
	               |	ПеремещениеВЭксплуатацииТовары.ФизическоеЛицоПолучатель КАК СотрудникПолучатель,
	               |	ПеремещениеВЭксплуатацииТовары.ФизическоеЛицо КАК СотрудникОтправитель,
	               |	ПеремещениеВЭксплуатацииТовары.Ссылка.Подразделение КАК ПредставлениеПодразделения
	               |ИЗ
	               |	Документ.ПеремещениеВЭксплуатации.Товары КАК ПеремещениеВЭксплуатацииТовары
	               |ГДЕ
	               |	ПеремещениеВЭксплуатацииТовары.Ссылка.Ссылка В(&МассивОбъектов)"; 
	
	Возврат ТекстЗапроса;

КонецФункции
 
// Функция формирует табличный документ унифицированной формы М13
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М13 (накладная на внутреннее перемещение материалов).
//
Функция ПечатьМ13(МассивОбъектов, ОбъектыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	ТабличныйДокумент.ПолеСверху         = 0;
	ТабличныйДокумент.ПолеСлева          = 0;
	ТабличныйДокумент.ПолеСнизу          = 0;
	ТабличныйДокумент.ПолеСправа         = 0;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеМатериаловВЭксплуатации_М13";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыМ13();

	ДокументыДляПечати = Запрос.Выполнить().Выбрать();

	ПервыйДокумент = Истина;

	Пока ДокументыДляПечати.Следующий() Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеВЭксплуатации.ПФ_MXL_М13");

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ДокументыДляПечати.Организация, ДокументыДляПечати.Дата);

		ШапкаТаблицы     = Макет.ПолучитьОбласть("Шапка");
		Подвал           = Макет.ПолучитьОбласть("Подвал");

		ШапкаТаблицы.Параметры.Заполнить(ДокументыДляПечати);
		ШапкаТаблицы.Параметры.ПредставлениеОрганизации   = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		ШапкаТаблицы.Параметры.НомерДокумента             = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокументыДляПечати.Номер);
		ШапкаТаблицы.Параметры.ПредставлениеПодразделения = ДокументыДляПечати.ПредставлениеПодразделения;
        ШапкаТаблицы.Параметры.ДатаСоставления                 = Формат(ДокументыДляПечати.Дата, "ДЛФ=D");
		ТабличныйДокумент.Вывести(ШапкаТаблицы);

		// Инициализация номера страницы
		НомерСтраницы = 1;

		// Выводим многострочную часть документа
		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент",                   ДокументыДляПечати.Ссылка);
		ЗапросПоТоварам.УстановитьПараметр("ДатаДокумента",                     ДокументыДляПечати.Дата);
		
		ЗапросПоТоварам.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК МатериалНаименование,
		|	ВложенныйЗапрос.Номенклатура.Код КАК НоменклатурныйНомер,
		|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.Количество КАК КоличествоОтправлено,
		|	ВложенныйЗапрос.Количество КАК КоличествоПринято,
		|	ЕСТЬNULL(ВложенныйЗапрос.Стоимость, 0) КАК Стоимость
		|ИЗ
		|	(ВЫБРАТЬ
		|		Товары.Номенклатура КАК Номенклатура,
		|		СУММА(Товары.Количество) КАК Количество,
		|		СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Стоимость
		|	ИЗ
		|		Документ.ПеремещениеВЭксплуатации.Товары КАК Товары
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаДокумента, &ДатаДокумента, Регистратор = &ТекущийДокумент, , ) КАК ХозрасчетныйДвиженияССубконто
		|			ПО Товары.ФизическоеЛицо = ХозрасчетныйДвиженияССубконто.СубконтоКт3
		|				И Товары.ПартияТМЦВЭксплуатации = ХозрасчетныйДвиженияССубконто.СубконтоКт2
		|				И Товары.Номенклатура = ХозрасчетныйДвиженияССубконто.СубконтоКт1
		|	ГДЕ
		|		Товары.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Товары.Номенклатура) КАК ВложенныйЗапрос";
		
		ВыборкаПоСтрокам = ЗапросПоТоварам.Выполнить().Выбрать();
		ОбщийИтог = 0;

		Пока ВыборкаПоСтрокам.Следующий() Цикл

			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(ВыборкаПоСтрокам);
			
			Цена = ?(ВыборкаПоСтрокам.КоличествоОтправлено = 0, 0, ВыборкаПоСтрокам.Стоимость / ВыборкаПоСтрокам.КоличествоОтправлено);
			Область.Параметры.КоличествоПринято = ВыборкаПоСтрокам.КоличествоПринято;
			ОкругленнаяЦена  =  Окр(Цена,0) ;
			Область.Параметры.Цена  = ?((Цена - ОкругленнаяЦена = 0),Формат(Цена,"ЧЦ=15; ЧДЦ=0"),Цена);
			Область.Параметры.Стоимость =  ВыборкаПоСтрокам.Стоимость;//Сумма;
			
			ОбщийИтог =  ВыборкаПоСтрокам.Стоимость + ОбщийИтог;
			ТабличныйДокумент.Вывести(Область);

		КонецЦикла;

		Область = Макет.ПолучитьОбласть("Подвал");
	
		Область.Параметры.ОтправительФИО      = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДокументыДляПечати.СотрудникОтправитель);
		Область.Параметры.ПолучательФИО       = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДокументыДляПечати.СотрудникПолучатель);
		
		ТабличныйДокумент.Вывести(Область);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,НомерСтрокиНачало, ОбъектыПечати, ДокументыДляПечати.Ссылка);
		
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции // ПечатьДокумента()
// }
// 4D

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// 4D:ERP для Беларуси, ВладимирР, 21.09.2015 14:30:43 
	// Учет бланков строгой отчетности, №10038
	// {
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяБСО";
	КомандаПечати.Представление = НСтр("ru = 'Приходно-расходная накладная БСО'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	// }
	// 4D
	
	// 4D:ERP для Беларуси, Яна, 02.12.2015 15:17:30 
	// Печатные формы по спецодежде, № 10070
	// {
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПеремещениеМатериалов";
	КомандаПечати.Представление = НСтр("ru = 'Перемещение материалов в эксплуатации'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	// }
	// 4D
	
	 // 4D:ERP для Беларуси, Евгений, 09.12.2016 10:09:09  
	// М13, №13506
	// {
	// Накладная на внутреннее перемещение материалов (М-13)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М13";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на внутреннее перемещение материалов (М-13)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	// }
	// 4D
			
КонецПроцедуры

#КонецОбласти

#КонецЕсли