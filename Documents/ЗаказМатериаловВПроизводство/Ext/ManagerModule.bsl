#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий.
// 
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Склад, Дата";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказМатериаловВПроизводство";
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПередачаВПроизводствоОтгрузка);
	
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения	 - Структура - состав полей определяется значением
//  поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа
// 
// Возвращаемое значение:
//  ДокументСсылка.ЗаказМатериаловВПроизводство - Ссылка на распоряжение.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия,
	|	Товары.Отменено,
	|	Товары.ВариантОбеспечения,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = &Склад)
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Добавляет команду для ввода на основании.
//
// Параметры:
//  КомандыСоздатьНаОсновании	 - ТаблицаЗначений	 - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - Содержит описание добавленной команды.
//
Функция ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	СписокКоманд = Новый Массив;
	
	Команда = Документы.ЗаказНаПеремещение.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СписокКоманд.Добавить(Команда);
	
	Команда = Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СписокКоманд.Добавить(Команда);
	
	//++ НЕ УТКА
	Команда = Документы.ЗаказНаПроизводство.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СписокКоманд.Добавить(Команда);
	//-- НЕ УТКА
	
	Команда = Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СписокКоманд.Добавить(Команда);
	
	Команда = ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	СписокКоманд.Добавить(Команда);
	
	Команда = Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСоздатьНаОсновании);
	СписокКоманд.Добавить(Команда);
	
	//++ НЕ УТ
	Команда = Обработки.ФормированиеЗаказовНаПередачуВПроизводствоНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СписокКоманд.Добавить(Команда);
	//-- НЕ УТ
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	//++ НЕ УТКА
	ИспользуетсяПроизводство22 = НастройкиПроизводства.ИспользуетсяПроизводство22;
	//-- НЕ УТКА
	ИспользуетсяПроизводство21 = НастройкиПроизводства.ИспользуетсяПроизводство21;
	
	//++ НЕ УТКА
	Если ИспользуетсяПроизводство22 И ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
		
		Если ИспользуетсяПроизводство21 Тогда
			КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Передача материалов в кладовую (производство 2.2)'");
		Иначе
			КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Передача материалов в кладовую'");
		КонецЕсли;
		
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
		КомандаСоздатьНаОсновании.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьПередачуМатериаловВКладовуюНаОсновании";
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПередачаМатериаловВПроизводство)
		//++ НЕ УТКА
		И (Не ИспользуетсяПроизводство22 Или ИспользуетсяПроизводство21)
		//-- НЕ УТКА
		Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ПередачаМатериаловВПроизводство.ПолноеИмя();
		
		ПредставлениеДокумента = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ПередачаМатериаловВПроизводство);
		//++ НЕ УТКА
		Если ИспользуетсяПроизводство22 Тогда
			Шаблон = НСтр("ru = '%1 (производство 2.1)'");
			Шаблон = СтрШаблон(Шаблон, ПредставлениеДокумента);
			КомандаСоздатьНаОсновании.Представление = Шаблон;
		Иначе
		//-- НЕ УТКА
			КомандаСоздатьНаОсновании.Представление = ПредставлениеДокумента;
		//++ НЕ УТКА
		КонецЕсли;
		//-- НЕ УТКА
		
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
		//++ НЕ УТКА
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством";
		//-- НЕ УТКА
		
		КомандаСоздатьНаОсновании.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		
		КомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип("ДокументСсылка.ЗаказМатериаловВПроизводство"));
		КомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		//++ НЕ УТКА
		КомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
		КомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип("ДокументСсылка.ЗаказДавальца"));
		КомандаСоздатьНаОсновании.ТипыОбъектовСозданияНаОсновании.Добавить(Тип("ДокументСсылка.ПоступлениеСырьяОтДавальца"));
		//-- НЕ УТКА
		
		//++ НЕ УТКА
		КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьПередачуМатериаловВПроизводствоНаОсновании";
		//-- НЕ УТКА
		
	КонецЕсли;
	
	Команда = Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	СписокКоманд.Добавить(Команда);
	
	Возврат СписокКоманд;
	
КонецФункции

// Добавляет команду для ввода на основании.
//
// Параметры:
//  КомандыСоздатьНаОсновании	 - ТаблицаЗначений	 - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - Содержит описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказМатериаловВПроизводство) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ЗаказМатериаловВПроизводство.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ЗаказМатериаловВПроизводство);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;

КонецПроцедуры

// Определяет есть ли у пользователя права на добавление документа.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть право добавления.
//
Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказМатериаловВПроизводство);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

// Формирует структуру для создания внутреннего потребления по одному или нескольким заказам на внутреннее потребление.
//
// Параметры:
//  МассивСсылок		 - Массив	 - заказы на внутреннее потребление, по которым необходимо ввести внутреннее потребление товаров.
//  ТекстПредупреждения	 - Строка	 - строка, в которую будет помещено сообщение поясняющее почему нельзя оформить документ.
// 
// Возвращаемое значение:
//  Структура - структура, в которую будут помещены реквизиты шапки из массива заказов.
//
Функция ПараметрыОформленияПередачиМатериаловВПроизводство(МассивСсылок, ТекстПредупреждения) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(Заказ.Организация)                        КАК Организация,
	|	МИНИМУМ(Заказ.Склад)                              КАК Склад,
	|	МИНИМУМ(Заказ.Подразделение)                      КАК Подразделение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.Организация)           КАК РазличныхОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.Склад)                 КАК РазличныхСкладов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.Подразделение)         КАК РазличныхПодразделений
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказ.Ссылка КАК Заказ,
	|	Заказ.Статус КАК Статус,
	|	(НЕ Заказ.Проведен) КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.Закрыт)
	|				ИЛИ Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.КВыполнению)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка В(&МассивСсылок)
	|	И ((НЕ Заказ.Проведен)
	|			ИЛИ Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.КВыполнению)
	|				И Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.Закрыт))");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаРеквизитыШапки = РезультатЗапроса[0].Выбрать();
	ВыборкаРеквизитыШапки.Следующий();
	
	Отказ = Ложь;
	
	ШаблонСообщения = НСтр("ru='У выделенных заказов отличается поле ""%ПредставлениеПоля%""'");
	ТекстСообщения = "";
	
	Если ВыборкаРеквизитыШапки.РазличныхОрганизаций > 1 Тогда
		ТекстСообщения = ТекстСообщения
							+ ?(ТекстСообщения = "", "", Символы.ПС)
							+ СтрЗаменить(ШаблонСообщения, "%ПредставлениеПоля%", НСтр("ru='""Организация""'"));
		
		Отказ = Истина;
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.РазличныхСкладов > 1 Тогда
		ТекстСообщения = ТекстСообщения
							+ ?(ТекстСообщения = "", "", Символы.ПС)
							+ СтрЗаменить(ШаблонСообщения, "%ПредставлениеПоля%", НСтр("ru='""Склад""'"));
		
		Отказ = Истина;
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.РазличныхПодразделений > 1 Тогда
		ТекстСообщения = ТекстСообщения
							+ ?(ТекстСообщения = "", "", Символы.ПС)
							+ СтрЗаменить(ШаблонСообщения, "%ПредставлениеПоля%", НСтр("ru='""Подразделение""'"));
		
		Отказ = Истина;
	КонецЕсли;
	
	Если Не РезультатЗапроса[1].Пустой() Тогда
		
		ВыборкаЗаказы = РезультатЗапроса[1].Выбрать();
		
		Пока ВыборкаЗаказы.Следующий() Цикл
			
			Если ВыборкаЗаказы.ЕстьОшибкиПроведен Тогда
				
				ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаЗаказы.Заказ);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					,
					,
					Отказ);
				
			ИначеЕсли ВыборкаЗаказы.ЕстьОшибкиСтатус Тогда
				
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусах ""К выполнению"", ""Закрыт"".'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаЗаказы.Заказ);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%",   ВыборкаЗаказы.Статус);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					,
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		ТекстПредупреждения = НСтр("ru='Невозможно оформить передачу материалов на основании выбранных заказов.'")
								+ Символы.ПС + ТекстСообщения;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("Организация",           ВыборкаРеквизитыШапки.Организация);
	ПараметрыОформления.Вставить("Склад",                 ВыборкаРеквизитыШапки.Склад);
	ПараметрыОформления.Вставить("Подразделение",         ВыборкаРеквизитыШапки.Подразделение);
	
	Возврат ПараметрыОформления;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовМатериаловВПроизводство[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")  Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.Распоряжение КАК Распоряжение
		|ПОМЕСТИТЬ
		|	втОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(, Распоряжение В (&МассивДокументов)) КАК Остатки
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Распоряжение
		|;
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР
		|		КОГДА втОстаткиПоЗаказам.Распоряжение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказМатериаловВПроизводство КАК ТаблицаДокументов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	втОстаткиПоЗаказам
		|ПО
		|	ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.Распоряжение
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
	
	Иначе
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказМатериаловВПроизводство КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ выполнен не полностью'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
// 
// Возвращаемое значение:
//	Структура - Структура параметров отчета.
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИницициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка", 2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка", 3);
	СтруктураСостояние.Вставить("ЭтоЗаказ", Истина);
	СтруктураСостояние.Вставить("СкладВШапке", Истина);
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка", НСтр("ru = 'Материал'"));
	
	СтруктураСостояние.Вставить("ИмяПоляДатаОтгрузки", "НачалоОтгрузки");
	
	Возврат СтруктураСостояние
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция СоздатьПередачуМатериаловВПроизводствоПроверкаОснований(ОбъектыОснований, УправлениеПроизводством2_2) Экспорт
	
	РезультатПроверки = Новый Структура("ОбъектыОснований, ТекстОшибки");
	
	НастройкиПроизводства = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	Если ОбъектыОснований.Количество() = 0
		Или УправлениеПроизводством2_2 И Не НастройкиПроизводства.ИспользуетсяПроизводство21
		Или Не УправлениеПроизводством2_2 И Не НастройкиПроизводства.ИспользуетсяПроизводство22 Тогда
		
		РезультатПроверки.ОбъектыОснований = ОбъектыОснований;
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	// Требуется проверка.
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивСсылок", ОбъектыОснований);
	Запрос.УстановитьПараметр("УправлениеПроизводством2_2", УправлениеПроизводством2_2);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказМатериаловВПроизводство.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство КАК ЗаказМатериаловВПроизводство
	|ГДЕ
	|	ЗаказМатериаловВПроизводство.Ссылка В(&МассивСсылок)
	|	И ЗаказМатериаловВПроизводство.УправлениеПроизводством2_2 = &УправлениеПроизводством2_2";
	
	РезультатПроверки.ОбъектыОснований = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если РезультатПроверки.ОбъектыОснований.Количество() = 0 Тогда
		
		Если ОбъектыОснований.Количество() = 1 Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для данного документа'");
		Иначе
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для выбранных документов'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

#Область Обеспечение

Функция ТекстЗапросаТоварыДокумента(Отбор) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка                           КАК Распоряжение,
	|	Таблица.Номенклатура                     КАК Номенклатура,
	|	Таблица.Характеристика                   КАК Характеристика,
	|	ДанныеУчета.Назначение                   КАК Назначение,
	|	ДанныеУчета.НазначениеОтправителя        КАК НазначениеОтправителя,
	|	Таблица.КодСтроки                        КАК КодСтроки,
	|	Таблица.Серия                            КАК Серия,
	|	Таблица.Количество                       КАК Количество,
	|	Таблица.Упаковка                         КАК Упаковка,
	|	Таблица.НачалоОтгрузки                   КАК ДатаОтгрузки,
	|	Таблица.Отменено                         КАК Отменено,
	|	Таблица.СтатусУказанияСерий              КАК СтатусУказанияСерий,
	|	Таблица.ВариантОбеспечения               КАК ВариантОбеспечения,
	|	Таблица.ГруппаПродукции                  КАК ГруппаПродукции,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0)     КАК КОформлению,
	|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)        КАК Заказано
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК Таблица
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
	|	ПО Таблица.Ссылка = ДанныеУчета.Распоряжение
	|		И Таблица.КодСтроки = ДанныеУчета.КодСтроки
	|	
	|ГДЕ
	|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
	|//&Отбор";
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТекстОтбора = "";
		
		Для Каждого КлючЗначение Из Отбор Цикл
			
			Ключ = КлючЗначение.Ключ;
			
			Если Ключ = "Ссылка" Тогда
				Ключ = "Таблица.Ссылка";
			КонецЕсли;
			
			ТекстОтбора = 
				ТекстОтбора
				+ " И "
				+ Ключ
				+ " В(&"
				+ КлючЗначение.Значение
				+ ")";
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", ТекстОтбора);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Используется для получения данных из заказов на внутреннее потребление, используемых в обработке "Состояние обеспечения заказов".
//Аналогичные функции объявлены в модулях менеджеров всех типов заказов и учитывают структуру хранения данных документа.
//
//Возвращаемое значение:
// Строка - Текст запроса - Текст запроса для выборки данных:
//                          1) источнике данных о потребности:
//                          - "Заказ", "КодСтроки", "НомерСтроки",
//                          2) аналитики потребности:
//                          - "Номенклатура", "Характеристика", "Склад", "Назначение", "Подразделение",
//                          3) текущем варианте обеспечения:
//                          - "ВариантОбеспечения", "ДатаОтгрузки", "Количество",
//                          4) общих для заказа параметрах обеспечения:
//                          - "ЖелаемаяДатаОтгрузки", "НеОтгружатьЧастями".
//                          5) реквизиты документа отображаемые в форме обработки состояния обеспечения":
//                          - "Упаковка", "Дата", "Статус", "СтатусИспользуется", "Дата".
//                          
//                          "Количество" - количество из заказа, по которому не оформлена накладная,
//                          поступает из таблицы "ВтРегистрЗаказыМатериаловВПроизводство", где предварительно рассчитывается
//                          по ресурсу "Заказано", регистра накопления "ЗаказыМатериаловВПроизводство".
//
Функция ТекстЗапросаЗаказовКОбеспечению() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка                      КАК Заказ,
	|	Т.КодСтроки                   КАК КодСтроки,
	|	Т.НомерСтроки                 КАК НомерСтроки,
	|	0                             КАК НомерСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО                  КАК Продукция,
	|	НЕОПРЕДЕЛЕНО                  КАК Этап,
	|	0                             КАК ЭтапПорядок,
	|	
	|	Т.Номенклатура                КАК Номенклатура,
	|	Т.Характеристика              КАК Характеристика,
	|	Т.Ссылка.Склад                КАК Склад,
	|	
	|	ВЫБОР КОГДА Т.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ТОГДА Т.Назначение
	|		ИНАЧЕ Т.Ссылка.Назначение
	|	КОНЕЦ                         КАК Назначение,
	|	
	|	Т.Ссылка.Подразделение        КАК Подразделение,
	|	
	|	Т.ВариантОбеспечения          КАК ВариантОбеспечения,
	|	Т.НачалоОтгрузки              КАК ДатаОтгрузки,
	|	Т.Упаковка                    КАК Упаковка,
	|	
	|	ДанныеУчета.Количество        КАК Количество,
	|	
	|	Т.Ссылка.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	Т.Ссылка.НеОтгружатьЧастями   КАК НеОтгружатьЧастями,
	|	Т.Ссылка.Дата                 КАК Дата,
	|	НЕОПРЕДЕЛЕНО                  КАК Партнер,
	|	Т.Ссылка.Статус               КАК Статус,
	|	ИСТИНА                        КАК СтатусИспользуется
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистрЗаказыМатериаловВПроизводство КАК ДанныеУчета
	|		ПО Т.Ссылка    = ДанныеУчета.Заказ
	|		 И Т.КодСтроки = ДанныеУчета.КодСтроки
	|	
	|ГДЕ
	|	Т.Ссылка.Проведен
	|	И Т.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
	|
	|{ГДЕ
	|	Т.Ссылка.*          КАК Заказ,
	|	Т.Ссылка.Склад.*    КАК Склад,
	|	Т.Ссылка.Ответственный.* КАК Менеджер}";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет наличие признака НеОтгружатьЧастями
// 
// Возвращаемое значение:
//  Булево - Истина, если есть реквизит НеОтгружатьЧастями.
//
Функция ЕстьНеОтгружатьЧастями() Экспорт
	Возврат Истина;
КонецФункции

// Определяет параматры выбора вариантов обеспечения.
//
// Параметры:
//  Статус	 - ПеречислениеСсылка.СтатусыЗаказовМатериаловВПроизводство - Статус документа.
// 
// Возвращаемое значение:
//  Структура - Содержит параметры выбора обеспечения.
//
Функция ПараметрыВыбораОбеспечения(Статус) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяТабличнойЧасти", "Товары"); 
	Параметры.Вставить("СтатусКВыполнению", Истина); 
	Параметры.Вставить("ИмяМенеджераРегистра", "ЗаказыМатериаловВПроизводство");
	Параметры.Вставить("ПутиКДанным", Новый Соответствие());
	Параметры.ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "НачалоОтгрузки");
	Параметры.ПутиКДанным.Вставить("ДатаОтгрузки", "НачалоОтгрузки");
	
	Возврат Параметры;
	
КонецФункции

// Создает в менеджере временных таблиц таблицы обособленной и необособленной потребности по табличной части документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер
//	Заказ - ДокументСсылка.ЗаказМатериаловВПроизводство - документ, по которому создаются таблицы
//
Процедура ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Номенклатура            КАК Номенклатура,
	|	Заказы.Характеристика          КАК Характеристика,
	|	Заказы.Склад                   КАК Склад,
	|	Заказы.Подразделение           КАК Подразделение,
	|	Заказы.НазначениеОтправителя   КАК Назначение,
	|	СУММА(Заказы.ЗаказаноОстаток)  КАК Заказано,
	|	МАКСИМУМ(Товары.Упаковка)      КАК Упаковка1,
	|	МИНИМУМ(Товары.Упаковка)       КАК Упаковка2,
	|	МАКСИМУМ(Товары.НомерСтроки)   КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНоменклатураЗаказаОбособленная
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(, Распоряжение = &Заказ) КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство.Товары КАК Товары
	|		ПО Заказы.Распоряжение = Товары.Ссылка
	|			И Заказы.КодСтроки = Товары.КодСтроки
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.Склад,
	|	Заказы.Подразделение,
	|	Заказы.НазначениеОтправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура    КАК Номенклатура,
	|	Товары.Характеристика  КАК Характеристика,
	|	Товары.Склад           КАК Склад,
	|	Товары.Подразделение   КАК Подразделение,
	|	Товары.Назначение      КАК Назначение,
	|	Товары.Заказано        КАК Заказано,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка1 <> Товары.Упаковка2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ Товары.Упаковка1
	|	КОНЕЦ КАК Упаковка,
	|	Товары.НомерСтроки     КАК НомерСтроки
	|ПОМЕСТИТЬ НоменклатураЗаказаОбособленная
	|ИЗ
	|	ВТНоменклатураЗаказаОбособленная КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Ссылка.Склад          КАК Склад,
	|	Товары.Ссылка.Подразделение  КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	СУММА(Товары.Количество)     КАК Заказано,
	|	Товары.Упаковка              КАК Упаковка,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	|	Товары.Серия                 КАК Серия
	|ПОМЕСТИТЬ НоменклатураЗаказаНеОбособленная
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК Товары
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И Товары.Ссылка = &Заказ
	|	И НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Ссылка.Склад,
	|	Товары.Ссылка.Подразделение,
	|	Товары.Серия,
	|	Товары.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.Выполнить();
	
КонецПроцедуры

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
// 
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.ДавальческиеМатериалы2_2 = "ЛОЖЬ";
	ШаблонНазначения.ДавальческаяПродукция2_2 = "ЛОЖЬ";
	ШаблонНазначения.УсловиеИспользования = "Объект.УправлениеПроизводством2_2 = ЛОЖЬ";
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.Давальческое2_1          = "ЛОЖЬ";
	ШаблонНазначения.ДавальческаяПродукция2_2 = "ЛОЖЬ";
	ШаблонНазначения.УсловиеИспользования = "Объект.УправлениеПроизводством2_2";
	
	// Остатки товаров на складе-отправителе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение", "Отправитель");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Склад";
	
	// Потребности в товарах в цеховой кладовой.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение", "Получатель");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.УправлениеПроизводством2_2";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.ЦеховаяКладовая";
	
	// Потребности в товарах на складе-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "Объект.Товары.Назначение", "ВсеСклады");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.УправлениеПроизводством2_2";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	
	Возврат МакетФормы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	ТекстыЗапроса = Новый СписокЗначений;
	ПолноеИмяДокумента = "Документ.ЗаказМатериаловВПроизводство";
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("Получатель",
		"ВЫБОР КОГДА ДанныеШапки.Ссылка.УправлениеПроизводством2_2 
		|		ТОГДА ДанныеШапки.Ссылка.ЦеховаяКладовая
		|		ИНАЧЕ ДанныеШапки.Ссылка.Подразделение
		|	КОНЕЦ");
	
	Если ИмяРегистра = "СвободныеОстатки" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ЗаказыМатериаловВПроизводство" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Неопределено, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ПереопределениеРасчетаПараметров.Получатель = СтрЗаменить(ПереопределениеРасчетаПараметров.Получатель, "ДанныеШапки", СинонимТаблицыДокумента);
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);

	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);

	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыМатериаловСУчетомКорректировок(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	
	// Исполнение запроса и выгрузка полученных таблиц для движений.
	ПроведениеСерверУТ.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);

КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Склад КАК Склад,
	|	ДанныеШапки.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеШапки.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеШапки.Подразделение) КАК ПодразделениеПредставление,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.УправлениеПроизводством2_2
	|			ТОГДА ДанныеШапки.ЦеховаяКладовая
	|		ИНАЧЕ ДанныеШапки.Подразделение
	|	КОНЕЦ КАК Получатель,
	|	ДанныеШапки.Статус КАК Статус,
	|	ДанныеШапки.Назначение КАК Назначение,
	|	ДанныеШапки.УправлениеПроизводством2_2 КАК УправлениеПроизводством2_2,
	|	ЕСТЬNULL(ДанныеШапки.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) КАК ДвиженияПоСкладскимРегистрам,
	|	ДанныеШапки.Ответственный КАК Ответственный,
	|	ДанныеШапки.Комментарий КАК Комментарий,
	|	ДанныеШапки.Проведен КАК Проведен,
	|	ДанныеШапки.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеШапки.Номер КАК Номер
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	Запрос.УстановитьПараметр("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	
	ИнформацияПоПодразделению = "";
	Если ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
		ИнформацияПоПодразделению = НСтр("ru='Передача в ""%Подразделение""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоПодразделению = СтрЗаменить(ИнформацияПоПодразделению, "%Подразделение", Реквизиты.ПодразделениеПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоПодразделению", ИнформацияПоПодразделению);
	
	ИнформацияПоСкладу = "";
	Если ЗначениеЗаполнено(Реквизиты.Склад) Тогда
		ИнформацияПоСкладу = НСтр("ru='Передача с ""%Склад""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоСкладу = СтрЗаменить(ИнформацияПоСкладу, "%Склад", Реквизиты.СкладПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоСкладу", ИнформацияПоСкладу);
		
КонецПроцедуры

Функция ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки            КАК НомерСтроки,
	|	ТаблицаТовары.НачалоОтгрузки         КАК Период,
	|	ТаблицаТовары.НачалоОтгрузки         КАК ДатаОтгрузки,
	|	
	|	ТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ТаблицаТовары.Характеристика         КАК Характеристика,
	|	&Склад                               КАК Склад,
	|	
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|						&Назначение
	|					ИНАЧЕ
	|						ТаблицаТовары.Назначение
	|				КОНЕЦ
	|	КОНЕЦ КАК Назначение,
	|	
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
	|			ТаблицаТовары.Количество
	|	КОНЕЦ КАК КоличествоИзЗаказов,
	|	
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|				ТаблицаТовары.Количество
	|	КОНЕЦ КАК КоличествоПодЗаказ,
	|	
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
	|			ТаблицаТовары.Количество
	|	КОНЕЦ КАК КоличествоНеобеспечено
	|	
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	//Резервирование товаров
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВРезервеСоСклада,
	|	0                                      КАК ВРезервеПодЗаказ,
	|	0                                      КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И (ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Отгрузка товаров
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	0                                      КАК ВРезервеСоСклада,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                              КАК ВРезервеПодЗаказ,
	|
	|	ТаблицаТовары.Количество               КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
		//Поступление на "Склад-получатель"
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Получатель                            КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Назначение               КАК Назначение,
		|	0                                      КАК Потребность,
		|	-ТаблицаТовары.Количество              КАК КЗаказу,
		|	0                                      КАК НаличиеПодЗаказ
		|ИЗ
		|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|	И &УправлениеПроизводством2_2
		|	И НЕ ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Формирование потребности
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	ТаблицаТовары.Ссылка.Склад             КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ВЫБОР КОГДА 
		|		ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|			&Назначение
		|	ИНАЧЕ ТаблицаТовары.Назначение КОНЕЦ   КАК Назначение,

		|	ТаблицаТовары.Количество               КАК Потребность,
		|	ТаблицаТовары.Количество               КАК КЗаказу,
		|	0                                      КАК НаличиеПодЗаказ
		|
		|ИЗ
		|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Закрытие потребности
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	ТаблицаТовары.Ссылка.Склад             КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ВЫБОР КОГДА 
		|		ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|			&Назначение
		|	ИНАЧЕ ТаблицаТовары.Назначение КОНЕЦ   КАК Назначение,
		|	ТаблицаТовары.Количество               КАК Потребность,
		|	0                                      КАК КЗаказу,
		|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ
		|
		|ИЗ
		|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
		|
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.Закрыт))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.НачалоОтгрузки           КАК Период,
	|	&Склад                                 КАК Склад,
	|	&Получатель                            КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК ВРезерве,
	|	0                                      КАК КОтгрузке,
	|	0                                      КАК КОформлению
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И (ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.КОбеспечению)
	|			И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.НачалоОтгрузки           КАК Период,
	|	&Склад                                 КАК Склад,
	|	&Получатель                            КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|						ВЫБОР КОГДА &ДвиженияПоСкладскимРегистрам ТОГДА 
	|								&Назначение 
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) 
	|						КОНЕЦ
	|					КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) ТОГДА
	|						ТаблицаТовары.Назначение
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	0                                      КАК ВРезерве,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.КВыполнению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.Закрыт))
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ЗаказыМатериаловВПроизводство";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	&Ссылка                                  КАК Распоряжение,
	|	&Склад                                   КАК Склад,
	|	&Подразделение                           КАК Подразделение,
	|	&Получатель                              КАК Получатель,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	ТаблицаТовары.Характеристика             КАК Характеристика,
	|	ТаблицаТовары.Серия                      КАК Серия,
	|
	|	ТаблицаТовары.Назначение                 КАК Назначение,
	|
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВариантОбеспечения = Значение(Перечисление.ВариантыОбеспечения.Отгрузить)
	|				ТОГДА Значение(Справочник.Назначения.ПустаяСсылка)
	|		КОГДА ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|				И ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА &Назначение
	|		ИНАЧЕ
	|			ТаблицаТовары.Назначение
	|	КОНЕЦ КАК НазначениеОтправителя,
	|
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ТаблицаТовары.Количество КАК Заказано,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|			ТОГДА ТаблицаТовары.Количество
	|	КОНЕЦ КАК ВРезерве,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.КВыполнению),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.Закрыт))
	|			ТОГДА ТаблицаТовары.Количество
	|	КОНЕЦ КАК КОформлению
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (НЕ ТаблицаТовары.Отменено)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЗаказыМатериаловСУчетомКорректировок(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ЗаказыМатериаловСУчетомКорректировок";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                   КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)                КАК Период,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&Ссылка                                     КАК Распоряжение,
	|	ТаблицаТовары.КодСтроки                     КАК КодСтрокиРаспоряжения,
	|	ТаблицаТовары.ВариантОбеспечения            КАК ВариантОбеспечения,
	|	ТаблицаТовары.НачалоОтгрузки                КАК ДатаПотребности,
	|	ТаблицаТовары.КодСтроки                     КАК КодСтроки,
	|	ТаблицаТовары.Отменено                      КАК Отменено,
	|	ТаблицаТовары.Серия                         КАК Серия,
	|	&Склад                                      КАК Склад,
	|	ТаблицаТовары.Упаковка                      КАК Упаковка,
	|	ТаблицаТовары.Номенклатура                  КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|				И ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			&Назначение
	|		ИНАЧЕ
	|			ТаблицаТовары.Назначение
	|	КОНЕЦ                                       КАК Назначение,
	|	ТаблицаТовары.Количество                    КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок            КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &УправлениеПроизводством2_2
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки            КАК НомерСтроки,
	|	ТаблицаТовары.ОкончаниеПоступления   КАК Период,
	|	ТаблицаТовары.Ссылка                 КАК Распоряжение,
	|	&Получатель                          КАК Склад,
	|	ТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ТаблицаТовары.Характеристика         КАК Характеристика,
	|	ТаблицаТовары.Назначение             КАК Назначение,
	|	
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Количество
	|	КОНЕЦ                                КАК ПланируемоеПоступление,
	|	
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Количество
	|	КОНЕЦ                                КАК ПланируемоеПоступлениеПодЗаказ,
	|	
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Количество
	|	КОНЕЦ                                КАК ПланируемоеПоступлениеСНеподтвержденными,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Количество
	|	КОНЕЦ                                КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
	|	
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &УправлениеПроизводством2_2
	|	И НЕ ТаблицаТовары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРеестрДокументов.ТипСсылки                          КАК ТипСсылки,
	|	ТаблицаРеестрДокументов.Организация                        КАК Организация,
	|	ТаблицаРеестрДокументов.ХозяйственнаяОперация              КАК ХозяйственнаяОперация,
	|	ТаблицаРеестрДокументов.Партнер                            КАК Партнер,
	|	ТаблицаРеестрДокументов.Контрагент                         КАК Контрагент,
	|	ТаблицаРеестрДокументов.НаправлениеДеятельности            КАК НаправлениеДеятельности,
	|	МИНИМУМ(ТаблицаРеестрДокументов.ДополнительнаяЗапись)      КАК ДополнительнаяЗапись,
	|	ТаблицаРеестрДокументов.Подразделение                      КАК Подразделение,
	|	ТаблицаРеестрДокументов.МестоХранения                      КАК МестоХранения,
	|	ТаблицаРеестрДокументов.ДатаДокументаИБ                    КАК ДатаДокументаИБ,
	|	ТаблицаРеестрДокументов.Ссылка                             КАК Ссылка,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.НомерДокументаИБ)         КАК НомерДокументаИБ,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Ответственный)            КАК Ответственный,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Комментарий)              КАК Комментарий,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Валюта)                   КАК Валюта,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Сумма)                    КАК Сумма,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Статус)                   КАК Статус,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Проведен)                 КАК Проведен,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.ПометкаУдаления)          КАК ПометкаУдаления,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Дополнительно)            КАК Дополнительно,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.ДатаПервичногоДокумента)  КАК ДатаПервичногоДокумента,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.НомерПервичногоДокумента) КАК НомерПервичногоДокумента
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Ссылка                                       КАК Ссылка,
	|		&Период                                       КАК ДатаДокументаИБ,
	|		&Номер                                        КАК НомерДокументаИБ,
	|		&ИдентификаторМетаданных                      КАК ТипСсылки,
	|		&Организация                                  КАК Организация,
	|		&ХозяйственнаяОперация                        КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)    КАК Партнер,
	|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыДокумента.Назначение.НаправлениеДеятельности) = 1
	|				ТОГДА МАКСИМУМ(ТоварыДокумента.Назначение.НаправлениеДеятельности)
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ                                         КАК НаправлениеДеятельности,
	|		&Склад                                        КАК МестоХранения,
	|		&Подразделение                                КАК Подразделение,
	|		&Ответственный                                КАК Ответственный,
	|		ВЫРАЗИТЬ(&Комментарий КАК СТРОКА (100))       КАК Комментарий,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)      КАК Валюта,
	|		0                                             КАК Сумма,
	|		&Статус                                       КАК Статус,
	|		&Проведен                                     КАК Проведен,
	|		&ПометкаУдаления                              КАК ПометкаУдаления,
	|		ЛОЖЬ                                          КАК ДополнительнаяЗапись,
	|		ВЫРАЗИТЬ(&ИнформацияПоПодразделению КАК СТРОКА (100)) КАК Дополнительно,
	|		&Период                                       КАК ДатаПервичногоДокумента,
	|		&НомерНаПечать                                КАК НомерПервичногоДокумента
	|	ИЗ
	|		Документ.ЗаказМатериаловВПроизводство КАК ДанныеДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство.Товары КАК ТоварыДокумента
	|			ПО ДанныеДокумента.Ссылка = ТоварыДокумента.Ссылка
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Ссылка,
	|		&Период,
	|		&Номер,
	|		&ИдентификаторМетаданных,
	|		&Организация,
	|		&ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыДокумента.Назначение.НаправлениеДеятельности) = 1
	|				ТОГДА МАКСИМУМ(ТоварыДокумента.Назначение.НаправлениеДеятельности)
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		&Подразделение,
	|		&Подразделение,
	|		&Ответственный,
	|		ВЫРАЗИТЬ(&Комментарий КАК СТРОКА (100)),
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
	|		0,
	|		&Статус,
	|		&Проведен,
	|		&ПометкаУдаления,
	|		ИСТИНА,
	|		ВЫРАЗИТЬ(&ИнформацияПоСкладу КАК СТРОКА (100)),
	|		&Период,
	|		&НомерНаПечать
	|	ИЗ
	|		Документ.ЗаказМатериаловВПроизводство КАК ДанныеДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство.Товары КАК ТоварыДокумента
	|			ПО ДанныеДокумента.Ссылка = ТоварыДокумента.Ссылка
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка) КАК ТаблицаРеестрДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРеестрДокументов.ТипСсылки,
	|	ТаблицаРеестрДокументов.Организация,
	|	ТаблицаРеестрДокументов.ХозяйственнаяОперация,
	|	ТаблицаРеестрДокументов.Партнер,
	|	ТаблицаРеестрДокументов.Контрагент,
	|	ТаблицаРеестрДокументов.НаправлениеДеятельности,
	|	ТаблицаРеестрДокументов.Подразделение,
	|	ТаблицаРеестрДокументов.МестоХранения,
	|	ТаблицаРеестрДокументов.ДатаДокументаИБ,
	|	ТаблицаРеестрДокументов.Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Заполняет вариант обеспечения в строках табличной части.
// Вызывается при выборе варианта обеспечения.
//
Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	ЭтоВыборОбеспеченияСУчетомСерий = Операция = "СтрокаТовары"
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	СтруктураДействий = Новый Структура;
	Если Форма <> Неопределено Тогда
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено, ЭтоПроизводство", Ложь, Истина));
	КонецЕсли;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");

	ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДатаСеанса()), Объект.ЖелаемаяДатаОтгрузки);

	ЗаполнитьДатыОтгрузки = Ложь;
	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	
	ТребуетсяСвертка = ОбеспечениеСервер.СдвинутьДатуОтгрузкиКЖелаемой(
		ДанныеЗаполнения,
		Объект.ЖелаемаяДатаОтгрузки,
		Не Объект.УправлениеПроизводством2_2 И Объект.НеОтгружатьЧастями);
	
	ОбеспечениеСервер.СвернутьСтрокиДляОтгрузкиОднойДатой(
		ДанныеЗаполнения,
		Объект.УправлениеПроизводством2_2 Или Не Объект.НеОтгружатьЧастями,
		Операция = "СтрокаТовары",
		Не ТребуетсяСвертка);
	
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
		
		//Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда
			
			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.Товары[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);
			
		Иначе
			ТекСтрокаТовары = Объект.Товары.Вставить(Объект.Товары.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;
		
		//Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
		
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения");
		ТекСтрокаТовары.НачалоОтгрузки = СтрокаОбеспечения.ДатаОтгрузки;
		ТекСтрокаТовары.ОкончаниеПоступления = ТекСтрокаТовары.НачалоОтгрузки + Объект.ДлительностьПеремещения * 86400; //86400 - длительность суток
		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
		КонецЕсли;
		
		Если Не Объект.УправлениеПроизводством2_2 И Объект.НеОтгружатьЧастями Тогда
			ДатаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			Если Операция = "Заказ" Или Операция = "ИндексыСтрок"
				Или ДатаПоУмолчанию > Объект.ДатаОтгрузки И СтрокаОбеспечения.Отгружено = 0 Тогда
				Объект.ДатаОтгрузки = ДатаПоУмолчанию;
				ЗаполнитьДатыОтгрузки = Истина;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
	Если ЗаполнитьДатыОтгрузки Тогда
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "НачалоОтгрузки", Объект.ДатаОтгрузки);
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ОкончаниеПоступления", Объект.ДатаОтгрузки +  Объект.ДлительностьПеремещения * 86400);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказМатериаловВПроизводство);
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(ПараметрыУказанияСерий);
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);
	
КонецФункции

#КонецОбласти

#Область КорректировкаЗаказа

Функция ТекстЗапросаТаблицыДокументаДляКорректировки() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Поля необходимые для алгоритмов
	|	ТаблицаТовары.Ссылка         КАК Ссылка,
	|	ТаблицаТовары.Ссылка         КАК Заказ,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия          КАК Серия,
	|	ТаблицаТовары.Ссылка.Склад   КАК Склад,
	|	ТаблицаТовары.КодСтроки      КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|						ВЫБОР КОГДА ТаблицаТовары.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам ТОГДА
	|								ТаблицаТовары.Ссылка.Назначение
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) 
	|						КОНЕЦ
	|					КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) ТОГДА
	|						ТаблицаТовары.Назначение
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                    КАК Назначение,
	|	ТаблицаТовары.Количество     КАК Заказано,
	|	ТаблицаТовары.Количество     КАК Количество,
	|	ИСТИНА                       КАК ЭтоОтгрузка,
	// Поля для обеспечения сохранности данных
	|	Упаковка,
	|	КоличествоУпаковок,
	|	НачалоОтгрузки,
	|	Отменено,
	|	СтатусУказанияСерий,
	|	ВариантОбеспечения,
	|	ГруппаПродукции
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&Распоряжения)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	
	Возврат "Документ.ЗаказМатериаловВПроизводство";
	
КонецФункции

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство КАК Операция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство.Товары КАК Строки
	|		ПО Операция.Ссылка = Строки.Ссылка
	|ГДЕ
	|	НЕ Операция.ПометкаУдаления
	|	И Операция.Проведен
	|	И НЕ Операция.ИспользоватьДлительностьПеремещения
	|	И Операция.ДлительностьПеремещения = 0
	|	И Операция.УправлениеПроизводством2_2
	|	И Строки.ОкончаниеПоступления = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказМатериаловВПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство КАК ЗаказМатериаловВПроизводство
	|ГДЕ
	|	ЗаказМатериаловВПроизводство.УправлениеПроизводством2_2
	|	И ЗаказМатериаловВПроизводство.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Документы.ЗаказМатериаловВПроизводство;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта(), МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеВыборки.Ссылка                                                  КАК Ссылка,
	|	МАКСИМУМ(ДанныеВыборки.ВерсияДанных)                                  КАК ВерсияДанных,
	|	МАКСИМУМ(ДанныеВыборки.НеобходимоОбновитьКолонкуОкончаниеПоступления) КАК НеобходимоОбновитьКолонкуОкончаниеПоступления,
	|	МАКСИМУМ(ДанныеВыборки.НеобходимоОбновитьОперациюДокумента)           КАК НеобходимоОбновитьОперациюДокумента
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбъектыДляОбработки.Ссылка              КАК Ссылка,
	|		ОбъектыДляОбработки.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|		ВЫБОР КОГДА
	|			НЕ ОбъектыДляОбработки.Ссылка.ПометкаУдаления
	|				И ОбъектыДляОбработки.Ссылка.Проведен
	|				И НЕ ОбъектыДляОбработки.Ссылка.ИспользоватьДлительностьПеремещения
	|				И ОбъектыДляОбработки.Ссылка.ДлительностьПеремещения = 0
	|				И ОбъектыДляОбработки.Ссылка.УправлениеПроизводством2_2
	|				И ЕСТЬNULL(Строки.ОкончаниеПоступления, НЕОПРЕДЕЛЕНО) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА
	|					ИСТИНА
	|				ИНАЧЕ
	|					ЛОЖЬ
	|			КОНЕЦ                               КАК НеобходимоОбновитьКолонкуОкончаниеПоступления,
	|		ВЫБОР КОГДА
	|			ОбъектыДляОбработки.Ссылка.УправлениеПроизводством2_2
	|				И ОбъектыДляОбработки.Ссылка.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)
	|				ТОГДА
	|					ИСТИНА
	|				ИНАЧЕ
	|					ЛОЖЬ
	|			КОНЕЦ                               КАК НеобходимоОбновитьОперациюДокумента
	|	ИЗ
	|		&ВТДокументыДляОбработки КАК ОбъектыДляОбработки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство.Товары КАК Строки
	|			ПО ОбъектыДляОбработки.Ссылка = Строки.Ссылка) КАК ДанныеВыборки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВыборки.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта());
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДвижениеТоваров.НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать ""%1"" по причине: ""%2""'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				Выборка.Ссылка,
				ТекстСообщения);
			
			Продолжить;
		КонецПопытки;
		
		ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
		
		Если ДокументОбъект = Неопределено Тогда
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		ОбъектИзменен = Ложь;
		
		Если Выборка.НеобходимоОбновитьКолонкуОкончаниеПоступления Тогда
			ДокументОбъект.Товары.ЗагрузитьКолонку(ДокументОбъект.Товары.ВыгрузитьКолонку("НачалоОтгрузки"), "ОкончаниеПоступления");
			ОбъектИзменен = Истина;
		КонецЕсли;
		
		Если Выборка.НеобходимоОбновитьОперациюДокумента Тогда
			ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;
			ОбъектИзменен = Истина;
		КонецЕсли;
		
		ОбработаноОбъектов = ОбработаноОбъектов + 1;
		
		Попытка
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Запись);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов - 1;
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = НСтр("ru = 'Не удалось обновить данные документа ""%1"" по причине: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				Выборка.Ссылка,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выполнено обновление данных некоторых заказов материалов в производство (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
