#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовМатериаловВПроизводство[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ОтменаНеотработанныхСтрок") Тогда
			
			КоличествоСтрок = ОтменитьНепоставленныеСтроки(Статус <> Перечисления.СтатусыЗаказовМатериаловВПроизводство.КОбеспечению);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказМатериаловВПроизводство);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
 	Перем РеквизитыШапки;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НачалоОтгрузки");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ОкончаниеПоступления");
	Если УправлениеПроизводством2_2 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ЦеховаяКладовая");
	КонецЕсли;
	
	ПроверитьРеквизитыШапки(Отказ);
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ВсеСтрокиОтменены = Истина;
	ВсеСтрокиОтмененыНеТребуется = Истина;
	ВариантНеТребуется = Перечисления.ВариантыОбеспечения.НеТребуется;
	Для Каждого СтрокаТаблицы Из Товары Цикл
		ВсеСтрокиОтменены = ВсеСтрокиОтменены И СтрокаТаблицы.Отменено;
		ВсеСтрокиОтмененыНеТребуется = ВсеСтрокиОтмененыНеТребуется
			И (СтрокаТаблицы.Отменено Или СтрокаТаблицы.ВариантОбеспечения = ВариантНеТребуется);
	КонецЦикла;
	
	Если УправлениеПроизводством2_2
		Или Не НеОтгружатьЧастями
		Или НеОтгружатьЧастями И ВсеСтрокиОтмененыНеТребуется Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
		
	КонецЕсли;
	
	Если ВсеСтрокиОтменены Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		
	КонецЕсли;
	
	// Желаемая дата отгрузки в шапке должна быть не меньше даты документа
	Если Не УправлениеПроизводством2_2
		И ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки)
		И ЖелаемаяДатаОтгрузки < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаОтгрузки",
			,
			Отказ);
		
	КонецЕсли;
	
	// Желаемая дата поступления в шапке должна быть не меньше даты документа
	Если УправлениеПроизводством2_2
		И ЗначениеЗаполнено(ЖелаемаяДатаПоступления)
		И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;
	
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если Не УправлениеПроизводством2_2
		И НеОтгружатьЧастями И 
		ЗначениеЗаполнено(ДатаОтгрузки) И 
		ДатаОтгрузки < НачалоДня(Дата)
		И Не ВсеСтрокиОтмененыНеТребуется Тогда
		
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаОтгрузки",
			,
			Отказ);
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ из Товары Цикл
		
		АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);
		
		Если (Не НеОтгружатьЧастями Или УправлениеПроизводством2_2)
			И СтрокаТЧ.ВариантОбеспечения <> ВариантНеТребуется
			И Не СтрокаТЧ.Отменено
			И Не ЗначениеЗаполнено(СтрокаТЧ.НачалоОтгрузки) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата отгрузки"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "НачалоОтгрузки"),
				,
				Отказ);
			
		КонецЕсли;
		
		// Дата отгрузки в тч Товары должна быть не меньше даты документа
		Если (Не НеОтгружатьЧастями Или УправлениеПроизводством2_2)
			И ЗначениеЗаполнено(СтрокаТЧ.НачалоОтгрузки)
			И СтрокаТЧ.НачалоОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа ""%Дата%"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "НачалоОтгрузки"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если УправлениеПроизводством2_2 И ИспользоватьДлительностьПеремещения И НЕ СтрокаТЧ.Отменено И НЕ ЗначениеЗаполнено(СтрокаТЧ.ОкончаниеПоступления) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Окончание поступления""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ОкончаниеПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если УправлениеПроизводством2_2 И ИспользоватьДлительностьПеремещения И ЗначениеЗаполнено(СтрокаТЧ.НачалоОтгрузки) И ЗначениеЗаполнено(СтрокаТЧ.ОкончаниеПоступления) И СтрокаТЧ.НачалоОтгрузки > СтрокаТЧ.ОкончаниеПоступления Тогда
			
			ТекстОшибки = НСтр("ru='Дата окончания поступления меньше даты начала отгрузки'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ОкончаниеПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если УправлениеПроизводством2_2 И ЗначениеЗаполнено(СтрокаТЧ.НачалоОтгрузки) И СтрокаТЧ.НачалоОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата начала отгрузки должна быть не меньше даты документа ""%Дата%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "НачалоОтгрузки"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если УправлениеПроизводством2_2 И ИспользоватьДлительностьПеремещения И ЗначениеЗаполнено(СтрокаТЧ.ОкончаниеПоступления) И СтрокаТЧ.ОкончаниеПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата окончания поступления должна быть не меньше даты документа ""%Дата%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ОкончаниеПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказМатериаловВПроизводство),
		Отказ,
		МассивНепроверяемыхРеквизитов);
		
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВПроизводство Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если УправлениеПроизводством2_2 И Не ИспользоватьДлительностьПеремещения Тогда
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("НачалоОтгрузки"), "ОкончаниеПоступления");
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	Если УправлениеПроизводством2_2 И ЗначениеЗаполнено(ЦеховаяКладовая) Тогда
		Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЦеховаяКладовая, "Подразделение");
	КонецЕсли;
	
	Если УправлениеПроизводством2_2 Тогда
		НеОтгружатьЧастями = Ложь;
	Иначе
		Если Не НеОтгружатьЧастями Тогда
			
			НоваяДатаОтгрузки = Дата(1, 1, 1);
			
			Если Товары.Количество() > 0 Тогда
				
				СтрокиКОбеспечению = Товары.НайтиСтроки(Новый Структура("Отменено", Ложь));
				
				Если СтрокиКОбеспечению.Количество() > 0 Тогда
					
					ТаблицаСтрокКОбеспечению = Товары.Выгрузить(СтрокиКОбеспечению, "НачалоОтгрузки");
					ТаблицаСтрокКОбеспечению.Сортировать("НачалоОтгрузки Возр");
					НоваяДатаОтгрузки = ТаблицаСтрокКОбеспечению[0].НачалоОтгрузки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДатаОтгрузки = НоваяДатаОтгрузки;
		Иначе
			ОбеспечениеСервер.ЗаполнитьДатыОтгрузкиВТаблице(ДатаОтгрузки, Товары, "НачалоОтгрузки");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		
		Обособленно          = Перечисления.ВариантыОбеспечения.Обособленно;
		ОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
		ТребуетсяНазначение = Ложь;
		
		Для Каждого Строка Из Товары Цикл
			Если Не ЗначениеЗаполнено(Строка.Назначение)
				И (Строка.ВариантОбеспечения = Обособленно 
					Или Строка.ВариантОбеспечения = ОтгрузитьОбособленно) Тогда
				ТребуетсяНазначение = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяНазначение Тогда 
			Назначение = Справочники.Назначения.ПолучитьСсылку();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	Справочники.Назначения.СоздатьОбновитьНазначение(Ссылка, Назначение, Подразделение, Номер, Дата, ПометкаУдаления);
	
	// При отмене проведения или установке пометки на удаление проведенного документа необходим вызов пересчета состояний, для удаления записи по текущему документу
	// из регистра сведений СостоянияВнутреннихЗаказов. Корректный пересчет состояния возможен в том случае, когда у документа уже установлен (записан) признак Проведен = Ложь
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЖелаемаяДатаОтгрузки = Дата(1, 1, 1);
	
	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	МаксимальныйКодСтроки = 0;
	Назначение = Неопределено;
	ДокументОснование = Неопределено;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	Для каждого СтрокаТовары из Товары Цикл
		СтрокаТовары.НачалоОтгрузки = Дата(1, 1, 1);
		СтрокаТовары.Отменено = Ложь;
		СтрокаТовары.КодСтроки = 0;
		СтрокаТовары.Назначение = Неопределено;
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЗаказМатериаловВПроизводство.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыМатериаловВПроизводство(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыМатериаловСУчетомКорректировок(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И НЕ ДанныеЗаполнения.Свойство("Организация") Тогда	
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И НЕ ДанныеЗаполнения.Свойство("Склад") Тогда	
		Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И НЕ ДанныеЗаполнения.Свойство("Подразделение") Тогда	
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	КонецЕсли; 
	
	Если Не (ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("РеквизитыШапки")
		И ДанныеЗаполнения.РеквизитыШапки.Свойство("НеЗаполнятьВариантОбеспеченияПоУмолчанию")) Тогда
		ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Товары);
		Для каждого ДанныеСтроки Из Товары Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки.Назначение) Тогда
				ДанныеСтроки.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ НЕ ДанныеЗаполнения.Свойство("РеквизитыШапки") 
		ИЛИ НЕ ДанныеЗаполнения.РеквизитыШапки.Свойство("УправлениеПроизводством2_2") Тогда
		
		УправлениеПроизводством2_2 = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	КонецЕсли;
	
	Если УправлениеПроизводством2_2 Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;
	КонецЕсли;
	
	Если УправлениеПроизводством2_2 Тогда
		ЦеховаяКладовая = ЗначениеНастроекПовтИсп.ПолучитьЦеховуюКладовуюПоУмолчанию(Подразделение, ЦеховаяКладовая);
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.Свойство("РеквизитыШапки") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Товары") Тогда
		ЗаполнитьТоварыПоТаблице(ДанныеЗаполнения.Товары);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоТаблице(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяСтрока = Истина;
	
	НачалоОтгрузки = Дата(1, 1, 1, 0, 0, 0);
	ОкончаниеПоступления = Дата(1, 1, 1, 0, 0, 0);
	Длительность = 0;
	ОбщаяДлительность = Истина;
	ОтгрузкаИПоступлениеОднойДатой = Истина;
	
	Для Каждого СтрокаДанныхЗаполнения Из ДанныеЗаполнения Цикл
		
		Строка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДанныхЗаполнения);
		
		Если ПерваяСтрока Тогда
			
			ПерваяСтрока = Ложь;
			
			НачалоОтгрузки = НачалоДня(Строка.НачалоОтгрузки);
			ОкончаниеПоступления = НачалоДня(Строка.ОкончаниеПоступления);
			Длительность = Цел((ОкончаниеПоступления - НачалоОтгрузки) / 86400);
			ОбщаяДлительность = Истина;
			ОтгрузкаИПоступлениеОднойДатой = (НачалоОтгрузки = ОкончаниеПоступления);
			
		Иначе
			
			Если ОтгрузкаИПоступлениеОднойДатой
				И (НачалоДня(Строка.НачалоОтгрузки) <> НачалоДня(Строка.ОкончаниеПоступления)) Тогда
				
				ОтгрузкаИПоступлениеОднойДатой = Ложь;
				
			КонецЕсли;
			
			Если ОбщаяДлительность
				И Длительность <> Цел((НачалоДня(Строка.ОкончаниеПоступления) - НачалоДня(Строка.НачалоОтгрузки)) / 86400) Тогда
				
				ОбщаяДлительность = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИспользоватьДлительностьПеремещения = Не ОтгрузкаИПоступлениеОднойДатой;
	Если ИспользоватьДлительностьПеремещения И ОбщаяДлительность Тогда
		ДлительностьПеремещения = Длительность;
	Иначе
		ДлительностьПеремещения = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	
	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		
		Массив.Добавить(Движения.ЗаказыМатериаловВПроизводство);
		
	КонецЕсли;
	
	// Контроль выполняется при перепроведении, отмене проведения или если используются серии, чтобы проверить возможность резервирования серий
	Если Не ДополнительныеСвойства.ЭтоНовый
		Или НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказМатериаловВПроизводство).ИспользоватьСерииНоменклатуры Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ГрафикОтгрузкиТоваров);
		
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция ОтменитьНепоставленныеСтроки(Знач ПроверятьОстатки = Ложь)
	
	КоличествоОтмененныхСтрок = 0;
	СвойстваОтмененнойСтроки = Новый Структура("Отменено, СтатусУказанияСерий", Истина, 0);
	
	Если Не ПроверятьОстатки Тогда
		
		Для каждого СтрокаТовары из Товары Цикл
			
			Если Не СтрокаТовары.Отменено Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТовары, СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат КоличествоОтмененныхСтрок;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено,
	|	ВЫРАЗИТЬ(ТаблицаТовары.ВариантОбеспечения КАК Перечисление.ВариантыОбеспечения) КАК ВариантОбеспечения
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отменено = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	Остатки.КОформлениюОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество = Остатки.КОформлениюОстаток
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазбитьСтроку
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(, Распоряжение = &Заказ) КАК Остатки
	|		ПО ТаблицаТовары.КодСтроки = Остатки.КодСтроки
	|			И (Остатки.КОформлениюОстаток > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                       КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки                         КАК КодСтроки,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество                        КАК Количество,
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ВЫРАЗИТЬ(&Заказ КАК Документ.ЗаказМатериаловВПроизводство).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовМатериаловВПроизводство.КОбеспечению)
	|	ИЛИ ТаблицаТовары.ВариантОбеспечения НЕ В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.Серия КАК Серия,
	|	СУММА(ТоварыКОтгрузке.КОтгрузке + ТоварыКОтгрузке.Собирается + ТоварыКОтгрузке.Собрано) КАК Количество,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Назначение КАК Назначение,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|	КОНЕЦ КАК ВариантОбеспечения
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = ТоварыКОтгрузке.Склад)
	|			И (ПолитикиУчетаСерий.Ссылка = ТоварыКОтгрузке.Номенклатура.ВидНоменклатуры)
	|			И (НЕ ПолитикиУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УчетСебестоимостиПоСериям))
	|ГДЕ
	|	ТоварыКОтгрузке.ДокументОтгрузки = &Заказ
	|	И ТоварыКОтгрузке.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И ТоварыКОтгрузке.Регистратор <> &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Назначение,
	|	ТоварыКОтгрузке.Склад");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить(, "НомерСтроки, КодСтроки, Упаковка, Количество, Отменено, ВариантОбеспечения"));
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	Если ПакетРезультатов[1].Пустой() Тогда
		
		Возврат КоличествоОтмененныхСтрок;
		
	КонецЕсли;
	
	Выборка = ПакетРезультатов[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = Товары[Выборка.НомерСтроки - 1];
		
		Если Выборка.РазбитьСтроку Тогда
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
			
			НоваяСтрока.КодСтроки = 0;
			
			Строка.Количество = Выборка.Количество - Выборка.КОтгрузкеОстаток;
			Строка.КоличествоУпаковок = (Выборка.Количество - Выборка.КОтгрузкеОстаток) / Выборка.КоэффициентУпаковки;
			
			НоваяСтрока.Количество = Выборка.КОтгрузкеОстаток;
			НоваяСтрока.КоличествоУпаковок = Выборка.КОтгрузкеОстаток / Выборка.КоэффициентУпаковки;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
			
		КонецЕсли;
		
		КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

Процедура ПроверитьРеквизитыШапки(Отказ)
	
	Если УправлениеПроизводством2_2 Тогда
		
		Если Склад = ЦеховаяКладовая И ЗначениеЗаполнено(Склад) Тогда
			
			ТекстСообщения = НСтр("ru = 'Склад и цеховая кладовая должны быть разными'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Склад",, Отказ); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область КорректировкаЗаказа

// Корректирует строки, по которым не была оформлено поступление или складские ордера или имеются расхождения по мерным товарам.
//
// Параметры:
// 		СтруктураПараметров - Структура - Структура параметров корректировки, конструктор: ЗаказыСервер.ПолучитьСтруктуруКорректировкиСтрокЗаказа()
//
// Возвращаемое значение:
// 		Структура
// 		*	КоличествоСтрок - Количество отмененных/скорректированных строк
// 		*	СуммаОтклонения - Сумма увеличения заказа из-за превышения отгрузки мерных товаров
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	СкорректированоСтрок = 0;
	
	Распоряжения = Новый Массив();
	Распоряжения.Добавить(Ссылка);
	
	Запрос = Новый Запрос();
	Запрос.Текст = Документы.ЗаказМатериаловВПроизводство.ТекстЗапросаТаблицыДокументаДляКорректировки();
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары        = РезультатЗапроса.Выгрузить();
	
	Если СтруктураПараметров.СкорректироватьМерныеТовары Тогда
		ПараметрыЗаполнения = ЗаказыСервер.ПолучитьСтруктуруКорректировкиСтрокЗаказа();
		ПараметрыЗаполнения.ЗаполнениеПоПоступлению                 = Ложь;
		ПараметрыЗаполнения.КорректироватьПриемкуВПлюсНеограниченно = Ложь;
		ПараметрыЗаполнения.ИмяРегистраЗаказов                      = "ЗаказыМатериаловВПроизводство";
		ПараметрыЗаполнения.ИмяДокумента                            = "ЗаказМатериаловВПроизводство";
		ПараметрыЗаполнения.ИмяТабличнойЧасти                       = "Товары";
		
		СкорректированоСтрок = СкорректированоСтрок +
			ЗаказыСервер.СкорректироватьОтгрузкуПриемку(Ссылка, ТаблицаТовары, ПараметрыЗаполнения);
	КонецЕсли;
	
	ЗаказыСервер.ПеренестиИзмененияВТаблицуПоИндексу(ТаблицаТовары, Товары, "Количество", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, Неопределено);
	
	РезультатОтмены = ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(СкорректированоСтрок, Ложь);
	
	Возврат РезультатОтмены;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
