#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	СтатусДоИзменения = Статус;
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПроизводственныхОпераций[НовыйСтатус];
	Статус = ЗначениеНовогоСтатуса;
	
	Документы.ПроизводственнаяОперация2_2.ЗаполнитьРеквизитыПриУстановкиСтатуса(ЭтотОбъект);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Заполняет документ по данным НСИ (технологическая операция и ее маршрутная карта)
//
Процедура ЗаполнитьПоОперацииМаршрутнойКарты() Экспорт
	
	ОчиститьТабличныеЧасти();
	
	ДанныеОперации = ДанныеОперацииМаршрутнойКарты();
	
	ВариантНаладки = ДанныеОперации.ВариантНаладки;
	
	РассчитатьВремяВыполнения(ДанныеОперации);
	
	МаршрутнаяКарта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция, "Владелец");
	Настройки = Документы.ПроизводственнаяОперация2_2.НастройкиУчета(
		Подразделение, МаршрутнаяКарта);
	
	Если Настройки.ИспользоватьВыходныеИзделия Тогда
		
		Для каждого Строка Из ДанныеОперации.ВыходныеИзделия Цикл
			ЗаполнитьЗначенияСвойств(ВыходныеИзделия.Добавить(), Строка);
		КонецЦикла;
		Для каждого Строка Из ДанныеОперации.ВозвратныеОтходы Цикл
			ЗаполнитьЗначенияСвойств(ВыходныеИзделия.Добавить(), Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Настройки.ИспользоватьМатериалы Тогда
		
		ЗаполнитьМатериалыПоМаршрутнойКарте(ДанныеОперации.Материалы);
		
	КонецЕсли;
	
	Для каждого Строка Из ДанныеОперации.Трудозатраты Цикл
		ЗаполнитьЗначенияСвойств(Трудозатраты.Добавить(), Строка);
	КонецЦикла;
	
	Документы.ПроизводственнаяОперация2_2.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("КлючОперации") Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.КлючОперации);
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("СпособЗаполнения")
			И ДанныеЗаполнения.СпособЗаполнения = "ЗаполнитьПоОперации" Тогда
			
			ЗаполнитьПоОперацииМаршрутнойКарты();
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Статус")
			И Статус <> Метаданные().Реквизиты.Статус.ЗначениеЗаполнения Тогда
			
			Документы.ПроизводственнаяОперация2_2.ЗаполнитьРеквизитыПриУстановкиСтатуса(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоУмолчанию(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПроверитьЗаполнениеРеквизитовШапки(Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеНоменклатуры(Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеХарактеристик(Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеСерий(Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеКоличества(Отказ, МассивНепроверяемыхРеквизитов);
	ПроверитьЗаполнениеБригад(Отказ, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОчиститьНеИспользуемыеДанные();
	
	ЗарегистрироватьОбновлениеСвязанныхДанных();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСвязанныеДанные(Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ПроизводственнаяОперация2_2.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДокумента

Функция ДанныеОперацииМаршрутнойКарты()
	
	КоэффициентПересчета = КоэффициентПересчетаНормативовОперации();
	
	Если ЗначениеЗаполнено(Этап) Тогда
		ОсновноеИзделие = Документы.ЭтапПроизводства2_2.ОсновноеИзделиеЦепочкиЭтапов(Этап);
		Номенклатура = ОсновноеИзделие.Номенклатура;
		Характеристика = ОсновноеИзделие.Характеристика;
	Иначе
		Номенклатура = Неопределено;
		Характеристика = Неопределено;
	КонецЕсли;
	
	Результат = Справочники.МаршрутныеКарты.ДанныеОперацииМаршрутнойКарты(
		Операция, КоэффициентПересчета, Номенклатура, Характеристика);
	
	Возврат Результат;
	
КонецФункции

Функция КоэффициентПересчетаНормативовОперации()
	
	Если ЗначениеЗаполнено(Количество) Тогда
		
		КоличествоОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Операция, "Количество");
		
		Если ЗначениеЗаполнено(КоличествоОперация) Тогда
			Результат = Количество/КоличествоОперация;
		Иначе
			Результат = 1;
		КонецЕсли;
		
	Иначе
		
		Результат = 1;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьВремяВыполнения(ДанныеОперацииМаршрутнойКарты)
	
	СтруктураРасчета = ОперативныйУчетПроизводстваКлиентСервер.СтруктураРасчетаОбщегоВремениВыполнения();
	ЗаполнитьЗначенияСвойств(СтруктураРасчета, ДанныеОперацииМаршрутнойКарты);
	
	КоэффициентПересчета = КоэффициентПересчетаНормативовОперации();
	
	ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
		СтруктураРасчета, КоэффициентПересчета);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРасчета, "ВремяВыполнения, ВремяВыполненияЕдИзм");
	
КонецПроцедуры

Процедура ЗаполнитьМатериалыПоМаршрутнойКарте(МатериалыМаршрутнойКарты)
	
	Для каждого Строка Из МатериалыМаршрутнойКарты Цикл
		ЗаполнитьЗначенияСвойств(МатериалыИРаботы.Добавить(), Строка);
	КонецЦикла;
	
	МатериалыЭтапа = Документы.ЭтапПроизводства2_2.ОстаткиОбеспечиваемыхМатериалов(Этап, "Характеристика");
	МатериалыЭтапа.Индексы.Добавить("Номенклатура, Характеристика");
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	КэшированныеЗначения = Неопределено;
	
	Для Индекс = 0 По МатериалыИРаботы.Количество()-1 Цикл
		
		Строка = МатериалыИРаботы[Индекс];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		НайденныеСтроки = МатериалыЭтапа.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ОтметитьСтрокаМатериалаОтсутствуетВЭтапе(Строка);
			
		Иначе
			
			СтрокаМатериалЭтапа = НайденныеСтроки[0];
			
			Если СтрокаМатериалЭтапа.Количество = Строка.Количество Тогда
				
				МатериалыЭтапа.Удалить(СтрокаМатериалЭтапа);
				
			ИначеЕсли СтрокаМатериалЭтапа.Количество > Строка.Количество Тогда
				
				СтрокаМатериалЭтапа.Количество = СтрокаМатериалЭтапа.Количество - Строка.Количество;
				
			Иначе
				
				КоличествоНедостача = Строка.Количество - СтрокаМатериалЭтапа.Количество;
				
				Строка.Количество = СтрокаМатериалЭтапа.Количество;
				ПересчитатьКоличествоУпаковок(Строка, КэшированныеЗначения);
				
				НоваяСтрока = МатериалыИРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Количество = КоличествоНедостача;
				ПересчитатьКоличествоУпаковок(НоваяСтрока, КэшированныеЗначения);
				ОтметитьСтрокаМатериалаОтсутствуетВЭтапе(НоваяСтрока);
				
				МатериалыЭтапа.Удалить(СтрокаМатериалЭтапа);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьСтрокаМатериалаОтсутствуетВЭтапе(Строка)
	
	Строка.НоменклатураМаршрутнойКарты = Строка.Номенклатура;
	Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Строка.ХарактеристикаМаршрутнойКарты = Строка.Характеристика;
	Строка.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	Строка.УпаковкаМаршрутнойКарты = Строка.Упаковка;
	Строка.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	
КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковок(СтрокаТабличнойЧасти, КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоУмолчанию(ДанныеЗаполнения = Неопределено)
	
	Дата = ТекущаяДатаСеанса();
	Ответственный = Пользователи.ТекущийПользователь();
	
	ЗаполнитьНомер();
	
КонецПроцедуры

Процедура ОчиститьТабличныеЧасти()
	
	МатериалыИРаботы.Очистить();
	ВыходныеИзделия.Очистить();
	ВыходныеИзделияСерии.Очистить();
	Трудозатраты.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьЗаполнениеРеквизитовШапки(Отказ, МассивНепроверяемыхРеквизитов)
	
	МассивНепроверяемыхРеквизитов.Добавить("ДатаВыполнения");
	
	Если ОперацияЗавершена() И НЕ ЗначениеЗаполнено(ДатаВыполнения) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""%ПредставлениеПоля%"" не заполнено'");
		
		ТекстОшибки = СтрЗаменить(
			ТекстОшибки,
			"%ПредставлениеПоля%",
			Документы.ПроизводственнаяОперация2_2.ПредставлениеДатыВыполнения(Статус));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаВыполнения",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидРабочегоЦентра) Тогда
		
		ИспользуютсяВариантыНаладки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ВидРабочегоЦентра, "ИспользуютсяВариантыНаладки");
			
	Иначе
			
		ИспользуютсяВариантыНаладки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ИспользуютсяВариантыНаладки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВариантНаладки");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНоменклатуры(Отказ, МассивНепроверяемыхРеквизитов)
	
	Если ОперацияЗавершена() Тогда
		Возврат; // Стандартная проверка реквизитов
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИРаботы.Номенклатура");
	
	КлючДанных  = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	ПутьКДанным = "Объект";
	
	ШаблонОшибка = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %НомерСтроки% списка ""Материалы и работы""'");
	
	Для Каждого Строка Из МатериалыИРаботы Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура)
			И НЕ ЗначениеЗаполнено(Строка.НоменклатураМаршрутнойКарты) Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибка, "%НомерСтроки%", Строка(Строка.НомерСтроки));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИРаботы", Строка.НомерСтроки, "Номенклатура");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеХарактеристик(Отказ, МассивНепроверяемыхРеквизитов)
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "МатериалыИРаботы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "ВыходныеИзделия";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСерий(Отказ, МассивНепроверяемыхРеквизитов)
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПроизводственнаяОперация2_2);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект, ПараметрыУказанияСерий.МатериалыИРаботы, Отказ, МассивНепроверяемыхРеквизитов);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия, Отказ, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеКоличества(Отказ, МассивНепроверяемыхРеквизитов)
	
	УправлениеПроизводством.ПроверитьЗаполнениеКоличестваВТЧ(
		ЭтотОбъект, "МатериалыИРаботы", МассивНепроверяемыхРеквизитов, Отказ);
	
	УправлениеПроизводством.ПроверитьЗаполнениеКоличестваВТЧ(
		ЭтотОбъект, "ВыходныеИзделия", МассивНепроверяемыхРеквизитов, Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеБригад(Отказ, МассивНепроверяемыхРеквизитов)
	
	Если НЕ ОперацияЗавершена() Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.Бригада");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСвязанныхДанных

Функция ДанныеОперацииДоИзменения()
	
	СоставРеквизитов = 
		"Статус,
		|Проведен,
		|ПометкаУдаления,
		|РабочийЦентр,
		|ВремяВыполнения,
		|ВремяВыполненияЕдИзм,
		|Количество";
	
	ДанныеДоИзменения = Новый Структура(СоставРеквизитов);
	
	Если Не ЭтоНовый() Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ " + СоставРеквизитов + "
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеДоИзменения, Выборка);
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ДанныеДоИзменения, ЭтотОбъект);
		
	КонецЕсли;
	
	Возврат ДанныеДоИзменения;
	
КонецФункции

Процедура ОчиститьНеИспользуемыеДанные()
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПроизводственнаяОперация2_2);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.МатериалыИРаботы);
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеСвязанныхДанных()
	
	ДанныеДоИзменения = ДанныеОперацииДоИзменения();
 
	Если НеобходимоРасчитатьОчередьПроизводственныхОпераций(ДанныеДоИзменения) Тогда
		ДополнительныеСвойства.Вставить("РасчитатьОчередьПроизводственныхОпераций");
	КонецЕсли;
	
	Если НеобходимоОбновитьСостояниеОпераций(ДанныеДоИзменения) Тогда
		ДополнительныеСвойства.Вставить("ОбновитьСостояниеОпераций");
	КонецЕсли;
	
	Если НеобходимоОтразитьВыполнениеПроизводственныхОпераций(ДанныеДоИзменения) Тогда
		ДополнительныеСвойства.Вставить("ОтразитьВыполнениеПроизводственныхОпераций");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСвязанныеДанные(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("РасчитатьОчередьПроизводственныхОпераций") Тогда
		
		КлючОперации = УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации();
		ЗаполнитьЗначенияСвойств(КлючОперации, ЭтотОбъект);
		
		РегистрыСведений.ОчередьПроизводственныхОпераций.ПересчитатьОчередь(КлючОперации, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("ОбновитьСостояниеОпераций") Тогда
		
		РегистрыСведений.СостоянияЭтаповПроизводства.ОбновитьСостояниеОпераций(Этап);
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОтразитьВыполнениеПроизводственныхОпераций") Тогда
	
		НомерЗадания = РегистрыСведений.ЗаданияКЗаполнениюЭтаповПроизводства.ДобавитьЗадание(Этап);
		Если НомерЗадания < 0 Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		РегистрыСведений.ЗаданияКЗаполнениюЭтаповПроизводства.ЗапуститьЗаданиеКЗаполнениюЭтаповПроизводства(
			Этап, НомерЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимоРасчитатьОчередьПроизводственныхОпераций(ДанныеДоИзменения)
	
	Если ЭтоНовый() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеДоИзменения.Статус <> ЭтотОбъект.Статус
		ИЛИ ДанныеДоИзменения.ПометкаУдаления <> ЭтотОбъект.ПометкаУдаления
		ИЛИ ДанныеДоИзменения.РабочийЦентр <> ЭтотОбъект.РабочийЦентр 
		ИЛИ ДанныеДоИзменения.ВремяВыполнения <> ЭтотОбъект.ВремяВыполнения
		ИЛИ ДанныеДоИзменения.ВремяВыполненияЕдИзм <> ЭтотОбъект.ВремяВыполненияЕдИзм
		ИЛИ ДанныеДоИзменения.Количество <> ЭтотОбъект.Количество
		ИЛИ (ДанныеДоИзменения.Проведен
				И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
		ИЛИ (НЕ ДанныеДоИзменения.Проведен
				И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоОбновитьСостояниеОпераций(ДанныеДоИзменения)
	
	Если ЭтоНовый() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеДоИзменения.Статус <> ЭтотОбъект.Статус
		ИЛИ ДанныеДоИзменения.ПометкаУдаления <> ЭтотОбъект.ПометкаУдаления
		ИЛИ ДанныеДоИзменения.Количество <> ЭтотОбъект.Количество
		ИЛИ (ДанныеДоИзменения.Проведен
				И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
		ИЛИ (НЕ ДанныеДоИзменения.Проведен
				И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение)Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоОтразитьВыполнениеПроизводственныхОпераций(ДанныеДоИзменения)
	
	Возврат (
				Документы.ПроизводственнаяОперация2_2.ОперацияЗавершена(ЭтотОбъект.Статус)
				И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
			)
			ИЛИ
			(
				Документы.ПроизводственнаяОперация2_2.ОперацияЗавершена(ДанныеДоИзменения.Статус)
				И ДанныеДоИзменения.Проведен
			);
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ОперацияЗавершена()
	
	Возврат Документы.ПроизводственнаяОперация2_2.ОперацияЗавершена(Статус);
	
КонецФункции

Процедура ЗаполнитьНомер()
	
	Если ЗначениеЗаполнено(Номер)
		ИЛИ НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПроизводственнаяОперация2_2.НомерОперацииЭтапа) КАК НомерОперацииЭтапа
	|ПОМЕСТИТЬ ВТНомерОперацииЭтапа
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2 КАК ПроизводственнаяОперация2_2
	|ГДЕ
	|	ПроизводственнаяОперация2_2.Этап = &Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Номер КАК НомерЭтапа,
	|	ЕСТЬNULL(ВТНомерОперацииЭтапа.НомерОперацииЭтапа, 0) КАК НомерОперацииЭтапа
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНомерОперацииЭтапа КАК ВТНомерОперацииЭтапа
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЭтапПроизводства2_2.Ссылка = &Этап");
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	НомерОперацииЭтапа = Выборка.НомерОперацииЭтапа + 1;
	Номер = "" + Выборка.НомерЭтапа + "." + Формат(НомерОперацииЭтапа, "ЧГ=0");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
