// 4D:ERP для Беларуси
// {
// Форма изменена
// }
// 4D

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:40:32 
	// Справка о доходах физ лиц, №15288 
	// {
	
	ВнешниеДанные = Параметры.ВнешниеДанные;
	
	УставновитьСвойстваЭлементовПоИсточникуДанныхСправки();
	
	Если Не ФормаДополнена Тогда
		ДополнитьФорму();	
	КонецЕсли;	
	
	Если Параметры.Ключ = Документы.СправкаНДФЛ.ПустаяСсылка() Тогда
		
		Если ВнешниеДанные Тогда
		
			ПрочитатьДанныеСправкиИзВременногоХранилища(Параметры.АдресДанныхСправкиВХранилище);	
			
		Иначе
			
			ЗначенияДляЗаполнения = Новый Структура("Год, Организация, Ответственный", 
				"Объект.НалоговыйПериод",
				"Объект.Организация",
				"Объект.Ответственный");
				
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
			
			ПриПолученииДанныхНаСервере();
			
			Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				ЗаполнитьДанныеСправкиНаСервере();	
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.Телефон) Тогда 
				ЗаполнитьТелефонОрганизации();
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	УчетНДФЛФормы.СведенияОДоходахПриСозданииНаСервере(ЭтаФорма, "Объект.СведенияОДоходах.КодДохода", "СведенияОДоходахКодВычета", "СведенияОДоходахСуммаВычета");	
	
	УчетНДФЛФормы.СправкиНДФЛЗаполнитьСписокКонтролируемыхПолей(ЭтаФорма);
	
	УстановитьСписокВыбораМесяцевНалоговогоПериода();
	
	Элементы.ДоходыНалоги.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Видимость", Истина));
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "Печать".
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// }
	// 4D
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Не ФормаДополнена Тогда
		ДополнитьФорму();
	КонецЕсли;
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ"); 
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ВнешниеДанные Тогда
		ДокументПроведен = Объект.Проведен;
	КонецЕсли;
	
	ДанныеСправок = Новый Массив;
	ДанныеСправок.Добавить(Объект);
	
	ЗаполнитьСписокМесяцевНалоговогоПериода();
	УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьСвойстваЭлементовСФиксациейДанных(ЭтаФорма, Объект, ДокументПроведен);
	УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьИнфонадписьИсправления(ИнфоНадписьИсправления, Объект, ДокументПроведен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписьДокумента", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ВнешниеДанные Тогда
		Модифицированность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеДанныхФизическогоЛица" Тогда
		ПрочитатьДанныеФизическогоЛица(Источник);
		УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьПризнакНаличияГражданства(ЭтаФорма, Объект);
	ИначеЕсли ИмяСобытия = "ИзмененаРегистрацияВНалоговомОргане" Тогда
		УстановитьПредставлениеРегистрацииВНО();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПроверяемыеРеквизиты, "Объект");
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Не удалось провести документ.
								|При проверке заполнения были обнаружены ошибки.'");
		
		ЗарплатаКадрыОтображениеОшибок.ПослеПроверкиЗаполненияВФорме(
			ЭтотОбъект,
			ДокументОбъект,
			СоответствиеДанныхОбъектаДаннымФормы(),
			ОписаниеПодчиненностиДанных(),
			"Объект");
		
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗарплатаКадрыОтображениеОшибок.ПослеПроверкиЗаполненияВФорме(
			ЭтотОбъект,
			ДокументОбъект,
			СоответствиеДанныхОбъектаДаннымФормы(),
			ОписаниеПодчиненностиДанных(),
			"Объект");
	КонецЕсли;
	
КонецПроцедуры

// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
// Справка о доходах физ лиц, №15288 
// {
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьДанныеСправкиПоТаблицеДоходыНалоги();
КонецПроцедуры
// }
// 4D

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ"); 
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма, Объект.Сотрудник);
	УчетНДФЛФормы.СправкиНДФЛУстановитьКодИФНС(Объект.РегистрацияВНалоговомОргане, Объект.КодИФНС);
	ЗаполнитьДанныеСправкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	НалоговыйПериодПриИзмененииНаСервере();
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ"); 
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.НалоговыйПериод");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.Организация");
КонецПроцедуры

&НаКлиенте
Процедура СпособФормированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокФормированияСправкиОДоходахФизическогоЛица.ВРазрезеКодовОКАТО"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно"));
	
КонецПроцедуры

&НаКлиенте
Процедура СпособФормированияПриИзменении(Элемент)
	СпособФормированияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СпособФормированияПриИзмененииНаСервере()
	
	УстановитьДоступностьЭлементов(ЭтаФорма);
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма, Объект.Сотрудник);
	
	// Если формируем сводно, то регистрацию в налоговом органе установим от организации
	Если Объект.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно тогда
		Объект.РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Объект.Организация, Дата(Объект.НалоговыйПериод, 12, 31));
		УчетНДФЛФормы.СправкиНДФЛУстановитьПредставлениеРегистрацииВНО(ЭтотОбъект);
	КонецЕсли;
	УчетНДФЛФормы.СправкиНДФЛУстановитьКодИФНС(Объект.РегистрацияВНалоговомОргане, Объект.КодИФНС);
	ЗаполнитьДанныеСправкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НалоговыйПериодПриИзмененииНаСервере()
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:47:06 
	// Справка о доходах физ лиц, №15288
	// {
	УчетНДФЛФормы.СправкиНДФЛУстановитьЗаголовокПоляРегистрацияВНО(ЭтаФорма);
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма, Объект.Сотрудник);	

	ЗаполнитьДанныеСправкиНаСервере();
	// }
	// 4D
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма, Объект.Сотрудник);
	УчетНДФЛФормы.СправкиНДФЛУстановитьКодИФНС(Объект.РегистрацияВНалоговомОргане, Объект.КодИФНС);
	УстановитьИнофнадписьОписаниеДоходовОрганизации();
	
	Объект.СведенияОДоходах.Очистить();
	Объект.СведенияОВычетах.Очистить();
	
	УчетНДФЛФормы.СправкиНДФЛОчиститьДанныеСправки(Объект);
	
	ЗарплатаКадрыОтображениеОшибок.УдалитьОшибкиИзДанныхФормы(ЭтотОбъект);
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагиНаличияОшибок(ЭтотОбъект);
	
	ЗаполнитьТелефонОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(РегистрацияВНалоговомОрганеСписокВыбора);
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		ДанныеВыбора.Добавить("");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.РегистрацияВНалоговомОргане = ВыбранноеЗначение.Регистрация;
		РегистрацияВНОПредставление = ВыбранноеЗначение.Представление;
		
		РегистрацияВНалоговомОрганеПриИзмененииНаСервере();
		
		УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ");
		УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "РегистрацияВНОПредставление");
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияВНалоговомОрганеПриИзмененииНаСервере()
	
	УстановитьИнофнадписьОписаниеДоходовОрганизации();
	
	Если Не Объект.ФиксНалоги Тогда
		Объект.СведенияОДоходах.Очистить();
		Объект.СведенияОВычетах.Очистить();
		
		// 4D:ERP для Беларуси, Яна, 06.07.2017 17:49:55 
		// Справка о доходах физ лиц, №15288 
		// {		
		
		ДанныеСправок = Новый Массив;
		ДанныеСправок.Добавить(Объект);
		
		УчетНДФЛФормы.СправкиНДФЛПрочитатьДанные(ДанныеСправок,
												Объект.СведенияОДоходах,
												Объект.СведенияОВычетах,
				КонецДня(Объект.Дата),
												Объект.Организация,
												РегистрацияВНалоговомОргане(),
												Ложь,
												Не ДокументПроведен,
												НеВключатьДоходыПоЦеннымБумагам);
		
		ЗаполнитьТаблицуДоходыНалоги(Объект);
				
		ОчиститьРеквизитыХраненияОшибокДанныхОНалогах();
	КонецЕсли;
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьКодИФНС(Объект.РегистрацияВНалоговомОргане, Объект.КодИФНС);
	// }
	// 4D
	
КонецПроцедуры

&НаКлиенте
Процедура КодИФНСПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.КодИФНС");
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеОткрытие(Элемент, СтандартнаяОбработка)
	УчетНДФЛКлиент.СправкиНДФЛРегистрацияВНалоговомОрганеОткрытие(ЭтаФорма, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ"); 
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.Сотрудник");
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	УчетНДФЛФормы.СправкиНДФЛОчиститьДанныеСправки(Объект);
	ЗаполнитьДанныеСправкиНаСервере();
	УстановитьДоступностьДанныхСправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриИзмененииФиксируемогоЗначения(ЭтаФорма, Объект, "Фамилия");
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.Фамилия");
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриИзмененииФиксируемогоЗначения(ЭтаФорма, Объект, "Имя");
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.Имя");
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриИзмененииФиксируемогоЗначения(ЭтаФорма, Объект, "Отчество");
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.Отчество");
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриИзмененииФиксируемогоЗначения(ЭтаФорма, Объект, "ИНН");
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.ИНН");
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриИзмененииФиксируемогоЗначения(ЭтаФорма, Объект, "ДатаРождения");
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.ДатаРождения");
КонецПроцедуры

&НаКлиенте
Процедура СтатусНалогоплательщикаПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриИзмененииФиксируемогоЗначения(ЭтаФорма, Объект, "СтатусНалогоплательщика");
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.СтатусНалогоплательщика");
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:51:59 
	// Справка о доходах физ лиц, №15288 
	// {
	УстановитьВидимостьСтрокТаблицыИтогов();
	// }
	// 4D
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛГражданствоПриИзменении(ЭтаФорма, Объект);
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.Гражданство");
КонецПроцедуры

&НаКлиенте
Процедура ЛицоБезГражданстваПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛЛицБезГражданстваПриИзменении(ЭтаФорма, Объект);
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.Гражданство");
КонецПроцедуры

&НаКлиенте
Процедура ИННвСтранеГражданстваПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриИзмененииФиксируемогоЗначения(ЭтаФорма, Объект, "Гражданство");
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриИзмененииУдостоверенияЛичности(ЭтаФорма, Объект);
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.ВидДокумента");
КонецПроцедуры

&НаКлиенте
Процедура СерияДокументаПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриИзмененииУдостоверенияЛичности(ЭтаФорма, Объект);
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.СерияДокумента");
КонецПроцедуры

&НаКлиенте
Процедура НомерДокументаПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриИзмененииУдостоверенияЛичности(ЭтаФорма, Объект);
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.НомерДокумента");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбщаяСуммаДоходаПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОблагаемаяСуммаДоходаПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиИсчисленоПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиУдержаноПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиЗадолженностьПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиИзлишнеУдержаноПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПеречисленоПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаУведомленияПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.ДатаУведомленияАвансовыеПлатежи");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиНомерУведомленияПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.НомерУведомленияАвансовыеПлатежи");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиКодНалоговогоОрганаУведомленияПриИзменении(Элемент)
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "Уведомление");
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Объект.КодНалоговогоОрганаУведомленияАвансовыеПлатежи");
КонецПроцедуры

#Область ОбработчикиСобытийТаблицыФормыСведенияОДоходах

&НаКлиенте
Процедура СведенияОДоходахПриАктивизацииСтроки(Элемент)
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:54:36 
	// Справка о доходах физ лиц, №15288 
	// {
	ДанныеТекущейСтроки = Элементы.СведенияОДоходах.ТекущиеДанные;
	
	УчетНДФЛКлиент.КодДоходаАктивацииСтроки(
		ЭтаФорма, 
		Объект.НалоговыйПериод, 
		"СведенияОДоходах", 
		"КодДохода",
		"СведенияОДоходахКодВычета");
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(
		ДанныеТекущейСтроки, 
		СтарыеЗначенияКонтролируемыхПолей, 
		КонтролируемыеПоля, 
		"СведенияОДоходах");
	// }
	// 4D
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемыеДанные = Элементы[Элемент.Имя].ТекущиеДанные;
	Если РедактируемыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, РедактируемыеДанные, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "СведенияОДоходах");
	
	Индекс = Объект.СведенияОДоходах.Индекс(РедактируемыеДанные);
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"Объект.СведенияОДоходах");
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахСуммаДоходаПриИзменении(Элемент)
	ОбновитьИтогиПоТекущейСправке();
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахСуммаВычетаПриИзменении(Элемент)
	ОбновитьИтогиПоТекущейСправке();
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахПослеУдаления(Элемент)
	
	Объект.ФиксНалоги = Истина;
	ОбновитьИтогиПоТекущейСправке();
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ДанныеТекущейСтроки = Элементы[Элемент.Имя].ТекущиеДанные;
		Если ДанныеТекущейСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеТекущейСтроки.Ставка = ПредопределенноеЗначение("Перечисление.НДФЛСтавки.Ставка" + Прав(Элемент.Имя, 2));
		ДанныеТекущейСтроки.МесяцНалоговогоПериода = 1;
		ДанныеТекущейСтроки.МесяцНалоговогоПериодаСтрокой = УчетНДФЛКлиентСервер.МесяцНалоговогоПериодаСтрокой(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не НаличиеТекущегоСотрудника() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахПередУдалением(Элемент, Отказ)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		"Объект.СведенияОДоходах");
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахКодДоходаПриИзменении(Элемент)
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
	// Справка о доходах физ лиц, №15288 
	// {
	УчетНДФЛКлиент.КодДоходаПриИзменении(
			ЭтаФорма, 
			Объект.НалоговыйПериод, 
			"СведенияОДоходах", 
			"КодДохода", 
			"СведенияОДоходахКодВычета", 
			"КодВычета", 
			"СуммаВычета");
	
	ОбновитьИтогиПоТекущейСправке();
	// }
	// 4D
	
КонецПроцедуры

&НаКлиенте

&НаКлиенте
Процедура ДоходыНалогиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, Объект, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "ИТОГИ");
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"ДоходыНалоги");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыНалогиПередУдалением(Элемент, Отказ)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		"ДоходыНалоги");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСведенияОВычетах

&НаКлиенте
Процедура СведенияОВычетахПриАктивизацииСтроки(Элемент)
	
	ДанныеТекущейСтроки = Элементы.СведенияОВычетах.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "СведенияОВычетах");
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОВычетахПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	РедактируемыеДанные = Элементы.СведенияОВычетах.ТекущиеДанные;
	Если РедактируемыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, РедактируемыеДанные, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "СведенияОВычетах");
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОВычетахСуммаВычетаПриИзменении(Элемент)
	ОбновитьИтогиПоТекущейСправке();
КонецПроцедуры

&НаКлиенте
Процедура СведенияОВычетахПослеУдаления(Элемент)
	Объект.ФиксНалоги = Истина;
	ОбновитьИтогиПоТекущейСправке();
КонецПроцедуры

&НаКлиенте
Процедура СведенияОВычетахПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не НаличиеТекущегоСотрудника() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОДоходахМесяцНалоговогоПериодаПриИзменении(Элемент)
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
	// Справка о доходах физ лиц, №15288 
	// {
	РедактируемыеДанные = Элементы[СтрЗаменить(Элемент.Имя, "МесяцНалоговогоПериода", "")].ТекущиеДанные;
	Если РедактируемыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// }
	// 4D
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОВычетахПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"Объект.СведенияОВычетах");
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОВычетахПередУдалением(Элемент, Отказ)
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		"Объект.СведенияОВычетах");
	
КонецПроцедуры

&НаКлиенте
Процедура УведомленияНОоПравеНаВычетыПриАктивизацииСтроки(Элемент)
	
	ДанныеТекущейСтроки = Элементы.УведомленияНОоПравеНаВычеты.ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.СправкиНДФЛУстановитьСтарыеЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "УведомленияНОоПравеНаВычеты");
	
КонецПроцедуры

&НаКлиенте
Процедура УведомленияНОоПравеНаВычетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не НаличиеТекущегоСотрудника() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомленияНОоПравеНаВычетыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	РедактируемыеДанные = Элементы.УведомленияНОоПравеНаВычеты.ТекущиеДанные;
	Если РедактируемыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДФЛКлиент.СправкиНДФЛПриОкончанииРедактирования(ЭтаФорма, Объект, РедактируемыеДанные, СтарыеЗначенияКонтролируемыхПолей, КонтролируемыеПоля, "УведомленияНОоПравеНаВычеты");
	
КонецПроцедуры

&НаКлиенте
Процедура УведомленияНОоПравеНаВычетыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"Объект.УведомленияНОоПравеНаВычеты");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Проверить(Команда)
	
	Отказ = Ложь;
	ПроверитьДанныеДокумента(Отказ);
	
	Если Отказ Тогда
		ТекстПредупреждения = НСтр("ru = 'При проверке обнаружены ошибки'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Ошибок не обнаружено'");
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Отказ = Ложь;
	ПроверитьДанныеДокумента(Отказ);
	
	Если Отказ Тогда
		
		ТекстВопроса = НСтр("ru = 'В документе обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
		
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеДокумента(Отказ)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.СправкаНДФЛ"));
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:59:33 
	// Справка о доходах физ лиц, №15288
	// {
	ЗаполнитьДанныеСправкиПоТаблицеДоходыНалоги();
	// }
	// 4D
	
	ДокументОбъект.ВнешниеДанные = ВнешниеДанные;
	
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
	
	ЗарплатаКадрыОтображениеОшибок.ПослеПроверкиЗаполненияВФорме(
		ЭтотОбъект,
		ДокументОбъект,
		СоответствиеДанныхОбъектаДаннымФормы(),
		ОписаниеПодчиненностиДанных(),
		"Объект");
		
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// 4D:ERP для Беларуси, Яна, 06.07.2017 17:56:52 
// Справка о доходах физ лиц, №15288
// {
&НаСервере
Процедура УстановитьВидимостьСтрокТаблицыИтогов()	
	Если Объект.СтатусНалогоплательщика = Справочники.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка30);
		СтрокаИтогов.Видимость = Истина;
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка15);
		СтрокаИтогов.Видимость = Истина;

		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка13);
		Если  СтрокаИтоговЗаполнена(СтрокаИтогов) Тогда
			СтрокаИтогов.Видимость = Истина;
		Иначе
			СтрокаИтогов.Видимость = Ложь;	
			ОчиститьРеквизитыХранненияОшибокВСтрокеИтогов(СтрокаИтогов);
		КонецЕсли;	
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка09);
		Если  СтрокаИтоговЗаполнена(СтрокаИтогов) Тогда
			СтрокаИтогов.Видимость = Истина;
		Иначе
			СтрокаИтогов.Видимость = Ложь;	
			ОчиститьРеквизитыХранненияОшибокВСтрокеИтогов(СтрокаИтогов);
		КонецЕсли;	
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка35);
		Если СтрокаИтоговЗаполнена(СтрокаИтогов) Тогда
			СтрокаИтогов.Видимость = Истина;
		Иначе
			СтрокаИтогов.Видимость = Ложь;	
			ОчиститьРеквизитыХранненияОшибокВСтрокеИтогов(СтрокаИтогов);
		КонецЕсли;	

	ИначеЕсли Объект.СтатусНалогоплательщика = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент Тогда	
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка13);
		СтрокаИтогов.Видимость = Истина;
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка09);
		СтрокаИтогов.Видимость = Истина;
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка35);
		СтрокаИтогов.Видимость = Истина;
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка30);
		Если СтрокаИтоговЗаполнена(СтрокаИтогов) Тогда
			СтрокаИтогов.Видимость = Истина;
		Иначе
			СтрокаИтогов.Видимость = Ложь;	
			ОчиститьРеквизитыХранненияОшибокВСтрокеИтогов(СтрокаИтогов);
		КонецЕсли;	
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка15);
		Если СтрокаИтоговЗаполнена(СтрокаИтогов) Тогда
			СтрокаИтогов.Видимость = Истина;
		Иначе
			СтрокаИтогов.Видимость = Ложь;	
			ОчиститьРеквизитыХранненияОшибокВСтрокеИтогов(СтрокаИтогов);
		КонецЕсли;	

	Иначе		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка13);
		СтрокаИтогов.Видимость = Истина;
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка30);
		СтрокаИтогов.Видимость = Истина;
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка15);
		СтрокаИтогов.Видимость = Истина;
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка09);
		Если СтрокаИтоговЗаполнена(СтрокаИтогов) Тогда
			СтрокаИтогов.Видимость = Истина;
		Иначе
			СтрокаИтогов.Видимость = Ложь;	
			ОчиститьРеквизитыХранненияОшибокВСтрокеИтогов(СтрокаИтогов);
		КонецЕсли;	
		
		СтрокаИтогов = СтрокаИтоговПоСтавке(Перечисления.НДФЛСтавки.Ставка35);
		Если СтрокаИтоговЗаполнена(СтрокаИтогов) Тогда
			СтрокаИтогов.Видимость = Истина;
		Иначе
			СтрокаИтогов.Видимость = Ложь;	
			ОчиститьРеквизитыХранненияОшибокВСтрокеИтогов(СтрокаИтогов);
		КонецЕсли;	

	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция СтрокаИтоговПоСтавке(СтавкаНДФЛ)
	СтруктураПоиска = Новый Структура("НДФЛСтавка", СтавкаНДФЛ);
	
	НайденныеСтроки = ДоходыНалоги.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0  Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
КонецФункции

&НаСервере
Функция СтрокаИтоговЗаполнена(СтрокаИтогов)
	Возврат СтрокаИтогов.Общий <> 0 
		Или СтрокаИтогов.Облагаемый <> 0
		Или СтрокаИтогов.Исчислено <> 0
		Или СтрокаИтогов.Удержано <> 0
		Или СтрокаИтогов.НеУдержано <> 0
		Или СтрокаИтогов.ИзлишнеУдержано <> 0
		Или СтрокаИтогов.Перечислено <> 0;
	
КонецФункции

&НаСервере
Процедура ОчиститьРеквизитыХранненияОшибокВСтрокеИтогов(СтрокаИтогов)
	ИндексСтроки = ДоходыНалоги.Индекс(СтрокаИтогов);
	
	ПутьКДанным = "ДоходыНалоги[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "]";
	
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		ПутьКДанным);
	
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		ПутьКДанным);
	
КонецПроцедуры	
// }
// 4D

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтотОбъект, Команда);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ПечатьЗавершение(Результат, Команда) Экспорт
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияДанныхСотрудника(Команда)
	ОтменитьИсправлениеДанныхСотрудника();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКарточкуСотрудника(Команда)
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница", Объект.Сотрудник, "ЛичныеДанные");
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНалоги(Команда)
	ОбновитьНалогиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ПринятьИзменения();
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПрочитатьДанныеСправкиИзВременногоХранилища(АдресДанныхСправкиВХранилище)
	
	ВнешниеДанные = Истина;
	
	ДанныеСправки = ПолучитьИзВременногоХранилища(АдресДанныхСправкиВХранилище);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеСправки);
	ДокументПроведен = ДанныеСправки.ДокументПроведен;
	Объект.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.ВРазрезеКодовОКАТО;
	
	НомерСправки = ДанныеСправки.НомерСправки;
	НеВключатьДоходыПоЦеннымБумагам = ДанныеСправки.НеВключатьДоходыПоЦеннымБумагам;
	
	Для каждого СтрокаДоходов Из ДанныеСправки.МассивСведенийОДоходах Цикл
		ЗаполнитьЗначенияСвойств(Объект.СведенияОДоходах.Добавить(), СтрокаДоходов);
	КонецЦикла;
	
	Для каждого СтрокаВычетов Из ДанныеСправки.МассивСведенийОВычетах Цикл
		ЗаполнитьЗначенияСвойств(Объект.СведенияОВычетах.Добавить(), СтрокаВычетов);
	КонецЦикла;
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
	// Справка о доходах физ лиц, №15288 
	// {
	// Действие не требуется
	// }
	// 4D
	
	НоваяСтрока = ДанныеСправки.НоваяСтрока;
	
	ПриПолученииДанныхНаСервере();
	
	ЗарплатаКадрыОтображениеОшибок.ПреобразоватьПутиКДаннымВСообщенияхПользователю(
		Объект,
		ЭтотОбъект,
		ДанныеСправки.ОшибкиДанныхСправки,
		СоответствиеДанныхОбъектаДаннымФормы(),
		"Объект");
		
	ЗарплатаКадрыОтображениеОшибок.ПоместитьСообщенияОбОшибкахВДанныеФормы(ЭтотОбъект, ДанныеСправки.ОшибкиДанныхСправки);
	
	ЗарплатаКадрыОтображениеОшибок.УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(ЭтотОбъект, ДанныеСправки.ОшибкиДанныхСправки, , Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоИсточникуДанныхСправки()
	
	Если ВнешниеДанные Тогда 
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru='2-НДФЛ сотрудника'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОрганизацияГод",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаШапкаСредняя",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатаНомер",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"КодИФНС",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НомерСправки",
			"Видимость",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПодписиГруппа",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаКомментарийОтветственный",
			"Видимость",
			Ложь);
			
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"КоманднаяПанельФормыВнешниеДанные",
			"Видимость",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОК",
			"КнопкаПоУмолчанию",
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// 4D:ERP для Беларуси, Яна, 06.07.2017 18:00:24 
// Справка о доходах физ лиц, №15288
// {
&НаСервере
Процедура УставновитьСвойстваЭлементовПоИсточникуДанныхСправки()
	Если ВнешниеДанные Тогда 
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru='2-НДФЛ сотрудника'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОрганизацияГод",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаШапкаСредняя",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатаНомер",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"КодИФНС",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НомерСправки",
			"Видимость",
			Истина);
				
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПодписиГруппа",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаКомментарийОтветственный",
			"Видимость",
			Ложь);
			
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"КоманднаяПанельФормыВнешниеДанные",
			"Видимость",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОК",
			"КнопкаПоУмолчанию",
			Истина);
			
	КонецЕсли;	
	
КонецПроцедуры	
// }
// 4D

&НаСервере
Процедура ДополнитьФорму()
	
	ОписаниеЭлементовИндикации = ОписаниеЭлементовСИндикациейОшибок();
	ОписаниеПодчиненности = ОписаниеПодчиненностиДанных();
	ФормаДополнена = Истина;
	
	ЗарплатаКадрыОтображениеОшибок.ПриСозданииНаСервере(ЭтотОбъект, ОписаниеЭлементовИндикации, ОписаниеПодчиненности);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеРегистрацииВНО()
	УчетНДФЛФормы.СправкиНДФЛУстановитьПредставлениеРегистрацииВНО(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДанныхСправки()
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Элементы.ДанныеСправки.Доступность = Истина;
	Иначе
		Элементы.ДанныеСправки.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНалогиНаСервере()
	
	ОчиститьРеквизитыХраненияОшибокДанныхОНалогах();
	
	Объект.СведенияОДоходах.Очистить();
	Объект.СведенияОВычетах.Очистить();
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
	// Справка о доходах физ лиц, №15288 
	// {
	// Действие не требуется
	// }
	// 4D
	
	УчетНДФЛФормы.СправкиНДФЛОбновитьНалоги(
		ЭтаФорма,
		Объект,
		Объект.СведенияОДоходах,
		Объект.СведенияОВычетах,
		Объект.НалоговыйПериод,
		Объект.Дата,
		Объект.Организация,
		РегистрацияВНалоговомОргане(),
		Ложь,
		НеВключатьДоходыПоЦеннымБумагам,
		Объект.УведомленияНОоПравеНаВычеты);
		
		// 4D:ERP для Беларуси, Яна, 07.07.2017 11:07:28 
		// Справка о доходах физ лиц, №15288 
		// {
		ЗаполнитьТаблицуДоходыНалоги(Объект);
		// }
		// 4D

	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСправкиНаСервере()
	
	ОчиститьРеквизитыХраненияОшибокДанныхОНалогах();
	ОчиститьРеквизитыХраненияОшибокДанныеСотрудника();
	
	Если Не Объект.ФиксНалоги Тогда
		Объект.СведенияОДоходах.Очистить();
		Объект.СведенияОВычетах.Очистить();
		
		// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
		// Справка о доходах физ лиц, №15288 
		// {
		// Действие не требуется
		// }
		// 4D
	КонецЕсли;
	
	ДанныеСправок = Новый Массив;
	
	ДанныеСправок.Добавить(Объект);
	
	УстановитьИнофнадписьОписаниеДоходовОрганизации();
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанные(
		ДанныеСправок, 
		Объект.СведенияОДоходах, 
		Объект.СведенияОВычетах, 
		Объект.НалоговыйПериод, 
		КонецДня(Объект.Дата), 
		Объект.Организация, 
		РегистрацияВНалоговомОргане(), 
		Ложь,
		Истина,
		НеВключатьДоходыПоЦеннымБумагам,
		Объект.УведомленияНОоПравеНаВычеты);
	
	УстановитьПредставлениеАдресов(ЭтаФорма);
	
	УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьСвойстваЭлементовСФиксациейДанных(ЭтаФорма, Объект, ДокументПроведен);
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
	// Справка о доходах физ лиц, №15288 
	// {
	ЗаполнитьТаблицуДоходыНалоги(Объект);
	// }
	// 4D
	УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьИнфонадписьИсправления(ИнфоНадписьИсправления, Объект, ДокументПроведен);
	УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьПризнакНаличияГражданства(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораМесяцевНалоговогоПериода()
	
	// 4D:ERP для Беларуси, Яна, 07.07.2017 10:13:40 
	// Справка о доходах физ лиц, №15288
	// {
	Для Сч = 1 По 12 Цикл 
		Элементы.СведенияОДоходахМесяцНалоговогоПериода.СписокВыбора.Добавить(Формат(Дата(2011, Сч, 1), "ДФ=ММММ"));
	КонецЦикла;
	// }
	// 4D
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 18:13:40 
	// Справка о доходах физ лиц, №15288
	// {
	ПрочитатьДанныеФормы();
	
	УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьСвойстваЭлементовСФиксациейДанных(Этаформа, Объект, ДокументПроведен);
	ЗаполнитьТаблицуДоходыНалоги(Объект);
	УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьИнфонадписьИсправления(ИнфоНадписьИсправления, Объект, ДокументПроведен);
	УчетНДФЛФормы.СправкиНДФЛУстановитьСписокВыбораРегистрацийВНО(ЭтаФорма, Объект.Сотрудник);
	УстановитьИнофнадписьОписаниеДоходовОрганизации();
	УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьПризнакНаличияГражданства(ЭтаФорма, Объект);
	
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
	УстановитьДоступностьДанныхСправки();
	
	УчетНДФЛФормы.СправкиНДФЛУстановитьЗаголовокПоляРегистрацияВНО(ЭтаФорма);
	
	ТолькоПросмотр = Объект.СпециальныйДокумент2013года;
	
	Если Не ВнешниеДанные Тогда
		ДокументПроведен = Объект.Проведен;
	КонецЕсли;		
	// }
	// 4D
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаДоходов(НалоговыйПериод)
	 
	// 4D:ERP для Беларуси, Яна, 07.08.2017 11:39:48 
	// Результат тестирования конфигурации, №15540 
	// {
	// Действие не требуется
	// }
	// 4D
	
 КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФормы()
	
	ПрочитатьДанныеСправки();
	УстановитьПредставлениеАдресов(ЭтаФорма);
	ЗаполнитьСписокМесяцевНалоговогоПериода();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеСправки()
	
	Если Не ВнешниеДанные Тогда
		ДанныеСправок = Новый Массив;
		ДанныеСправок.Добавить(Объект);
		
		УчетНДФЛФормы.СправкиНДФЛПрочитатьДанныеСотрудников(ДанныеСправок, Объект.НалоговыйПериод, КонецДня(Объект.Дата), Не ДокументПроведен);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокМесяцевНалоговогоПериода()
	
	Для Каждого СтрокаДоходов Из Объект.СведенияОДоходах Цикл
		СтрокаДоходов.МесяцНалоговогоПериодаСтрокой = УчетНДФЛКлиентСервер.МесяцНалоговогоПериодаСтрокой(СтрокаДоходов.МесяцНалоговогоПериода);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НаличиеТекущегоСотрудника()
	Возврат ЗначениеЗаполнено(Объект.Сотрудник);
КонецФункции

&НаКлиенте
Функция МесяцНалоговогоПериодаПоСтроковомуПредставлению(МесяцСтрока)
	
	Для НомерМесяца = 1 По 12 Цикл
		Если МесяцСтрока = Формат(Дата(2011, НомерМесяца, 1), "ДФ=ММММ") Тогда
			Возврат НомерМесяца;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(Форма)
	
	Если Форма.Объект.СпособФормирования = ПредопределенноеЗначение("Перечисление.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно") Тогда
		Форма.Элементы.РегистрацияВНалоговомОргане.Доступность = Ложь;
		Форма.Элементы.КодИФНС.Доступность = Ложь;
	Иначе
		Форма.Элементы.РегистрацияВНалоговомОргане.Доступность = Истина;
		Форма.Элементы.КодИФНС.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИнофнадписьОписаниеДоходовОрганизации()
	ЭтоСводнаяСправка = Объект.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно;
	УчетНДФЛФормы.СправкаНДФЛУстановитьИнфонадписьОписаниеДоходовОрганизации(ЭтаФорма, ЭтоСводнаяСправка, Объект.Сотрудник);
КонецПроцедуры

#Область МетодыЗаполненияДанныхСправок

&НаСервере
Функция РегистрацияВНалоговомОргане()
	
	Если Объект.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно Тогда
		Возврат Неопределено;
	Иначе
		Возврат Объект.РегистрацияВНалоговомОргане;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеФизическогоЛица(ФизическоеЛицо)
	
	ОчиститьРеквизитыХраненияОшибокДанныеСотрудника();
	ДанныеСправок = Новый Массив;
	ДанныеСправок.Добавить(Объект);
	
	УчетНДФЛФормы.СправкиНДФЛПрочитатьДанныеСотрудников(ДанныеСправок, Объект.НалоговыйПериод, КонецДня(Объект.Дата), Не ДокументПроведен);
	УстановитьПредставлениеАдресов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьИсправлениеДанныхСотрудника()
	
	УчетНДФЛФормы.СправкиНДФЛОтменитьИсправлениеДанныхСотрудника(ЭтаФорма, Объект, Объект.НалоговыйПериод, Объект.Дата);
	
	ОчиститьРеквизитыХраненияОшибокДанныеСотрудника();
	
	УстановитьПредставлениеАдресов(ЭтаФорма);
	УчетНДФЛКлиентСервер.СправкиНДФЛУстановитьПризнакНаличияГражданства(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоТекущейСправке()
	
	УчетНДФЛФормы.СправкиНДФЛОбновитьИтоги(Объект, Объект.СведенияОДоходах, Объект.СведенияОВычетах);
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
	// Справка о доходах физ лиц, №15288 
	// {
	ЗаполнитьТаблицуДоходыНалоги(Объект);
	// }
	// 4D
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПредставлениеАдресов(Форма)
	
	Если Не ПустаяСтрока(Форма.Объект.Адрес) Тогда
		Форма.АдресПредставление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			Форма.Объект.Адрес, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	Иначе
		Форма.АдресПредставление = НСтр("ru = '<Не заполнен>'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(Форма.Объект.АдресЗарубежом) Тогда
		Форма.АдресЗарубежомПредставление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			Форма.Объект.АдресЗарубежом, Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица);
	Иначе
		Форма.АдресЗарубежомПредставление = НСтр("ru = '<Не заполнен>'");
	КонецЕсли;
	
КонецПроцедуры

// 4D:ERP для Беларуси, Яна, 06.07.2017 17:58:01 
// Справка о доходах физ лиц, №15288
// {
&НаСервере
Процедура ЗаполнитьТаблицуДоходыНалоги(ДанныеСправки)
	
	ДоходыНалоги.Очистить();
	
	СтрокаДоходыНалоги = ДоходыНалоги.Добавить();
	СтрокаДоходыНалоги.НДФЛСтавка = Перечисления.НДФЛСтавки.Ставка13;
	
	СтрокаДоходыНалоги.Общий 			= ДанныеСправки.ОбщаяСуммаДоходаПоСтавке13;
	СтрокаДоходыНалоги.Облагаемый 		= ДанныеСправки.ОблагаемаяСуммаДоходаПоСтавке13;
	СтрокаДоходыНалоги.Исчислено 		= ДанныеСправки.ИсчисленоПоСтавке13;
	СтрокаДоходыНалоги.Удержано 		= ДанныеСправки.УдержаноПоСтавке13;
	СтрокаДоходыНалоги.НеУдержано 		= ДанныеСправки.ЗадолженностьПоСтавке13;
	СтрокаДоходыНалоги.ИзлишнеУдержано 	= ДанныеСправки.ИзлишнеУдержаноПоСтавке13;
	СтрокаДоходыНалоги.Перечислено 		= ДанныеСправки.ПеречисленоПоСтавке13; 
	
	СтрокаДоходыНалоги = ДоходыНалоги.Добавить();
	СтрокаДоходыНалоги.НДФЛСтавка = Перечисления.НДФЛСтавки.Ставка30;
	
	СтрокаДоходыНалоги.Общий 			= ДанныеСправки.ОбщаяСуммаДоходаПоСтавке30;
	СтрокаДоходыНалоги.Облагаемый 		= ДанныеСправки.ОблагаемаяСуммаДоходаПоСтавке30;
	СтрокаДоходыНалоги.Исчислено 		= ДанныеСправки.ИсчисленоПоСтавке30;
	СтрокаДоходыНалоги.Удержано 		= ДанныеСправки.УдержаноПоСтавке30;
	СтрокаДоходыНалоги.НеУдержано 		= ДанныеСправки.ЗадолженностьПоСтавке30;
	СтрокаДоходыНалоги.ИзлишнеУдержано 	= ДанныеСправки.ИзлишнеУдержаноПоСтавке30;
	СтрокаДоходыНалоги.Перечислено 		= ДанныеСправки.ПеречисленоПоСтавке30;
	
	СтрокаДоходыНалоги = ДоходыНалоги.Добавить();
	СтрокаДоходыНалоги.НДФЛСтавка = Перечисления.НДФЛСтавки.Ставка09;
	
	СтрокаДоходыНалоги.Общий 			= ДанныеСправки.ОбщаяСуммаДоходаПоСтавке9;
	СтрокаДоходыНалоги.Облагаемый 		= ДанныеСправки.ОблагаемаяСуммаДоходаПоСтавке9;
	СтрокаДоходыНалоги.Исчислено 		= ДанныеСправки.ИсчисленоПоСтавке9;
	СтрокаДоходыНалоги.Удержано 		= ДанныеСправки.УдержаноПоСтавке9;
	СтрокаДоходыНалоги.НеУдержано 		= ДанныеСправки.ЗадолженностьПоСтавке9;
	СтрокаДоходыНалоги.ИзлишнеУдержано 	= ДанныеСправки.ИзлишнеУдержаноПоСтавке9;
	СтрокаДоходыНалоги.Перечислено 		= ДанныеСправки.ПеречисленоПоСтавке9;
		
	СтрокаДоходыНалоги = ДоходыНалоги.Добавить();
	СтрокаДоходыНалоги.НДФЛСтавка = Перечисления.НДФЛСтавки.Ставка35;
	
	СтрокаДоходыНалоги.Общий 			= ДанныеСправки.ОбщаяСуммаДоходаПоСтавке35;
	СтрокаДоходыНалоги.Облагаемый 		= ДанныеСправки.ОблагаемаяСуммаДоходаПоСтавке35;
	СтрокаДоходыНалоги.Исчислено 		= ДанныеСправки.ИсчисленоПоСтавке35;
	СтрокаДоходыНалоги.Удержано 		= ДанныеСправки.УдержаноПоСтавке35;
	СтрокаДоходыНалоги.НеУдержано 		= ДанныеСправки.ЗадолженностьПоСтавке35;
	СтрокаДоходыНалоги.ИзлишнеУдержано 	= ДанныеСправки.ИзлишнеУдержаноПоСтавке35;
	СтрокаДоходыНалоги.Перечислено 		= ДанныеСправки.ПеречисленоПоСтавке35;
			
	СтрокаДоходыНалоги = ДоходыНалоги.Добавить();
	СтрокаДоходыНалоги.НДФЛСтавка = Перечисления.НДФЛСтавки.Ставка15;
	
	СтрокаДоходыНалоги.Общий 			= ДанныеСправки.ОбщаяСуммаДоходаПоСтавке15;
	СтрокаДоходыНалоги.Облагаемый 		= ДанныеСправки.ОблагаемаяСуммаДоходаПоСтавке15;
	СтрокаДоходыНалоги.Исчислено 		= ДанныеСправки.ИсчисленоПоСтавке15;
	СтрокаДоходыНалоги.Удержано 		= ДанныеСправки.УдержаноПоСтавке15;
	СтрокаДоходыНалоги.НеУдержано 		= ДанныеСправки.ЗадолженностьПоСтавке15;
	СтрокаДоходыНалоги.ИзлишнеУдержано 	= ДанныеСправки.ИзлишнеУдержаноПоСтавке15;
	СтрокаДоходыНалоги.Перечислено 		= ДанныеСправки.ПеречисленоПоСтавке15;
	
	УстановитьВидимостьСтрокТаблицыИтогов();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСправкиПоТаблицеДоходыНалоги()
	Для Каждого СтрокаИтогов Из ДоходыНалоги Цикл
		ЗаполнитьДанныеСправкиПоСтрокеТаблицыДоходыНалоги(СтрокаИтогов);			
	КонецЦикла;			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСправкиПоСтрокеТаблицыДоходыНалоги(СтрокаДоходыНалоги)
		
	Если СтрокаДоходыНалоги.НДФЛСтавка = Перечисления.НДФЛСтавки.Ставка13 Тогда
		Если СтрокаДоходыНалоги.Видимость Тогда
			
			Объект.ОбщаяСуммаДоходаПоСтавке13		= СтрокаДоходыНалоги.Общий;
			Объект.ОблагаемаяСуммаДоходаПоСтавке13	= СтрокаДоходыНалоги.Облагаемый;
			Объект.ИсчисленоПоСтавке13				= СтрокаДоходыНалоги.Исчислено;
			Объект.УдержаноПоСтавке13				= СтрокаДоходыНалоги.Удержано;
			Объект.ЗадолженностьПоСтавке13			= СтрокаДоходыНалоги.НеУдержано;
			Объект.ИзлишнеУдержаноПоСтавке13		= СтрокаДоходыНалоги.ИзлишнеУдержано;
			Объект.ПеречисленоПоСтавке13			= СтрокаДоходыНалоги.Перечислено;
			
		Иначе
			
			Объект.ОбщаяСуммаДоходаПоСтавке13 		= 0;
			Объект.ОблагаемаяСуммаДоходаПоСтавке13	= 0;
			Объект.ИсчисленоПоСтавке13				= 0;
			Объект.УдержаноПоСтавке13				= 0;
			Объект.ЗадолженностьПоСтавке13 			= 0;
			Объект.ИзлишнеУдержаноПоСтавке13		= 0;
			Объект.ПеречисленоПоСтавке13			= 0;
			
		КонецЕсли;
	КонецЕсли; 
	
	Если  СтрокаДоходыНалоги.НДФЛСтавка = Перечисления.НДФЛСтавки.Ставка30 Тогда
		Если СтрокаДоходыНалоги.Видимость Тогда
				
			Объект.ОбщаяСуммаДоходаПоСтавке30		= СтрокаДоходыНалоги.Общий;
			Объект.ОблагаемаяСуммаДоходаПоСтавке30	= СтрокаДоходыНалоги.Облагаемый;
			Объект.ИсчисленоПоСтавке30				= СтрокаДоходыНалоги.Исчислено;
			Объект.УдержаноПоСтавке30				= СтрокаДоходыНалоги.Удержано;
			Объект.ЗадолженностьПоСтавке30			= СтрокаДоходыНалоги.НеУдержано;
			Объект.ИзлишнеУдержаноПоСтавке30		= СтрокаДоходыНалоги.ИзлишнеУдержано;
			Объект.ПеречисленоПоСтавке30			= СтрокаДоходыНалоги.Перечислено;
			
		Иначе
			
			Объект.ОбщаяСуммаДоходаПоСтавке30 		= 0;
			Объект.ОблагаемаяСуммаДоходаПоСтавке30	= 0;
			Объект.ИсчисленоПоСтавке30				= 0;
			Объект.УдержаноПоСтавке30				= 0;
			Объект.ЗадолженностьПоСтавке30 			= 0;
			Объект.ИзлишнеУдержаноПоСтавке30		= 0;
			Объект.ПеречисленоПоСтавке30			= 0;
			
		КонецЕсли;
	КонецЕсли;
	
	Если  СтрокаДоходыНалоги.НДФЛСтавка = Перечисления.НДФЛСтавки.Ставка09 Тогда
		Если СтрокаДоходыНалоги.Видимость Тогда
			
			Объект.ОбщаяСуммаДоходаПоСтавке9		= СтрокаДоходыНалоги.Общий;
			Объект.ОблагаемаяСуммаДоходаПоСтавке9	= СтрокаДоходыНалоги.Облагаемый;
			Объект.ИсчисленоПоСтавке9				= СтрокаДоходыНалоги.Исчислено;
			Объект.УдержаноПоСтавке9				= СтрокаДоходыНалоги.Удержано;
			Объект.ЗадолженностьПоСтавке9			= СтрокаДоходыНалоги.НеУдержано;
			Объект.ИзлишнеУдержаноПоСтавке9			= СтрокаДоходыНалоги.ИзлишнеУдержано;
			Объект.ПеречисленоПоСтавке9				= СтрокаДоходыНалоги.Перечислено;
			
		Иначе
			
			Объект.ОбщаяСуммаДоходаПоСтавке9		= 0;
			Объект.ОблагаемаяСуммаДоходаПоСтавке9	= 0;
			Объект.ИсчисленоПоСтавке9				= 0;
			Объект.УдержаноПоСтавке9				= 0;
			Объект.ЗадолженностьПоСтавке9 			= 0;
			Объект.ИзлишнеУдержаноПоСтавке9			= 0;
			Объект.ПеречисленоПоСтавке9				= 0;
			
		КонецЕсли;
	КонецЕсли;
	
	Если  СтрокаДоходыНалоги.НДФЛСтавка = Перечисления.НДФЛСтавки.Ставка35 Тогда
		Если СтрокаДоходыНалоги.Видимость Тогда
			
			Объект.ОбщаяСуммаДоходаПоСтавке35		= СтрокаДоходыНалоги.Общий;
			Объект.ОблагаемаяСуммаДоходаПоСтавке35	= СтрокаДоходыНалоги.Облагаемый;
			Объект.ИсчисленоПоСтавке35				= СтрокаДоходыНалоги.Исчислено;
			Объект.УдержаноПоСтавке35				= СтрокаДоходыНалоги.Удержано;
			Объект.ЗадолженностьПоСтавке35			= СтрокаДоходыНалоги.НеУдержано;
			Объект.ИзлишнеУдержаноПоСтавке35		= СтрокаДоходыНалоги.ИзлишнеУдержано;
			Объект.ПеречисленоПоСтавке35			= СтрокаДоходыНалоги.Перечислено;
			
		Иначе
			
			Объект.ОбщаяСуммаДоходаПоСтавке35 		= 0;
			Объект.ОблагаемаяСуммаДоходаПоСтавке35	= 0;
			Объект.ИсчисленоПоСтавке35				= 0;
			Объект.УдержаноПоСтавке35				= 0;
			Объект.ЗадолженностьПоСтавке35 			= 0;
			Объект.ИзлишнеУдержаноПоСтавке35		= 0;
			Объект.ПеречисленоПоСтавке35			= 0;
			
		КонецЕсли;
	КонецЕсли;
	
	Если  СтрокаДоходыНалоги.НДФЛСтавка = Перечисления.НДФЛСтавки.Ставка15 Тогда
		Если СтрокаДоходыНалоги.Видимость Тогда
			
			Объект.ОбщаяСуммаДоходаПоСтавке15		= СтрокаДоходыНалоги.Общий;
			Объект.ОблагаемаяСуммаДоходаПоСтавке15	= СтрокаДоходыНалоги.Облагаемый;
			Объект.ИсчисленоПоСтавке15				= СтрокаДоходыНалоги.Исчислено;
			Объект.УдержаноПоСтавке15				= СтрокаДоходыНалоги.Удержано;
			Объект.ЗадолженностьПоСтавке15			= СтрокаДоходыНалоги.НеУдержано;
			Объект.ИзлишнеУдержаноПоСтавке15		= СтрокаДоходыНалоги.ИзлишнеУдержано;
			Объект.ПеречисленоПоСтавке15			= СтрокаДоходыНалоги.Перечислено;
			
		Иначе
			
			Объект.ОбщаяСуммаДоходаПоСтавке15 		= 0;
			Объект.ОблагаемаяСуммаДоходаПоСтавке15	= 0;
			Объект.ИсчисленоПоСтавке15				= 0;
			Объект.УдержаноПоСтавке15				= 0;
			Объект.ЗадолженностьПоСтавке15 			= 0;
			Объект.ИзлишнеУдержаноПоСтавке15		= 0;
			Объект.ПеречисленоПоСтавке15			= 0;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
// }
// 4D

&НаКлиенте
Процедура ПринятьИзменения()
	
	Если Модифицированность Тогда
		АдресДанныхСправки = ПоместитьДанныеСправкиВХранилище();
		
		Оповестить("ИзмененыДанныеСправки2НДФЛ", АдресДанныхСправки, ВладелецФормы);
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеСправкиВХранилище()
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
	// Справка о доходах физ лиц, №15288 
	// {
	ЗаполнитьДанныеСправкиПоТаблицеДоходыНалоги();
	
	ОшибкиДанныхСправки = ЗарплатаКадрыОтображениеОшибок.СообщенияОбОшибкахИзДанныхФормы(ЭтотОбъект);
	
	ОписаниеСвязиДанных = СоответствиеПолейТаблицыИтоговПолямИтоговСправки();
	
	ЗарплатаКадрыОтображениеОшибок.ПреобразоватьПутиКДаннымВСообщенияхПользователю(
		ЭтотОбъект,
		Объект,
		ОшибкиДанныхСправки,
		ОписаниеСвязиДанных);
	
	Возврат УчетНДФЛФормы.ПоместитьДанныеСправки2НДФЛВХранилище(
			ЭтаФорма,
			Объект,
			Объект.СведенияОДоходах,
			Объект.СведенияОВычетах,
			НомерСправки,
			ОшибкиДанныхСправки,
			НоваяСтрока,,,
			Объект.УведомленияНОоПравеНаВычеты);
	// }
	// 4D
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТелефонОрганизации()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		Возврат;
	КонецЕсли;
	
	ПолучаемыеПоля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ТелОрганизации");
	ДанныеКИОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, , ПолучаемыеПоля);
	
	Если ТипЗнч(ДанныеКИОрганизации) = Тип("Структура") И ДанныеКИОрганизации.Свойство("ТелОрганизации") Тогда
		Объект.Телефон = ДанныеКИОрганизации.ТелОрганизации;
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область ИндикацияОшибок

// 4D:ERP для Беларуси, Яна, 06.07.2017 18:07:58 
// Справка о доходах физ лиц, №15288
// {

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	КоллекцияОписанийЭлементов = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементовСИндикациейОшибок();
	
	// Элементы шапки
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "НалоговыйПериод";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.НалоговыйПериод";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	Если ВнешниеДанные Тогда
		ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
		ОписаниеЭлемента.ИмяЭлемента = "НомерСправки";
		ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
		ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "НомерСправки";
		ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);	
	Иначе	
		ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
		ОписаниеЭлемента.ИмяЭлемента = "КодИФНС";
		ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
		ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.КодИФНС";
		ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	КонецЕсли;	
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Организация";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Организация";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РегистрацияВНалоговомОргане";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "РегистрацияВНОПредставление";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Сотрудник";
	ОписаниеЭлемента.ОтображатьНепривязанныеОшибки = Истина;
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Сотрудник";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	// таблицы документа 
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ИмяЭлемента = "СведенияОДоходах";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "СведенияОДоходах";	
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.СведенияОДоходах";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ИмяЭлемента = "СведенияОВычетах";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "СведенияОВычетах";	
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.СведенияОВычетах";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ИмяЭлемента = "ДоходыНалоги";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "ДоходыНалоги";	
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ДоходыНалоги";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	// данные уведомления
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СотрудникиНомерУведомления";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.НомерУведомления";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СотрудникиДатаУведомления";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ДатаУведомления";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СотрудникиКодНалоговогоОрганаУведомления";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.КодНалоговогоОрганаУведомления";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	// Личные данные налогоплательщика.
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Фамилия";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Фамилия";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Имя";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Имя";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Отчество";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Отчество";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ИНН";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ИНН";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ДатаРождения";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ДатаРождения";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СтатусНалогоплательщика";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.СтатусНалогоплательщика";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Гражданство";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Гражданство";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ВидДокумента";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ВидДокумента";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СерияДокумента";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.СерияДокумента";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "НомерДокумента";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.НомерДокумента";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Адрес";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Адрес";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "АдресЗарубежом";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.АдресЗарубежом";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	Возврат КоллекцияОписанийЭлементов;
КонецФункции	
// }
// 4D

&НаСервере
Функция СоответствиеДанныхОбъектаДаннымФормы()
	
	ОписаниеСоответствияДанныхОбъектовДаннымФормы = ЗарплатаКадрыОтображениеОшибок.ОписаниеСвязиДанных();
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,  
		"РегистрацияВНалоговомОргане", 
		"РегистрацияВНОПредставление");
	
	Если ВнешниеДанные Тогда
		ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
			ОписаниеСоответствияДанныхОбъектовДаннымФормы,  
			"НомерСправки", 
			"НомерСправки");
	КонецЕсли;
	
	ЗаполнитьСоответствиеПолейИтоговДокументаСтрокамТаблицыИтоговФормы(ОписаниеСоответствияДанныхОбъектовДаннымФормы);
	
	Возврат ОписаниеСоответствияДанныхОбъектовДаннымФормы;
	
КонецФункции

&НаСервере
Функция СоответствиеПолейИтоговПоСтавкамПолямТаблицыИтогов()
	
	ПоляИтогов = Новый Соответствие;
	ПоляИтогов.Вставить("ОбщаяСуммаДоходаПоСтавке", "Общий");
	ПоляИтогов.Вставить("ОблагаемаяСуммаДоходаПоСтавке", "Облагаемый");
	ПоляИтогов.Вставить("ИсчисленоПоСтавке", "Исчислено");
	ПоляИтогов.Вставить("УдержаноПоСтавке", "Удержано");
	ПоляИтогов.Вставить("ЗадолженностьПоСтавке", "НеУдержано");
	ПоляИтогов.Вставить("ИзлишнеУдержаноПоСтавке", "ИзлишнеУдержано");
	ПоляИтогов.Вставить("ПеречисленоПоСтавке", "Перечислено");
	
	Возврат ПоляИтогов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСоответствиеПолейИтоговДокументаСтрокамТаблицыИтоговФормы(ОписаниеСоответствияДанныхОбъектовДаннымФормы)
	
	СтавкиНДФЛ = Новый Соответствие;
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка05, "5");
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка09, "9");
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка10, "10");
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка13, "13");
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка15, "15");
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка30, "30");
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка35, "35");
	
	ПоляИтогов = СоответствиеПолейИтоговПоСтавкамПолямТаблицыИтогов();
	
	Для Каждого Ставка Из СтавкиНДФЛ Цикл
		КлючСвязи = ЗарплатаКадрыОтображениеОшибок.КлючСвязиДанныхСтрокТаблиц();
		ЗарплатаКадрыОтображениеОшибок.ДобавитьЭлементКлючаСвязиПоФиксированномуЗначениюПоляПодчиненнойТаблицы(
			КлючСвязи,
			"НДФЛСтавка",
			Ставка.Ключ);
			
		Для Каждого ИтоговоеПоле Из ПоляИтогов Цикл
			ПолеИтогаПоСтавке = ИтоговоеПоле.Ключ + Ставка.Значение;
			
			ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитаСДаннымиСтрокиТаблицы(
				ОписаниеСоответствияДанныхОбъектовДаннымФормы,
				ПолеИтогаПоСтавке,
				"ДоходыНалоги",
				ИтоговоеПоле.Значение,
				КлючСвязи);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
// Справка о доходах физ лиц, №15288 
// {
&НаСервере
Функция СоответствиеПолейТаблицыИтоговПолямИтоговСправки()
	ОписаниеСоответствияДанныхОбъектовДаннымФормы = ЗарплатаКадрыОтображениеОшибок.ОписаниеСвязиДанных();
	
	СтавкиНДФЛ = Новый Соответствие;
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка09, "9");
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка13, "13");
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка15, "15");
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка30, "30");
	СтавкиНДФЛ.Вставить(Перечисления.НДФЛСтавки.Ставка30, "35");
	
	ПоляИтогов = СоответствиеПолейИтоговПоСтавкамПолямТаблицыИтогов();	
	
	Для Каждого Ставка Из СтавкиНДФЛ Цикл
		КлючСвязи = ЗарплатаКадрыОтображениеОшибок.КлючСвязиДанныхСтрокТаблиц();
		ЗарплатаКадрыОтображениеОшибок.ДобавитьЭлементКлючаСвязиПоФиксированномуЗначениюПоляВедущейТаблицы(
			КлючСвязи,
			"НДФЛСтавка",
			Ставка.Ключ);
			
		Для Каждого ИтоговоеПоле Из ПоляИтогов Цикл
			ПолеИтогаПоСтавке = ИтоговоеПоле.Ключ + Ставка.Значение;
			
			ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокиТаблицыСРеквизитом(
				ОписаниеСоответствияДанныхОбъектовДаннымФормы,
				"ДоходыНалоги",
				ИтоговоеПоле.Значение,
				ПолеИтогаПоСтавке,
				КлючСвязи);
		КонецЦикла;				
	КонецЦикла;	
	
	Возврат ОписаниеСоответствияДанныхОбъектовДаннымФормы;
КонецФункции	
// }
// 4D

&НаСервере
Функция ОписаниеПодчиненностиДанных() 
	
	ОписаниеПодчиненностиДанных = ЗарплатаКадрыОтображениеОшибок.ОписаниеПодчиненностиДанныхФормы();
	
	Возврат ОписаниеПодчиненностиДанных;
	
КонецФункции

&НаСервере
Процедура ОчиститьРеквизитыХраненияОшибокДанныеСотрудника()
	
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.Фамилия");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.Фамилия");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.Имя");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.Имя");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.Отчество");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.Отчество");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.ИНН");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.ИНН");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.Адрес");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.Адрес");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.ВидДокумента");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.ВидДокумента");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.СерияДокумента");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.СерияДокумента");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.НомерДокумента");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.НомерДокумента");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.Гражданство");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.Гражданство");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.ДатаРождения");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.ДатаРождения");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.СтатусНалогоплательщика");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.СтатусНалогоплательщика");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.АдресЗарубежом");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.АдресЗарубежом");
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьРеквизитыХраненияОшибокДанныхОНалогах()
	
	Для Индекс = 0 По Объект.СведенияОДоходах.Количество() - 1 Цикл
		ПутьКДанным = "Объект.СведенияОДоходах[" + Формат(Индекс, "ЧН=0; ЧГ=") + "].*";
		
		ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
			ЭтотОбъект,
			ПутьКДанным);
		
		ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
			ЭтотОбъект,
			ПутьКДанным);
		
	КонецЦикла;
	
	Для Индекс = 0 По Объект.СведенияОВычетах.Количество() - 1 Цикл
		ПутьКДанным = "Объект.СведенияОВычетах[" + Формат(Индекс, "ЧН=0; ЧГ=") + "].*";
		
		ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
			ЭтотОбъект,
			ПутьКДанным);
		
		ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
			ЭтотОбъект,
			ПутьКДанным);
			
	КонецЦикла;
	
	// 4D:ERP для Беларуси, Яна, 06.07.2017 17:44:49 
	// Справка о доходах физ лиц, №15288 
	// {
	// Действие не требуется
	// }
	// 4D
	
	
	Для Индекс = 0 По ДоходыНалоги.Количество() - 1 Цикл
		ПутьКДанным = "ДоходыНалоги[" + Формат(Индекс, "ЧН=0; ЧГ=") + "].*";
		
		ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
			ЭтотОбъект,
			ПутьКДанным);
		
		ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
			ЭтотОбъект,
			ПутьКДанным);
		
	КонецЦикла;
	
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.НомерУведомленияАвансовыеПлатежи");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.НомерУведомленияАвансовыеПлатежи");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.КодНалоговогоОрганаУведомленияАвансовыеПлатежи");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.КодНалоговогоОрганаУведомленияАвансовыеПлатежи");
		
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(
		ЭтотОбъект,
		"Объект.ДатаУведомленияАвансовыеПлатежи");
		
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		"Объект.ДатаУведомленияАвансовыеПлатежи");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииОшибкиНажатие(Элемент, СтандартнаяОбработка)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииОшибкиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииПриАктивизацииЯчейки(ЭтотОбъект, Элемент);
КонецПроцедуры

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;

#КонецОбласти

#КонецОбласти
