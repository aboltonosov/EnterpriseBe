
&НаКлиенте
Перем СтруктураСохраняемыхРеквизитов;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтруктураСохраняемыхРеквизитов = Новый Структура;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьЗначенияРеквизитовФормы();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ОтражениеРасходов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.Дата <> Дата(1, 1, 1, 0, 0, 0) И Объект.Дата < '20140101' Тогда
		Объект.НалоговаяБаза = ПредопределенноеЗначение("Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость");
	КонецЕсли;
	
	ОбновитьСвойстваЭлементов("Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьГоловнуюОрганизацию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбъектаНалогаНаИмуществоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОбъектаНалогаНаИмущество)
		И ПредыдущееЗначениеВидОбъектаНалогаНаИмущество <> Объект.ВидОбъектаНалогаНаИмущество
		И Объект.ОС.Количество() <> 0 Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВидОбъектаНалогаНаИмуществоПриИзмененииВопросЗавершение", ЭтаФорма),
			НСтр("ru='Таблица объектов налогообложения будет очищена. Продолжить?'"),
			РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ВидОбъектаНалогаНаИмуществоПриИзмененииЗавершение(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбъектаНалогаНаИмуществоПриИзмененииВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ВидОбъектаНалогаНаИмуществоПриИзмененииЗавершение(Истина);
		
	Иначе
		Объект.ВидОбъектаНалогаНаИмущество = ПредыдущееЗначениеВидОбъектаНалогаНаИмущество;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбъектаНалогаНаИмуществоПриИзмененииЗавершение(ОчиститьТЧ)

	Если ОчиститьТЧ Тогда
		Объект.ОС.Очистить();
	КонецЕсли; 
	
	СписокРеквизитов = "ВидОбъектаНалогаНаИмущество";
	
	Если Объект.ВидОбъектаНалогаНаИмущество = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНалогаНаИмущество.ДвижимоеИмуществоПринятоеС2013")
		И Объект.ПорядокНалогообложения <> ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения") Тогда
		
		Объект.ПорядокНалогообложения = ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения");
		СписокРеквизитов = СписокРеквизитов + ",ПорядокНалогообложения";
	КонецЕсли;
	
	ОбновитьСвойстваЭлементов(СписокРеквизитов);
	ПредыдущееЗначениеВидОбъектаНалогаНаИмущество = Объект.ВидОбъектаНалогаНаИмущество;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокНалогообложенияПриИзменении(Элемент)
	
	СписокРеквизитов = "ПорядокНалогообложения";
	
	Если Объект.ПорядокНалогообложения <> ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения") Тогда
		Объект.КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
		СписокРеквизитов = СписокРеквизитов + ",КодНалоговойЛьготыОсвобождениеОтНалогообложения";
	КонецЕсли; 
	
	Если Объект.ПорядокНалогообложения <> ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке") Тогда
		Объект.СниженнаяНалоговаяСтавка = 0;
		СписокРеквизитов = СписокРеквизитов + ",СниженнаяНалоговаяСтавка";
	КонецЕсли; 
	
	Если Объект.ПорядокНалогообложения = ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению") Тогда
		Объект.ОтражениеРасходов.Очистить();
	КонецЕсли; 
	
	ОбновитьСвойстваЭлементов(СписокРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяБазаПриИзменении(Элемент)
	
	Если Объект.НалоговаяБаза = ПредопределенноеЗначение("Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость") Тогда
		Объект.КодВидаИмущества = "11";
	Иначе
		Объект.КодВидаИмущества = "03";
	КонецЕсли;
	
	ОбновитьСвойстваЭлементов("НалоговаяБаза,КодВидаИмущества");
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговойЛьготыОсвобождениеОтНалогообложенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта", "РегистрСведений");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам");
	ПараметрыФормы.Вставить("НазваниеМакета", "ЛьготыПоНалогуНаИмущество");
	ПараметрыФормы.Вставить("ТекущийПериод", Объект.Дата);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаВыбораКода",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("КодНалоговойЛьготыОсвобождениеОтНалогообложенияНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговойЛьготыОсвобождениеОтНалогообложенияНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.КодНалоговойЛьготыОсвобождениеОтНалогообложения = РезультатЗакрытия;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостановкаНаУчетВНалоговомОрганеПриИзменении(Элемент)
	
	Если Объект.ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане") Тогда
		СохранитьЗначениеРеквизитаФормы("КодПоОКАТО_ДругойКод", ЭтаФорма, ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		СохранитьЗначениеРеквизитаФормы("КодПоОКТМО_ДругойКод", ЭтаФорма, ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		ВосстановитьЗначениеРеквизитаФормы("НалоговыйОрган", Объект, СтруктураСохраняемыхРеквизитов);
		ВосстановитьЗначениеРеквизитаФормы("КодПоОКАТО_ДругойНалоговыйОрган", ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		ВосстановитьЗначениеРеквизитаФормы("КодПоОКТМО_ДругойНалоговыйОрган", ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		ВосстановитьЗначениеРеквизитаФормы("НалоговаяСтавка", Объект, СтруктураСохраняемыхРеквизитов);
	ИначеЕсли Объект.ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО") Тогда
		ВосстановитьЗначениеРеквизитаФормы("КодПоОКАТО_ДругойКод", ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		ВосстановитьЗначениеРеквизитаФормы("КодПоОКТМО_ДругойКод", ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		СохранитьЗначениеРеквизитаФормы("НалоговыйОрган", ЭтаФорма, Объект, СтруктураСохраняемыхРеквизитов);
		СохранитьЗначениеРеквизитаФормы("КодПоОКАТО_ДругойНалоговыйОрган", ЭтаФорма, ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		СохранитьЗначениеРеквизитаФормы("КодПоОКТМО_ДругойНалоговыйОрган", ЭтаФорма, ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		СохранитьЗначениеРеквизитаФормы("НалоговаяСтавка", ЭтаФорма, Объект, СтруктураСохраняемыхРеквизитов);
	Иначе
		СохранитьЗначениеРеквизитаФормы("КодПоОКАТО_ДругойКод", ЭтаФорма, ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		СохранитьЗначениеРеквизитаФормы("КодПоОКТМО_ДругойКод", ЭтаФорма, ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		СохранитьЗначениеРеквизитаФормы("НалоговыйОрган", ЭтаФорма, Объект, СтруктураСохраняемыхРеквизитов);
		СохранитьЗначениеРеквизитаФормы("КодПоОКАТО_ДругойНалоговыйОрган", ЭтаФорма, ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		СохранитьЗначениеРеквизитаФормы("КодПоОКТМО_ДругойНалоговыйОрган", ЭтаФорма, ЭтаФорма, СтруктураСохраняемыхРеквизитов);
		СохранитьЗначениеРеквизитаФормы("НалоговаяСтавка", ЭтаФорма, Объект, СтруктураСохраняемыхРеквизитов);
	КонецЕсли;
	
	ОбновитьСвойстваЭлементов("ПостановкаНаУчетВНалоговомОргане");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйОрганПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
		НалоговыйОрганПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалоговыйОрганПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
		РеквизитыНалоговогоОргана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.НалоговыйОрган, "КодПоОКТМО, КодПоОКАТО");
		КодПоОКТМО_ДругойНалоговыйОрган = РеквизитыНалоговогоОргана.КодПоОКТМО;
		КодПоОКАТО_ДругойНалоговыйОрган = РеквизитыНалоговогоОргана.КодПоОКАТО;
		
		Объект.КодПоОКТМО = КодПоОКТМО_ДругойНалоговыйОрган;
		Объект.КодПоОКАТО = КодПоОКАТО_ДругойНалоговыйОрган;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКТМО_ДругойКодПриИзменении(Элемент)
	
	Объект.КодПоОКТМО = КодПоОКТМО_ДругойКод;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКАТО_ДругойКодПриИзменении(Элемент)
	Объект.КодПоОКАТО = КодПоОКАТО_ДругойКод;
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКТМО_ДругойНалоговыйОрганПриИзменении(Элемент)
	Объект.КодПоОКТМО = КодПоОКТМО_ДругойНалоговыйОрган;
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКАТО_ДругойНалоговыйОрганПриИзменении(Элемент)
	Объект.КодПоОКАТО = КодПоОКАТО_ДругойНалоговыйОрган;
КонецПроцедуры

&НаКлиенте
Процедура КодВидаИмуществаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.НалоговаяБаза = ПредопределенноеЗначение("Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость") Тогда
		НазваниеМакета = "КодыВидаИмуществаРаздел3";
	Иначе
		НазваниеМакета = "КодыВидаИмуществаРаздел2";
	КонецЕсли;
	
	ВыборКода("КодВидаИмущества", НазваниеМакета);

КонецПроцедуры

&НаКлиенте
Процедура КБКНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборКода("КБК", "КБК");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиОС



#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиОтражениеРасходов



#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

#Область СтандартныеПодсистемы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборКода(ИмяКода, НазваниеМакета)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",		"РегистрСведений");
	ПараметрыФормы.Вставить("НазваниеОбъекта",	"СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам");
	ПараметрыФормы.Вставить("НазваниеМакета",	НазваниеМакета);
	ПараметрыФормы.Вставить("ТекущийПериод",	Объект.Дата);
	ПараметрыФормы.Вставить("ТекущийКод",		Объект[ИмяКода]);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКода", ИмяКода);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборКодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКодаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ИмяКода = ДополнительныеПараметры.ИмяКода;
	
	ВыбранныйКод = РезультатЗакрытия;
	
	Если ВыбранныйКод <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Объект[ИмяКода] = ВыбранныйКод;
		
	КонецЕсли;
	
	ОбновитьСвойстваЭлементов(ИмяКода);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("ОтражениеРасходов"));
	
	#Область ОтноситсяКТерриторииСубъектаРФВДоле
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляСтоимостиЧислитель.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляСтоимостиЗнаменатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ОтноситсяКТерриторииСубъектаРФВДоле");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область ОтноситсяКТерриторииСубъектаРФВДоле
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляВПравеОбщейСобственностиЧислитель.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляВПравеОбщейСобственностиЗнаменатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ОбщаяСобственность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти

	#Область ОтноситсяКТерриторииСубъектаРФВДоле
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляПлощадиЧислитель.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляПлощадиЗнаменатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.КадастроваяСтоимостьОпределенаПоДолеПлощади");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область НалогообложениеПоКадастровойСтоимости
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСКадастровыйНомер.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСКадастроваяСтоимость.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДатаРегистрацииПраваСобственности.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалоговаяБаза");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	КодыВидовИмущества = ПолучитьКодыВидовИмущества();
	КБК = ПолучитьКБК();
	
	ЗаполнитьЗначенияРеквизитовФормы();
	ОбновитьСвойстваЭлементов();
	УстановитьГоловнуюОрганизацию(ЭтаФорма);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ОтражениеРасходов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияРеквизитовФормы()
	
	ПредыдущееЗначениеВидОбъектаНалогаНаИмущество = Объект.ВидОбъектаНалогаНаИмущество;
	
	СовмещениеОСНОиЕНВД = ЕстьСовмещениеОСНОиЕНВД(Объект.Организация, Объект.Дата);
	
	Если Объект.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО Тогда
		КодПоОКТМО_ДругойКод = Объект.КодПоОКТМО;
		КодПоОКАТО_ДругойКод = Объект.КодПоОКАТО;
	ИначеЕсли Объект.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане Тогда
		КодПоОКТМО_ДругойНалоговыйОрган = Объект.КодПоОКТМО;
		КодПоОКАТО_ДругойНалоговыйОрган = Объект.КодПоОКАТО;
	КонецЕсли;
	КодПоОКТМО_Исходный = Объект.КодПоОКТМО;
	КодПоОКАТО_Исходный = Объект.КодПоОКАТО;
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.АмортизационныеГруппы.ТретьяГруппа);
	Массив.Добавить(Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа);
	Массив.Добавить(Перечисления.АмортизационныеГруппы.ПятаяГруппа);
	Массив.Добавить(Перечисления.АмортизационныеГруппы.ШестаяГруппа);
	Массив.Добавить(Перечисления.АмортизационныеГруппы.СедьмаяГруппа);
	Массив.Добавить(Перечисления.АмортизационныеГруппы.ВосьмаяГруппа);
	Массив.Добавить(Перечисления.АмортизационныеГруппы.ДевятаяГруппа);
	Массив.Добавить(Перечисления.АмортизационныеГруппы.ДесятаяГруппа);
	Массив.Добавить(Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа);
	Массив.Добавить(Перечисления.АмортизационныеГруппы.ПустаяСсылка());
	ДоступныеАмортизационныеГруппы = Новый ФиксированныйМассив(Массив);
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств);
	Массив.Добавить(Перечисления.ГруппыОС.МашиныИОборудование);
	Массив.Добавить(Перечисления.ГруппыОС.ОфисноеОборудование);
	Массив.Добавить(Перечисления.ГруппыОС.ПродуктивныйСкот);
	Массив.Добавить(Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь);
	Массив.Добавить(Перечисления.ГруппыОС.РабочийСкот);
	Массив.Добавить(Перечисления.ГруппыОС.ТранспортныеСредства);
	ДоступныеГруппыОСДвижимогоИмущества = Новый ФиксированныйМассив(Массив);
	
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество);
	Массив.Добавить(Перечисления.ГруппыОС.Здания);
	Массив.Добавить(Перечисления.ГруппыОС.МноголетниеНасаждения);
	Массив.Добавить(Перечисления.ГруппыОС.Сооружения);
	Массив.Добавить(Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации);
	ДоступныеГруппыОСНедвижимогоИмущества = Новый ФиксированныйМассив(Массив);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЭлементов(Параметры=Неопределено)
	
	ОбновитьВсе = (Параметры = Неопределено);
	Действия = Новый Структура(Параметры);
	
	Если ОбновитьВсе Или Действия.Свойство("Дата") Тогда
		
		До2014 = (Объект.Дата <> Дата(1, 1, 1, 0, 0, 0) И Год(Объект.Дата) < 2014);
		Элементы.КодПоОКАТО_ДругойКод.Видимость = До2014;
		Элементы.КодПоОКАТО_ДругойНалоговыйОрган.Видимость = До2014;
		
		Элементы.НалоговаяБаза.ТолькоПросмотр = До2014;
		
		СовмещениеОСНОиЕНВД = ЕстьСовмещениеОСНОиЕНВД(Объект.Организация, Объект.Дата);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ВидОбъектаНалогаНаИмущество") Тогда
		
		ЭтоНедвижимоеИмущество = (Объект.ВидОбъектаНалогаНаИмущество = Перечисления.ВидыОбъектовНалогаНаИмущество.НедвижимоеИмущество);
		
		Элементы.СтраницаОсновныеСредства.Заголовок = ?(
			ЭтоНедвижимоеИмущество,
			НСтр("ru='Недвижимое имущество'"),
			НСтр("ru='Движимое имущество'"));
		
		Элементы.ГруппаНалоговаяБаза.Видимость = ЭтоНедвижимоеИмущество;
		
		Элементы.КодНалоговойЛьготыОсвобождениеОтНалогообложения.Видимость = Истина;
		
		Элементы.ПорядокНалогообложения.СписокВыбора.Очистить();
		Элементы.ПорядокНалогообложения.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОсобыеЛьготыНеУстановлены"),
			НСтр("ru='Особые льготы не установлены'"));
		Элементы.ПорядокНалогообложения.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения"),
			НСтр("ru='Освобождается от налогообложения, код льготы:'"));
		Элементы.ПорядокНалогообложения.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке"),
			НСтр("ru='Облагается по сниженной ставке:'"));
		Элементы.ПорядокНалогообложения.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению"),
			НСтр("ru='Не подлежит налогообложению'"));
		
		Элементы.ГруппаЛьготы.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
		СвязиПараметровВыбораОС = Новый Массив;
		СвязиПараметровВыбораОС.Добавить(Новый СвязьПараметраВыбора("ДатаСведений", "Объект.Дата", РежимИзмененияСвязанногоЗначения.НеИзменять));
		СвязиПараметровВыбораОС.Добавить(Новый СвязьПараметраВыбора("ТекущийРегистратор", "Объект.Ссылка"));
		
		ПараметрыВыбораОС = Новый Массив;
		ПараметрыВыбораОС.Добавить(Новый ПараметрВыбора("Отбор.АмортизационнаяГруппа", ДоступныеАмортизационныеГруппы));
		ПараметрыВыбораОС.Добавить(Новый ПараметрВыбора("Контекст", "БУ, МФУ"));
		
		Если Объект.ВидОбъектаНалогаНаИмущество = Перечисления.ВидыОбъектовНалогаНаИмущество.НедвижимоеИмущество Тогда
			
			ПараметрыВыбораОС.Добавить(Новый ПараметрВыбора("Отбор.ГруппаОС", ДоступныеГруппыОСНедвижимогоИмущества));
			
			Элементы.ВидОбъектаНалогаНаИмущество.РасширеннаяПодсказка.Заголовок =
				НСтр("ru = 'Недвижимое имущество, по умолчанию подлежит налогообложению'");
			
		ИначеЕсли Объект.ВидОбъектаНалогаНаИмущество = Перечисления.ВидыОбъектовНалогаНаИмущество.ДвижимоеИмуществоПринятоеДо2013 Тогда
			
			СвязиПараметровВыбораОС.Добавить(Новый СвязьПараметраВыбора("Отбор.БУОрганизация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
			
			ПараметрыВыбораОС.Добавить(Новый ПараметрВыбора("Отбор.БУСостояние", Перечисления.СостоянияОС.ПринятоКУчету));
			ПараметрыВыбораОС.Добавить(Новый ПараметрВыбора("Отбор.ГруппаОС", ДоступныеГруппыОСДвижимогоИмущества));
			
			Элементы.ВидОбъектаНалогаНаИмущество.РасширеннаяПодсказка.Заголовок =
				НСтр("ru = 'Движимое имущество, принятое на учет до 2013 года, по умолчанию подлежит налогообложению'");
			
		ИначеЕсли Объект.ВидОбъектаНалогаНаИмущество = Перечисления.ВидыОбъектовНалогаНаИмущество.ДвижимоеИмуществоПринятоеС2013 Тогда
			
			СвязиПараметровВыбораОС.Добавить(Новый СвязьПараметраВыбора("Отбор.БУОрганизация", "Объект.Организация",  РежимИзмененияСвязанногоЗначения.Очищать));
			
			ПараметрыВыбораОС.Добавить(Новый ПараметрВыбора("Отбор.БУСостояние", Перечисления.СостоянияОС.ПринятоКУчету));
			ПараметрыВыбораОС.Добавить(Новый ПараметрВыбора("Отбор.ГруппаОС", ДоступныеГруппыОСДвижимогоИмущества));
			
			Элементы.КодНалоговойЛьготыОсвобождениеОтНалогообложения.Видимость = Ложь;
			Элементы.ВидОбъектаНалогаНаИмущество.РасширеннаяПодсказка.Заголовок =
				НСтр("ru = 'Движимое имущество, принятое на учет с 1 января 2013 года, по умолчанию освобождается от налогообложения'");
			
			Элементы.ПорядокНалогообложения.СписокВыбора.Очистить();
			Элементы.ПорядокНалогообложения.СписокВыбора.Добавить(
				ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения"),
				НСтр("ru='Освобождается от налогообложения'"));
			Элементы.ПорядокНалогообложения.СписокВыбора.Добавить(
				ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОсобыеЛьготыНеУстановлены"),
				НСтр("ru='Подлежит налогообложению'"));
			Элементы.ПорядокНалогообложения.СписокВыбора.Добавить(
				ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке"),
				НСтр("ru='Облагается по сниженной ставке:'"));
			
			Элементы.ГруппаЛьготы.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
			
		Иначе
			
			ПараметрыВыбораОС.Добавить(Новый ПараметрВыбора("Отбор.ГруппаОС", Неопределено));
			
			Элементы.ВидОбъектаНалогаНаИмущество.РасширеннаяПодсказка.Заголовок = "";
			
		КонецЕсли;
		
		Элементы.ОСОсновноеСредство.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОС);
		Элементы.ОСОсновноеСредство.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбораОС);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ПорядокНалогообложения") Тогда
		
		ОсвобождениеОтНалогообложения = (Объект.ПорядокНалогообложения = ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения"));
		
		Элементы.КодНалоговойЛьготыОсвобождениеОтНалогообложения.Доступность = ОсвобождениеОтНалогообложения;
		Элементы.КодНалоговойЛьготыОсвобождениеОтНалогообложения.АвтоОтметкаНезаполненного = ОсвобождениеОтНалогообложения;
		Элементы.КодНалоговойЛьготыОсвобождениеОтНалогообложения.ОтметкаНезаполненного = ОсвобождениеОтНалогообложения И ПустаяСтрока(Объект.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
		
		ОблагаетсяПоСниженнойСтавке = (Объект.ПорядокНалогообложения = ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке"));
		
		Элементы.СниженнаяНалоговаяСтавка.Доступность = ОблагаетсяПоСниженнойСтавке;
		Элементы.СниженнаяНалоговаяСтавка.АвтоОтметкаНезаполненного = ОблагаетсяПоСниженнойСтавке;
		Элементы.СниженнаяНалоговаяСтавка.ОтметкаНезаполненного = ОблагаетсяПоСниженнойСтавке И Объект.СниженнаяНалоговаяСтавка = 0;
		
		ПодлежитНалогообложению = (Объект.ПорядокНалогообложения <> ПредопределенноеЗначение("Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению"));
		Элементы.СтраницаНалоговыйОрган.Доступность = ПодлежитНалогообложению;
		Элементы.СтраницаОтражениеРасходов.Доступность = ПодлежитНалогообложению;
		
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ПостановкаНаУчетВНалоговомОргане") Тогда
		
		ПостановкаНаУчетСДругимКодомПоОКАТО = (Объект.ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО"));
		
		Элементы.КодПоОКТМО_ДругойКод.Доступность = ПостановкаНаУчетСДругимКодомПоОКАТО;
		Элементы.КодПоОКТМО_ДругойКод.АвтоОтметкаНезаполненного = ПостановкаНаУчетСДругимКодомПоОКАТО;
		Элементы.КодПоОКТМО_ДругойКод.ОтметкаНезаполненного = ПостановкаНаУчетСДругимКодомПоОКАТО И ПустаяСтрока(КодПоОКТМО_ДругойКод);
		
		Элементы.КодПоОКАТО_ДругойКод.Доступность = ПостановкаНаУчетСДругимКодомПоОКАТО;
		Элементы.КодПоОКАТО_ДругойКод.АвтоОтметкаНезаполненного = ПостановкаНаУчетСДругимКодомПоОКАТО;
		Элементы.КодПоОКАТО_ДругойКод.ОтметкаНезаполненного = ПостановкаНаУчетСДругимКодомПоОКАТО И ПустаяСтрока(КодПоОКАТО_ДругойКод);
		
		ПостановкаНаУчетВДругомНалоговомОргане = (Объект.ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане"));
		
		Элементы.НалоговыйОрган.Доступность = ПостановкаНаУчетВДругомНалоговомОргане;
		Элементы.НалоговыйОрган.АвтоОтметкаНезаполненного = ПостановкаНаУчетВДругомНалоговомОргане;
		Элементы.НалоговыйОрган.ОтметкаНезаполненного = ПостановкаНаУчетВДругомНалоговомОргане И Объект.НалоговыйОрган.Пустая();
		
		Элементы.КодПоОКТМО_ДругойНалоговыйОрган.Доступность = ПостановкаНаУчетВДругомНалоговомОргане;
		Элементы.КодПоОКТМО_ДругойНалоговыйОрган.АвтоОтметкаНезаполненного = ПостановкаНаУчетВДругомНалоговомОргане;
		Элементы.КодПоОКТМО_ДругойНалоговыйОрган.ОтметкаНезаполненного = ПостановкаНаУчетВДругомНалоговомОргане И ПустаяСтрока(КодПоОКТМО_ДругойНалоговыйОрган);
		
		Элементы.КодПоОКАТО_ДругойНалоговыйОрган.Доступность = ПостановкаНаУчетВДругомНалоговомОргане;
		Элементы.КодПоОКАТО_ДругойНалоговыйОрган.АвтоОтметкаНезаполненного = ПостановкаНаУчетВДругомНалоговомОргане;
		Элементы.КодПоОКАТО_ДругойНалоговыйОрган.ОтметкаНезаполненного = ПостановкаНаУчетВДругомНалоговомОргане И ПустаяСтрока(КодПоОКАТО_ДругойНалоговыйОрган);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("НалоговаяБаза") Тогда
		
		ОпределениеНалоговойБазыПоКадастровойСтоимости = (Объект.НалоговаяБаза = ПредопределенноеЗначение("Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость"));
		
		Элементы.НалоговаяСтавкаКадастроваяСтоимость.Доступность = ОпределениеНалоговойБазыПоКадастровойСтоимости;
		Элементы.НалоговаяСтавкаКадастроваяСтоимость.АвтоОтметкаНезаполненного = Элементы.НалоговаяСтавкаКадастроваяСтоимость.Доступность;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("НалоговаяБаза") Или Действия.Свойство("ПостановкаНаУчетВНалоговомОргане") Или Действия.Свойство("ВидОбъектаНалогаНаИмущество") Тогда
		
		ЭтоДвижимоеИмущество = (Объект.ВидОбъектаНалогаНаИмущество <> Перечисления.ВидыОбъектовНалогаНаИмущество.НедвижимоеИмущество);
		ПостановкаНаУчетВДругомНалоговомОргане = (Объект.ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане"));
		ОпределениеНалоговойБазыПоКадастровойСтоимости = (Объект.НалоговаяБаза = ПредопределенноеЗначение("Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость"));
		
		Элементы.НалоговаяСтавкаДругойНалоговыйОрган.Видимость = Не ОпределениеНалоговойБазыПоКадастровойСтоимости Или ЭтоДвижимоеИмущество;
		Элементы.НалоговаяСтавкаДругойНалоговыйОрганДекорацияЕдиницаИзмерения.Видимость = Не ОпределениеНалоговойБазыПоКадастровойСтоимости Или ЭтоДвижимоеИмущество;
		Элементы.НалоговаяСтавкаДругойНалоговыйОрган.Доступность = (Не ОпределениеНалоговойБазыПоКадастровойСтоимости Или ЭтоДвижимоеИмущество) И ПостановкаНаУчетВДругомНалоговомОргане;
		Элементы.НалоговаяСтавкаДругойНалоговыйОрган.АвтоОтметкаНезаполненного = (Не ОпределениеНалоговойБазыПоКадастровойСтоимости Или ЭтоДвижимоеИмущество) И ПостановкаНаУчетВДругомНалоговомОргане;
		Элементы.НалоговаяСтавкаДругойНалоговыйОрган.ОтметкаНезаполненного = (Не ОпределениеНалоговойБазыПоКадастровойСтоимости Или ЭтоДвижимоеИмущество) И ПостановкаНаУчетВДругомНалоговомОргане И Не ЗначениеЗаполнено(Объект.НалоговаяСтавка);
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("Дата") Или Действия.Свойство("НалоговаяБаза") Или Действия.Свойство("ВидОбъектаНалогаНаИмущество") Тогда
		
		ЭтоНедвижимоеИмущество = (Объект.ВидОбъектаНалогаНаИмущество = Перечисления.ВидыОбъектовНалогаНаИмущество.НедвижимоеИмущество);
		ОпределениеНалоговойБазыПоКадастровойСтоимости = (Объект.НалоговаяБаза = ПредопределенноеЗначение("Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость"));
		Элементы.ГруппаИспользуетсяТолькоВДеятельностиОблагаемойЕНВД.Видимость = (СовмещениеОСНОиЕНВД И ЭтоНедвижимоеИмущество И ОпределениеНалоговойБазыПоКадастровойСтоимости);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ВидОбъектаНалогаНаИмущество") Или Действия.Свойство("ПорядокНалогообложения") Тогда
		
		ПодлежитНалогообложению = (Объект.ПорядокНалогообложения <> Перечисления.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению);
		ЭтоНедвижимоеИмущество = (Объект.ВидОбъектаНалогаНаИмущество = Перечисления.ВидыОбъектовНалогаНаИмущество.НедвижимоеИмущество);
		
		Элементы.ГруппаКолонокОС.Видимость = ПодлежитНалогообложению И ЭтоНедвижимоеИмущество;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("КодВидаИмущества") Тогда
		
		Элементы.КодВидаИмущества.Подсказка = КодыВидовИмущества.Получить(Объект.КодВидаИмущества);
		Элементы.КБК.Видимость = Документы.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество.ТребуетсяУказаниеКБК(Объект.КодВидаИмущества);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("КБК") Тогда
		
		Элементы.КБК.Подсказка = КБК.Получить(Объект.КБК);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьСовмещениеОСНОиЕНВД(Организация, Период)
	
	Если Дата('20140701') <= Период И Период < Дата('20150101') Тогда
		Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Общая
			И УчетнаяПолитика.ПлательщикЕНВД(Организация, Период);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьЗначениеРеквизитаФормы(ИмяРеквизита, Форма, Данные, СтруктураРеквизитов) Экспорт
	
	СтруктураРеквизитов.Вставить(ИмяРеквизита, Данные[ИмяРеквизита]);
	
	Данные[ИмяРеквизита] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Данные[ИмяРеквизита]));
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьЗначениеРеквизитаФормы(ИмяРеквизита, Данные, СтруктураРеквизитов) Экспорт

	Если СтруктураРеквизитов.Свойство(ИмяРеквизита) Тогда
		Данные[ИмяРеквизита] = СтруктураРеквизитов[ИмяРеквизита];
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГоловнуюОрганизацию(Форма)
	
	Форма.ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Форма.Объект.Организация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодыВидовИмущества()

	КодыВидовИмущества = Новый Соответствие;
	
	Для Сч = 2 По 3 Цикл
		
		ИмяМакета = "КодыВидаИмуществаРаздел" + Строка(Сч);
		
		Макет = РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ПолучитьМакет(ИмяМакета);
		ТекущаяОбласть = Макет.Области.Найти("Область2017");
	
		Если ТекущаяОбласть = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				КодыВидовИмущества.Вставить(КодПоказателя, Название);
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(КодыВидовИмущества);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКБК()

	КБК = Новый Соответствие;
	
	Макет = РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ПолучитьМакет("КБК");
	ТекущаяОбласть = Макет.Области.Найти("Область2008");
	
	Если ТекущаяОбласть <> Неопределено Тогда
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			КБК.Вставить(КодПоказателя, Название);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый ФиксированноеСоответствие(КБК);
	
КонецФункции

#КонецОбласти

