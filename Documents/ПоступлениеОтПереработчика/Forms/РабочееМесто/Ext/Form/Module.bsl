
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если ВыполняетсяОбновлениеЧитаемыхДанных() Тогда
		ОбновлениеИнформационнойБазыУТ.СообщитьЧтоРаботаСФормойВременноОграничена(); 
	КонецЕсли; 
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", ОтборСклад);
		СтруктураБыстрогоОтбора.Свойство("Менеджер", ОтборМенеджер);
	КонецЕсли;

	ОбновитьДанные(ЭтаФорма);
	
	УстановитьТекущуюСтраницу();
	ИспользоватьПоступлениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	ИспользоватьСкладыВТЧ = ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки");
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.Менеджер.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.ПоступлениеОтПереработчика));
	
	#Область СтандартныеМеханизмы
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьДанные(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказПереработчику"
		ИЛИ ИмяСобытия = "Запись_ПоступлениеОтПереработчика" Тогда
		ОбновитьДанные(ЭтаФорма);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ОбновитьДанные(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОбновитьДанные(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьДанные(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереработчикПриИзменении(Элемент)

	ОбновитьДанные(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОформлениеДокументов

&НаКлиенте
Процедура СписокКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокКОформлению.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Распоряжение) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Распоряжение);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоступлениеОтПереработчика(Команда)
	
	ИдентификаторыСтрок = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокКОформлению);
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеЗаполнения = ДанныеДляФормированияПоступленияОтПереработчика(ИдентификаторыСтрок);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
		ОткрытьФорму("Документ.ПоступлениеОтПереработчика.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОформлено Тогда
		ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	КонецЕсли;
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПоступлениеТоваровУслуг.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеОтПереработчика") Тогда
			
			Элементы.Список.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОформлено;
			
		КонецЕсли;
		
		ПоказатьЗначение(,Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);
		
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект, "СписокКОформлению.ДатаРаспоряжения", Элементы.СписокКОформлениюДатаРаспоряжения.Имя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанные(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список, 
			"Подразделение", 
			Форма.ОтборПодразделение,
			ВидСравненияКомпоновкиДанных.Равно,,
			ЗначениеЗаполнено(Форма.ОтборПодразделение));
			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список, 
			"Партнер", 
			Форма.ОтборПереработчик,
			ВидСравненияКомпоновкиДанных.Равно,,
			ЗначениеЗаполнено(Форма.ОтборПереработчик));
			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список, 
			"Менеджер", 
			Форма.ОтборМенеджер,
			ВидСравненияКомпоновкиДанных.Равно,,
			ЗначениеЗаполнено(Форма.ОтборМенеджер));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокКОформлению, 
			"Подразделение", 
			Форма.ОтборПодразделение,
			ВидСравненияКомпоновкиДанных.Равно,,
			ЗначениеЗаполнено(Форма.ОтборПодразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокКОформлению, 
			"Переработчик", 
			Форма.ОтборПереработчик,
			ВидСравненияКомпоновкиДанных.Равно,,
			ЗначениеЗаполнено(Форма.ОтборПереработчик));
			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокКОформлению, 
			"Склад", 
			Форма.ОтборСклад,
			ВидСравненияКомпоновкиДанных.Равно,,
			ЗначениеЗаполнено(Форма.ОтборСклад));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполняетсяОбновлениеЧитаемыхДанных()

	Возврат НЕ ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, "РегистрНакопления.ЗаказыПоставщикам");
	
КонецФункции

&НаКлиенте
Функция ДанныеДляФормированияПоступленияОтПереработчика(ИдентификаторыСтрок)
	
	Организация = Неопределено;
	Переработчик = Неопределено;
	Контрагент = Неопределено;
	Договор = Неопределено;
	Склад = Неопределено;
	ГруппаСкладов = Неопределено;
	МассивЗаказов = Новый Массив;
	НаправлениеДеятельности = Неопределено;
	
	ЗакупкаПодДеятельность = Неопределено;
	
	РеквизитыШапки = Новый Структура;
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = Элементы.СписокКОформлению.ДанныеСтроки(ИдентификаторСтроки);
		
		Если МассивЗаказов.Найти(ДанныеСтроки.Распоряжение) = Неопределено Тогда
			МассивЗаказов.Добавить(ДанныеСтроки.Распоряжение);
		КонецЕсли; 
		
		РазрешенВыборГруппы = ИспользоватьСкладыВТЧ 
								И ДанныеСтроки.ВыборГруппы = ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных");
		
		Если (Склад <> Неопределено 
					И Склад <> ДанныеСтроки.Склад 
					И (ГруппаСкладов <> ДанныеСтроки.ГруппаСкладов
						ИЛИ НЕ РазрешенВыборГруппы))
			ИЛИ (ЗначениеЗаполнено(Переработчик)
					И Переработчик <> ДанныеСтроки.Переработчик) Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления документа необходимо выбрать продукцию 
												|одного переработчика, поступающую на один склад.'"));
			Возврат Неопределено;
		КонецЕсли; 
		
		Если Организация <> Неопределено 
			И Организация <> ДанныеСтроки.Организация Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления документа необходимо выбрать заказы одной организации.'"));
			Возврат Неопределено;
		КонецЕсли; 
		
		Если НаправлениеДеятельности <> Неопределено 
			И НаправлениеДеятельности <> ДанныеСтроки.НаправлениеДеятельности Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления документа необходимо выбрать заказы одного направления деятельности.'"));
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ИспользоватьПоступлениеПоНесколькимЗаказам 
			И МассивЗаказов.Количество() > 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для оформления документа необходимо выбрать один заказ.'"));
			Возврат Неопределено;
		КонецЕсли; 
		
		Организация = ДанныеСтроки.Организация;
		Склад = ДанныеСтроки.Склад;
		ГруппаСкладов = ДанныеСтроки.ГруппаСкладов;
		НаправлениеДеятельности = ДанныеСтроки.НаправлениеДеятельности;
		
		// Переработчик может быть не указан в заказе на производство
		Если ЗначениеЗаполнено(ДанныеСтроки.Переработчик) Тогда
			Переработчик = ДанныеСтроки.Переработчик;
			Контрагент = ДанныеСтроки.Контрагент;
			Договор = ДанныеСтроки.Договор;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗакупкаПодДеятельность) Тогда
			ЗакупкаПодДеятельность = ДанныеСтроки.ЗакупкаПодДеятельность;
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыШапки.Вставить("Организация", Организация);
	РеквизитыШапки.Вставить("Партнер", Переработчик);
	РеквизитыШапки.Вставить("Контрагент", Контрагент);
	РеквизитыШапки.Вставить("Договор", Договор);
	РеквизитыШапки.Вставить("Склад", ?(ЗначениеЗаполнено(ГруппаСкладов) И РазрешенВыборГруппы, ГруппаСкладов, Склад));
	РеквизитыШапки.Вставить("НаправлениеДеятельности", НаправлениеДеятельности);
	
	РеквизитыШапки.Вставить("ЗакупкаПодДеятельность", ЗакупкаПодДеятельность);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("МассивЗаказов", МассивЗаказов);
	ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти
