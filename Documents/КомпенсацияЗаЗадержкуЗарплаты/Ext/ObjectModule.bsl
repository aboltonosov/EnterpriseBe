#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическиеЛица.ФизическоеЛицо");
	
КонецПроцедуры
// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьМесяца(Ссылка, ПериодВзаиморасчетов, "ПериодВзаиморасчетовСтрокой", Отказ, НСтр("ru='Период зарплаты'"), , , Ложь);
	
	Отказ = Отказ ИЛИ НЕ МожноЗаполнитьКомпенсации();
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Организация");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПериодРегистрации");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПериодВзаиморасчетов");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки.
	СуммаПоДокументу = Начисления.Итог("СуммаКомпенсации");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Начисления.Ссылка.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Начисления.СуммаКомпенсации) КАК Сумма
	|ИЗ
	|	Документ.КомпенсацияЗаЗадержкуЗарплаты.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.СтатьяФинансирования,
	|	Начисления.Ссылка.СтатьяРасходов";
	
	НачисленияКомпенсации = Запрос.Выполнить().Выгрузить();
	
	// Подставляем статью финансирования из шапки
	Если ЗначениеЗаполнено(СтатьяФинансирования) Тогда
		НачисленияКомпенсации.ЗаполнитьЗначения(СтатьяФинансирования, "СтатьяФинансирования");
	КонецЕсли;	
	
	// Указываем специальное начисление
	НачисленияКомпенсации.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	НачисленияКомпенсации.ЗаполнитьЗначения(Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты, "Начисление");
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(Движения, Отказ, Организация, ПериодРегистрации, НачисленияКомпенсации, Неопределено, Неопределено, Неопределено, ПорядокВыплаты, Ложь);
	
	ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, Организация, ПериодРегистрации,
						НачисленияКомпенсации,
						Неопределено,
						Неопределено,
						РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты));
	
	
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
	Движения.ЗарплатаКВыплате.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МожноЗаполнитьКомпенсации() Экспорт
	
	ПравилаПроверки = Новый Структура;
	
	ПравилаПроверки.Вставить("Организация",			НСтр("ru='Не выбрана организация'"));
	ПравилаПроверки.Вставить("ПериодРегистрации",	НСтр("ru='Не указан месяц начисления'"));
	ПравилаПроверки.Вставить("ПериодВзаиморасчетов",НСтр("ru='Не указан месяц, за который задержана зарплата'"));
	
	МожноЗаполнитьКомпенсации = 
		ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(ЭтотОбъект, ПравилаПроверки, Истина);
		
		Если ЗначениеЗаполнено(ПериодВзаиморасчетов) И ЗначениеЗаполнено(ПериодРегистрации) 
			И ПериодВзаиморасчетов > ПериодРегистрации Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Компенсация не может рассчитываться за будущие периоды'"), ,
				"ПериодВзаиморасчетов", "Объект"); 
			МожноЗаполнитьКомпенсации = Ложь;	
		КонецЕсли;
		
	Возврат МожноЗаполнитьКомпенсации 
	
КонецФункции

Процедура ЗаполнитьКомпенсации() Экспорт
	
	Сотрудники = СотрудникиПоШапкеДокумента();
	НевыплаченнаяЗарплата = НевыплаченнаяЗарплата(Сотрудники);
	КомпенсацияЗаЗадержку = КомпенсацияЗаЗадержкуЗарплаты(НевыплаченнаяЗарплата);
	
	ЗаполнитьКомпенсацией(КомпенсацияЗаЗадержку);
	
КонецПроцедуры	

Процедура ДополнитьКомпенсации(Сотрудники) Экспорт
	
	НевыплаченнаяЗарплата = НевыплаченнаяЗарплата(Сотрудники);
	
	КомпенсацияЗаЗадержку = КомпенсацияЗаЗадержкуЗарплаты(НевыплаченнаяЗарплата);
	
	// Дополняем компенсацию теми сотрудниками, для которых не удалось рассчитать компенсацию
	
	КомпенсацияЗаЗадержку.Индексы.Добавить("Сотрудник");
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, "Подразделение, СтатьяФинансирования", Дата);
	КадровыеДанные.Индексы.Добавить("Сотрудник");
	
	ДеньВыплаты = НачалоДня(Дата);
	
	ПериодыИзмененияСтавки = ПериодыИзмененияСтавки(ДеньВыплаты, ДеньВыплаты);
	Если ПериодыИзмененияСтавки.Количество() > 0 Тогда
		Ставка = ПериодыИзмененияСтавки[0].Ставка;
	Иначе
		Ставка = 0;
	КонецЕсли;	
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		КомпенсацияСотрудника = КомпенсацияЗаЗадержку.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		Если КомпенсацияСотрудника.Количество() = 0 Тогда
			СтрокаКомпенсации = КомпенсацияЗаЗадержку.Добавить();
			СтрокаКомпенсации.Сотрудник = Сотрудник;
			СтрокаКомпенсации.ПериодВзаиморасчетов = ЭтотОбъект.ПериодВзаиморасчетов;
			
			КадровыеДанныеСотрудника = КадровыеДанные.Найти(Сотрудник, "Сотрудник");
			СтрокаКомпенсации.Подразделение        = КадровыеДанныеСотрудника.Подразделение;
			СтрокаКомпенсации.СтатьяФинансирования = КадровыеДанныеСотрудника.СтатьяФинансирования;
			
			СтрокаКомпенсации.СтатьяРасходов = ОтражениеЗарплатыВБухучетеРасширенный.СтатьяРасходов211();
			СтрокаКомпенсации.СуммаКВыплате  = 0;
			
			СтрокаКомпенсации.ДатаС  = ДеньВыплаты;
			СтрокаКомпенсации.ДатаПо = ДеньВыплаты;
			СтрокаКомпенсации.Ставка = Ставка;
		КонецЕсли;	
	КонецЦикла;
	
	ДополнитьКомпенсацией(КомпенсацияЗаЗадержку);
	
КонецПроцедуры

Процедура ЗаполнитьКомпенсацией(КомпенсацияЗаЗадержкуЗарплаты)
	
	// Помещаем компенсации в начисления
	Начисления.Загрузить(КомпенсацияЗаЗадержкуЗарплаты);
	
	// Заполняем ТЧ Состав
	Сотрудники = КомпенсацияЗаЗадержкуЗарплаты.ВыгрузитьКолонку("Сотрудник");
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(Сотрудники);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем кадровые данные сотрудников с полями для сортировки 	
	КадровыеДанные = "";
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные);
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, Истина, 
		Сотрудники, 
		КадровыеДанные, 
		КонецМесяца(ПериодВзаиморасчетов));	
	
	// Формируем упорядоченный список сотрудников
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК Сотрудники";
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "Сотрудники");
	
	Состав.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

Процедура ДополнитьКомпенсацией(КомпенсацияЗаЗадержкуЗарплаты)
	
	// Помещаем компенсации в начисления
	Для Каждого СтрокаКомпенсации Из КомпенсацияЗаЗадержкуЗарплаты Цикл
		СтрокаТЧ = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаКомпенсации);
	КонецЦикла;
	
	// Заполняем ТЧ Состав
	Сотрудники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КомпенсацияЗаЗадержкуЗарплаты.ВыгрузитьКолонку("Сотрудник"));
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		СтрокаТЧ = Состав.Добавить();
		СтрокаТЧ.Сотрудник = Сотрудник;
	КонецЦикла;
	
КонецПроцедуры	

Функция СотрудникиПоШапкеДокумента()
	
	ДлинаСуток = 86400;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Получаем всех работавших в организации в месяце периода задержанной зарплаты.
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
	ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 		=  НачалоМесяца(ПериодВзаиморасчетов);
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода	=  КонецМесяца(ПериодВзаиморасчетов);
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоТрудовымДоговорам = Истина;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ = Неопределено;

	КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудниковОрганизаций);
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
		
	Возврат СотрудникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции	

Функция НевыплаченнаяЗарплата(Сотрудники)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",		ПериодВзаиморасчетов);
	Запрос.УстановитьПараметр("Сотрудники",					Сотрудники);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК СуммаКВыплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|		ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаКВыплате.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				КОНЕЦПЕРИОДА(&ПериодВзаиморасчетов, МЕСЯЦ),
	|				Организация = &Организация
	|					И Сотрудник В (&Сотрудники)) КАК ЗарплатаКВыплате
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.Период < КОНЕЦПЕРИОДА(&ПериодВзаиморасчетов, МЕСЯЦ)
	|		И ЗарплатаКВыплате.Организация = &Организация
	|		И ЗарплатаКВыплате.Сотрудник В(&Сотрудники)) КАК ЗарплатаКВыплате
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) <> 0";
	
	НевыплаченнаяЗарплата = Запрос.Выполнить().Выгрузить();
	
	Возврат НевыплаченнаяЗарплата;
	
КонецФункции

Функция КомпенсацияЗаЗадержкуЗарплаты(Зарплата)
	
	ДлинаСуток = 86400;
	
	ДеньВыплаты = НачалоДня(Дата);
	
	КомпенсацияЗаЗадержкуЗарплаты = Начисления.ВыгрузитьКолонки();

	Настройки = РасчетЗарплатыРасширенныйВызовСервера.СведенияОНастройкахЗарплатаКадрыРасширенная(Организация);
			
	ПериодыВзаиморасчетов = Зарплата.ВыгрузитьКолонку("ПериодВзаиморасчетов");
	ПериодыВзаиморасчетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПериодыВзаиморасчетов);
	ПервыйДеньЗадержки = ДеньВыплаты;
	Для Каждого Месяц Из ПериодыВзаиморасчетов Цикл
		ПервыйДеньЗадержки = 
			Мин(
				ПервыйДеньЗадержки, 
				РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплатыПоНастройкам(Месяц, Настройки) + ДлинаСуток); 
	КонецЦикла;	
	
	ПериодыИзмененияСтавки = ПериодыИзмененияСтавки(ПервыйДеньЗадержки, ДеньВыплаты);
	
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		
		ПервыйДеньЗадержки = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплатыПоНастройкам(СтрокаЗарплаты.ПериодВзаиморасчетов, Настройки) + ДлинаСуток; 
		
		Если ПервыйДеньЗадержки <= ДеньВыплаты Тогда 
			ДатаС = ПервыйДеньЗадержки;
			Для Каждого ПериодИзмененияСтавки Из ПериодыИзмененияСтавки Цикл
				Если ДатаС >= ПериодИзмененияСтавки.ДатаС И ДатаС <= ПериодИзмененияСтавки.ДатаПо Тогда
					
					ДатаС = Макс(ДатаС, ПериодИзмененияСтавки.ДатаС);
					ДатаПо= Мин(ДеньВыплаты, ПериодИзмененияСтавки.ДатаПо);
					
					СтрокаКомпенсации = КомпенсацияЗаЗадержкуЗарплаты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКомпенсации, СтрокаЗарплаты);
					СтрокаКомпенсации.ДатаС = ДатаС;
					СтрокаКомпенсации.ДатаПо= ДатаПо;
					СтрокаКомпенсации.Ставка= ПериодИзмененияСтавки.Ставка;
					
					СтрокаКомпенсации.СуммаКомпенсации = СтрокаКомпенсации.СуммаКомпенсации
						+ СтрокаЗарплаты.СуммаКВыплате * ((ДатаПо - ДатаС) / ДлинаСуток + 1) * ПериодИзмененияСтавки.Ставка / 100;
						
					ДатаС = ДатаПо + ДлинаСуток;	
					
				Иначе
					Продолжить
				КонецЕсли	
			КонецЦикла;	
		КонецЕсли	
		
	КонецЦикла;
	
	КолонкиГруппировок = 
		"Сотрудник,
		|Подразделение,
		|ПериодВзаиморасчетов,
		|СтатьяФинансирования,
		|СтатьяРасходов,
		|ДокументОснование,
		|ДатаС,
		|ДатаПо,
		|Ставка";
	КолонкиСуммирования = 
		"СуммаКВыплате,
		|СуммаКомпенсации";
	КомпенсацияЗаЗадержкуЗарплаты.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	Возврат КомпенсацияЗаЗадержкуЗарплаты
	
КонецФункции

Функция ПериодыИзмененияСтавки(ПервыйДеньЗадержки, ДеньВыплаты)
	
	// Сначала определяем ставки по правилам предприятия
	ПериодыИзмененияСтавки = ПериодыИзмененияСтавкиЛокальные(ПервыйДеньЗадержки, ДеньВыплаты);	
	Если ПериодыИзмененияСтавки.Количество() > 0 Тогда
		Возврат ПериодыИзмененияСтавки;
	КонецЕсли;	 
	
	// Затем берем ставки по правилам ст. 136 ТК
	ПериодыИзмененияСтавки = ПериодыИзмененияСтавкиОбщие(ПервыйДеньЗадержки, ДеньВыплаты);	
	Если ПериодыИзмененияСтавки.Количество() > 0 Тогда
		Возврат ПериодыИзмененияСтавки;
	КонецЕсли;	 
	
	Возврат НовыеПериодыИзмененияСтавки();
	
КонецФункции

Функция НовыеПериодыИзмененияСтавки()
	
	ПериодыИзмененияСтавки = Новый ТаблицаЗначений;
	ПериодыИзмененияСтавки.Колонки.Добавить("ДатаС",	Метаданные().ТабличныеЧасти.Начисления.Реквизиты.ДатаС.Тип);
	ПериодыИзмененияСтавки.Колонки.Добавить("ДатаПо",	Метаданные().ТабличныеЧасти.Начисления.Реквизиты.ДатаПо.Тип);
	ПериодыИзмененияСтавки.Колонки.Добавить("Ставка",	Метаданные().ТабличныеЧасти.Начисления.Реквизиты.Ставка.Тип);
	
	Возврат ПериодыИзмененияСтавки;
	
КонецФункции

Функция ПериодыИзмененияСтавкиЛокальные(ПервыйДеньЗадержки, ДеньВыплаты)
	
	ПериодыИзмененияСтавки = НовыеПериодыИзмененияСтавки();
	
	РезультатЗапроса = 
		ЗапросПериодовИзмененияСтавки(
			Метаданные.РегистрыСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты.ПолноеИмя(),
			Метаданные.РегистрыСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты.Ресурсы.Ставка.Имя,
			ПервыйДеньЗадержки, ДеньВыплаты);
			
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Выгрузить(), ПериодыИзмененияСтавки);
	КонецЕсли;
	
	Возврат ПериодыИзмененияСтавки;
	
КонецФункции

Функция ПериодыИзмененияСтавкиОбщие(ПервыйДеньЗадержки, ДеньВыплаты)
	
	ДлинаСуток = 86400;
	
	Дата272ФЗ = '20161003';
	ДоляСтавкиЦБДо272ФЗ = 300;
	ДоляСтавкиЦБПо272ФЗ = 150;
	
	ПериодыИзмененияСтавки = НовыеПериодыИзмененияСтавки();

	РезультатЗапроса = 
		ЗапросПериодовИзмененияСтавки(
			Метаданные.РегистрыСведений.СтавкаРефинансированияЦБ.ПолноеИмя(),
			Метаданные.РегистрыСведений.СтавкаРефинансированияЦБ.Ресурсы.Размер.Имя,
			ПервыйДеньЗадержки, ДеньВыплаты);
			
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Выгрузить(), ПериодыИзмененияСтавки);
		
		// при переходе через дату вступления в силу 272-ФЗ, добавляем соответствующую строку
		Если ПериодыИзмененияСтавки[0].ДатаС < Дата272ФЗ И ПериодыИзмененияСтавки[ПериодыИзмененияСтавки.Количество()-1].ДатаПо >= Дата272ФЗ Тогда
			
			// ищем строку перед вступлением в силу 272-ФЗ
			Индекс = 0;
			Пока Индекс < ПериодыИзмененияСтавки.Количество() И ПериодыИзмененияСтавки[Индекс].ДатаС < Дата272ФЗ Цикл
				Индекс = Индекс + 1
			КонецЦикла;
			ПериодИзмененияСтавкиДо272ФЗ = ПериодыИзмененияСтавки[Индекс-1];
			
			// добавляем строку с дня вступления в силу 272-ФЗ
			ПериодИзмененияСтавкиПо272ФЗ = ПериодыИзмененияСтавки.Вставить(Индекс);
			ПериодИзмененияСтавкиПо272ФЗ.ДатаС = Дата272ФЗ;
			ПериодИзмененияСтавкиПо272ФЗ.ДатаПо = ПериодИзмененияСтавкиДо272ФЗ.ДатаПо;
			ПериодИзмененияСтавкиПо272ФЗ.Ставка = ПериодИзмененияСтавкиДо272ФЗ.Ставка;
			
			// строку перед вступлением в силу 272-ФЗ завершаем датой вступления
			ПериодИзмененияСтавкиДо272ФЗ.ДатаПо = ПериодИзмененияСтавкиПо272ФЗ.ДатаС - ДлинаСуток;
			
		КонецЕсли;
		
		Для Каждого ПериодИзмененияСтавки Из ПериодыИзмененияСтавки Цикл
			ДоляСтавкиЦБ = ?(ПериодИзмененияСтавки.ДатаС >= Дата272ФЗ, ДоляСтавкиЦБПо272ФЗ, ДоляСтавкиЦБДо272ФЗ);  
			ПериодИзмененияСтавки.Ставка = ПериодИзмененияСтавки.Ставка / ДоляСтавкиЦБ;
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ПериодыИзмененияСтавки;
	
КонецФункции

Функция ЗапросПериодовИзмененияСтавки(ИсточникДанных, Ресурс, ПервыйДеньЗадержки, ДеньВыплаты)
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА СтавкаКомпенсации.Период >= &ПервыйДеньЗадержки
	|				ТОГДА СтавкаКомпенсации.Период
	|			ИНАЧЕ &ПервыйДеньЗадержки
	|		КОНЕЦ, ДЕНЬ) КАК ДатаС,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВЫБОР
	|				КОГДА МИНИМУМ(СледующаяДата.Период) > &ДеньВыплаты
	|					ТОГДА &ДеньВыплаты
	|				ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(СледующаяДата.Период, ДЕНЬ, -1))
	|			КОНЕЦ, &ДеньВыплаты), ДЕНЬ) КАК ДатаПо,
	|	СтавкаКомпенсации.Ресурс КАК Ставка
	|ИЗ
	|	#ИсточникДанных КАК СтавкаКомпенсации
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникДанных КАК СледующаяДата
	|		ПО СтавкаКомпенсации.Период < СледующаяДата.Период
	|ГДЕ
	|	СтавкаКомпенсации.Период <= &ДеньВыплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	СтавкаКомпенсации.Ресурс,
	|	СтавкаКомпенсации.Период
	|
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА МИНИМУМ(СледующаяДата.Период) > &ДеньВыплаты
	|				ТОГДА &ДеньВыплаты
	|			ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(СледующаяДата.Период, ДЕНЬ, -1))
	|		КОНЕЦ, &ДеньВыплаты) >= &ПервыйДеньЗадержки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаС";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПервыйДеньЗадержки",	ПервыйДеньЗадержки);
	Запрос.УстановитьПараметр("ДеньВыплаты",		ДеньВыплаты);
	
	Запрос.Текст = ШаблонТекстаЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИсточникДанных", ИсточникДанных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СтавкаКомпенсации.Ресурс", "СтавкаКомпенсации." +	Ресурс);
	
	Возврат Запрос.Выполнить();
	
КонецФункции	

#КонецОбласти

#КонецЕсли