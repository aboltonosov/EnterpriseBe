#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Документы.СчетФактураВыданныйАванс.ДобавитьКомандуСоздатьНаОснованииИсправительныйСчетФактура(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОснованииИсправительныйСчетФактура(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.СчетФактураВыданныйАванс) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.ИсправительныйСчетФактураВыданныйАванс";
		КомандаСоздатьНаОсновании.Идентификатор = "ИсправительныйСчетФактура";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Исправительный счет-фактура'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	 Если ПравоДоступа("Добавление", Метаданные.Документы.СчетФактураВыданныйАванс) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.СчетФактураВыданныйАванс.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.СчетФактураВыданныйАванс);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

// Возвращает входящий номер и дату расчетного документа.
//
// Параметры:
// 	ДокументСсылка	- ДокументСсылка - Документ входящий номер и дату которого требуется получить
// 	Контрагент		- СправочникСсылка.Контрагенты, Неопределено - Контрагент табличной части "РасчетыСПартнерами" документа "ВводОстатков"
//
// Возвращаемое значение:
// 	СтруктураРезультата - Структура  - содержит: 
// 						    * НомерПлатежноРасчетногоДокумента - Строка - номер документа
// 							* ДатаПлатежноРасчетногоДокумента - Дата - дата документа
//
Функция ВходящийНомерИДатаДокумента(ДокументСсылка, Контрагент = Неопределено) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("НомерПлатежноРасчетногоДокумента", "");
	СтруктураРезультата.Вставить("ДатаПлатежноРасчетногоДокумента" , '00010101');
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		СтруктураРезультата.Вставить("НомерПлатежноРасчетногоДокумента", ДокументСсылка.НомерВходящегоДокумента);
		СтруктураРезультата.Вставить("ДатаПлатежноРасчетногоДокумента" , ДокументСсылка.ДатаВходящегоДокумента);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВводОстатков") Тогда
		// Для ввода остатков данные хранятся в табличной части
		Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент)  = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаАванса = ДокументСсылка.РасчетыСПартнерами.Найти(Контрагент, "Контрагент");
			Если СтрокаАванса <> Неопределено Тогда
				СтруктураРезультата.Вставить("НомерПлатежноРасчетногоДокумента", СтрокаАванса.НомерРасчетногоДокумента);
				СтруктураРезультата.Вставить("ДатаПлатежноРасчетногоДокумента" , СтрокаАванса.ДатаРасчетногоДокумента);
			КонецЕсли; 
		КонецЕсли; 
		
	Иначе
		СтруктураРезультата.Вставить("НомерПлатежноРасчетногоДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументСсылка.Номер, Ложь, Истина));
		СтруктураРезультата.Вставить("ДатаПлатежноРасчетногоДокумента" , ДокументСсылка.Дата);
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;

КонецФункции 

// Возвращает список кодов видов операций,
//	предусмотренных законодательством.
//
// Возвращаемое значение:
//	СписокЗначений - Список кодов видов операций.
//
Функция СписокКодовВидовОпераций() Экспорт
	
	СписокКодов = Новый СписокЗначений;
	
	СписокКодов.Добавить("02", НСтр("ru='02 Авансы полученные'"));
	СписокКодов.Добавить("05", НСтр("ru='05 Авансы полученные за товары, работы, услуги комитента'"));
	СписокКодов.Добавить("06", НСтр("ru='06 Налоговый агент, статья 161 НК'"));
	СписокКодов.Добавить("12", НСтр("ru='12 Авансы полученные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК'"));
	СписокКодов.Добавить("28", НСтр("ru='28 Сводный комиссионный счет-фактура на аванс, п.3.1 статьи 169 НК'"));
	
	Возврат СписокКодов;
	
КонецФункции

// Переформировывает движения счетов-фактур по регистрам НДСЗаписиКнигиПокупок и НДСЗаписиКнигиПродаж без перепроведения документа.
// Сбрасывает статус отражения в регл. учете.
//
// Параметры:
//	МассивДокументов - Массив - Документы, движения которых необходимо актуализировать.
//	ПризнакОтменаПроведения - Булево - Признак, что переформировать движения необходимо по причине отмены проведения документа.
//
Процедура СформироватьДвиженияПоКнигамПокупокПродаж(МассивРегистраторов, ПризнакОтменаПроведения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактура.Ссылка      КАК Ссылка,
	|	СчетФактура.Организация КАК Организация,
	|	Расчеты.Период          КАК ДатаОтражения
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданныйАванс КАК СчетФактура
	|	ПО
	|		Расчеты.РасчетныйДокумент = СчетФактура.ДокументОснование
	|		И НЕ СчетФактура.Исправление
	|ГДЕ
	|	Расчеты.Регистратор В (&МассивРегистраторов)
	|	И СчетФактура.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактура.Ссылка                       КАК Ссылка,
	|	СчетФактура.Организация                  КАК Организация,
	|	АннулированиеПодарочныхСертификатов.Дата КАК ДатаОтражения
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК АннулированиеПодарочныхСертификатов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АннулированиеПодарочныхСертификатов.ПодарочныеСертификаты КАК ДанныеДокумента
	|	ПО
	|		АннулированиеПодарочныхСертификатов.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ПодарочныеСертификаты КАК РеализацияСертификата
	|	ПО
	|		РеализацияСертификата.ПодарочныйСертификат = ДанныеДокумента.ПодарочныйСертификат
	|		И РеализацияСертификата.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданныйАванс КАК СчетФактура
	|	ПО
	|		РеализацияСертификата.Регистратор = СчетФактура.ДокументОснование
	|		И НЕ СчетФактура.ПометкаУдаления
	|
	|ГДЕ
	|	АннулированиеПодарочныхСертификатов.Ссылка В (&МассивРегистраторов)
	|	И СчетФактура.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактура.Ссылка                 КАК Ссылка,
	|	СчетФактура.Организация            КАК Организация,
	|	ВозвратПодарочныхСертификатов.Дата КАК ДатаОтражения
	|ИЗ
	|	Документ.ВозвратПодарочныхСертификатов КАК ВозвратПодарочныхСертификатов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВозвратПодарочныхСертификатов.ПодарочныеСертификаты КАК ДанныеДокумента
	|	ПО
	|		ВозвратПодарочныхСертификатов.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ПодарочныеСертификаты КАК РеализацияСертификата
	|	ПО
	|		РеализацияСертификата.ПодарочныйСертификат = ДанныеДокумента.ПодарочныйСертификат
	|		И РеализацияСертификата.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданныйАванс КАК СчетФактура
	|	ПО
	|		РеализацияСертификата.Регистратор = СчетФактура.ДокументОснование
	|		И НЕ СчетФактура.Исправление
	|		И НЕ СчетФактура.ПометкаУдаления
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивРегистраторов)
	|	И СчетФактура.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактура.Ссылка            КАК Ссылка,
	|	СчетФактура.Организация       КАК Организация,
	|	ОтчетОРозничныхПродажах.Дата  КАК ДатаОтражения
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ДанныеДокумента
	|	ПО
	|		ОтчетОРозничныхПродажах.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ПодарочныеСертификаты КАК РеализацияСертификата
	|	ПО
	|		РеализацияСертификата.ПодарочныйСертификат = ДанныеДокумента.ПодарочныйСертификат
	|		И РеализацияСертификата.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданныйАванс КАК СчетФактура
	|	ПО
	|		РеализацияСертификата.Регистратор = СчетФактура.ДокументОснование
	|		И НЕ СчетФактура.Исправление
	|		И НЕ СчетФактура.ПометкаУдаления
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивРегистраторов)
	|	И СчетФактура.Проведен
	|
	|ИТОГИ ПО
	|	Ссылка
	|");
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	
	МассивСчетовФактур = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСЗаписиКнигиПродаж.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСЗаписиКнигиПокупок.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			//++ НЕ УТ
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтражениеДокументовВРеглУчете.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			//-- НЕ УТ
			
			Блокировка.Заблокировать();
			
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
			
			Движения = Новый Структура;
			
			НДСЗаписиКнигиПродаж = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей();
			НДСЗаписиКнигиПродаж.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Движения.Вставить("НДСЗаписиКнигиПродаж", НДСЗаписиКнигиПродаж);
			
			НДСЗаписиКнигиПокупок = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей();
			НДСЗаписиКнигиПокупок.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Движения.Вставить("НДСЗаписиКнигиПокупок", НДСЗаписиКнигиПокупок);
			
			//++ НЕ УТ
			ОтражениеДокументовВРеглУчете = РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей();
			ОтражениеДокументовВРеглУчете.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Движения.Вставить("ОтражениеДокументовВРеглУчете", ОтражениеДокументовВРеглУчете);
			
			Хозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			Хозрасчетный.Отбор.Регистратор.Установить(Выборка.Ссылка);
			Движения.Вставить("Хозрасчетный", Хозрасчетный);
			//-- НЕ УТ
			
			Регистры = Новый Структура;
			Регистры.Вставить("НДСЗаписиКнигиПродаж");
			Регистры.Вставить("НДСЗаписиКнигиПокупок");
			//++ НЕ УТ
			Регистры.Вставить("ОтражениеДокументовВРеглУчете");
			//-- НЕ УТ
			
			ИнициализироватьДанныеДокумента(Выборка.Ссылка, ДополнительныеСвойства, Регистры); 
			
			ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Ложь);
			ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПокупок(ДополнительныеСвойства, Движения, Ложь);
			
			//++ НЕ УТ
			ВыборкаДатыОтражения = Выборка.Выбрать();
			Пока ВыборкаДатыОтражения.Следующий() Цикл
				РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
					ДополнительныеСвойства, 
					ВыборкаДатыОтражения.Организация,
					ВыборкаДатыОтражения.ДатаОтражения);
			КонецЦикла;
			
			Если ПризнакОтменаПроведения Тогда
				// При отмене проведения регистрировать к отражению не требуется, 
				// но необходимо удалить неактуальные проводки,
				// поэтому очистим таблицу выборочной регистрции к отражению.
				ДополнительныеСвойства.ТаблицаВыборочнойРегистрацииКОтражениюВРеглУчете.Очистить();
			КонецЕсли;
		
			Документ = Новый Структура("Ссылка, Движения", Выборка.Ссылка, Движения);
			РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(Документ, ДополнительныеСвойства, Движения, Ложь);
			//-- НЕ УТ
			
			Для каждого Движение Из Движения Цикл
				Движение.Значение.Записать();
			КонецЦикла;
			//++ НЕ УТКА
			МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(Документ, ДополнительныеСвойства, Движения, Ложь);
			//-- НЕ УТКА
			
			МассивСчетовФактур.Добавить(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не удалось выполнить отражение в учете НДС документа ""%1"" по причине: %2'"),
					Выборка.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров для отбора данных по полученным авансам
// 
// Возвращаемое значение:
//	Структура - параметры отбора.
//
Функция ОтборПолученныхАвансов() Экспорт
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("НачалоПериода");
	СтруктураОтбора.Вставить("КонецПериода");
	СтруктураОтбора.Вставить("ПравилоОтбораАванса");
	СтруктураОтбора.Вставить("СтавкаНДСПоУмолчанию");
	СтруктураОтбора.Вставить("Организация");
	СтруктураОтбора.Вставить("РасчетныйДокумент");
	
	Возврат СтруктураОтбора;
	
КонецФункции

// Заполняет таблицу ПолученныеАвансы данными для формирования счетов-фактур на аванс
//
// Параметры:
//	ОтборАвансов - Структура - Параметры отбора полученных авансов
//	ПолученныеАвансы - Таблица для заполнения данными о полученных авансах
//	РасчетныеДокументыБезСчетаФактуры - Массив - Заполняется списком документов, по которым не сформировались счета-фактуры
//
Процедура ЗаполнитьПолученныеАвансыДляСФ(ОтборАвансов, ПолученныеАвансы, РасчетныеДокументыБезСчетаФактуры = Неопределено) Экспорт
	
	НачалоПериода		= НачалоДня(ОтборАвансов.НачалоПериода);
	КонецПериода		= КонецДня(ОтборАвансов.КонецПериода);
	РасчетныйДокумент	= ОтборАвансов.РасчетныйДокумент;
	Организация			= ОтборАвансов.Организация;
	
	СтавкаНДСПоУмолчанию			= ?(
		ЗначениеЗаполнено(ОтборАвансов.СтавкаНДСПоУмолчанию),
		ОтборАвансов.СтавкаНДСПоУмолчанию,
		Перечисления.СтавкиНДС.НДС18_118);
		
	Если НЕ ЗначениеЗаполнено(ОтборАвансов.ПравилоОтбораАванса) Тогда
		ОтборАвансов.Вставить("ПравилоОтбораАванса", ПравилоОтбораАвансаОрганизации(Организация));
	КонецЕсли;
	
	ПравилоОтбораАванса = ОтборАвансов.ПравилоОтбораАванса;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если РасчетныйДокумент = Неопределено
			ИЛИ ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		Выписки = ВзаиморасчетыСервер.ВыпискиПоРасчетномуСчету(НачалоПериода, КонецПериода, Организация, РасчетныйДокумент);
	КонецЕсли;
	
	ИсключаемыеСчетаФактуры = Новый ТаблицаЗначений;
	ИсключаемыеСчетаФактуры.Колонки.Добавить("ДокументОснование");
	ИсключаемыеСчетаФактуры.Колонки.Добавить("Контрагент");
	ИсключаемыеСчетаФактуры.Колонки.Добавить("Организация");
	
	Если РасчетныеДокументыБезСчетаФактуры = Неопределено Тогда
		РасчетныеДокументыБезСчетаФактуры = Новый Массив
	КонецЕсли;
	
	ВозможныйТипДокументаОснования = Метаданные.Документы.СчетФактураВыданныйАванс.Реквизиты.ДокументОснование.Тип;
	
	Результат = РезультатЗапросаПоАвансам(НачалоПериода, КонецПериода, Организация, РасчетныйДокумент, ПравилоОтбораАванса);
	
	//Выборка по дням
	ВыборкаДень         = Результат[4].Выбрать(ОбходРезультатазапроса.ПоГруппировкам);
	ТаблицаСчетовФактур = Результат[5].Выгрузить();
	ТаблицаСчетовФактур.Индексы.Добавить("СчетФактура, Контрагент");
	
	//Проверяем ежеденевный результат авансов
	Пока ВыборкаДень.Следующий() Цикл
		
		ВыборкаКонтрагент = ВыборкаДень.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			ВыборкаДокумент = ВыборкаКонтрагент.Выбрать(ОбходРезультатазапроса.ПоГруппировкам);
			//Проверяем каждый аванс в рамках одного дня
			Пока ВыборкаДокумент.Следующий() Цикл
				
				Если ВыборкаДокумент.ДокументОснование = NULL Тогда
					Продолжить;
				КонецЕсли;
				
				// Подготовим таблицу аваносов по документу с учетом правила отбора авансов.
				Авансы = Новый ТаблицаЗначений;
				
				Авансы.Колонки.Добавить("Организация");
				Авансы.Колонки.Добавить("Контрагент");
				Авансы.Колонки.Добавить("ДокументОснование");
				Авансы.Колонки.Добавить("ВалютаДокумента");
				Авансы.Колонки.Добавить("СтавкаНДС");
				
				Авансы.Колонки.Добавить("Сумма");
				Авансы.Колонки.Добавить("СуммаНДС");
				Авансы.Колонки.Добавить("ВалютнаяСумма");
				
				ВыборкаАванс = ВыборкаДокумент.Выбрать(); 
				
				Пока ВыборкаАванс.Следующий() Цикл
					
					//Проверяем если аванс уже зарегистрирован
					ТекущайАванс = Новый Структура("ДокументОснование, Контрагент", 
						ВыборкаАванс.ДокументОснование,
						ВыборкаАванс.Контрагент);
						
					Если ИсключаемыеСчетаФактуры.НайтиСтроки(ТекущайАванс).Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;
						
					СформироватьСФ = Ложь;
					
					// Получим дату аванса
					ТипРасчетногоДокумента = ТипЗнч(ВыборкаАванс.ДокументОснование);
					Если ТипРасчетногоДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
						СтрокаВыписки = Выписки.Найти(ВыборкаАванс.ДокументОснование, "Документ");
						Если СтрокаВыписки = Неопределено Тогда
							// В этом периоде не было выписки по расчетному счету
							Продолжить;
						КонецЕсли; 
						ДатаПоступленияАванса = КонецДня(СтрокаВыписки.ДатаПолученияВыписки);
					Иначе
						ДатаПоступленияАванса = КонецДня(ВыборкаАванс.ДатаДокументаОснования);
					КонецЕсли; 
					
					//Исключаем авансы других периодов
					Если ДатаПоступленияАванса < КонецДня(НачалоПериода) ИЛИ ДатаПоступленияАванса > КонецПериода Тогда
						Продолжить
					КонецЕсли;
					
					// Согласно настройке определим необходимость регистрации с/ф
					Если ПравилоОтбораАванса = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ВсеОплаты Тогда
						
						СформироватьСФ = ?(ВыборкаАванс.ВалютнаяСумма > 0, Истина, Ложь);
						ДатаЗачетаАванса = ДатаПоступленияАванса;
						
					ИначеЕсли ПравилоОтбораАванса = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеДня Тогда
						
						Если КонецДня(ВыборкаАванс.Период) >= КонецДня(ДатаПоступленияАванса) Тогда
							СформироватьСФ = ?(ВыборкаАванс.ВалютнаяСумма > 0, Истина, Ложь);
							ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
						КонецЕсли;
						
					ИначеЕсли ПравилоОтбораАванса = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней Тогда
						
						Если КонецДня(ВыборкаАванс.Период) >= КонецКвартала(ДатаПоступленияАванса)
							ИЛИ (КонецДня(ВыборкаАванс.Период) - НачалоДня(ДатаПоступленияАванса)) >= (4 * 86400) Тогда
							
							СформироватьСФ = ?(ВыборкаАванс.ВалютнаяСумма > 0, Истина, Ложь);
							Если КонецДня(ДатаПоступленияАванса + 345600) > КонецКвартала(ДатаПоступленияАванса) Тогда
								// Дата поступления аванса раньше менее чем на пять дней меньше конца квартала
								ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
							Иначе
								// На пятый день после поступления аванса
								ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса + 345600);
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли ПравилоОтбораАванса = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца Тогда
						
						Если КонецДня(ВыборкаАванс.Период) >= КонецМесяца(ДатаПоступленияАванса) Тогда
							СформироватьСФ = ?(ВыборкаАванс.ВалютнаяСумма > 0, Истина, Ложь);
							ДатаЗачетаАванса = КонецМесяца(ДатаПоступленияАванса);
						КонецЕсли;
						
					ИначеЕсли ПравилоОтбораАванса = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода Тогда
						
						Если КонецДня(ВыборкаАванс.Период) >= КонецКвартала(ДатаПоступленияАванса) Тогда
							СформироватьСФ = ?(ВыборкаАванс.ВалютнаяСумма > 0, Истина, Ложь);
							ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
						КонецЕсли;
						
					КонецЕсли;
					
					Если СформироватьСФ Тогда
						
						МассивКоэффициентов = Новый Массив; 
							Если ВыборкаАванс.Сумма18 = 0 
							И ВыборкаАванс.Сумма10 = 0 
							И ВыборкаАванс.СуммаБезНДС = 0
							И СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.НДС18_118 Тогда
							// Всю сумму отнесем к ставке 18%
							МассивКоэффициентов.Добавить(1);
						Иначе
							МассивКоэффициентов.Добавить(ВыборкаАванс.Сумма18);
						КонецЕсли;
						
						Если ВыборкаАванс.Сумма18 = 0 
							И ВыборкаАванс.Сумма10 = 0 
							И ВыборкаАванс.СуммаБезНДС = 0
							И СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.НДС10_110 Тогда
							// Всю сумму отнесем к ставке 10%
							МассивКоэффициентов.Добавить(1);
						Иначе
							МассивКоэффициентов.Добавить(ВыборкаАванс.Сумма10);
						КонецЕсли;
						МассивКоэффициентов.Добавить(ВыборкаАванс.СуммаБезНДС);
						
						ВалютнаяСуммаПоСтавкам = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
							ВыборкаАванс.ВалютнаяСумма,
							МассивКоэффициентов);
							
						СуммаПоСтавкам = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
							ВыборкаАванс.Сумма,
							МассивКоэффициентов);
						
						МассивСтавок = Новый Массив;
						МассивСтавок.Добавить(Перечисления.СтавкиНДС.НДС18_118);
						МассивСтавок.Добавить(Перечисления.СтавкиНДС.НДС10_110);
						
						Индекс = 0;
						Для каждого Ставка Из МассивСтавок Цикл
							
							Сумма = СуммаПоСтавкам[Индекс];
							ВалютнаяСумма = ВалютнаяСуммаПоСтавкам[Индекс];
							Индекс = Индекс + 1;
							Если Сумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							НоваяСтрока = Авансы.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаАванс);
							
							НоваяСтрока.СтавкаНДС = Ставка;
							НоваяСтрока.Сумма = Сумма;
							НоваяСтрока.ВалютнаяСумма = ВалютнаяСумма;
							НоваяСтрока.СуммаНДС  = Окр(Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС), 2);
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ПоляГруппировки = "Контрагент, ДокументОснование, Организация, ВалютаДокумента, СтавкаНДС";
				ПоляСуммирования = "Сумма, СуммаНДС, ВалютнаяСумма";
				Авансы.Свернуть(ПоляГруппировки, ПоляСуммирования);
				
				Для каждого СтрокаАвансы Из Авансы Цикл
					
					Если ВозможныйТипДокументаОснования.СодержитТип(ТипЗнч(СтрокаАвансы.ДокументОснование)) Тогда
						
						НоваяСтрока = ПолученныеАвансы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАвансы);
						
						ОтборСчетовФактур = Новый Структура();
						ОтборСчетовФактур.Вставить("ДокументОснование", СтрокаАвансы.ДокументОснование);
						ОтборСчетовФактур.Вставить("Контрагент",        СтрокаАвансы.Контрагент);
						
						РезультатПоиска = ТаблицаСчетовФактур.НайтиСтроки(ОтборСчетовФактур);
						Если РезультатПоиска.Количество() = 0  Тогда
							// Поиск по пустому контрагенту
							ОтборСчетовФактур.Контрагент = Неопределено;
							РезультатПоиска = ТаблицаСчетовФактур.НайтиСтроки(ОтборСчетовФактур);
						КонецЕсли;
						
						Если РезультатПоиска.Количество() = 0 Тогда
							НоваяСтрока.СФсформирован = Ложь;
						Иначе
							РеквизитыСчетаФактуры = РезультатПоиска[0];
							НоваяСтрока.СФсформирован = Истина;
							ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСчетаФактуры);
							Если НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
								НоваяСтрока.СуммаСчетаФактуры = РеквизитыСчетаФактуры.СуммаАванса18;
							Иначе
								НоваяСтрока.СуммаСчетаФактуры = РеквизитыСчетаФактуры.СуммаАванса10;
							КонецЕсли;
						КонецЕсли;
						
						Если НоваяСтрока.ДатаВыписки = '00010101' Тогда
							НоваяСтрока.ДатаВыписки = ДатаЗачетаАванса;
						КонецЕсли;
						
					ИначеЕсли РасчетныеДокументыБезСчетаФактуры.Найти(ВыборкаАванс.ДокументОснование) = Неопределено Тогда
						РасчетныеДокументыБезСчетаФактуры.Добавить(ВыборкаАванс.ДокументОснование);
					КонецЕсли;
					
					НоваяСтрока = ИсключаемыеСчетаФактуры.Добавить();
					НоваяСтрока.Документоснование = СтрокаАвансы.ДокументОснование;
					НоваяСтрока.Контрагент = СтрокаАвансы.Контрагент;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает номенклатуру заказов клиентов, оплаченных основанием счета-фактуры
//
// Параметры:
// 	 ПлатежныйДокумент - ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств, ДокументСсылка.ПриходныйКассовыйОрдер - Документ получения аванса
//
// ВозвращаемоеЗначение:
// 	 Товары - ТаблицаЗначений - Номенклатура заказов
//
Функция ТоварыЗаказовКлиентов(ПлатежныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗаказыКлиентов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеДС
	|	ПО
	|		ЗаказКлиента.Ссылка = ПоступлениеДС.ОснованиеПлатежа
	|		И ПоступлениеДС.Ссылка = &ПлатежныйДокумент
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеДС
	|	ПО
	|		ЗаказКлиента.Ссылка = ПоступлениеДС.Заказ
	|		И ПоступлениеДС.Ссылка = &ПлатежныйДокумент
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПоступлениеДС
	|	ПО
	|		ЗаказКлиента.Ссылка = ПоступлениеДС.ОснованиеПлатежа
	|		И ПоступлениеДС.Ссылка = &ПлатежныйДокумент
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПоступлениеДС
	|	ПО
	|		ЗаказКлиента.Ссылка = ПоступлениеДС.Заказ
	|		И ПоступлениеДС.Ссылка = &ПлатежныйДокумент
	|;
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК ЗаказКлиента,
	|	Товары.Ссылка.Валюта КАК Валюта,
	|	Товары.Номенклатура,
	|	Товары.Содержание,
	|	Товары.СтавкаНДС,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(Товары.СуммаСНДС) КАК СуммаСНДС
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЗаказыКлиентов КАК ЗаказыКлиентов
	|	ПО
	|		Товары.Ссылка = ЗаказыКлиентов.Ссылка
	|ГДЕ
	|	Товары.СтавкаНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18), 
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118), 
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), 
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110))
	|
	|СГРУППИРОВАТЬ ПО 
	|	Товары.Ссылка,
	|	Товары.Номенклатура,
	|	Товары.Содержание,
	|	Товары.СтавкаНДС";
	
	Запрос.УстановитьПараметр("ПлатежныйДокумент", ПлатежныйДокумент);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Возврат Товары;
	
КонецФункции

// Выполняет распределения авансов по номенклатуре пропорционально сумме, с учетом ставки НДС
//
// Параметры:
// 	Авансы - ТаблицаЗначений - Авансы для распределения
// 	Товары - ТаблицаЗначений - Номенклатура, на которую необходимо выполнить распределение
// 	ПлатежныйДокумент - ДокументСсылка - Документ оплаты
//
Процедура РаспределитьАвасыПоТоварам(Авансы, Товары, ПлатежныйДокумент) Экспорт
	
	АвансыКРаспределению = Авансы.Скопировать();
	АвансыКРаспределению.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Содержание,
	|	Товары.Валюта,
	|	Товары.СуммаСНДС,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта КАК Валюта,
	|	КурсыВалют.Курс КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Товары.Валюта
	|			ИЗ
	|				Товары)) КАК КурсыВалют
	|;
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Содержание,
	|	ВЫБОР
	|		КОГДА РеквизитыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) 
	|			   И РеквизитыНоменклатуры.ВидНоменклатуры.ВариантОказанияУслуг В 
	|					(ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме),
	|					 ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.Партнером))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга) 
	|		КОГДА РеквизитыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			  ИЛИ РеквизитыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	КОНЕЦ КАК ТипЗапасов,
	|	Товары.Валюта,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	СУММА(Товары.СуммаСНДС 
	|		* ЕСТЬNULL(КурсыВалют.Курс, 1) 
	|		/ ЕСТЬNULL(КурсыВалют.Кратность, 1)) КАК СуммаСНДС,
	|	СУММА(Товары.СуммаНДС 
	|		* ЕСТЬNULL(КурсыВалют.Курс, 1) 
	|		/ ЕСТЬNULL(КурсыВалют.Кратность, 1)) КАК СуммаНДС 
	|ИЗ
	|	Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		КурсыВалют КАК КурсыВалют
	|	ПО
	|		Товары.Валюта = КурсыВалют.Валюта
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК РеквизитыНоменклатуры 
	|	ПО
	|		Товары.Номенклатура = РеквизитыНоменклатуры.Ссылка
	|	
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	ВЫБОР
	|		КОГДА РеквизитыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) 
	|			   И РеквизитыНоменклатуры.ВидНоменклатуры.ВариантОказанияУслуг В 
	|					(ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме),
	|					 ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.Партнером))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга) 
	|		КОГДА РеквизитыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			  ИЛИ РеквизитыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	КОНЕЦ,
	|	Товары.Содержание,
	|	Товары.Валюта,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ
	|";
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("Период", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежныйДокумент, "Дата"));
	
	ТоварыБаза = Запрос.Выполнить().Выгрузить();
	
	Авансы.Очистить();
	Для каждого СтрокаАвансов Из АвансыКРаспределению Цикл
		
		Отбор = Новый Структура("СтавкаНДС");
		Отбор.Вставить("СтавкаНДС", СтрокаАвансов.СтавкаНДС);
		СтрокиТоваров = ТоварыБаза.НайтиСтроки(Отбор);
		
		МассивКоэффициентов = Новый Массив;
		Для каждого СтрокаТовар Из СтрокиТоваров Цикл
			МассивКоэффициентов.Добавить(СтрокаТовар.СуммаСНДС);
		КонецЦикла;
		
		Если МассивКоэффициентов.Количество() = 0 Тогда
			НоваяСтрока = Авансы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАвансов);
			НоваяСтрока.ТипЗапасов = Перечисления.ТипыЗапасов.Товар;
		КонецЕсли;
		
		РаспределениеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаАвансов.Сумма, МассивКоэффициентов);
		РаспределениеСуммыНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаАвансов.СуммаНДС, МассивКоэффициентов);
		
		Индекс = 0;
		Для каждого СтрокаТовар Из СтрокиТоваров Цикл
			
			Сумма    = ?(РаспределениеСуммы    = Неопределено, 0, РаспределениеСуммы[Индекс]);
			СуммаНДС = ?(РаспределениеСуммыНДС = Неопределено, 0, РаспределениеСуммыНДС[Индекс]);
			Если Сумма = 0 Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Авансы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
			НоваяСтрока.Сумма    = Сумма;
			НоваяСтрока.СуммаНДС = СуммаНДС;
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает реквизиты счета-фактуры.
//
// Параметры:
//	СчетФактура - ДокументСсылка.СчетФактураВыданныйАванс - Счет-фактура, данные которого необходимо получить.
//
// Возвращаемое значение:
//	Результат - Структура - Реквизиты счета-фактуры
//
Функция ДанныеСчетаФактуры(СчетФактура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СчетФактураВыданныйАванс.ДокументОснование                КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданныйАванс.Исправление
	|			ТОГДА СчетФактураВыданныйАванс.СчетФактураОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                     КАК СчетФактураОснование,
	|	СчетФактураВыданныйАванс.Организация                      КАК Организация,
	|	СчетФактураВыданныйАванс.Подразделение                    КАК Подразделение,
	|	СчетФактураВыданныйАванс.Контрагент                       КАК Контрагент,
	|	СчетФактураВыданныйАванс.КодВидаОперации                  КАК КодВидаОперации,
	|	СчетФактураВыданныйАванс.ПравилоОтбораАванса              КАК ПравилоОтбораАванса,
	|	СчетФактураВыданныйАванс.ИдентификаторГосКонтракта        КАК ИдентификаторГосКонтракта,
	|	СчетФактураВыданныйАванс.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента,
	|	СчетФактураВыданныйАванс.ДатаПлатежноРасчетногоДокумента  КАК ДатаПлатежноРасчетногоДокумента,
	|	СчетФактураВыданныйАванс.Авансы.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		ТипЗапасов,
	|		Содержание,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|	) КАК Авансы
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
	|ГДЕ
	|	СчетФактураВыданныйАванс.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Результат.Вставить("Авансы", Выборка.Авансы.Выгрузить());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТ

#Область ПроведениеПоРеглУчету

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	ТекстЗапроса - Строка - Текст запроса отражения в регл. учете.
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстНачислениеНДС = "
	|ВЫБРАТЬ // Начисление НДС с полученного аванса <Дт 76.АВ :: Кт 68.02>
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Регистр.НДС,0) КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам) КАК СчетДт,
	|
	|	Операция.Контрагент КАК СубконтоДт1,
	|	Операция.ДокументОснование КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР
	|		КОГДА Операция.ДокументОснование ССЫЛКА Документ.ВводОстатков
	|		ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС)
	|	КОНЕЦ КАК СчетКт,
	|
	|	ВЫБОР
	|		КОГДА Операция.ДокументОснование ССЫЛКА Документ.ВводОстатков
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|	КОНЕЦ КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Начисление НДС с полученного аванса"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданныйАванс КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж КАК Регистр
	|	ПО
	|		Регистр.Регистратор = Операция.Ссылка
	|";
	
	ТекстВычетНДС = "
	|ВЫБРАТЬ // Принятие к вычету НДС с полученного аванса <Дт 68.02 :: Кт 76.АВ>
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(Регистр.Период, Операция.Дата) КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Регистр.НДС,0) КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетДт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам) КАК СчетКт,
	|
	|	Операция.Контрагент КАК СубконтоКт1,
	|	Операция.ДокументОснование КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Принятие к вычету НДС с полученного аванса"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданныйАванс КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок КАК Регистр
	|	ПО
	|		Регистр.Регистратор = Операция.Ссылка
	|";
	
	Возврат
		ТекстНачислениеНДС
		+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстВычетНДС;
		
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, 
// необходимых для отражения в регламетированном учете
//
// Возвращаемое значение:
//	ТекстЗапроса - Строка - Текст запроса cоздания временных таблиц.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат "";
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСЗаписиКнигиПокупок(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	//++ НЕ УТ
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ
	
	ПроведениеСерверУТ.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ЕСТЬNULL(ДанныеДокумента.Организация.ОбособленноеПодразделение, ЛОЖЬ) КАК ОбособленноеПодразделение,
	|	ДанныеДокумента.Организация.ЦифровойИндексОбособленногоПодразделения КАК ЦифровойИндексОбособленногоПодразделения,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	ДанныеДокумента.ПравилоОтбораАванса,
	|	ЕСТЬNULL(ДанныеДокумента.ДокументОснование.Дата, ДанныеДокумента.Дата) КАК ДатаОснования,
	|	ДанныеДокумента.ДатаВыставления,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.КодВидаОперации,
	|	ДанныеДокумента.ВыставленВЭлектронномВиде,
	|	ДанныеДокумента.Исправление КАК Исправление,
	|	ДанныеДокумента.НомерИсправления КАК НомерИсправления,
	|	ДанныеДокумента.СчетФактураОснование КАК СчетФактураОснование,
	|	ДанныеДокумента.СчетФактураОснование.Дата КАК ДатаСчетаФактурыОснования,
	|	ДанныеДокумента.СчетФактураОснование.Номер КАК НомерСчетаФактурыОснования,
	|	ДанныеДокумента.Подразделение   КАК Подразделение,
	|	ДанныеДокумента.Ответственный   КАК Ответственный,
	|	ДанныеДокумента.Проведен        КАК Проведен,
	|	ДанныеДокумента.Сумма           КАК Сумма,
	|	ДанныеДокумента.Комментарий     КАК Комментарий,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
		
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	
	Номер = УчетНДСПереопределяемый.НомерСчетаФактурыНаПечать(
				?(Реквизиты.Исправление, Реквизиты.НомерСчетаФактурыОснования, Реквизиты.Номер), 
				Ложь,
				Реквизиты.ОбособленноеПодразделение, 
				Реквизиты.ЦифровойИндексОбособленногоПодразделения);
	
	Запрос.УстановитьПараметр("Организация",                Реквизиты.Организация);
	Запрос.УстановитьПараметр("Покупатель",                 Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ДокументОплаты",             Реквизиты.ДокументОснование);
	Запрос.УстановитьПараметр("ПравилоОтбораАванса",        Реквизиты.ПравилоОтбораАванса);
	Запрос.УстановитьПараметр("ДатаОснования",              Реквизиты.ДатаОснования);
	Запрос.УстановитьПараметр("ДатаВыставления",            Реквизиты.ДатаВыставления);
	Запрос.УстановитьПараметр("Номер",                      Номер);
	Запрос.УстановитьПараметр("Период",                     Реквизиты.Период);
	Запрос.УстановитьПараметр("КодВидаОперации",            Реквизиты.КодВидаОперации);
	Запрос.УстановитьПараметр("ВыставленВЭлектронномВиде",  Реквизиты.ВыставленВЭлектронномВиде);
	Запрос.УстановитьПараметр("Валюта",                     Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Исправление",				Реквизиты.Исправление);
	Запрос.УстановитьПараметр("НомерИсправления",			Реквизиты.НомерИсправления);
	Запрос.УстановитьПараметр("СчетФактураОснование",		Реквизиты.СчетФактураОснование);
	Запрос.УстановитьПараметр("ДатаСчетаФактурыОснования",	Реквизиты.ДатаСчетаФактурыОснования);
	Запрос.УстановитьПараметр("ТипыЗапасовСобственные",     ТипыЗапасовСобственные());

	ПериодЗаписиЖурнала = 
		?(ЗначениеЗаполнено(Реквизиты.ДатаВыставления), Реквизиты.ДатаВыставления, Реквизиты.Период);  
	Запрос.УстановитьПараметр("ПериодЗаписиЖурнала",        ПериодЗаписиЖурнала);
	
	КодВидаОперацииКомиссия = 
		УчетНДСПереопределяемый.КодВидаОперацииКомиссия(Реквизиты.КодВидаОперации, ПериодЗаписиЖурнала);
	Запрос.УстановитьПараметр("КодВидаОперацииКомиссия",    КодВидаОперацииКомиссия);
	
	Запрос.УстановитьПараметр("Проведен",                   Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ПометкаУдаления",            Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",    ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	Запрос.УстановитьПараметр("Комментарий",                Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("Сумма",                      Реквизиты.Сумма);
	Запрос.УстановитьПараметр("Валюта",                     Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Контрагент",                 Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Подразделение",              Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Ответственный",              Реквизиты.Ответственный);
	
	ИнформацияПоИсправлению = "";
	Если Реквизиты.Исправление
		И ЗначениеЗаполнено(Реквизиты.НомерИсправления) Тогда
		ИнформацияПоИсправлению = НСтр("ru='Исправление %НомерИсправления от %ДатаИсправления'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоИсправлению = СтрЗаменить(ИнформацияПоИсправлению, "%НомерИсправления", Реквизиты.НомерИсправления);
		ИнформацияПоИсправлению = СтрЗаменить(ИнформацияПоИсправлению, "%ДатаИсправления", Реквизиты.Период);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоИсправлению", ИнформацияПоИсправлению);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ПериодЗаписиЖурнала                       КАК Период,
	|	&Организация                               КАК Организация,
	|	&Покупатель                                КАК Контрагент,
	|	ТаблицаАвансы.Ссылка                       КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры) КАК ЧастьЖурнала,
	|	&ДатаВыставления                           КАК ДатаВыставленияПолучения,
	|	ВЫБОР
	|		КОГДА &ВыставленВЭлектронномВиде
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ                                      КАК КодСпособаВыставленияПолучения,
	|	&КодВидаОперации                           КАК КодВидаОперации,
	|	&Номер                                     КАК НомерСчетаФактуры,
	|	ВЫБОР КОГДА &Исправление ТОГДА
	|			&ДатаСчетаФактурыОснования
	|		ИНАЧЕ &Период
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ВЫБОР 
	|		КОГДА &Исправление ТОГДА
	|			&НомерИсправления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО 
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР 
	|		КОГДА &Исправление ТОГДА
	|			&Период
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО 
	|	КОНЕЦ КАК ДатаИсправления,
	|	&Валюта                                    КАК Валюта,	
	|	СУММА(ТаблицаАвансы.Сумма)                 КАК СуммаПоСчетуФактуре,
	|	СУММА(ТаблицаАвансы.СуммаНДС)              КАК СуммаНДС,
	|	0                                          КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	0                                          КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	0                                          КАК СуммаНДСРазницаУменьшение,
	|	0                                          КАК СуммаНДСРазницаУвеличение,
	|	ЛОЖЬ                                       КАК ПоСтавкеБезНДС,
	|	ЛОЖЬ                                       КАК СчетФактураНеВыставляется,
	|	
	|	СУММА(ВЫБОР КОГДА ТаблицаАвансы.ТипЗапасов В (&ТипыЗапасовСобственные)
	|			ТОГДА 0 
	|			ИНАЧЕ ТаблицаАвансы.Сумма
	|		КОНЕЦ)                                   КАК СуммаПоСчетуФактуреКомиссия,
	|	СУММА(ВЫБОР КОГДА ТаблицаАвансы.ТипЗапасов В (&ТипыЗапасовСобственные)
	|			ТОГДА 0 
	|			ИНАЧЕ ТаблицаАвансы.СуммаНДС
	|		КОНЕЦ)                                   КАК СуммаНДСКомиссия,
	|	0                                          КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	0                                          КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	0                                          КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	0                                          КАК СуммаНДСРазницаУвеличениеКомиссия,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ТаблицаАвансы.ТипЗапасов В (&ТипыЗапасовСобственные)
	|			ТОГДА """"
	|		ИНАЧЕ &КодВидаОперацииКомиссия
	|	КОНЕЦ)                                     КАК КодВидаОперацииКомиссия
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс.Авансы КАК ТаблицаАвансы
	|ГДЕ
	|	ТаблицаАвансы.Ссылка = &Ссылка
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАвансы.Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьВтТаблицаАвансы(Запрос)
	
	Если Запрос.Параметры.Свойство("ВтТаблицаАвансыИнициализирована") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВтТаблицаАвансы = Новый Запрос;
	ЗапросВтТаблицаАвансы.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросВтТаблицаАвансы.УстановитьПараметр("Ссылка",                 Запрос.Параметры.Ссылка);
	ЗапросВтТаблицаАвансы.УстановитьПараметр("Организация",            Запрос.Параметры.Организация);
	ЗапросВтТаблицаАвансы.УстановитьПараметр("КодВидаОперации",        Запрос.Параметры.КодВидаОперации);
	ЗапросВтТаблицаАвансы.УстановитьПараметр("Покупатель",             Запрос.Параметры.Покупатель);
	ЗапросВтТаблицаАвансы.УстановитьПараметр("ДокументОплаты",         Запрос.Параметры.ДокументОплаты);
	ЗапросВтТаблицаАвансы.УстановитьПараметр("ДатаОснования",          Запрос.Параметры.ДатаОснования);
	ЗапросВтТаблицаАвансы.УстановитьПараметр("ТипыЗапасовСобственные", Запрос.Параметры.ТипыЗапасовСобственные);
	
	ЗапросВтТаблицаАвансы.Текст =
	"ВЫБРАТЬ
	|	&ДатаОснования                                        КАК Период,
	|	&Организация                                          КАК Организация,
	|	&ДокументОплаты                                       КАК СчетФактура,
	|	&Покупатель                                           КАК Покупатель,
	|	&ДокументОплаты                                       КАК ДокументОплаты,
	|	&ДатаОснования                                        КАК ДатаОплаты,
	|	&ДатаОснования                                        КАК ДатаСобытия,
	|	ТаблицаАвансы.СтавкаНДС                               КАК СтавкаНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаАвансы.ТипЗапасов В (&ТипыЗапасовСобственные) 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                 КАК ВключатьВКнигуПродаж,
	|	
	|	СУММА(ТаблицаАвансы.СуммаНДС)                         КАК НДС,
	|	СУММА(ВЫБОР КОГДА ТаблицаАвансы.Сумма = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаАвансы.Сумма - ТаблицаАвансы.СуммаНДС
	|	КОНЕЦ)                                                КАК СуммаБезНДС,
	|	ТаблицаАвансы.Ссылка.НомерПлатежноРасчетногоДокумента КАК НомерДокументаОплаты,
	|	ТаблицаАвансы.Ссылка.ДатаПлатежноРасчетногоДокумента  КАК ДатаДокументаОплаты,
	|	&КодВидаОперации                                      КАК КодВидаОперации
	|ПОМЕСТИТЬ ВтТаблицаАвансы
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс.Авансы КАК ТаблицаАвансы
	|	
	|ГДЕ
	|	ТаблицаАвансы.Ссылка = &Ссылка
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР 
	|		КОГДА ТаблицаАвансы.ТипЗапасов В (&ТипыЗапасовСобственные) 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаАвансы.СтавкаНДС,
	|	ТаблицаАвансы.Ссылка";
	
	Результат = ЗапросВтТаблицаАвансы.ВыполнитьПакет();
	
	Запрос.УстановитьПараметр("ВтТаблицаАвансыИнициализирована", Истина);
	
КонецПроцедуры

Процедура ИнициализироватьВтТаблицаНДСЗаписиКнигиПокупок(Запрос)
	
	Если Запрос.Параметры.Свойство("ВтТаблицаНДСЗаписиКнигиПокупокИнициализирована") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьВтТаблицаАвансы(Запрос);
	
	ЗапросАвансов = Новый Запрос;
	ЗапросАвансов.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросАвансов.УстановитьПараметр("Ссылка",                     Запрос.Параметры.Ссылка);
	ЗапросАвансов.УстановитьПараметр("Организация",                Запрос.Параметры.Организация);
	ЗапросАвансов.УстановитьПараметр("Покупатель",                 Запрос.Параметры.Покупатель);
	ЗапросАвансов.УстановитьПараметр("ДокументОплаты",             Запрос.Параметры.ДокументОплаты);
	ЗапросАвансов.УстановитьПараметр("ПравилоОтбораАванса",        Запрос.Параметры.ПравилоОтбораАванса);
	ЗапросАвансов.УстановитьПараметр("ДатаОснования",              Запрос.Параметры.ДатаОснования);
	ЗапросАвансов.УстановитьПараметр("Период",                     Запрос.Параметры.Период);
	ЗапросАвансов.УстановитьПараметр("ТипыЗапасовСобственные",     Запрос.Параметры.ТипыЗапасовСобственные);
	ЗапросАвансов.УстановитьПараметр("Исправление",                Запрос.Параметры.Исправление);
	ЗапросАвансов.Текст =
	"ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ВтАналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|	И АналитикаУчетаПоПартнерам.Контрагент = &Покупатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.Регистратор                                  КАК Регистратор,
	|	РасчетыСКлиентами.Период                                       КАК Период,
	|	&Организация                                                   КАК Организация,
	|	&Покупатель                                                    КАК Поставщик,
	|	&ДокументОплаты                                                КАК СчетФактура,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСКлиентами.ПредоплатаРегл > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные) 
	|		КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСКлиентами.ПредоплатаРегл < 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученных) 
	|	КОНЕЦ КАК ВидЦенности,
	|	РасчетыСКлиентами.Период                                        КАК ДатаОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	РасчетыСКлиентами.Период                                        КАК ДатаСобытия,
	|	СУММА(ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСКлиентами.ПредоплатаРегл > 0
	|			ТОГДА РасчетыСКлиентами.ПредоплатаРегл
	|		КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСКлиентами.ПредоплатаРегл < 0
	|			ТОГДА -РасчетыСКлиентами.ПредоплатаРегл
	|	КОНЕЦ) КАК СуммаЗачета,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВычетНДССПолученногоАванса) КАК ХозяйственнаяОперация,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСКлиентами.ПредоплатаРегл < 0
	|			ТОГДА ДанныеПервичныхДокументов.Номер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерДокументаОплаты,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСКлиентами.ПредоплатаРегл < 0
	|			ТОГДА ДанныеПервичныхДокументов.Дата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаДокументаОплаты
	|
	|ПОМЕСТИТЬ ВтЗачетАвансов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентами
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтАналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО
	|		ДанныеПервичныхДокументов.Организация = &Организация
	|		И РасчетыСКлиентами.Регистратор = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	НЕ &Исправление
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И РасчетыСКлиентами.РасчетныйДокумент = &ДокументОплаты
	|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	И ((РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыСКлиентами.ПредоплатаРегл > 0)
	|		ИЛИ (РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыСКлиентами.ПредоплатаРегл < 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Регистратор,
	|	РасчетыСКлиентами.Период,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Контрагент,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСКлиентами.ПредоплатаРегл > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные) 
	|		КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСКлиентами.ПредоплатаРегл < 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученных) 
	|	КОНЕЦ,
	|	РасчетыСКлиентами.Период,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСКлиентами.ПредоплатаРегл < 0
	|			ТОГДА ДанныеПервичныхДокументов.Номер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСКлиентами.ПредоплатаРегл < 0
	|			ТОГДА ДанныеПервичныхДокументов.Дата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор                                                КАК Регистратор,
	|	ДанныеРегистра.Период                                                     КАК Период,
	|	&Организация                                                              КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)                      КАК Поставщик,
	|	&ДокументОплаты                                                           КАК СчетФактура,
	|	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВозвратПодарочныхСертификатов) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученных)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|	КОНЕЦ                                                                     КАК ВидЦенности,
	|	
	|	ДанныеРегистра.Период                                                     КАК ДатаОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)           КАК Событие,
	|	ДанныеРегистра.Период                                                     КАК ДатаСобытия,
	|	
	|	ВЫРАЗИТЬ(СУММА(ДанныеРегистра.Сумма
	|		* (РеализацияСертификата.СуммаРегл / РеализацияСертификата.Сумма))
	|		КАК ЧИСЛО(15,2))                                                      КАК СуммаЗачета,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВычетНДССПолученногоАванса)   КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВозвратПодарочныхСертификатов) ТОГДА
	|		ДанныеПервичныхДокументов.Номер
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                                     КАК НомерДокументаОплаты,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВозвратПодарочныхСертификатов) ТОГДА
	|		ДанныеПервичныхДокументов.Дата
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                                     КАК ДатаДокументаОплаты
	|ИЗ
	|	РегистрНакопления.ПодарочныеСертификаты КАК ДанныеРегистра
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ПодарочныеСертификаты КАК РеализацияСертификата
	|	ПО
	|		РеализацияСертификата.ПодарочныйСертификат = ДанныеРегистра.ПодарочныйСертификат
	|		И РеализацияСертификата.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО
	|		ДанныеПервичныхДокументов.Организация = &Организация
	|		И ДанныеРегистра.Регистратор = ДанныеПервичныхДокументов.Документ
	|	
	|ГДЕ
	|	НЕ &Исправление
	|	И РеализацияСертификата.Регистратор = &ДокументОплаты
	|	И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДанныеРегистра.Сумма > 0
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И КОНЕЦПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) <> КОНЕЦПЕРИОДА(РеализацияСертификата.Период, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВозвратПодарочныхСертификатов) ТОГДА
	|		ДанныеПервичныхДокументов.Номер
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВозвратПодарочныхСертификатов) ТОГДА
	|		ДанныеПервичныхДокументов.Дата
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР 
	|			КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА РасчетыСКлиентами.ПредоплатаРегл
	|			КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентами.ПредоплатаРегл
	|		КОНЕЦ) КАК Аванс
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентами
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтАналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	НЕ &Исправление
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И РасчетыСКлиентами.РасчетныйДокумент = &ДокументОплаты
	|	И ((РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И РасчетыСКлиентами.ПредоплатаРегл > 0)
	|		ИЛИ (РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И РасчетыСКлиентами.ПредоплатаРегл < 0))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияСертификата.СуммаРегл КАК Аванс
	|ИЗ
	|	РегистрНакопления.ПодарочныеСертификаты КАК РеализацияСертификата
	|ГДЕ
	|	&Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И РеализацияСертификата.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РеализацияСертификата.Регистратор =  &ДокументОплаты
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАвансы.Период               КАК Период,
	|	ТаблицаАвансы.СчетФактура          КАК СчетФактура,
	|	ТаблицаАвансы.Покупатель           КАК Покупатель,
	|	ТаблицаАвансы.СтавкаНДС            КАК СтавкаНДС,
	|	ТаблицаАвансы.НДС                  КАК НДС,
	|	ТаблицаАвансы.СуммаБезНДС          КАК СуммаБезНДС,
	|	ТаблицаАвансы.КодВидаОперации      КАК КодВидаОперации,
	|	ТаблицаАвансы.ВключатьВКнигуПродаж КАК ВключатьВКнигуПродаж
	|ИЗ
	|	ВтТаблицаАвансы КАК ТаблицаАвансы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗачетАвансов.Период КАК Период,
	|	ЗачетАвансов.Регистратор КАК Регистратор,
	|	ЗачетАвансов.Организация КАК Организация,
	|	ЗачетАвансов.Поставщик КАК Поставщик,
	|	ЗачетАвансов.СчетФактура КАК СчетФактура,
	|	ЗачетАвансов.ВидЦенности КАК ВидЦенности,
	|	ЗачетАвансов.ДатаОплаты КАК ДатаОплаты,
	|	ЗачетАвансов.Событие  КАК Событие,
	|	ЗачетАвансов.ДатаСобытия КАК ДатаСобытия,
	|	ЗачетАвансов.СуммаЗачета КАК СуммаЗачета,
	|	ЗачетАвансов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗачетАвансов.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗачетАвансов.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	МАКСИМУМ(ВЫБОР 
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ) КАК ЕстьНДСПродажи,
	|	СУММА(ВЫБОР 
	|		КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаНДСПродажиБезНДС,
	|	СУММА(ВЫБОР 
	|		КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаНДСПродажиСНДС
	|ИЗ
	|	ВтЗачетАвансов КАК ЗачетАвансов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|	ПО
	|		ЗачетАвансов.Регистратор = НДСЗаписиКнигиПродаж.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗачетАвансов.Период,
	|	ЗачетАвансов.Регистратор,
	|	ЗачетАвансов.Организация,
	|	ЗачетАвансов.Поставщик,
	|	ЗачетАвансов.СчетФактура,
	|	ЗачетАвансов.ВидЦенности,
	|	ЗачетАвансов.ДатаОплаты,
	|	ЗачетАвансов.Событие,
	|	ЗачетАвансов.ДатаСобытия,
	|	ЗачетАвансов.СуммаЗачета,
	|	ЗачетАвансов.ХозяйственнаяОперация,
	|	ЗачетАвансов.НомерДокументаОплаты,
	|	ЗачетАвансов.ДатаДокументаОплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|";
	
	Результат = ЗапросАвансов.ВыполнитьПакет();
	
	ТаблицаАванс = Результат[2].Выгрузить();
	ТаблицаАвансНачислениеНДС = Результат[3].Выгрузить();
	ТаблицаЗачетАванса = Результат[4].Выгрузить();
	ТаблицаНДСЗаписиКнигиПокупок = ВыполнитьЗачетАванса(ТаблицаАванс, ТаблицаАвансНачислениеНДС, ТаблицаЗачетАванса, Запрос.Параметры);
	
	ЗапросАвансов.Параметры.Вставить("ТаблицаНДСЗаписиКнигиПокупок", ТаблицаНДСЗаписиКнигиПокупок);
	ЗапросАвансов.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНДСЗаписиКнигиПокупок.Период,
	|	ТаблицаНДСЗаписиКнигиПокупок.Регистратор,
	|	ТаблицаНДСЗаписиКнигиПокупок.НомерСтроки,
	|	ТаблицаНДСЗаписиКнигиПокупок.Организация,
	|	ТаблицаНДСЗаписиКнигиПокупок.Поставщик,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.ВидЦенности,
	|	ТаблицаНДСЗаписиКнигиПокупок.СтавкаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетУчетаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДокументОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.Событие,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаСобытия,
	|	ТаблицаНДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста,
	|	ТаблицаНДСЗаписиКнигиПокупок.КорректируемыйПериод,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ТаблицаНДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.СуммаБезНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.ХозяйственнаяОперация,
	|	ТаблицаНДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.КодВидаОперации
	|ПОМЕСТИТЬ ВтТаблицаНДСЗаписиКнигиПокупок
	|ИЗ
	|	&ТаблицаНДСЗаписиКнигиПокупок КАК ТаблицаНДСЗаписиКнигиПокупок";
	
	ЗапросАвансов.Выполнить();
	
	Запрос.УстановитьПараметр("ВтТаблицаНДСЗаписиКнигиПокупокИнициализирована", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрСчетФактураПредыдущееИсправление(Запрос)
	
	Если Запрос.Параметры.Свойство("СчетФактураПредыдущееИсправление") Тогда
		Возврат;
	КонецЕсли;

	Если Запрос.Параметры.Исправление Тогда
	
		СчетФактураПредыдущееИсправление = СчетФактураПредыдущееИсправление(
			Запрос.Параметры.СчетФактураОснование, 
			Запрос.Параметры.НомерИсправления)
	
	Иначе
		СчетФактураПредыдущееИсправление = Неопределено;
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СчетФактураПредыдущееИсправление", СчетФактураПредыдущееИсправление);

КонецПроцедуры

Функция ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСЗаписиКнигиПродаж";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ИнициализироватьВтТаблицаАвансы(Запрос);
	
	УстановитьПараметрСчетФактураПредыдущееИсправление(Запрос);
	
#Область СторноИсправление
	ТекстЗапросаСторноИсправление = "
	|
	|ВЫБРАТЬ
	|	&Период                                           КАК Период,
	|	&Организация                                      КАК Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель                   КАК Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура                  КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности                  КАК ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС                    КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты                   КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты               КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие                      КАК Событие,
	|	&Период                                           КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|			ТОГДА ИСТИНА
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период,КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период,КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|	КОНЕЦ                                             КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.КорректируемыйПериод <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА НДСЗаписиКнигиПродаж.КорректируемыйПериод
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период,КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период,КВАРТАЛ)
	|			ТОГДА НДСЗаписиКнигиПродаж.Период
	|	КОНЕЦ                                             КАК КорректируемыйПериод,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|			ТОГДА ИСТИНА
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период,КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период,КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|	КОНЕЦ                                             КАК СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента           КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура      КАК ИсправленныйСчетФактура,
	|	&Исправление                                      КАК Исправление,
	|	-НДСЗаписиКнигиПродаж.СуммаБезНДС                 КАК СуммаБезНДС,
	|	-НДСЗаписиКнигиПродаж.НДС                         КАК НДС,
	|	Значение(Перечисление.ХозяйственныеОперации.НачислениеНДССПолученногоАванса) КАК ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты         КАК НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты          КАК ДатаДокументаОплаты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	&Исправление
	|	И НДСЗаписиКнигиПродаж.Регистратор <> &Ссылка
	|	И Организация = &Организация
	|	И СчетФактура = &ДокументОплаты
	|	И ИсправленныйСчетФактура = &СчетФактураПредыдущееИсправление
	|	И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПолученАванс)
	|	И (НДСЗаписиКнигиПродаж.СуммаБезНДС > 0 ИЛИ НДСЗаписиКнигиПродаж.НДС > 0)
	|";
#КонецОбласти

#Область ТекстЗапросаАвансы
	ТекстЗапросаАвансы =
	"ВЫБРАТЬ
	|	ВЫБОР 
	|		КОГДА &Исправление 
	|			ТОГДА &Период
	|		ИНАЧЕ ТаблицаАвансы.Период
	|	КОНЕЦ                                                      КАК Период,
	|	ТаблицаАвансы.Организация                                  КАК Организация,
	|	ТаблицаАвансы.Покупатель                                   КАК Покупатель,
	|	ТаблицаАвансы.СчетФактура                                  КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)      КАК ВидЦенности,
	|	ТаблицаАвансы.СтавкаНДС                                    КАК СтавкаНДС,
	|	ТаблицаАвансы.ДатаОплаты                                   КАК ДатаОплаты,
	|	ТаблицаАвансы.ДокументОплаты                               КАК ДокументОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПолученАванс)    КАК Событие,
	|	ВЫБОР 
	|		КОГДА &Исправление
	|			ТОГДА &Период
	|		ИНАЧЕ ТаблицаАвансы.ДатаСобытия
	|	КОНЕЦ                                                      КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА &Исправление И НАЧАЛОПЕРИОДА(&ДатаСчетаФактурыОснования, КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период, КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                      КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА &Исправление И НАЧАЛОПЕРИОДА(&ДатаСчетаФактурыОснования, КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период, КВАРТАЛ)
	|			ТОГДА &ДатаСчетаФактурыОснования
	|	КОНЕЦ                                                      КАК КорректируемыйПериод,
	|	ЛОЖЬ                                                       КАК СторнирующаяЗаписьДопЛиста,
	|	НЕОПРЕДЕЛЕНО                                               КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &Ссылка 
	|	КОНЕЦ                                                      КАК ИсправленныйСчетФактура,
	|	&Исправление                                               КАК Исправление,
	|	ТаблицаАвансы.СуммаБезНДС                                  КАК СуммаБезНДС,
	|	ТаблицаАвансы.НДС                                          КАК НДС,
	|	Значение(Перечисление.ХозяйственныеОперации.НачислениеНДССПолученногоАванса) КАК ХозяйственнаяОперация,
	|	ТаблицаАвансы.НомерДокументаОплаты                         КАК НомерДокументаОплаты,
	|	ТаблицаАвансы.ДатаДокументаОплаты                          КАК ДатаДокументаОплаты
	|	
	|ИЗ
	|	ВтТаблицаАвансы КАК ТаблицаАвансы
	|	
	|ГДЕ
	|	ТаблицаАвансы.ВключатьВКнигуПродаж";
	
#КонецОбласти
	
	ТекстЗапроса = ТекстЗапросаСторноИсправление
		+ Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС + ТекстЗапросаАвансы;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСЗаписиКнигиПокупок(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСЗаписиКнигиПокупок";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ИнициализироватьВтТаблицаНДСЗаписиКнигиПокупок(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаНДСЗаписиКнигиПокупок.Период,
	|	ТаблицаНДСЗаписиКнигиПокупок.Регистратор,
	|	ТаблицаНДСЗаписиКнигиПокупок.НомерСтроки,
	|	ТаблицаНДСЗаписиКнигиПокупок.Организация,
	|	ТаблицаНДСЗаписиКнигиПокупок.Поставщик,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.ВидЦенности,
	|	ТаблицаНДСЗаписиКнигиПокупок.СтавкаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетУчетаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДокументОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.Событие,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаСобытия,
	|	ТаблицаНДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста,
	|	ТаблицаНДСЗаписиКнигиПокупок.КорректируемыйПериод,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ТаблицаНДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.СуммаБезНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.ХозяйственнаяОперация,
	|	ТаблицаНДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.КодВидаОперации
	|ИЗ
	|	ВтТаблицаНДСЗаписиКнигиПокупок КАК ТаблицаНДСЗаписиКнигиПокупок";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТ

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьВтТаблицаНДСЗаписиКнигиПокупок(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                           КАК Период,
	|	&Организация                      КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)      КАК ДатаОтражения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период                                           КАК Период,
	|	НДСЗаписиКнигиПокупок.Организация                 КАК Организация,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, ДЕНЬ) КАК ДатаОтражения
	|ИЗ
	|	ВтТаблицаНДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ПечатьВВалюте", Ложь);

КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов) Экспорт 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУслуги,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьТовары
	|ПОМЕСТИТЬ НоменклатураДокументов
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс.Авансы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка КАК Ссылка,
	|	СчетФактура.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	&ПредставлениеСчетФактура КАК ПредставлениеДокумента,
	|	СчетФактура.Номер КАК Номер,
	|	ВЫБОР КОГДА СчетФактура.Исправление ТОГДА
	|		ЕСТЬNULL(СчетФактура.СчетФактураОснование.Дата, ДАТАВРЕМЯ(1,1,1))
	|	ИНАЧЕ 
	|		СчетФактура.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР КОГДА СчетФактура.Исправление ТОГДА
	|		СчетФактура.НомерИсправления 
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР КОГДА СчетФактура.Исправление ТОГДА
	|		СчетФактура.Дата
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаИсправления,
	|	СчетФактура.Исправление КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияСчетаФактуры,
	|	ЛОЖЬ КАК КорректировочныйСчетФактура,
	|	СчетФактура.СтрокаПлатежноРасчетныеДокументы КАК СтрокаПоДокументу,
	|	&ВалютаРеглУчета КАК ВалютаСчетаФактуры,
	|	ВЫБОР
	|		КОГДА СчетФактура.Контрагент.ОбособленноеПодразделение
	|			ТОГДА СчетФактура.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ СчетФактура.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА СчетФактура.Организация.ОбособленноеПодразделение
	|			ТОГДА СчетФактура.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ СчетФактура.Организация
	|	КОНЕЦ КАК Организация,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	СчетФактура.Организация.Префикс КАК Префикс,
	|	ВЫБОР
	|		КОГДА СчетФактура.Организация.ОбособленноеПодразделение
	|			ТОГДА СчетФактура.Организация.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексПодразделения,
	|	СчетФактура.Контрагент КАК Грузополучатель,
	|	СчетФактура.ДокументОснование.Номер КАК НомерПлатежноРасчетногоДокумента,
	|	СчетФактура.ДокументОснование.Дата КАК ДатаПлатежноРасчетногоДокумента,
	|	СчетФактура.Организация КАК Грузоотправитель,
	|	СчетФактура.Организация.КПП КАК КПППоставщика,
	|	СчетФактура.Контрагент.КПП КАК КПППокупателя,
	|	НЕОПРЕДЕЛЕНО КАК АдресДоставки,
	|	&ВалютаРеглУчета КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаНаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА НоменклатураДокументов.ЕстьУслуги
	|				И НЕ НоменклатураДокументов.ЕстьТовары
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоУслуги,
	|	ЛОЖЬ КАК ЭтоПередачаНаКомиссию
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураДокументов КАК НоменклатураДокументов
	|		ПО СчетФактура.Ссылка = НоменклатураДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО СчетФактура.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивДокументов)
	|	И СчетФактура.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.НоменклатураНаименование КАК НоменклатураНаименование,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	"""" КАК ХарактеристикаНаименование,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	"""" КАК НомерГТД,
	|	"""" КАК СтранаПроисхождения,
	|	"""" КАК СтранаПроисхожденияКод,
	|	0 КАК Количество,
	|	0 КАК Цена,
	|	0 КАК СуммаБезНДС,
	|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК СуммаСНДС,
	|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ТаблицаТовары.Содержание КАК СТРОКА(1))) <> """"
	|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Содержание КАК СТРОКА(100))
	|			КОГДА ТаблицаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.Номенклатура.НаименованиеПолное
	|			ИНАЧЕ &ПредставлениеПредварительнаяОплата
	|		КОНЕЦ КАК НоменклатураНаименование,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.СчетФактураВыданныйАванс.Авансы КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка В(&МассивДокументов)
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.НоменклатураНаименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru='счет-фактура'"));
	Запрос.УстановитьПараметр("ПредставлениеПредварительнаяОплата", НСтр("ru = 'Предварительная оплата'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатПоШапке          = МассивРезультатов[1];
	РезультатПоТабличнойЧасти = МассивРезультатов[2];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти, СчетФактураНаАванс",
	                                               РезультатПоШапке, РезультатПоТабличнойЧасти, Истина);
	
	Возврат СтруктураДанныхДляПечати;
КонецФункции

#КонецОбласти

#Область Прочее

Функция ВыполнитьЗачетАванса(ТаблицаАванс, ТаблицаАвансНачислениеНДС, ТаблицаЗачетАванса, Реквизиты)
	
	ТаблицаЗаписиКнигиПокупок = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаЗаписиКнигиПокупок.Колонки.Удалить("Активность");
	
	Если ТаблицаАвансНачислениеНДС.Количество() = 0 Тогда
		Возврат ТаблицаЗаписиКнигиПокупок
	КонецЕсли;
	
	ДатаПоступленияАванса = ТаблицаАвансНачислениеНДС[0].Период;
	
	АвансМассивСуммаБезНДС = Новый Массив();
	АвансМассивСуммаНДС = Новый Массив();
	
	АвансСуммаБезНДС = 0;
	АвансСуммаНДС    = 0;
	АвансСуммаСНДС   = 0;
	
	Для Каждого СтрокаАванса Из ТаблицаАвансНачислениеНДС Цикл
		АвансМассивСуммаБезНДС.Добавить(СтрокаАванса.СуммаБезНДС);
		АвансМассивСуммаНДС.Добавить(СтрокаАванса.НДС);
		
		АвансСуммаБезНДС = АвансСуммаБезНДС + СтрокаАванса.СуммаБезНДС;
		АвансСуммаНДС = АвансСуммаНДС + СтрокаАванса.НДС;
		АвансСуммаСНДС = АвансСуммаСНДС + СтрокаАванса.СуммаБезНДС + СтрокаАванса.НДС;
	КонецЦикла; 
	
	НезачтеннаяСуммаАванса = ТаблицаАванс.Итог("Аванс");
	
	Для Каждого ПогашенныйАвансПоСФ Из ТаблицаЗачетАванса Цикл
		
		Если АвансСуммаСНДС = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НезачтеннаяСуммаАванса = НезачтеннаяСуммаАванса - ПогашенныйАвансПоСФ.СуммаЗачета;
		
		//Отбор лишних зачетов аванса
		ДатаЗачетаАванса = ПогашенныйАвансПоСФ.Период;
		ДатаНачисления = Реквизиты.Период;
		Если Реквизиты.ПравилоОтбораАванса <> Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ВсеОплаты 
			И ДатаЗачетаАванса <= ДатаНачисления Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПогашенныйАвансПоСФ.ЕстьНДСПродажи И ПогашенныйАвансПоСФ.СуммаНДСПродажиБезНДС <> 0 Тогда
			// Определим по пропорции сумму зачета, которая относится к реализации с НДС.
			Коэффициенты = Новый Массив;
			Коэффициенты.Добавить(ПогашенныйАвансПоСФ.СуммаНДСПродажиСНДС);
			Коэффициенты.Добавить(ПогашенныйАвансПоСФ.СуммаНДСПродажиБезНДС);
			
			РаспределениеСуммыЗачета = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
											ПогашенныйАвансПоСФ.СуммаЗачета,
											Коэффициенты);
			СуммаЗачета = РаспределениеСуммыЗачета[0];
		Иначе
			СуммаЗачета = ПогашенныйАвансПоСФ.СуммаЗачета;
		КонецЕсли;
		
		СуммаСНДС = Мин(СуммаЗачета, АвансСуммаСНДС);
		
		ОстатокСуммыАвансаСНДС = (АвансСуммаСНДС - СуммаСНДС);
		Если ОстатокСуммыАвансаСНДС > НезачтеннаяСуммаАванса Тогда
			// Откорректируем сумму, с которой выполняется восстановление с учетом остатка незачтенного аванса.
			СуммаСНДС = СуммаСНДС + (ОстатокСуммыАвансаСНДС - НезачтеннаяСуммаАванса);
		КонецЕсли;
		
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезНДС = Окр(АвансСуммаБезНДС * СуммаСНДС / АвансСуммаСНДС, 2); 
		СуммаНДС    = СуммаСНДС - СуммаБезНДС;
		
		АвансСуммаБезНДС = АвансСуммаБезНДС - СуммаБезНДС;
		АвансСуммаСНДС   = АвансСуммаСНДС - СуммаСНДС;
		
		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаБезНДС, АвансМассивСуммаБезНДС);
		КонецЕсли;
		
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаНДС, АвансМассивСуммаНДС);
		КонецЕсли; 
		
		Счетчик = 0;
		
		//Зачет аванса - записи книги покупок
		Для Каждого СтрокаАванса Из ТаблицаАвансНачислениеНДС Цикл
			
			Если НЕ СтрокаАванса.ВключатьВКнигуПродаж Тогда
				Продолжить;
			КонецЕсли;
			
			Если ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0) = 0 
				И ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0) = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаРезультата = ТаблицаЗаписиКнигиПокупок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, ПогашенныйАвансПоСФ);
			
			СтрокаРезультата.СчетФактура	 = СтрокаАванса.СчетФактура;
			СтрокаРезультата.Поставщик		 = СтрокаАванса.Покупатель;
			СтрокаРезультата.СтавкаНДС		 = СтрокаАванса.СтавкаНДС;

			СтрокаРезультата.СуммаБезНДС	 = ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик],0);
			СтрокаРезультата.НДС			 = ?(СуммаНДС > 0,    МассивСуммаНДС[Счетчик],0);
			
			ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Реквизиты.Период);
			Если ВерсияКодовВидовОпераций = 3 И СтрокаАванса.КодВидаОперации = "26" Тогда
				СтрокаРезультата.КодВидаОперации = "26";
			Иначе
				СтрокаРезультата.КодВидаОперации = "22";
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла; 
	КонецЦикла;
	
	Возврат ТаблицаЗаписиКнигиПокупок;
	
КонецФункции	

//Возвращает результат запроса по полученным от клиентов авансам для формирования счетов-фактур на аванс
//
// Параметры:
// НачалоПериода - Дата - Начало периода, за котрый необходимо найти авансы
// КонецПериода - Дата - Окончание периода, за котовый необходимо найти авансы
// Организация - СправочникСсылка.Организации - Организация для отбора
// РасчетныйДокумент - ДокументСсылка - Расчетный документ для отбора
//
// Возвращаемое значение:
// Результат запроса   - содержит данные о полученных авансах
//
Функция РезультатЗапросаПоАвансам(НачалоПериода, КонецПериода, Организация, РасчетныйДокумент, ПравилоОтбораАвансов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПериоды.ПериодДень
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	&Периоды КАК ТаблицаПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.Период КАК Период,
	|	АналитикаУчетаПоПартнерамДанные.Организация КАК Организация,
	|	Расчеты.ЗаказКлиента КАК ЗаказКлиента,
	|	Расчеты.РасчетныйДокумент КАК ДокументОснование,
	|	ЕСТЬNULL(Расчеты.РасчетныйДокумент.Дата, &ПустаяДата) КАК ДатаДокументаОснования,
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|		ИНАЧЕ Расчеты.Валюта
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ВЫБОР КОГДА &ПравилоОтбораАвансов = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ВсеОплаты) ТОГДА
	|		СУММА(Расчеты.ПредоплатаРасход + Расчеты.КВозвратуРасход)
	|	ИНАЧЕ
	|		СУММА(-ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = &ВалютаРеглУчета
	|				ТОГДА Расчеты.ПредоплатаРеглКонечныйОстаток
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = &ВалютаРеглУчета
	|				ТОГДА Расчеты.ПредоплатаРеглКонечныйОстаток
	|			ИНАЧЕ Расчеты.ПредоплатаКонечныйОстаток + Расчеты.КВозвратуКонечныйОстаток
	|		КОНЕЦ) 
	|	КОНЕЦ КАК ВалютнаяСумма,
	|	ВЫБОР КОГДА &ПравилоОтбораАвансов = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ВсеОплаты) ТОГДА
	|		СУММА(Расчеты.ПредоплатаРеглРасход)
	|	ИНАЧЕ
	|		СУММА(-Расчеты.ПредоплатаРеглКонечныйОстаток)
	|	КОНЕЦ КАК Сумма,
	|	АналитикаУчетаПоПартнерамДанные.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Расчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.ОстаткиИОбороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		День,
	|		,
	|		ВЫБОР
	|			КОГДА &РасчетныйДокумент <> НЕОПРЕДЕЛЕНО
	|				ТОГДА РасчетныйДокумент = &РасчетныйДокумент
	|			ИНАЧЕ (АналитикаУчетаПоПартнерам.Организация = &Организация ИЛИ &ВсеОрганизации)
	|		КОНЕЦ
	|		) КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерамДанные
	|			ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчетаПоПартнерамДанные.КлючАналитики
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Период,
	|	Расчеты.ЗаказКлиента,
	|	Расчеты.РасчетныйДокумент,
	|	ЕСТЬNULL(Расчеты.РасчетныйДокумент.Дата, &ПустаяДата),
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|		ИНАЧЕ Расчеты.Валюта
	|	КОНЕЦ,
	|	АналитикаУчетаПоПартнерамДанные.Контрагент,
	|	АналитикаУчетаПоПартнерамДанные.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период,
	|	ЕСТЬNULL(РеализацияПодарочныхСертификатов.Организация, ВводОстатков.Организация) КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказКлиента,
	|	РеализацияСертификата.Регистратор,
	|	РеализацияСертификата.Период,
	|	РеализацияСертификата.ПодарочныйСертификат.Владелец.Валюта,
	|	ВЫБОР КОГДА &ПравилоОтбораАвансов = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ВсеОплаты) ТОГДА
	|		СУММА(ДанныеРегистра.СуммаПриход)
	|	ИНАЧЕ
	|		СУММА(ДанныеРегистра.СуммаКонечныйОстаток)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПравилоОтбораАвансов = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ВсеОплаты) ТОГДА
	|		ВЫРАЗИТЬ(СУММА(ДанныеРегистра.СуммаПриход *  (РеализацияСертификата.СуммаРегл / РеализацияСертификата.Сумма)) КАК ЧИСЛО(15, 2))
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(СУММА(ДанныеРегистра.СуммаКонечныйОстаток * (РеализацияСертификата.СуммаРегл / РеализацияСертификата.Сумма)) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)
	|ИЗ
	|	РегистрНакопления.ПодарочныеСертификаты.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, , ) КАК ДанныеРегистра
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ПодарочныеСертификаты КАК РеализацияСертификата
	|	ПО 
	|		(РеализацияСертификата.ПодарочныйСертификат = ДанныеРегистра.ПодарочныйСертификат)
	|		И (РеализацияСертификата.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.РеализацияПодарочныхСертификатов КАК РеализацияПодарочныхСертификатов
	|	ПО
	|		РеализацияСертификата.Регистратор =  РеализацияПодарочныхСертификатов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ВводОстатков КАК ВводОстатков
	|	ПО
	|		РеализацияСертификата.Регистратор =  ВводОстатков.Ссылка
	|	
	|ГДЕ
	|	(ЕСТЬNULL(РеализацияПодарочныхСертификатов.Организация, ВводОстатков.Организация) = &Организация
	|		ИЛИ &ВсеОрганизации)
	|	И ДанныеРегистра.СуммаОборот <> 0
	|	И &РасчетныйДокумент = НЕОПРЕДЕЛЕНО
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	РеализацияСертификата.Регистратор,
	|	РеализацияСертификата.Период,
	|	РеализацияСертификата.ПодарочныйСертификат.Владелец.Валюта,
	|	ЕСТЬNULL(РеализацияПодарочныхСертификатов.Организация, ВводОстатков.Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.Период                 КАК Период,
	|	Расчеты.Организация            КАК Организация,
	|	Расчеты.ЗаказКлиента           КАК ЗаказКлиента,
	|	Расчеты.ДокументОснование      КАК ДокументОснование,
	|	Расчеты.ДатаДокументаОснования КАК ДатаДокументаОснования,
	|	Расчеты.ВалютаДокумента        КАК ВалютаДокумента,
	|	Расчеты.Контрагент             КАК Контрагент,
	|	Расчеты.ВалютнаяСумма          КАК ВалютнаяСумма,
	|	Расчеты.Сумма                  КАК Сумма,
	|	СУММА(ВЫБОР 
	|		КОГДА НЕ ПКО_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И ПКО_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС18)
	|			ТОГДА ПКО_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ ПБДС_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И ПБДС_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС18)
	|			ТОГДА ПБДС_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ ОПК_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И ОПК_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС18)
	|			ТОГДА ОПК_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ ВозвратТоваровОтКлиента_Расшифровка.Ссылка ЕСТЬ NULL И ВозвратТоваровОтКлиента_Расшифровка.СтавкаНДС В (&СтавкиНДС18)
	|			ТОГДА ВозвратТоваровОтКлиента_Расшифровка.Сумма
    |		КОГДА НЕ ОперацияПоЯндексКассе.Ссылка ЕСТЬ NULL И ОперацияПоЯндексКассе.СуммаНДС18 <> 0
	|			ТОГДА ОперацияПоЯндексКассе.СуммаДокументаСНДС18
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма18,
	|	СУММА(ВЫБОР 
	|		КОГДА НЕ ПКО_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И ПКО_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС10)
	|			ТОГДА ПКО_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ ПБДС_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И ПБДС_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС10)
	|			ТОГДА ПБДС_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ ОПК_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И ОПК_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиНДС10)
	|			ТОГДА ОПК_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ ВозвратТоваровОтКлиента_Расшифровка.Ссылка ЕСТЬ NULL И ВозвратТоваровОтКлиента_Расшифровка.СтавкаНДС В (&СтавкиНДС10)
	|			ТОГДА ВозвратТоваровОтКлиента_Расшифровка.Сумма
    |		КОГДА НЕ ОперацияПоЯндексКассе.Ссылка ЕСТЬ NULL И ОперацияПоЯндексКассе.СуммаНДС10 <> 0
	|			ТОГДА ОперацияПоЯндексКассе.СуммаДокументаСНДС10
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма10,
	|	СУММА(ВЫБОР 
	|		КОГДА НЕ ПКО_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И ПКО_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ПКО_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ ПБДС_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И ПБДС_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ПБДС_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ ОПК_РасшифровкаПлатежа.Ссылка ЕСТЬ NULL И ОПК_РасшифровкаПлатежа.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ОПК_РасшифровкаПлатежа.Сумма
	|		КОГДА НЕ ВозвратТоваровОтКлиента_Расшифровка.Ссылка ЕСТЬ NULL И ВозвратТоваровОтКлиента_Расшифровка.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ВозвратТоваровОтКлиента_Расшифровка.Сумма
    |		КОГДА НЕ ОперацияПоЯндексКассе.Ссылка ЕСТЬ NULL И ОперацияПоЯндексКассе.СуммаДокумента - (ОперацияПоЯндексКассе.СуммаДокументаСНДС18 + ОперацияПоЯндексКассе.СуммаДокументаСНДС10) > 0
	|			ТОГДА ОперацияПоЯндексКассе.СуммаДокумента - (ОперацияПоЯндексКассе.СуммаДокументаСНДС18 + ОперацияПоЯндексКассе.СуммаДокументаСНДС10)
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС
	|
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	Расчеты КАК Расчеты
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПКО_РасшифровкаПлатежа
	|	ПО
	|		ПКО_РасшифровкаПлатежа.Ссылка = Расчеты.ДокументОснование
	|		И ПКО_РасшифровкаПлатежа.Заказ = Расчеты.ЗаказКлиента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПБДС_РасшифровкаПлатежа
	|	ПО
	|		ПБДС_РасшифровкаПлатежа.Ссылка = Расчеты.ДокументОснование
	|		И ПБДС_РасшифровкаПлатежа.Заказ = Расчеты.ЗаказКлиента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ОПК_РасшифровкаПлатежа
	|	ПО
	|		ОПК_РасшифровкаПлатежа.Ссылка = Расчеты.ДокументОснование
	|		И ОПК_РасшифровкаПлатежа.Заказ = Расчеты.ЗаказКлиента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ОперацияПоЯндексКассе КАК ОперацияПоЯндексКассе
	|	ПО
	|		ОперацияПоЯндексКассе.Ссылка = Расчеты.ДокументОснование
	|		И ОперацияПоЯндексКассе.ОбъектРасчетов = Расчеты.ЗаказКлиента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиента_Расшифровка
	|	ПО
	|		ВозвратТоваровОтКлиента_Расшифровка.Ссылка = Расчеты.ДокументОснование 
	|		
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Период,
	|	Расчеты.Организация,
	|	Расчеты.ЗаказКлиента,
	|	Расчеты.ДокументОснование,
	|	Расчеты.ДатаДокументаОснования,
	|	Расчеты.ВалютаДокумента,
	|	Расчеты.ВалютнаяСумма,
	|	Расчеты.Контрагент,
	|	Расчеты.Сумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.ПериодДень КАК ПериодДень,
	|	МАКСИМУМ(ВТДанные.Период) КАК Период,
	|	ВТДанные.ЗаказКлиента КАК ЗаказКлиента,
	|	ВТДанные.ДокументОснование КАК ДокументОснование,
	|	ВТДанные.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ АвансыПоДатам
	|ИЗ
	|	ВТПериоды КАК ВТПериоды	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТДанные КАК ВТДанные
	|	ПО
	|		ВТПериоды.ПериодДень  >= ВТДанные.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПериоды.ПериодДень,
	|	ВТДанные.ЗаказКлиента,
	|	ВТДанные.ДокументОснование,
	|	ВТДанные.Контрагент		
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.ПериодДень КАК Период,
	|	ВТДанные.Период КАК ПериодАванса,
	|	ВТДанные.Организация КАК Организация,
	|	ВТДанные.ЗаказКлиента КАК ЗаказКлиента,
	|	ВТДанные.ДокументОснование КАК ДокументОснование,
	|	ВТДанные.ДатаДокументаОснования,
	|	ВТДанные.ВалютаДокумента,
	|	ВТДанные.ВалютнаяСумма КАК ВалютнаяСумма,
	|	ВТДанные.Контрагент КАК Контрагент,
	|	ВТДанные.Сумма КАК Сумма,
	|	ВТДанные.Сумма18 КАК Сумма18,
	|	ВТДанные.Сумма10 КАК Сумма10,
	|	ВТДанные.СуммаБезНДС КАК СуммаБезНДС
	|ИЗ
	|	ВТПериоды КАК ВТПериоды
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		АвансыПоДатам КАК АвансыПоДатам
	|	ПО
	|	   ВТПериоды.ПериодДень =  АвансыПоДатам.ПериодДень
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ВТДанные КАК ВТДанные
	|	ПО 
	|		АвансыПоДатам.Период = ВТДанные.Период
	|		И АвансыПоДатам.ДокументОснование = ВТДанные.ДокументОснование
	|		И АвансыПоДатам.ЗаказКлиента = ВТДанные.ЗаказКлиента
	|		И АвансыПоДатам.Контрагент = ВТДанные.Контрагент
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ДокументОснование
	|
	|ИТОГИ ПО
	|	Период,
	|	Контрагент,
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйАванс.Ссылка            КАК СчетФактура,
	|	СчетФактураВыданныйАванс.Дата              КАК ДатаВыписки,
	|	СчетФактураВыданныйАванс.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданныйАванс.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СчетФактураВыданныйАванс.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАвансы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|				ТОГДА ТаблицаАвансы.Сумма
	|					ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаАванса18,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАвансы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|				ТОГДА ТаблицаАвансы.Сумма
	|					ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаАванса10,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАвансы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|				ТОГДА ТаблицаАвансы.СуммаНДС
	|					ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС18,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАвансы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|				ТОГДА ТаблицаАвансы.СуммаНДС
	|					ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС10
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданныйАванс.Авансы КАК ТаблицаАвансы
	|	ПО
	|		СчетФактураВыданныйАванс.Ссылка = ТаблицаАвансы.Ссылка
	|ГДЕ
	|	СчетФактураВыданныйАванс.ДокументОснование В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Расчеты.ДокументОснование
	|		ИЗ
	|			Расчеты КАК Расчеты)
	|	И (НЕ СчетФактураВыданныйАванс.ПометкаУдаления)
	|	И (НЕ СчетФактураВыданныйАванс.Исправление)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураВыданныйАванс.Ссылка,
	|	СчетФактураВыданныйАванс.Дата,
	|	СчетФактураВыданныйАванс.ДокументОснование,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданныйАванс.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СчетФактураВыданныйАванс.Контрагент
	|	КОНЕЦ
	|";
	
	ОписаниеТиповД = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ПериодДень",ОписаниеТиповД);
	
	КонецПериода = ?(КонецПериода = '00010101', НачалоПериода, КонецПериода);
		
	ТекущийДень 	= КонецДня(НачалоПериода);
	ПоследнийДень 	= КонецДня(КонецПериода);
	
	Пока ТекущийДень <= ПоследнийДень Цикл
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.ПериодДень = ТекущийДень;
		ТекущийДень = ТекущийДень + 86400;
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("Периоды",				ТаблицаПериодов);
	Запрос.УстановитьПараметр("НачалоПериода",			НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",			КонецПериода);
	Запрос.УстановитьПараметр("ПравилоОтбораАвансов",	ПравилоОтбораАвансов);
	Запрос.УстановитьПараметр("ПустаяДата",				'00010101');
	Запрос.УстановитьПараметр("РасчетныйДокумент",		РасчетныйДокумент);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ВсеОрганизации",			НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("ВалютаРеглУчета",		Константы.ВалютаРегламентированногоУчета.Получить());
	
	СтавкиНДС18 = Новый Массив;
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	
	СтавкиНДС18 = Новый Массив;
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	
	СтавкиНДС10 = Новый Массив;
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкиНДС10", СтавкиНДС10);
	
	СтавкиБезНДС = Новый Массив;
	СтавкиБезНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	СтавкиБезНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	Запрос.УстановитьПараметр("СтавкиБезНДС", СтавкиБезНДС);

	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат Результат;
	
КонецФункции

//Возвращает значение правила отбора авансов, используемое в организации 
//
// Параметры:
// Организация - СправочникСсылка.Организации - Организация для отбора
// 
// Возвращаемое значение:
// Перечисление.ПорядокРегистрацииСчетовФактурНаАванс - значение "по умолчанию"
//
Функция ПравилоОтбораАвансаОрганизации(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Операция.ПравилоОтбораАванса КАК ПравилоОтбораАванса
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК Операция
	|ГДЕ
	|	Операция.Проведен
	|	И Операция.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операция.Дата УБЫВ
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПравилоОтбораАванса;
	Иначе
		Возврат Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеДня;
	КонецЕсли;
	
КонецФункции

Функция ТипыЗапасовСобственные()
	
	ТипыЗапасовСобственные = Новый СписокЗначений;
	ТипыЗапасовСобственные.Добавить(Перечисления.ТипыЗапасов.Товар);
	ТипыЗапасовСобственные.Добавить(Перечисления.ТипыЗапасов.Услуга);
	
	Возврат ТипыЗапасовСобственные;
	
КонецФункции

Функция СчетФактураПредыдущееИсправление(СчетФактураОснование, НомерИсправления)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактура.Ссылка КАК ИсправленныйСчетФактура,
	|	СчетФактура.НомерИсправления КАК НомерИсправления
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК СчетФактура
	|ГДЕ
	|	СчетФактура.СчетФактураОснование = &СчетФактураОснование
	|	И СчетФактура.Проведен
	|	И СчетФактура.Исправление
	|	И СчетФактура.НомерИсправления <> &НомерИсправления
	|";
	
	Запрос.УстановитьПараметр("СчетФактураОснование", СчетФактураОснование);
	Запрос.УстановитьПараметр("НомерИсправления", НомерИсправления);
	
	ПредыдущийНомер = 0;
	ИсправленныйСчетФактура = Неопределено;
	НомерИсправленияЧислом = ?(ЗначениеЗаполнено(НомерИсправления),Число(НомерИсправления),1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерИзВыборки = Число(Выборка.НомерИсправления);
		Если НомерИзВыборки < НомерИсправленияЧислом
			И НомерИзВыборки > ПредыдущийНомер Тогда
			ПредыдущийНомер = НомерИзВыборки;
			ИсправленныйСчетФактура = Выборка.ИсправленныйСчетФактура;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИсправленныйСчетФактура
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	ВЫБОР ТИПЗНАЧЕНИЯ(&ДокументОплаты)
	|		КОГДА ТИП(Документ.ВводОстатков)
	|			ТОГДА ВЫБОР ДанныеДокумента.ДокументОснование.ТипОперации
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		КОГДА ТИП(Документ.РеализацияПодарочныхСертификатов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПодарочныхСертификатов)
	|		КОГДА ТИП(Документ.ВзаимозачетЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|		ИНАЧЕ ДанныеДокумента.ДокументОснование.ХозяйственнаяОперация
	|	КОНЕЦ                                   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ДокументОснование.Партнер
	|	                                        КАК Партнер,
	|	&Контрагент                             КАК Контрагент,
	|
	|	ДанныеДокумента.ДокументОснование.НаправлениеДеятельности
	|	                                        КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ДокументОснование.Склад КАК МестоХранения,
	|	&Подразделение                          КАК Подразделение,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Валюта                                 КАК Валюта,
	|	&Сумма                                  КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&ИнформацияПоИсправлению                КАК Дополнительно,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&Номер                                  КАК НомерПервичногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
