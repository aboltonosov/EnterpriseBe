#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт

КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ИнвентаризацияНаличныхДенежныхСредств) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ИнвентаризацияНаличныхДенежныхСредств.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ИнвентаризацияНаличныхДенежныхСредств);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры


//++ НЕ УТ

// Возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт

#Область Доходы

	ТекстДоходы = "
	|ВЫБРАТЬ // Излишки при инвентаризации ДС (Дт <50.01>:: Кт <91.01>)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.СуммаРасхождения) КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Строки.Касса.ВалютаДенежныхСредств КАК ВалютаДт,
	|	Строки.Касса.Подразделение КАК ПодразделениеДт,
	|	Строки.Касса.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	
	|	Строки.Касса.СчетУчета КАК СчетДт,
	|	Строки.СтатьяДвиженияДенежныхСредств КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ВЫБОР КОГДА Строки.Касса.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета ТОГДА
	|		0
	|	ИНАЧЕ
	|		Строки.СуммаРасхождения
	|	КОНЕЦ КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	Строки.Подразделение КАК ПодразделениеКт,
	|	Строки.Касса.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы) КАК СчетКт,
	|	Строки.СтатьяДоходовРасходов КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Излишки при инвентаризации ДС"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ИнвентаризацияНаличныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ИнвентаризацияНаличныхДенежныхСредств.Кассы КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Константы КАК Константы
	|	ПО
	|		Истина
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Операция.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|ГДЕ
	|	Строки.СуммаРасхождения > 0
	|";
	
#КонецОбласти

#Область Расходы
	
	ТекстРасходы = "
	|ВЫБРАТЬ // Недостача при инвентаризации ДС (Дт <94> :: Кт <50.01>)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, -Строки.СуммаРасхождения) КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	Строки.Касса.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	Строки.Касса.ВалютаДенежныхСредств КАК ВалютаКт,
	|	Строки.Касса.Подразделение КАК ПодразделениеКт,
	|	Строки.Касса.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	
	|	Строки.Касса.СчетУчета КАК СчетКт,
	|	Строки.СтатьяДвиженияДенежныхСредств КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	ВЫБОР КОГДА Строки.Касса.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета ТОГДА
	|		0
	|	ИНАЧЕ
	|		-Строки.СуммаРасхождения
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Недостача при инвентаризации ДС"" КАК Содержание
	|	
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ИнвентаризацияНаличныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ИнвентаризацияНаличныхДенежныхСредств.Кассы КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Константы КАК Константы
	|	ПО
	|		Истина
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Операция.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|ГДЕ
	|	Строки.СуммаРасхождения < 0
	|";
	
#КонецОбласти
	
	Возврат ТекстДоходы
		+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстРасходы;

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, 
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//	ТекстЗапроса - Строка - текст запроса создания временных таблиц.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат ""
	
КонецФункции

//-- НЕ УТ

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Выбранная хозяйственная операция
//	МассивВсехРеквизитов - Массив - Массив всех имен реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемых в выбранной хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("СтатьяДоходов");
	МассивВсехРеквизитов.Добавить("АналитикаДоходов");
	МассивВсехРеквизитов.Добавить("СтатьяРасходов");
	МассивВсехРеквизитов.Добавить("АналитикаРасходов");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеИзлишкаПриИнкассацииДенежныхСредств Тогда
		
		МассивРеквизитовОперации.Добавить("СтатьяДоходов");
		МассивРеквизитовОперации.Добавить("АналитикаДоходов");
	
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНедостачиПриИнкассацииДенежныхСредств Тогда
		
		МассивРеквизитовОперации.Добавить("СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("АналитикаРасходов");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// Создание запроса инициализации движений и заполенение его параметров
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);

	// Текст запроса, формирующего таблицы движений
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры);	
	ТекстЗапросаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДенежныеСредстваНаличные(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДвиженияДенежныеСредстваДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);	
	//++ НЕ УТ
	ТекстЗапросаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ
		
	// Выполение запроса и выгрузка полученных таблиц для формирования движений
	ПроведениеСерверУТ.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                       КАК Период,
	|	ДанныеДокумента.Организация                                КАК Организация,
	|	ДанныеДокумента.КассоваяКнига                              КАК КассоваяКнига
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос.УстановитьПараметр("Период",                            Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",                       Реквизиты.Организация);
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперацияИзлишек",      Перечисления.ХозяйственныеОперации.ОтражениеИзлишкаПриИнвентаризацииДенежныхСредств);
	Запрос.УстановитьПараметр("ХозяйственнаяОперацияНедостача",    Перечисления.ХозяйственныеОперации.ОтражениеНедостачиПриИнвентаризацииДенежныхСредств);
	
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",        ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",    ВалютаРегламентированногоУчета);
	
КонецПроцедуры

Функция ТекстЗапросаВТКурсыВалютУпр(Запрос, ТекстыЗапроса)	
	
	ИмяРегистра = "ВТКурсыВалютУпр"; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыУпр.Кратность / (КурсВалюты.Кратность * КурсВалютыУпр.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ВТКурсыВалютУпр
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалюты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУправленческогоУчета) КАК КурсВалютыУпр
	|	ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыУпр.Курс <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТКурсыВалютРегл(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТКурсыВалютРегл"; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыРегл.Кратность / (КурсВалюты.Кратность * КурсВалютыРегл.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ВТКурсыВалютРегл
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалюты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаРегламентированногоУчета) КАК КурсВалютыРегл
	|	ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыРегл.Курс <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТКассы"; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКурсыВалютУпр", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКурсыВалютУпр(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКурсыВалютРегл", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКурсыВалютРегл(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаКассы.Ссылка КАК Ссылка,
	|	ТаблицаКассы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаКассы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаКассы.Касса КАК Касса,
	|	ТаблицаКассы.Касса.ВалютаДенежныхСредств КАК Валюта,
	|	ТаблицаКассы.СуммаРасхождения КАК СуммаРасхождения,
	|	ТаблицаКассы.СуммаРасхождения * ЕСТЬNULL(ТаблицаКурсыВалютУпр.КоэффициентПересчета, 0) КАК СуммаРасхожденияУпр,
	|	ТаблицаКассы.СуммаРасхождения * ЕСТЬNULL(ТаблицаКурсыВалютРегл.КоэффициентПересчета, 0) КАК СуммаРасхожденияРегл,
	|	ТаблицаКассы.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаКассы.Касса.Подразделение КАК Подразделение,
	|	ТаблицаКассы.Подразделение КАК ПодразделениеДоходовРасходов,
	|	ТаблицаКассы.Касса.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаКассы.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|	ТаблицаКассы.АналитикаДоходов КАК АналитикаДоходов,
	|	ТаблицаКассы.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ ВТКассы
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств.Кассы КАК ТаблицаКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютУпр КАК ТаблицаКурсыВалютУпр
	|		ПО (ТаблицаКурсыВалютУпр.Валюта = ТаблицаКассы.Касса.ВалютаДенежныхСредств)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютРегл КАК ТаблицаКурсыВалютРегл
	|		ПО (ТаблицаКурсыВалютРегл.Валюта = ТаблицаКассы.Касса.ВалютаДенежныхСредств)
	|ГДЕ
	|	ТаблицаКассы.Ссылка = &Ссылка
	|	И ТаблицаКассы.СуммаРасхождения <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Период                                      КАК Период,
	|	
	|	&Организация                                 КАК Организация,
	|	
	|	ВТКассы.ПодразделениеДоходовРасходов         КАК Подразделение,
	|	ВТКассы.НаправлениеДеятельности              КАК НаправлениеДеятельности,
	|	ВТКассы.СтатьяДоходовРасходов                КАК СтатьяДоходов,
	|	ВТКассы.АналитикаДоходов                     КАК АналитикаДоходов,
	|	
	|	ВТКассы.СуммаРасхожденияРегл                 КАК Сумма,
	|	
	|	&ХозяйственнаяОперацияИзлишек                КАК ХозяйственнаяОперация
	|	
	|ИЗ
	|	ВТКассы КАК ВТКассы
	|	
	|ГДЕ
	|	ВТКассы.СуммаРасхождения > 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Период                                      КАК Период,
	|	
	|	&Организация                                 КАК Организация,
	|	
	|	ВТКассы.ПодразделениеДоходовРасходов         КАК Подразделение,
	|	ВТКассы.НаправлениеДеятельности              КАК НаправлениеДеятельности,
	|	ВТКассы.СтатьяДоходовРасходов                КАК СтатьяРасходов,
	|	ВТКассы.АналитикаРасходов                    КАК АналитикаРасходов,
	|	
	|	-ВТКассы.СуммаРасхожденияРегл                КАК Сумма,
	//++ НЕ УТ
	|	ВЫБОР КОГДА СтатьиРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты) ТОГДА
	|		-ВТКассы.СуммаРасхожденияРегл
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	-ВТКассы.СуммаРасхожденияРегл КАК СуммаРегл,
	|
	|	ВЫБОР КОГДА НЕ СтатьиРасходов.ПринятиеКНалоговомуУчету ТОГДА
	|		-ВТКассы.СуммаРасхожденияРегл
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	//-- НЕ УТ
	|	
	|	&ХозяйственнаяОперацияНедостача              КАК ХозяйственнаяОперация
	|	
	|ИЗ
	|	ВТКассы КАК ВТКассы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО
	|		СтатьиРасходов.Ссылка = ВТКассы.СтатьяДоходовРасходов
	|	
	|ГДЕ
	|	ВТКассы.СуммаРасхождения < 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	
	|	&Организация                                                      КАК Организация,
	|	
	|	ВТКассы.ПодразделениеДоходовРасходов                              КАК Подразделение,
	|	ВТКассы.НаправлениеДеятельности                                   КАК НаправлениеДеятельности,
	|	ВТКассы.СтатьяДоходовРасходов                                     КАК СтатьяРасходов,
	|	ВТКассы.АналитикаРасходов                                         КАК АналитикаРасходов,
	|	&Ссылка                                                           КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)       КАК АналитикаУчетаПартий,
	|	
	|	-ВТКассы.СуммаРасхожденияРегл                                     КАК Стоимость,
	|	-ВТКассы.СуммаРасхожденияРегл                                     КАК СтоимостьБезНДС,
	|	-ВТКассы.СуммаРасхожденияРегл                                     КАК СтоимостьРегл,
//++ НЕ УТ
	|	ВЫБОР КОГДА СтатьиРасходов.ПринятиеКналоговомуУчету = ЛОЖЬ ТОГДА
	|		-ВТКассы.СуммаРасхожденияРегл
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
//-- НЕ УТ
	|
	|	0 КАК НДСРегл
	|	
	|ИЗ
	|	ВТКассы КАК ВТКассы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО
	|		СтатьиРасходов.Ссылка = ВТКассы.СтатьяДоходовРасходов
	|	
	|ГДЕ
	|	ВТКассы.СуммаРасхождения < 0
	|	И СтатьиРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДенежныеСредстваНаличные(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваНаличные";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	&Период                                           КАК Период,
	|	
	|	&Организация                                      КАК Организация,
	|	ВТКассы.Касса                                     КАК Касса,
	|	
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхождения
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхождения
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхожденияУпр
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхожденияУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхожденияРегл
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхожденияРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		&ХозяйственнаяОперацияИзлишек
	|	ИНАЧЕ
	|		&ХозяйственнаяОперацияНедостача
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ВТКассы.СтатьяДвиженияДенежныхСредств             КАК СтатьяДвиженияДенежныхСредств
	|	
	|ИЗ
	|	ВТКассы КАК ВТКассы";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияДенежныеСредстваДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияДенежныеСредстваДоходыРасходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                             КАК Период,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		&ХозяйственнаяОперацияИзлишек
	|	ИНАЧЕ
	|		&ХозяйственнаяОперацияНедостача
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	ВТКассы.Подразделение                               КАК Подразделение,
	|	ВТКассы.НаправлениеДеятельности                     КАК НаправлениеДеятельностиДС,
	|	ВТКассы.ПодразделениеДоходовРасходов                КАК ПодразделениеДоходовРасходов,
	|
	|	ВТКассы.Касса                                       КАК ДенежныеСредства,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные) КАК ТипДенежныхСредств,
	|	ВТКассы.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	ВТКассы.Валюта                                      КАК Валюта,
	|
	|	ВТКассы.НаправлениеДеятельности                     КАК НаправлениеДеятельностиСтатьи,
	|	ВТКассы.СтатьяДоходовРасходов                       КАК СтатьяДоходовРасходов,
	|	ВТКассы.АналитикаДоходов                            КАК АналитикаДоходов,
	|	ВТКассы.АналитикаРасходов                           КАК АналитикаРасходов,
	|
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхожденияУпр
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхожденияУпр
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхожденияРегл
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхожденияРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхождения
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхождения
	|	КОНЕЦ КАК СуммаВВалюте,
	|
	|	ВТКассы.Касса                                       КАК ИсточникГФУДенежныхСредств,
	|	ВТКассы.СтатьяДоходовРасходов                       КАК ИсточникГФУДоходовРасходов
	|	
	|ИЗ
	|	ВТКассы КАК ВТКассы";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

//++ НЕ УТ

Функция ТекстЗапросаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВТКассы.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	ВТКассы.Валюта КАК Валюта,
	|	ВТКассы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхождения
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхождения
	|	КОНЕЦ КАК СуммаБезНДС,
	|	0 КАК СуммаНДС,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхожденияРегл
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхожденияРегл
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|	0 КАК СуммаНДСРегл,
	|	НЕОПРЕДЕЛЕНО КАК ТипРасчетов
	|	
	|ИЗ
	|	ВТКассы КАК ВТКассы
	|	
	|ГДЕ
	|	ВТКассы.Валюта <> &ВалютаРегламентированногоУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// 4D:ERP для Беларуси, Яна, 17.04.2017 15:13:30 
	// ошибки ПО, № 14762 
	// {
	Если ПравоДоступа("Изменение", Метаданные.Документы.ИнвентаризацияНаличныхДенежныхСредств) Тогда
				
		// Акт инвентаризации
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ИНВ18_Локализация";
		КомандаПечати.Представление = НСтр("ru = 'ИНВ-18'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	КонецЕсли;
	// }
	// 4D
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ15") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ИНВ15",
			"ИНВ-15",
			СформироватьПечатнуюАктаИнвентаризацииНаличныхДенежныхСредств(МассивОбъектов, ОбъектыПечати));
			
	// 4D:ERP для Беларуси, Яна, 17.04.2017 15:13:30 
	// ошибки ПО, № 14762 
	// {		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ18_Локализация") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ИНВ18_Локализация",
			"ИНВ-18",
			СформироватьПечатнуюАктаИнвентаризацииНаличныхДенежныхСредств_Локализация(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	// }
	// 4D
		
КонецПроцедуры

// 4D:ERP для Беларуси, Яна, 17.04.2017 15:13:30 
// ошибки ПО, № 14762 
// {

Функция СформироватьПечатнуюАктаИнвентаризацииНаличныхДенежныхСредств_Локализация(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНВ18_Локализация";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияНаличныхДенежныхСредств.ПФ_MXL_ИНВ18_Локализация");
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПредставлениеОрганизации,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
	|	ДанныеДокумента.ПоследнийНомерПКО КАК НомерПКО,
	|	ДанныеДокумента.ПоследнийНомерРКО КАК НомерРКО,
	|	ДанныеДокумента.КассоваяКнига.СтруктурноеПодразделение КАК Подразделение,
	|	ТаблицаОтветственныеЛица.КассирНаименование КАК ФИОКассира,
	|	ТаблицаОтветственныеЛица.КассирДолжность КАК КассирДолжность,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК ФИОРуководителя,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК РуководительДолжность
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Номер
	|;
	|///////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Касса.ВалютаДенежныхСредств КАК Валюта,
	|	СУММА(ТаблицаДокумента.СуммаПоФакту) КАК СуммаПоФакту
	|	
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств.Кассы КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Касса.ВалютаДенежныхСредств
	|;
	|///////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                       КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.СуммаПоФактуВсего     КАК СуммаПоФактуРегл,
	|	ТаблицаДокумента.Ссылка.СуммаПоУчетуВсего     КАК СуммаПоУчетуРегл,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРеглПриход, 0) КАК СуммаИзлишекРегл,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРеглРасход, 0) КАК СуммаНедостачаРегл
	|	
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств.Кассы КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваНаличные.Обороты(,, Регистратор) КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ТаблицаДокумента.Ссылка
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
	|;";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументов = МассивРезультатов[0].Выбрать();
	ВыборкаРасхождений = МассивРезультатов[1].Выбрать();
	ВыборкаИтогов = МассивРезультатов[2].Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ВыборкаДокументов);
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДокументов.Номер);
		ОбластьМакета.Параметры.ДатаДокумента = Формат(ВыборкаДокументов.ДатаДокумента, "ДФ=dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДокументов.Ссылка);
		НомерПоПорядку = 1;
		Пока ВыборкаРасхождений.НайтиСледующий(СтруктураПоиска) Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНаличныхДенег");
			ОбластьМакета.Параметры.Заполнить(ВыборкаРасхождений);
			ОбластьМакета.Параметры.НомерПоПорядку = НомерПоПорядку;
			ОбластьМакета.Параметры.НаименованиеЦенности = НСтр("ru = 'наличных денег'");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			НомерПоПорядку = НомерПоПорядку + 1;
		КонецЦикла;
		Для Инд = НомерПоПорядку По 5 Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНаличныхДенег");
			ОбластьМакета.Параметры.НомерПоПорядку = Инд;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ВыборкаРасхождений.Сбросить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		Если ВыборкаИтогов.НайтиСледующий(СтруктураПоиска) Тогда
		
			ОбластьМакета.Параметры.СуммаПоФактуРубли = Формат(Цел(ВыборкаИтогов.СуммаПоФактуРегл), "ЧЦ=15; ЧДЦ=0; ЧН='0'");
			КопеекПоФакту = (ВыборкаИтогов.СуммаПоФактуРегл - Цел(ВыборкаИтогов.СуммаПоФактуРегл)) * 100;
			ОбластьМакета.Параметры.СуммаПоФактуКопейки = Формат(КопеекПоФакту, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
			
			ОбластьМакета.Параметры.СуммаПоУчетуРубли = Формат(Цел(ВыборкаИтогов.СуммаПоУчетуРегл), "ЧЦ=15; ЧДЦ=0; ЧН='0'");
			КопеекПоУчету = (ВыборкаИтогов.СуммаПоУчетуРегл - Цел(ВыборкаИтогов.СуммаПоУчетуРегл)) * 100;
			ОбластьМакета.Параметры.СуммаПоУчетуКопейки = Формат(КопеекПоУчету, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
			
			ОбластьМакета.Параметры.СуммаИзлишекРубли = Формат(Цел(ВыборкаИтогов.СуммаИзлишекРегл), "ЧЦ=15; ЧДЦ=0; ЧН='0'");
			КопеекИзлишек = (ВыборкаИтогов.СуммаИзлишекРегл - Цел(ВыборкаИтогов.СуммаИзлишекРегл)) * 100;
			ОбластьМакета.Параметры.СуммаИзлишекКопейки = Формат(КопеекИзлишек, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
			
			ОбластьМакета.Параметры.СуммаНедостачаРубли = Формат(Цел(ВыборкаИтогов.СуммаНедостачаРегл), "ЧЦ=15; ЧДЦ=0; ЧН='0'");
			КопеекНедостача = (ВыборкаИтогов.СуммаНедостачаРегл - Цел(ВыборкаИтогов.СуммаНедостачаРегл)) * 100;
			ОбластьМакета.Параметры.СуммаНедостачаКопейки = Формат(КопеекНедостача, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
			
			ОбластьМакета.Параметры.СуммаПоФактуРеглПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
				ВыборкаИтогов.СуммаПоФактуРегл,
				ВалютаРегламентированногоУчета,
				Ложь);
			ОбластьМакета.Параметры.СуммаПоУчетуРеглПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
				ВыборкаИтогов.СуммаПоУчетуРегл,
				ВалютаРегламентированногоУчета,
				Ложь);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ВыборкаИтогов.Сбросить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ВыборкаДокументов);
		ОбластьМакета.Параметры.НомерПКО = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДокументов.НомерПКО);
		ОбластьМакета.Параметры.НомерРКО = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДокументов.НомерРКО);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Страница2");
		ОбластьМакета.Параметры.Заполнить(ВыборкаДокументов);
		ОбластьМакета.Параметры.ДатаДокумента = Формат(ВыборкаДокументов.ДатаДокумента, "ДФ=dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
// }
// 4D

Функция СформироватьПечатнуюАктаИнвентаризацииНаличныхДенежныхСредств(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНВ15";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияНаличныхДенежныхСредств.ПФ_MXL_ИНВ15");
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПредставлениеОрганизации,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО,
	|	ДанныеДокумента.Организация.КодОКВЭД КАК ОрганизацияКодПоОКВЭД,
	|	ДанныеДокумента.ПоследнийНомерПКО КАК НомерПКО,
	|	ДанныеДокумента.ПоследнийНомерРКО КАК НомерРКО,
	|	ДанныеДокумента.КассоваяКнига.СтруктурноеПодразделение КАК Подразделение,
	|	ТаблицаОтветственныеЛица.КассирНаименование КАК ФИОКассира,
	|	ТаблицаОтветственныеЛица.КассирДолжность КАК КассирДолжность,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК ФИОРуководителя,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК РуководительДолжность
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Номер
	|;
	|///////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Касса.ВалютаДенежныхСредств КАК Валюта,
	|	СУММА(ТаблицаДокумента.СуммаПоФакту) КАК СуммаПоФакту
	|	
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств.Кассы КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Касса.ВалютаДенежныхСредств
	|;
	|///////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                       КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.СуммаПоФактуВсего     КАК СуммаПоФактуРегл,
	|	ТаблицаДокумента.Ссылка.СуммаПоУчетуВсего     КАК СуммаПоУчетуРегл,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРеглПриход, 0) КАК СуммаИзлишекРегл,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРеглРасход, 0) КАК СуммаНедостачаРегл
	|	
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств.Кассы КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваНаличные.Обороты(,, Регистратор) КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ТаблицаДокумента.Ссылка
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
	|;";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументов = МассивРезультатов[0].Выбрать();
	ВыборкаРасхождений = МассивРезультатов[1].Выбрать();
	ВыборкаИтогов = МассивРезультатов[2].Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ВыборкаДокументов);
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер);
		ОбластьМакета.Параметры.ДатаДокумента = Формат(ВыборкаДокументов.ДатаДокумента, "ДЛФ=D");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДокументов.Ссылка);
		НомерПоПорядку = 1;
		Пока ВыборкаРасхождений.НайтиСледующий(СтруктураПоиска) Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНаличныхДенег");
			ОбластьМакета.Параметры.Заполнить(ВыборкаРасхождений);
			ОбластьМакета.Параметры.НомерПоПорядку = НомерПоПорядку;
			ОбластьМакета.Параметры.НаименованиеЦенности = НСтр("ru = 'наличных денег'");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			НомерПоПорядку = НомерПоПорядку + 1;
		КонецЦикла;
		Для Инд = НомерПоПорядку По 5 Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНаличныхДенег");
			ОбластьМакета.Параметры.НомерПоПорядку = Инд;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ВыборкаРасхождений.Сбросить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		Если ВыборкаИтогов.НайтиСледующий(СтруктураПоиска) Тогда
		
			ОбластьМакета.Параметры.СуммаПоФактуРубли = Формат(Цел(ВыборкаИтогов.СуммаПоФактуРегл), "ЧЦ=15; ЧДЦ=0; ЧН='0'");
			КопеекПоФакту = (ВыборкаИтогов.СуммаПоФактуРегл - Цел(ВыборкаИтогов.СуммаПоФактуРегл)) * 100;
			ОбластьМакета.Параметры.СуммаПоФактуКопейки = Формат(КопеекПоФакту, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
			
			ОбластьМакета.Параметры.СуммаПоУчетуРубли = Формат(Цел(ВыборкаИтогов.СуммаПоУчетуРегл), "ЧЦ=15; ЧДЦ=0; ЧН='0'");
			КопеекПоУчету = (ВыборкаИтогов.СуммаПоУчетуРегл - Цел(ВыборкаИтогов.СуммаПоУчетуРегл)) * 100;
			ОбластьМакета.Параметры.СуммаПоУчетуКопейки = Формат(КопеекПоУчету, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
			
			ОбластьМакета.Параметры.СуммаИзлишекРубли = Формат(Цел(ВыборкаИтогов.СуммаИзлишекРегл), "ЧЦ=15; ЧДЦ=0; ЧН='0'");
			КопеекИзлишек = (ВыборкаИтогов.СуммаИзлишекРегл - Цел(ВыборкаИтогов.СуммаИзлишекРегл)) * 100;
			ОбластьМакета.Параметры.СуммаИзлишекКопейки = Формат(КопеекИзлишек, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
			
			ОбластьМакета.Параметры.СуммаНедостачаРубли = Формат(Цел(ВыборкаИтогов.СуммаНедостачаРегл), "ЧЦ=15; ЧДЦ=0; ЧН='0'");
			КопеекНедостача = (ВыборкаИтогов.СуммаНедостачаРегл - Цел(ВыборкаИтогов.СуммаНедостачаРегл)) * 100;
			ОбластьМакета.Параметры.СуммаНедостачаКопейки = Формат(КопеекНедостача, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
			
			ОбластьМакета.Параметры.СуммаПоФактуРеглПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
				ВыборкаИтогов.СуммаПоФактуРегл,
				ВалютаРегламентированногоУчета,
				Ложь);
			ОбластьМакета.Параметры.СуммаПоУчетуРеглПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
				ВыборкаИтогов.СуммаПоУчетуРегл,
				ВалютаРегламентированногоУчета,
				Ложь);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ВыборкаИтогов.Сбросить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ВыборкаДокументов);
		ОбластьМакета.Параметры.НомерПКО = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.НомерПКО);
		ОбластьМакета.Параметры.НомерРКО = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.НомерРКО);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Страница2");
		ОбластьМакета.Параметры.Заполнить(ВыборкаДокументов);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
