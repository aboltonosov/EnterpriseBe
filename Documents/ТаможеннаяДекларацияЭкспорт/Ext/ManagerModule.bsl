#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СозданиеНаОсновании

Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ТаможеннаяДекларацияЭкспорт) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ТаможеннаяДекларацияЭкспорт.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.ТаможеннаДекларацияЭкспортНаОсновании";
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ТаможеннаяДекларацияЭкспорт);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ВестиУчетТаможенныхДекларацийНаЭкспорт";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаСведенияТаможенныхДекларацийЭкспорт(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаможеннаяДекларацияЭкспорт.Ссылка,
	|	ТаможеннаяДекларацияЭкспорт.Дата,
	|	ТаможеннаяДекларацияЭкспорт.Организация,
	|	ТаможеннаяДекларацияЭкспорт.Номер КАК НомерВходящегоДокумента,
	|	ТаможеннаяДекларацияЭкспорт.КодОперации,
	|	ТаможеннаяДекларацияЭкспорт.Примечание,
	|	ТаможеннаяДекларацияЭкспорт.СборСопроводительныхДокументовЗавершен
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ТаможеннаяДекларацияЭкспорт КАК ТаможеннаяДекларацияЭкспорт
	|ГДЕ
	|	ТаможеннаяДекларацияЭкспорт.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаСведенияТаможенныхДекларацийЭкспорт(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СведенияТаможенныхДекларацийЭкспорт";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Дата                         КАК Период,
	|	Реквизиты.Ссылка                       КАК Регистратор,
	|	ДокументыОснования.ДокументОснование   КАК ДокументОтгрузки,
	|	Реквизиты.Организация                  КАК Организация,
	|	Реквизиты.НомерВходящегоДокумента      КАК НомерТаможеннойДекларации,
	|	Реквизиты.КодОперации                  КАК КодОперации,
	|	СопроводительныеДокументы.КодТС        КАК КодТС,
	|	СопроводительныеДокументы.ВидДокумента КАК ВидДокумента,
	|	СопроводительныеДокументы.НомерТСД     КАК НомерТСД,
	|	СопроводительныеДокументы.ДатаТСД      КАК ДатаТСД,
	|	Реквизиты.Примечание                   КАК Примечание
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияЭкспорт.ДокументыОснования КАК ДокументыОснования
	|		ПО Реквизиты.Ссылка = ДокументыОснования.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияЭкспорт.СопроводительныеДокументы КАК СопроводительныеДокументы
	|		ПО Реквизиты.Ссылка = СопроводительныеДокументы.Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура формирования движений по регистру "Сведения таможенных деклараций на экспорт".
//
// Параметры:
//	ДополнительныеСвойства - Структура, перечень таблиц значений для записи в регистры
//	Движения - Коллекция движений документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьСведенияТаможенныхДекларацийЭкспорт(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаСведенияТаможенныхДекларацийЭкспорт = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСведенияТаможенныхДекларацийЭкспорт;
	
	Если Отказ ИЛИ ТаблицаСведенияТаможенныхДекларацийЭкспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияСведенияТаможенныхДекларацийЭкспорт = Движения.СведенияТаможенныхДекларацийЭкспорт;
	ДвиженияСведенияТаможенныхДекларацийЭкспорт.Записывать = Истина;
	ДвиженияСведенияТаможенныхДекларацийЭкспорт.Загрузить(ТаблицаСведенияТаможенныхДекларацийЭкспорт);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
