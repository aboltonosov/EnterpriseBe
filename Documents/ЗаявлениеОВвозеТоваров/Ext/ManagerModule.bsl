#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

// Добавляет команды создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
// Возвращаемое значение:
//   Неопределено
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаявлениеОВвозеТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ЗаявлениеОВвозеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ЗаявлениеОВвозеТоваров);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьИмпортныеЗакупки";
	
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

// Возвращает платежный документ оплаты НДС по заявлению о ввозе
// 
// Параметры:
//   Параметры - Структура
//
// Возвращаемое значение:
//   Структура Парметры с заполненными ссылками на документы оплаты
Функция НайтиПлатежныйДокументПоЗаявлению(Параметры) Экспорт
	
	ВыполнитьПроверкуПравДоступа("Чтение", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	ВыполнитьПроверкуПравДоступа("Чтение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	
	Если ПустаяСтрока(Параметры.НомерДокументаПеречисленияНалога) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подзапрос.Списание.НомерВходящегоДокумента КАК НомерДокументаПеречисленияНалога,
		|	Подзапрос.Списание.ДатаВходящегоДокумента КАК ДатаДокументаПеречисленияНалога
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ЕСТЬNULL(СписаниеБезналичныхДС.Ссылка, СписаниеБезналичныхДСБезЗаявок.Ссылка)) КАК Списание
		|	ИЗ
		|		Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДС
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДС
		|				ПО ЗаявкаНаРасходованиеДС.Ссылка = СписаниеБезналичныхДС.ДокументОснование
		|					И (СписаниеБезналичныхДС.Проведен)
		|			ПО ЗаявлениеОВвозеТоваров.Ссылка = ЗаявкаНаРасходованиеДС.ДокументОснование
		|				И (ЗаявкаНаРасходованиеДС.Проведен)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДСБезЗаявок
		|			ПО ЗаявлениеОВвозеТоваров.Ссылка = СписаниеБезналичныхДСБезЗаявок.ДокументОснование
		|				И (СписаниеБезналичныхДСБезЗаявок.Проведен)
		|	ГДЕ
		|		НЕ ЕСТЬNULL(СписаниеБезналичныхДС.Ссылка, СписаниеБезналичныхДСБезЗаявок.Ссылка) ЕСТЬ NULL 
		|		И ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка) КАК Подзапрос";
		
		Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Параметры, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Функция находит заявления о ввозе товаров заданного документа-основания.
//
// Параметры:
//	Основание - ДокументСсылка - Документ, для которого необходимо найти заявление о ввозе товаров
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется заявление о ввозе товаров
//	РеквизитыЗаявленияОВВозеТоваров - Структура - Возвращаемый. Данные заявления о ввозе товаров (Ссылка, Номер, Дата, Организация)
//	Проведен - Булево - Признак того, что 
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица найденных заявлений о ввозе товаров (Ссылка, Номер, Дата, Организация, ДатаПодтвержденияОплаты)
//
Функция ЗаявленияОВвозеТоваровПоОснованию(Основание, Организация = Неопределено, РеквизитыЗаявленияОВВозеТоваров = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Операция.Ссылка                                  КАК Ссылка,
	|	Операция.Проведен                                КАК Проведен,
	|	Операция.Номер                                   КАК Номер,
	|	Операция.Дата                                    КАК Дата,
	|	Операция.Организация                             КАК Организация,
	|	Операция.Контрагент                              КАК Контрагент,
	|	Операция.ДатаПодтвержденияОплаты                 КАК ДатаПодтвержденияОплаты,
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления КАК ДокументОснование
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|		ПО ЗаявлениеОВвозеТоваровТовары.Ссылка = Операция.Ссылка
	|		И НЕ Операция.ПометкаУдаления
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = &Основание
	|	И ВЫБОР 
	|		КОГДА &Организация = НЕОПРЕДЕЛЕНО ТОГДА
	|			ИСТИНА 
	|		ИНАЧЕ 
	|			Операция.Организация = &Организация 
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Ссылка,
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Операция.ДатаПодтвержденияОплаты
	|");
	
	Запрос.УстановитьПараметр("Основание",   Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыЗаявленияОВвозеТоваров = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыЗаявленияОВвозеТоваров.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаЗаявлений = Новый ТаблицаЗначений;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗаявлений = РезультатЗапроса.Выгрузить();
		ЗаполнитьЗначенияСвойств(РеквизитыЗаявленияОВвозеТоваров, ТаблицаЗаявлений[0]);
	КонецЕсли;
	
	Возврат ТаблицаЗаявлений;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
// 		МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
// 		НовыйСтатус - Строка - Имя нового статуса
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
// 		Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ВЫБОР КОГДА ТаблицаДокументов.ОплатаПодтверждена ТОГДА
	|		&СтрокаОплатаПодтверждена
	|	ИНАЧЕ
	|		&СтрокаОплатаНеПодтверждена
	|	КОНЕЦ КАК ПредставлениеТекущегоСтатуса,
	|	&СтрокаОплатаПодтверждена КАК ПредставлениеНовогоСтатуса,
	|	ТаблицаДокументов.ОплатаПодтверждена КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("СтрокаОплатаПодтверждена", НСтр("ru = 'Подтверждено ФНС'"));
	Запрос.УстановитьПараметр("СтрокаОплатаНеПодтверждена", НСтр("ru = 'Не подтверждено ФНС'"));
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
// 		ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
// 		НовыйСтатус - Перечисление - Новый статус
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Дополнительные проверки отсутствуют
	
КонецФункции

// Процедура формирует таблицу остатков товаров к оформлению заявлений о ввозе товаров по документу поступления.
//
// Параметры:
//	ДокументПоступления - ДокументСсылка.ПоступлениеТоваровУслуг - Документ поступления, по которому 
//						  будут определены остатки товаров к оформлению заявлений о ввозе товаров
//	ЗаполнениеНаОсновании - Булево, признак того, что документ введен на основании поступления товаров  услуг
//	
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица остатокв товаров для оформления заявлений
//
Функция ТаблицаОстатковТоваровКОформлениюЗаявленийОВвозеТоваров(ДокументПоступления, ЗаполнениеНаОсновании = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТоварыКОформлениюЗаявленийОВвозе();
	
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	Запрос.УстановитьПараметр("ДатаПринятияНаУчет", ДокументПоступления.Дата);
	Запрос.УстановитьПараметр("ДолларСША", Справочники.Валюты.НайтиПоКоду("840"));
	Запрос.УстановитьПараметр("ВидТранспорта", ОпределитьВидТранспортаПоСтатистике(ДокументПоступления));
	Запрос.УстановитьПараметр("ЗаполнениеНаОсновании", ЗаполнениеНаОсновании);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТоваров;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "ЗаявлениеОВвозеТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Заявление о ввозе товаров'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюУТКлиент.ПечатьЗаявлениеОВвозеТоваров";
	КомандаПечати.СписокФорм     = "ФормаДокумента,ФормаСписка";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "СтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюУТКлиент.ПечатьСтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   ОбъектыПечати         - Список значений  - значение - ссылка на объект
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеОВвозеТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ЗаявлениеОВвозеТоваров", 
			НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'"),
			ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СтатистическаяФормаУчетаПеремещенияТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"СтатистическаяФормаУчетаПеремещенияТоваров", 
			НСтр("ru = 'Статистическая форма учета перемещения товаров'"),
			ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

//++ НЕ УТ

// Выгружает документ и возвращает свойства файла выгрузки.
//
// Параметры:
//	Объект		- ДокументОбъект.ЗаявленеиеОВвозеТоваров (или ДокументСсылка.ЗаявлениеОВвозеТоваров)
//				  Ссылка на выгружаемый документ.
//	
// Возвращаемое значение:
//	Массив структур или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище (кроме режима только проверки документа).
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением).
//
Функция ВыгрузитьЗаявлениеОВвозеТоваров(УникальныйИдентификатор, Объект, ТолькоПроверка = Ложь) Экспорт
	
	// 4D:ERP для Беларуси, ВладимирР, 07.04.2017 15:59:58
	// Выгрузка заявления о ввозе товаров из ЕАЭС, №10718
	// {
	Возврат ВыгрузитьЗаявлениеОВвозеТоваров_Локализация(Объект, УникальныйИдентификатор, ТолькоПроверка);
	// }
	// 4D
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = ?(НЕ ТолькоПроверка, НСтр("ru='Документ не записан. Выгрузка прервана!'"), НСтр("ru='Документ не записан. Проверка прервана!'"));
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
	
	СтруктураРеквизитовВыгрузки = Объект.Ссылка.ПолучитьОбъект().СтруктураРеквизитовВыгрузки.Получить();
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	ДанныеДокумента = ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивДокументов);
	
	Если Объект.Дата >= '20150101' Тогда
		СодержаниеВыгрузки = ЭлектронноеПредставление2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	Иначе
		СодержаниеВыгрузки = ЭлектронноеПредставление(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	КонецЕсли;
	
	Если СодержаниеВыгрузки = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = ?(НЕ ТолькоПроверка, НСтр("ru='Выгрузка прервана!'"), НСтр("ru='В ходе проверки были найдены ошибки, препятствующие выгрузке.'"));
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
	
	
	Для Каждого ЭлементВыгрузки Из СодержаниеВыгрузки Цикл
		
		Если Результат = Неопределено Тогда
			Результат = Новый Массив;
		КонецЕсли;
		
		Если НЕ ТолькоПроверка Тогда
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			СохраняемыйФайл = Новый ТекстовыйДокумент;
			СохраняемыйФайл.УстановитьТекст(ЭлементВыгрузки.ТекстФайла);
			СохраняемыйФайл.Записать(ИмяВременногоФайла, ЭлементВыгрузки.КодировкаТекста);
			
			ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
			Если УникальныйИдентификатор <> Неопределено Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураВыгрузки = Новый Структура;
		Если НЕ ТолькоПроверка Тогда
			СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
		
		Результат.Добавить(СтруктураВыгрузки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выгружает документ и возвращает свойства файла выгрузки.
//
// Параметры:
//	Объект		- ДокументОбъект.ЗаявленеиеОВвозеТоваров (или ДокументСсылка.ЗаявлениеОВвозеТоваров)
//				  Ссылка на выгружаемый документ.
//	
// Возвращаемое значение:
//	Массив структур или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище (кроме режима только проверки документа).
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением).
//
Функция ВыгрузитьУчетПеремещенияТоваров(УникальныйИдентификатор, Объект, ТолькоПроверка = Ложь) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = ?(НЕ ТолькоПроверка, НСтр("ru='Документ не записан. Выгрузка прервана!'"), НСтр("ru='Документ не записан. Проверка прервана!'"));
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	ДанныеДокумента = ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивДокументов);
	
	СодержаниеВыгрузки = УчетПеремещенияТоваровЭлектронноеПредставление(ДанныеДокумента);
	
	Если СодержаниеВыгрузки = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = ?(НЕ ТолькоПроверка, НСтр("ru='Выгрузка прервана!'"), НСтр("ru='В ходе проверки были найдены ошибки, препятствующие выгрузке.'"));
		
		Сообщение.Сообщить();
		
		Возврат Результат;
		
	КонецЕсли;
		
	Для Каждого ЭлементВыгрузки Из СодержаниеВыгрузки Цикл
		
		Если Результат = Неопределено Тогда
			Результат = Новый Массив;
		КонецЕсли;
		
		Если НЕ ТолькоПроверка Тогда
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			СохраняемыйФайл = Новый ТекстовыйДокумент;
			СохраняемыйФайл.УстановитьТекст(ЭлементВыгрузки.ТекстФайла);
			СохраняемыйФайл.Записать(ИмяВременногоФайла, ЭлементВыгрузки.КодировкаТекста);
			
			ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
			Если УникальныйИдентификатор <> Неопределено Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураВыгрузки = Новый Структура;
		Если НЕ ТолькоПроверка Тогда
			СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
		
		Результат.Добавить(СтруктураВыгрузки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ПроведениеПоРеглУчету

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//   
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	#Область ТекстЗаявлениеНДСКОплате
	ТекстЗаявлениеНДСКОплате = 
	"ВЫБРАТЬ // Заявление НДС к оплате по рег. НДСПредъявленный <Дт 19.10, 19.07 :: Кт 68.42>
	|
	|	Операция.Ссылка             КАК Ссылка,
	|	Операция.Дата               КАК Период,
	|	Операция.Организация        КАК Организация,
	|	НЕОПРЕДЕЛЕНО                КАК ИдентификаторСтроки,
	|
	|	СУММА(НДСПредъявленный.НДС) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСпоПриобретеннымЦенностям) КАК ВидСчетаДт,
	|	НДСПредъявленный.ВидДеятельностиНДС                                    КАК АналитикаУчетаДт,
	|	НДСПредъявленный.ВидЦенности                                           КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                               КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                 КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)              КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Операция.Контрагент        КАК СубконтоДт1,
	|	Операция.Ссылка            КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО               КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                  КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)    КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате) КАК СчетКт,
	|	Операция.Контрагент                  КАК СубконтоКт1,
	|	Операция.Договор                     КАК СубконтоКт2,
	|	Операция.Ссылка                      КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Заявление НДС к оплате"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ПО
	|		НДСПредъявленный.Регистратор = Операция.Ссылка
	|		И НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Операция.Договор,
	|	Операция.Ссылка,
	|	НДСПредъявленный.ВидДеятельностиНДС,
	|	НДСПредъявленный.ВидЦенности
	|";
	#КонецОбласти
	
	#Область ТекстНДСВСтоимость
	ТекстНДСВСтоимость = 
	"ВЫБРАТЬ  // Включение НДС в стоимость по рег. НДСПредъявленный <Дт 41 :: Кт 19.10>
	|
	|	Операция.Ссылка                         КАК Ссылка,
	|	Операция.Дата                           КАК Период,
	|	Операция.Организация                    КАК Организация,
	|	НЕОПРЕДЕЛЕНО                            КАК ИдентификаторСтроки,
	|
	|	СУММА(Строки.СуммаНДС)                  КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе) КАК ВидСчетаДт,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		Строки.ВидЗапасов.ГруппаФинансовогоУчета
	|	ИНАЧЕ
	|		Строки.Номенклатура.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК АналитикаУчетаДт,
	|	ПоступлениеТоваровУслуг.Склад КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ПоступлениеТоваровУслуг.Склад.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Строки.Номенклатура КАК СубконтоДт1,
	|	ПоступлениеТоваровУслуг.Склад КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСпоПриобретеннымЦенностям) КАК ВидСчетаКт,
	|	НДСПредъявленный.ВидДеятельностиНДС                                    КАК АналитикаУчетаКт,
	|	НДСПредъявленный.ВидЦенности                                           КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                               КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                 КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)              КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	Операция.Контрагент                  КАК СубконтоКт1,
	|	Операция.Ссылка                      КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО                         КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Включение НДС в стоимость"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ПО Строки.ДокументПоступления = ПоступлениеТоваровУслуг.Ссылка
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ПО
	|		НДСПредъявленный.Регистратор = Строки.Ссылка
	|		И НДСПредъявленный.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВключениеНДСВСтоимость)
	|	
	|ГДЕ
	|	НЕ ПоступлениеТоваровУслуг.Склад.ЦеховаяКладовая
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Операция.Ссылка,
	|	Строки.Номенклатура,
	|	Строки.ВидЗапасов,
	|	НДСПредъявленный.ВидДеятельностиНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	ПоступлениеТоваровУслуг.Склад
	|";
	#КонецОбласти
	
	#Область ТекстНДСВСтоимостьСкладПроизводства
	ТекстНДСВСтоимостьСкладПроизводства = 
	"ВЫБРАТЬ  // Включение НДС в стоимость по рег. НДСПредъявленный на производственном складе <Дт 20 :: Кт 19.10>
	|
	|	Операция.Ссылка                         КАК Ссылка,
	|	Операция.Дата                           КАК Период,
	|	Операция.Организация                    КАК Организация,
	|	НЕОПРЕДЕЛЕНО                            КАК ИдентификаторСтроки,
	|
	|	СУММА(Строки.СуммаНДС)                  КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Производство) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	ПоступлениеТоваровУслуг.Склад.Подразделение КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ПоступлениеТоваровУслуг.Склад.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.МатериальныеЗатраты) КАК СубконтоДт1,
	|	Строки.Номенклатура КАК СубконтоДт2,
	|	Строки.ВидЗапасов.ГруппаПродукции КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСпоПриобретеннымЦенностям) КАК ВидСчетаКт,
	|	НДСПредъявленный.ВидДеятельностиНДС                                    КАК АналитикаУчетаКт,
	|	НДСПредъявленный.ВидЦенности                                           КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                               КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                 КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)              КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	Операция.Контрагент                  КАК СубконтоКт1,
	|	Операция.Ссылка                      КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО                         КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Включение НДС в стоимость"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ПО Строки.ДокументПоступления = ПоступлениеТоваровУслуг.Ссылка
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ПО
	|		НДСПредъявленный.Регистратор = Строки.Ссылка
	|		И НДСПредъявленный.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВключениеНДСВСтоимость)
	|	
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Склад.ЦеховаяКладовая
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Операция.Ссылка,
	|	Строки.Номенклатура,
	|	Строки.ВидЗапасов,
	|	НДСПредъявленный.ВидДеятельностиНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	ПоступлениеТоваровУслуг.Склад
	|";
	#КонецОбласти
	
	Разделитель = ОбщегоНазначения.РазделительПакетаЗапросов();
	Возврат 
		ТекстЗаявлениеНДСКОплате
		+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстНДСВСтоимость
		+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстНДСВСтоимостьСкладПроизводства
		+ "";
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, 
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//		Строка - Текст запроса
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат "";
	
КонецФункции

#КонецОбласти

//-- НЕ УТ
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаявлениеОВвозеТоваров";
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаТоварыКОформлениюЗаявленийОВвозеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
	//++ НЕ УТ 
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ 
	ПроведениеСерверУТ.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Дата,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.Валюта,
	|	ЗаявлениеОВвозеТоваров.СуммаДокумента,
	|	ЗаявлениеОВвозеТоваров.ОплатаПодтверждена,
	|	ЗаявлениеОВвозеТоваров.ДатаПодтвержденияОплаты,
	|	ЗаявлениеОВвозеТоваров.Номер                    КАК Номер,
	|	ЗаявлениеОВвозеТоваров.Валюта                   КАК Валюта,
	|	ЗаявлениеОВвозеТоваров.Договор                  КАК Договор,
	|	ЗаявлениеОВвозеТоваров.Ответственный            КАК Ответственный,
	|	ЗаявлениеОВвозеТоваров.Подразделение            КАК Подразделение,
	|	ЗаявлениеОВвозеТоваров.Комментарий              КАК Комментарий,
	|	ЗаявлениеОВвозеТоваров.ПометкаУдаления          КАК ПометкаУдаления,
	|	ЗаявлениеОВвозеТоваров.Проведен                 КАК Проведен
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                     Реквизиты.Дата);
	Запрос.УстановитьПараметр("Организация",                Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент",                 Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Валюта",                     Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ОплатаПодтверждена",         Реквизиты.ОплатаПодтверждена);
	Запрос.УстановитьПараметр("ДатаПодтвержденияОплаты",    Реквизиты.ДатаПодтвержденияОплаты);
	Запрос.УстановитьПараметр("КодВидаОперации", 			"19"); // "19 Ввоз товаров из Евразийского экономического союза"
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	
	Запрос.УстановитьПараметр("Договор",                       Реквизиты.Договор);
	Запрос.УстановитьПараметр("СуммаДокумента",                Реквизиты.СуммаДокумента);
	Запрос.УстановитьПараметр("Валюта",                        Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Контрагент",                    Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Номер",                         Реквизиты.Номер);
	Запрос.УстановитьПараметр("НомерНаПечать",       	       ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер,Истина));
	Запрос.УстановитьПараметр("Ответственный",                 Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Подразделение",                 Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",         Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	Запрос.УстановитьПараметр("Комментарий",                   Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",               Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      Реквизиты.Проведен);
	
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru='По договору ""%Договор""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор", Реквизиты.Договор);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
КонецПроцедуры

Процедура ИнициализироватьКурсыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУПР") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Константы.ВалютаРегламентированногоУчета.Получить(),
		Константы.ВалютаУправленческогоУчета.Получить(),
		Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыКОформлениюЗаявленийОВвозеТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКОформлениюЗаявленийОВвозеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ЗаявлениеОВвозеТоваровТовары.НомерСтроки           КАК НомерСтроки,
	|		&Период                                            КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)             КАК ВидДвижения,
	|		ЗаявлениеОВвозеТоваровТовары.ДокументПоступления   КАК ДокументПоступления,
	|		ЗаявлениеОВвозеТоваровТовары.Номенклатура          КАК Номенклатура,
	|		ЗаявлениеОВвозеТоваровТовары.Характеристика        КАК Характеристика,
	|		ЗаявлениеОВвозеТоваровТовары.Серия                 КАК Серия,
	|		ЗаявлениеОВвозеТоваровТовары.Склад                 КАК Склад,
	|		ЗаявлениеОВвозеТоваровТовары.Количество            КАК КОформлению,
	|		ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость    КАК ФактурнаяСтоимость
	|	ИЗ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|	ГДЕ
	|		ЗаявлениеОВвозеТоваровТовары.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""Товары"" 											КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 						КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО										КАК Поставщик,
	|	ДанныеДокумента.Контрагент							КАК Контрагент,
	|	ТаблицаДокумента.СтавкаНДС 							КАК СтавкаНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность				КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)	КАК ВидЦенности
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ТоварыПоступления"" 								КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 						КАК НомерСтроки,
	|	ДанныеДокументаПоступления.Партнер					КАК Поставщик,
	|	ДанныеДокументаПоступления.Контрагент				КАК Контрагент,
	|	МИНИМУМ(ТаблицаДокументаПоступления.СтавкаНДС)		КАК СтавкаНДС,
	|	ДанныеДокументаПоступления.ЗакупкаПодДеятельность	КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)			КАК ВидЦенности
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаДокументаПоступления
	|		ПО ТаблицаДокумента.ДокументПоступления = ТаблицаДокументаПоступления.Ссылка
	|		И ВЫБОР 
	|			КОГДА ТаблицаДокументаПоступления.ИдентификаторСтроки <> """" ТОГДА
	|				ТаблицаДокумента.ИдентификаторСтроки = ТаблицаДокументаПоступления.ИдентификаторСтроки
	|			ИНАЧЕ
	|		 		ТаблицаДокумента.АналитикаУчетаНоменклатуры = ТаблицаДокументаПоступления.АналитикаУчетаНоменклатуры
	|			КОНЕЦ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ДанныеДокументаПоступления
	|		ПО ТаблицаДокумента.ДокументПоступления = ДанныеДокументаПоступления.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ДанныеДокументаПоступления.Партнер,
	|	ДанныеДокументаПоступления.Контрагент,
	|	ДанныеДокументаПоступления.ЗакупкаПодДеятельность
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокументаПоступления.СтавкаНДС) = 1
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ПартииРасходовНаСебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Запрос.Параметры);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата							КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 			КАК ВидДвижения,
	|	ДанныеДокумента.Организация 					КАК Организация,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ДокументПоступления				КАК ДокументПоступления,
	|	ТоварыДокумента.ВидЗапасов 						КАК ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ДанныеДокумента.Ссылка 							КАК ДокументПоступленияРасходов,
	|	НЕОПРЕДЕЛЕНО 									КАК СтатьяРасходов,
	|
	|	СУММА(ТоварыДокумента.Количество)				КАК Количество,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр 
	|						* ТоварыДокумента.СуммаНДС) КАК Стоимость,
	|	0										 		КАК СтоимостьБезНДС,
	|	0										 		КАК СтоимостьРегл,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|			ИНАЧЕ ТоварыДокумента.СуммаНДС
	|		КОНЕЦ)										КАК НДСРегл,
	|	ТоварыДокумента.Подразделение					КАК ПодразделениеРасходов,
	|	0												КАК ПостояннаяРазница,
	|	0												КАК ВременнаяРазница
	|
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|	ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ПартионныйУчетВерсии21
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ТоварыДокумента.ДокументПоступления,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий,
	|	ТоварыДокумента.Подразделение
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|
	|	0			 КАК Стоимость,
	|	0 			 КАК СтоимостьБезНДС,
	|	0 			 КАК СтоимостьРегл,
	|	0			 КАК ПостояннаяРазница,
	|	0			 КАК ВременнаяРазница,
	|	ТоварыДокумента.СуммаНДС	 					 КАК НДСРегл,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС	 КАК ВидДеятельностиНДС,
	|	&Ссылка 					 					 КАК ДокументПоступленияРасходов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий	 КАК АналитикаУчетаПартий,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры		 КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|	ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка 
	|	И ТоварыДокумента.СуммаНДС <> 0
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Запрос.Параметры);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)									КАК ВидДвижения,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры 								КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ КАК РазделУчета,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ЕСТЬNULL(ТоварыПоступления.ВидЗапасов, ТоварыДокумента.ВидЗапасов)
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ																	КАК ВидЗапасов,
	|	ДанныеДокумента.Организация												КАК Организация,
	|
	//	партионный учет версии 2.2
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК Партия,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК АналитикаУчетаПартий,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ПоступлениеТоваровУслуг.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ПоступлениеТоваровУслуг.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПоступлениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ПоступлениеТоваровУслуг.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПоступлениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ПоступлениеТоваровУслуг.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК АналитикаФинансовогоУчета,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК КорАналитикаУчетаПартий,
	|	СУММА(ВЫБОР 
	|		КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0 
	|		ИНАЧЕ ТоварыДокумента.СуммаНДС
	|	КОНЕЦ)	 																КАК НДСРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыСПартией)				КАК ТипЗаписи,
	|
	|	0																		КАК Количество,
	|	0																		КАК Стоимость,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС)		КАК СуммаДопРасходов,
	|	0																		КАК СтоимостьБезНДС,
	|	0																		КАК СуммаДопРасходовБезНДС,
	|
	|	СУММА(ВЫБОР КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	ТОГДА
	|		&КоэффициентПересчетаВВалютуРегл * ТоварыДокумента.СуммаНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ)																	КАК СтоимостьРегл,
	|	0																		КАК ПостояннаяРазница,
	|	0																		КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)		КАК ХозяйственнаяОперация,
	|	ТоварыДокумента.Подразделение											КАК Подразделение,
	|	ТоварыДокумента.ДокументПоступления										КАК ДокументИсточник
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ТоварыПоступления
	|	ПО 
	|		ТоварыПоступления.Ссылка = ТоварыДокумента.ДокументПоступления
	|		И ВЫБОР 
	|			КОГДА ТоварыПоступления.ИдентификаторСтроки <> """" ТОГДА
	|				ТоварыПоступления.ИдентификаторСтроки = ТоварыДокумента.ИдентификаторСтроки
	|			ИНАЧЕ
	|				ТоварыПоступления.АналитикаУчетаНоменклатуры = ТоварыДокумента.АналитикаУчетаНоменклатуры
	|			КОНЕЦ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ПО
	|		ТоварыДокумента.ДокументПоступления = ПоступлениеТоваровУслуг.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартийПоступления
	|	ПО ТаблицаАналитикУчетаПартийПоступления.НомерСтроки 	   = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартийПоступления.ИмяТабличнойЧасти = ""ТоварыПоступления""
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТоварыДокумента.СуммаНДС <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ЕСТЬNULL(ТоварыПоступления.ВидЗапасов, ТоварыДокумента.ВидЗапасов)
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ПоступлениеТоваровУслуг.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ПоступлениеТоваровУслуг.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПоступлениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ПоступлениеТоваровУслуг.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПоступлениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ПоступлениеТоваровУслуг.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТоварыДокумента.Подразделение,
	|	ТоварыДокумента.ДокументПоступления
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                               КАК ВидДвижения,
	|	ДанныеДокумента.Организация                                          КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)               КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)            КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы) КАК Статья,
	|	ДанныеДокумента.Организация                                          КАК Аналитика,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента 
	|					* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))  КАК Сумма
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";

	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Закупки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Запрос.Параметры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Операция.Дата                                              КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС) КАК ХозяйственнаяОперация,
	|	Операция.Организация                                       КАК Организация,
	|	ПоступлениеТоваровУслугТовары.Подразделение                КАК Подразделение,
	|	ПоступлениеТоваровУслуг.Менеджер                           КАК Менеджер,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры                 КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Склад                                      КАК Склад,
	|	ТоварыДокумента.ВидЗапасов.ТипЗапасов                      КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                      КАК ВидЗапасов,
	|	ПоступлениеТоваровУслуг.Партнер                            КАК Партнер,
	|	ПоступлениеТоваровУслуг.Контрагент                         КАК Контрагент,
	|	ПоступлениеТоваровУслуг.Соглашение                         КАК Соглашение,
	|	ПоступлениеТоваровУслуг.Договор                            КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельностиНоменклатуры,
	|	ПоступлениеТоваровУслуг.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	0                                                          КАК Количество,
	|	&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС КАК Сумма,
	|	0                                                          КАК СуммаБезНДС,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаРегл,
	|	0                                                          КАК СуммаРеглБезНДС,
	|	0                                                          КАК СуммаСкидки,
	|	&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС КАК Стоимость,
	|	0                                                          КАК СтоимостьБезНДС,
	|	ТоварыДокумента.СуммаНДС                                   КАК СтоимостьРегл,
	|	0                                                          КАК СуммаДопРасходов,
	|	0                                                          КАК СуммаДопРасходовБезНДС,
	|
	|	&ВалютаРегламентированногоУчета                            КАК ВалютаДокумента,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаВВалютеДокумента,
	|	0                                                          КАК СуммаБезНДСВВалютеДокумента,
	|	&ВалютаРегламентированногоУчета                            КАК ВалютаВзаиморасчетов,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаВВалютеВзаиморасчетов,
	|	0                                                          КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ ТоварыДокумента.Номенклатура
	|	КОНЕЦ                                                      КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслуг.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА
	|				ПоступлениеТоваровУслуг.Договор
	|		КОГДА ПоступлениеТоваровУслуг.ПоступлениеПоЗаказам
	|				И ПоступлениеТоваровУслуг.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА
	|				ПоступлениеТоваровУслуг.ЗаказПоставщику
	|		ИНАЧЕ
	|			ПоступлениеТоваровУслуг.Ссылка
	|	КОНЕЦ                                                       КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ПО ПоступлениеТоваровУслугТовары.Ссылка = ПоступлениеТоваровУслуг.Ссылка
	|		ПО ТоварыДокумента.ДокументПоступления = ПоступлениеТоваровУслугТовары.Ссылка
	|			И ТоварыДокумента.АналитикаУчетаНоменклатуры = ПоступлениеТоваровУслугТовары.АналитикаУчетаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|		ПО ТоварыДокумента.Ссылка = Операция.Ссылка
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                            КАК Партнер,
	|	&Контрагент                             КАК Контрагент,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыДокумента.ДокументПоступления.НаправлениеДеятельности) = 1
	|			ТОГДА МАКСИМУМ(ТоварыДокумента.ДокументПоступления.НаправлениеДеятельности)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                   КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыДокумента.ДокументПоступления.Склад) = 1
	|			ТОГДА МАКСИМУМ(ТоварыДокумента.ДокументПоступления.Склад)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                   КАК МестоХранения,
	|	&Подразделение                          КАК Подразделение,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Валюта                                 КАК Валюта,
	|	&СуммаДокумента                         КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору                   КАК Дополнительно,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|		ПО ДанныеДокумента.Ссылка = ТоварыДокумента.Ссылка		
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	&Организация                            КАК Организация,
	|	&Контрагент                             КАК Контрагент,
	|	&Ссылка                                 КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	ДанныеДокумента.НомерОтметкиОРегистрации КАК НомерСчетаФактуры,
	|	ДанныеДокумента.ДатаПодтвержденияОплаты КАК ДатаСчетаФактуры,
	|	""19""                                  КАК КодВидаОперации,
	|	2                                       КАК КодВидаСделки,
	|	1                                       КАК КодСпособаПолучения,
	|	&ВалютаРегламентированногоУчета         КАК Валюта,
	|	СУММА(ТоварыДокумента.НалоговаяБазаНДС) КАК СуммаПоСчетуФактуре,
	|	СУММА(ТоварыДокумента.СуммаНДС)         КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|		ПО ДанныеДокумента.Ссылка = ТоварыДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.НомерОтметкиОРегистрации,
	|	ДанныеДокумента.ДатаПодтвержденияОплаты
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура формирования движений по регистру "Товары к оформлению заявлений о ввозе".
//
// Параметры:
//	ДополнительныеСвойства - Структура, перечень таблиц значений для записи в регистры
//	Движения - Коллекция движений документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьТоварыКОформлениюЗаявленийОВвозеТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаТоварыКОформлениюЗаявленийОВвозе = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОформлениюЗаявленийОВвозеТоваров;
	
	Если Отказ ИЛИ ТаблицаТоварыКОформлениюЗаявленийОВвозе.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТоварыКОформлениюЗаявленийОВвозе = Движения.ТоварыКОформлениюЗаявленийОВвозе;
	ДвиженияТоварыКОформлениюЗаявленийОВвозе.Записывать = Истина;
	ДвиженияТоварыКОформлениюЗаявленийОВвозе.Загрузить(ТаблицаТоварыКОформлениюЗаявленийОВвозе);
	
КонецПроцедуры

//++ НЕ УТ

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                      КАК Период,
	|	&Организация                 КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Организация,
	|	НАЧАЛОПЕРИОДА(&ДатаПодтвержденияОплаты, ДЕНЬ)
	|ГДЕ
	|	&ОплатаПодтверждена
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область ПроцедурыИФункцииПечати

Функция ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивДокументов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваров.Номер КАК НомерЗаяв,
	|	ЗаявлениеОВвозеТоваров.ДатаОтправки КАК ДатаДокНП,
	|	ЗаявлениеОВвозеТоваров.ДатаОтправки КАК Дата,
	|	ДЕНЬ(ЗаявлениеОВвозеТоваров.ДатаОтправки) КАК Число,
	|	МЕСЯЦ(ЗаявлениеОВвозеТоваров.ДатаОтправки) КАК Месяц,
	|	ГОД(ЗаявлениеОВвозеТоваров.ДатаОтправки) КАК Год,
	|	НЕОПРЕДЕЛЕНО КАК СтрВсего,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.НаименованиеПолное = """"
	|			ТОГДА ЗаявлениеОВвозеТоваров.Контрагент.Наименование
	|		ИНАЧЕ ЗаявлениеОВвозеТоваров.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПродавецНаимОрг,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	ЗаявлениеОВвозеТоваров.НомерДоговора КАК НомерДог,
	|	ЗаявлениеОВвозеТоваров.ДатаДоговора КАК ДатаДог,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ИННОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК НаимОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК КодСтраныОрг1,
	|	НЕОПРЕДЕЛЕНО КАК МестоНахождОрг_1,
	|	ЛОЖЬ КАК КомиссионерБайконур,
	|	НЕОПРЕДЕЛЕНО КАК НомКонтр_2,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаКонтр_2,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК РеквизитыПосредник,
	|	ЛОЖЬ КАК ПрЛизинг,
	|	ЛОЖЬ КАК ПрДавСырья,
	|	ЛОЖЬ КАК ПрПродФЛ,
	|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ПокупательИНН,
	|	ЗаявлениеОВвозеТоваров.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	ПОДСТРОКА(ЗаявлениеОВвозеТоваров.Организация.НаименованиеСокращенное, 1, 250) КАК ПокупательНаимОрг,
	|	""643"" КАК КодСтраныПокупатель,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	ЗаявлениеОВвозеТоваров.Проведен,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.Договор,
	|	ЗаявлениеОВвозеТоваров.Ответственный,
	|	ЗаявлениеОВвозеТоваров.СуммаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ФИОРук,
	|	НЕОПРЕДЕЛЕНО КАК ФИОБух,
	|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаПодписиРук,
	|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаПодписиБух,
	|	&ПричинаЗаявления КАК ПричинаЗаявления,
	|	"""" КАК НомерОтметки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтметки,
	|	0 КАК ИзмениеЦеныМесяц,
	|	0 КАК ИзмениеЦеныГод,
	|	ЗаявлениеОВвозеТоваров.ИспользоватьАкцизы КАК ИспользоватьАкцизы
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("ПричинаЗаявления", НСтр("ru = 'первичное заявление'"));
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровСпецификации.НомерСпецификации КАК Номер,
	|	ЗаявлениеОВвозеТоваровСпецификации.ДатаСпецификации КАК Дата,
	|	ЗаявлениеОВвозеТоваровСпецификации.НомерСтроки КАК НомерСтроки,
	|	ЗаявлениеОВвозеТоваровСпецификации.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Спецификации КАК ЗаявлениеОВвозеТоваровСпецификации
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровСпецификации.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаСпецификации = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК П000010000101,
	|	ВЫБОР
	|		КОГДА ИспользоватьНоменклатуруПоставщиков.Значение = ИСТИНА И
	|				ЗаявлениеОВвозеТоваровТовары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка) ТОГДА
	|			ЗаявлениеОВвозеТоваровТовары.НоменклатураПоставщика.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|				ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|		КОНЕЦ КАК П000010000102,
	|	ЗаявлениеОВвозеТоваровТовары.Номенклатура.КодТНВЭД.Код КАК П000010000103,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Наименование КАК П000010000104,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ЗаявлениеОВвозеТоваровТовары.Количество КАК П000010000105,
	|	ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость КАК П000010000106,
	|	ЗаявлениеОВвозеТоваровТовары.СерияНомерТСД КАК П000010000109,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаТСД КАК ДатаТСД,
	|	ЗаявлениеОВвозеТоваровТовары.НомерСчетаФактуры КАК П000010000111,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЗаявлениеОВвозеТоваровТовары.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаАкцизы КАК П000010000114,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаНДС КАК П000010000115,
	|	ЗаявлениеОВвозеТоваровТовары.ТвердаяСтавкаАкциза КАК П000010000116,
	|	ЗаявлениеОВвозеТоваровТовары.АдвалорнаяСтавкаАкциза КАК П000010000117,
	|	ЗаявлениеОВвозеТоваровТовары.СтавкаНДС КАК П000010000118,
	|	ЗаявлениеОВвозеТоваровТовары.СуммаАкциза КАК П000010000119,
	|	ЗаявлениеОВвозеТоваровТовары.СуммаНДС КАК П000010000120,
	|	ЗаявлениеОВвозеТоваровТовары.Валюта КАК Валюта,
	|	ЗаявлениеОВвозеТоваровТовары.Валюта.Код КАК ВалютаДокументаКод,
	|	НЕОПРЕДЕЛЕНО КАК П000010000107,
	|	НЕОПРЕДЕЛЕНО КАК П000010000108,
	|	НЕОПРЕДЕЛЕНО КАК П000010000125,
	|	НЕОПРЕДЕЛЕНО КАК П000010000110,
	|	НЕОПРЕДЕЛЕНО КАК П000010000112,
	|	НЕОПРЕДЕЛЕНО КАК П000010000113,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары,
	|	Константа.ИспользоватьНоменклатуруПоставщиков КАК ИспользоватьНоменклатуруПоставщиков
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комитент)
	|			ТОГДА 0
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Доверитель)
	|			ТОГДА 1
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Принципал)
	|			ТОГДА 2
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Продавец)
	|			ТОГДА 6
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА 7
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипПрод_Пр,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца КАК ТипПродавца,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комиссионер)
	|			ТОГДА 3
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Поверенный)
	|			ТОГДА 4
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Агент)
	|			ТОГДА 5
	|		КОГДА ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА 7
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ТипПок_Пр,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя КАК ТипПокупателя,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Продавец,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Продавец.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Продавец.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Покупатель,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровУчастникиСделки.Покупатель.СтранаРегистрации.Код, """") КАК КодСтраныПокупатель,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровУчастникиСделки.Покупатель.СтранаРегистрации.НаименованиеПолное, """") КАК НаименованиеСтраныПокупатель,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерДоговора КАК НомерДог,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.ДатаДоговора КАК ДатаДог,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерСпецификации,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Ссылка КАК ДокументСсылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерЗаяв,
	|	НЕОПРЕДЕЛЕНО КАК Число,
	|	НЕОПРЕДЕЛЕНО КАК Месяц,
	|	НЕОПРЕДЕЛЕНО КАК Год
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.УчастникиСделки КАК ЗаявлениеОВвозеТоваровУчастникиСделки
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	ТаблицаУчастникиСделки = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху	= 10;
	ТабДокумент.ПолеСнизу	= 10;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеОВвозеТоваров";
	
	ПервыйДокумент = Истина;
	
	// Объявление таблиц
	
	ТаблицаСпецификацииДляВыгрузки = Новый ТаблицаЗначений;
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Номер");
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Дата");
	
	ТЗСпецификации07 = Новый ТаблицаЗначений;
	ТЗСпецификации07.Колонки.Добавить("Номер");
	ТЗСпецификации07.Колонки.Добавить("Дата");
	
	ТЗСпецификацииРаздел3 = ТЗСпецификации07.СкопироватьКолонки();
	ТаблСпецификацииПриложение = ТЗСпецификации07.СкопироватьКолонки();
	
	ТТД = Новый ТаблицаЗначений;
	ТТД.Колонки.Добавить("Номер");
	ТТД.Колонки.Добавить("Дата");
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Если СтрокаШапки.Дата < '20150101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2012кв3");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2015кв1");
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		
		// Структуры для выгрузки
		
		РеквизитыРаздел1 = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); 
		РеквизитыРаздел2 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр");
		РеквизитыРаздел3 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр,ТипПрод_3,ТипПродавца,ПродавецИНН_КПП,ПродавецНаимОрг,КодСтраныПродавец,
			|ПродавецМестоНахожд,ПродавецАдрес,ПродавецБайконур,НомерДог,ДатаДог,НомерСпецификации,ДатаСпецификации,ТипПок_3,ТипПокупателя,ПокупательИНН_КПП,
			|ПокупательНаимОрг,КодСтраныПокупатель,ПокупательМестоНахожд,ПокупательАдрес,ПокупательБайконур,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух"); 
		РеквизитыПриложение = Новый Структура("НомерЗаяв,Число,Месяц,Год");
		
		// Раздел 1
		
		Если ЗначениеЗаполнено(СтрокаШапки.Организация) 
			И ЗначениеЗаполнено(СтрокаШапки.Контрагент) Тогда
			
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
			
			РеквизитыРаздел1.ФИОРук = Руководители.РуководительПредставление;
			РеквизитыРаздел1.ФИОБух = Руководители.ГлавныйБухгалтерПредставление;
			
			СведенияОПродавце 	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Контрагент, СтрокаШапки.Дата);
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Организация, СтрокаШапки.Дата);
			
			РеквизитыРаздел1.ПродавецМестоНахожд	= РеквизитыРаздел1.КодСтраныПродавец + ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ЮридическийАдрес,");
			РеквизитыРаздел1.ПродавецИНН_КПП 		= СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
			
			РеквизитыРаздел1.ПокупательМестоНахожд 	= РеквизитыРаздел1.КодСтраныПокупатель + ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
			РеквизитыРаздел1.ПокупательИНН_КПП 		= РеквизитыРаздел1.ПокупательИНН + ?(РеквизитыРаздел1.ПокупательКПП = "", "", "/" + РеквизитыРаздел1.ПокупательКПП);
			
		КонецЕсли;
		
		РеквизитыРаздел1.НомерЗаяв = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыРаздел1.НомерЗаяв, Истина, Ложь);
		
		ТаблицаСпецификацииДляВыгрузки.Очистить();
		
		// Спецификации
		
		НомераСпецификаций = "";
		ДатыСпецификаций = "";
		
		Пока ТаблицаСпецификации.НайтиСледующий(СтруктураПоиска) Цикл
			НомераСпецификаций 	= НомераСпецификаций + ?(НомераСпецификаций = "", "", ", ") + ТаблицаСпецификации.Номер;
			ДатыСпецификаций 	= ДатыСпецификаций + ?(ДатыСпецификаций = "", "", ", ") + Формат(ТаблицаСпецификации.Дата, "ДФ=dd.MM.yyyy");
			НоваяСтрокаСпецификаций = ТаблицаСпецификацииДляВыгрузки.Добавить();
			НоваяСтрокаСпецификаций.Дата = Формат(ТаблицаСпецификации.Дата, "ДФ=dd.MM.yyyy");
			НоваяСтрокаСпецификаций.Номер = ТаблицаСпецификации.Номер;
		КонецЦикла;
		
		РеквизитыРаздел1.НомерСпецификации = НомераСпецификаций;
		РеквизитыРаздел1.ДатаСпецификации = ДатыСпецификаций;
		
		// Адрес продавца для выгрузки
		РеквизитыРаздел1.Вставить("ПродавецАдрес", ПолучитьАдресВВидеСоответствия(СтрокаШапки.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента));
		
		// Адрес покупателя для выгрузки
		РеквизитыРаздел1.Вставить("ПокупательАдрес", ПолучитьАдресВВидеСоответствия(СтрокаШапки.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, СтрокаШапки.Дата));
		
		// Адрес комиссионера для выгрузки
		РеквизитыРаздел1.Вставить("КомиссионерАдрес", ПустойРоссийскийАдрес());
		
		// Адрес продавца в Разделе 3 для выгрузки
		РеквизитыРаздел3.Вставить("ПродавецАдрес", ПустойРоссийскийАдрес());
			
		// Адрес покупателя в Разделе 3 для выгрузки
		РеквизитыРаздел3.Вставить("ПокупательАдрес", ПустойРоссийскийАдрес());
	
		ПечататьРаздел3 = Ложь;
			
		ТЗСпецификации07.Очистить();
		ТЗСпецификацииРаздел3.Очистить();
		ТаблСпецификацииПриложение.Очистить();
		
		НайденныеСтрокиУчастникиСделки = ТаблицаУчастникиСделки.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтрокиУчастникиСделки.Количество() > 0 Тогда
			
			СтрокаУчастникиСделки = НайденныеСтрокиУчастникиСделки[0];
			
			Если ЗначениеЗаполнено(СтрокаУчастникиСделки.Продавец) Тогда
				
				РеквизитыРаздел1.КодСтраныОрг1 = СтрокаУчастникиСделки.КодСтраныПродавец;
				
				СведенияОПродавце 	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
				
				РеквизитыРаздел1.НаимОрг_1 			= СведенияОПродавце.ПолноеНаименование;
				РеквизитыРаздел1.ИННОрг_1 	 		= СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				РеквизитыРаздел1.МестоНахождОрг_1	= "" + СтрокаУчастникиСделки.КодСтраныПродавец + ", " + СведенияОПродавце.ЮридическийАдрес;
				
				РеквизитыРаздел1.НомКонтр_2 			= СтрокаУчастникиСделки.НомерДог;
				РеквизитыРаздел1.ДатаКонтр_2 			= СтрокаУчастникиСделки.ДатаДог;
				РеквизитыРаздел1.НомерСпецификации_07 	= СтрокаУчастникиСделки.НомерСпецификации;
				РеквизитыРаздел1.ДатаСпецификации_07 	= Формат(СтрокаУчастникиСделки.ДатаСпецификации, "ДФ=dd.MM.yyyy");
				
				СтрокаСпецификацииПосредник = ТЗСпецификации07.Добавить();
				СтрокаСпецификацииПосредник.Номер = РеквизитыРаздел1.НомерСпецификации_07;
				СтрокаСпецификацииПосредник.Дата =  РеквизитыРаздел1.ДатаСпецификации_07;
							
				РеквизитыРаздел1.РеквизитыПосредник = СведенияОПродавце.ПолноеНаименование + ", " + РеквизитыРаздел1.МестоНахождОрг_1;
				
				АдресКомиссионера = ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				РеквизитыРаздел1.КомиссионерАдрес = АдресКомиссионера;
				
				Если НайденныеСтрокиУчастникиСделки.Количество() = 1 Тогда
					
					ПечататьРаздел3 = Истина;
					РеквизитыРаздел1.СтрВсего = 3; // если строка одна
					
					// Раздел 3
					ЗаполнитьЗначенияСвойств(РеквизитыРаздел3, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год,СтрВсего,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух");
					
					РеквизитыРаздел3.ТипПрод_3 	= СтрокаУчастникиСделки.ТипПрод_Пр;
					РеквизитыРаздел3.ТипПок_3 	= СтрокаУчастникиСделки.ТипПок_Пр;
					
					РеквизитыРаздел3.ТипПродавца	= СтрокаУчастникиСделки.ТипПродавца;
					РеквизитыРаздел3.ТипПокупателя 	= СтрокаУчастникиСделки.ТипПокупателя;
										
					РеквизитыРаздел3.ПродавецБайконур 	= СтрокаУчастникиСделки.ПродавецБайконур;
					РеквизитыРаздел3.ПокупательБайконур = СтрокаУчастникиСделки.ПокупательБайконур;
					
					РеквизитыРаздел3.ПродавецИНН_КПП 		= СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
					РеквизитыРаздел3.ПродавецНаимОрг 		= СведенияОПродавце.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПродавец 		= СтрокаУчастникиСделки.КодСтраныПродавец; 
					РеквизитыРаздел3.ПродавецМестоНахожд 	= "" + СтрокаУчастникиСделки.КодСтраныПродавец + ", " + СведенияОПродавце.ЮридическийАдрес;
					
					РеквизитыРаздел3.ПокупательИНН_КПП 		= СведенияОПокупателе.ИНН + ?(СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
					РеквизитыРаздел3.ПокупательНаимОрг 		= СведенияОПокупателе.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПокупатель 	= СтрокаУчастникиСделки.КодСтраныПокупатель;
					РеквизитыРаздел3.ПокупательМестоНахожд 	= "" + СтрокаУчастникиСделки.КодСтраныПокупатель + ", " + СведенияОПокупателе.ЮридическийАдрес;
					
					РеквизитыРаздел3.НомерДог 			= СтрокаУчастникиСделки.НомерДог;
					РеквизитыРаздел3.ДатаДог 			= СтрокаУчастникиСделки.ДатаДог;
					РеквизитыРаздел3.НомерСпецификации 	= СтрокаУчастникиСделки.НомерСпецификации;
					РеквизитыРаздел3.ДатаСпецификации 	= СтрокаУчастникиСделки.ДатаСпецификации;
					
					РеквизитыРаздел3.ПродавецАдрес 		= АдресКомиссионера;
					РеквизитыРаздел3.ПокупательАдрес 	= ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
					
					ТЗСпецификацииРаздел3 = ТЗСпецификации07;
					
				Иначе
					РеквизитыРаздел1.СтрВсего = 2;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			РеквизитыРаздел1.СтрВсего = 2;
		КонецЕсли;
		
		// Вывод на печать
		
		ШапкаРаздел1 = Макет.ПолучитьОбласть("Шапка");
		ШапкаРаздел1.Параметры.Заполнить(РеквизитыРаздел1);
		ТабДокумент.Вывести(ШапкаРаздел1);
		
		// Товары
		
		ТекущийНомерСтраницы = 1;
		ЗаголовокТаблицыТоваров = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
		ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
		
		ТаблицаТоварыРаздел1 = ТаблицаТовары.СкопироватьКолонки(); // Таблица для выгрузки
		
		ТТД.Очистить();
		
		МассивОбластейДляПроверкиВывода = Новый Массив;
		
		ПодвалТаблицаТовары = Макет.ПолучитьОбласть("ПодвалТаблицаТовары");
		
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			МногострочнаяЧасть = Макет.ПолучитьОбласть("ТаблицаТовары");
			
			Для каждого СтрокаТоваров Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаТоваровДляВыгрузки = ТаблицаТоварыРаздел1.Добавить();
				
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТоваров.Валюта, СтрокаТоваров.ДатаПринятияНаУчет);
				СтрокаТоваров.П000010000108 = СтруктураКурса.Курс;
				СтрокаТоваров.П000010000125 = СтруктураКурса.Кратность;

				СтрокаТоваров.П000010000107 = СтрокаТоваров.ВалютаДокументаКод;
				
				СтрокаТоваров.П000010000110 = Формат(СтрокаТоваров.ДатаТСД, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000112 = Формат(СтрокаТоваров.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000113 = Формат(СтрокаТоваров.ДатаПринятияНаУчет, "ДФ=dd.MM.yyyy");
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваровДляВыгрузки, СтрокаТоваров);
				
				НоваяСтрокаДокументы = ТТД.Добавить();
				НоваяСтрокаДокументы.Номер = СтрокаТоваров.П000010000109;
				НоваяСтрокаДокументы.Дата = СтрокаТоваров.П000010000110;
				
				МногострочнаяЧасть.Параметры.Заполнить(СтрокаТоваров);
				
				Если Не СтрокаШапки.ИспользоватьАкцизы Тогда
					МногострочнаяЧасть.Параметры.П000010000114 = "--";
					МногострочнаяЧасть.Параметры.П000010000116 = "--";
					МногострочнаяЧасть.Параметры.П000010000117 = "--";
					МногострочнаяЧасть.Параметры.П000010000119 = "--";
				КонецЕсли;
				
				МассивОбластейДляПроверкиВывода.Очистить();
				МассивОбластейДляПроверкиВывода.Добавить(МногострочнаяЧасть);
				МассивОбластейДляПроверкиВывода.Добавить(ПодвалТаблицаТовары);
				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(
						ТабДокумент, МассивОбластейДляПроверкиВывода) Тогда
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
					ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
					ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
				КонецЕсли;
				
				ТабДокумент.Вывести(МногострочнаяЧасть);
				
			КонецЦикла;
		КонецЕсли;
		
		РеквизитыРаздел1.Вставить("П000010000114", ТаблицаТоварыРаздел1.Итог("П000010000114"));
		РеквизитыРаздел1.Вставить("П000010000115", ТаблицаТоварыРаздел1.Итог("П000010000115"));
		
		// Итоговые суммы налогов подлежат округлению до целых рублей
		РеквизитыРаздел1.Вставить("П000010000119", Окр(ТаблицаТоварыРаздел1.Итог("П000010000119")));
		РеквизитыРаздел1.Вставить("П000010000120", Окр(ТаблицаТоварыРаздел1.Итог("П000010000120")));
		
		ПодвалТаблицаТовары.Параметры.П000010000114 = РеквизитыРаздел1.П000010000114;
		ПодвалТаблицаТовары.Параметры.П000010000115 = РеквизитыРаздел1.П000010000115;
		ПодвалТаблицаТовары.Параметры.П000010000119 = РеквизитыРаздел1.П000010000119;
		ПодвалТаблицаТовары.Параметры.П000010000120 = РеквизитыРаздел1.П000010000120;
		
		Если Не СтрокаШапки.ИспользоватьАкцизы Тогда
			ПодвалТаблицаТовары.Параметры.П000010000114 = "--";
			ПодвалТаблицаТовары.Параметры.П000010000119 = "--";
		КонецЕсли;
		
		ТабДокумент.Вывести(ПодвалТаблицаТовары);
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.Заполнить(РеквизитыРаздел1);
		МассивОбластейДляПроверкиВывода.Очистить();
		МассивОбластейДляПроверкиВывода.Добавить(Подвал);
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент,
			МассивОбластейДляПроверкиВывода) Тогда
			
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		КонецЕсли;

		ТабДокумент.Вывести(Подвал);
		
		// Раздел 2
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ЗаполнитьЗначенияСвойств(РеквизитыРаздел2, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год,СтрВсего");
		
		ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		РеквизитыРаздел2.Стр = ТекущийНомерСтраницы;
			
		ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел2");
		ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел2);
		ТабДокумент.Вывести(ОсновнаяЧасть);
		
		// Раздел 3
		
		Если ПечататьРаздел3 Тогда
		
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
			РеквизитыРаздел3.Стр = ТекущийНомерСтраницы;
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел3");
			ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел3);
			ТабДокумент.Вывести(ОсновнаяЧасть);
		
		КонецЕсли; 
		
		// Приложение
		
		ТаблицаДляВыгрузкиПриложение = ТаблицаУчастникиСделки.СкопироватьКолонки(); // Таблица для выгрузки
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПродавецАдрес");
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПокупательАдрес");
				
		Если НайденныеСтрокиУчастникиСделки.Количество() > 1 Тогда
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Приложение");
			
			Для каждого СтрокаУчастникиСделки Из НайденныеСтрокиУчастникиСделки Цикл
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				СведенияОПродавце 	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
				
				СтрокаУчастникиСделки.ПродавецИНН_КПП 		= СведенияОПродавце.ИНН + ?(СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				СтрокаУчастникиСделки.ПродавецНаимОрг 		= СведенияОПродавце.ПолноеНаименование;
				СтрокаУчастникиСделки.ПродавецМестоНахожд 	= "" + СтрокаУчастникиСделки.КодСтраныПродавец + ", " + СведенияОПродавце.ЮридическийАдрес;
				
				СтрокаУчастникиСделки.ПокупательИНН_КПП 	= СведенияОПокупателе.ИНН + ?(СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
				СтрокаУчастникиСделки.ПокупательНаимОрг 	= СведенияОПокупателе.ПолноеНаименование;
				СтрокаУчастникиСделки.ПокупательМестоНахожд = "" + СтрокаУчастникиСделки.КодСтраныПокупатель + ", " + СведенияОПокупателе.ЮридическийАдрес;
				
				ЗаполнитьЗначенияСвойств(СтрокаУчастникиСделки, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год");
				
				СтрокаСпецификацииПриложение = ТаблСпецификацииПриложение.Добавить();
				СтрокаСпецификацииПриложение.Номер = СтрокаУчастникиСделки.НомерСпецификации;
				СтрокаСпецификацииПриложение.Дата =  СтрокаУчастникиСделки.ДатаСпецификации;
				
				СтрокаВыгрузки = ТаблицаДляВыгрузкиПриложение.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаВыгрузки, СтрокаУчастникиСделки);
				
				// Адрес продавца в Приложении для выгрузки
				СтрокаВыгрузки.ПродавецАдрес = ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				
				// Адрес покупателя в Приложении для выгрузки
				СтрокаВыгрузки.ПокупательАдрес = ПолучитьАдресВВидеСоответствия(СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				
				ОсновнаяЧасть.Параметры.Заполнить(СтрокаВыгрузки);
				ТабДокумент.Вывести(ОсновнаяЧасть);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаВыпискиБанка = Новый ТаблицаЗначений;
	ТаблицаСведенияОЗачете = Новый ТаблицаЗначений;
	
	Если ТаблицаТоварыРаздел1 <> Неопределено Тогда
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаПринятияНаУчет");
		
		ТаблицаТоварыРаздел1.Колонки.Удалить("П000010000104");
		ТаблицаТоварыРаздел1.Колонки.ЕдиницаИзмеренияКод.Имя = "П000010000104";
	КонецЕсли;
	
	Если ТаблицаДляВыгрузкиПриложение <> Неопределено Тогда
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ДокументСсылка");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Покупатель");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Продавец");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПродавца");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПокупателя");
	КонецЕсли;
	
	КоличествоСтраниц = ТабДокумент.КоличествоСтраниц();
	ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего");
	Пока ОбластьКоличествоСтраниц <> Неопределено Цикл
		ОбластьКоличествоСтраниц.Текст = КоличествоСтраниц;
		ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего", ОбластьКоличествоСтраниц)
	КонецЦикла;
	
	СтруктураРазделов = Новый Структура;
	СтруктураРазделов.Вставить("РеквизитыРаздел1",       РеквизитыРаздел1);
	СтруктураРазделов.Вставить("ТаблицаРаздел1",         ТаблицаТоварыРаздел1);
	СтруктураРазделов.Вставить("РеквизитыРаздел2",       РеквизитыРаздел2);
	СтруктураРазделов.Вставить("РеквизитыРаздел3",       РеквизитыРаздел3);
	СтруктураРазделов.Вставить("ТаблицаПриложение",      ТаблицаДляВыгрузкиПриложение);
	СтруктураРазделов.Вставить("ТЗСпецификации",         ТаблицаСпецификацииДляВыгрузки);
	СтруктураРазделов.Вставить("ТЗСпецификации07",       ТЗСпецификации07);
	СтруктураРазделов.Вставить("ТЗСпецификацииРаздел3",  ТЗСпецификацииРаздел3);
	СтруктураРазделов.Вставить("ТаблСпецПрил3",          ТаблСпецификацииПриложение);
	СтруктураРазделов.Вставить("ТТД",                    ТТД);
	СтруктураРазделов.Вставить("ТаблицаВыпискиБанка",    ТаблицаВыпискиБанка);
	СтруктураРазделов.Вставить("ТаблицаСведенияОЗачете", ТаблицаСведенияОЗачете);
	СтруктураРазделов.Вставить("ТабДокумент",            ТабДокумент);
		
	Возврат СтруктураРазделов;
		
КонецФункции

Функция ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивДокументов)

	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваров.Номер КАК СистемныйНомер,
	|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ3,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ4,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ3,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ4,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ИНН КАК ОтправительКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.НомерДоговора КАК НомерДоговора,
	|	ЗаявлениеОВвозеТоваров.ДатаДоговора КАК ДатаДоговора,
	|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ПокупательИНН,
	|	ЗаявлениеОВвозеТоваров.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательКоды,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдрес,
	|	НЕОПРЕДЕЛЕНО КАК ОргТелефонИсп,
	|	ЗаявлениеОВвозеТоваров.Валюта КАК ВалютаДокумента,
	|	ЗаявлениеОВвозеТоваров.Валюта.Код КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Организация.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаявлениеОВвозеТоваров.Организация.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ОргИсполнитель,
	|	НЕОПРЕДЕЛЕНО КАК ОргДолжностьИсп,
	|	НЕОПРЕДЕЛЕНО КАК ОргАдресЭлПочты,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК ТоргующаяСтранаКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК ТоргующаяСтранаНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК СтранаОтправленияКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК СтранаОтправленияНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаКод,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрРеквизиты,
	|	""ИМ"" КАК НаправлениеПеремещения,
	|	""ИМ"" КАК НапрПеремещения,
	|	""РОССИЯ"" КАК СтранаНазначенияНаименование,
	|	""RU"" КАК СтранаНазначенияКод,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдресСоответствие,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Валюта= &ВалютаРеглУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваров.Валюта.Наименование
	|	КОНЕЦ КАК КодВалютыЦеныТовара,
	|	"""" КАК ИмяКлючевогоУзлаСодержательнойЧасти,
	|	"""" КАК ИмяФайла,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KZ""
	|			ТОГДА ""РК""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""BY""
	|			ТОГДА ""РБ""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""AM""
	|			ТОГДА ""АМ""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KG""
	|			ТОГДА ""КГ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СтранаОтправления,
	|	""РФ"" КАК СтранаНазначения,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ЮридическоеФизическоеЛицо КАК ОтправительЮридическоеФизическоеЛицо,
	|	ЗаявлениеОВвозеТоваров.Организация.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель,
	|	ЗаявлениеОВвозеТоваров.Организация.ОГРН КАК ОГРН,
	|	"""" КАК Отправитель_ФормаСобственности,
	|	ЗаявлениеОВвозеТоваров.Организация.НаименованиеОКОПФ КАК Получатель_ФормаСобственности
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивДокументов)";
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ИспользоватьНоменклатуруПоставщиков.Значение = ИСТИНА И
	|				ЗаявлениеОВвозеТоваровТовары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка) ТОГДА
	|			ЗаявлениеОВвозеТоваровТовары.НоменклатураПоставщика.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|				ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|	КОНЕЦ КАК НаименованиеТовара,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.Номенклатура.КодТНВЭД.Код, """") КАК КодТовара,
	|	ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость КАК ЦенаТовараВыбВал,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК СерияНомерТСД,
	|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаТСД,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Номер КАК НомерСчетаФактуры,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Дата КАК ДатаСчетаФактуры,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаНДС КАК ЦенаТовараВалРубль,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Валюта = &ВалютаРеглУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Валюта.Наименование
	|	КОНЕЦ КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.СтатСтоимостьДолларыСША КАК ЦенаТовараВалДоллар,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.НомерГТД.СтранаПроисхождения.Наименование,
	|			ПоступлениеТоваровУслуг.Контрагент.СтранаРегистрации.Наименование) КАК СтранаТовараНаименование,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.НомерГТД.СтранаПроисхождения.КодАльфа2,
	|			ПоступлениеТоваровУслуг.Контрагент.СтранаРегистрации.КодАльфа2) КАК СтранаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.ВесНеттоКг КАК ВесТовара,
	|	ЗаявлениеОВвозеТоваровТовары.КодВидаТранспорта КАК КодВидаТранспорта,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.ДокументПоступления.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ОтчетныйПериод,
	|	ЗаявлениеОВвозеТоваровТовары.Количество КАК ЕдИзмТовараКво,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдИзмТовараКратко,
	|	ЗаявлениеОВвозеТоваровТовары.ЕдиницаИзмерения.Код КАК ЕдИзмТовараКод,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.Код, """") КАК НомерТаможеннойДекларации
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|			ПО ПоступлениеТоваровУслуг.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = ПоступлениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = ПоступлениеТоваровУслугТовары.Ссылка
	|			И ЗаявлениеОВвозеТоваровТовары.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|			И ЗаявлениеОВвозеТоваровТовары.Характеристика = ПоступлениеТоваровУслугТовары.Характеристика
	|			И ЗаявлениеОВвозеТоваровТовары.Серия = ПоступлениеТоваровУслугТовары.Серия
	|			И ЗаявлениеОВвозеТоваровТовары.Склад = ПоступлениеТоваровУслугТовары.Склад,
	|		Константа.ИспользоватьНоменклатуруПоставщиков КАК ИспользоватьНоменклатуруПоставщиков	
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху	= 10;
	ТабДокумент.ПолеСнизу	= 10;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СтатистическаяФормаУчетаПеремещенияТоваров";
	
	ПервыйДокумент = Истина;
	
	СписокВидовТранспорта = Новый СписокЗначений;
	ЗаполнитьСписокВыбораВидовТранспорта(СписокВидовТранспорта);
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Если СтрокаШапки.Дата < '20160101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2011Кв1");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2016Кв1");
		КонецЕсли;
		
		ОсновнаяЧасть1      = Макет.ПолучитьОбласть("ОсновнаяЧасть1");
		МногострочнаяЧасть1 = Макет.ПолучитьОбласть("МногострочнаяЧасть1");
		МногострочнаяЧасть2 = Макет.ПолучитьОбласть("МногострочнаяЧасть2");
		ОсновнаяЧасть2      = Макет.ПолучитьОбласть("ОсновнаяЧасть2");
		ОсновнаяЧасть3      = Макет.ПолучитьОбласть("ОсновнаяЧасть3");
		
		РеквизитыШапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); // Структура для выгрузки
		РеквизитыШапка.СистемныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапка.СистемныйНомер, Истина, Ложь);
		
		Если ЗначениеЗаполнено(РеквизитыШапка.Организация) И ЗначениеЗаполнено(РеквизитыШапка.Контрагент) Тогда
			
			СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Контрагент, РеквизитыШапка.Дата);
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Организация, РеквизитыШапка.Дата);
			
			РеквизитыШапка.ПолучательРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ЮридическийАдрес,");
			РеквизитыШапка.ПолучательКоды = РеквизитыШапка.ПокупательИНН + ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП);
			
			РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
			РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
			
			РеквизитыШапка.ОргПочтовыйАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
			РеквизитыШапка.ОргТелефонИсп = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
			РеквизитыШапка.ОргАдресЭлПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
			
			// Отправитель
			
			РеквизитыШапка.ОтправительРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,ЮридическийАдрес,");
			РеквизитыШапка.ОтправительНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,");
		
			РеквизитыШапка.Вставить("ОтправительРБ_УНП", "");
			РеквизитыШапка.Вставить("ОтправительРК_БИН", "");
			РеквизитыШапка.Вставить("ОтправительРК_ИИН", "");
			РеквизитыШапка.Вставить("ОтправительРА_УНН", "");
			РеквизитыШапка.Вставить("ОтправительРА_Соц", "");
			РеквизитыШапка.Вставить("ОтправительКодКГ", "");
			РеквизитыШапка.Вставить("ОтправительКГ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительКГ_ОКПО", "");
		
			Если РеквизитыШапка.СтранаОтправления = "РБ" Тогда
				РеквизитыШапка.Вставить("ОтправительРБ_УНП", РеквизитыШапка.ОтправительКоды);
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "РК" Тогда
				Если РеквизитыШапка.ОтправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительРК_БИН", РеквизитыШапка.ОтправительКоды);
				Иначе
					РеквизитыШапка.Вставить("ОтправительРК_ИИН", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "АМ" Тогда
				РеквизитыШапка.Вставить("ОтправительРА_УНН", РеквизитыШапка.ОтправительКоды);
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "КГ" Тогда
				Если РеквизитыШапка.ОтправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительКГ_ИНН", РеквизитыШапка.ОтправительКоды);
				Иначе
					РеквизитыШапка.Вставить("ОтправительКГ_ОКПО", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			КонецЕсли;
			
			ОтправительАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			
			РеквизитыШапка.Вставить("ОтправительСтранаКод", РеквизитыШапка.ТоргующаяСтранаКод);
			РеквизитыШапка.Вставить("ОтправительСтранаНаименование", РеквизитыШапка.ТоргующаяСтранаНаименование);
			РеквизитыШапка.Вставить("ОтправительИндекс", ОтправительАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтправительНаселенныйПункт", ОтправительАдрес.Получить("НаселенныйПункт"));
			Если ПустаяСтрока(РеквизитыШапка.ОтправительНаселенныйПункт) Тогда
				РеквизитыШапка.ОтправительНаселенныйПункт = ОтправительАдрес.Получить("Город");
			КонецЕсли;
			
			// Дата выдачи документа, удостоверяющего личность отправителя
			РеквизитыШапка.Вставить("Отправитель_ДатаДокСтр", "");
			РеквизитыШапка.Вставить("Отправитель_ВидДокКод", "");
			РеквизитыШапка.Вставить("Отправитель_ВидДокНаим", "");
			РеквизитыШапка.Вставить("Отправитель_СерДок", "");
			РеквизитыШапка.Вставить("Отправитель_НомДок", "");
			РеквизитыШапка.Вставить("Отправитель_ДатаДок", "");
			РеквизитыШапка.Вставить("Отправитель_ОргДок", "");
			
			РеквизитыШапка.Вставить("Отправитель_Тел", СведенияОПродавце.Телефоны);
			РеквизитыШапка.Вставить("Отправитель_Факс", СведенияОПродавце.Телефоны);
			РеквизитыШапка.Вставить("Отправитель_Телекс", "");
			
			// В документе "Заявление о ввозе товаров" получателем всегда является РФ, а отправителем иностранное государство,
			// поэтому данные реквизиты передаются пустыми
			
			РеквизитыШапка.Вставить("ПолучательРА_УНН", "");
			РеквизитыШапка.Вставить("ПолучательРА_Соц", "");
			РеквизитыШапка.Вставить("ПолучательКГ_ИНН", "");
			РеквизитыШапка.Вставить("ПолучательКГ_ОКПО", "");
			РеквизитыШапка.Вставить("ПолучательКодКГ", ""); 
			РеквизитыШапка.Вставить("ОтправительРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтправительРФ_ОГРН", "");
			
			РеквизитыШапка.Вставить("ОтправительОбласть", ОтправительАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтправительУлицаНомерДома", 
				"" + ОтправительАдрес.Получить("Улица") + ", " + ОтправительАдрес.Получить("Дом") + ", " 
				+ ОтправительАдрес.Получить("Корпус") + ", " + ОтправительАдрес.Получить("Квартира"));
				
			// Получатель
			
			ПолучательНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			ПолучательАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаименование", ПолучательНаименование);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасВидДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДок", '00010101');
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДокумента", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНомерДок", "");
			// Серия документа,удостоверяющего личность физ лица - составителя статистики
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасСерДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасОрг", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУр", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрКоды", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРеквизиты", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодИндекс", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаселенныйПункт", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодОбласть", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаКод", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодУлицаНомерДома", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ОтвЛицоФинУрОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрУлицаНомерДома", ПолучательАдрес.Получить("Улица") 
				+ ", " 
				+ ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
				
			Если РеквизитыШапка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				// Получатель физ лицо
				
				Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				
					ДанныеДокумента = ПолучитьДокФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель, РеквизитыШапка.Дата);
					
					Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
						
						РеквизитыШапка.ОтвЛицоФинУрПасВидДок 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.ВидДокумента, "КодМВД");
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДок 		= ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента = ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасНаименование 	= ДанныеДокумента.Представление;
						РеквизитыШапка.ОтвЛицоФинУрПасНомерДок 		= ДанныеДокумента.Номер;
						РеквизитыШапка.ОтвЛицоФинУрПасСерДок        = ДанныеДокумента.Серия;
						РеквизитыШапка.ОтвЛицоФинУрПасОрг           = ДанныеДокумента.КемВыдан;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				
			ИначеЕсли РеквизитыШапка.ОбособленноеПодразделение Тогда
				
				// Получатель обособленное подразделение
				
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ОГРН = РеквизитыШапка.ОГРН;
				
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаКод = РеквизитыШапка.СтранаНазначенияКод;
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаНаименование = РеквизитыШапка.СтранаНазначенияНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодНаименование = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодИндекс = ПолучательАдрес.Получить("Индекс");
				РеквизитыШапка.ОтвЛицоФинУрПодОбласть = ПолучательАдрес.Получить("Регион");
				РеквизитыШапка.ОтвЛицоФинУрПодУлицаНомерДома = 
					ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
					+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира");
				
			Иначе	
				
				// Получатель юридическое лицо
				
				РеквизитыШапка.ОтвЛицоФинУр = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
				
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ПолучательИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ПолучательКоды", РеквизитыШапка.ПолучательКоды);
			РеквизитыШапка.Вставить("ПолучательНаименование", ПолучательНаименование);
			РеквизитыШапка.Вставить("ПолучательНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ПолучательОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ПолучательРБ_УНП", "");
			РеквизитыШапка.Вставить("ПолучательРК_БИН", "");
			РеквизитыШапка.Вставить("ПолучательРК_ИИН", "");
			РеквизитыШапка.Вставить("ПолучательРФ_ИНН", РеквизитыШапка.ПокупательИНН);
			РеквизитыШапка.Вставить("ПолучательРФ_КПП", РеквизитыШапка.ПокупательКПП);
			РеквизитыШапка.Вставить("ПолучательРФ_ОГРН", РеквизитыШапка.ОГРН);
			РеквизитыШапка.Вставить("ПолучательРеквизиты", РеквизитыШапка.ПолучательРеквизиты);
			РеквизитыШапка.Вставить("ПолучательСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ПолучательСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ПолучательУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			ПочтовыйАдресОрганизации = "643, " + РеквизитыШапка.ОргПочтовыйАдрес;
			
			Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				РеквизитыШапка.ОргИсполнитель = РеквизитыШапка.ИндивидуальныйПредприниматель;
				РеквизитыШапка.ОргДолжностьИсп = НСтр("ru='Индивидуальный предприниматель'"); 
				ФИО = ПолучитьФИОФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель);
			Иначе
				Руководители                   = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
				РеквизитыШапка.ОргИсполнитель  = Руководители.РуководительПредставление;
				РеквизитыШапка.ОргДолжностьИсп = Руководители.РуководительДолжностьПредставление;
				ФИО = Руководители.РуководительФИО;
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ОргИмяИсп",      ФИО.Имя);
			РеквизитыШапка.Вставить("ОргФамилияИсп",  ФИО.Фамилия);
			РеквизитыШапка.Вставить("ОргОтчествоИсп", ФИО.Отчество);
			
			РеквизитыШапка.Вставить("ОргТелефонИсп",  РеквизитыШапка.ОргТелефонИсп);
			
			РеквизитыШапка.Вставить("ОргИндекс", 			ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОргНаселенныйПункт", 	ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОргОбласть", 			ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОргУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			РеквизитыШапка.Вставить("ОргАдресЭлПочты", 			РеквизитыШапка.ОргАдресЭлПочты);
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 		ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("ОргСтранаКод", 			РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОргСтранаНаименование", 	РеквизитыШапка.СтранаНазначенияНаименование);
			
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 			ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("мАдресвФорматеДляВыгрузки", 	ПочтовыйАдресОрганизации);
			
			РеквизитыШапка.Вставить("Получатель_ДатаДокСтр", РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента);
			РеквизитыШапка.Вставить("Получатель_ВидДокКод",  РеквизитыШапка.ОтвЛицоФинУрПасВидДок);
			РеквизитыШапка.Вставить("Получатель_ВидДокНаим", РеквизитыШапка.ОтвЛицоФинУрПасНаименование);
			РеквизитыШапка.Вставить("Получатель_СерДок",     РеквизитыШапка.ОтвЛицоФинУрПасСерДок);
			РеквизитыШапка.Вставить("Получатель_НомДок",     РеквизитыШапка.ОтвЛицоФинУрПасНомерДок);
			РеквизитыШапка.Вставить("Получатель_ДатаДок",    РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента);
			РеквизитыШапка.Вставить("Получатель_ОргДок",     РеквизитыШапка.ПолучательНаименование);
			
			РеквизитыШапка.Вставить("Получатель_Тел",    РеквизитыШапка.ОргТелефонИсп);
			РеквизитыШапка.Вставить("Получатель_Факс",   РеквизитыШапка.ОргТелефонИсп);
			РеквизитыШапка.Вставить("Получатель_Телекс", "");
			РеквизитыШапка.Вставить("Получатель_Почта",  РеквизитыШапка.ОргАдресЭлПочты);
			
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		ОбщаяЦенаТоваров = 0;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			
				Если ЗначениеЗаполнено(СтрокаТовары.КодВидаТранспорта) Тогда
					
					РеквизитыШапка.ВидТранспортаКод = СтрокаТовары.КодВидаТранспорта;
					ВидТранспорта = СписокВидовТранспорта.НайтиПоЗначению(СтрокаТовары.КодВидаТранспорта);
					
					Если ВидТранспорта <> Неопределено Тогда
						РеквизитыШапка.ВидТранспортаНаименование = Сред(ВидТранспорта, 6);
					КонецЕсли;
					
				КонецЕсли;
				
				ОтчетныйПериод = СтрокаТовары.ОтчетныйПериод;
				
				ОбщаяЦенаТоваров = ОбщаяЦенаТоваров + СтрокаТовары.ЦенаТовараВыбВал;
				
			КонецЦикла;
			
		КонецЕсли;

		// Графа 7 - общая стоимость
		РеквизитыШапка.Вставить("ОбщаяЦенаТоваров", ОбщаяЦенаТоваров);
		
		// Реквизиты подписи - сокращенное наименование организации-покупателя.
		РеквизитыШапка.Вставить("ПолнСокрНаим", СведенияОПокупателе.СокращенноеНаименование);
		
		// Реквизиты подписи - ИНН/КПП/ОГРН организации-покупателя.
		ИННКППОГРН = РеквизитыШапка.ПокупательИНН 
			+ ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП)
			+ "/" + РеквизитыШапка.ОГРН;
		
		РеквизитыШапка.Вставить("ИннКппОгрн", ИННКППОГРН);
		
		ОсновнаяЧасть1.Параметры.Заполнить(РеквизитыШапка);
		ТабДокумент.Вывести(ОсновнаяЧасть1);
		
		ТаблицаДокументы = Новый ТаблицаЗначений; // Таблица для выгрузки
		ТаблицаДокументы.Колонки.Добавить("НаименованиеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
		НоваяСтрокаВыгрузки.НаименованиеДокумента = "Договор";
		НоваяСтрокаВыгрузки.НомерДокумента = РеквизитыШапка.НомерДоговора;
		НоваяСтрокаВыгрузки.ДатаДокумента = РеквизитыШапка.ДатаДоговора;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			// Реквизиты сопроводительных документов и счетов-фактур
			
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТовары.СерияНомерТСД) Тогда
					
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = НСтр("ru = 'Счет-проформа (проформа-инвойс)'");
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.СерияНомерТСД;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаТСД;
							
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТовары.НомерСчетаФактуры) Тогда
						
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = НСтр("ru = 'Счет-фактура (инвойс)'");
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.НомерСчетаФактуры;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаСчетаФактуры;
				
				КонецЕсли; 
					
			КонецЦикла;
			
			ТаблицаДокументы.Свернуть("НаименованиеДокумента,НомерДокумента,ДатаДокумента");
			
			Для каждого СтрокаДокумента Из ТаблицаДокументы Цикл
			
				МногострочнаяЧасть1.Параметры.Документы = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 № %2 от %3 г.'"),
						СтрокаДокумента.НаименованиеДокумента,
						СтрокаДокумента.НомерДокумента, 
						Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy"));
						
				ТабДокумент.Вывести(МногострочнаяЧасть1);
			
			КонецЦикла; 
			
			ТабДокумент.Вывести(ОсновнаяЧасть2);
			
			ТаблицаТоварыДляВыгрузки = ТаблицаТовары.СкопироватьКолонки();   // Таблица для выгрузки
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("КодТО");              // Код таможенного органа
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ДатаРегистрацииСтр"); // Дата таможенной декларации
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("НомерДок");           // Номер таможенной декларации
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ДекларацияНом");      // Порядковый номер строки в декларации
			
			
			ОбщаяЦенаТоваров = 0;
			
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаВыгрузки = ТаблицаТоварыДляВыгрузки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВыгрузки, СтрокаТовары);
				ЗаполнитьРеквизитыТаможеннойДекларации(СтрокаТовары, НоваяСтрокаВыгрузки);
				
				МногострочнаяЧасть2.Параметры.Заполнить(НоваяСтрокаВыгрузки);
				ТабДокумент.Вывести(МногострочнаяЧасть2);
				
				НоваяСтрокаВыгрузки.ЕдИзмТовараКратко = ВРег(СтрокаТовары.ЕдИзмТовараКратко);
				
			КонецЦикла;
			
		Иначе
			ТабДокумент.Вывести(МногострочнаяЧасть2);
		КонецЕсли; 
		
		// Подвал
	
		РеквизитыШапка.Вставить("ДатаЗаполнения", Формат(РеквизитыШапка.Дата, "ДФ=yyyy-MM-dd"));
		
		РеквизитыШапка.ДатаЗаполненияД1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		РеквизитыШапка.ДатаЗаполненияД2 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияД", Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 2));
		
		РеквизитыШапка.ДатаЗаполненияМ1 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ДатаЗаполненияМ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияМ", Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 2));

		РеквизитыШапка.ДатаЗаполненияГ1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ДатаЗаполненияГ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ДатаЗаполненияГ3 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ДатаЗаполненияГ4 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияГ", Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""));
		
		РеквизитыШапка.ОтчетныйМесяцМ1 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ОтчетныйМесяцМ2 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцМ", Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 2));
		
		РеквизитыШапка.ОтчетныйМесяцГ1 = Лев(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ОтчетныйМесяцГ2 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ОтчетныйМесяцГ3 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ОтчетныйМесяцГ4 = Прав(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцГ", Формат(ОтчетныйПериод, "ДФ=""гггг"""));
		РеквизитыШапка.Вставить("ОтчетныйМесяц",  Формат(ОтчетныйПериод, "ДФ=yyyy-MM")); 
		РеквизитыШапка.Вставить("УникальныйИД",   РеквизитыШапка.ДокументСсылка.УникальныйИдентификатор());
		
		ОсновнаяЧасть3.Параметры.Заполнить(РеквизитыШапка);
		
		ТабДокумент.Вывести(ОсновнаяЧасть3);
		
	КонецЦикла;
	
	Если ТаблицаТоварыДляВыгрузки <> Неопределено Тогда
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ОтчетныйПериод");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("СерияНомерТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСтроки");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("КодВидаТранспорта");
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("РеквизитыШапка",           РеквизитыШапка);
	Структура.Вставить("ТаблицаДокументы",         ТаблицаДокументы);
	Структура.Вставить("ТаблицаТоварыДляВыгрузки", ТаблицаТоварыДляВыгрузки);
	Структура.Вставить("ТабДокумент",              ТабДокумент);
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьРеквизитыТаможеннойДекларации(СтрокаДокумента, СтрокаВыгрузки)
	
	// Получим из номера таможенной декларации
	//   КодТО              - Код таможенного органа
	//   ДатаРегистрацииСтр - Дата таможенной декларации
	//   НомерДок           - Номер таможенной декларации
	//   ДекларацияНом      - Порядковый номер строки в декларации
	
	Если ЗначениеЗаполнено(СтрокаДокумента.НомерТаможеннойДекларации) Тогда
		
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаДокумента.НомерТаможеннойДекларации, "/");
		
		Если МассивСлов.Количество() = 4 Тогда
			СтрокаВыгрузки.КодТО              = МассивСлов[0];
			ДатаРегистрацииСтр                = МассивСлов[1];
			
			Если СтрДлина(ДатаРегистрацииСтр) = 6 Тогда
				Число = Лев(ДатаРегистрацииСтр, 2);
				Месяц = Сред(ДатаРегистрацииСтр, 3, 2);
				Год   = Прав(ДатаРегистрацииСтр, 2);
				СтрокаВыгрузки.ДатаРегистрацииСтр = "20" + Год + "-" + Месяц  + "-" + Число;
			Иначе
				СтрокаВыгрузки.ДатаРегистрацииСтр = "0001-01-01";
			КонецЕсли; 
			
			СтрокаВыгрузки.НомерДок           = МассивСлов[2];
			ТипЧисло = Новый ОписаниеТипов("Число");
			СтрокаВыгрузки.ДекларацияНом = ТипЧисло.ПривестиЗначение(МассивСлов[3]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАдресВВидеСоответствия(СсылкаНаОбъект, ВидКонтактнойИнформации, ДатаЗаполнения = Неопределено)
			
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, , ВидКонтактнойИнформации, ДатаЗаполнения);
	
	ЗначениеКонтактнойИнформации = "";
	ПредставлениеКонтактнойИнформации = "";
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗначениеКонтактнойИнформации = КонтактнаяИнформация[0].ЗначенияПолей;
		ПредставлениеКонтактнойИнформации = КонтактнаяИнформация[0].Представление;
	КонецЕсли; 
	
	РоссийскийАдрес = ПустойРоссийскийАдрес();
	
	Если СтрНайти(ЗначениеКонтактнойИнформации, "АдресРФ") > 0 Тогда
		СформироватьАдрес(ЗначениеКонтактнойИнформации, РоссийскийАдрес);
	Иначе
		СформироватьАдресТС(ЗначениеКонтактнойИнформации, РоссийскийАдрес);
	КонецЕсли;
	
	ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес);
	
	Возврат РоссийскийАдрес;

КонецФункции

Функция ПустойРоссийскийАдрес()

	РоссийскийАдрес = 	Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",	        "");
	РоссийскийАдрес.Вставить("Регион",          "");
	РоссийскийАдрес.Вставить("КодРегиона",      "");
	РоссийскийАдрес.Вставить("Район",           "");
	РоссийскийАдрес.Вставить("Город",           "");
	РоссийскийАдрес.Вставить("НаселенныйПункт", "");
	РоссийскийАдрес.Вставить("Улица",           "");
	РоссийскийАдрес.Вставить("Дом",             "");
	РоссийскийАдрес.Вставить("Корпус",          "");
	РоссийскийАдрес.Вставить("Квартира",        "");
	
	Возврат РоссийскийАдрес;

КонецФункции

Процедура ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес)

	Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие") Тогда
		
		Если ЗначениеЗаполнено(РоссийскийАдрес.Получить("Регион"))
			И НЕ ЗначениеЗаполнено(РоссийскийАдрес.Получить("НаселенныйПункт")) Тогда
			
			РоссийскийАдрес.Вставить("НаселенныйПункт", РоссийскийАдрес.Получить("Регион"));
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьАдресТС(ЗначениеКонтактнойИнформации, РоссийскийАдрес)
	
	ЗначенияПолей = УправлениеКонтактнойИнформацией.СведенияОбАдресе(ЗначениеКонтактнойИнформации);
	Если ЗначенияПолей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		РоссийскийАдрес[Элемент.Ключ] = "";
		
		Если ЗначенияПолей.Свойство(Элемент.Ключ) Тогда
			РоссийскийАдрес[Элемент.Ключ] = ЗначенияПолей[Элемент.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ЗначенияПолей.Здание) = Тип("Структура") Тогда
		РоссийскийАдрес["Дом"] = ЗначенияПолей.Здание.Номер;
	КонецЕсли;
	
	Если ТипЗнч(ЗначенияПолей.Помещения) = Тип("Массив")
			И ЗначенияПолей.Помещения.Количество() > 0 Тогда
		РоссийскийАдрес["Квартира"] = ЗначенияПолей.Помещения[0].Номер;
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

Функция ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

Функция ПолучитьНазваниеРегионаПоКоду(КодРегиона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		ЧисловойКодРегиона = Число(КодРегиона);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат АдресныйКлассификатор.НаименованиеРегионаПоКоду(ЧисловойКодРегиона);

КонецФункции

Процедура СформироватьАдрес(КонтактнаяИнформация, РоссийскийАдрес) Экспорт
	
	ЗначенияПолей = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(КонтактнаяИнформация);
	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		РоссийскийАдрес[Элемент.Ключ] = "";
	КонецЦикла;
	
	Для НомСтр = 1 По СтрЧислоСтрок(ЗначенияПолей) Цикл
		
		Стр = СтрПолучитьСтроку(ЗначенияПолей, НомСтр);
		
		ПредставлениеСтр = Лев(Стр, СтрНайти(Стр, "=") - 1);
		ЗначениеСтр = Сред(Стр, СтрНайти(Стр, "=") + 1);
		
		Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие") И ЗначениеЗаполнено(ПредставлениеСтр) И НЕ РоссийскийАдрес.Получить(ПредставлениеСтр) = Неопределено Тогда
			РоссийскийАдрес[ПредставлениеСтр] = ЗначениеСтр;
		ИначеЕсли ТипЗнч(РоссийскийАдрес) = Тип("Структура") И ЗначениеЗаполнено(ПредставлениеСтр) И РоссийскийАдрес.Свойство(ПредставлениеСтр) Тогда
			РоссийскийАдрес[ПредставлениеСтр] = ЗначениеСтр;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// ++ НЕ УТ
#Область ВыгрузкаВЭлектронномВиде

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", ПараметрыВыгрузки.ИмяФайлаСхемы);
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист Из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция УчетПеремещенияТоваровЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			УчетПеремещенияТоваровЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист Из СтрокаДерева.Строки Цикл
				УчетПеремещенияТоваровЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ЭлектронноеПредставление(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	
	Если ПараметрыВыгрузки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВыгрузки = ИзвлечьСтруктуруXML(ДанныеДокумента.РеквизитыРаздел1.Дата);
	
	ЗаполнитьДанными(СтруктураВыгрузки, ПараметрыВыгрузки, ДанныеДокумента);
	
	Если НЕ ПроверитьДанные(СтруктураВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ПараметрыВыгрузки);
		
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ПараметрыВыгрузки.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ЭлектронноеПредставление2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	
	Если ПараметрыВыгрузки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ВыгрузкаВозможна(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки) Тогда	
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВыгрузки = ИзвлечьСтруктуруXML(ДанныеДокумента.РеквизитыРаздел1.Дата);
	
	ЗаполнитьДанными(СтруктураВыгрузки, ПараметрыВыгрузки, ДанныеДокумента);
	
	Если НЕ ПроверитьДанные(СтруктураВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ПараметрыВыгрузки);
		
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ПараметрыВыгрузки.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ВыгрузкаВозможна(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	СтатусПроверки = Истина;
	
	ПроверитьВозможностьВыгрузки_ПараметрыВыгрузки(СтатусПроверки, ДанныеДокумента, СтруктураРеквизитовВыгрузки);
	
	ПроверитьВозможностьВыгрузки_Раздел1(СтатусПроверки, ПараметрыВыгрузки, ДанныеДокумента);
	
	ПроверитьВозможностьВыгрузки_Товары(СтатусПроверки, ДанныеДокумента);
	
	ПроверитьВозможностьВыгрузки_Раздел3(СтатусПроверки, ДанныеДокумента);
	
	ПроверитьВозможностьВыгрузки_Приложение(СтатусПроверки, ДанныеДокумента);
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция КодПричиныВозникновенияЗаявления(ПредставлениеПричины)
	
	КодПричины = "0"; // Недопустимый код для обработки ошибочного ввода
	
	Если НРег(СокрЛП(ПредставлениеПричины)) = НСтр("ru = 'первичное заявление'") Тогда
		КодПричины = "1";
	ИначеЕсли НРег(СокрЛП(ПредставлениеПричины)) = НСтр("ru = 'взамен ранее представленного'") Тогда
		КодПричины = "4";
	ИначеЕсли НРег(СокрЛП(ПредставлениеПричины)) = НСтр("ru = 'корректировка ранее представленного при увеличении цены'") Тогда
		КодПричины = "5";
	ИначеЕсли НРег(СокрЛП(ПредставлениеПричины)) = НСтр("ru = 'взамен ранее представленного при частичном возврате товара'") Тогда
		КодПричины = "6";
	КонецЕсли;
	
	Возврат КодПричины;
	
КонецФункции

Процедура ПроверитьВозможностьВыгрузки_ПараметрыВыгрузки(СтатусПроверки, ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	Раздел1 = ДанныеДокумента.РеквизитыРаздел1;
	
	КодПричины = КодПричиныВозникновенияЗаявления(СокрЛП(Раздел1.ПричинаЗаявления));
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПричинаЗаявления) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не указана причина возникновения заявления.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ЗначениеСодержитсяВСписке(КодПричины, "1,4,5,6") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Указана неверная причина возникновения заявления.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если КодПричины = "4" ИЛИ КодПричины = "5" ИЛИ КодПричины = "6" Тогда
		Если НЕ ЗначениеЗаполнено(Раздел1.НомерОтметки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указан номер отметки о регистрации в налоговом органе ранее представленного заявления.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаОтметки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указана дата отметки о регистрации в налоговом органе ранее представленного заявления.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если КодПричины = "5" Тогда
			Если НЕ ЗначениеЗаполнено(Раздел1.ИзмениеЦеныМесяц) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не указан месяц, в котором участниками договора (контракта) увеличена цена.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Раздел1.ИзмениеЦеныГод) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не указан год, в котором участниками договора (контракта) увеличена цена.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	КодИФНС               = СтруктураРеквизитовВыгрузки.КодИФНС;
	ОтправительЯвляетсяЮЛ = СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ;
	
	НаимОтпр      = СтруктураРеквизитовВыгрузки.НаимОтпр;
	ИННЮЛОтпр     = СтруктураРеквизитовВыгрузки.ИННЮЛОтпр;
	КППОтпр       = СтруктураРеквизитовВыгрузки.КППОтпр;
	ФамилияФЛОтпр = СтруктураРеквизитовВыгрузки.ФамилияФЛОтпр;
	ИмяФЛОтпр     = СтруктураРеквизитовВыгрузки.ИмяФЛОтпр;
	
	ПрПодп       = СтруктураРеквизитовВыгрузки.ПрПодп1;
	ФамилияПодп  = СтруктураРеквизитовВыгрузки.ФамилияПодп1;
	ИмяПодп      = СтруктураРеквизитовВыгрузки.ИмяПодп1;
	НаимДовПодп  = СтруктураРеквизитовВыгрузки.НаимДовПодп1;
	НомерДовПодп = СтруктураРеквизитовВыгрузки.НомерДовПодп1;
	ДатаДовПодп  = СтруктураРеквизитовВыгрузки.ДатаДовПодп1;
	
	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнен код налогового органа. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(КодИФНС))<> 4 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Неверно заполнен код налогового органа. Требуется заполнить 4 символами в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ОтправительЯвляетсяЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(НаимОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнено наименование организации отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИННЮЛОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнен ИНН организации отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КППОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнен КПП организации отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтправительЯвляетсяЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ФамилияФЛОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена фамилия отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИмяФЛОтпр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнено имя отправителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФамилияПодп) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнена фамилия подписанта. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяПодп) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнено имя подписанта. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПрПодп = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовПодп) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнено наименование документа, подтверждающего полномочия представителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НомерДовПодп) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнен номер документа, подтверждающего полномочия представителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаДовПодп) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена дата документа, подтверждающего полномочия представителя. Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыгрузки_Приложение(СтатусПроверки, ДанныеДокумента)
	
	Приложение = ДанныеДокумента.ТаблицаПриложение;
	
	Для Каждого Лист Из Приложение Цикл
		
		Если НЕ ЗаполненЛистРазделаПриложение(Лист) Тогда
			Продолжить;
		КонецЕсли;
				
		// Продавец.
		Если НЕ ЗначениеЗаполнено(Лист.ТипПрод_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан тип продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задано полное наименование (ФИО) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан код страны продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан адрес местонахождения (жительства) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(Лист.ТипПок_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан тип покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задано полное наименование (ФИО) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан код страны покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Лист.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан адрес местонахождения (жительства) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(Лист.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задан номер договора (контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В приложении не задана дата договора (контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыгрузки_Раздел1(СтатусПроверки, ПараметрыВыгрузки, ДанныеДокумента)
	
	Раздел1 = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3 = ДанныеДокумента.РеквизитыРаздел3;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерЗаяв) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан номер заявления.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ДатаДок = ПараметрыВыгрузки.ДатаДокДата;
	Если ДатаДок < '20100701' Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Дата формирования файла выгрузки не может быть раньше 01.07.2010.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Продавец.
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задано полное наименование (ФИО) продавца.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПродавец) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан код страны продавца.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецМестоНахожд) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан адрес местонахождения (жительства) продавца.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Покупатель.
	
	ДлинаИНН = СтрДлина(Раздел1.ПокупательИНН);
	Если ДлинаИНН = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан ИНН покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 неверно задан ИНН покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задано полное наименование (ФИО) покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПокупатель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан код страны покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательМестоНахожд) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан адрес местонахождения (жительства) покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Сведения о контракте.
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задан номер договора (контракта) строки 05.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ДатаДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задана дата договора (контракта) строки 05.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
			
	ЕстьДоговорЛизинга = Раздел1.ПрЛизинг;
	ЕстьДоговорПереработки = Раздел1.ПрДавСырья;
	
	Если ЕстьДоговорЛизинга И ЕстьДоговорПереработки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не могут быть одновременно заданы признаки заключения договора лизинга и договора переработки давальческого сырья.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Сведения о комиссионере (посреднике).
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='В разделе 1 не задано полное наименование (ФИО) покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	                                      	
	ЕстьСведенияОКомиссионере = НЕ ПустаяСтрока(Раздел1.ИННОрг_1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.НаимОрг_1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.КодСтраныОрг1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.МестоНахождОрг_1)
	ИЛИ НЕ ПустаяСтрока(Раздел1.НомКонтр_2)
	ИЛИ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2);
	
	Если ЕстьСведенияОКомиссионере Тогда
		
		Если НЕ ЗначениеЗаполнено(Раздел1.НаимОрг_1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 1 не задано полное наименование (ФИО) посредника.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 1 не задан код страны посредника.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.МестоНахождОрг_1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 1 не задан адрес местонахождения (жительства) посредника.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.НомКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 1 не задан номер договора (контракта) посредника.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 1 не задана дата договора (контракта) посредника.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыгрузки_Раздел3(СтатусПроверки, ДанныеДокумента)
	
	Раздел3 = ДанныеДокумента.РеквизитыРаздел3;
	
	Если ЗначениеЗаполнено(Раздел3.ПродавецИНН_КПП)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательИНН_КПП)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПрод_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПок_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецБайконур)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательБайконур)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг)
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПродавец)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательНаимОрг)
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПокупатель)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд)
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерДог)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаДог)
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерСпецификации)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаСпецификации) Тогда
		
		// Продавец.
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ТипПрод_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан тип продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИдентификаторПродавца = СокрЛП(Раздел3.ПродавецИНН_КПП);
		Если НЕ ЗначениеЗаполнено(ИдентификаторПродавца) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан идентификационный код (номер) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ИдентификаторПродавца) < 8 ИЛИ СтрДлина(ИдентификаторПродавца) > 14 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 неверно задан идентификационный код (номер) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задано полное наименование (ФИО) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан код страны продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан адрес местонахождения (жительства) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		
		Если ПустаяСтрока(Раздел3.ТипПок_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан тип покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задано полное наименование (ФИО) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан код страны покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан адрес местонахождения (жительства) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		
		Если НЕ ЗначениеЗаполнено(Раздел3.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задан номер договора (контракта) в строке 12.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='В разделе 3 не задана дата договора (контракта) в строке 12.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	СтатусПроверки = Истина;
	
	// Проверка сведений о файле выгрузки.
	ДатаДок = ПараметрыВыгрузки.ДатаДокДата;
	Если ДатаДок < '20100701' Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Дата формирования файла выгрузки не может быть раньше 01.07.2010.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
			
	Раздел1    = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3    = ДанныеДокумента.РеквизитыРаздел3;
	Приложение = ДанныеДокумента.ТаблицаПриложение;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерЗаяв) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задан номер заявления.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ИННКПП = Раздел1.ПродавецИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПродавца = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППродавца = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПродавца = СокрЛП(ИННКПП);
		КПППродавца = "";
	КонецЕсли;
	
	ИННКПП = Раздел1.ПокупательИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПокупателя = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППокупателя = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПокупателя = СокрЛП(ИННКПП);
		КПППокупателя = "";
	КонецЕсли;
	
	ИННКПП = Раздел1.ИННОрг_1;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННКомиссионера = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КППКомиссионера = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННКомиссионера = СокрЛП(ИННКПП);
		КППКомиссионера = "";
	КонецЕсли;
	
	// Раздел 1. Продавец.
		
	Если Раздел1.КодСтраныПродавец = "112" ИЛИ Раздел1.КодСтраныПродавец = "398" Тогда
		Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если Раздел1.КодСтраныПродавец = "643" ИЛИ Раздел1.ПродавецБайконур Тогда
		ДлинаИНН = СтрДлина(ИННПродавца);
		
		Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Неверно задан ИНН продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ДлинаИНН = 10 Тогда
			ДлинаКПП = СтрДлина(КПППродавца);
			Если ДлинаКПП = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не задан КПП продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаКПП <> 9 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан КПП продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) продавца.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Покупатель.
	
	Если Раздел1.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Раздел1.ПокупательБайконур) Тогда
		ДлинаИНН = СтрДлина(ИННПокупателя);
		
		Если ДлинаИНН = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан ИНН покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Неверно задан ИНН покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ДлинаИНН = 10 Тогда
			ДлинаКПП = СтрДлина(КПППокупателя);
			Если ДлинаКПП = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не задан КПП продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаКПП <> 9 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан КПП продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПокупатель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задан код страны организации-покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ(Раздел1.КодСтраныПокупатель = "643" ИЛИ Раздел1.КодСтраныПокупатель = "398") Тогда	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код страны организации-покупателя должен быть 398 или 643.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательМестоНахожд) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) покупателя.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Сведения о контракте.

	Если НЕ ЗначениеЗаполнено(Раздел1.НомерДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задан номер договора(контракта).'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ДатаДог) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не задана дата договора(контракта).'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;

	ЕстьДоговорЛизинга = Раздел1.ПрЛизинг;
	ЕстьДоговорПереработки = Раздел1.ПрДавСырья;
	
	Если ЕстьДоговорЛизинга И ЕстьДоговорПереработки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не могут быть одновременно заданы признаки заключения договора лизинга и договора переработки давальческого сырья.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Сведения о комиссионере (посреднике).
	
	ЕстьСведенияОКомиссионере = НЕ ПустаяСтрока(Раздел1.ИННОрг_1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.НаимОрг_1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.КодСтраныОрг1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.МестоНахождОрг_1)
							ИЛИ НЕ ПустаяСтрока(Раздел1.НомКонтр_2)
							ИЛИ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2);
	
	Если ЕстьСведенияОКомиссионере Тогда
		
		Если ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) И СтрНайти("112,398,643", Раздел1.КодСтраныОрг1) <> 0 Тогда
			Если ПустаяСтрока(ИННКомиссионера) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) организации.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Раздел1.КодСтраныОрг1 = "643" ИЛИ Раздел1.КомиссионерБайконур Тогда	
			ДлинаИНН = СтрДлина(ИННКомиссионера);
			
			Если ДлинаИНН = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не задан ИНН покупателя.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан ИНН покупателя.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КППКомиссионера);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Не задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Неверно задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан код страны организации.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.МестоНахождОрг_1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) организации.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.НомКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан номер договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задана дата договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьВозможностьВыгрузки_Товары(СтатусПроверки, ДанныеДокумента);

	// Проверка раздела 3.
		
	ИННКПП = Раздел3.ПродавецИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПродавца_Раздел3 = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППродавца_Раздел3 = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПродавца_Раздел3 = СокрЛП(ИННКПП);
		КПППродавца_Раздел3 = "";
	КонецЕсли;
	
	ИННКПП = Раздел3.ПокупательИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПокупателя_Раздел3 = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППокупателя_Раздел3 = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПокупателя_Раздел3 = СокрЛП(ИННКПП);
		КПППокупателя_Раздел3 = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Раздел3.ПродавецИНН_КПП) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательИНН_КПП)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПрод_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПок_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецБайконур)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательБайконур)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПродавец) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательНаимОрг) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПокупатель) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерДог) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаДог) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерСпецификации) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаСпецификации) Тогда
	 
		// Продавец.
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ТипПрод_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан тип организации-продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ИННПродавца_Раздел3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Раздел3.ПродавецБайконур Тогда
			ДлинаИНН = СтрДлина(ИННПродавца_Раздел3);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан ИНН продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППродавца_Раздел3);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Не задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Неверно задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(ИННПродавца_Раздел3) < 9 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Неверно задан УНП|ИНН|РНН(БИН|ИИН) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан код страны организации-продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		Иначе
			Если НЕ ЗначениеСодержитсяВСписке(Раздел3.КодСтраныПродавец, "112,398,643") Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Код страны организации-продавца должен быть 398, 112 или 643.'");
				Сообщение.Сообщить();
			Иначе
				Если (Раздел1.КодСтраныПокупатель = "643") И НЕ ЗначениеСодержитсяВСписке(Раздел3.КодСтраныПродавец, "112,398") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Код страны организации-продавца должен быть 112 или 398.'");
					Сообщение.Сообщить();
				ИначеЕсли (Раздел1.КодСтраныПокупатель = "398") И НЕ ЗначениеСодержитсяВСписке(Раздел3.КодСтраныПродавец, "112,643") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Код страны организации-продавца должен быть 112 или 643.'");
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(Раздел3.ТипПок_3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан тип организации-покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (Раздел3.КодСтраныПокупатель = "643" ИЛИ Раздел3.КодСтраныПокупатель = "112" ИЛИ Раздел3.КодСтраныПокупатель = "398") И ПустаяСтрока(ИННПокупателя_Раздел3) Тогда	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Раздел3.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Раздел3.ПокупательБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННПокупателя_Раздел3);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан ИНН покупателя.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППокупателя_Раздел3);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Не задан КПП покупателя.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Неверно задан КПП покупателя.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
    		Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан код страны организации-покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(Раздел3.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан номер договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задана дата договора(контракта) в строке 12.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	// Проверка приложений.
	Для Каждого Лист Из Приложение Цикл
		
		Если НЕ ЗаполненЛистРазделаПриложение(Лист) Тогда
			Продолжить;
		КонецЕсли;
		
		ИННКПП = Лист.ПродавецИНН_КПП;
											 
		Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
			ПозицияРазделителя = СтрНайти(ИННКПП, "/");
			ИННПродавца_Приложение = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
			КПППродавца_Приложение = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
		Иначе
			ИННПродавца_Приложение = СокрЛП(ИННКПП);
			КПППродавца_Приложение = "";
		КонецЕсли;
		
		ИННКПП = Лист.ПокупательИНН_КПП;
		Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
			ПозицияРазделителя = СтрНайти(ИННКПП, "/");
			ИННПокупателя_Приложение = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
			КПППокупателя_Приложение = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
		Иначе
			ИННПокупателя_Приложение = СокрЛП(ИННКПП);
			КПППокупателя_Приложение = "";
		КонецЕсли;
		
		// Продавец.
		Если НЕ ЗначениеЗаполнено(Лист.ТипПрод_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан тип организации-продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (Лист.КодСтраныПродавец = "643" ИЛИ Лист.КодСтраныПродавец = "112" ИЛИ Лист.КодСтраныПродавец = "398") И ПустаяСтрока(ИННПродавца_Приложение) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Лист.КодСтраныПродавец = "643" ИЛИ Лист.ПродавецБайконур Тогда
			ДлинаИНН = СтрДлина(ИННПродавца_Приложение);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан ИНН продавца.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППродавца_Приложение);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Не задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Неверно задан КПП продавца.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПродавец) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Задан код страны организации-продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) продавца.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(Лист.ТипПок_Пр) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан тип организации-покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (Лист.КодСтраныПокупатель = "643" ИЛИ Лист.КодСтраныПокупатель = "112" ИЛИ Лист.КодСтраныПокупатель = "398") И ПустаяСтрока(ИННПокупателя_Приложение) Тогда	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан УНП|ИНН|РНН(БИН|ИИН) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли Лист.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Лист.ПокупательБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННПокупателя_Приложение);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Неверно задан ИНН покупателя.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППокупателя_Приложение);
				Если ДлинаКПП = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Не задан КПП покупателя.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Неверно задан КПП покупателя.'");
					Сообщение.Сообщить();
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ПродавецНаимОрг) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Лист.КодСтраныПокупатель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан код страны организации-покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Лист.ПокупательМестоНахожд) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задано местонахождение (место жительства) покупателя.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(Лист.НомерДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задан номер договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лист.ДатаДог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задана дата договора(контракта).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЦикла;
			
	// Проверка заполненности параметров выгрузки, задаваемых на форме выгрузки.
	Если СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
		КодИФНС = СтруктураРеквизитовВыгрузки.КодИФНС;
	Иначе
		КодИФНС = "";
	КонецЕсли;
	
	ОтправительЯвляетсяЮЛ = СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ;
	ИННЮЛОтпр             = СтруктураРеквизитовВыгрузки.ИННЮЛОтпр;
	ИННФЛОтпр             = СтруктураРеквизитовВыгрузки.ИННФЛОтпр;
	ПрПодп1               = СтруктураРеквизитовВыгрузки.ПрПодп1;
	НаимДовПодп1          = СтруктураРеквизитовВыгрузки.НаимДовПодп1;
	НомерДовПодп1         = СтруктураРеквизитовВыгрузки.НомерДовПодп1;
	ДатаДовПодп1          = СтруктураРеквизитовВыгрузки.ДатаДовПодп1;
	ОтправленПочтой       = СтруктураРеквизитовВыгрузки.ОтправленПочтой;
	ПрКурьер              = СтруктураРеквизитовВыгрузки.ПрКурьер;
	НаимДовКурьер         = СтруктураРеквизитовВыгрузки.НаимДовКурьер;
	НомерДовКурьер        = СтруктураРеквизитовВыгрузки.НомерДовКурьер;
	ДатаДовКурьер         = СтруктураРеквизитовВыгрузки.ДатаДовКурьер;
	
	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнен код налогового органа! Необходимо заполнить в форме настроек параметров выгрузки.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (ОтправительЯвляетсяЮЛ И НЕ ЗначениеЗаполнено(ИННЮЛОтпр)) ИЛИ (НЕ ОтправительЯвляетсяЮЛ И НЕ ЗначениеЗаполнено(ИННФЛОтпр)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнен ИНН отправителя! Необходимо заполнить в форме настроек параметров выгрузки.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли; 

	Если ПрПодп1 = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовПодп1) ИЛИ НЕ ЗначениеЗаполнено(НомерДовПодп1) ИЛИ НЕ ЗначениеЗаполнено(ДатаДовПодп1) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнены сведения о доверенности подписанта 1! Необходимо заполнить в форме настроек параметров выгрузки.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтправленПочтой И ПрКурьер = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовКурьер) ИЛИ НЕ ЗначениеЗаполнено(НомерДовКурьер) ИЛИ НЕ ЗначениеЗаполнено(ДатаДовКурьер) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнены сведения о доверенности курьера!. Необходимо заполнить в форме настроек параметров выгрузки.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьВозможностьВыгрузки_Товары(СтатусПроверки, ДанныеДокумента)
	
	Раздел1        = ДанныеДокумента.РеквизитыРаздел1;
	ТаблицаРаздел1 = ДанныеДокумента.ТаблицаРаздел1;
	
	ЧислоВыгружаемыхТоваров = 0;
	НомСтроки = 1;
	
	ЕстьДоговорЛизинга = Раздел1.ПрЛизинг;
	ЕстьДоговорПереработки = Раздел1.ПрДавСырья;
	
	Для Каждого СтрТабл Из ТаблицаРаздел1 Цикл
		
		СтрокаЗаполнена = Ложь;
		
		Для Инд = 2 По 13 Цикл
			Если ЗначениеЗаполнено(СтрТабл["П0000100001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=")]) Тогда
				СтрокаЗаполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СтрокаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВыгружаемыхТоваров = ЧислоВыгружаемыхТоваров + 1;
		
		СтруктураСтавок = Новый Структура;
		СтруктураСтавок.Вставить("Ст16", СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%"), ",", "."), "%", ""));
		СтруктураСтавок.Вставить("Ст17", СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%"), ",", "."), "%", ""));
		СтруктураСтавок.Вставить("Ст18", СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%"), ",", "."), "%", ""));
		СтруктураСтавок.Вставить("Ст21", "");
		
		СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
		ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
		ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
		
		СтАкцизТверд = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%"), ",", "."), "%", "");
		СтАкцизАдвал = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%"), ",", "."), "%", "");
		СтНДС        = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%"), ",", "."), "%", "");
		
		СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0", СтАкцизТверд);
		СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0", СтАкцизАдвал);
		СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "Без НДС" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0", СтНДС);
		
		// Значение единицы измерения дополнительной величины налоговой базы.
		ЗначениеКоличТов = СтрТабл.П000010000105;
		ЗначениеНБАкциз = СтрТабл.П000010000114;
		ЗаполнятьЕдИзмТовНБАкц = (ЗначениеКоличТов <> ЗначениеНБАкциз)
		                       И (ЗначениеКоличТов <>0)
		                       И НЕ (ПрОсвАкциз = 3 ИЛИ ПрОсвАкциз = 4);
		
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000102) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнено наименование товара.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ТНВЭД = СтрТабл.П000010000103;
		Если (ПрОсвАкциз <> 4)	
		 ИЛИ (ПрОсвНДС = 2)
		 ИЛИ (ПрОсвНДС = 1 И СтНДС = 10) Тогда
			Если ПустаяСтрока(ТНВЭД) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не заполнен код ТН ВЭД.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Единица измерения.
		Если (НЕ ЕстьДоговорЛизинга И НЕ ЕстьДоговорПереработки)
		 ИЛИ (НЕ ПустаяСтрока(СтрТабл.П000010000105)) Тогда
			Если ПустаяСтрока(СтрТабл.П000010000104) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не заполнена единица измерения товара.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Количество товара.
		Если (НЕ ЕстьДоговорЛизинга И НЕ ЕстьДоговорПереработки)
		 ИЛИ (НЕ ПустаяСтрока(СтрТабл.П000010000104)) Тогда
			Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000105) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не указано количество товара.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СтоимостьТовара = СтрТабл.П000010000106;
		Если НЕ ЗначениеЗаполнено(СтоимостьТовара) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена стоимость товара.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодВалюты = СтрТабл.П000010000107;
		Если ПустаяСтрока(КодВалюты) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указана валюта товара.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КурсВалюты = СтрТабл.П000010000108;
		
		БазаВалюты = 0;
				
		Если НЕ ЗначениеЗаполнено(КурсВалюты) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указан курс валюты товара.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		ИначеЕсли КодВалюты = "643" Тогда 
			Если КурсВалюты <> 1 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Для валюты с кодом 643 (Российский рубль) курс валюты должен равняться 1.'");
				Сообщение.Сообщить();
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Транспортный (товаросопроводительный) документ.
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000109) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указаны серия, номер транспортного документа.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000110) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указана дата транспортного документа.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Счет-фактура.
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000111) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указан номер счета-фактуры.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000112) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не указана дата счета-фактуры.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Дата принятия на учет товара.
		Если НЕ ЗначениеЗаполнено(СтрТабл.П000010000113) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена дата принятия товара на учет.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
				
		НалоговаяБазаНДС = СтрТабл.П000010000115;
		Если НалоговаяБазаНДС <= 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не заполнена налоговая база (НДС).'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
						
		Если ПрОсвНДС = 1 И СтНДС <> "10" И СтНДС <> "18" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Неверно задана ставка НДС.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
						
		Если ПрОсвНДС = 1 И СтрТабл.П000010000120 <= 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не задана сумма НДС.'");
			Сообщение.Сообщить();
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Если ЧислоВыгружаемыхТоваров = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='.'");
		Сообщение.Сообщить();
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполненЛистРазделаПриложение(ЛистРаздела)
	
	Результат = ЗначениеЗаполнено(ЛистРаздела.ТипПрод_Пр)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецИНН_КПП)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецНаимОрг)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.КодСтраныПродавец)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецМестоНахожд)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПродавецБайконур)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ТипПок_Пр)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательИНН_КПП)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательНаимОрг)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.КодСтраныПокупатель)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательМестоНахожд)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ПокупательБайконур)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.НомерДог)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ДатаДог)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.НомерСпецификации)
	        ИЛИ ЗначениеЗаполнено(ЛистРаздела.ДатаСпецификации);
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если СтруктураРеквизитовВыгрузки.Количество() = 0 Тогда
		Возврат ПараметрыВыгрузки;
	КонецЕсли;
		
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(ДанныеДокумента.РеквизитыРаздел1.Организация);

	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ДатаДокДата", ТекущаяДатаСеанса());
	
	Если СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
		ПараметрыВыгрузки.Вставить("КодИФНС", СтруктураРеквизитовВыгрузки.КодИФНС);
	КонецЕсли;
		
	ПараметрыВыгрузки.Вставить("ПрОтпр", Строка(СтруктураРеквизитовВыгрузки.ПрОтпр));

	ПараметрыВыгрузки.Вставить("ПрОтпр", Формат(СтруктураРеквизитовВыгрузки.ПрОтпр, ""));
															  	
	Если СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ Тогда
		
		ПараметрыВыгрузки.Вставить("НаимОтпр", 		 СтруктураРеквизитовВыгрузки.НаимОтпр);
		ПараметрыВыгрузки.Вставить("ИННЮЛОтпр",		 СтруктураРеквизитовВыгрузки.ИННЮЛОтпр);
		ПараметрыВыгрузки.Вставить("КППОтпр",        СтруктураРеквизитовВыгрузки.КППОтпр);
		
	Иначе
		
		ПараметрыВыгрузки.Вставить("ИННФЛОтпр",      СтруктураРеквизитовВыгрузки.ИННФЛОтпр);	
		ПараметрыВыгрузки.Вставить("ФамилияФЛОтпр",  СтруктураРеквизитовВыгрузки.ФамилияФЛОтпр);
		ПараметрыВыгрузки.Вставить("ИмяФЛОтпр",      СтруктураРеквизитовВыгрузки.ИмяФЛОтпр);
		ПараметрыВыгрузки.Вставить("ОтчествоФЛОтпр", СтруктураРеквизитовВыгрузки.ОтчествоФЛОтпр);	
		
	КонецЕсли;

	Если СтруктураРеквизитовВыгрузки.ПрОтпр = 1 Тогда
		
		ПараметрыВыгрузки.Вставить("ПрПодп1", Формат(СтруктураРеквизитовВыгрузки.ПрПодп1, ""));
		
		Если НЕ ПустаяСтрока(СтруктураРеквизитовВыгрузки.ФамилияПодп2 + СтруктураРеквизитовВыгрузки.ИмяПодп2 + СтруктураРеквизитовВыгрузки.ОтчествоПодп2) Тогда
			
			ПараметрыВыгрузки.Вставить("ПрПодп2", "4");
			ПараметрыВыгрузки.Вставить("ИННФЛПодп2",     СтруктураРеквизитовВыгрузки.ИННФЛПодп2);
			ПараметрыВыгрузки.Вставить("ДолжностьПодп2", СтруктураРеквизитовВыгрузки.ДолжностьПодп2);
			
			ПараметрыВыгрузки.Вставить("ФамилияПодп2",  СтруктураРеквизитовВыгрузки.ФамилияПодп2);
			ПараметрыВыгрузки.Вставить("ИмяПодп2",      СтруктураРеквизитовВыгрузки.ИмяПодп2);
			ПараметрыВыгрузки.Вставить("ОтчествоПодп2", СтруктураРеквизитовВыгрузки.ОтчествоПодп2);
			
			Если СтруктураРеквизитовВыгрузки.Свойство("НаимДовПодп2") Тогда
				
				ПараметрыВыгрузки.Вставить("НаимДовПодп2",  СтруктураРеквизитовВыгрузки.НаимДовПодп2);
				ПараметрыВыгрузки.Вставить("НомерДовПодп2", СтруктураРеквизитовВыгрузки.НомерДовПодп2);
				ПараметрыВыгрузки.Вставить("ДатаДовПодп2",  Формат(СтруктураРеквизитовВыгрузки.ДатаДовПодп2, "ДФ=дд.ММ.гггг"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовВыгрузки.ПрПодп1 = 3 Тогда
		
		ПараметрыВыгрузки.Вставить("НаимДовПодп1",		СтруктураРеквизитовВыгрузки.НаимДовПодп1);
		ПараметрыВыгрузки.Вставить("НомерДовПодп1",		СтруктураРеквизитовВыгрузки.НомерДовПодп1);
		ПараметрыВыгрузки.Вставить("ДатаДовПодп1",		Формат(СтруктураРеквизитовВыгрузки.ДатаДовПодп1, "ДФ=дд.ММ.гггг"));
		
	КонецЕсли;
															  	
	ПараметрыВыгрузки.Вставить("ИННФЛПодп1",     СтруктураРеквизитовВыгрузки.ИННФЛПодп1);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп1", СтруктураРеквизитовВыгрузки.ДолжностьПодп1);
															  	
	ПараметрыВыгрузки.Вставить("ФамилияПодп1",  СтруктураРеквизитовВыгрузки.ФамилияПодп1);
	ПараметрыВыгрузки.Вставить("ИмяПодп1",      СтруктураРеквизитовВыгрузки.ИмяПодп1);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп1", СтруктураРеквизитовВыгрузки.ОтчествоПодп1);
	
	Если НЕ СтруктураРеквизитовВыгрузки.ОтправленПочтой Тогда
		
		ПараметрыВыгрузки.Вставить("ПрКурьер",       Формат(СтруктураРеквизитовВыгрузки.ПрКурьер, ""));
		ПараметрыВыгрузки.Вставить("ИННФЛКурьер",    СтруктураРеквизитовВыгрузки.ИННФЛКурьер);
		
		ПараметрыВыгрузки.Вставить("ФамилияКурьер",  СтруктураРеквизитовВыгрузки.ФамилияКурьер);
		ПараметрыВыгрузки.Вставить("ИмяКурьер",      СтруктураРеквизитовВыгрузки.ИмяКурьер);
		ПараметрыВыгрузки.Вставить("ОтчествоКурьер", СтруктураРеквизитовВыгрузки.ОтчествоКурьер);
		
		Если СтруктураРеквизитовВыгрузки.ПрКурьер = 3 Тогда
			
			ПараметрыВыгрузки.Вставить("НаимДовКурьер",  СтруктураРеквизитовВыгрузки.НаимДовКурьер);
			ПараметрыВыгрузки.Вставить("НомерДовКурьер", СтруктураРеквизитовВыгрузки.НомерДовКурьер);
			ПараметрыВыгрузки.Вставить("ДатаДовКурьер",  Формат(СтруктураРеквизитовВыгрузки.ДатаДовКурьер, "ДФ=дд.ММ.гггг"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",             "ON_ZVLRPOK_2_430_14_05_06_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"ON_ZVLRPOK");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");

	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьСтруктуруПараметров2015Кв1(ДанныеДокумента, СтруктураРеквизитовВыгрузки)
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если СтруктураРеквизитовВыгрузки.Количество() = 0 Тогда
		Возврат ПараметрыВыгрузки;
	КонецЕсли;
		
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(ДанныеДокумента.РеквизитыРаздел1.Организация);

	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ДанныеДокумента.РеквизитыРаздел1.ДатаДокНП, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ДатаДокДата", ДанныеДокумента.РеквизитыРаздел1.Дата);
	
	Если СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
		ПараметрыВыгрузки.Вставить("КодНО", СтруктураРеквизитовВыгрузки.КодИФНС);
	КонецЕсли;
																	  	
	Если СтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ Тогда
		
		ПараметрыВыгрузки.Вставить("НаимОтпр", 		 СтруктураРеквизитовВыгрузки.НаимОтпр);
		ПараметрыВыгрузки.Вставить("ИННЮЛОтпр",		 СтруктураРеквизитовВыгрузки.ИННЮЛОтпр);
		ПараметрыВыгрузки.Вставить("КППОтпр",        СтруктураРеквизитовВыгрузки.КППОтпр);
		
	Иначе
		
		ПараметрыВыгрузки.Вставить("ИННФЛОтпр",      СтруктураРеквизитовВыгрузки.ИННФЛОтпр);	
		ПараметрыВыгрузки.Вставить("ФамилияФЛОтпр",  СтруктураРеквизитовВыгрузки.ФамилияФЛОтпр);
		ПараметрыВыгрузки.Вставить("ИмяФЛОтпр",      СтруктураРеквизитовВыгрузки.ИмяФЛОтпр);
		ПараметрыВыгрузки.Вставить("ОтчествоФЛОтпр", СтруктураРеквизитовВыгрузки.ОтчествоФЛОтпр);	
		
	КонецЕсли;

	ПараметрыВыгрузки.Вставить("ПрПодп", Формат(СтруктураРеквизитовВыгрузки.ПрПодп1, ""));
	
	Если СтруктураРеквизитовВыгрузки.ПрПодп1 = 3 Тогда

		ПараметрыВыгрузки.Вставить("НаимДовПодп",  СтруктураРеквизитовВыгрузки.НаимДовПодп1);
		ПараметрыВыгрузки.Вставить("НомерДовПодп", СтруктураРеквизитовВыгрузки.НомерДовПодп1);
		ПараметрыВыгрузки.Вставить("ДатаДовПодп",  Формат(СтруктураРеквизитовВыгрузки.ДатаДовПодп1, "ДФ=дд.ММ.гггг"));

	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИННФЛПодп",     СтруктураРеквизитовВыгрузки.ИННФЛПодп1);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп", СтруктураРеквизитовВыгрузки.ДолжностьПодп1);
	
	ПараметрыВыгрузки.Вставить("ФамилияПодп",  СтруктураРеквизитовВыгрузки.ФамилияПодп1);
	ПараметрыВыгрузки.Вставить("ИмяПодп",      СтруктураРеквизитовВыгрузки.ИмяПодп1);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп", СтруктураРеквизитовВыгрузки.ОтчествоПодп1);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",             "ON_ZVLRPOK_2_430_14_05_07_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "ON_ZVLRPOK");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");

	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл2015Кв1(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(Дата)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если Дата >= '20150101' Тогда
		Макет = Отчеты.РегламентированныйОтчетЗаявлениеОВвозеТоваров.ПолучитьМакет("СхемаВыгрузки507");
	Иначе
		Макет = Отчеты.РегламентированныйОтчетЗаявлениеОВвозеТоваров.ПолучитьМакет("СтруктураXML506");
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
				
				РодительскийУзел = ДеревоСтруктуры;
				
				Если Уровень <> 0 Тогда
					
					Для Инд = 1 По НомСтр - 2 Цикл
						
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						
						Если Узел <> Неопределено Тогда
							
							РодительскийУзел = Узел;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки, ДанныеДокумента)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр Из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки);
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СформироватьИдФайл(ПараметрыВыгрузки)
			
	ИдентОтпр = "";
	
	Если ПараметрыВыгрузки.Свойство("ИННФЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННФЛОтпр;
	ИначеЕсли ПараметрыВыгрузки.Свойство("ИННЮЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННЮЛОтпр + ПараметрыВыгрузки.КППОтпр;
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
				+ "_" + ПараметрыВыгрузки.КодИФНС
				+ "_" + ПараметрыВыгрузки.КодИФНС
				+ "_" + ИдентОтпр
				+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);			
			
КонецФункции

Функция СформироватьИдФайл2015Кв1(ПараметрыВыгрузки)
	
	ИдентОтпр = "";
	
	Если ПараметрыВыгрузки.Свойство("ИННФЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННФЛОтпр;
	ИначеЕсли ПараметрыВыгрузки.Свойство("ИННЮЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННЮЛОтпр + ПараметрыВыгрузки.КППОтпр;
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
				+ "_" + ПараметрыВыгрузки.КодНО
				+ "_" + ПараметрыВыгрузки.КодНО
				+ "_" + ИдентОтпр
				+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);			
			
КонецФункции

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел, ДанныеДокумента)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеДокумента, ПараметрыВыгрузки, Узел);
		
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			
			Если НЕ УсловиеВыполнено(ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				
				Узел.Строки.Удалить(ТекСтр);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр, ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеДокумента, ПараметрыВыгрузки, Узел)
	
	Если НЕ ПустаяСтрока(Узел.Раздел) Тогда
		
		Если ДанныеДокумента.Свойство(Узел.Раздел) Тогда
			ПоказателиРаздела = ДанныеДокумента[Узел.Раздел];
		Иначе
			ПоказателиРаздела = ДанныеДокумента.РеквизитыШапка;
		КонецЕсли;
				
		Для Каждого Эл Из ПоказателиРаздела Цикл
			
			Если ЗначениеЗаполнено(Эл.Значение) Тогда
				
				ПараметрыВыгрузки.Вставить(Эл.Ключ, Эл.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УсловиеВыполнено(ПараметрыВыгрузки, Условие)
	
	Попытка
		
		РезультатВычисленияВыражения = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме(СтрЗаменить(Условие, "&", "Параметры."), ПараметрыВыгрузки);
		
		Если ТипЗнч(РезультатВычисленияВыражения) <> Тип("Булево") Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось вычислить выражение-условие: %1!'"), Условие);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось вычислить выражение-условие: %1!'"), Условие);
			
		Сообщение.Сообщить();
		
		Возврат Истина;
		
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, ДанныеДокумента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти = Стр.Код Тогда
				
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, ДанныеДокумента);
				
				Если ДанныеДокумента.РеквизитыРаздел1.Дата >= '20150101' Тогда
					
					ЗаполнитьСодержательнуюЧасть2015Кв1(Стр, ДанныеДокумента);
					
				Иначе
					
					ЗаполнитьСодержательнуюЧасть(Стр, ДанныеДокумента);
					
				КонецЕсли;
				
			Иначе
				
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, ДанныеДокумента);
				
			КонецЕсли;
			
		Иначе
			
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
					
				Иначе
					
					Стр.Значение = "";
					
				КонецЕсли;
				
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
					
				КонецЕсли;
				
			Иначе
				
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
		
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
			
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0)
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
		
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Формирование XML: Длина значения показателя ""%1"" меньше минимально возможной (%2 < %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МинРазмерность);
			Сообщение.Сообщить();
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Формирование XML: Длина значения показателя ""%1"" больше максимально возможной (%2 > %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МаксРазмерность);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ДанныеДокумента)
	
	Раздел1        = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3        = ДанныеДокумента.РеквизитыРаздел3;
	ТаблицаРаздел1 = ДанныеДокумента.ТаблицаРаздел1;
	Приложение     = ДанныеДокумента.ТаблицаПриложение;
	Сведения       = ДанныеДокумента.ТаблицаВыпискиБанка;
	Зачет          = ДанныеДокумента.ТаблицаСведенияОЗачете;

	
	Узел_СвЗвл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвЗвл");
	ЗаполнитьДаннымиУзел(Раздел1, Узел_СвЗвл, ДанныеДокумента);
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "НомерДокНП", Формат(Раздел1.НомерЗаяв,"ЧН=; ЧГ=0"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ДатаДокНП", Формат(Раздел1.Дата, "ДФ=дд.ММ.гггг"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрЛизинг", ?(НЕ Раздел1.ПрЛизинг, "0", "1"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрДавСырья", ?(НЕ Раздел1.ПрДавСырья, "0", "1"));
	
	Узел_СвКонтракт1 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт1");
	
	Если Раздел1.ПродавецБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрБкнрПродР1", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПродР1", РазделитьИННКПП(Раздел1.ПродавецИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КПППродР1", РазделитьИННКПП(Раздел1.ПродавецИНН_КПП).КПП);
	
	КодКЛАДРПродР1 = КодКЛАДРПоАдресу(Раздел1.ПродавецАдрес);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КодКЛАДРПродР1", КодКЛАДРПродР1);
	
	Если Раздел1.ПокупательБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрБкнрПокР1", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПокР1", РазделитьИННКПП(Раздел1.ПокупательИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КПППокР1", РазделитьИННКПП(Раздел1.ПокупательИНН_КПП).КПП);
	
	КодКЛАДРПокР1 = КодКЛАДРПоАдресу(Раздел1.ПокупательАдрес);
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "КодКЛАДРПокР1", КодКЛАДРПокР1);
	
	Узел_СвКонтр1 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт1, "СвКонтр1");
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтр1, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(Узел_СвКонтр1, ШаблонУзелСвСпециф);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	УзелСвКонтрКомисс = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтрКомисс");
	Если Раздел1.КомиссионерБайконур Тогда	
		УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "ПрБкнрОрг", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "ИдНомОрг", РазделитьИННКПП(Раздел1.ИННОрг_1).ИНН);
	УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "КППОрг", РазделитьИННКПП(Раздел1.ИННОрг_1).КПП);
	
	КодКЛАДРОрг = КодКЛАДРПоАдресу(Раздел1.КомиссионерАдрес);
	УстановитьЗначениеЭлемента(УзелСвКонтрКомисс, "КодКЛАДРОрг", КодКЛАДРОрг);
	
	УзелСвКонтракт2 = ПолучитьПодчиненныйЭлемент(УзелСвКонтрКомисс, "СвКонтракт2");
	
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт2, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации07.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации07[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(УзелСвКонтракт2, ШаблонУзелСвСпециф);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	ШаблонУзелСвТовар = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвТовар");
	ЧислоВыгруженныхСтрок = 0;
	
	Для Каждого СтрТабл Из ТаблицаРаздел1 Цикл
		
		Если ЗначениеЗаполнено(СтрТабл.П000010000102) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			УзелСвТовар = СкопироватьУзел(Узел_СвЗвл, ШаблонУзелСвТовар);
			ВыгрузитьСтрокуМногострочнойЧасти(СтрТабл, УзелСвТовар);
			
			УстановитьЗначениеЭлемента(УзелСвТовар, "НомТовПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
			
			ИмяСлужебногоПоля = "П000010000122";
			
			Если НЕ ТаблицаРаздел1.Колонки.Найти(ИмяСлужебногоПоля) = Неопределено И СокрЛП(СтрТабл[ИмяСлужебногоПоля]) <> "" Тогда
				ИмяПоляЕдИзм = ИмяСлужебногоПоля;
			Иначе
				ИмяПоляЕдИзм = "П000010000104";
			КонецЕсли;
			
			УстановитьЗначениеЭлемента(УзелСвТовар, "ЕдИзмТов", СокрЛП(СтрТабл[ИмяПоляЕдИзм]));
			
			КодВалюты = СокрЛП(СтрТабл.П000010000107);
			БазаВалюты = 0;
			Если НЕ ТаблицаРаздел1.Колонки.Найти("П000010000125") = Неопределено Тогда
				БазаВалюты = СтрТабл.П000010000125;
			КонецЕсли;
			Если КодВалюты = "643" ИЛИ БазаВалюты = 0 Тогда
				БазаВалюты = 1;
			КонецЕсли;
			УстановитьЗначениеЭлемента(УзелСвТовар, "БазаВал", БазаВалюты);
			
			СтАкцизТверд = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтАкцизАдвал = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтНДС        = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			
			СтруктураСтавок = Новый Структура;
			СтруктураСтавок.Вставить("Ст16", СтАкцизТверд);
			СтруктураСтавок.Вставить("Ст17", СтАкцизАдвал);
			СтруктураСтавок.Вставить("Ст18", СтНДС);
			СтруктураСтавок.Вставить("Ст21", "");
			
			СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
			
			ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
			ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
			УстановитьЗначениеЭлемента(УзелСвТовар, "ПрОсвАкциз", ПрОсвАкциз);
			УстановитьЗначениеЭлемента(УзелСвТовар, "ПрОсвНДС",   ПрОсвНДС);
			УстановитьЗначениеЭлемента(УзелСвТовар, "ЕдИзмТовНБАкц", "");
			
			ЗаполненаТвердаяСтавкаАкцизов = (СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ (ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)) И СтАкцизТверд <> "0"));
			СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0.00", СтАкцизТверд);
			СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0.00", СтАкцизАдвал);
			СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "Без НДС" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0.00", СтНДС);
			
			Если ЗаполненаТвердаяСтавкаАкцизов Тогда
				УстановитьЗначениеЭлемента(УзелСвТовар, "СтАкцизТверд", ?(ПрОсвАкциз = 2, "-1", СтАкцизТверд));
			Иначе
				УстановитьЗначениеЭлемента(УзелСвТовар, "СтАкцизАдвал", ?(ПрОсвАкциз = 2, "-1", СтАкцизАдвал));
			КонецЕсли;
			УстановитьЗначениеЭлемента(УзелСвТовар, "СтНДС", ?(ПрОсвНДС = 2,   "-1", СтНДС));
			
			// Сведения о товарно-транспортных документах.
			ШаблонУзелСвТСД = ПолучитьПодчиненныйЭлемент(УзелСвТовар, "СвТСД");
						
			ТТДНомер = ВРЕГ(СокрЛП(СтрТабл.П000010000109));
			ТТДДата = СтрТабл.П000010000110;
				
			Если НЕ ЗначениеЗаполнено(ТТДНомер) И НЕ ЗначениеЗаполнено(ТТДДата) Тогда
				Продолжить;
			КонецЕсли;
				
			УзелСвТСД = СкопироватьУзел(УзелСвТовар, ШаблонУзелСвТСД);
			УстановитьЗначениеЭлемента(УзелСвТСД, "СерНомТСД", ТТДНомер);
			УстановитьЗначениеЭлемента(УзелСвТСД, "ДатаТСД", Формат(ТТДДата, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгрузка раздела 3.
	УзелСвКонтракт3 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, УзелСвКонтракт3, ДанныеДокумента);
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ТипПродР3", Раздел3.ТипПрод_3);
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ТипПокР3", Раздел3.ТипПок_3);
			
	Если НЕ Раздел3.ПродавецБайконур = Неопределено
	   И Раздел3.ПродавецБайконур Тогда
		УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ПрБкнрПродР3", "1");
	КонецЕсли;
	Если НЕ Раздел3.ПокупательБайконур = Неопределено
	   И Раздел3.ПокупательБайконур Тогда
		УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ПрБкнрПокР3", "1");
	КонецЕсли;
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ИдНомПродР3", РазделитьИННКПП(Раздел3.ПродавецИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КПППродР3", РазделитьИННКПП(Раздел3.ПродавецИНН_КПП).КПП);
	
	КодКЛАДРПродР3 = КодКЛАДРПоАдресу(Раздел3.ПродавецАдрес);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КодКЛАДРПродР3", КодКЛАДРПродР3);
	
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "ИдНомПокР3", РазделитьИННКПП(Раздел3.ПокупательИНН_КПП).ИНН);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КПППокР3", РазделитьИННКПП(Раздел3.ПокупательИНН_КПП).КПП);
	
	КодКЛАДРПокР3 = КодКЛАДРПоАдресу(Раздел3.ПокупательАдрес);
	УстановитьЗначениеЭлемента(УзелСвКонтракт3, "КодКЛАДРПокР3", КодКЛАДРПокР3);
	
	УзелСвКонтрР3 = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт3, "СвКонтрР3");
	ПрототипУзла_УзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтрР3, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификацииРаздел3.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификацииРаздел3[Сч - 1];
		
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_УзелСвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	// Выгружаем сведения о выписках раздела "Сведения"
	
	НомерБанкаПП = 0;
	ЧислоВыгруженныхСтрок = 0;
	ШаблонУзелСвПлДок = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвПлДок");
	
	Для Каждого ДанныеЛиста Из Сведения Цикл
		
		ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
		
		УзелСвПлДок = СкопироватьУзел(УзелРодитель, ШаблонУзелСвПлДок);
		ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелСвПлДок, ДанныеДокумента);
		
		ШаблонУзелСвВыпБанк = ПолучитьПодчиненныйЭлемент(УзелСвПлДок, "СвВыпБанк");
			
		УзелСвВыпБанк = СкопироватьУзел(УзелСвПлДок, ШаблонУзелСвВыпБанк);
		ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛиста, УзелСвВыпБанк);
		УстановитьЗначениеЭлемента(УзелСвВыпБанк, "НомВыпПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
		
		Если НЕ УзелПуст(УзелСвПлДок) Тогда
			НомерБанкаПП = НомерБанкаПП + 1;
			УстановитьЗначениеЭлемента(УзелСвПлДок, "НомБПП", Формат(НомерБанкаПП, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгружаем сведения раздела "Зачет"
	
	ЧислоВыгруженныхСтрок = 0;
	ШаблонУзелСвПлДок = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвПлДок");
	
	Для Каждого ДанныеЛиста Из Зачет Цикл
		
		ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
		
		УзелСвПлДок = СкопироватьУзел(УзелРодитель, ШаблонУзелСвПлДок);
		ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелСвПлДок, ДанныеДокумента);
		
		ШаблонУзелСвЗачет = ПолучитьПодчиненныйЭлемент(УзелСвПлДок, "СвЗачет");
		
		УзелСвЗачет = СкопироватьУзел(УзелСвПлДок, ШаблонУзелСвЗачет);
		ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛиста, УзелСвЗачет);
		УстановитьЗначениеЭлемента(УзелСвЗачет, "НомПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
		
		Если НЕ УзелПуст(УзелСвПлДок) Тогда
			НомерБанкаПП = НомерБанкаПП + 1;
			УстановитьЗначениеЭлемента(УзелСвПлДок, "НомБПП", Формат(НомерБанкаПП, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгружаем приложения.
	НомерПриложения = 0;
	
	ШаблонУзелСвКонтрПр = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвКонтрПр");
	
	Для Каждого ЛистПриложения Из Приложение Цикл
		
		УзелСвКонтрПр = СкопироватьУзел(УзелРодитель, ШаблонУзелСвКонтрПр);
		ЗаполнитьДаннымиУзел(ЛистПриложения, УзелСвКонтрПр, ДанныеДокумента);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ТипПродП", ЛистПриложения.ТипПрод_Пр);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ТипПокП", ЛистПриложения.ТипПок_Пр);
		
		Если НЕ ПустаяСтрока(ЛистПриложения.ПродавецБайконур) Тогда
			УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ПрБкнрПродП", "1");
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЛистПриложения.ПокупательБайконур) Тогда
			УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ПрБкнрПокП", "1");
		КонецЕсли;
		
		КодКЛАДРПродП = КодКЛАДРПоАдресу(ЛистПриложения.ПродавецАдрес);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КодКЛАДРПродП", КодКЛАДРПродП);
		
		КодКЛАДРПокП = КодКЛАДРПоАдресу(ЛистПриложения.ПокупательАдрес);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КодКЛАДРПокП", КодКЛАДРПокП);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ИдНомПродП", РазделитьИННКПП(ЛистПриложения.ПродавецИНН_КПП).ИНН);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КПППродП",   РазделитьИННКПП(ЛистПриложения.ПродавецИНН_КПП).КПП);
		
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "ИдНомПокП",  РазделитьИННКПП(ЛистПриложения.ПокупательИНН_КПП).ИНН);
		УстановитьЗначениеЭлемента(УзелСвКонтрПр, "КПППокП",    РазделитьИННКПП(ЛистПриложения.ПокупательИНН_КПП).КПП);
		
		УзелСвКонтрП = ПолучитьПодчиненныйЭлемент(УзелСвКонтрПр, "СвКонтрП");
		ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтрП, "СвСпециф");
		
		Для Сч = 1 По ДанныеДокумента.ТаблСпецПрил3.Количество() Цикл
		
			Строка = ДанныеДокумента.ТаблСпецПрил3[Сч - 1];
		
			УзелСвСпециф = СкопироватьУзел(УзелСвКонтрП, ШаблонУзелСвСпециф);
			УстановитьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
			УстановитьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
			УстановитьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
		КонецЦикла;
		
		Если НЕ УзелПуст(УзелСвКонтрПр) Тогда
			НомерПриложения = НомерПриложения + 1;
			УстановитьЗначениеЭлемента(УзелСвКонтрПр, "НомКонтрПП", Формат(НомерПриложения, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть2015Кв1(УзелРодитель, ДанныеДокумента)
	
	Раздел1        = ДанныеДокумента.РеквизитыРаздел1;
	Раздел3        = ДанныеДокумента.РеквизитыРаздел3;
	ТаблицаРаздел1 = ДанныеДокумента.ТаблицаРаздел1;
	Приложение     = ДанныеДокумента.ТаблицаПриложение;
	
	Узел_СвЗвл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвЗвл");
	ЗаполнитьДаннымиУзел(Раздел1, Узел_СвЗвл, ДанныеДокумента);
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "НомерДокНП", Формат(Раздел1.НомерЗаяв,"ЧН=; ЧГ=0"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ДатаДокНП", Формат(Раздел1.Дата, "ДФ=дд.ММ.гггг"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрЛизинг", ?(НЕ Раздел1.ПрЛизинг, "0", "1"));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПрДавСырья", ?(НЕ Раздел1.ПрДавСырья, "0", "1"));
	
	КодПричины = КодПричиныВозникновенияЗаявления(СокрЛП(Раздел1.ПричинаЗаявления));
	УстановитьЗначениеЭлемента(Узел_СвЗвл, "ПВДок", КодПричины);
	
	Если КодПричины = "4" ИЛИ КодПричины = "6" Тогда
		УстановитьЗначениеЭлемента(Узел_СвЗвл, "НомОтм", СокрЛП(Раздел1.НомерОтметки));
		УстановитьЗначениеЭлемента(Узел_СвЗвл, "ДатаОтм", Раздел1.ДатаОтметки);
	КонецЕсли;
	
	Узел_СвКонтракт1 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт1");
	
	Если Раздел1.ПродавецБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрБкнрПродР1", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПродР1", СокрЛП(Раздел1.ПродавецИНН_КПП));
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрПродФЛ", ?(Раздел1.ПрПродФЛ, "1", "0"));
		
	Если Раздел1.ПокупательБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ПрБкнрПокР1", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(Узел_СвКонтракт1, "ИдНомПокР1", СокрЛП(Раздел1.ПокупательИНН));
	
	Узел_СвКонтр1 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт1, "СвКонтр1");
	ПрототипУзла_СвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтр1, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации[Сч - 1];
		
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_СвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф",  СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	Узел_СвКонтрКомисс = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтрКомисс");
	Если Раздел1.КомиссионерБайконур Тогда	
		УстановитьЗначениеЭлемента(Узел_СвКонтрКомисс, "ПрБкнрОрг", "1");
	КонецЕсли;
	УстановитьЗначениеЭлемента(Узел_СвКонтрКомисс, "ИдНомОрг", СокрЛП(Раздел1.ИННОрг_1));
	
	Узел_СвКонтракт2 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрКомисс, "СвКонтракт2");
	
	ПрототипУзла_СвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт2, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификации07.Количество() Цикл
		
		Строка = ДанныеДокумента.ТЗСпецификации07[Сч - 1];
				
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_СвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф",  СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	ПрототипУзла_СвТовар = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвТовар");
	ЧислоВыгруженныхСтрок = 0;
	
	Для Каждого СтрТабл Из ТаблицаРаздел1 Цикл
		
		Если ЗначениеЗаполнено(СтрТабл.П000010000102) Тогда
			
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;
			Узел_СвТовар = НовыйУзелИзПрототипа(ПрототипУзла_СвТовар);
			ВыгрузитьСтрокуМногострочнойЧасти(СтрТабл, Узел_СвТовар);
			
			УстановитьЗначениеЭлемента(Узел_СвТовар, "НомТовПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
			
			ИмяСлужебногоПоля = "П000010000122";
			
			Если НЕ ТаблицаРаздел1.Колонки.Найти(ИмяСлужебногоПоля) = Неопределено И СокрЛП(СтрТабл[ИмяСлужебногоПоля]) <> "" Тогда
				ИмяПоляЕдИзм = ИмяСлужебногоПоля;
			Иначе
				ИмяПоляЕдИзм = "П000010000104";
			КонецЕсли;
			
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ЕдИзмТов", СокрЛП(СтрТабл[ИмяПоляЕдИзм]));
			
			КодВалюты = СокрЛП(СтрТабл.П000010000107);
			БазаВалюты = 0;
			Если НЕ ТаблицаРаздел1.Колонки.Найти("П000010000125") = Неопределено Тогда
				БазаВалюты = СтрТабл.П000010000125;
			КонецЕсли;
			Если КодВалюты = "643" ИЛИ БазаВалюты = 0 Тогда
				БазаВалюты = 1;
			КонецЕсли;
			УстановитьЗначениеЭлемента(Узел_СвТовар, "БазаВал", БазаВалюты);
			
			СтАкцизТверд = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000116, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтАкцизАдвал = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000117, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			СтНДС        = СтрЗаменить(СтрЗаменить(Формат(СтрТабл.П000010000118, "ЧРГ=%; ЧН="), ",", "."), "%", "");
			
			СтруктураСтавок = Новый Структура;
			СтруктураСтавок.Вставить("Ст16", СтАкцизТверд);
			СтруктураСтавок.Вставить("Ст17", СтАкцизАдвал);
			СтруктураСтавок.Вставить("Ст18", СтНДС);
			СтруктураСтавок.Вставить("Ст21", "");
			
			СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
			
			ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
			ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ПрОсвАкциз", ПрОсвАкциз);
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ПрОсвНДС",   ПрОсвНДС);
			УстановитьЗначениеЭлемента(Узел_СвТовар, "ЕдИзмТовНБАкц", "");
			
			ЗаполненаТвердаяСтавкаАкцизов = (СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ (ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)) И СтАкцизТверд <> "0"));
			СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0.00", СтАкцизТверд);
			СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0.00", СтАкцизАдвал);
			СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "Без НДС" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0.00", СтНДС);
			
			Если ЗаполненаТвердаяСтавкаАкцизов Тогда
				УстановитьЗначениеЭлемента(Узел_СвТовар, "СтАкцизТверд", ?(ПрОсвАкциз = 2, "-1", СтАкцизТверд));
			Иначе
				УстановитьЗначениеЭлемента(Узел_СвТовар, "СтАкцизАдвал", ?(ПрОсвАкциз = 2, "-1", СтАкцизАдвал));
			КонецЕсли;
			УстановитьЗначениеЭлемента(Узел_СвТовар, "СтНДС", ?(ПрОсвНДС = 2,   "-1", СтНДС));
			
			// Сведения о товарно-транспортных документах.
			ПрототипУзла_СвТСД = ПолучитьПодчиненныйЭлемент(Узел_СвТовар, "СвТСД");
						
			ТТДНомер = ВРЕГ(СокрЛП(СтрТабл.П000010000109));
			ТТДДата = СтрТабл.П000010000110;
				
			Если НЕ ЗначениеЗаполнено(ТТДНомер) И НЕ ЗначениеЗаполнено(ТТДДата) Тогда
				Продолжить;
			КонецЕсли;
				
			Узел_СвТСД = НовыйУзелИзПрототипа(ПрототипУзла_СвТСД);
			УстановитьЗначениеЭлемента(Узел_СвТСД, "СерНомТСД", ТТДНомер);
			УстановитьЗначениеЭлемента(Узел_СвТСД, "ДатаТСД", Формат(ТТДДата, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выгрузка раздела 3.
	Узел_СвКонтракт3 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, Узел_СвКонтракт3, ДанныеДокумента);
	
	Узел_СвКонтракт3 = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, Узел_СвКонтракт3, ДанныеДокумента);
		
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ТипПродР3", Раздел3.ТипПрод_3);
	
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ТипПокР3", Раздел3.ТипПок_3);
			
	Если НЕ Раздел3.ПродавецБайконур = Неопределено
	   И Раздел3.ПродавецБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ПрБкнрПродР3", "1");
	КонецЕсли;
	Если НЕ Раздел3.ПокупательБайконур = Неопределено
	   И Раздел3.ПокупательБайконур Тогда
		УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ПрБкнрПокР3", "1");
	КонецЕсли;
	
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ИдНомПродР3", СокрЛП(Раздел3.ПродавецИНН_КПП));
	УстановитьЗначениеЭлемента(Узел_СвКонтракт3, "ИдНомПокР3", СокрЛП(Раздел3.ПокупательИНН_КПП));
	
	Узел_СвКонтрР3 = ПолучитьПодчиненныйЭлемент(Узел_СвКонтракт3, "СвКонтрР3");
	ПрототипУзла_УзелСвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрР3, "СвСпециф");
	
	Для Сч = 1 По ДанныеДокумента.ТЗСпецификацииРаздел3.Количество() Цикл
						
		Строка = ДанныеДокумента.ТЗСпецификацииРаздел3[Сч - 1];
		
		Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_УзелСвСпециф);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
	КонецЦикла;
	
	Если КодПричины = "5" Тогда
		Узел_СвПредДок = ПолучитьПодчиненныйЭлемент(Узел_СвЗвл, "СвПредДок");
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "НомОтм", СокрЛП(Раздел1.НомерОтметки));
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "ДатаОтм", Раздел1.ДатаОтметки);
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "МесУвелЦены", "--" + Формат(Раздел1.ИзмениеЦеныМесяц, "ЧЦ=2; ЧН=; ЧВН="));
		УстановитьЗначениеЭлемента(Узел_СвПредДок, "ГодУвелЦены", Формат(Раздел1.ИзмениеЦеныГод, "ЧЦ=4; ЧН=; ЧВН=; ЧГ=0"));
	КонецЕсли;
	
	// Выгружаем приложения.
	НомерПриложения = 0;
	
	ПрототипУзла_СвКонтрПр = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвКонтрПр");
	
	Для Каждого ЛистПриложения Из Приложение Цикл
		
		Узел_СвКонтрПр = НовыйУзелИзПрототипа(ПрототипУзла_СвКонтрПр);
		ЗаполнитьДаннымиУзел(ЛистПриложения, Узел_СвКонтрПр, ДанныеДокумента);
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ТипПродП", ЛистПриложения.ТипПрод_Пр);
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ТипПокП", ЛистПриложения.ТипПок_Пр);
		
		Если НЕ ПустаяСтрока(ЛистПриложения.ПродавецБайконур) Тогда
			УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ПрБкнрПродП", "1");
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЛистПриложения.ПокупательБайконур) Тогда
			УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ПрБкнрПокП", "1");
		КонецЕсли;
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ИдНомПродП", СокрЛП(ЛистПриложения.ПродавецИНН_КПП));
		УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "ИдНомПокП",  СокрЛП(ЛистПриложения.ПокупательИНН_КПП));
		
		Узел_СвКонтрП = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрПр, "СвКонтрП");
		ПрототипУзла_СвСпециф = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрП, "СвСпециф");
		                                              		
		Для Сч = 1 По ДанныеДокумента.ТаблСпецПрил3.Количество() Цикл
		
			Строка = ДанныеДокумента.ТаблСпецПрил3[Сч - 1];
						
			Узел_СвСпециф = НовыйУзелИзПрототипа(ПрототипУзла_СвСпециф);
			УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомПСпециф", Сч);
			УстановитьЗначениеЭлемента(Узел_СвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
			УстановитьЗначениеЭлемента(Узел_СвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
		
		КонецЦикла;
		
		Если НЕ УзелПуст(Узел_СвКонтрПр) Тогда
			НомерПриложения = НомерПриложения + 1;
			УстановитьЗначениеЭлемента(Узел_СвКонтрПр, "НомКонтрПП", Формат(НомерПриложения, "ЧГ="));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АнализироватьПоляСтавки(СтруктураСтавок)

	СтруктураСтавокМодиф = Новый Структура;
	
	Если СтруктураСтавок.Ст18 = "Льгота"
	 ИЛИ СтруктураСтавок.Ст18 = "Без НДС" Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаНДС", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель1", 2);
	Иначе 	
		СтруктураСтавокМодиф.Вставить("СтавкаНДС", ?(СтруктураСтавок.Ст18 = "", 0, Число(СтруктураСтавок.Ст18)));
		СтруктураСтавокМодиф.Вставить("Переключатель1", 1);
	КонецЕсли;
	
	Если СтруктураСтавок.Ст16 = "" И СтруктураСтавок.Ст17 = "" Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза",0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	ИначеЕсли СтруктураСтавок.Ст16 = "Льгота" И Число(СтруктураСтавок.Ст17) = 0 Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 2);
	ИначеЕсли СтруктураСтавок.Ст16 = "-" И СтруктураСтавок.Ст17 = "-" Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		
		Если СтруктураСтавок.Ст21 = " " Тогда
			СтруктураСтавокМодиф.Вставить("Переключатель3", 4);
		Иначе
			СтруктураСтавокМодиф.Вставить("Переключатель3", 3);
		КонецЕсли;
		
	ИначеЕсли СтруктураСтавок.Ст16 = "0" И СтруктураСтавок.Ст17 = "0" Тогда
		
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 4);
	
	ИначеЕсли СтруктураСтавок.Ст17 = "Льгота" И СтруктураСтавок.Ст16 = "0" Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 2);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 2);
	ИначеЕсли ?(СтруктураСтавок.Ст17 = "", "0", СтруктураСтавок.Ст17) = "0"  Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", ?(СтруктураСтавок.Ст16 = "", "0", СтруктураСтавок.Ст16));
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	Иначе 
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", ?(СтруктураСтавок.Ст17 = "", "0", СтруктураСтавок.Ст17));
		СтруктураСтавокМодиф.Вставить("Переключатель2", 2);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	КонецЕсли;
	
	Возврат СтруктураСтавокМодиф

КонецФункции

Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[СтрЗаменить(Стр.Ключ, "_", "")], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[СтрЗаменить(Стр.Ключ, "_", "")]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

Функция РазделитьИННКПП(ИННКПП)
	
	ИНН = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, СтрНайти(ИННКПП, "/") - 1), ИННКПП));
	КПП = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, СтрНайти(ИННКПП, "/") + 1), ""));	
	
	Возврат Новый Структура("ИНН, КПП", ИНН, КПП);
	
КонецФункции

Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	
	Для Каждого Стр Из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;

КонецФункции

Функция КодКЛАДРПоАдресу(Адрес)
	
	КодКЛАДР = "";
	
	Если АдресЗаполненПоКладр(Адрес) Тогда
		
		СтруктураАдреса = Новый Структура;
		
		АдресВXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Адрес, , РегламентированнаяОтчетность.ВидКонтактнойИнформации("ЮрАдресКонтрагента"));
		
		СтруктураАдреса.Вставить("Адрес", АдресВXML);
		СтруктураАдреса.Вставить("ФорматАдреса", "КЛАДР");
		
		Адреса = Новый Массив;
		
		Адреса.Добавить(СтруктураАдреса);
		
		РезультатПроверки = АдресныйКлассификатор.ПроверитьАдреса(Адреса);
		
		Если РезультатПроверки.Количество() > 0
		   И РезультатПроверки[0].Варианты.Количество() > 0 Тогда
		   
		   	КодКЛАДР = Формат(РезультатПроверки[0].Варианты[0].КодКЛАДР, "ЧГ=0");
			
		КонецЕсли;
		
	КонецЕсли;
			
	Возврат КодКЛАДР;
	
КонецФункции

Функция АдресЗаполненПоКладр(Адрес)
	
	Результат = Адрес <> Неопределено
			  И (НЕ ПустаяСтрока(Адрес["Индекс"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Регион"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Район"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Город"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["НаселенныйПункт"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Улица"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Дом"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Корпус"])
				 ИЛИ НЕ ПустаяСтрока(Адрес["Квартира"]));
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0);
	
КонецФункции

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда
		
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		КонецЕсли;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
		
	ИначеЕсли Узел.Формат = "gYear" Тогда
		
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	
	Для Каждого Стр Из Узел.Строки Цикл
		
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		
		Если Стр.Код = КодЭлемента Тогда
			
			Возврат Стр;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	РодительСтрока = ?(Родитель = Неопределено, Узел.Владелец(), Родитель);
	
	СтрокиСТемЖеКодом = РодительСтрока.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = РодительСтрока.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= РодительСтрока.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = РодительСтрока.Строки.Добавить();
	Иначе
		НовыйУзел = РодительСтрока.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр Из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция УчетПеремещенияТоваровЭлектронноеПредставление(ДанныеДокумента)
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ПараметрыВыгрузки = УчетПеремещенияТоваровСформироватьСтруктуруПараметров(ДанныеДокумента);
	
	СтруктураВыгрузки = УчетПеремещенияТоваровИзвлечьСтруктуруXML();
	
	Если НЕ УчетПеремещенияТоваровПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, СтруктураВыгрузки) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	УчетПеремещенияТоваровЗаполнитьДанными(СтруктураВыгрузки, ПараметрыВыгрузки, ДанныеДокумента);
	
	Если НЕ УчетПеремещенияТоваровПроверитьДанные(СтруктураВыгрузки) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Текст = УчетПеремещенияТоваровВыгрузитьДеревоВXML(СтруктураВыгрузки, ПараметрыВыгрузки);
		
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ПараметрыВыгрузки.ИмяФайла;
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "UTF8";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция УчетПеремещенияТоваровИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = Отчеты.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.ПолучитьМакет("СхемаВыгрузкиXML2011Кв1");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Видимость = Макет.Область(НомСтр, 0, НомСтр, 0).Видимость;
			Если Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция УчетПеремещенияТоваровПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если НЕ ПараметрыВыгрузки.Свойство("НапрПеремещения") ИЛИ НЕ (ПараметрыВыгрузки.НапрПеремещения = "ИМ" ИЛИ ПараметрыВыгрузки.НапрПеремещения = "ЭК") Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не заданы основные реквизиты формы и направление перемещения товаров!'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;

	Если НЕ ПараметрыВыгрузки.Свойство("мАдресвФорматеДляВыгрузки") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.мАдресвФорматеДляВыгрузки) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не задан почтовый адрес оганизации!'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
									
	Если НЕ ПараметрыВыгрузки.Свойство("ОргИсполнитель") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.ОргИсполнитель) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической формы!'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.Свойство("ОргДолжностьИсп") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.ОргДолжностьИсп) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не указана должность лица, ответственного за предоставление статистической формы!'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.Свойство("ОргТелефонИсп") ИЛИ ПустаяСтрока(ПараметрыВыгрузки.ОргТелефонИсп) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не указан телефон должностного лица, ответственного за предоставление статистической формы!'");
		
		Сообщение.Сообщить();
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
		
	Возврат СтатусПроверки;
	
КонецФункции

Процедура УчетПеремещенияТоваровЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки, ДанныеДокумента)
	
	УчетПеремещенияТоваровОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеДокумента);
	
	УчетПеремещенияТоваровОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Процедура УчетПеремещенияТоваровОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		УчетПеремещенияТоваровОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0)
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлючРаздел(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УчетПеремещенияТоваровОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел, ДанныеДокумента)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеДокумента, ПараметрыВыгрузки, Узел);
		
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			
			Если НЕ УсловиеВыполнено(ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				
				Узел.Строки.Удалить(ТекСтр);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УчетПеремещенияТоваровОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр, ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Функция УчетПеремещенияТоваровПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = УчетПеремещенияТоваровПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция УчетПеремещенияТоваровОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Узел)
	
	ПервыйКлюч = УчетПеремещенияТоваровПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока ПараметрыВыгрузки.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			Если Стр.Многострочность Тогда 
				КоличествоСтрок = УчетПеремещенияТоваровОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					Если НомСтр = 1 Тогда
						НовыйУзел = Стр;
					Иначе	
						НовыйУзел = СкопироватьУзел(Узел, Стр);
					КонецЕсли; 
					УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				УчетПеремещенияТоваровЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция УчетПеремещенияТоваровЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда
		
		ДлинаЗначения = СтрДлина(Стр.Значение);
		
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			
			СтатусПроверки = Ложь;
									
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя ""%1"" меньше минимально возможной (%2 < %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МинРазмерность);
			
			Сообщение.Сообщить();

		КонецЕсли;

		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			
			СтатусПроверки = Ложь;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длина значения показателя ""%1"" больше максимально возможной (%2 > %3)'"), УчетПеремещенияТоваровПредставлениеПоказателя(Стр), ДлинаЗначения, Стр.МаксРазмерность);
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
				
	Возврат СтатусПроверки;
	
КонецФункции

Функция УчетПеремещенияТоваровПредставлениеПоказателя(Стр)
	
	Возврат ?(ПустаяСтрока(Стр.Представление), Стр.Код, Стр.Представление);
	
КонецФункции

Функция УчетПеремещенияТоваровПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		
		Если НЕ УчетПеремещенияТоваровЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		СтатусПроверки = (УчетПеремещенияТоваровПроверитьДанные(Стр) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция УчетПеремещенияТоваровВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	УчетПеремещенияТоваровЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция УчетПеремещенияТоваровСформироватьИмяФайла()
	
	Перем ПолученноеЗначение;
	
	ИмяФайлаXML = "Export_" + Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd_HHmmss") + ".xml";
	
	Возврат  ИмяФайлаXML;
	
КонецФункции

Функция УчетПеремещенияТоваровСформироватьСтруктуруПараметров(ДанныеДокумента)
	
	ПараметрыВыгрузки = Новый Структура;
	
	Для Каждого Реквизит Из ДанныеДокумента.РеквизитыШапка Цикл
		ПараметрыВыгрузки.Вставить(Реквизит.Ключ, Реквизит.Значение);
	КонецЦикла;
	
	ПараметрыВыгрузки.Вставить("СистемныйНомер", СокрЛП(ДанныеДокумента.РеквизитыШапка.СистемныйНомер));
	
	УникальныйИД = СокрЛП(ДанныеДокумента.РеквизитыШапка.ДокументСсылка.УникальныйИдентификатор());
	ПараметрыВыгрузки.Вставить("УникальныйИД", СокрЛП(УникальныйИД));

	ОтчетныйМесяц  = ДанныеДокумента.РеквизитыШапка.ОтчетныйМесяц;
									   
	ДатаЗаполнения = Формат(ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ1
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ2
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ3
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияГ4
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияМ1
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияМ2
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияД1
						  + ДанныеДокумента.РеквизитыШапка.ДатаЗаполненияД2, "ДФ=yyyy-MM-dd");
						  
	ПараметрыВыгрузки.Вставить("ОтчетныйМесяц", СокрЛП(ОтчетныйМесяц));
	ПараметрыВыгрузки.Вставить("ДатаЗаполнения", СокрЛП(ДатаЗаполнения));
	
	ПараметрыВыгрузки.Вставить("ВидТранспортаКод", СокрЛП(ДанныеДокумента.РеквизитыШапка.ВидТранспортаКод));
	ПараметрыВыгрузки.Вставить("ТоргующаяСтранаКод", СокрЛП(ДанныеДокумента.РеквизитыШапка.ТоргующаяСтранаКод));
	ПараметрыВыгрузки.Вставить("ТоргующаяСтранаНаименование", СокрЛП(ДанныеДокумента.РеквизитыШапка.ТоргующаяСтранаНаименование));
	
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргИсполнитель));
	ОргФИОИсп = РегламентированнаяОтчетность.РазложитьФИО(ДанныеДокумента.РеквизитыШапка.ОргИсполнитель);
	
	ПараметрыВыгрузки.Вставить("ОргФамилияИсп", СокрЛП(ОргФИОИсп.Фамилия));
	ПараметрыВыгрузки.Вставить("ОргИмяИсп", СокрЛП(ОргФИОИсп.Имя));
	ПараметрыВыгрузки.Вставить("ОргОтчествоИсп", СокрЛП(ОргФИОИсп.Отчество));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргТелефонИсп));
	ПараметрыВыгрузки.Вставить("ОргАдресЭлПочты", СокрЛП(ДанныеДокумента.РеквизитыШапка.ОргАдресЭлПочты));
	
	Если ДанныеДокумента.РеквизитыШапка.Свойство("ОтвЛицоФинУрПасДатаДок") Тогда
		ПараметрыВыгрузки.Вставить("ОтвЛицоФинУрПасДатаДокумента", Формат(ДанныеДокумента.РеквизитыШапка.ОтвЛицоФинУрПасДатаДок, "ДФ=yyyy-MM-dd"));
	Иначе
		ПараметрыВыгрузки.Вставить("ОтвЛицоФинУрПасДатаДокумента", Формат('00010101', "ДФ=yyyy-MM-dd"));
	КонецЕсли;
	 
	ПараметрыВыгрузки.Вставить("ИмяФайла", УчетПеремещенияТоваровСформироватьИмяФайла());
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Documents");
	
	Если НЕ ДанныеДокумента.ТаблицаТоварыДляВыгрузки = Неопределено Тогда
		
		Для НСтр = 1 По ДанныеДокумента.ТаблицаТоварыДляВыгрузки.Количество() Цикл
			
			ТекСтрокаТаблицы = ДанныеДокумента.ТаблицаТоварыДляВыгрузки[НСтр - 1];
			
			НСтрСтр = Формат(НСтр, "ЧГ=0");
			
			Для Каждого Колонка Из ДанныеДокумента.ТаблицаТоварыДляВыгрузки.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				
				ИмяПоказателя = ИмяКолонки + "_" + НСтрСтр;
				
				ЗначениеПоказателя = ТекСтрокаТаблицы[ИмяКолонки];
				
				ПараметрыВыгрузки.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ДанныеДокумента.ТаблицаДокументы = Неопределено Тогда
		
		Для НСтр = 1 По ДанныеДокумента.ТаблицаДокументы.Количество() Цикл
			
			ТекСтрокаТаблицы = ДанныеДокумента.ТаблицаДокументы[НСтр - 1];
			
			НСтрСтр = Формат(НСтр, "ЧГ=0");
			
			Для Каждого Колонка Из ДанныеДокумента.ТаблицаДокументы.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				
				ИмяПоказателя = ИмяКолонки + "_" + НСтрСтр;
				
				ЗначениеПоказателя = ТекСтрокаТаблицы[ИмяКолонки];
				
				ПараметрыВыгрузки.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				
				Если ИмяКолонки = "НаименованиеДокумента" Тогда
					
					НовоеИмяПоказателя = "ДокВыбор_" + НСтрСтр;
					
					ПараметрыВыгрузки.Вставить(НовоеИмяПоказателя, ЗначениеПоказателя);
					
				ИначеЕсли ИмяКолонки = "НомерДокумента" Тогда
					
					НовоеИмяПоказателя = "ДокНомер_" + НСтрСтр;
					
					ПараметрыВыгрузки.Вставить(НовоеИмяПоказателя, ЗначениеПоказателя);
					
				ИначеЕсли ИмяКолонки = "ДатаДокумента" Тогда
					
					НовоеИмяПоказателя = "ДокДатаФормат_" + НСтрСтр;
					
					ПараметрыВыгрузки.Вставить(НовоеИмяПоказателя, Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd"));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки;
		
КонецФункции

#КонецОбласти
// -- НЕ УТ

#Область ФормированиеГиперссылкиВЖурналеЗакупок 

Функция ТекстЗапросаЗаявленияОВвозеТоваров(Организация = Неопределено) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ДокументПоступлениеТоваровУслуг.Номер КАК СТРОКА(12)) КАК Номер,
	|	ДокументПоступлениеТоваровУслуг.Дата КАК Дата,
	|	ДокументПоступлениеТоваровУслуг.Валюта КАК Валюта,
	|	ДокументПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ДокументПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	ДокументПоступлениеТоваровУслуг.Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДокументПоступлениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе.Остатки КАК ТоварыКОформлениюЗаявленийОВвозеОстатки
	|		ПО ДокументПоступлениеТоваровУслуг.Ссылка = ТоварыКОформлениюЗаявленийОВвозеОстатки.ДокументПоступления
	|ГДЕ &УсловиеОтбора
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументПоступлениеТоваровУслуг.Ссылка,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.Валюта,
	|	ДокументПоступлениеТоваровУслуг.Контрагент,
	|	ДокументПоступлениеТоваровУслуг.СуммаДокумента,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ВЫРАЗИТЬ(ДокументПоступлениеТоваровУслуг.Номер КАК СТРОКА(12))";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОтбора = "ДокументПоступлениеТоваровУслуг.Организация = &Организация";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ГДЕ &УсловиеОтбора", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ЕстьПравоНаЧтениеПоступленийТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваровУслуг);
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОформлениюЗаявленийОВвозе)
		И ЕстьПравоНаЧтениеПоступленийТоваровУслуг) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Организация = Параметры.Организация;
	ТекстЗапроса = ТекстЗапросаЗаявленияОВвозеТоваров(Организация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	ТекстГиперссылки = НСтр("ru = 'Заявления о ввозе'");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыЗаявленияОВвозеТоваров());
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыЗаявленияОВвозеТоваров());
	КонецЕсли;
	
КонецФункции

Функция ИмяФормыЗаявленияОВвозеТоваров() Экспорт
	
	Возврат "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаРабочееМесто";
	
КонецФункции

#КонецОбласти

#Область Прочее 

Функция ПолучитьДокФизЛица(ФизЛицо, ДатаЗначения) Экспорт
	
	Удостоверения = РегистрыСведений.ДокументыФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Удостоверения.Количество() > 0 Тогда
		Возврат Удостоверения[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьЗаданиеКФормированиюЗаписейКнигиПокупокПродаж(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Операция.ДатаПодтвержденияОплаты, МЕСЯЦ) КАК Месяц,
	|	Операция.Организация КАК Организация,
	|	Операция.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.ОплатаПодтверждена";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСПредъявленный";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	&Ссылка                                КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Операция.Дата                          КАК Период,
	|	Операция.Организация                   КАК Организация,
	|	&Ссылка                                КАК СчетФактура,
	|	Операция.Контрагент                    КАК Поставщик,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности КАК ВидЦенности,
	|	Строки.СтавкаНДС                       КАК СтавкаНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	ИНАЧЕ
	|		ТаблицаАналитикУчетаПартий.НалогообложениеНДС
	|	КОНЕЦ                                  КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                           КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                           КАК РеализацияЭкспорт,
	|	0                                      КАК СуммаБезНДС,
	|	СУММА(Строки.СуммаНДС)                 КАК НДС,
	|	НЕОПРЕДЕЛЕНО                           КАК Событие,
	|	НЕОПРЕДЕЛЕНО                           КАК КорВидДеятельностиНДС,
	|	ЛОЖЬ                                   КАК РегламентнаяОперация,
	|	""""                                   КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|		И Строки.НалоговаяБазаНДС <> 0
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= Строки.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Строки.СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Ссылка                                КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Операция.Дата                          КАК Период,
	|	Операция.Организация                   КАК Организация,
	|	&Ссылка                                КАК СчетФактура,
	|	Операция.Контрагент                    КАК Поставщик,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности КАК ВидЦенности,
	|	Строки.СтавкаНДС                       КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                           КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                           КАК РеализацияЭкспорт,
	|	0                                      КАК СуммаБезНДС,
	|	СУММА(Строки.СуммаНДС)                 КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВключениеНДСВСтоимость) КАК Событие,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС КАК КорВидДеятельностиНДС,
	|	ЛОЖЬ                                   КАК РегламентнаяОперация,
	|	Строки.ИдентификаторСтроки             КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|		И Строки.НалоговаяБазаНДС <> 0
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= Строки.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Строки.СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС,
	|	Строки.ИдентификаторСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьФИОФизЛица(ФизЛицо, НаДату = Неопределено)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ФизЛицо);
	Иначе
		ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса()), Новый Структура("ФизическоеЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеФЛ[0]);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСписокВыбораВидовТранспорта(СписокЗначений)

	СписокЗначений.Очистить();
	СписокЗначений.Добавить("10", НСтр("ru = '10 - Морской/речной транспорт'"));
	СписокЗначений.Добавить("20", НСтр("ru = '20 - Железнодорожный транспорт'"));
	СписокЗначений.Добавить("30", НСтр("ru = '30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32'"));
	СписокЗначений.Добавить("31", НСтр("ru = '31 - Состав транспортных средств (тягач с полуприцепом или прицепом)'"));
	СписокЗначений.Добавить("32", НСтр("ru = '32 - Состав транспортных средств (тягач с полуприцепом(-ами) или прицепом(-ами))'"));
	СписокЗначений.Добавить("40", НСтр("ru = '40 - Воздушный транспорт'"));
	СписокЗначений.Добавить("50", НСтр("ru = '50 - Почтовое отправление'"));
	СписокЗначений.Добавить("71", НСтр("ru = '71 - Трубопроводный транспорт'"));
	СписокЗначений.Добавить("72", НСтр("ru = '72 - Линии электропередачи'"));
	СписокЗначений.Добавить("80", НСтр("ru = '80 - Внутренний водный транспорт'"));
	СписокЗначений.Добавить("90", НСтр("ru = '90 - Транспортное средство, перемещающееся в качестве товара своим ходом'"));
	СписокЗначений.Добавить("99", НСтр("ru = '99 - Прочее'"));
	
КонецПроцедуры

Функция ОпределитьВидТранспортаПоСтатистике(ДокументПоступления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата КАК Период,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Контрагент = &Контрагент
		|	И ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата,
		|	2
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата,
		|	3
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&АвтодорожныйТранспорт,
		|	NULL,
		|	4
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подзапрос.ВидТранспорта КАК ВидТранспорта
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Документы.ВидТранспорта КАК ВидТранспорта,
		|		СУММА(1) КАК ЧастотаИспользования,
		|		ВТ_Документы.Приоритет КАК Приоритет
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_Документы.ВидТранспорта,
		|		ВТ_Документы.Приоритет) КАК Подзапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подзапрос.Приоритет,
		|	Подзапрос.ЧастотаИспользования УБЫВ";
		
	Запрос.УстановитьПараметр("Контрагент", ДокументПоступления.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДокументПоступления.Организация);
	Запрос.УстановитьПараметр("АвтодорожныйТранспорт", 
			НСтр("ru = '30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ВидТранспорта;
	
КонецФункции

Функция ТекстЗапросаТоварыКОформлениюЗаявленийОВвозе()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Склад КАК Склад,
	|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Товары.НомерГТД КАК НомерТД,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура        КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика      КАК Характеристика,
	|	ТоварыКОформлению.Серия               КАК Серия,
	|	ТоварыКОформлению.Склад               КАК Склад,
	|	ТоварыКОформлению.КОформлениюОстаток  КАК КОформлению
	|ПОМЕСТИТЬ ОстаткиКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе.Остатки(, ДокументПоступления = &ДокументПоступления) КАК ТоварыКОформлению
	|ГДЕ
	|	ТоварыКОформлению.КОформлениюОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.НомерСтроки,
	|	ТоварыКОформлению.ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура,
	|	СпрНоменклатура.ЕдиницаИзмерения,
	|	СпрНоменклатура.КодТНВЭД,
	|	СпрНоменклатура.ТипНоменклатуры,
	|	СпрНоменклатура.СтавкаНДС,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Склад,
	|	ТоварыКОформлению.ФактурнаяСтоимость,
	|	ТоварыКОформлению.КОформлению
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе КАК ТоварыКОформлению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТоварыКОформлению.Номенклатура = СпрНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиКОформлению КАК ОстаткиКОформлению
	|	ПО
	|		ТоварыКОформлению.ДокументПоступления = ОстаткиКОформлению.ДокументПоступления
	|		И ТоварыКОформлению.Номенклатура = ОстаткиКОформлению.Номенклатура
	|		И ТоварыКОформлению.Характеристика = ОстаткиКОформлению.Характеристика
	|		И ТоварыКОформлению.Серия = ОстаткиКОформлению.Серия
	|		И ТоварыКОформлению.Склад = ОстаткиКОформлению.Склад
	|ГДЕ
	|	ТоварыКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыКОформлению.ДокументПоступления = &ДокументПоступления
	|	И (НЕ &ЗаполнениеНаОсновании 
	|		ИЛИ НЕ ОстаткиКОформлению.ДокументПоступления ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура        КАК Номенклатура,
	|	ТоварыКОформлению.КодТНВЭД            КАК КодТНВЭД,
	|	ТоварыКОформлению.Характеристика      КАК Характеристика,
	|	ТоварыКОформлению.Серия               КАК Серия,
	|	ТоварыКОформлению.Склад               КАК Склад,
	|	ТоварыКОформлению.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ТоварыКОформлению.КОформлению         КАК Количество,
	|	ТоварыКОформлению.ФактурнаяСтоимость  КАК ФактурнаяСтоимость,
	|	ТоварыКОформлению.ФактурнаяСтоимость * КурсыВалют.Курс / КурсыВалют.Кратность КАК НалоговаяБазаНДС,
	|	ТоварыКОформлению.СтавкаНДС           КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА НЕ КурсВалютыДолларСША.Курс ЕСТЬ NULL 
	|			ТОГДА ТоварыКОформлению.ФактурнаяСтоимость * 
	|						(КурсыВалют.Курс / КурсыВалют.Кратность) / (КурсВалютыДолларСША.Курс / КурсВалютыДолларСША.Кратность)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатСтоимостьДолларыСША,
	|	&ТекстЗапросаВес * ТоварыКОформлению.КОформлению КАК ВесНеттоКг,
	|	ТоварыКОформлению.ФактурнаяСтоимость * КурсыВалют.Курс / КурсыВалют.Кратность КАК НалоговаяБазаАкцизы,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.СтранаПроисхождения, Операция.Контрагент.СтранаРегистрации) КАК СтранаПроисхождения,
	|	ПоступлениеТоваровУслугТовары.НомерТД КАК НомерТД,
	|
	|	Операция.Валюта                  КАК Валюта,
	|	Операция.НомерВходящегоДокумента КАК СерияНомерТСД,
	|	Операция.ДатаВходящегоДокумента  КАК ДатаТСД,
	|	Операция.Договор                 КАК Договор,
	|	Операция.ЗакупкаПодДеятельность  КАК ЗакупкаПодДеятельность,
	|
	|	ПоступлениеТоваровУслугТовары.НоменклатураПоставщика     КАК НоменклатураПоставщика,
	|	ПоступлениеТоваровУслугТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ВидЗапасов                 КАК ВидЗапасов,
	|	ПоступлениеТоваровУслугТовары.Подразделение              КАК Подразделение,
	|	ПоступлениеТоваровУслугТовары.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|
	|	&ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	&ВидТранспорта      КАК ВидТранспорта
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Операция
	|		ПО ТоварыКОформлению.ДокументПоступления = Операция.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ПоступлениеТоваровУслугТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПринятияНаУчет, ) КАК КурсыВалют
	|			ПО ПоступлениеТоваровУслугТовары.Ссылка.Валюта = КурсыВалют.Валюта
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПринятияНаУчет, Валюта = &ДолларСША) КАК КурсВалютыДолларСША
	|			ПО (ИСТИНА)
	|		ПО ТоварыКОформлению.ДокументПоступления = ПоступлениеТоваровУслугТовары.Ссылка
	|			И ТоварыКОформлению.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|			И ТоварыКОформлению.Характеристика = ПоступлениеТоваровУслугТовары.Характеристика
	|			И ТоварыКОформлению.Серия = ПоступлениеТоваровУслугТовары.Серия
	|			И ТоварыКОформлению.Склад = ПоступлениеТоваровУслугТовары.Склад
	|			И ТоварыКОформлению.НомерСтроки = ПоступлениеТоваровУслугТовары.НомерСтроки
	|ГДЕ
	|	ТоварыКОформлению.ДокументПоступления = &ДокументПоступления
	|	И ТоварыКОформлению.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВес", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	Возврат ТекстЗапроса;
	
КонецФункции

// 4D:ERP для Беларуси, Дмитрий, 10.08.2016 18:13:01 
// ЭСЧФ
// {
// Возвращает текст запроса для расчета необходимости ввода счета-фактуры выданного.
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДляРасчетаНеобходимостиСчетаФактуры() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка      КАК Основание,
	|	ДанныеДокумента.Дата        КАК ДатаДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент  КАК Контрагент,
	|	ДанныеДокумента.Валюта      КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетовФактуры.СчетФактура ЕСТЬ NULL 
	|				И ДанныеДокумента.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Требуется
	|//ОператорПОМЕСТИТЬ
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетовФактуры КАК ТаблицаСчетовФактуры
	|		ПО ДанныеДокумента.Ссылка = ТаблицаСчетовФактуры.Основание
	|			И ДанныеДокумента.Организация = ТаблицаСчетовФактуры.Организация
	|			И ДанныеДокумента.Контрагент = ТаблицаСчетовФактуры.Контрагент
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивОснований)";
	
	Возврат ТекстЗапроса;
	
КонецФункции
// }
// 4D

#КонецОбласти

// 4D:ERP для Беларуси, ВладимирР, 07.04.2017 15:59:58
// Выгрузка заявления о ввозе товаров из ЕАЭС, №10718
// {

#Область АРМ_Плательщик

Функция ВыгрузитьЗаявлениеОВвозеТоваров_Локализация(Объект, УникальныйИдентификатор = Неопределено, ТолькоПроверка = Ложь) Экспорт
	Результат = Новый Массив;
	
	Если Объект.Ссылка.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Документ не записан. Выгрузка прервана!'");
		Сообщение.Сообщить();
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстФайла = "";
	ИмяФайла = "";
	
	ЗамечанияОбОшибках = Новый Массив;
	ЗамечанияОбОшибках = ПроверитьИЗаполнитьШапкуДокумента(Объект.Ссылка, ТекстФайла, ИмяФайла, ЗамечанияОбОшибках);
	ЗамечанияОбОшибках = ПроверитьИЗаполнитьТабЧастьДокумента(Объект.Ссылка, ТекстФайла, ЗамечанияОбОшибках);
	ИтоговыйТекст = "<?xml version=" + """" + "1.0" + """" + " encoding= " + """" + "UTF-8" + """" + "?>";
	ИтоговыйТекст = ИтоговыйТекст + Символы.ПС + ТекстФайла + "</registry_document>";
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + ИмяФайла;
	
	СохраняемыйФайл = Новый ТекстовыйДокумент;
	СохраняемыйФайл.УстановитьТекст(ИтоговыйТекст);
	СохраняемыйФайл.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	Если УникальныйИдентификатор <> Неопределено Тогда
		СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
	Иначе
		СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
	КонецЕсли;
	
	СтруктураВыгрузки = Новый Структура;
	СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
	СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ИмяВременногоФайла);
	СтруктураВыгрузки.Вставить("ЗамечанияОбОшибках", ЗамечанияОбОшибках);
	
	Результат.Добавить(СтруктураВыгрузки);
	
	Возврат Результат;
КонецФункции

Процедура ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, Знач Реквизит, ТекстЗамечания)
	Если Не ЗначениеЗаполнено(Реквизит) Тогда
		ЗамечанияОбОшибках.Добавить(ТекстЗамечания);
	КонецЕсли;
КонецПроцедуры

Функция АдресКонтрагента(ТекущийКонтрагент)
	Справочник = ?(ТипЗнч(ТекущийКонтрагент) = Тип("СправочникСсылка.Организации"), "Организации", "Контрагенты");
	Вид = ?(ТипЗнч(ТекущийКонтрагент) = Тип("СправочникСсылка.Организации"), Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ТекущийКонтрагент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Вид);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
	|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Контрагенты.КонтактнаяИнформация", "Справочник." + Справочник + ".КонтактнаяИнформация");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Адрес = Выборка.Представление;
	Иначе
		Адрес = "";
	КонецЕсли;
	
	Возврат Адрес;
КонецФункции

Функция ЗаменитьНедопустимыйСимволXML(Знач Стр, ПустаяЗамена = Ложь)
	//"&amp;quot;"
	//©, ®, ™, ?, Ј, „, “, «, », >, <, ≥, ≤, ≈, ≠, ≡, §, &, ∞
	
	К = 1;
	Пока К <= СтрДлина(Стр) Цикл
		ТекущийСимвол = Сред(Стр, К, 1);
		
		Если ТекущийСимвол = """" Или ТекущийСимвол = "„" Или ТекущийСимвол = "“" Или ТекущийСимвол = "«" Или ТекущийСимвол = "»" Тогда
			Замена = "_amp;quot;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "©" Тогда
			Замена = "_amp;copy;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "®" Тогда
			Замена = "_amp;reg;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "™" Тогда
			Замена = "_amp;trade;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "?" Тогда
			Замена = "_amp;euro;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "Ј" Тогда
			Замена = "_amp;pound;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = ">" Тогда
			Замена = "_amp;gt;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "<" Тогда
			Замена = "_amp;lt;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "≥" Тогда
			Замена = "_amp;ge;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "≤" Тогда
			Замена = "_amp;le;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "≈" Тогда
			Замена = "_amp;asymp;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "≠" Тогда
			Замена = "_amp;ne;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "≡" Тогда
			Замена = "_amp;equiv;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "§" Тогда
			Замена = "_amp;sect;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "&" Тогда
			Замена = "_amp;amp;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		ИначеЕсли ТекущийСимвол = "∞" Тогда
			Замена = "_amp;infin;";
			Стр = СтрЗаменить(Стр, ТекущийСимвол, ?(ПустаяЗамена, "", Замена));
			К = К + СтрДлина(Замена);
		Иначе
			К = К + 1;
		КонецЕсли;
	КонецЦикла;
	Стр = СтрЗаменить(Стр, "_amp;", "&amp;");
	
	Возврат Стр;
КонецФункции

Функция ОбработатьКавычки(Знач СтрокаСКавычками, ЧислоСимволов)
	СтрокаСКавычками = СокрЛП(Строка(СтрокаСКавычками));
	СтрокаСКавычками = Лев(СтрокаСКавычками, ЧислоСимволов);
	
	Возврат ЗаменитьНедопустимыйСимволXML(СтрокаСКавычками);
КонецФункции

Функция НомерДоговораИзНаименования(Знач Наименование)
	Номер = "";
	СтрНаименование = СокрЛП(Наименование);
	СчетчикСимволов = 0;
	
	Если Не ПустаяСтрока(СтрНаименование) Тогда
		Сч = 0;
		
		Для А = 1 По СтрДлина(СтрНаименование) Цикл
			КодСимвола = КодСимвола(Сред(СтрНаименование, А, 1));
			
			Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
				Номер = Номер + Сред(СтрНаименование, А, 1);
				
				Для Сч = А + 1 По СтрДлина(СтрНаименование) Цикл
					КодСимвола = КодСимвола(Сред(СтрНаименование, Сч, 1));
					
					Если КодСимвола >=48 И КодСимвола <= 57 Тогда
						Номер = Номер + Сред(СтрНаименование, Сч, 1);
					Иначе
						Если СчетчикСимволов = 0 Тогда
							СчетчикСимволов = 1;
							Номер = Номер + Сред(СтрНаименование, Сч, 1);
						Иначе
							Возврат Номер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Возврат ?(СокрЛП(Номер) = "", "", СокрЛП(Номер));
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция СформироватьЗапросПоШапкеДокумента(Ссылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяСсылкаКонтрагенты", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Ссылка КАК Ссылка,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.РольПродавца КАК РольПродавца,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Продавец КАК Продавец,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.РольПокупателя КАК РольПокупателя,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Покупатель КАК Покупатель,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерДоговора КАК НомерДоговора,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.ДатаДоговора КАК ДатаДоговора,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.НомерСпецификации КАК НомерСпецификации,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.ДатаСпецификации КАК ДатаСпецификации,
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.ТипГражданскоПравовыхОтношений КАК ТипГражданскоПравовыхОтношений
	|ПОМЕСТИТЬ ТЗУчастникиСделки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.УчастникиСделки КАК ЗаявлениеОВвозеТоваровУчастникиСделки
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровУчастникиСделки.Ссылка.Проведен
	|	И ЗаявлениеОВвозеТоваровУчастникиСделки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровСпецификации.Ссылка КАК Ссылка,
	|	ЗаявлениеОВвозеТоваровСпецификации.НомерСпецификации КАК НомерСпецификации,
	|	ЗаявлениеОВвозеТоваровСпецификации.ДатаСпецификации КАК ДатаСпецификации
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Спецификации КАК ЗаявлениеОВвозеТоваровСпецификации
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровСпецификации.Ссылка.Проведен
	|	И ЗаявлениеОВвозеТоваровСпецификации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявлениеНДС.Ссылка КАК Ссылка,
	|	ЗаявлениеНДС.Организация КАК Организация,
	|	ЗаявлениеНДС.Номер КАК НомерДокументаЗаявления,
	|	ЗаявлениеНДС.Дата КАК ДатаДокументаЗаявления,
	|	ЗаявлениеНДС.Организация КАК Покупатель,
	|	ЗаявлениеНДС.Контрагент КАК Продавец,
	|	ЗаявлениеНДС.Договор.Дата КАК ДоговорКонтрагентаДата,
	|	ЗаявлениеНДС.Договор.Номер КАК ДоговорКонтрагентаНомер,
	|	0 КАК Лизинг,
	|	0 КАК Давальческое,
	|	0 КАК ЛьготаНДС,
	|	ТЗУчастникиСделки.Продавец КАК Посредник06,
	|	ТЗУчастникиСделки.НомерДоговора КАК НомерДоговора07,
	|	ТЗУчастникиСделки.ДатаДоговора КАК ДатаДоговора07,
	|	ТЗУчастникиСделки.НомерСпецификации КАК НомерСпецификации07,
	|	ТЗУчастникиСделки.ДатаСпецификации КАК ДатаСпецификации07,
	|	ТЗУчастникиСделки.Продавец КАК Продавец08,
	|	ТЗУчастникиСделки.Покупатель КАК Покупатель09,
	|	ТЗУчастникиСделки.НомерДоговора КАК НомерДоговора12,
	|	ТЗУчастникиСделки.ДатаДоговора КАК ДатаДоговора12,
	|	ТЗУчастникиСделки.НомерСпецификации КАК НомерСпецификации12,
	|	ТЗУчастникиСделки.ДатаСпецификации КАК ДатаСпецификации12,
	|	ВЫБОР
	|		КОГДА ЗаявлениеНДС.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)
	|				ИЛИ ЗаявлениеНДС.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Импорт)
	|				ИЛИ ЗаявлениеНДС.Договор.ТипДоговора = ""Продавец""
	|			ТОГДА 6
	|		КОГДА ЗаявлениеНДС.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомиссионером)
	|				ИЛИ ЗаявлениеНДС.Договор.ТипДоговора = ""Комитент""
	|			ТОГДА 0
	|		КОГДА ЗаявлениеНДС.Договор.ТипДоговора = ""Доверитель""
	|			ТОГДА 1
	|		КОГДА ЗаявлениеНДС.Договор.ТипДоговора = ""Принципал""
	|			ТОГДА 2
	|	КОНЕЦ КАК ВидПродавца,
	|	ВЫБОР
	|		КОГДА ЗаявлениеНДС.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)
	|				ИЛИ ЗаявлениеНДС.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Импорт)
	|				ИЛИ ЗаявлениеНДС.Договор.ТипДоговора = ""Покупатель""
	|			ТОГДА 7
	|		КОГДА ЗаявлениеНДС.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомиссионером)
	|				ИЛИ ЗаявлениеНДС.Договор.ТипДоговора = ""Комиссионер""
	|			ТОГДА 3
	|		КОГДА ЗаявлениеНДС.Договор.ТипДоговора = ""Поверенный""
	|			ТОГДА 4
	|		КОГДА ЗаявлениеНДС.Договор.ТипДоговора = ""Агент""
	|			ТОГДА 5
	|	КОНЕЦ КАК ВидПокупателя,
	|	ВЫБОР
	|		КОГДА ТЗУчастникиСделки.Продавец ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчастиеПосредников
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗУчастникиСделки КАК ТЗУчастникиСделки
	|		ПО ЗаявлениеНДС.Ссылка = ТЗУчастникиСделки.Ссылка
	|ГДЕ
	|	ЗаявлениеНДС.Проведен
	|	И ЗаявлениеНДС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявлениеНДС.Дата";
	Возврат Запрос.ВыполнитьПакет();
КонецФункции

Функция СформироватьЗапросПоТабЧастиДокумента(СсылкаДокумент)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыПоДокументу.НПП КАК НПП,
	|	ТоварыПоДокументу.КодТНВЭД КАК КодТНВЭД,
	|	ТоварыПоДокументу.Номенклатура КАК Номенклатура,
	|	ТоварыПоДокументу.ЕдиницаИзмерения.Код КАК ЕдиницаИзмерения,
	|	ТоварыПоДокументу.Валюта.Код КАК КодВалютыТовара,
	|	ТоварыПоДокументу.Валюта КАК Валюта,
	|	ТоварыПоДокументу.Количество КАК Количество,
	|	ТоварыПоДокументу.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТоварыПоДокументу.ТвердаяСтавкаАкциза = 0
	|				ИЛИ ТоварыПоДокументу.АдвалорнаяСтавкаАкциза = 0
	|			ТОГДА 5
	|		КОГДА ТоварыПоДокументу.ТвердаяСтавкаАкциза > 0
	|			ТОГДА 1
	|		КОГДА ТоварыПоДокументу.АдвалорнаяСтавкаАкциза > 0
	|			ТОГДА 2
	|	КОНЕЦ КАК ТипАкциза,
	|	ТоварыПоДокументу.НомерСчетаФактуры КАК ДанныеСФ,
	|	ТоварыПоДокументу.ДатаСчетаФактуры КАК ДатаСФ,
	|	ТоварыПоДокументу.ДатаУчет КАК ДатаУчет,
	|	ТоварыПоДокументу.БазаДляАкциза КАК БазаДляАкциза,
	|	ТоварыПоДокументу.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыПоДокументу.СуммаНДС КАК СуммаНДС,
	|	ТоварыПоДокументу.НомерТТН КАК НомерТТН,
	|	ТоварыПоДокументу.ДатаТТН КАК ДатаТТН,
	|	ТоварыПоДокументу.АдвалорнаяСтавкаАкциза КАК АдвалорнаяСтавкаАкциза,
	|	ТоварыПоДокументу.ТвердаяСтавкаАкциза КАК ТвердаяСтавкаАкциза,
	|	ТоварыПоДокументу.СуммаАкциза КАК СуммаАкциза,
	|	ТоварыПоДокументу.ИспользоватьАкцизы КАК ИспользоватьАкцизы,
	|	ТоварыПоДокументу.НомерДокументаЗаявления,
	|	ТоварыПоДокументу.ДатаДокументаЗаявления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявлениеНДСТоварыПоДокументу.Ссылка.Номер КАК НомерДокументаЗаявления,
	|		ЗаявлениеНДСТоварыПоДокументу.Ссылка.Дата КАК ДатаДокументаЗаявления,
	|		ВЫБОР
	|			КОГДА ЗаявлениеНДСТоварыПоДокументу.Номенклатура.НаименованиеПолное = """"
	|				ТОГДА ЗаявлениеНДСТоварыПоДокументу.Номенклатура.Наименование
	|			ИНАЧЕ ЗаявлениеНДСТоварыПоДокументу.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Номенклатура,
	|		ЗаявлениеНДСТоварыПоДокументу.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаявлениеНДСТоварыПоДокументу.Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|		ЗаявлениеНДСТоварыПоДокументу.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|		ЗаявлениеНДСТоварыПоДокументу.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|		ЗаявлениеНДСТоварыПоДокументу.ДатаПринятияНаУчет КАК ДатаУчет,
	|		ЗаявлениеНДСТоварыПоДокументу.СтавкаНДС КАК СтавкаНДС,
	|		ЗаявлениеНДСТоварыПоДокументу.Валюта КАК Валюта,
	|		ЗаявлениеНДСТоварыПоДокументу.ДокументПоступления КАК Партия,
	|		ЗаявлениеНДСТоварыПоДокументу.Ссылка.ИспользоватьАкцизы КАК ИспользоватьАкцизы,
	|		ВЫБОР
	|			КОГДА ЗаявлениеНДСТоварыПоДокументу.СерияНомерТСД = """"
	|				ТОГДА ЗаявлениеНДСТоварыПоДокументу.ДокументПоступления.НомерВходящегоДокумента
	|			ИНАЧЕ ЗаявлениеНДСТоварыПоДокументу.СерияНомерТСД
	|		КОНЕЦ КАК НомерТТН,
	|		ВЫБОР
	|			КОГДА ЗаявлениеНДСТоварыПоДокументу.ДатаТСД = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЗаявлениеНДСТоварыПоДокументу.ДокументПоступления.ДатаВходящегоДокумента
	|			ИНАЧЕ ЗаявлениеНДСТоварыПоДокументу.ДатаТСД
	|		КОНЕЦ КАК ДатаТТН,
	|		МИНИМУМ(ЗаявлениеНДСТоварыПоДокументу.НомерСтроки) КАК НПП,
	|		СУММА(ЗаявлениеНДСТоварыПоДокументу.АдвалорнаяСтавкаАкциза) КАК АдвалорнаяСтавкаАкциза,
	|		СУММА(ЗаявлениеНДСТоварыПоДокументу.ТвердаяСтавкаАкциза) КАК ТвердаяСтавкаАкциза,
	|		СУММА(ЗаявлениеНДСТоварыПоДокументу.СуммаАкциза) КАК СуммаАкциза,
	|		СУММА(ЗаявлениеНДСТоварыПоДокументу.СуммаНДС) КАК СуммаНДС,
	|		СУММА(0) КАК БазаДляАкциза,
	|		СУММА(ЗаявлениеНДСТоварыПоДокументу.Количество) КАК Количество,
	|		СУММА(ЗаявлениеНДСТоварыПоДокументу.ФактурнаяСтоимость) КАК Сумма
	|	ИЗ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеНДСТоварыПоДокументу
	|	ГДЕ
	|		ЗаявлениеНДСТоварыПоДокументу.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаявлениеНДСТоварыПоДокументу.ЕдиницаИзмерения,
	|		ЗаявлениеНДСТоварыПоДокументу.Номенклатура,
	|		ЗаявлениеНДСТоварыПоДокументу.ДатаПринятияНаУчет,
	|		ЗаявлениеНДСТоварыПоДокументу.ДокументПоступления,
	|		ВЫБОР
	|			КОГДА ЗаявлениеНДСТоварыПоДокументу.ДатаТСД = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЗаявлениеНДСТоварыПоДокументу.ДокументПоступления.ДатаВходящегоДокумента
	|			ИНАЧЕ ЗаявлениеНДСТоварыПоДокументу.ДатаТСД
	|		КОНЕЦ,
	|		ЗаявлениеНДСТоварыПоДокументу.НомерСчетаФактуры,
	|		ВЫБОР
	|			КОГДА ЗаявлениеНДСТоварыПоДокументу.СерияНомерТСД = """"
	|				ТОГДА ЗаявлениеНДСТоварыПоДокументу.ДокументПоступления.НомерВходящегоДокумента
	|			ИНАЧЕ ЗаявлениеНДСТоварыПоДокументу.СерияНомерТСД
	|		КОНЕЦ,
	|		ЗаявлениеНДСТоварыПоДокументу.Валюта,
	|		ЗаявлениеНДСТоварыПоДокументу.СтавкаНДС,
	|		ЗаявлениеНДСТоварыПоДокументу.ДатаСчетаФактуры,
	|		ВЫБОР
	|			КОГДА ЗаявлениеНДСТоварыПоДокументу.Номенклатура.НаименованиеПолное = """"
	|				ТОГДА ЗаявлениеНДСТоварыПоДокументу.Номенклатура.Наименование
	|			ИНАЧЕ ЗаявлениеНДСТоварыПоДокументу.Номенклатура.НаименованиеПолное
	|		КОНЕЦ,
	|		ЗаявлениеНДСТоварыПоДокументу.Номенклатура.КодТНВЭД,
	|		ЗаявлениеНДСТоварыПоДокументу.Ссылка.ИспользоватьАкцизы,
	|		ЗаявлениеНДСТоварыПоДокументу.Ссылка.Номер,
	|		ЗаявлениеНДСТоварыПоДокументу.Ссылка.Дата) КАК ТоварыПоДокументу
	|
	|УПОРЯДОЧИТЬ ПО
	|	НПП";
	Возврат Запрос.Выполнить();
КонецФункции

Функция ПроверитьИЗаполнитьШапкуДокумента(Ссылка, ТекстФайла, ИмяФайла, ЗамечанияОбОшибках)
	Результат = СформироватьЗапросПоШапкеДокумента(Ссылка);
	Если Результат[2].Пустой() Тогда
		ИмяФайла = Строка(ТекущаяДата()) + ".xml";
		ЗамечанияОбОшибках.Добавить("Результат запроса по шапке документа пустой! Выгрузка прервана. " + Ссылка);
		Возврат ЗамечанияОбОшибках;
	КонецЕсли;
	
	ВыборкаСпецификации = Результат[1].Выбрать();
	ВыборкаСпецификации.Следующий();
	
	ВыборкаПоШапке = Результат[2].Выбрать();
	ВыборкаПоШапке.Следующий();
	
	ДатаДокументаЗаявления = Формат(ВыборкаПоШапке.ДатаДокументаЗаявления, "ДФ=yyyy-MM-dd");
	НомерДокументаЗаявления = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоШапке.НомерДокументаЗаявления, Истина, Истина);
	ИмяФайла = СокрЛП(ВыборкаПоШапке.Организация.ИНН + "_" + НомерДокументаЗаявления + "_" + ДатаДокументаЗаявления + ".xml");
	
	НомерСпецификации = ОбработатьКавычки(ВыборкаСпецификации.НомерСпецификации, 50);
	ДатаСпецификации = Формат(ВыборкаСпецификации.ДатаСпецификации, "ДФ=yyyy-MM-dd");
	ДоговорКонтрагентаНомер = ОбработатьКавычки(НомерДоговораИзНаименования(ВыборкаПоШапке.ДоговорКонтрагентаНомер), 50);
	ДоговорКонтрагентаДата = Формат(ВыборкаПоШапке.ДоговорКонтрагентаДата, "ДФ=yyyy-MM-dd");
	
	ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, НомерСпецификации, "Не указан номер спецификации (05)");
	ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ДатаСпецификации, "Не указана дата спецификации (05)");
	ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ДоговорКонтрагентаНомер, "Не указан номер договора (контракта) контрагента (05)");
	ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ДоговорКонтрагентаДата, "Не указана дата договора (контракта) контрагента (05)");
	
	НомерСпецификации07 = ОбработатьКавычки(ВыборкаПоШапке.НомерСпецификации07, 50);
	ДатаСпецификации07 = Формат(ВыборкаПоШапке.ДатаСпецификации07, "ДФ=yyyy-MM-dd");
	НомерДоговора07 = ОбработатьКавычки(НомерДоговораИзНаименования(ВыборкаПоШапке.НомерДоговора07), 50);
	ДатаДоговора07 = Формат(ВыборкаПоШапке.ДатаДоговора07, "ДФ=yyyy-MM-dd");
	
	Если ВыборкаПоШапке.УчастиеПосредников Тогда
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, НомерСпецификации07, "Не указан номер спецификации (07)");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ДатаСпецификации07, "Не указана дата спецификации (07)");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, НомерДоговора07, "Не указан номер договора (контракта) контрагента (07)");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ДатаДоговора07, "Не указана дата договора (контракта) контрагента (07)");
	КонецЕсли;
	
	НомерСпецификации12 = ОбработатьКавычки(ВыборкаПоШапке.НомерСпецификации12, 50);
	ДатаСпецификации12 = Формат(ВыборкаПоШапке.ДатаСпецификации12, "ДФ=yyyy-MM-dd");
	НомерДоговора12 = ОбработатьКавычки(НомерДоговораИзНаименования(ВыборкаПоШапке.НомерДоговора12), 50);
	ДатаДоговора12 = Формат(ВыборкаПоШапке.ДатаДоговора12, "ДФ=yyyy-MM-dd");
	
	Если ВыборкаПоШапке.УчастиеПосредников Тогда
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, НомерСпецификации12, "Не указан номер спецификации (12)");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ДатаСпецификации12, "Не указана дата спецификации (12)");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, НомерДоговора12, "Не указан номер договора (контракта) контрагента (12)");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ДатаДоговора12, "Не указана дата договора (контракта) контрагента (12)");
	КонецЕсли;
	
	ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоШапке.Продавец, "Не указан продавец (01)");
	ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоШапке.Покупатель, "Не указан покупатель (02)");
	ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоШапке.ДоговорКонтрагентаНомер, "Не указан номер договора (контракта) (05)");
	ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоШапке.ДоговорКонтрагентаДата, "Не указана дата договора (контракта) (05)");
	
	Ответственные = ОтветственныеЛицаБП.ОтветственныеЛица(ВыборкаПоШапке.Организация, ВыборкаПоШапке.ДатаДокументаЗаявления);
	Руководитель = ОбработатьКавычки(Ответственные.РуководительПредставление, 255);
	ГлавныйБухгалтер = ОбработатьКавычки(Ответственные.ГлавныйБухгалтерПредставление, 255);
	
	ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, Руководитель, "Не указан руководитель организации");
	ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ГлавныйБухгалтер, "Не указан главный бухгалтер организации");
	
	ТекстФайла = ТекстФайла + "<registry_document ";
	ТекстФайла = ТекстФайла + "doc_number=""" + НомерДокументаЗаявления + """";
	ТекстФайла = ТекстФайла + " reg_date=""" + ДатаДокументаЗаявления + """";
	ТекстФайла = ТекстФайла + " decl_num=""" + НомерДокументаЗаявления + """";
	ТекстФайла = ТекстФайла + " decl_date=""" + ДатаДокументаЗаявления + """";
	
	// Первый раздел
	Если ЗначениеЗаполнено(ВыборкаПоШапке.Продавец) Тогда
		АдресПродавца = ОбработатьКавычки(АдресКонтрагента(ВыборкаПоШапке.Продавец), 255);
		
		Наименование = ?(ЗначениеЗаполнено(ВыборкаПоШапке.Продавец.НаименованиеПолное), ВыборкаПоШапке.Продавец.НаименованиеПолное, ВыборкаПоШапке.Продавец.Наименование);
		Наименование = ОбработатьКавычки(Наименование, 400);
		
		КодСтраныПродавца = ВыборкаПоШапке.Продавец.СтранаРегистрации.Код;
		Если ПустаяСтрока(КодСтраныПродавца) Тогда
			КодСтраныПродавца = "112";
		КонецЕсли;
		
		РегистрационныйНомерИНН = "";
		Если ПустаяСтрока(ВыборкаПоШапке.Продавец.ИНН) Тогда
			РегистрационныйНомерИНН = ВыборкаПоШапке.Продавец.РегистрационныйНомер;
		Иначе
			РегистрационныйНомерИНН = ВыборкаПоШапке.Продавец.ИНН;
		КонецЕсли;
		
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, РегистрационныйНомерИНН, "Не заполнен УНП продавца");
		
		Если Не ПустаяСтрока(ВыборкаПоШапке.Продавец.ИНН) Тогда
			ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоШапке.Продавец.КПП, "Не заполнен ОКПО продавца");
		КонецЕсли;
		
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, КодСтраныПродавца, "Не указан код страны регистрации продавца (03)");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, АдресПродавца, "Не указан адрес продавца (03)");
		
		ТекстФайла = ТекстФайла + " id_seller=""" + РегистрационныйНомерИНН + """";
		ТекстФайла = ТекстФайла + " kpp_seller=""" + ВыборкаПоШапке.Продавец.КПП + """";
		ТекстФайла = ТекстФайла + " name_seller=""" + Наименование + """";
		ТекстФайла = ТекстФайла + " country_seller=""" + КодСтраныПродавца + """";
		ТекстФайла = ТекстФайла + " address_seller=""" + АдресПродавца + """";
	Иначе
		ЗамечанияОбОшибках.Добавить("Не указан продавец (01)");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапке.Покупатель) Тогда
		АдресПокупателя = ОбработатьКавычки(АдресКонтрагента(ВыборкаПоШапке.Покупатель), 255);
		
		Наименование = ?(ЗначениеЗаполнено(ВыборкаПоШапке.Покупатель.НаименованиеПолное), ВыборкаПоШапке.Покупатель.НаименованиеПолное, ВыборкаПоШапке.Покупатель.Наименование);
		Наименование = ОбработатьКавычки(Наименование, 400);
		
		КодСтраныПокупателя = ?(ПустаяСтрока(ВыборкаПоШапке.Покупатель.КодВСтранеРегистрации), ВыборкаПоШапке.Покупатель.СтранаРегистрации.Код, ВыборкаПоШапке.Покупатель.КодВСтранеРегистрации);
		Если ПустаяСтрока(КодСтраныПокупателя) Тогда
			КодСтраныПокупателя = "112";
		КонецЕсли;
		
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоШапке.Покупатель.ИНН, "Не заполнен УНП покупателя");
		
		Если Не ПустаяСтрока(ВыборкаПоШапке.Покупатель.ИНН) Тогда
			ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоШапке.Покупатель.КПП, "Не заполнен ОКПО покупателя");
		КонецЕсли;
		
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, КодСтраныПокупателя, "Не указан код страны регистрации покупателя (04)");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, АдресПокупателя, "Не указан адрес покупателя (04)");
		
		ТекстФайла = ТекстФайла + " id_buyer=""" + ВыборкаПоШапке.Покупатель.ИНН + """";
		ТекстФайла = ТекстФайла + " kpp_buyer=""" + ВыборкаПоШапке.Покупатель.КПП + """";
		ТекстФайла = ТекстФайла + " name_buyer=""" + Наименование + """";
		ТекстФайла = ТекстФайла + " country_buyer=""" + КодСтраныПокупателя + """";
		ТекстФайла = ТекстФайла + " address_buyer=""" + АдресПокупателя + """";
	Иначе
		ЗамечанияОбОшибках.Добавить("Не указан покупатель (02)");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапке.Посредник06) Тогда
		Наименование = ?(ЗначениеЗаполнено(ВыборкаПоШапке.Посредник06.НаименованиеПолное), ВыборкаПоШапке.Посредник06.НаименованиеПолное, ВыборкаПоШапке.Посредник06.Наименование);
		Наименование = ОбработатьКавычки(Наименование, 400);
		ТекстФайла = ТекстФайла + " name_consignee_1=""" + Наименование + """";
	КонецЕсли;
	
	ТекстФайла = ТекстФайла + " leasing=""" + ?(ВыборкаПоШапке.Лизинг, "true", "false") + """";
	ТекстФайла = ТекстФайла + " processing=""" + ?(ВыборкаПоШапке.Давальческое, "true", "false") + """";
	
	ТекстФайла = ТекстФайла + " num_contract_1=""" + ДоговорКонтрагентаНомер + """";
	ТекстФайла = ТекстФайла + " date_contract_1=""" + ДоговорКонтрагентаДата + """";
	
	ТекстФайла = ТекстФайла + " num_contract_2=""" + НомерДоговора07 + """";
	ТекстФайла = ТекстФайла + " date_contract_2=""" + ДатаДоговора07 + """";
	
	ТекстФайла = ТекстФайла + " chief_name_buyer=""" + Руководитель + """";
	ТекстФайла = ТекстФайла + " chief_date_buyer=""" + ДатаДокументаЗаявления + """";
	
	ТекстФайла = ТекстФайла + " decl_head_name=""" + Руководитель + """";
	ТекстФайла = ТекстФайла + " decl_head_date=""" + ДатаДокументаЗаявления + """";
	
	ТекстФайла = ТекстФайла + " accountant_name=""" + ГлавныйБухгалтер + """";
	ТекстФайла = ТекстФайла + " accountant_date=""" + ДатаДокументаЗаявления + """";
	
	// Третий раздел
	Если ЗначениеЗаполнено(ВыборкаПоШапке.Продавец08) Тогда
		АдресПродавца08 = ОбработатьКавычки(АдресКонтрагента(ВыборкаПоШапке.Продавец08), 255);
		
		Наименование = ?(ЗначениеЗаполнено(ВыборкаПоШапке.Продавец08.НаименованиеПолное), ВыборкаПоШапке.Продавец08.НаименованиеПолное, ВыборкаПоШапке.Продавец08.Наименование);
		Наименование = ОбработатьКавычки(Наименование, 400);
		
		КодСтраныПродавец08 = ВыборкаПоШапке.Продавец08.СтранаРегистрации.Код;
		Если ПустаяСтрока(КодСтраныПродавец08) Тогда
			КодСтраныПродавец08 = "112";
		КонецЕсли;
		
		РегистрационныйНомерИНН = "";
		Если ПустаяСтрока(ВыборкаПоШапке.Продавец08.ИНН) Тогда
			РегистрационныйНомерИНН = ВыборкаПоШапке.Продавец08.РегистрационныйНомер;
		Иначе
			РегистрационныйНомерИНН = ВыборкаПоШапке.Продавец08.ИНН;
		КонецЕсли;
		
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, РегистрационныйНомерИНН, "Не заполнен УНП продавца раздела ""Прочие участники сделки""");
		
		Если Не ПустаяСтрока(ВыборкаПоШапке.Продавец08.ИНН) Тогда
			ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоШапке.Продавец08.КПП, "Не заполнен ОКПО продавца раздела ""Прочие участники сделки""");
		КонецЕсли;
		
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, КодСтраныПродавец08, "Не указан код страны регистрации продавца (10)");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, АдресПродавца08, "Не указан адрес продавца (10)");
		
		ТекстФайла = ТекстФайла + " type_seller_3=""" + ВыборкаПоШапке.ВидПродавца + """";
		ТекстФайла = ТекстФайла + " id_seller_3=""" + РегистрационныйНомерИНН + """";
		ТекстФайла = ТекстФайла + " kpp_seller_3=""" + ВыборкаПоШапке.Продавец08.КПП + """";
		ТекстФайла = ТекстФайла + " name_seller_3=""" + Наименование + """";
		ТекстФайла = ТекстФайла + " country_seller_3=""" + КодСтраныПродавец08 + """";
		ТекстФайла = ТекстФайла + " address_seller_3=""" + АдресПродавца08 + """";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапке.Покупатель09) Тогда
		АдресПокупателя09 = ОбработатьКавычки(АдресКонтрагента(ВыборкаПоШапке.Покупатель09), 255);
		
		Наименование = ?(ЗначениеЗаполнено(ВыборкаПоШапке.Покупатель09.НаименованиеПолное), ВыборкаПоШапке.Покупатель09.НаименованиеПолное, ВыборкаПоШапке.Покупатель09.Наименование);
		Наименование = ОбработатьКавычки(Наименование, 400);
		
		КодСтраныПокупатель09 = ВыборкаПоШапке.Покупатель09.СтранаРегистрации.Код;
		Если ПустаяСтрока(КодСтраныПокупатель09) Тогда
			КодСтраныПокупатель09 = "112";
		КонецЕсли;
		
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоШапке.Покупатель09.ИНН, "Не заполнен УНП покупателя ""Прочие участники сделки""");
		
		Если Не ПустаяСтрока(ВыборкаПоШапке.Покупатель09.ИНН) Тогда
			ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоШапке.Покупатель09.КодПоОКПО, "Не заполнен ОКПО покупателя ""Прочие участники сделки""");
		КонецЕсли;
		
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, КодСтраныПокупатель09, "Не указана код страны регистрации покупателя (11)");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, АдресПокупателя09, "Не указан адрес покупателя (11)");
		
		ТекстФайла = ТекстФайла + " type_buyer_3=""" + ВыборкаПоШапке.ВидПокупателя + """";
		ТекстФайла = ТекстФайла + " id_buyer_3=""" + ВыборкаПоШапке.Покупатель09.ИНН + """";
		ТекстФайла = ТекстФайла + " kpp_buyer_3=""" + ВыборкаПоШапке.Покупатель09.КПП + """";
		ТекстФайла = ТекстФайла + " name_buyer_3=""" + Наименование + """";
		ТекстФайла = ТекстФайла + " country_buyer_3=""" + КодСтраныПокупатель09 + """";
		ТекстФайла = ТекстФайла + " address_buyer_3=""" + АдресПокупателя09 + """";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоШапке.Продавец08) Или ЗначениеЗаполнено(ВыборкаПоШапке.Покупатель09) Тогда
		ТекстФайла = ТекстФайла + " chief_name_buyer_3=""" + Руководитель + """";
		ТекстФайла = ТекстФайла + " chief_date_buyer_3=""" + ДатаДокументаЗаявления + """";
		ТекстФайла = ТекстФайла + " accountant_name_3=""" + ГлавныйБухгалтер + """";
		ТекстФайла = ТекстФайла + " accountant_date_3=""" + ДатаДокументаЗаявления + """";
	КонецЕсли;
	
	ТекстФайла = ТекстФайла + " num_contract_3=""" + НомерДоговора12 + """";
	ТекстФайла = ТекстФайла + " date_contract_3=""" + ДатаДоговора12 + """";
	ТекстФайла = ТекстФайла + ">";
	
	ВыборкаСпецификации.Сбросить();
	Пока ВыборкаСпецификации.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаСпецификации.НомерСпецификации) Или ЗначениеЗаполнено(ВыборкаСпецификации.ДатаСпецификации) Тогда
			ТекстФайла = ТекстФайла + "<spec_05 order=""1""" + " num_spec=""" + ВыборкаСпецификации.НомерСпецификации + """" + " date_spec=""" + Формат(ВыборкаСпецификации.ДатаСпецификации, "ДФ=yyyy-MM-dd") + """" + "></spec_05>";
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НомерСпецификации07) Или ЗначениеЗаполнено(ДатаСпецификации07) Тогда
		ТекстФайла = ТекстФайла + "<spec_07 order=""1""" + " num_spec=""" + НомерСпецификации07 + """" + " date_spec=""" + ДатаСпецификации07 + """" + "></spec_07>";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСпецификации12) Или ЗначениеЗаполнено(ДатаСпецификации12) Тогда
		ТекстФайла = ТекстФайла + "<spec_3 order=""1""" + " num_spec=""" + НомерСпецификации12 + """" + " date_spec=""" + ДатаСпецификации12 + """" + "></spec_3>";
	КонецЕсли;
	
	Возврат ЗамечанияОбОшибках;
КонецФункции

Функция ПроверитьИЗаполнитьТабЧастьДокумента(Ссылка, ТекстФайла, ЗамечанияОбОшибках)
	Результат = СформироватьЗапросПоТабЧастиДокумента(Ссылка);
	Если Результат.Пустой() Тогда
		ЗамечанияОбОшибках.Добавить("Результат запроса по табличной части пустой! Выгрузка табличной части прервана. " + Ссылка);
		Возврат ЗамечанияОбОшибках;
	КонецЕсли;
	
	ВыборкаПоТабЧасти = Результат.Выбрать();
	Пока ВыборкаПоТабЧасти.Следующий() Цикл
		НомерСтроки = "В строке № " + ВыборкаПоТабЧасти.НПП + " таб. части ";
		КодТНВЭД = ОбработатьКавычки(ВыборкаПоТабЧасти.КодТНВЭД, 10);
		Курс = Формат(РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ВыборкаПоТабЧасти.ДатаУчет, Новый Структура("Валюта", ВыборкаПоТабЧасти.Валюта)).Курс, "ЧДЦ=2; ЧРД=.; ЧГ=0");
		БазаДляНДС = ВыборкаПоТабЧасти.Количество * ВыборкаПоТабЧасти.Сумма * Курс;
		
		ТекстФайла = ТекстФайла + "<commodity";
		ТекстФайла = ТекстФайла + " order=""" + ВыборкаПоТабЧасти.НПП + """";
		ТекстФайла = ТекстФайла + " comm_name=""" + ОбработатьКавычки(ВыборкаПоТабЧасти.Номенклатура, 100) + """";
		
		Если ВыборкаПоТабЧасти.ДатаТТН > ВыборкаПоТабЧасти.ДатаДокументаЗаявления Тогда
			ЗамечанияОбОшибках.Добавить("Дата ТТН должна быть меньше даты Заявления");
		КонецЕсли;
		
		Если ВыборкаПоТабЧасти.ДатаСФ > ВыборкаПоТабЧасти.ДатаДокументаЗаявления Тогда
			ЗамечанияОбОшибках.Добавить("Дата счет-фактуры должна быть меньше даты Заявления");
		КонецЕсли;
		
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, КодТНВЭД, НомерСтроки + "не указан код ТНВЭД");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.ЕдиницаИзмерения, НомерСтроки + "не указана ед. измерения");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.Валюта, НомерСтроки + "не указана валюта товара");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, Курс, НомерСтроки + "не указан курс валюты товара");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.НомерТТН, НомерСтроки + "не указана серия и номер транспортного документа");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.ДатаТТН, НомерСтроки + "не указана дата транспортного документа");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.ДанныеСФ, НомерСтроки + "не указан номер счета-фактуры");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.ДатаСФ, НомерСтроки + "не указана дата счета-фактуры");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.ДатаУчет, НомерСтроки + "не указана дата учета товара");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.Количество, НомерСтроки + "не указано количество товара");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.Сумма, НомерСтроки + "не указана сумма товара");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.СтавкаНДС, НомерСтроки + "не определена ставка НДС");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, БазаДляНДС, НомерСтроки + "не определена база для НДС");
		ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.СуммаНДС, НомерСтроки + "не определена сумма НДС");
		
		ТекстФайла = ТекстФайла + " tnved=""" + КодТНВЭД + """";
		ТекстФайла = ТекстФайла + " unit_meas_id=""" + ВыборкаПоТабЧасти.ЕдиницаИзмерения + """";
		ТекстФайла = ТекстФайла + " transdoc_serie=""" + ОбработатьКавычки(ВыборкаПоТабЧасти.НомерТТН, 50) + """";
		ТекстФайла = ТекстФайла + " transdoc_date=""" + Формат(ВыборкаПоТабЧасти.ДатаТТН, "ДФ=yyyy-MM-dd") + """";
		ТекстФайла = ТекстФайла + " invoice_num=""" + ОбработатьКавычки(ВыборкаПоТабЧасти.ДанныеСФ, 50) + """";
		ТекстФайла = ТекстФайла + " invoice_date=""" + Формат(ВыборкаПоТабЧасти.ДатаСФ, "ДФ=yyyy-MM-dd") + """";
		ТекстФайла = ТекстФайла + " accepting_date=""" + Формат(ВыборкаПоТабЧасти.ДатаУчет, "ДФ=yyyy-MM-dd") + """";
		ТекстФайла = ТекстФайла + " comm_count=""" + Формат(ВыборкаПоТабЧасти.Количество, "ЧДЦ=1; ЧРД=.; ЧГ=0") + """";
		ТекстФайла = ТекстФайла + " comm_price=""" + Формат(ВыборкаПоТабЧасти.Сумма, "ЧДЦ=2; ЧРД=.; ЧГ=0") + """";
		ТекстФайла = ТекстФайла + " currency=""" + ВыборкаПоТабЧасти.КодВалютыТовара + """";
		ТекстФайла = ТекстФайла + " rate=""" + Курс + """";
		
		// Акцизы
		Если ВыборкаПоТабЧасти.ИспользоватьАкцизы Тогда
			ТекстФайла = ТекстФайла + " excise_type=""" + ВыборкаПоТабЧасти.ТипАкциза + """";
			ТекстФайла = ТекстФайла + " excise_perc_ad=""" + Формат(ВыборкаПоТабЧасти.АдвалорнаяСтавкаАкциза, "ЧДЦ=2; ЧРД=.; ЧГ=0") + """";
			ТекстФайла = ТекстФайла + " excise_perc_st=""" + Формат(ВыборкаПоТабЧасти.ТвердаяСтавкаАкциза, "ЧДЦ=2; ЧРД=.; ЧГ=0") + """";
			ТекстФайла = ТекстФайла + " excise_base=""" + Формат(ВыборкаПоТабЧасти.БазаДляАкциза, "ЧДЦ=2; ЧРД=.; ЧГ=0") + """";
			ТекстФайла = ТекстФайла + " excise_sum=""" + Формат(ВыборкаПоТабЧасти.СуммаАкциза, "ЧДЦ=2; ЧРД=.; ЧГ=0") + """";
			
			ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.ТипАкциза, НомерСтроки + "не определен тип акциза");
			ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.БазаДляАкциза, НомерСтроки + "не определена база для акциза");
			ДобавитьЗамечанияОбОшибках(ЗамечанияОбОшибках, ВыборкаПоТабЧасти.СуммаАкциза, НомерСтроки + "не определена сумма акциза");
		КонецЕсли;
		
		// НДС
		ТекстФайла = ТекстФайла + " nds_base=""" + Формат(БазаДляНДС, "ЧДЦ=2; ЧРД=.; ЧГ=0") + """";
		ТекстФайла = ТекстФайла + " nds_perc=""" + УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ВыборкаПоТабЧасти.СтавкаНДС) + """";
		ТекстФайла = ТекстФайла + " nds_sum=""" + Формат(ВыборкаПоТабЧасти.СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧГ=0") + """";
		ТекстФайла = ТекстФайла + "></commodity>";
	КонецЦикла;
	
	Возврат ЗамечанияОбОшибках;
КонецФункции

#КонецОбласти

// }
// 4D

#КонецОбласти 

#КонецЕсли
