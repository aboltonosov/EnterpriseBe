#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическиеЛица.ФизическоеЛицо");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
			
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КПП");
	КонецЕсли;	
		
	РегламентированнаяОтчетность.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбъектЗафиксирован() Экспорт
	
	Возврат НЕ ПрямыеВыплатыПособийСоциальногоСтрахования.СтатусПозволяетРедактироватьДокумент(СтатусДокумента);
	
КонецФункции 

Функция ОбновитьВторичныеДанныеДокумента(ДанныеОрганизации = Истина, ДанныеОплат = Истина, МассивОплат = Неопределено) Экспорт
	
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Если ДанныеОрганизации И ОбновитьДанныеСтрахователя() Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ДанныеОплат И ОбновитьДанныеОплат(МассивОплат) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Возврат Модифицирован
	
КонецФункции

Функция ОбновитьДанныеСтрахователя()
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаРеквизиты = "РегистрационныйНомерФСС,ДополнительныйКодФСС,КодПодчиненностиФСС,НаименованиеТерриториальногоОрганаФСС,ИНН,КПП,Руководитель,ДолжностьРуководителя,ТелефонСоставителя,АдресОрганизации";
	СтрокаРеквизиты = СтрокаРеквизиты + ",Банк,НаименованиеБанка,НомерЛицевогоСчета,НомерСчета,БИКБанка";
	РеквизитыДокумента = Новый Структура(СтрокаРеквизиты);
	
	СтрокаРеквизитыОрганизации = "РегистрационныйНомерФСС, КодПодчиненностиФСС, ДополнительныйКодФСС, НаименованиеТерриториальногоОрганаФСС";									
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, СтрокаРеквизитыОрганизации);
	
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, РеквизитыОрганизации, СтрокаРеквизитыОрганизации);
	
	ЗаполняемыеЗначения = Новый Структура("Организация,Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер", Организация);
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
	ЗаполняемыеЗначения.Свойство("Руководитель", РеквизитыДокумента.Руководитель);
	ЗаполняемыеЗначения.Свойство("ДолжностьРуководителя", РеквизитыДокумента.ДолжностьРуководителя);
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "ИННЮЛ");
	Сведения.Добавить("", "КППЮЛ"); 
	Сведения.Добавить("", "БанкСчетНомер");
	Сведения.Добавить("", "БанкСчетНаимБанка");
	Сведения.Добавить("", "БанкСчетБИКБанка");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()), Сведения);
	ОргСведения.Свойство("ИННЮЛ", 					РеквизитыДокумента.ИНН);
	ОргСведения.Свойство("КППЮЛ", 					РеквизитыДокумента.КПП);
	ОргСведения.Свойство("БанкСчетНомер", 			РеквизитыДокумента.НомерСчета);
	ОргСведения.Свойство("БанкСчетНаимБанка", 		РеквизитыДокумента.НаименованиеБанка);
	ОргСведения.Свойство("БанкСчетБИКБанка", 		РеквизитыДокумента.БИКБанка);
	
	АдресаОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация),	
																					Перечисления.ТипыКонтактнойИнформации.Адрес, 
																					Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
																					?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	Если АдресаОрганизации.Количество() > 0 Тогда
		РеквизитыДокумента.АдресОрганизации = АдресаОрганизации[0].ЗначенияПолей;	
	Иначе
		РеквизитыДокумента.АдресОрганизации = "";	
	КонецЕсли;
	
	ТелефоныОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация),	
																					Перечисления.ТипыКонтактнойИнформации.Телефон, 
																					Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
																					?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	Если ТелефоныОрганизации.Количество() > 0 Тогда
		РеквизитыДокумента.ТелефонСоставителя = ТелефоныОрганизации[0].ЗначенияПолей;	
	Иначе
		РеквизитыДокумента.ТелефонСоставителя = "";	
	КонецЕсли;
	
	Запрос = ПрямыеВыплатыПособийСоциальногоСтрахования.ЗапросПоСтрокеПолей(СтрокаРеквизиты);
	
	ЗаполнитьЗначенияСвойств(Запрос.Параметры, РеквизитыДокумента); 
	
	Запрос.Выполнить();
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьВторичныеДанные(Запрос.МенеджерВременныхТаблиц, ЭтотОбъект);
	
КонецФункции

Функция ОбновитьДанныеОплат(МассивОплат = Неопределено)
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеОплат = ПрямыеВыплатыПособийСоциальногоСтрахования.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Организация, Ссылка);
	
	Если ДанныеОплат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("ДанныеОплат", ДанныеОплат.Выгрузить());
	Запрос.УстановитьПараметр("МассивОплат", ?(МассивОплат = Неопределено, Оплаты.Выгрузить().ВыгрузитьКолонку("ДокументОснование"), МассивОплат));
	
	ОписаниеФиксацииРеквизитов = Документы.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.ПараметрыФиксацииВторичныхДанных().ОписаниеФиксацииРеквизитов;
	
	ИмяГруппыОписания = "Оплаты";
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеСтрок.ДокументОснование КАК ДокументОснование,";
	Для каждого ОписаниеРеквизита Из ОписаниеФиксацииРеквизитов Цикл
		Если ОписаниеРеквизита.Значение.ИмяГруппы <> ИмяГруппыОписания Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	ДанныеСтрок." + ОписаниеРеквизита.Значение.ИмяРеквизита + " КАК " + ОписаниеРеквизита.Значение.ИмяРеквизита + ",";
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Запрос.Текст, 1);
	
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТВторичныеДанные
	|ИЗ
	|	&ДанныеОплат КАК ДанныеСтрок
	|ГДЕ
	|	ДанныеСтрок.ДокументОснование В(&МассивОплат)";
	
	Запрос.Выполнить();
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьВторичныеДанные(Запрос.МенеджерВременныхТаблиц, ЭтотОбъект, "Оплаты");
	
КонецФункции

Процедура ЗаполнитьДокумент() Экспорт
	
	Оплаты.Очистить();
	
	ДанныеОплат = ПрямыеВыплатыПособийСоциальногоСтрахования.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Организация, Ссылка);
	
	Если ДанныеОплат <> Неопределено Тогда
		Оплаты.Загрузить(ДанныеОплат.Выгрузить());
	КонецЕсли;

КонецПроцедуры

Функция ДанныеСтроки(ДокументОснование = Неопределено) Экспорт
	
	Данные = ПрямыеВыплатыПособийСоциальногоСтрахования.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Организация, Ссылка, ДокументОснование);
	
	ДанныеСтроки = Данные.Выбрать();
	Если ДанныеСтроки.Следующий() Тогда
		Возврат ДанныеСтроки
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции 

#КонецОбласти

#КонецЕсли
