#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт


	Документы.АвансовыйОтчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	Документы.РасходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);


КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеДенежныхДокументов) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ПоступлениеДенежныхДокументов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ПоступлениеДенежныхДокументов);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

#Область Заполнение

// Заполняет переданный документ
//
// Параметры:
//    Объект - ДокументОбъект - заполнямый документ
//    Ссылка - ДокументСсылка - документ-основание "Поступление денежных документов"
//
Процедура ЗаполнитьПоОснованию(Объект, Ссылка) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	// Заполним данные шапки документа
	ТекстЗапросаШапки = "";
	Если ТипОбъекта = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		ТекстЗапросаШапки = ТекстЗапросаРасходныйКассовыйОрдер();
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		ТекстЗапросаШапки = ТекстЗапросаСписаниеБезналичныхДенежныхСредств();
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ТекстЗапросаШапки = ТекстЗапросаЗаявкаНаРасходованиеДенежныхСредств();
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		ТекстЗапросаШапки = ТекстЗапросаАвансовыйОтчет();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстЗапросаШапки) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не предусмотрен ввод документа %1 на основании документа %2.'"),
			Объект.Метаданные().Синоним,
			Ссылка);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаШапки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если ТипОбъекта = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
			Или ТипОбъекта = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
			Или ТипОбъекта = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ввод документа %1 предусмотрен только на основании поступления денежных документов от поставщика.'"),
				Объект.Метаданные().Синоним);
			ВызватьИсключение ТекстОшибки;
			
		ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ввод документа %1 предусмотрен только на основании поступления денежных документов от подотчетника.'"),
				Объект.Метаданные().Синоним);
			ВызватьИсключение ТекстОшибки;
			
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется вводить документ %1 на основании документа %2.'"),
				Объект.Метаданные().Синоним,
				Ссылка);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Объект, Выборка);
	
	// Заполним табличную часть
	Если ТипОбъекта = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
		Или ТипОбъекта = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
		Или ТипОбъекта = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
	
		ДопРеквизиты = Новый Структура("ЖелательнаяДатаПлатежа");
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
			Ссылка,
			Выборка.Договор,
			Выборка.Валюта,
			Выборка.СуммаВзаиморасчетов,
			Объект.РасшифровкаПлатежа,
			ДопРеквизиты.ЖелательнаяДатаПлатежа);
			
		ДопРеквизиты.Вставить("СуммаДокумента", Объект.РасшифровкаПлатежа.Итог("Сумма"));
		
		ЗаполнитьЗначенияСвойств(Объект, ДопРеквизиты);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		
		НоваяСтрока = Объект.ЗакупкаЗаНаличныйРасчет.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Состояние

// Осуществляет вычисление текущего состояния по поступлению
//
// Параметры:
//	ПоступлениеДенежныхДокументов - ДокументСсылка.ПоступлениеДенежныхДокументов - Документ, состояние которого необходимо вычислить
//	Договор                       - СправочникСсылка.ДоговорыКонтрагентов        - Договор с поставщиком
//	СостояниеРасчетов             - УправляемаяФорма                             - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач ПоступлениеДенежныхДокументов, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ПоступлениеДенежныхДокументов) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
			|	ВЫБОР
			|		КОГДА
			|			ДокументПДД.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|			И ДокументПДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика)
			|			И ДокументПДД.Проведен
			|			И ЕСТЬNULL(Расчеты.КОплатеРасход, 0) > 0
			|		ТОГДА
			|			ВЫРАЗИТЬ(ЕСТЬNULL(Расчеты.КОплатеПриход, 0) КАК ЧИСЛО(15, 2))
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаОплаты,
			|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
			|	ВЫБОР
			|		КОГДА
			|			ДокументПДД.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|			И ДокументПДД.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика)
			|			И ДокументПДД.Проведен
			|			И ЕСТЬNULL(Расчеты.КОплатеРасход, 0) > 0
			|		ТОГДА
			|			ВЫРАЗИТЬ(ЕСТЬNULL(Расчеты.КОплатеПриход, 0) * 100 / Расчеты.КОплатеРасход КАК ЧИСЛО(15, 0))
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК ПроцентОплаты,
			|// СУММА ПРОСРОЧЕННОЙ ОПЛАТЫ ////////////////////////////////////////////////
			|	ВЫБОР
			|		КОГДА
			|			ДокументПДД.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|			И ДокументПДД.Проведен
			|			И ЕСТЬNULL(Расчеты.КОплатеРасход, 0) > 0
			|			И ЕСТЬNULL(РасчетыНаДатуАктуальности.КОплатеОстаток, 0) < 0
			|		ТОГДА
			|			ВЫРАЗИТЬ(-ЕСТЬNULL(РасчетыНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаПросроченнойОплаты,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|	ВЫБОР
			|		КОГДА
			|			ДокументПДД.Проведен
			|			И (ЕСТЬNULL(Расчеты.КОплатеРасход, 0) > 0
			|				ИЛИ ДокументПДД.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
			|		ТОГДА
			|			ВЫРАЗИТЬ(ЕСТЬNULL(Расчеты.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаДолга,
			|	ВЫБОР
			|		КОГДА
			|			ДокументПДД.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|			И ДокументПДД.Проведен
			|			И ЕСТЬNULL(Расчеты.КОплатеРасход, 0) > 0
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					ЕСТЬNULL(Расчеты.СуммаКонечныйОстаток, 0) > 0
			|				ТОГДА
			|					ВЫРАЗИТЬ((ЕСТЬNULL(Расчеты.СуммаКонечныйОстаток, 0) * 100 / ЕСТЬNULL(Расчеты.КОплатеРасход, 0)) КАК ЧИСЛО(15, 0))
			|				ИНАЧЕ
			|					ВЫРАЗИТЬ((ЕСТЬNULL(-Расчеты.СуммаКонечныйОстаток, 0) * 100 / ЕСТЬNULL(Расчеты.КОплатеРасход, 0)) КАК ЧИСЛО(15, 0))
			|			КОНЕЦ
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК ПроцентДолга,
			|	ВЫБОР
			|		КОГДА
			|			ДокументПДД.Проведен
			|			И ДокументПДД.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|		ТОГДА
			|			-Расчеты.КОплатеКонечныйОстаток
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаКОплате
			|ИЗ
			|	Документ.ПоступлениеДенежныхДокументов КАК ДокументПДД
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(,,,,ЗаказПоставщику = &РасчетныйДокумент) КАК Расчеты
			|		ПО ИСТИНА
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказПоставщику = &РасчетныйДокумент) КАК РасчетыНаДатуАктуальности
			|		ПО ИСТИНА
			|ГДЕ
			|	ДокументПДД.Ссылка = &ПоступлениеДД
			|
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоступлениеДенежныхДокументов, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ПоступлениеДД", ПоступлениеДенежныхДокументов);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ПоступлениеДенежныхДокументов));
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДата()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЛОЖЬ КАК ПоступлениеПоЗаказам,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДанныеДокумента.Курс КАК Курс,
	|	ДанныеДокумента.Кратность КАК Кратность
	|
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ПоЗаказу = Выборка.ПоступлениеПоЗаказам;
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
		Курс = Выборка.Курс;
		Кратность = Выборка.Кратность;
	Иначе
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		ПоЗаказу = Ложь;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
		Курс = 1;
		Кратность = 1;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Дата", Дата);
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Партнер", Партнер);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("Договор", Договор);
	СтруктураРеквизитов.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	СтруктураРеквизитов.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	СтруктураРеквизитов.Вставить("ПоЗаказу", ПоЗаказу);
	СтруктураРеквизитов.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("Курс", Курс);
	СтруктураРеквизитов.Вставить("Кратность", Кратность);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Выбранная хозяйственная операция
//	МассивВсехРеквизитов - Массив - Массив всех имен реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемых в выбранной хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Валюта");
	МассивВсехРеквизитов.Добавить("ВалютаВзаиморасчетов");
	МассивВсехРеквизитов.Добавить("ГруппаФинансовогоУчета");
	МассивВсехРеквизитов.Добавить("ДатаВходящегоДокумента");
	МассивВсехРеквизитов.Добавить("ДатаПлатежа");
	МассивВсехРеквизитов.Добавить("Договор");
	МассивВсехРеквизитов.Добавить("Контрагент");
	МассивВсехРеквизитов.Добавить("НомерВходящегоДокумента");
	МассивВсехРеквизитов.Добавить("Партнер");
	МассивВсехРеквизитов.Добавить("ПодотчетноеЛицо");
	МассивВсехРеквизитов.Добавить("ПодразделениеОтправитель");
	МассивВсехРеквизитов.Добавить("Соглашение");
	МассивВсехРеквизитов.Добавить("СтатьяДвиженияДенежныхСредств");
	МассивВсехРеквизитов.Добавить("ФормаОплаты");
	МассивВсехРеквизитов.Добавить("ПорядокРасчетов");
	МассивВсехРеквизитов.Добавить("ПорядокОплаты");
	
	МассивВсехРеквизитов.Добавить("ДенежныеДокументы.Валюта");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика Тогда
		МассивРеквизитовОперации.Добавить("Партнер");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("Договор");
		МассивРеквизитовОперации.Добавить("Соглашение");
		МассивРеквизитовОперации.Добавить("ДатаПлатежа");
		МассивРеквизитовОперации.Добавить("ФормаОплаты");
		МассивРеквизитовОперации.Добавить("ПорядокРасчетов");
		МассивРеквизитовОперации.Добавить("ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовОперации.Добавить("ДатаВходящегоДокумента");
		МассивРеквизитовОперации.Добавить("НомерВходящегоДокумента");
		МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("Валюта");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника Тогда
		МассивРеквизитовОперации.Добавить("ПодотчетноеЛицо");
		МассивРеквизитовОперации.Добавить("ПодразделениеОтправитель");
		МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("ДенежныеДокументы.Валюта");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
#Область ТекстОтПоставщика // (Дт 50.03 :: Кт 60.ХХ)
	ТекстОтПоставщика = "
	|ВЫБРАТЬ //// Поступление от поставщика (Дт 50.03 :: Кт 60.ХХ)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.Сумма) КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	// 4D:ERP для Беларуси, Екатерина, 01.10.2015 15:03:38 
	// Локализация плана счетов, №8969
	// {
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы) КАК СчетДт,
	// }
	// 4D
	|
	|	Строки.ДенежныйДокумент КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	Строки.Количество КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками) КАК ВидСчетаКт,
	|	ЕСТЬNULL(Расчеты.ГруппаФинансовогоУчета, Операция.ГруппаФинансовогоУчета) КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.ВалютаВзаиморасчетов КАК ВалютаКт,
	|	ЕСТЬNULL(Расчеты.Подразделение, Операция.Подразделение) КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	Операция.Контрагент КАК СубконтоКт1,
	|	Операция.Договор КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.СуммаВзаиморасчетов КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Поступление от поставщика"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеДенежныхДокументов КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеДенежныхДокументов.ДенежныеДокументы КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Строки.Ссылка = Суммы.Регистратор
	|		И Строки.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Расчеты КАК Расчеты
	|	ПО 
	|		Операция.Ссылка = Расчеты.Ссылка
	|	
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика)
	|";
#КонецОбласти
	
#Область ТекстОтПодотчетника // (Дт 50.03 :: Кт 71.01)
	ТекстОтПодотчетника = "
	|ВЫБРАТЬ //// Поступление от подотчетного лица (Дт 50.03 :: Кт 71.01)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.Сумма) КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Строки.Валюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	// 4D:ERP для Беларуси, Екатерина, 01.10.2015 14:54:21 
	// Локализация плана счетов, №8969
	// {
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы) КАК СчетДт,
	// }
	// 4D
	|
	|	Строки.ДенежныйДокумент КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	Строки.Количество КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Строки.Валюта КАК ВалютаКт,
	|	Операция.ПодразделениеОтправитель КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Суммы.СуммаБезНДСРегл ЕСТЬ NULL ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Поступление от подотчетного лица"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеДенежныхДокументов КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеДенежныхДокументов.ДенежныеДокументы КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Строки.Ссылка = Суммы.Регистратор
	|		И Строки.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника)
	|";
#КонецОбласти
	
	Возврат ""
		+ ТекстОтПоставщика + " ОБЪЕДИНИТЬ ВСЕ "
		+ ТекстОтПодотчетника
		+ "";
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, 
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//	ТекстЗапроса - Строка - текст запроса создания временных таблиц.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка,
	|	Расчеты.ЗаказПоставщику.Подразделение КАК Подразделение,
	|	Расчеты.ЗаказПоставщику.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Аналитика.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ Расчеты
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	ПО ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

Функция ТекстЗапросаРасходныйКассовыйОрдер()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация                                         КАК Организация,
	|	ДанныеДокумента.Партнер                                             КАК Партнер,
	|	ДанныеДокумента.Контрагент                                          КАК Контрагент,
	|	ДанныеДокумента.Договор                                             КАК Договор,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)       КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Валюта                                              КАК Валюта,
	|	&Ссылка                                                             КАК ДокументОснование,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.Контрагент.НаименованиеПолное <> """" ТОГДА
	|		ДанныеДокумента.Контрагент.НаименованиеПолное
	|	ИНАЧЕ
	|		ДанныеДокумента.Контрагент.Наименование
	|	КОНЕЦ КАК Выдать,
	|	
	|	ДанныеДокумента.СуммаВзаиморасчетов                                 КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСписаниеБезналичныхДенежныхСредств()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация                                         КАК Организация,
	|	ДанныеДокумента.Партнер                                             КАК Партнер,
	|	ДанныеДокумента.Контрагент                                          КАК Контрагент,
	|	ДанныеДокумента.Договор                                             КАК Договор,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)       КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Валюта                                              КАК Валюта,
	|	&Ссылка                                                             КАК ДокументОснование,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.Контрагент.НаименованиеПолное <> """" ТОГДА
	|		ДанныеДокумента.Контрагент.НаименованиеПолное
	|	ИНАЧЕ
	|		ДанныеДокумента.Контрагент.Наименование
	|	КОНЕЦ КАК Выдать,
	|	
	|	ДанныеДокумента.СуммаВзаиморасчетов                                 КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаявкаНаРасходованиеДенежныхСредств()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация                                         КАК Организация,
	|	ДанныеДокумента.Партнер                                             КАК Партнер,
	|	ДанныеДокумента.Контрагент                                          КАК Контрагент,
	|	ДанныеДокумента.Договор                                             КАК Договор,
	|	ДанныеДокумента.Подразделение                                       КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)       КАК ХозяйственнаяОперация,
	|	&Ссылка                                                             КАК ДокументОснование,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ДанныеДокумента.ФормаОплаты                                         КАК ФормаОплатыЗаявки,
	|	
	|	ДанныеДокумента.Договор.БанковскийСчет КАК БанковскийСчет,
	|	ЕСТЬNULL(ДанныеДокумента.Договор.БанковскийСчет.ВалютаДенежныхСредств, ДанныеДокумента.Валюта) КАК Валюта,
	|	
	|	ДанныеДокумента.СуммаВзаиморасчетов                                 КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАвансовыйОтчет()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Организация                                         КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо                                     КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Подразделение                                       КАК Подразделение,
	|	ДанныеДокумента.Комментарий                                         КАК Комментарий,
	|	&Ссылка                                                             КАК ДокументПоступления,
	|	
	|	ДенежныеСредства.Валюта                                             КАК Валюта,
	|	-ДенежныеСредства.СуммаОстаток                                      КАК Сумма
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(,
	|		
	|	) КАК ДенежныеСредства
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|	ПО
	|		Истина //ДанныеДокумента.Ссылка = ДенежныеСредства.РасчетныйДокумент
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДенежныеДокументы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДенежныеСредстваУПодотчетныхЛиц(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияДенежныхСредств(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияДенежныеСредстваКонтрагент(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Выполним запрос и поместим результаты запроса в дополнительные свойства
	ПроведениеСерверУТ.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                          КАК Период,
	|	ДанныеДокумента.Ссылка                        КАК Ссылка,
	|	ДанныеДокумента.Организация                   КАК Организация,
	|	ДанныеДокумента.Валюта                        КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер                       КАК Партнер,
	|	ДанныеДокумента.Партнер                       КАК Поставщик,
	|	ДанныеДокумента.Контрагент                    КАК Контрагент,
	|	ДанныеДокумента.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.Подразделение                 КАК Подразделение,
	|	ДанныеДокумента.ПодразделениеОтправитель      КАК ПодразделениеОтправитель,
	|	ДанныеДокумента.ПодотчетноеЛицо               КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Соглашение                    КАК Соглашение,
	|	ДанныеДокумента.ДатаПлатежа                   КАК ДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты                   КАК ФормаОплаты,
	|	ДанныеДокумента.МОЛ                           КАК МОЛПолучатель,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ДанныеДокумента.Договор
	|	ИНАЧЕ
	|		ДанныеДокумента.Ссылка
	|	КОНЕЦ                                         КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                         КАК РасчетыПоДоговорам,
	|	ДанныеДокумента.Договор                       КАК Договор,
	|	ДанныеДокумента.ГруппаФинансовогоУчета        КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.НаправлениеДеятельности		  КАК НаправлениеДеятельности,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(ДанныеДокумента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ГрафикИсполненияВДоговоре
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	////////////////////////////////////////////////////////////////////////////
	// Установим параметры запроса
	
	Для Каждого Колонка из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВалютаУпр",                                 Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегл",                                Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("КонтролироватьВыдачуПодОтчетВРазрезеЦелей", ПолучитьФункциональнуюОпцию("КонтролироватьВыдачуПодОтчетВРазрезеЦелей"));
	
КонецПроцедуры

Функция ТекстЗапросаВтДенежныеДокументы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтДенежныеДокументы";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДД.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаДД.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ТаблицаДД.ДенежныйДокумент     КАК ДенежныйДокумент,
	|	ТаблицаДД.Количество           КАК Количество,
	|	ТаблицаДД.Цена                 КАК Цена,
	|	ТаблицаДД.Валюта               КАК Валюта,
	|	ТаблицаДД.Сумма                КАК Сумма,
	|	ТаблицаДД.СуммаВзаиморасчетов  КАК СуммаВзаиморасчетов,
	|
	|	ВЫБОР КОГДА ТаблицаДД.Сумма = 0       // Не указана сумма, хоть такое и невозможно
	|		ИЛИ (ТаблицаДД.Валюта = &ВалютаУпр) // Валюты совпадают
	|		ИЛИ КурсУпр.Курс ЕСТЬ NULL          // Нет курса упр. валюты
	|		ИЛИ КурсДокумента.Курс ЕСТЬ NULL    // Нет курса валюты ДД
	|		ИЛИ (КурсДокумента.Курс / КурсДокумента.Кратность) = (КурсУпр.Курс / КурсУпр.Кратность) // Одинаковые курсы
	|	ТОГДА
	|		ТаблицаДД.Сумма
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ((ТаблицаДД.Сумма * КурсДокумента.Курс * КурсУпр.Кратность) / (КурсУпр.Курс * КурсДокумента.Кратность) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР КОГДА ТаблицаДД.Сумма = 0        // Не указана сумма, хоть такое и невозможно
	|		ИЛИ (ТаблицаДД.Валюта = &ВалютаРегл) // Валюты совпадают
	|		ИЛИ КурсРегл.Курс ЕСТЬ NULL          // Нет курса регл. валюты
	|		ИЛИ КурсДокумента.Курс ЕСТЬ NULL     // Нет курса валюты ДД
	|		ИЛИ (КурсДокумента.Курс / КурсДокумента.Кратность) = (КурсРегл.Курс / КурсРегл.Кратность) // Одинаковые курсы
	|	ТОГДА
	|		ТаблицаДД.Сумма
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ((ТаблицаДД.Сумма * КурсДокумента.Курс * КурсРегл.Кратность) / (КурсРегл.Курс * КурсДокумента.Кратность) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаРегл
	|
	|ПОМЕСТИТЬ ВтДенежныеДокументы
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов.ДенежныеДокументы КАК ТаблицаДД
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсДокумента
	|	ПО
	|		ТаблицаДД.Валюта = КурсДокумента.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУпр) КАК КурсУпр
	|	ПО
	|		(ИСТИНА)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаРегл) КАК КурсРегл
	|	ПО
	|		(ИСТИНА)
	|ГДЕ
	|	ТаблицаДД.Ссылка = &Ссылка
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДенежныйДокумент";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеДокументы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеДокументы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДенежныеДокументы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДенежныеДокументы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|	&МОЛПолучатель                         КАК МОЛ,
	|	ТаблицаДД.ДенежныйДокумент             КАК ДенежныйДокумент,
	|	ТаблицаДД.Количество                   КАК Количество,
	|	ТаблицаДД.СуммаУпр                     КАК СуммаУпр,
	|	ТаблицаДД.СуммаРегл                    КАК СуммаРегл,
	|	ТаблицаДД.Сумма                        КАК Сумма
	|ИЗ
	|	ВтДенежныеДокументы КАК ТаблицаДД
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДенежныйДокумент";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
			И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.ВалютаВзаиморасчетов,
	                                                                         Неопределено,
	                                                                         Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",  Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаАналитикаУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", 
		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Запрос.Параметры));
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	УстановитьПараметрыЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Строки.НомерСтроки                     КАК НомерСтроки,
	|	&Период                                КАК Период,
	|	&Период                                КАК ДатаРегистратора,
	|	&ДатаПлатежа                           КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|
	|	Строки.ВалютаВзаиморасчетов            КАК Валюта,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&ФормаОплаты                           КАК ФормаОплаты,
	|	
	|	Строки.СуммаВзаиморасчетов             КАК Сумма,
	|	ВЫРАЗИТЬ(Строки.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Строки.Сумма * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15, 2))  КАК СуммаУпр,
	|	0                                      КАК КОплате,
	|	&Организация                           КАК Организация,
	|	&СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов.РасшифровкаПлатежа КАК Строки
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Строки.НомерСтроки                     КАК НомерСтроки,
	|	КОНЕЦПЕРИОДА(&ДатаПлатежа, День)       КАК Период,
	|	&Период                                КАК ДатаРегистратора,
	|	&ДатаПлатежа                           КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|
	|	Строки.ВалютаВзаиморасчетов            КАК Валюта,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&ФормаОплаты                           КАК ФормаОплаты,
	|	
	|	0                                      КАК Сумма,
	|	0                                      КАК СуммаРегл,
	|	0                                      КАК СуммаУпр,
	|	Строки.СуммаВзаиморасчетов             КАК КОплате,
	|	&Организация                           КАК Организация,
	|	&СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов.РасшифровкаПлатежа КАК Строки
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика)
	|	И НЕ &ГрафикИсполненияВДоговоре
	|
	|УПОРЯДОЧИТЬ ПО
	|	Строки.НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваУПодотчетныхЛиц(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваУПодотчетныхЛиц";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДенежныеДокументы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДенежныеДокументы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	&ПодотчетноеЛицо                       КАК ПодотчетноеЛицо,
	|	&ПодразделениеОтправитель              КАК Подразделение,
	|	ВЫБОР КОГДА ТаблицаДД.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		&ВалютаРегл
	|	ИНАЧЕ
	|		ТаблицаДД.Валюта
	|	КОНЕЦ КАК Валюта,
	
	|	ВЫБОР КОГДА &КонтролироватьВыдачуПодОтчетВРазрезеЦелей ТОГДА
	|		&СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ                                  КАК ЦельВыдачи,
	
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&СтатьяДвиженияДенежныхСредств         КАК СтатьяДвиженияДенежныхСредств,
	|	СУММА(ТаблицаДД.Сумма)                 КАК Сумма,
	|	СУММА(ТаблицаДД.СуммаРегл)             КАК СуммаРегл,
	|	СУММА(ТаблицаДД.СуммаУпр)              КАК СуммаУпр,
	|	СУММА(ТаблицаДД.Сумма)                 КАК КОтчету
	|ИЗ
	|	ВтДенежныеДокументы КАК ТаблицаДД
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДД.Валюта";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДенежныеДокументы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДенежныеДокументы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДД.НомерСтроки         КАК НомерСтроки,
	|	&Период                       КАК Период,
	|	ТаблицаДД.Валюта              КАК Валюта,
	|	ТаблицаДД.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДД.Сумма               КАК СуммаБезНДС,
	|	НЕОПРЕДЕЛЕНО                  КАК СтавкаНДС,
	|	0                             КАК СуммаНДС,
	|	ТаблицаДД.СуммаРегл           КАК СуммаБезНДСРегл,
	|	0                             КАК СуммаНДСРегл,
	|	НЕОПРЕДЕЛЕНО                  КАК ТипРасчетов
	|
	|ИЗ
	|	ВтДенежныеДокументы КАК ТаблицаДД
	|
	|ГДЕ
	|	ТаблицаДД.Валюта <> &ВалютаРегл
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияДенежныхСредств(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияДенежныхСредств";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДенежныеДокументы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДенежныеДокументы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период                          КАК Период,
	|	&ХозяйственнаяОперация           КАК ХозяйственнаяОперация,
	|	&Организация                     КАК Организация,
	|	&Подразделение                   КАК Подразделение,
	|
	|	&ПодотчетноеЛицо                 КАК ДенежныеСредства,
	|	&НаправлениеДеятельности         КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваУПодотчетногоЛица) КАК ТипДенежныхСредств,
	|	&СтатьяДвиженияДенежныхСредств   КАК СтатьяДвиженияДенежныхСредств,
	|
	|	ДанныеДокумента.Валюта           КАК Валюта,
	|
	|	ДанныеДокумента.ДенежныйДокумент                             КАК КорДенежныеСредства,
	|	&НаправлениеДеятельности                                     КАК КорНаправлениеДеятельности,
	|	Значение(Перечисление.ТипыДенежныхСредств.ДенежныеДокументы) КАК КорТипДенежныхСредств,
	|	ДанныеДокумента.Валюта                                       КАК КорВалюта,
	|
	|	СУММА(ДанныеДокумента.СуммаУпр)  КАК Сумма,
	|	СУММА(ДанныеДокумента.СуммаРегл) КАК СуммаРегл,
	|	СУММА(ДанныеДокумента.Сумма)     КАК СуммаВВалюте,
	|	СУММА(ДанныеДокумента.Сумма)     КАК СуммаВКорВалюте,
	|
	|	НЕОПРЕДЕЛЕНО                     КАК ИсточникГФУДенежныхСредств,
	|	НЕОПРЕДЕЛЕНО                     КАК ИсточникКорГФУДенежныхСредств
	|ИЗ
	|	ВтДенежныеДокументы КАК ДанныеДокумента
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ДенежныйДокумент,
	|	ДанныеДокумента.Валюта";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаДвиженияДенежныеСредстваКонтрагент(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияДенежныеСредстваКонтрагент";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДенежныеДокументы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДенежныеДокументы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	&Организация             КАК Организация,
	|	&Подразделение           КАК Подразделение,
	|
	|	ТаблицаРасшифровкаПлатежа.ДенежныйДокумент                   КАК ДенежныеСредства,
	|	&НаправлениеДеятельности                                     КАК НаправлениеДеятельностиДС,
	|	Значение(Перечисление.ТипыДенежныхСредств.ДенежныеДокументы) КАК ТипДенежныхСредств,
	|	&СтатьяДвиженияДенежныхСредств                               КАК СтатьяДвиженияДенежныхСредств,
	|	&Валюта                  КАК ВалютаПлатежа,
	|
	|	&Партнер                 КАК Партнер,
	|	&Контрагент              КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	&Договор                 КАК Договор,
	|	&ОбъектРасчетов          КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО             КАК РасчетныйДокумент,
	|
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаУпр)  КАК СуммаОплаты,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаРегл) КАК СуммаОплатыРегл,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)     КАК СуммаОплатыВВалютеПлатежа,
	|
	|	0 КАК СуммаПостоплаты,
	|	0 КАК СуммаПостоплатыРегл,	
	|	0 КАК СуммаПостоплатыВВалютеПлатежа,
	|	
	|	0 КАК СуммаПредоплаты,
	|	0 КАК СуммаПредоплатыРегл,
	|	0 КАК СуммаПредоплатыВВалютеПлатежа,
	|
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаОплатыВВалютеВзаиморасчетов,
	|	0                                                    КАК СуммаПостоплатыВВалютеВзаиморасчетов,
	|	0                                                    КАК СуммаПредоплатыВВалютеВзаиморасчетов,
	|
	|	НЕОПРЕДЕЛЕНО    КАК ИсточникГФУДенежныхСредств,
	|	&ОбъектРасчетов КАК ИсточникГФУРасчетов,
	|	ЛОЖЬ            КАК ОтложенноеПроведение 
	|ИЗ
	|	ВтДенежныеДокументы КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасшифровкаПлатежа.ДенежныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|
	|	ДанныеРегистра.ДенежныеСредства,
	|	ДанныеРегистра.НаправлениеДеятельностиДС,
	|	ДанныеРегистра.ТипДенежныхСредств,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.ВалютаПлатежа,
	|
	|	ДанныеРегистра.Партнер,
	|	ДанныеРегистра.Контрагент,
	|	ДанныеРегистра.НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.Договор,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.РасчетныйДокумент,
	|
	|	ДанныеРегистра.СуммаОплаты,
	|	ДанныеРегистра.СуммаОплатыРегл,
	|	ДанныеРегистра.СуммаОплатыВВалютеПлатежа,
	|
	|	ДанныеРегистра.СуммаПостоплаты,
	|	ДанныеРегистра.СуммаПостоплатыРегл,
	|	ДанныеРегистра.СуммаПостоплатыВВалютеПлатежа,
	|
	|	ДанныеРегистра.СуммаПредоплаты,
	|	ДанныеРегистра.СуммаПредоплатыРегл,
	|	ДанныеРегистра.СуммаПредоплатыВВалютеПлатежа,
	|
	|	ДанныеРегистра.ВалютаВзаиморасчетов,
	|
	|	ДанныеРегистра.СуммаОплатыВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаПостоплатыВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаПредоплатыВВалютеВзаиморасчетов,
	|
	|	ДанныеРегистра.ИсточникГФУДенежныхСредств,
	|	ДанныеРегистра.ИсточникГФУРасчетов,
	|	ИСТИНА 
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Регистратор = &Ссылка
	|	И ОтложенноеПроведение";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приходный ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ПоступлениеДенежныхДокументов";
	КомандаПечати.Идентификатор = "ПриходныйОрдер";
	КомандаПечати.Представление = НСтр("ru = 'Приходный ордер'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Авансовый отчет
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.АвансовыйОтчет";
	КомандаПечати.Идентификатор = "АвансовыйОтчет";
	КомандаПечати.Представление = НСтр("ru = 'Авансовый отчет'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//++ НЕ УТ
	КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент.ПроверкаОтраженияВРеглУчете";
	//-- НЕ УТ
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходныйОрдер") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПриходныйОрдер",
			"ПриходныйОрдер",
			СформироватьПечатнуюФормуПриходныйОрдер(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АвансовыйОтчет",
			НСтр("ru='Авансовый отчет'"),
			Документы.АвансовыйОтчет.СформироватьПечатнуюФормуАвансовогоОтчета(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуПриходныйОрдер(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеДенежныхДокументов_ПриходныйОрдер";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.Ссылка						КАК Ссылка,
	|	Документы.Организация					КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Документы.Подразделение)	КАК ПредставлениеПодразделения,
	|	ВЫБОР КОГДА Документы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика) ТОГДА
	|		Документы.Контрагент
	|	ИНАЧЕ
	|		Документы.ПодотчетноеЛицо
	|	КОНЕЦ									КАК ПринятоОт,
	|	Документы.СуммаДокумента				КАК СуммаДокумента,
	|	Документы.Валюта						КАК ВалютаДокумента,
	|	Документы.Номер							КАК Номер,
	|	Документы.Дата							КАК Дата,
	|	Документы.Организация.Префикс			КАК Префикс
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДД.НомерСтроки						КАК НомерСтроки,
	|	ДД.Ссылка							КАК Ссылка,
	|	ДД.ДенежныйДокумент					КАК ДенежныйДокумент,
	|	ДД.ДенежныйДокумент.Наименование	КАК ДенежныйДокументПредставление,
	|	СУММА(ДД.Количество)				КАК Количество,
	|	СУММА(ДД.Сумма)						КАК Сумма,
	|	ДД.Валюта							КАК Валюта,
	|	ДД.Валюта.Наименование				КАК ВалютаПредставление
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов.ДенежныеДокументы КАК ДД
	|ГДЕ
	|	ДД.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДД.НомерСтроки,
	|	ДД.Ссылка,
	|	ДД.ДенежныйДокумент,
	|	ДД.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ДенежныйДокументПредставление,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеДенежныхДокументов.ПФ_MXL_ПриходныйОрдер");
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ДанныеПечати = ПакетЗапросов[0].Выбрать();
	ВыборкаПоДокументам = ПакетЗапросов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Создание массива для проверки: какие из докуметов не попали в выборку
	МассивПроверки = Новый Массив;
	Для Каждого Ссылка Из МассивОбъектов Цикл
		МассивПроверки.Добавить(Ссылка);
	КонецЦикла;
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(Новый Структура("Ссылка", ДанныеПечати.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПроверки.Удалить(МассивПроверки.Найти(ДанныеПечати.Ссылка));
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеДенежныхДокументов.ПФ_MXL_ПриходныйОрдер");
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Шапка = ДанныеПечати;
		
		// Выводим шапку
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		УстановитьПараметр(ОбластьМакета,
			"ТекстЗаголовка",
			ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Приходный ордер'")));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Организация");
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		УстановитьПараметр(ОбластьМакета,
			"ПредставлениеОрганизации",
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,"));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подразделение");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПринятоОт");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Итог = 0;
		Валюта = Неопределено;
		Выборка = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Итог = Итог + Выборка.Сумма;
			Если Валюта = Неопределено Тогда
				Валюта = Выборка.Валюта;
			ИначеЕсли Валюта <> Выборка.Валюта Тогда
				Итог = 0; // Разные валюты
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРамка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести Итого
		Если Итог <> 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			УстановитьПараметр(ОбластьМакета, "Всего", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Итог));
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести Сумму прописью
		Если Шапка.СуммаДокумента <> 0 И Шапка.ВалютаДокумента <> 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			УстановитьПараметр(ОбластьМакета, "ИтоговаяСтрока", НСтр("ru = 'Всего наименований'") + " " + Выборка.Количество()
				+ НСтр("ru = ', на сумму'") + " " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента));
			УстановитьПараметр(ОбластьМакета,
				"СуммаПрописью",
				ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента));
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивПроверки Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(
				НСтр("ru = 'В %Ссылка% отсутствуют денежные документы. Печать приходного ордера не требуется.'"),
				"%Ссылка%",
				Ссылка),
			Ссылка);
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецФункции

#КонецОбласти

#Область Прочее

// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПросроченнойОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
	
	Возврат СтруктураСостоянияРасчетов;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УП 2.2.1,
// заполняет реквизиты "Порядок оплаты", "Курс" и "Кратность" документа "ПоступлениеДенежныхДокументов".
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПоступлениеДенежныхДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ПоступлениеДенежныхДокументов
	|ГДЕ ПоступлениеДенежныхДокументов.ПорядокОплаты = Значение(Перечисление.ПорядокОплатыПоСоглашениям.ПустаяСсылка)
	|		ИЛИ (ПоступлениеДенежныхДокументов.Курс = 0 И НЕ ПоступлениеДенежныхДокументов.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) 
	|			И НЕ ПоступлениеДенежныхДокументов.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПоступлениеДенежныхДокументов";
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка                      КАК Ссылка,
	|	ОбъектыДляОбработки.Ссылка.ВерсияДанных         КАК ВерсияДанных,
	|	ВЫБОР 
	|		КОГДА НЕ ОбъектыДляОбработки.Ссылка.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ОбъектыДляОбработки.Ссылка.Договор.ПорядокОплаты
	|		КОГДА НЕ ОбъектыДляОбработки.Ссылка.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
	|			И НЕ ОбъектыДляОбработки.Ссылка.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|			ТОГДА ОбъектыДляОбработки.Ссылка.Соглашение.ПорядокОплаты
	|		ИНАЧЕ	
	|			ВЫБОР 
	|				КОГДА ОбъектыДляОбработки.Ссылка.ВалютаВзаиморасчетов = &ВалютаРеглУчета 
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях)
	|				ИНАЧЕ
	|					ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях)
	|			КОНЕЦ
	|	КОНЕЦ                                           КАК ПорядокОплаты,
	|	ОбъектыДляОбработки.Ссылка.Дата                 КАК Дата,
	|	ОбъектыДляОбработки.Ссылка.Валюта               КАК Валюта,
	|	ОбъектыДляОбработки.Ссылка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОбъектыДляОбработки.Ссылка.СуммаВзаиморасчетов  КАК СуммаВзаиморасчетов,
	|	ОбъектыДляОбработки.Ссылка.СуммаДокумента       КАК СуммаДокумента
	|ПОМЕСТИТЬ ТаблицаСсылок
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Дата          КАК Дата,
	|	ТаблицаСсылок.Валюта        КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ДатыКурсовВалютыДокумента
	|ИЗ
	|	ТаблицаСсылок КАК ТаблицаСсылок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ТаблицаСсылок.Валюта = КурсыВалют.Валюта
	|			И ТаблицаСсылок.Дата >= КурсыВалют.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСсылок.Дата,
	|	ТаблицаСсылок.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Дата                 КАК Дата,
	|	ТаблицаСсылок.ВалютаВзаиморасчетов КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период)        КАК ДатаКурса
	|ПОМЕСТИТЬ ДатыКурсовВалютыВзаиморасчетов
	|ИЗ
	|	ТаблицаСсылок КАК ТаблицаСсылок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ТаблицаСсылок.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|			И ТаблицаСсылок.Дата >= КурсыВалют.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСсылок.Дата,
	|	ТаблицаСсылок.ВалютаВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Ссылка               КАК Ссылка,
	|	ДанныеДляОбработки.ВерсияДанных         КАК ВерсияДанных,
	|	ДанныеДляОбработки.ПорядокОплаты        КАК ПорядокОплаты,
	|	ДанныеДляОбработки.Валюта               КАК ВалютаДокумента,
	|	ДанныеДляОбработки.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДляОбработки.СуммаДокумента       КАК СуммаДокумента,
	|	ДанныеДляОбработки.СуммаВзаиморасчетов  КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалютыДокумента.Кратность,1)          КАК КратностьВалютыДокумента,
	|	ЕСТЬNULL(КурсыВалютыВзаиморасчетов.Кратность,1)     КАК КратностьВалютыВзаиморасчетов
	|ИЗ
	|	ТаблицаСсылок КАК ДанныеДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыКурсовВалютыДокумента КАК ДатыКурсовВалютыДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют КАК КурсыВалютыДокумента
	|			ПО ДатыКурсовВалютыДокумента.ДатаКурса = КурсыВалютыДокумента.Период
	|				И ДатыКурсовВалютыДокумента.Валюта = КурсыВалютыДокумента.Валюта
	|		ПО ДанныеДляОбработки.Валюта = ДатыКурсовВалютыДокумента.Валюта
	|			И ДанныеДляОбработки.Дата = ДатыКурсовВалютыДокумента.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыКурсовВалютыВзаиморасчетов КАК ДатыКурсовВалютыВзаиморасчетов
	|			ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют КАК КурсыВалютыВзаиморасчетов
	|			ПО ДатыКурсовВалютыВзаиморасчетов.ДатаКурса = КурсыВалютыВзаиморасчетов.Период
	|				И ДатыКурсовВалютыВзаиморасчетов.Валюта = КурсыВалютыВзаиморасчетов.Валюта
	|		ПО ДанныеДляОбработки.ВалютаВзаиморасчетов = ДатыКурсовВалютыВзаиморасчетов.Валюта
	|			И ДанныеДляОбработки.Дата = ДатыКурсовВалютыВзаиморасчетов.Дата
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									МетаданныеДокумента,
									Выборка.Ссылка,
									ТекстСообщения);
			Продолжить;
			
		КонецПопытки;
		
		ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
		Если ДокументОбъект = Неопределено Тогда
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		ОбъектИзменен = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ПорядокОплаты) Тогда
			ДокументОбъект.ПорядокОплаты = Выборка.ПорядокОплаты;
			ОбъектИзменен = Истина;
		КонецЕсли;
		
		Если ДокументОбъект.Курс = 0 И ЗначениеЗаполнено(ДокументОбъект.Валюта) И ЗначениеЗаполнено(ДокументОбъект.ВалютаВзаиморасчетов) Тогда
			Если Выборка.СуммаВзаиморасчетов = 0 ИЛИ Выборка.СуммаДокумента = 0 ИЛИ Выборка.ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				ДокументОбъект.Курс = 1;
				ДокументОбъект.Кратность = 1;
			ИначеЕсли Выборка.ВалютаДокумента = ВалютаРеглУчета И НЕ Выборка.ВалютаВзаиморасчетов = ВалютаРеглУчета Тогда
				ДокументОбъект.Курс = Окр(Выборка.СуммаДокумента / Выборка.СуммаВзаиморасчетов * Выборка.КратностьВалютыВзаиморасчетов, 4);
				ДокументОбъект.Кратность = Выборка.КратностьВалютыВзаиморасчетов;
			Иначе
				ДокументОбъект.Курс = Окр(Выборка.СуммаВзаиморасчетов / Выборка.СуммаДокумента * Выборка.КратностьВалютыДокумента, 4);
				ДокументОбъект.Кратность = Выборка.КратностьВалютыДокумента;
			КонецЕсли;
			ОбъектИзменен = Истина;
		КонецЕсли;
	
		Попытка
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, , , РежимЗаписиДокумента.Запись);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеДокумента,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
