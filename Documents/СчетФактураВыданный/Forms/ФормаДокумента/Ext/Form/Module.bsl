// 4D:ERP для Беларуси
// {
// Форма изменена
// }
// 4D

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// 4D:ERP для Беларуси
// ЭСЧФ
// {
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ
// }
// 4D

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ТребуетсяОткрытиеПечатнойФормы Тогда
		Возврат;
	КонецЕсли;

	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(Отказ, СтандартнаяОбработка, ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	// 4D:ERP для Беларуси, Дмитрий, 25.09.2017 21:53:57 
	// ЭСЧФ
	// {
	Элементы.ФормаДокументы.Заголовок = "ЭСЧФ";
	// }
	// 4D

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТребуетсяОткрытиеПечатнойФормы Тогда
		
		Отказ = Истина;
		СамообслуживаниеКлиент.ПечатьДокументСчетФактура(Объект.ДокументОснование);
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И (Параметр.Свойство("ФормаВладелец") И Параметр.ФормаВладелец = УникальныйИдентификатор) Тогда
		
		Если Элементы.СоздатьКорректировочный.Видимость Тогда
			УстановитьВидимостьКомандыСоздатьКорректировочный();
		КонецЕсли;
		
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		ТребуетсяОткрытиеПечатнойФормы = Истина;
		Возврат;
	КонецЕсли;
		// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	ОснованияДляОповещения = ПолучитьСписокОснованийДляОповещения();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Поле ""Дата выставления"" не заполнено'");
	
	Если Выставлен И НЕ ЗначениеЗаполнено(Объект.ДатаВыставления) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДатаВыставления","Объект",Отказ);
	ИначеЕсли НЕ Выставлен Тогда
		Объект.ДатаВыставления = '00010101';
		Объект.ВыставленВЭлектронномВиде = Ложь;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Если КлиентЮрЛицо И ЗначениеКПП <> Объект.КППКонтрагента Тогда
			Объект.КППКонтрагента = ?(ЗначениеКПП = КППКлиента, "", ЗначениеКПП);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// 4D:ERP для Беларуси, ВалентинМ, 19.06.2017 15:03:18 
	// ЭСЧФ
	// {
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ПроведениеИзФормыДокумента") Тогда
		ТекущийОбъект.ДополнительныеСвойства.ПроведениеИзФормыДокумента = Истина;
	КонецЕсли;
	// }
	// 4D 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МассивОснований = ОснованияДляОповещения.ВыгрузитьЗначения();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОснований, ПолучитьСписокОснованийДляОповещения(), Истина);
	ОснованияДляОповещения.ЗагрузитьЗначения(МассивОснований);
	
	ОбновитьИнформациюПоДокументамОснованиям();
	ОбновитьИнформациюПоСчетуФактуреОснованию();
	
	УстановитьДоступностьИзмененийПоФлагуВыставлен();
	
	УстановитьВидимостьКомандыСоздатьКорректировочный();
	
	// Подсистема "ОбменСКонтрагентами".
	//ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	//ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	//ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	//ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	//ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	//ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами	
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрОповещения.Вставить("Организация", Объект.Организация);
	ПараметрОповещения.Вставить("СписокОснований", ОснованияДляОповещения);
	Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		ПараметрОповещения.Вставить("ФормаВладелец", ЭтаФорма.ВладелецФормы.УникальныйИдентификатор);
	КонецЕсли;
	
	Оповестить("Запись_СчетФактураВыданный", ПараметрОповещения, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ПоСчетуФактуре И НЕ (Объект.Корректировочный Или Объект.Исправление) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			// 4D:ERP для Беларуси, Дмитрий
			// ЭСЧФ
			// {
			НСтр("ru = 'Не выбран счет-фактура к дополнению/исправлению.'"),,
			// }
			// 4D
			"ТекстСчетФактураОснование",,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоСчетуФактуреПриИзменении(Элемент)
	
	Если Не ПоСчетуФактуре Тогда
		
		Объект.Номер = "";
		Объект.НомерИсправления = "";
		Объект.Корректировочный = Ложь;
		Объект.Исправление = Ложь;
		
		Если ЕстьЗаполненныеИсходныеДокументы() или ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда			
			
			ОчиститьДокументыОснования();
	
		КонецЕсли;
		
	Иначе
		
		ОбновитьИнформациюПоСчетуФактуреОснованию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ПодобратьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ПодобратьДокументыОснования();
	ИначеЕсли НавигационнаяСсылка = "ИзменитьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ИзменитьДокументыОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОснованиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ОткрытьИсходныеСчетаФактуры" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьИсходныеСчетаФактуры();
	ИначеЕсли  НавигационнаяСсылка = "ВыборСчетаФактурыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ВыборСчетаФактурыОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Не ЗначениеЗаполнено(Объект.ДатаВыставления) Тогда
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИсправленииПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленПриИзменении(Элемент)
	
	ВыставленПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыставленияПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.ДатаВыставления);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентам
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежноРасчетныеДокументыСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",     Объект.Организация);
	ПараметрыФормы.Вставить("СписокОснований", СписокОснований);
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьПлатежноРасчетныеДокументыВХранилище());
	
	НовыйАдресВХранилище = Неопределено;
	
	ОткрытьФорму(
		"Документ.СчетФактураВыданный.Форма.ФормаПлатежноРасчетныеДокументы",
		ПараметрыФормы,,,,, Новый ОписаниеОповещения("ПлатежноРасчетныеДокументыСтрокойНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежноРасчетныеДокументыСтрокойНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    НовыйАдресВХранилище = Результат;
    
    ПолучитьПлатежноРасчетныеДокументыИзХранилища(НовыйАдресВХранилище);

КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ОбновитьПредставлениеВидаОперации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокКодовВидовОпераций.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("КодВидаОперацииНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.КодВидаОперации = ВыбранныйЭлемент.Значение;
		ОбновитьПредставлениеВидаОперации(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНаУменьшениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокКодовВидовОпераций.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("КодВидаОперацииНаУменьшениеНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНаУменьшениеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.КодВидаОперацииНаУменьшение = ВыбранныйЭлемент.Значение;
		ОбновитьПредставлениеВидаОперацииНаУменьшение(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНаУменьшениеПриИзменении(Элемент)
	
	ОбновитьПредставлениеВидаОперацииНаУменьшение(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеКППНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокВыбораКПП.Количество() = 0 Тогда
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ЗаполнитьСписокВыбораКПП(СписокВыбораКПП, Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВыбора = СписокВыбораКПП;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировочныйСчетФактуру(Команда)
	
	ДанныеСчетаФактуры = Новый Структура;
	ДанныеСчетаФактуры.Вставить("ДокументОснование", Объект.Ссылка);
	ДанныеСчетаФактуры.Вставить("Организация",       Объект.Организация);
	ДанныеСчетаФактуры.Вставить("Корректировочный",  Истина);
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагента(Команда)
	
	ПараметрыЗаполнения = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ИНН, Партнер");
	ПараметрыЗаполнения.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("ИспользоватьПартнеровКакКонтрагентов", ИспользоватьПартнеровКакКонтрагентов);

	Оповещение = Новый ОписаниеОповещения("ЗаполнитьГоловногоКонтрагентаЗавершение", ЭтотОбъект);
	ПартнерыИКонтрагентыКлиент.ЗаполнитьГоловногоКонтрагента(ЭтотОбъект, ПараметрыЗаполнения, Истина, Оповещение);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	//Элемент = УсловноеОформление.Элементы.Добавить();

	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НомерИсправленияПриИсправлении.Имя);

	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ссылка");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	//Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыОснования

&НаСервере
Процедура ЗаполнитьПараметрыСчетаФактурыПоОснованию(ВыбранныйСчетФактура = Неопределено)
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
	
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьПараметрыСчетаФактурыПоОснованию(ВыбранныйСчетФактура);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
		// 4D:ERP для Беларуси
		// ЭСЧФ
		// {
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьОсновныеРеквизиты();
		ДокументОбъект.ЗаполнитьУсловияПоставки();
		ДокументОбъект.ЗаполнитьТабличнуюЧасть();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		// }
		// 4D
	
	КонецЕсли;
	
	ЗаполнитьЗависимыеОтДокументовОснованийРеквизитыФормы();
	ЗаполнитьЗависимыеОтКлиентаРеквизитыФормы();
	
	ОбновитьИнформациюПоДокументамОснованиям();
	ОбновитьИнформациюПоСчетуФактуреОснованию();
	УстановитьТекстПлатежноРасчетныхДокументов();
	
	УстановитьВидимостьКомандыСоздатьКорректировочный(Истина);
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииСчетаФактуры()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьИсправлениеПоСчетуФактуре();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьЗависимыеОтДокументовОснованийРеквизитыФормы();
	ЗаполнитьЗависимыеОтКлиентаРеквизитыФормы();
	
	ОбновитьИнформациюПоДокументамОснованиям();
	ОбновитьИнформациюПоСчетуФактуреОснованию();
	УстановитьТекстПлатежноРасчетныхДокументов();
	
	УстановитьВидимостьКомандыСоздатьКорректировочный(Истина);
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоДокументамОснованиям()
	
	МассивСтрок = Новый Массив;
	
	КоличествоДокументов = Объект.ДокументыОснования.Количество();
	
	РазрешеноИзменение = ЕстьПравоНаРедактирование
		И Не (ЗначениеЗаполнено(Объект.Ссылка) И Выставлен);
	
	Если КоличествоДокументов = 0 Тогда
		
		Если РазрешеноИзменение Тогда
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Не выбраны'"), ,
				WebЦвета.Кирпичный, ,
				"ПодобратьДокументыОснования"));
			
		Иначе
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Не выбраны'"), , WebЦвета.Кирпичный));
			
		КонецЕсли;
		
	Иначе
		
		Если КоличествоДокументов = 1 Тогда
			
			ПервыйДокумент = Объект.ДокументыОснования[0].ДокументОснование;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				Строка(ПервыйДокумент), , ЦветаСтиля.ЦветГиперссылки, , ПолучитьНавигационнуюСсылку(ПервыйДокумент)));
			
		Иначе
			
			ПредставлениеДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Всего документов: %1'"),
				КоличествоДокументов);
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ПредставлениеДокументов, , ЦветаСтиля.ЦветГиперссылки, , "ИзменитьДокументыОснования"));
			
		КонецЕсли;
		
		Если РазрешеноИзменение Тогда
			
			МассивСтрок.Добавить("   ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				// 4D:ERP для Беларуси, Дмитрий
				// ЭСЧФ
				// {
				НСтр("ru = 'Изменить'"), ,
				// }
				// 4D
				ЦветаСтиля.ЦветГиперссылки, ,
				"ПодобратьДокументыОснования"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументыОснованияПредставление = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоСчетуФактуреОснованию()
	
	МассивСтрок = Новый Массив;
	// 4D:ERP для Беларуси, Дмитрий
	// ЭСЧФ
	// {
	МассивСтрок.Добавить(НСтр("ru='Дополнительный/исправленный к:'"));
	// }
	// 4D
	МассивСтрок.Добавить("   ");
	
	КоличествоСчетовФактур = ИсходныеСчетаФактуры.Количество();
	
	РазрешеноИзменение = ЕстьПравоНаРедактирование
		И Не (ЗначениеЗаполнено(Объект.Ссылка) И Выставлен);
	
	Если КоличествоСчетовФактур > 1 Тогда
		
		ПредставлениеДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Всего документов: %1'"),
			КоличествоСчетовФактур);
			
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			ПредставлениеДокументов, , ЦветаСтиля.ЦветГиперссылки, , "ОткрытьИсходныеСчетаФактуры"));
			
	Иначе
		
		Если КоличествоСчетовФактур = 1 Тогда
			
			ПерваяСтрока = ИсходныеСчетаФактуры[0];
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ПерваяСтрока.ПредставлениеСчетаФактуры, ,
				ЦветаСтиля.ЦветГиперссылки, ,
				ПолучитьНавигационнуюСсылку(ПерваяСтрока.СчетФактура)));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Исправление 
		И ЗначениеЗаполнено(Объект.СчетФактураОснование) 
		И ((КоличествоСчетовФактур = 1 
			И НЕ Объект.СчетФактураОснование = ИсходныеСчетаФактуры[0].СчетФактура)
		  ИЛИ КоличествоСчетовФактур = 0) Тогда
		
		Если КоличествоСчетовФактур > 0 Тогда
			МассивСтрок.Добавить(" / ");
		КонецЕсли;
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			СчетФактураОснованиеПредставление, ,
			ЦветаСтиля.ЦветГиперссылки, ,
			ПолучитьНавигационнуюСсылку(Объект.СчетФактураОснование)));
			
	КонецЕсли;
	
	Если ПоСчетуФактуре И РазрешеноИзменение Тогда
		
		Если Объект.Исправление И ЗначениеЗаполнено(Объект.СчетФактураОснование) 
			Или КоличествоСчетовФактур > 0 Тогда
			
			МассивСтрок.Добавить("   ");
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Изменить'"), ,
				ЦветаСтиля.ЦветГиперссылки, ,
				"ВыборСчетаФактурыОснования"));
			
		Иначе
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Не выбран счет-фактура'"), ,
				WebЦвета.Кирпичный, ,
				"ВыборСчетаФактурыОснования"));
				
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСчетФактураОснование = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокументыОснования()
	
	СтруктураПараметров = ПараметрыПодборДокументовОснований();
	
	ЗапрещеныИзменения = Не ЕстьПравоНаРедактирование Или (ЗначениеЗаполнено(Объект.Ссылка) И Выставлен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",  ЗапрещеныИзменения);
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьДокументыОснованияЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаДокументыОснования",
		СтруктураПараметров,
		ЭтаФорма, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокументыОснованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработкаИзмененияСпискаДокументовОснований(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументыОснования()
	
	СтруктураПараметров = ПараметрыПодборДокументовОснований();
	
	Оповещение = Новый ОписаниеОповещения("ПодобратьДокументыОснованияЗавершение", ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.ПодборОснованийСчетаФактуры",
		СтруктураПараметров,
		ЭтаФорма, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументыОснованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработкаИзмененияСпискаДокументовОснований(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияСпискаДокументовОснований(ИзмененныйСписокОснований)
	
	Если ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(ИзмененныйСписокОснований, СписокОснований) 
		И ИзмененныйСписокОснований.Количество() = СписокОснований.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ДокументыОснования.Очистить();
	Объект.ДокументОснование = Неопределено;
	Объект.СчетФактураОснование = Неопределено;
	
	СписокОснований = ИзмененныйСписокОснований;
	
	Если СписокОснований.Количество() > 0 Тогда
		
		Для Каждого СтрокаСписка Из СписокОснований Цикл
			СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
			СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПараметрыСчетаФактурыПоОснованию();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСчетФактурыОснования(ВыбранныйСчетФактура)
	
	Модифицированность = Истина;
	
	РеквизитыДляОбработки = Документы.СчетФактураВыданный.ПараметрыЗаполненияПоСчетуФактуре(ВыбранныйСчетФактура);
	
	Если РеквизитыДляОбработки.Исправление Тогда
		
		Объект.СчетФактураОснование = ВыбранныйСчетФактура;
		ЗаполнитьНаОснованииСчетаФактуры();
		
	ИначеЕсли РеквизитыДляОбработки.Корректировочный Тогда
		
		// 4D:ERP для Беларуси, Дмитрий
		// ЭСЧФ
		// {
		Объект.СчетФактураОснование = ВыбранныйСчетФактура;
		ЗаполнитьНаОснованииСчетаФактуры();
		// }
		// 4D
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Для выбранного документа уже введен корректировочный счет-фактура.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ВыборСчетаФактурыОснования");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПодборДокументовОснований()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокПодобранныхОснований", СписокОснований);
	СтруктураПараметров.Вставить("СчетФактура",     Объект.Ссылка);
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",      Объект.Контрагент);
	Если СписокОснований.Количество() > 0 Тогда
		СтруктураПараметров.Вставить("Валюта",      ВалютаОснованияСчетаФактуры);
	КонецЕсли;
	Если Объект.Исправление И ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда
		СтруктураПараметров.Вставить("СчетФактураИсправление", Объект.СчетФактураОснование);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ВыборСчетаФактурыОснования()
	
	СтруктураПараметров = Новый Структура;
	
	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("Исправление", Ложь);
	ЗначениеОтбора.Вставить("ПометкаУдаления", Ложь);
	ЗначениеОтбора.Вставить("Проведен", Истина);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗначениеОтбора.Вставить("Организация", Объект.Организация)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначениеОтбора.Вставить("ИсключитьСчетФактуру", Объект.Ссылка);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ВыборСчетаФактурыОснованияЗавершение", ЭтаФорма);
	
	ОткрытьФорму(
		"Документ.СчетФактураВыданный.Форма.ФормаВыбора",
		СтруктураПараметров,
		ЭтаФорма, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаФактурыОснованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьИзменениеСчетФактурыОснования(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходныеСчетаФактуры()
	
	СписокДокументов = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ИсходныеСчетаФактуры Цикл
		СписокДокументов.Добавить(СтрокаТаблицы.СчетФактура);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДокументов", СписокДокументов);
	СтруктураПараметров.Вставить("Заголовок", НСтр("ru='Корректировка к счетам-фактурам (%КоличествоДокументов%)'"));
	
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		СтруктураПараметров,
		ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеОтДокументовОснованийРеквизитыФормы()
	
	ЕстьРасчетыСКлиентом        = Истина;
	ВалютаОснованияСчетаФактуры = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	СчетФактураОснованиеПредставление = "";
	
	СписокОснований.Очистить();
	ИсходныеСчетаФактуры.Очистить();
	
	ПоСчетуФактуре = Объект.Исправление Или Объект.Корректировочный;
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПервыйДокумент = Объект.ДокументыОснования[0].ДокументОснование;
		
		ЕстьРасчетыСКлиентом = ЕстьРасчетыСКлиентом(ПервыйДокумент);
		
		ВалютаОснованияСчетаФактуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервыйДокумент, "Валюта");
		
		ТаблицаОснований = Объект.ДокументыОснования.Выгрузить();
		
		СписокОснований.ЗагрузитьЗначения(ТаблицаОснований.ВыгрузитьКолонку("ДокументОснование"));
		
		КолонкиСвертки = "ИсходныйДокумент, НомерИсходногоДокумента, ДатаИсходногоДокумента";
		ТаблицаОснований.Свернуть(КолонкиСвертки);
		
		Для Каждого СтрокаОснования Из ТаблицаОснований Цикл
			
			Если ЗначениеЗаполнено(СтрокаОснования.ИсходныйДокумент) Тогда
				
				СтрокаИсходногоСФ = ИсходныеСчетаФактуры.Добавить();
				СтрокаИсходногоСФ.СчетФактура = СтрокаОснования.ИсходныйДокумент;
				СтрокаИсходногоСФ.ПредставлениеСчетаФактуры = ПродажиСервер.ПредставлениеСчетаФактуры(
					СтрокаОснования.НомерИсходногоДокумента, СтрокаОснования.ДатаИсходногоДокумента);
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда
		
		РеквизитыСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СчетФактураОснование, "Номер, Дата");
		СчетФактураОснованиеПредставление = ПродажиСервер.ПредставлениеСчетаФактуры(РеквизитыСФ.Номер, РеквизитыСФ.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДокументыОснования()
	
	Объект.ДокументОснование = Неопределено;
	Объект.ДокументыОснования.Очистить();
	Объект.СчетФактураОснование = Неопределено;
	
	ЗаполнитьЗависимыеОтДокументовОснованийРеквизитыФормы();
	ОбновитьИнформациюПоДокументамОснованиям();
	ОбновитьИнформациюПоСчетуФактуреОснованию();
	
	Объект.ПлатежноРасчетныеДокументы.Очистить();
	Объект.СтрокаПлатежноРасчетныеДокументы =
		Документы.СчетФактураВыданный.СтрокаРасчетноПлатежныхДокументов(Объект.ПлатежноРасчетныеДокументы);
	УстановитьТекстПлатежноРасчетныхДокументов();
	
	УстановитьВидимостьКомандыСоздатьКорректировочный(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОчиститьДокументыОснования();
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ОчиститьДокументыОснования();
	
	ЗаполнитьЗависимыеОтКлиентаРеквизитыФормы();
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ВыставленПриИзмененииНаСервере()
	
	УстановитьДоступностьИзмененийПоФлагуВыставлен();
	ОбновитьИнформациюПоДокументамОснованиям();
	ОбновитьИнформациюПоСчетуФактуреОснованию();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьСписокКодовВидовОпераций();
	НастроитьВидимостьВалютыКодаОперации();
	
КонецПроцедуры

// 4D:ERP для Беларуси
// ЭСЧФ
// {
&НаКлиенте
Процедура ДоговорНомерПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорДатаПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТипСчетаФактурыПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПоставщикаПриИзменении(Элемент)
	ОпределитьСтатусыПолучателя();
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПолучателяПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	ВидДокументаПриИзмененииНаСервере();
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаСервере
Процедура ВидДокументаПриИзмененииНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьУсловияПоставки(); 
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерВыпускаТоваровПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыпускаТоваровПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаРазрешенияНаУбытиеПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура НомерЗаявленияОВвозеТоваровПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаявленияОВвозеТоваровПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаВвозаТоваровПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры
// }
// 4D

#КонецОбласти

// 4D:ERP для Беларуси
// ЭСЧФ
// {
#Область ПриИзмененииРеквизитовТабличнойЧасти

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номеклатура) И ТипЗнч(ТекущаяСтрока.Номеклатура) <> Тип("Строка") Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Номеклатура, "КодТНВЭД, КодОКЭД");
		ТекущаяСтрока.КодТНВЭД = Результат.КодТНВЭД;	
		ТекущаяСтрока.КодОКЭД  = Результат.КодОКВЭД;	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДополнительныеДанные(Команда)
	
	Если Не ЗначениеЗаполнено(ДополнительныеДанные) Тогда
		ОчиститьСообщения();
		ТекстСообщения = (НСтр("ru = 'Не указана дополнительные данные для заполнения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	Иначе
		ЗаполнитьДополнительныеДанныеНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеДанныеНаСервере()
	
	Товары = Объект.Товары.Выгрузить();
	Товары.ЗаполнитьЗначения(ДополнительныеДанные, "ДополнительныеДанные"); 
	Объект.Товары.Загрузить(Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасчетнуюСтавку(Команда)
	
	Если Не ЗначениеЗаполнено(РасчетнаяСтавкаНДС) Тогда
		ОчиститьСообщения();
		ТекстСообщения = (НСтр("ru = 'Не указана расчетная ставка НДС для заполнения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	Иначе
		ЗаполнитьРасчетнуюСтавкуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетнуюСтавкуНаСервере()
	
	Товары = Объект.Товары.Выгрузить();
	Товары.ЗаполнитьЗначения(Истина, "ИспользоватьРасчетнуюСтавкуНДС"); 
	Товары.ЗаполнитьЗначения(РасчетнаяСтавкаНДС, "РасчетнаяСтавкаНДС"); 
	Объект.Товары.Загрузить(Товары);
	
КонецПроцедуры

#КонецОбласти
// }
// 4D

#Область Прочее

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	// 4D:УПП для Беларуси
	// ЭСЧФ
	// {
	УстановитьДоступностьИзмененийПоФлагуВыставлен();
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(Объект.Ссылка);

	Если Не Выставлен Или ЭтоНовый Тогда
		ЭлектронныеСчетаФактуры.УправлениеЭлементамиФормы(ЭтотОбъект);
	Иначе
		ЭлектронныеСчетаФактуры.ВернутьВИсходноеСостояниеЭлементыФормыЭСЧФ(ЭтотОбъект);
	КонецЕсли;
	// }
	// 4D
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользоватьНесколькоОрганизаций     = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	ЕстьПравоНаРедактирование = ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураВыданный);
	
	ДатаНачалаПримененияПостановления1137 = Константы.ДатаНачалаПримененияПостановления1137.Получить();
	
	ЗаполнитьЗависимыеОтДокументовОснованийРеквизитыФормы();
	
	Если ЕстьРасчетыСКлиентом Тогда
		
		ЗаполнитьЗависимыеОтКлиентаРеквизитыФормы();
		
		Если Не ПустаяСтрока(Объект.КППКонтрагента) Тогда
			ЗначениеКПП = Объект.КППКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
	Выставлен = ЗначениеЗаполнено(Объект.ДатаВыставления);
	
	УправлениеЭлементамиФормы();
	ЗаполнитьСписокКодовВидовОпераций();
	НастроитьВидимостьВалютыКодаОперации();
	
	ОбновитьИнформациюПоДокументамОснованиям();
	ОбновитьИнформациюПоСчетуФактуреОснованию();
	УстановитьТекстПлатежноРасчетныхДокументов();
	
	Элементы.СтрокаПлатежноРасчетныеДокументы.Гиперссылка = ЕстьПравоНаРедактирование;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;
	
	УстановитьВидимостьКомандыСоздатьКорректировочный();
	
	// 4D:ERP для Беларуси
	// ЭСЧФ
	// {
	ОпределитьТипыСчетаФактуры();
	ОпределитьСтатусыПоставщика();
	ОпределитьСтатусыПолучателя();
	// }
	// 4D	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИзмененийПоФлагуВыставлен()
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ПоСчетуФактуре");
	МассивИменЭлементов.Добавить("Номер");
	МассивИменЭлементов.Добавить("Дата");
	МассивИменЭлементов.Добавить("НомерИсправленияПриИсправлении");
	МассивИменЭлементов.Добавить("ДатаПриИсправлении");
	МассивИменЭлементов.Добавить("Организация");
	МассивИменЭлементов.Добавить("Контрагент");
	МассивИменЭлементов.Добавить("КППКонтрагента");
	МассивИменЭлементов.Добавить("Валюта");
	МассивИменЭлементов.Добавить("КодВидаОперации");
	МассивИменЭлементов.Добавить("КодВидаОперацииНаУвеличение");
	МассивИменЭлементов.Добавить("КодВидаОперацииНаУменьшение");
	МассивИменЭлементов.Добавить("СтрокаПлатежноРасчетныеДокументы");
	// 4D:ERP для Беларуси
	// ЭСЧФ
	// {
	МассивИменЭлементов.Добавить("Договор");
	МассивИменЭлементов.Добавить("ВидДокумента");
	
	//Добавить реквизиты из правил
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивИменЭлементов, "ТолькоПросмотр", Выставлен И НЕ ЭтоНовый);
	
	Элементы.ВыставленВЭлектронномВиде.Доступность = Выставлен;
	// }
	// 4D
	Элементы.ДатаВыставления.Доступность           = Выставлен;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандыСоздатьКорректировочный(ДокументИзменен = Ложь)
	
	Если ДокументИзменен Тогда
		
		ВидимостьЭлемента = Ложь;
		
	Иначе
		
		ВидимостьЭлемента = ЗначениеЗаполнено(Объект.Ссылка) И 
			Документы.СчетФактураВыданный.ТребуетсяСозданиеКорректировочного(Объект.Ссылка, НЕ Объект.Корректировочный);
			
	КонецЕсли;
	
	Элементы.СоздатьКорректировочный.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьВалютыКодаОперации()
	
	// 4D:ERP для Беларуси
	// ЭСЧФ
	// {
	//Элементы.ГруппаУИПВалюта.Видимость = Ложь;
	//Элементы.ГруппаКодВидаОперации.Видимость = Ложь;
	// }
	// 4D
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеВидаОперации(Форма)
	
	ТекущийКод = Форма.СписокКодовВидовОпераций.НайтиПоЗначению(Форма.Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		Форма.ПредставлениеВидаОперации = Сред(ТекущийКод.Представление, 4);
	Иначе
		Форма.ПредставлениеВидаОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеВидаОперацииНаУменьшение(Форма)
	
	ТекущийКод = Форма.СписокКодовВидовОпераций.НайтиПоЗначению(Форма.Объект.КодВидаОперацииНаУменьшение);
	Если ТекущийКод <> Неопределено Тогда
		Форма.ПредставлениеВидаОперацииНаУменьшение = Сред(ТекущийКод.Представление, 4);
	Иначе
		Форма.ПредставлениеВидаОперацииНаУменьшение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПлатежноРасчетныеДокументыВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ПлатежноРасчетныеДокументы.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ПолучитьПлатежноРасчетныеДокументыИзХранилища(НовыйАдресВХранилище)
	
	Если ЗначениеЗаполнено(НовыйАдресВХранилище) Тогда
		Объект.ПлатежноРасчетныеДокументы.Загрузить(ПолучитьИзВременногоХранилища(НовыйАдресВХранилище));
		Объект.СтрокаПлатежноРасчетныеДокументы = 
			Документы.СчетФактураВыданный.СтрокаРасчетноПлатежныхДокументов(Объект.ПлатежноРасчетныеДокументы);
		УстановитьТекстПлатежноРасчетныхДокументов();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьРасчетыСКлиентом(ДокументОснование)
	
	ЕстьРасчетыСКлиентом = Истина;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		 Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		 Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		
			ЕстьРасчетыСКлиентом = ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(
				ДокументОснование,
				"РасчетыЧерезОтдельногоКонтрагента");
			
	КонецЕсли;
	
	Возврат ЕстьРасчетыСКлиентом;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗависимыеОтКлиентаРеквизитыФормы()
	
	КлиентЮрЛицо                            = Ложь;
	НеобходимоЗаполнитьГоловногоКонтрагента = Ложь;
	
	СписокВыбораКПП.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		РеквизитыКлиента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Контрагент,
			"ЮрФизЛицо, ОбособленноеПодразделение, ГоловнойКонтрагент, КПП");
		
		НеобходимоЗаполнитьГоловногоКонтрагента = (РеквизитыКлиента.ОбособленноеПодразделение = Истина
			И Не ЗначениеЗаполнено(РеквизитыКлиента.ГоловнойКонтрагент));
		КлиентЮрЛицо = (РеквизитыКлиента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
		
		Если КППКлиента <> РеквизитыКлиента.КПП Тогда
			КППКлиента  = РеквизитыКлиента.КПП;
			ЗначениеКПП = КППКлиента;
		КонецЕсли;
		
	Иначе
		
		КППКлиента = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораКПП(СписокВыбора, Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.Представление КАК ПредставлениеКонтрагента
	|ПОМЕСТИТЬ ДанныеКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.КПП,
	|	Контрагенты.Представление
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.Ссылка = &Контрагент
	|	И Контрагенты.ГоловнойКонтрагент = &Контрагент
	|	И Контрагенты.ОбособленноеПодразделение
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.КПП ПОДОБНО """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.КППКонтрагента КАК КПП
	|ПОМЕСТИТЬ ДанныеСчетовФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Контрагент = &Контрагент
	|	И СчетФактураВыданный.Проведен
	|	И НЕ СчетФактураВыданный.КППКонтрагента = """"
	|	И НЕ СчетФактураВыданный.КППКонтрагента В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.КПП КАК КПП,
	|	ДанныеКонтрагентов.ПредставлениеКонтрагента КАК ПредставлениеКонтрагента
	|ИЗ
	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСчетовФактуры.КПП,
	|	""""
	|ИЗ
	|	ДанныеСчетовФактуры КАК ДанныеСчетовФактуры";
	
	СписокВыбора.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",
			?(ПустаяСтрока(Выборка.КПП), Нстр("ru = '<не задан>'"), Выборка.КПП),
			?(ПустаяСтрока(Выборка.ПредставлениеКонтрагента), "", "(" + Выборка.ПредставлениеКонтрагента + ")"));
		СписокВыбора.Добавить(Выборка.КПП, ПредставлениеКПП);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		НеобходимоЗаполнитьГоловногоКонтрагента = Ложь;
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПлатежноРасчетныхДокументов()
	
	Если ЗначениеЗаполнено(Объект.СтрокаПлатежноРасчетныеДокументы) Тогда
		СтрокаПлатежноРасчетныеДокументы = Объект.СтрокаПлатежноРасчетныеДокументы;
	Иначе
		СтрокаПлатежноРасчетныеДокументы = НСтр("ru='<отсутствуют>'"); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеИсходныеДокументы()
	
	СтруктураПоиска = Новый Структура("ИсходныйДокумент", Документы.СчетФактураВыданный.ПустаяСсылка());
	
	СтрокиБезИсходногоДокумента = Объект.ДокументыОснования.НайтиСтроки(СтруктураПоиска);
	
	Возврат Не СтрокиБезИсходногоДокумента.Количество() = Объект.ДокументыОснования.Количество();

КонецФункции

&НаСервере
Функция ПолучитьСписокОснованийДляОповещения()
	
	ОснованияДляОповещения = СписокОснований.ВыгрузитьЗначения();

	Для каждого Стр из ОснованияДляОповещения цикл
		Если ТипЗнч(Стр.Значение) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ОснованияДляОповещения.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.Значение, "ДокументОснование"));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОснованияДляОповещения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокКодовВидовОпераций()
	
	ДатаКодовОпераций = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()); 
		
	ОбновитьПредставлениеВидаОперации(ЭтаФорма);
	ОбновитьПредставлениеВидаОперацииНаУменьшение(ЭтаФорма);
	
КонецПроцедуры

// 4D:ERP для Беларуси
// ЭСЧФ
// {
&НаСервере
Процедура ОпределитьТипыСчетаФактуры() 
	
	Элементы.ТипСчетаФактуры.СписокВыбора.Очистить();	
	Если ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.Дополнительный);
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.Исправленный);
	Иначе	
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.Исходный);
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.Дополнительный);
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.ДополнительныйБезСсылки);
		Элементы.ТипСчетаФактуры.СписокВыбора.Добавить(Справочники.ТипыЭСЧФ.Исправленный);
	КонецЕсли;	
	
	Если Элементы.ТипСчетаФактуры.СписокВыбора.НайтиПоЗначению(Объект.ТипСчетаФактуры) = Неопределено Тогда
		СтатусПолучателя = Справочники.ТипыЭСЧФ.ПустаяСсылка();	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОпределитьСтатусыПоставщика() 
	
	Элементы.СтатусПоставщика.СписокВыбора.Очистить();	
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация);	
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Комиссионер);	
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Комитент);	
		
	Иначе	
		
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Продавец);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Заказчик);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Посредник);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Комиссионер);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.Комитент);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.ДоверительныйУправляющий);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.ПлательщикПередающийНалоговыеВычеты);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.ПлательщикПередающийОборотыПоРеализации);	
		Элементы.СтатусПоставщика.СписокВыбора.Добавить(Справочники.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация);	
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОпределитьСтатусыПолучателя() 
	
	Если Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Покупатель);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.ПокупательОбъектовУИностраннойОрганизации);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Продавец Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Покупатель);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Потребитель);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Комиссионер);

	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Комитент Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Комиссионер);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Комиссионер Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Покупатель);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Комитент);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Комиссионер);
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Потребитель);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.ДоверительныйУправляющий Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Покупатель);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Посредник Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Потребитель);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Заказчик Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.Потребитель);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.ПлательщикПередающийОборотыПоРеализации Тогда

		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.ПлательщикПолучающийОборотыПоРеализации);
		
	ИначеЕсли Объект.СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.ПлательщикПередающийНалоговыеВычеты Тогда
		
		Элементы.СтатусПолучателя.СписокВыбора.Очистить();	
		Элементы.СтатусПолучателя.СписокВыбора.Добавить(Справочники.СтатусыПолучателяЭСЧФ.ПлательщикПолучающийНалоговыеВычеты);
		
	КонецЕсли;
	
	Если Элементы.СтатусПолучателя.СписокВыбора.НайтиПоЗначению(Объект.СтатусПолучателя) = Неопределено Тогда
		СтатусПолучателя = Справочники.СтатусыПолучателяЭСЧФ.ПустаяСсылка();	
	КонецЕсли;	
	
	Если Элементы.СтатусПолучателя.СписокВыбора.Количество() = 1 И НЕ ЗначениеЗаполнено(Объект.СтатусПолучателя) Тогда
		СтатусПолучателя = 	Элементы.СтатусПолучателя.СписокВыбора[0];
	КонецЕсли;

КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПоОснованиюНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТабличнуюЧасть();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если Объект.ДокументыОснования.Количество() > 0
		И ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование) Тогда
		
		ЗаполнитьПоОснованиюНаСервере();
		
	Иначе
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(,,НСтр("ru = 'Документ-основание'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,"Объект");
	КонецЕсли;


	
КонецПроцедуры
// }
// 4D
#КонецОбласти

#КонецОбласти
