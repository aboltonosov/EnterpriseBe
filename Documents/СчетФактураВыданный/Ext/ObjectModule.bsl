#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	ИдентификаторПлатежа   = Неопределено;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Исправление") И ДанныеЗаполнения.Исправление Тогда
			
			Если ДанныеЗаполнения.Свойство("СчетФактураОснование") Тогда
				ЗаполнитьИсправлениеПоСчетуФактуре(ДанныеЗаполнения);
			ИначеЕсли ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
				ЗаполнитьИсправлениеПоОснованию(ДанныеЗаполнения);
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Корректировочный") И ДанныеЗаполнения.Корректировочный
			И ДанныеЗаполнения.Свойство("ДокументОснование")
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") 
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование) <> Тип("Массив") Тогда
			
			Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				ЗаполнитьКорректировкуПоСчетуФактуре(ДанныеЗаполнения);
			Иначе
				ЗаполнитьКорректировкуПоДокументуОснованию(ДанныеЗаполнения);
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	// 4D:ERP для Беларуси
	// ЭСЧФ
	// {
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ЗаполнитьОсновныеРеквизиты();
		ЗаполнитьВидДокумента();
		ЗаполнитьУсловияПоставки();
		ЗаполнитьТабличнуюЧасть();
	КонецЕсли;
	// }
	// 4D
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СформироватьМассивОснованийДляПроверки();
	
	Если Не Исправление Тогда
		НомерИсправления = "";
		СчетФактураОснование = Неопределено;
	КонецЕсли;
	
	// Проверим время документа относительно времени документа-основания
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДатаПоследнегоДокументаОснования = ПолучитьДатуПоследнегоДокументаОснования();
		Если Дата < ДатаПоследнегоДокументаОснования
			ИЛИ НЕ ЗначениеЗаполнено(Дата) Тогда
		 	
			Дата = ?(ДатаПоследнегоДокументаОснования = КонецДня(ДатаПоследнегоДокументаОснования),
					 ДатаПоследнегоДокументаОснования,
					 ДатаПоследнегоДокументаОснования + 1);
			
		КонецЕсли; 
	КонецЕсли;; 
	
	Если Не ПометкаУдаления Тогда
		ПроверитьДублиСчетФактуры(Отказ);
	КонецЕсли;
	
	Если ЭтоНовый() И Не ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;

	ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	
	// 4D:ERP для Беларуси 
	// ЭСЧФ
	// {
	ЭлектронныеСчетаФактуры.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ);
	
	СуммаАкциза = Товары.Итог("СуммаАкциза");
	СуммаНДС = Товары.Итог("СуммаНДС");
	СуммаДокумента = Товары.Итог("СуммаСНДС");
	// }
	// 4D 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		МассивДокументов= Новый Массив;
		МассивДокументов.Добавить(Ссылка);
		РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СформироватьЗаданияПоДокументам(МассивДокументов);
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.СчетФактураВыданный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ДоходыИРасходыСервер.ОтразитьЖурналУчетаСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПокупок(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
	//++ НЕ УТ
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТ
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	КоличествоОснований = ДокументыОснования.Количество();
	
	Если КоличествоОснований = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Документы-основания счета-фактуры""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДокументыОснованияПредставление", , Отказ);
	КонецЕсли;
	
	ДокументыНеПроведены    = Ложь;
	НетИсходногоСчетФактуры = Ложь;
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ДокументыОснования.ДокументОснование.Проведен КАК ДокументОснованиеПроведен,
		|	ДокументыОснования.ИсходныйДокумент КАК ИсходныйДокумент
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК ДокументыОснования
		|ГДЕ
		|	ДокументыОснования.Ссылка = &Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.ДокументОснованиеПроведен Тогда
				ДокументыНеПроведены = Истина;
			КонецЕсли;
			
			Если Корректировочный И Не ЗначениеЗаполнено(Выборка.ИсходныйДокумент) Тогда
				НетИсходногоСчетФактуры = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДокументыНеПроведены Тогда
		Если КоличествоОснований > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Счет-фактуру можно провести, если проведены все документы списка ""Документы-основания"".'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Счет-фактуру можно провести только на основании проведенного документа.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДокументыОснованияПредставление", , Отказ);
	КонецЕсли;
	
	Если НетИсходногоСчетФактуры Тогда
		Если КоличествоОснований > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для всех документов списка ""Документы-основания"".'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для документа-основания.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДокументыОснованияПредставление", , Отказ);
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Ссылка) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
	КонецЕсли;
	
	Если НЕ Исправление Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетФактураОснование");
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
	КонецЕсли;
	
	Если Дата < Константы.ДатаНачалаПримененияПостановления1137.Получить() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// 4D:ERP для Беларуси, ВалентинМ, 19.06.2017 16:05:48 
	// ЭСЧФ
	// {
	ДополнительныеСвойства.Вставить("ПроведениеИзФормыДокумента", Ложь);
	// }
	// 4D 
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Если Исправление Тогда
		
		// Установка номера по исходному документу.
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|			ТОГДА СчетФактураВыданный.СчетФактураОснование
		|		ИНАЧЕ СчетФактураВыданный.Ссылка
		|	КОНЕЦ                     КАК Ссылка,
		|	СчетФактураВыданный.Номер КАК Номер
		|ПОМЕСТИТЬ ИсходныеДокументы
		|ИЗ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &СчетФактураОснование
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходныеДокументы.Номер КАК Номер,
		|	ЕСТЬNULL(Исправления.НомерИсправления, 0) КАК НомерИсправления
		|ИЗ
		|	ИсходныеДокументы КАК ИсходныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Исправления
		|		ПО ИсходныеДокументы.Ссылка = Исправления.СчетФактураОснование
		|			И ИсходныеДокументы.Ссылка <> Исправления.Ссылка
		|			И Исправления.Исправление
		|			И Исправления.Корректировочный = &Корректировочный
		|			И НЕ Исправления.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсправления УБЫВ");
		
		Запрос.УстановитьПараметр("СчетФактураОснование", СчетФактураОснование);
		Запрос.УстановитьПараметр("Корректировочный", Корректировочный);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			СтандартнаяОбработка = Ложь;
			
			// Установка номера и переопределение префикса информационной базы.
			Префикс = "И";
			ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(ЭтотОбъект, СтандартнаяОбработка, Префикс);
			
			НомерБезПрефикса = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Выборка.Номер, Истина, Истина);
			Если СтрДлина(СокрП(НомерБезПрефикса)) = 7 Тогда
				НомерБезПрефикса = Прав(НомерБезПрефикса, СтрДлина(НомерБезПрефикса)-1);
			КонецЕсли;
			Номер = Префикс + НомерБезПрефикса;
			
			НомерИсправления = Формат(Число(Выборка.НомерИсправления)+1, "ЧЦ=10; ЧДЦ=0; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Префикс = "0";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Контрагент") Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Ответственный") Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Подразделение") Тогда
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	КонецЕсли;
	
	// 4D:ERP для Беларуси
	// ЭСЧФ
	// {
	Если ДанныеЗаполнения = Неопределено Тогда
		
		Валюта 						= Константы.ВалютаРегламентированногоУчета.Получить();
		//ВыставленВЭлектронномВиде 	= Истина;
		ТипСчетаФактуры 			= Справочники.ТипыЭСЧФ.Исходный;
		СтатусПоставщика 			= Справочники.СтатусыПоставщикаЭСЧФ.Продавец;
		СтатусПолучателя			= Справочники.СтатусыПолучателяЭСЧФ.Покупатель;
		КодВидаОперации				= "01";
		
	КонецЕсли;
	// }
	// 4D
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСчетаФактурыПоОснованию(ВыбранныйСчетФактура = Неопределено) Экспорт
	
	Если ДокументыОснования.Количество() = 0
		Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = ДокументыОснования[0].ДокументОснование;
	
	ПараметрыСчетаФактуры = ПолучитьПараметрыСчетаФактурыПоОснованиям();
	
	РеквизитыОснования = ПараметрыСчетаФактуры.РеквизитыОснований;
	
	// Возможность ручного выбора исходного счет-фактуры для корректировочного счет-фактуры
	Если Не ВыбранныйСчетФактура = Неопределено И РеквизитыОснования.Количество() = 1 И Корректировочный Тогда
		
			РеквизитыВыранногоСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранныйСчетФактура,"Номер, Дата");
			
			РеквизитыОснования[0].ИсходныйДокумент = ВыбранныйСчетФактура;
			РеквизитыОснования[0].НомерИсходногоДокумента = РеквизитыВыранногоСчетаФактуры.Номер;
			РеквизитыОснования[0].ДатаИсходногоДокумента = РеквизитыВыранногоСчетаФактуры.Дата;
	
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если Не ПараметрыСчетаФактуры.Организация = Неопределено И Не ПараметрыСчетаФактуры.Организация = Организация Тогда
		Номер = "";
		Организация = ПараметрыСчетаФактуры.Организация;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Контрагент = Неопределено И Не ПараметрыСчетаФактуры.Контрагент = Контрагент Тогда
		Контрагент = ПараметрыСчетаФактуры.Контрагент;
		КППКонтрагента = ПараметрыСчетаФактуры.КППКонтрагента;
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.Валюта = Неопределено
			И Валюта <> ВалютаРегламентированногоУчета И Валюта <> ПараметрыСчетаФактуры.Валюта Тогда
		Валюта = ПараметрыСчетаФактуры.Валюта;
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.Корректировочный = Неопределено Тогда
		Корректировочный = ПараметрыСчетаФактуры.Корректировочный;
		Исправление = ПараметрыСчетаФактуры.Исправление;
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.СчетФактураОснование = Неопределено И Исправление Тогда
		СчетФактураОснование = ПараметрыСчетаФактуры.СчетФактураОснование;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Ответственный = Неопределено И Не ПараметрыСчетаФактуры.Ответственный = Ответственный Тогда
		Ответственный = ПараметрыСчетаФактуры.Ответственный;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Подразделение = Неопределено И Не ПараметрыСчетаФактуры.Подразделение = Подразделение Тогда
		Подразделение = ПараметрыСчетаФактуры.Подразделение;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.ИдентификаторГосКонтракта = Неопределено И Не ПараметрыСчетаФактуры.ИдентификаторГосКонтракта = ИдентификаторГосКонтракта Тогда
		ИдентификаторГосКонтракта = ПараметрыСчетаФактуры.ИдентификаторГосКонтракта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодВидаОперации) Тогда
		КодВидаОперации = КодВидаОперации();
	КонецЕсли;
	
	Если РеквизитыОснования.Количество() > 0 Тогда
		ДокументыОснования.Загрузить(РеквизитыОснования);
	КонецЕсли;
	
	// 4D:ERP для Беларуси
	// ЭСЧФ
	// {
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ЗаполнитьОсновныеРеквизиты();
		ЗаполнитьВидДокумента();
		ЗаполнитьУсловияПоставки();
		ЗаполнитьТабличнуюЧасть();
	КонецЕсли;
	// }
	// 4D
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
		
		МассивОснований = ДанныеЗаполнения.ДокументОснование;
		Для Каждого ОснованиеЗаполнения Из МассивОснований Цикл
			СтрокаОснования = ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование = ОснованиеЗаполнения;
		КонецЦикла;
		ДанныеЗаполнения.ДокументОснование = МассивОснований[0];
		
	Иначе
		СтрокаОснования = ДокументыОснования.Добавить();
		СтрокаОснования.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
	ДанныеЗаполнения.Свойство("Корректировочный", Корректировочный);
	
	ПараметрыСчетаФактуры = ПолучитьПараметрыСчетаФактурыПоОснованиям();
	
	Если Не ПараметрыСчетаФактуры.Организация = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Организация", ПараметрыСчетаФактуры.Организация);
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Контрагент = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Контрагент",     ПараметрыСчетаФактуры.Контрагент);
		ДанныеЗаполнения.Вставить("КППКонтрагента", ПараметрыСчетаФактуры.КППКонтрагента);
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.Корректировочный = Неопределено Тогда
		Корректировочный = ПараметрыСчетаФактуры.Корректировочный;
		ДанныеЗаполнения.Вставить("Корректировочный", Корректировочный);
		ДанныеЗаполнения.Вставить("Исправление", ПараметрыСчетаФактуры.Исправление);
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.СчетФактураОснование = Неопределено И ДанныеЗаполнения.Исправление Тогда
		ДанныеЗаполнения.Вставить("СчетФактураОснование", ПараметрыСчетаФактуры.СчетФактураОснование);
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство("КодВидаОперации") Тогда
		ДанныеЗаполнения.Вставить("КодВидаОперации", КодВидаОперации(ДанныеЗаполнения.ДокументОснование));
	КонецЕсли;
	
	ИдентификаторГосКонтракта = ПараметрыСчетаФактуры.ИдентификаторГосКонтракта;
	
	РеквизитыОснования = ПараметрыСчетаФактуры.РеквизитыОснований;
	Если Корректировочный Тогда
		
		Если РеквизитыОснования.Количество() > 0 Тогда
			
			Для Каждого Основание Из ДокументыОснования Цикл
				
				СтрокаСРеквизитами = РеквизитыОснования.Найти(Основание.ДокументОснование, "ДокументОснование");
				Если СтрокаСРеквизитами <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Основание, СтрокаСРеквизитами); 
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 4D:ERP для Беларуси
	// ЭСЧФ
	// {
	Если ЗначениеЗаполнено(СтрокаОснования.ДокументОснование) Тогда
		ЗаполнитьОсновныеРеквизиты(СтрокаОснования.ДокументОснование);
		ЗаполнитьВидДокумента(СтрокаОснования.ДокументОснование);
		ЗаполнитьУсловияПоставки(СтрокаОснования.ДокументОснование);
		ЗаполнитьТабличнуюЧасть(СтрокаОснования.ДокументОснование);
	КонецЕсли;
	// }
	// 4D
	
КонецПроцедуры

Процедура ЗаполнитьИсправлениеПоОснованию(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
		
		МассивОснований = ДанныеЗаполнения.ДокументОснование;
		Для Каждого ОснованиеЗаполнения Из МассивОснований Цикл
			СтрокаОснования = ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование = ОснованиеЗаполнения;
		КонецЦикла;
		ДанныеЗаполнения.ДокументОснование = МассивОснований[0];
		
	Иначе
		СтрокаОснования = ДокументыОснования.Добавить();
		СтрокаОснования.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения.ДокументОснование;
	
	РеквизитыСчетаФактуры = Документы.СчетФактураВыданный.ИсправляемыйСчетФактураПоОснованию(
		ЭтотОбъект.Ссылка,
		Основание,
		?(ДанныеЗаполнения.Свойство("Организация"), ДанныеЗаполнения.Организация, Неопределено));
	ИдентификаторГосКонтракта = РеквизитыСчетаФактуры.ИдентификаторГосКонтракта;

	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.Ссылка) Тогда
		
		Для Каждого РеквизитСФ Из РеквизитыСчетаФактуры Цикл
		
			ИмяРеквизита      = РеквизитСФ.Ключ;
			ЗначениеРеквизита = РеквизитСФ.Значение;
			
			Если ИмяРеквизита = "ДокументыОснования" Тогда
				ДокументыОснования.Загрузить(ЗначениеРеквизита);
			ИначеЕсли ИмяРеквизита = "Ссылка" Тогда
				ДанныеЗаполнения.Вставить("СчетФактураОснование", ЗначениеРеквизита);
			ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Не обнаружен исходный счет-фактура к исправлению.
		|Введите счет-фактуру к исходному документу продажи, а уже затем введите исправительный счет-фактуру.'");
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсправлениеПоСчетуФактуре(ДанныеЗаполнения = Неопределено) Экспорт
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Основание = ДанныеЗаполнения.СчетФактураОснование;
	Иначе
		Основание = СчетФактураОснование;
		Исправление = Истина;
	КонецЕсли;
	
	РеквизитыСчетаФактуры = Документы.СчетФактураВыданный.ДанныеСчетаФактуры(Основание);
	ИдентификаторГосКонтракта = РеквизитыСчетаФактуры.ИдентификаторГосКонтракта;
	Для Каждого РеквизитСФ Из РеквизитыСчетаФактуры Цикл
		
		ИмяРеквизита      = РеквизитСФ.Ключ;
		ЗначениеРеквизита = РеквизитСФ.Значение;
		
		Если ИмяРеквизита = "ДокументыОснования" Тогда
			ДокументыОснования.Загрузить(РеквизитСФ.Значение);
		ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Если ДанныеЗаполнения <> Неопределено Тогда
				ДанныеЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			Иначе
				ЭтотОбъект[ИмяРеквизита] = ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКорректировкуПоСчетуФактуре(ДанныеЗаполнения)
	
	РеквизитыДляОбработки = Документы.СчетФактураВыданный.ПараметрыЗаполненияПоСчетуФактуре(
		ДанныеЗаполнения.ДокументОснование);
	
	Если РеквизитыДляОбработки.Корректировочный Тогда
		
		Основания = РеквизитыДляОбработки.Основания;
		
		Если Основания.Количество() = 1 Тогда
			ДанныеЗаполнения.Вставить("ДокументОснование", Основания[0]);
		Иначе
			ДанныеЗаполнения.Вставить("ДокументОснование", Основания);
			ДанныеЗаполнения.Вставить("Дата", РеквизитыДляОбработки.ДатаКорректировки);
		КонецЕсли;
		
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКорректировкуПоДокументуОснованию(ДанныеЗаполнения)
	
	ТаблицаОснований = Документы.СчетФактураВыданный.КорректировочныеДокументыПоОснованию(
		ДанныеЗаполнения.ДокументОснование);
	
	Если ТаблицаОснований.Количество() > 0 Тогда
		
		ДанныеЗаполнения.Вставить("ДокументОснование", ТаблицаОснований.ВыгрузитьКолонку("Ссылка"));
		ДанныеЗаполнения.Вставить("Дата", ТаблицаОснований[0].Дата);
		
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция КодВидаОперации(Основание = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Основание) И ДокументыОснования.Количество() > 0 Тогда
		Основание = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	КодВидаОперации = "";
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АктВыполненныхРабот")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитенту")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
	 //++ НЕ УТКА
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетДавальцу")
	 //-- НЕ УТКА
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаписьКнигиПродаж")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда
		КодВидаОперации = "01";
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
	 ИЛИ ТипЗнч(Основание)		= Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		КодВидаОперации = ?(ВерсияКодовВидовОпераций = 3, "01", "03");
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионера")
	 ИЛИ ТипЗнч(Основание)		= Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		КодВидаОперации = ?(ВерсияКодовВидовОпераций = 3, "01", "04");
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
	 ИЛИ ТипЗнч(Основание)		= Тип("ДокументСсылка.РеализацияТоваровУслуг")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			КодВидаОперации = КодВидаОперацииРеализацииТоваров(Основание, ВерсияКодовВидовОпераций);
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции

Функция КодВидаОперацииРеализацииТоваров(РеализацияТоваров, ВерсияКодовВидовОпераций)
	
	ЕстьКомиссионныйТовар = Ложь;
	ЕстьСобственныйТовар = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Основание КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.ДокументОснование = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			ТоварыОрганизаций.Количество
	|		ИНАЧЕ
	|			-ТоварыОрганизаций.Количество
	|		КОНЕЦ
	|	) КАК Количество
	|
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПродажи КАК ДокументыПродажи
	|		ПО ТоварыОрганизаций.Регистратор = ДокументыПродажи.Ссылка
	|ГДЕ
	|	ТоварыОрганизаций.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрганизаций.ВидЗапасов.ТипЗапасов,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.НомерГТД,
	|	ТоварыОрганизаций.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(
	|		ВЫБОР КОГДА ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			ТоварыОрганизаций.Количество
	|		ИНАЧЕ
	|			-ТоварыОрганизаций.Количество
	|		КОНЕЦ) > 0
	|ИТОГИ ПО
	|	ТипЗапасов
	|");
	Запрос.УстановитьПараметр("Основание", РеализацияТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар Тогда
			ЕстьКомиссионныйТовар = Истина;
		Иначе
			ЕстьСобственныйТовар = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьКомиссионныйТовар И ЕстьСобственныйТовар Тогда
		КодВидаОперации = ?(ВерсияКодовВидовОпераций = 3, "15", "01;04");
	ИначеЕсли ЕстьКомиссионныйТовар Тогда
		КодВидаОперации = ?(ВерсияКодовВидовОпераций = 3, "01", "04");
	Иначе
		КодВидаОперации = "01";
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции

#КонецОбласти

// 4D:ERP для Беларуси
// ЭСЧФ
// {
#Область Шапка

Процедура ЗаполнитьОсновныеРеквизиты(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;	
	КонецЕсли;	
	
	Дата 					  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Дата");
	Валюта 					  = Константы.ВалютаРегламентированногоУчета.Получить();
	МетаданныеДокумента = Основание.Метаданные();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		ТипСчетаФактуры  = Справочники.ТипыЭСЧФ.Исходный;
		СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация;
		СтатусПолучателя = Справочники.СтатусыПолучателяЭСЧФ.Покупатель;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Номер, Контрагент, Договор, Организация");
			ЗначенияРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияРеквизитов.Договор, "Номер, Дата");
			ДоговорНомер             = ЗначенияРеквизитовДоговора.Номер;
			ДоговорДата              = ЗначенияРеквизитовДоговора.Дата;
			Контрагент        		 = ЗначенияРеквизитов.Контрагент;
			ДатаПраваНаВычет 		 = ЗначенияРеквизитов.Дата;
			НомерЗаявленияОВвозеТоваров = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ЗначенияРеквизитов.Номер, Истина, Истина);
			ДатаЗаявленияОВвозеТоваров  = ЗначенияРеквизитов.Дата;
			
			Для Каждого ТекСтрока Из Основание.Товары Цикл
				ДокументПоступления = ТекСтрока.ДокументПоступления;
				Если ЗначениеЗаполнено(ДокументПоступления) Тогда
					ДатаВвозаТоваров   	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступления, "Дата");
					Прервать;
				КонецЕсли;
			КонецЦикла;
		
			Грузоотправитель 		  = Контрагент;
			СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузоотправитель, ЗначенияРеквизитов.Дата);
			АдресГрузоотправителя     = СведенияОГрузоотправителе.ЮридическийАдрес;
			
			Грузополучатель			  = Основание.Организация;
			СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузополучатель,  ЗначенияРеквизитов.Дата);
			АдресГрузополучателя      = СведенияОГрузополучателе.ЮридическийАдрес;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
			
			ЗначенияРеквизитов       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, НомерДекларации, КонтрагентПоставщика, Организация, Контрагент");
			
			ДатаПраваНаВычет 					= ЗначенияРеквизитов.Дата + 90*24*60*60;
			РегистрационныйНомерВыпускаТоваров  = ЗначенияРеквизитов.НомерДекларации;
			Контрагент 							= ЗначенияРеквизитов.КонтрагентПоставщика;
			Для Каждого ТекСтрока Из Основание.Товары Цикл
				ДокументПоступления = ТекСтрока.ДокументПоступления;
				Если ЗначениеЗаполнено(ДокументПоступления) Тогда
					Договор   					= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступления, "Договор");
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Грузоотправитель 		  = ЗначенияРеквизитов.КонтрагентПоставщика;
			СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузоотправитель, Основание.Дата);
			АдресГрузоотправителя     = СведенияОГрузоотправителе.ЮридическийАдрес;
			
			Грузополучатель			  = ЗначенияРеквизитов.Организация;
			СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузополучатель,  Основание.Дата);
			АдресГрузополучателя      = СведенияОГрузополучателе.ЮридическийАдрес;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
		
		ТипСчетаФактуры          = Справочники.ТипыЭСЧФ.ДополнительныйБезСсылки;
		СтатусПоставщика         = Справочники.СтатусыПоставщикаЭСЧФ.Продавец;
		СтатусПолучателя         = Справочники.СтатусыПолучателяЭСЧФ.Покупатель;
		
		ЗначенияРеквизитов       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Договор, Организация, Контрагент, ДокументРеализации");
		ЗначенияРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияРеквизитов.Договор, "Номер, Дата");
		ДоговорНомер             = ЗначенияРеквизитовДоговора.Номер;
		ДоговорДата              = ЗначенияРеквизитовДоговора.Дата;
		Грузоотправитель         = ЗначенияРеквизитов.Организация;
		Грузополучатель          = ЗначенияРеквизитов.Контрагент;
	
		ТаблицаОснований = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(ЗначенияРеквизитов.ДокументРеализации,,, Истина);
		Для Каждого ТекущаяСтрока ИЗ ТаблицаОснований Цикл
			
			СчетФактураОснование	= ТекущаяСтрока.Ссылка;
			ЭД = ЭлектронныеСчетаФактуры.ПолучитьЭДПоВладельцу(ТекущаяСтрока.Ссылка);
			Если ЭД <> Неопределено Тогда 
				Исправление				= Истина;
				ТипСчетаФактуры         = Справочники.ТипыЭСЧФ.Дополнительный;
				НомерИсходногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "НомерЭД");
			КонецЕсли;	
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		СтатусПоставщика         = Справочники.СтатусыПоставщикаЭСЧФ.Продавец;
		СтатусПолучателя         = Справочники.СтатусыПолучателяЭСЧФ.Покупатель;
		ТипСчетаФактуры          = Справочники.ТипыЭСЧФ.Исправленный;
		ЗначенияРеквизитов       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Договор, Организация, Контрагент, ДокументОснование");
		
		ЗначенияРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияРеквизитов.Договор, "Номер, Дата");
		ДоговорНомер             = ЗначенияРеквизитовДоговора.Номер;
		ДоговорДата              = ЗначенияРеквизитовДоговора.Дата;
		ДатаАннулирования        = ЗначенияРеквизитов.Дата;
								 
		ТаблицаОснований = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(ЗначенияРеквизитов.ДокументОснование,,, Истина);
		Для Каждого ТекущаяСтрока ИЗ ТаблицаОснований Цикл
			
			СчетФактураОснование	= ТекущаяСтрока.Ссылка;
			ЭД = ЭлектронныеСчетаФактуры.ПолучитьЭДПоВладельцу(ТекущаяСтрока.Ссылка);
			Если ЭД <> Неопределено Тогда 
				Исправление 			= Истина; 
				НомерИсходногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "НомерЭД");
			КонецЕсли;	
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		
		СтатусПоставщика         = Справочники.СтатусыПоставщикаЭСЧФ.Комитент;
		СтатусПолучателя         = Справочники.СтатусыПолучателяЭСЧФ.Комиссионер;
		ТипСчетаФактуры          = Справочники.ТипыЭСЧФ.Исходный;
		ЗначенияРеквизитов       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Договор, Организация, Контрагент, ДокументОснование");
		
		ЗначенияРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияРеквизитов.Договор, "Номер, Дата");
		ДоговорНомер             = ЗначенияРеквизитовДоговора.Номер;
		ДоговорДата              = ЗначенияРеквизитовДоговора.Дата;
								 
	Иначе
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", МетаданныеДокумента) Тогда
			
		  	Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Договор");
			ЗначенияРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Номер, Дата");
			ДоговорНомер             = ЗначенияРеквизитовДоговора.Номер;
			ДоговорДата              = ЗначенияРеквизитовДоговора.Дата;
			
		КонецЕсли;
		
		ТипСчетаФактуры = Справочники.ТипыЭСЧФ.Исходный;
		СтатусПоставщика = Справочники.СтатусыПоставщикаЭСЧФ.Продавец;
		СтатусПолучателя = Справочники.СтатусыПолучателяЭСЧФ.Покупатель;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьВидДокумента(Основание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;	
	КонецЕсли;	
	
	МетаданныеДокумента = Основание.Метаданные();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		ВидДокумента = Справочники.ВидыДокументовЭСЧФ.Счет_фактура;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		ВидДокумента = Справочники.ВидыДокументовЭСЧФ.АктВыполненныхРабот;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") И НЕ ЗначениеЗаполнено(Основание.ТипБСО) Тогда
		
		ВидДокумента = Справочники.ВидыДокументовЭСЧФ.Акт;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Основание.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		
		ВидДокумента = Справочники.ВидыДокументовЭСЧФ.Акт;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Основание.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
		
		ВидДокумента = Справочники.ВидыДокументовЭСЧФ.АктВыполненныхРабот;
		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипБСО", МетаданныеДокумента) Тогда	
		
		ТипБСО       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ТипБСО");
		ЗначенияРеквизитов		      = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТипБСО, "ВидДокумента, КодБланка");
		КодБланкаИсходящегоДокумента  = ЗначенияРеквизитов.КодБланка;
		ВидДокумента                  = ЗначенияРеквизитов.ВидДокумента;
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ЗаполнитьУсловияПоставки(Основание = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;	
	КонецЕсли;	
	
	МетаданныеДокумента = Основание.Метаданные();
	
	Если ВидДокумента = Справочники.ВидыДокументовЭСЧФ.ТН_2 
	          ИЛИ ВидДокумента = Справочники.ВидыДокументовЭСЧФ.ЭлектроннаяТН_2
			  ИЛИ ВидДокумента = Справочники.ВидыДокументовЭСЧФ.ТТН_1
			  ИЛИ ВидДокумента = Справочники.ВидыДокументовЭСЧФ.ЭлектроннаяТТН_1 Тогда
			  
	  	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерИсходящегоДокумента", МетаданныеДокумента) Тогда
			 НомерИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "НомерИсходящегоДокумента");
			 
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеДокумента) Тогда
			 НомерИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "НомерВходящегоДокумента");
			 
		Иначе
			 НомерИсходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
			  									ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Номер"), Истина, Истина);
		КонецЕсли;
			  
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СерияИсходящегоДокумента", МетаданныеДокумента) Тогда
			 СерияИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СерияИсходящегоДокумента");
			 
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СерияВходящегоДокумента", МетаданныеДокумента) Тогда
			 СерияИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СерияВходящегоДокумента");
			 
		КонецЕсли;
			  
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипБСО", МетаданныеДокумента) Тогда
			
		  	ТипБСО     					  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ТипБСО");
		  	КодБланкаИсходящегоДокумента  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипБСО, "КодБланка");
			
		КонецЕсли;
		
		Если ПустаяСтрока(КодБланкаИсходящегоДокумента) Тогда
			
			КодБланкаИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "КодБланка");
			
		КонецЕсли;	
		  
		ЗаполнитьРеквизитыТТН_1(Основание);
	
	Иначе 	
		
		 НомерИсходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
		  									ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Номер"), Истина, Истина);
		
	КонецЕсли;
	
	ДатаИсходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Дата");
	
КонецПроцедуры	

Процедура ЗаполнитьРеквизитыТТН_1(Основание = Неопределено) Экспорт
	
	Если ВидДокумента <> Справочники.ВидыДокументовЭСЧФ.ТТН_1 И ВидДокумента <> Справочники.ВидыДокументовЭСЧФ.ЭлектроннаяТТН_1 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Грузоотправитель КАК Грузоотправитель,
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.Грузополучатель КАК Грузополучатель,
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.АдресПогрузки КАК АдресГрузоотправителя,
	|	ТранспортнаяНакладнаяДокументыОснования.Ссылка.АдресДоставки КАК АдресГрузополучателя
	|ИЗ
	|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
	|ГДЕ
	|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
	|";
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ШаблонСообщения = НСтр("ru='По документу %1 отсутствуют оформленные ТТН'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Основание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Грузоотправитель 		= Выборка.Грузоотправитель;
		Грузополучатель 		= Выборка.Грузополучатель;
		АдресГрузоотправителя 	= Выборка.АдресГрузоотправителя;
		АдресГрузополучателя 	= Выборка.АдресГрузополучателя;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Грузоотправитель) И НЕ ЗначениеЗаполнено(АдресГрузоотправителя) Тогда
		
		СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузоотправитель, Основание.Дата);
	    АдресГрузоотправителя     = СведенияОГрузоотправителе.ЮридическийАдрес;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Грузополучатель) И НЕ ЗначениеЗаполнено(АдресГрузополучателя) Тогда
		
		СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Грузополучатель,  Основание.Дата);
	    АдресГрузополучателя      = СведенияОГрузополучателе.ЮридическийАдрес;
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область ТабличнаяЧасть

Процедура ЗаполнитьТабличнуюЧасть(Основание = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		Основание = ДокументОснование;	
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		
		ЗаполнитьПоТаможеннойДекларацииИмпорт(Основание);
		
	ИначеЕсли	ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		ЗаполнитьПоЗаявлениюНДС(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		
		ЗаполнитьПоРеализацияУслугПрочихАктивов(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетДавальцу") Тогда
		
		ЗаполнитьПоОтчетДавальцу(Основание);
		
	Иначе
		
		МетаданныеДокумента = Основание.Метаданные();
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
			
			ЗаполнитьТабличнуюЧастьПоТоварам(Основание);
			
		ИначеЕсли МетаданныеДокумента.ТабличныеЧасти.Найти("Услуги") <> Неопределено Тогда	
			
			ЗаполнитьТабличнуюЧастьПоУслугам(Основание);
			
		КонецЕсли;		
			
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьПоТаможеннойДекларацииИмпорт(ДокументОснование) 
   		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст	= "ВЫБРАТЬ
		|	ГТДИмпортТовары.Номенклатура КАК Номенклатура,
		|	ГТДИмпортТовары.Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|	ГТДИмпортТовары.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
		|	ГТДИмпортРазделы.СтавкаНДС,
		|	ГТДИмпортТовары.СуммаНДС,
		|	ГТДИмпортТовары.Количество,
		|	0 КАК СуммаСНДС,
		|	ГТДИмпортТовары.СуммаАкциза КАК СуммаАкциза,
		|	ГТДИмпортТовары.ТаможеннаяСтоимость КАК Сумма,
		|	ЗНАЧЕНИЕ(Справочник.ДополнительныеДанныеЭСЧФ.ВвознойНДС) КАК ДополнительныеДанные,
		|	ГТДИмпортТовары.Номенклатура.КодОКВЭД КАК КодОКЭД,
		|	ВЫБОР
		|		КОГДА ГТДИмпортТовары.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ((ГТДИмпортТовары.ТаможеннаяСтоимость) / ГТДИмпортТовары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ГТДИмпортТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ГТДИмпортРазделы
		|		ПО ГТДИмпортТовары.НомерРаздела = ГТДИмпортРазделы.НомерСтроки
		|ГДЕ
		|	ГТДИмпортТовары.Ссылка = &ДокументОснование
		|	И ГТДИмпортРазделы.Ссылка = &ДокументОснование";
	
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Товары.Загрузить(ТаблицаТоваров);
	
	Для Каждого ТекущаяСтрока ИЗ ДокументОснование.Разделы Цикл 
		НоваяСтрока 					 = Товары.Добавить();	
		НоваяСтрока.Номенклатура 		 = "Сумма НДС, уплаченная при ввозе";
		НоваяСтрока.СтавкаНДС 			 = ТекущаяСтрока.СтавкаНДС;
		НоваяСтрока.СуммаСНДС			 = 0;
		НоваяСтрока.СуммаНДС 			 = ТекущаяСтрока.СуммаНДС;
		НоваяСтрока.Сумма 				 = 0;
		НоваяСтрока.ДополнительныеДанные = Справочники.ДополнительныеДанныеЭСЧФ.ВвознойНДС;
	КонецЦикла;	

КонецПроцедуры 

Процедура ЗаполнитьПоЗаявлениюНДС(ДокументОснование) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст	= "ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваровТоварыПоДокументу.Номенклатура,
		|	ЗаявлениеОВвозеТоваровТоварыПоДокументу.Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|	ВЫБОР
		|		КОГДА ЗаявлениеОВвозеТоваровТоварыПоДокументу.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЗаявлениеОВвозеТоваровТоварыПоДокументу.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаявлениеОВвозеТоваровТоварыПоДокументу.Номенклатура.ЕдиницаИзмерения
		|	КОНЕЦ КАК Упаковка,
		|	ЗаявлениеОВвозеТоваровТоварыПоДокументу.СтавкаНДС,
		|	ЗаявлениеОВвозеТоваровТоварыПоДокументу.СуммаНДС,
		|	ЗаявлениеОВвозеТоваровТоварыПоДокументу.СуммаАкциза,
		|	ЗаявлениеОВвозеТоваровТоварыПоДокументу.Количество,
		|	ЗаявлениеОВвозеТоваровТоварыПоДокументу.СуммаНДС + ЗаявлениеОВвозеТоваровТоварыПоДокументу.НалоговаяБазаНДС КАК СуммаСНДС,
		|	ЗаявлениеОВвозеТоваровТоварыПоДокументу.НалоговаяБазаНДС КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗаявлениеОВвозеТоваровТоварыПоДокументу.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЗаявлениеОВвозеТоваровТоварыПоДокументу.НалоговаяБазаНДС / ЗаявлениеОВвозеТоваровТоварыПоДокументу.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.ДополнительныеДанныеЭСЧФ.ВвознойНДС) КАК ДополнительныеДанные,
		|	ЗаявлениеОВвозеТоваровТоварыПоДокументу.Номенклатура.КодОКВЭД КАК КодОКЭД
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТоварыПоДокументу
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТоварыПоДокументу.Ссылка = &ДокументОснование";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Товары.Загрузить(ТаблицаТоваров);
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализацияУслугПрочихАктивов(ДокументОснование) 
	
	Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияУслугПрочихАктивовДоходы.Содержание 		КАК Номенклатура,
		|	РеализацияУслугПрочихАктивовДоходы.ЕдиницаИзмерения КАК Упаковка,
		|	РеализацияУслугПрочихАктивовДоходы.Количество		КАК	Количество,
		|	РеализацияУслугПрочихАктивовДоходы.СтавкаНДС        КАК СтавкаНДС,
		|	РеализацияУслугПрочихАктивовДоходы.Цена       * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Цена,
		|	РеализацияУслугПрочихАктивовДоходы.Сумма      * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Сумма,
		|	РеализацияУслугПрочихАктивовДоходы.СуммаНДС   * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаНДС,
		|	РеализацияУслугПрочихАктивовДоходы.СуммаСНДС  * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаСНДС
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК РеализацияУслугПрочихАктивовДоходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|		ПО РеализацияУслугПрочихАктивовДоходы.Ссылка.Валюта = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	РеализацияУслугПрочихАктивовДоходы.Ссылка = &ДокументОснование";
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Период", Период);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Товары.Загрузить(ТаблицаТоваров);
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетДавальцу(ДокументОснование) 
	
	Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.КодОКВЭД КАК КодОКЭД,
	|	1 КАК Количество,
	|	СУММА(ОтчетДавальцуПродукция.СуммаСНДС - ОтчетДавальцуПродукция.СуммаНДС) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Цена,
	|	СУММА(ОтчетДавальцуПродукция.СуммаСНДС - ОтчетДавальцуПродукция.СуммаНДС) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Сумма,
	|	ОтчетДавальцуПродукция.Ссылка.СтавкаНДС,
	|	СУММА(ОтчетДавальцуПродукция.СуммаНДС) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаНДС,
	|	СУММА(ОтчетДавальцуПродукция.СуммаСНДС) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаСНДС
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ОтчетДавальцуПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|		ПО ОтчетДавальцуПродукция.Ссылка.Валюта = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ОтчетДавальцуПродукция.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.ЕдиницаИзмерения,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.КодТНВЭД,
	|	ОтчетДавальцуПродукция.Ссылка.Номенклатура.КодОКВЭД,
	|	ОтчетДавальцуПродукция.Ссылка.СтавкаНДС";
	
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоТоварам(ДокументОснование) 
	
	Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Коэффициент = -1;
	Иначе 
		Коэффициент = 1;
	КонецЕсли;	

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура 		 КАК Номенклатура,
		|	&ТекстЗапросаЕдиницаИзмерения 		 КАК Упаковка,
		|	ТаблицаТоваров.Номенклатура.КодТНВЭД КАК КодТНВЭД,
		|	ТаблицаТоваров.Номенклатура.КодОКВЭД КАК КодОКЭД,
		|	ТаблицаТоваров.Количество 			 КАК Количество,
		|	ТаблицаТоваров.СтавкаНДС             КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.Ссылка.ЦенаВключаетНДС
		|			ТОГДА (ТаблицаТоваров.СуммаСНДС - ТаблицаТоваров.СуммаНДС) / ТаблицаТоваров.Количество * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент
		|		ИНАЧЕ ТаблицаТоваров.Цена * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.Ссылка.ЦенаВключаетНДС
		|			ТОГДА (ТаблицаТоваров.СуммаСНДС - ТаблицаТоваров.СуммаНДС) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент
		|		ИНАЧЕ ТаблицаТоваров.Сумма     * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТоваров.СуммаНДС  * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент КАК СуммаНДС,
		|	ТаблицаТоваров.СуммаСНДС * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент КАК СуммаСНДС
		|ИЗ
		|	Документ." + ДокументОснование.Метаданные().Имя + ".Товары КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|		ПО ТаблицаТоваров.Ссылка.Валюта = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	ТаблицаТоваров.Ссылка = &ДокументОснование
		|	И ТаблицаТоваров.Цена > 0";
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка",
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
			
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Коэффициент", Коэффициент);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Товары.Загрузить(ТаблицаТоваров);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоУслугам(ДокументОснование) 
	
	Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");

	Запрос = Новый Запрос;
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура 				 КАК Номенклатура,
		|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
		|	ТаблицаТоваров.Номенклатура.КодТНВЭД 		 КАК КодТНВЭД,
		|	ТаблицаТоваров.Номенклатура.КодОКВЭД 		 КАК КодОКЭД,
		|	ТаблицаТоваров.Количество					 КАК Количество,
		|	ТаблицаТоваров.СтавкаНДС					 КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.Ссылка.ЦенаВключаетНДС
		|			ТОГДА (ТаблицаТоваров.СуммаСНДС - ТаблицаТоваров.СуммаНДС) / ТаблицаТоваров.Количество * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
		|		ИНАЧЕ ТаблицаТоваров.Цена * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ТаблицаТоваров.Ссылка.ЦенаВключаетНДС
		|			ТОГДА (ТаблицаТоваров.СуммаСНДС - ТаблицаТоваров.СуммаНДС) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
		|		ИНАЧЕ ТаблицаТоваров.Сумма     * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТоваров.СуммаНДС	 * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаНДС,
		|	ТаблицаТоваров.СуммаСНДС * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК СуммаСНДС
		|ИЗ
		|	Документ." + ДокументОснование.Метаданные().Имя + ".Услуги КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
		|		ПО ТаблицаТоваров.Ссылка.Валюта = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	ТаблицаТоваров.Ссылка = &ДокументОснование";
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Период", Период);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Товары.Загрузить(ТаблицаТоваров);
	
КонецПроцедуры

#КонецОбласти
// }
// 4D

#Область Прочее

// Определяет реквизиты счета-фактуры на основании выбранных документов-оснований
//
// Возвращаемое значение:
//	Структура - реквизиты счета-фактуры.
//
Функция ПолучитьПараметрыСчетаФактурыПоОснованиям()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Организация, Контрагент, КППКонтрагента, Валюта, СчетФактураОснование, РеквизитыОснований,
		|Ответственный, Подразделение, ИдентификаторГосКонтракта");
	Результат.Вставить("Корректировочный", Ложь);
	Результат.Вставить("Исправление", Ложь);
	
	РеквизитыОснований = Новый ТаблицаЗначений;
	Колонки = РеквизитыОснований.Колонки;
	Колонки.Добавить("ДокументОснование");
	Колонки.Добавить("ИсходныйДокумент");
	Колонки.Добавить("НомерИсходногоДокумента",            ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Колонки.Добавить("ДатаИсходногоДокумента",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Колонки.Добавить("НомерИсправленияИсходногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	Колонки.Добавить("ДатаИсправленияИсходногоДокумента",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Результат.РеквизитыОснований = РеквизитыОснований;
	
	МассивДокументов = ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
	
	ТипыОснований = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивДокументов);
	
	Запрос = Новый Запрос;
	ТекстЗапросаОснований = "";
	ТекстЗапросаИсходныхДанных = "";
	
	Для Каждого ТипОснования Из ТипыОснований Цикл
		
		ОбъектыТипа         = ТипОснования.Значение;
		МетаданныеДокумента = ОбъектыТипа[0].Метаданные();
		ИмяОбъекта          = МетаданныеДокумента.Имя;
		
		Запрос.Параметры.Вставить("ДокументОснование_" + ИмяОбъекта, ОбъектыТипа);
		
		Если Не ПустаяСтрока(ТекстЗапросаОснований) Тогда
			ТекстЗапросаОснований = ТекстЗапросаОснований + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
			
		
		Если ИмяОбъекта = "ВозвратТоваровМеждуОрганизациями"
		 Или ИмяОбъекта = "ПередачаТоваровМеждуОрганизациями" Тогда
		 
			ТекстЗапросаОснований = ТекстЗапросаОснований + 
			"ВЫБРАТЬ
			|	Таблица.Организация КАК Организация,
			|	ВЫБОР КОГДА Таблица.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		Таблица.Контрагент
			|	ИНАЧЕ
			|		Таблица.ОрганизацияПолучатель
			|	КОНЕЦ                 КАК Контрагент,
			|	""""                  КАК КППКонтрагента,
			|	Таблица.Подразделение КАК Подразделение,
			|	%ИдентификаторГосКонтракта% КАК ИдентификаторГосКонтракта,
			|	Таблица.Валюта        КАК Валюта
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")";

		ИначеЕсли ИмяОбъекта = "ОтчетПоКомиссииМеждуОрганизациями" Тогда
			
			ТекстЗапросаОснований = ТекстЗапросаОснований + 
			"ВЫБРАТЬ
			|	Таблица.Комиссионер КАК Организация,
			|	ВЫБОР КОГДА Таблица.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		Таблица.Контрагент
			|	ИНАЧЕ
			|		Таблица.Организация
			|	КОНЕЦ                 КАК Контрагент,
			|	""""                  КАК КППКонтрагента,
			|	Таблица.Подразделение КАК Подразделение,
			|	%ИдентификаторГосКонтракта% КАК ИдентификаторГосКонтракта,
			|	Таблица.Валюта        КАК Валюта
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")";
			
		ИначеЕсли Не ОбщегоНазначения.ЕстьРеквизитОбъекта("Грузополучатель", МетаданныеДокумента) Тогда
			
			ТекстЗапросаОснований = ТекстЗапросаОснований + 
			"ВЫБРАТЬ
			|	Таблица.Организация   КАК Организация,
			|	Таблица.Контрагент    КАК Контрагент,
			|	""""                  КАК КППКонтрагента,
			|	Таблица.Подразделение КАК Подразделение,
			|	%ИдентификаторГосКонтракта% КАК ИдентификаторГосКонтракта,
			|	Таблица.Валюта        КАК Валюта
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")";
			
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", МетаданныеДокумента) Тогда
			
			ТекстЗапросаОснований = ТекстЗапросаОснований + 
			"ВЫБРАТЬ
			|	Таблица.Организация КАК Организация,
			|	Таблица.Контрагент  КАК Контрагент,
			|ВЫБОР
			|	КОГДА Таблица.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			И Таблица.Грузополучатель <> Таблица.Контрагент
			|			И Таблица.Грузополучатель.ОбособленноеПодразделение
			|			И Таблица.Грузополучатель.ГоловнойКонтрагент = Таблица.Контрагент
			|		ТОГДА Таблица.Грузополучатель.КПП
			|	ИНАЧЕ """"
			|КОНЕЦ                    КАК КППКонтрагента,
			|	Таблица.Подразделение КАК Подразделение,
			|	%ИдентификаторГосКонтракта% КАК ИдентификаторГосКонтракта,
			|	Таблица.Валюта        КАК Валюта
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")";
			
		Иначе
			
			ТекстЗапросаОснований = ТекстЗапросаОснований + 
			"ВЫБРАТЬ
			|	Таблица.Организация КАК Организация,
			|	Таблица.Контрагент  КАК Контрагент,
			|ВЫБОР
			|	КОГДА Таблица.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			И Таблица.Грузополучатель <> Таблица.Контрагент
			|			И Таблица.Грузополучатель.ОбособленноеПодразделение
			|			И Таблица.Грузополучатель.ГоловнойКонтрагент = Таблица.Контрагент
			|		ТОГДА Таблица.Грузополучатель.КПП
			|	ИНАЧЕ """"
			|КОНЕЦ                    КАК КППКонтрагента,
			|	Таблица.Подразделение КАК Подразделение,
			|	НЕОПРЕДЕЛЕНО          КАК ИдентификаторГосКонтракта,
			|	Таблица.Валюта        КАК Валюта
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")";
			
		КонецЕсли;
		
		Если ИмяОбъекта = "КорректировкаРеализации" Тогда
			
			ТекстЗапросаИсходныхДанных = 
			"ВЫБРАТЬ
			|	ТекущийДокумент.Ссылка                КАК Ссылка,
			|	ТекущийДокумент.ДокументОснование     КАК ДокументОснование,
			|	ТекущийДокумент.ВидКорректировки      КАК ХозяйственнаяОперация
			|ПОМЕСТИТЬ ВТ_ДокументыОснования
			|ИЗ
			|	Документ.КорректировкаРеализации КАК ТекущийДокумент
			|ГДЕ
			|	ТекущийДокумент.Ссылка В (&ДокументОснование_КорректировкаРеализации)
			|	И ТекущийДокумент.ВидКорректировки В (
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон),
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
			|;
			|
			|/////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТекущийДокумент.Ссылка                КАК Ссылка,
			|	ИсходныйСчетФактура.Ссылка            КАК СчетФактура,
			|	ТекущийДокумент.ХозяйственнаяОперация КАК ХозяйственнаяОперация
			|ПОМЕСТИТЬ ВТ_ИсходныеСчетаФактуры
			|ИЗ
			|	ВТ_ДокументыОснования КАК ТекущийДокумент
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ИсходныйСФОснования
			|		ПО ТекущийДокумент.ДокументОснование = ИсходныйСФОснования.ДокументОснование
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК ИсходныйСчетФактура
			|		ПО ИсходныйСФОснования.Ссылка = ИсходныйСчетФактура.Ссылка
			|			И ИсходныйСчетФактура.Проведен
			|			И НЕ ИсходныйСчетФактура.Исправление
			|;
			|
			|/////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсходныеСчетаФактуры.Ссылка                КАК Ссылка,
			|	Основания.ДокументОснование                КАК ДокументОснование,
			|	ИсходныеСчетаФактуры.СчетФактура           КАК СчетФактура,
			|	ИсходныеСчетаФактуры.ХозяйственнаяОперация КАК ХозяйственнаяОперация
			|ПОМЕСТИТЬ ВТ_ОснованияИсходных
			|ИЗ
			|	ВТ_ИсходныеСчетаФактуры КАК ИсходныеСчетаФактуры
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК Основания
			|		ПО ИсходныеСчетаФактуры.СчетФактура = Основания.Ссылка
			|;
			|/////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОснованияИсходных.Ссылка                КАК Ссылка,
			|	КорректировкаРеализации.Ссылка          КАК ДокументОснование,
			|	ОснованияИсходных.СчетФактура           КАК СчетФактура,
			|	ОснованияИсходных.ХозяйственнаяОперация КАК ХозяйственнаяОперация
			|ПОМЕСТИТЬ ВТ_ОснованияИсходныхИКорректировки
			|ИЗ
			|	ВТ_ОснованияИсходных КАК ОснованияИсходных
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|		ПО ОснованияИсходных.ДокументОснование = КорректировкаРеализации.ДокументОснование
			|		И (КорректировкаРеализации.Проведен)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОснованияИсходных.Ссылка,
			|	ОснованияИсходных.ДокументОснование,
			|	ОснованияИсходных.СчетФактура,
			|	ОснованияИсходных.ХозяйственнаяОперация
			|ИЗ
			|	ВТ_ОснованияИсходных КАК ОснованияИсходных
			|;
			|
			|/////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОснованияИсходных.Ссылка      КАК ДокументОснование,
			|	ОснованияИсходных.СчетФактура КАК ИсходныйСчетФактура,
			|	ИсходныеДокументы.Ссылка      КАК ИсходныйДокумент,
			|	ИсходныеДокументы.Номер       КАК НомерИсходногоДокумента,
			|	
			|	ВЫБОР КОГДА ИсходныеДокументы.Исправление ТОГДА
			|		ЕСТЬNULL(ИсходныеДокументы.СчетФактураОснование.Дата, Неопределено)
			|	ИНАЧЕ
			|		ИсходныеДокументы.Дата
			|	КОНЕЦ КАК ДатаИсходногоДокумента,
			|	
			|	ВЫБОР КОГДА ИсходныеДокументы.Исправление ТОГДА
			|		ИсходныеДокументы.НомерИсправления
			|	ИНАЧЕ
			|		Неопределено
			|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
			|	
			|	ВЫБОР КОГДА ИсходныеДокументы.Исправление ТОГДА
			|		ИсходныеДокументы.Дата
			|	ИНАЧЕ
			|		Неопределено
			|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента,
			|	
			|	ВЫБОР КОГДА ОснованияИсходных.ХозяйственнаяОперация =
			|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
			|			ИЛИ ИсходныеДокументы.Корректировочный ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|	КОНЕЦ КАК Корректировочный,
			|
			|	ВЫБОР КОГДА ОснованияИсходных.ХозяйственнаяОперация =
			|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок) ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|	КОНЕЦ КАК Исправление
			|
			|ИЗ
			|	ВТ_ОснованияИсходныхИКорректировки КАК ОснованияИсходных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураОснования
			|		ПО ОснованияИсходных.ДокументОснование = СчетФактураОснования.ДокументОснование
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК ИсходныеДокументы
			|		ПО СчетФактураОснования.Ссылка = ИсходныеДокументы.Ссылка
			|			И (НЕ ИсходныеДокументы.Ссылка = &СчетФактура)
			|			И (НЕ ИсходныеДокументы.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИсходныеДокументы.Корректировочный УБЫВ,
			|	ВЫБОР КОГДА ИсходныеДокументы.Корректировочный И ИсходныеДокументы.Исправление ТОГДА
			|		ЕСТЬNULL(ИсходныеДокументы.СчетФактураОснование.Дата, Неопределено)
			|	КОГДА ИсходныеДокументы.Корректировочный ТОГДА
			|		ИсходныеДокументы.Дата
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ УБЫВ,
			|	НомерИсправления УБЫВ
			|
			|ИТОГИ
			|	МАКСИМУМ(Корректировочный),
			|	МАКСИМУМ(Исправление)
			|ПО
			|	ОБЩИЕ,
			|	ИсходныйСчетФактура";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаОснований = Неопределено;
	ВыборкаИсходныхДанных = Неопределено;
	
	//++ НЕ УТ
	ТекстЗапросаОснований = СтрЗаменить(ТекстЗапросаОснований, "%ИдентификаторГосКонтракта%", "
			|	ВЫБОР КОГДА НЕ Таблица.Договор.ГосударственныйКонтракт = ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка) ТОГДА
			|		Таблица.Договор.ГосударственныйКонтракт.Код
			|	ИНАЧЕ
			|		Таблица.Договор.ИдентификаторГосКонтракта
			|	КОНЕЦ");
	//-- НЕ УТ
	
	ТекстЗапросаОснований = СтрЗаменить(ТекстЗапросаОснований, "%ИдентификаторГосКонтракта%", "Таблица.Договор.ИдентификаторГосКонтракта");
	
	Если ПустаяСтрока(ТекстЗапросаИсходныхДанных) Тогда
	
		Запрос.Текст = ТекстЗапросаОснований;
		ВыборкаОснований = Запрос.Выполнить().Выбрать();
	
	Иначе
		
		Запрос.Текст = ТекстЗапросаОснований + "
		|;
		|
		|" + ТекстЗапросаИсходныхДанных;
		
		Запрос.УстановитьПараметр("СчетФактура", Ссылка);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВыборкаОснований = РезультатЗапроса[0].Выбрать();
		КоличествоЗапросов = РезультатЗапроса.Количество();
		ВыборкаИсходныхДанных = РезультатЗапроса[КоличествоЗапросов-1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецЕсли;
	
	ПерваяСтрока      = Истина;
	РазныеОрганизации = Ложь;
	РазныеКонтрагенты = Ложь;
	РазныеВалюты      = Ложь;
	РазныеПодразделения = Ложь;
	РазныеИдентификаторыГосКонтракта = Ложь;
	
	Пока ВыборкаОснований.Следующий() Цикл
		
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
			ЗаполнитьЗначенияСвойств(Результат, ВыборкаОснований);
		Иначе
			РазныеОрганизации = РазныеОрганизации Или Результат.Организация <> ВыборкаОснований.Организация;
			РазныеКонтрагенты = РазныеКонтрагенты Или Результат.Контрагент <> ВыборкаОснований.Контрагент;
			РазныеВалюты      = РазныеВалюты Или Результат.Валюта <> ВыборкаОснований.Валюта;
			РазныеПодразделения = РазныеПодразделения Или Результат.Подразделение <> ВыборкаОснований.Подразделение;
			РазныеИдентификаторыГосКонтракта = РазныеИдентификаторыГосКонтракта
				ИЛИ Результат.ИдентификаторГосКонтракта <> ВыборкаОснований.ИдентификаторГосКонтракта;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РазныеОрганизации ИЛИ РазныеКонтрагенты ИЛИ РазныеВалюты Тогда
			
		ТекстСообщения = НСтр("ru='Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:'")
			+ ?(РазныеОрганизации, Символы.ПС + НСтр("ru=' - не совпадает организация'"), "")
			+ ?(РазныеКонтрагенты, Символы.ПС + НСтр("ru=' - не совпадает контрагент'"), "")
			+ ?(РазныеВалюты, Символы.ПС + НСтр("ru=' - не совпадает валюта документа'"), "") + Символы.ПС 
			+ НСтр("ru='Необходимо изменить параметры документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если РазныеОрганизации Тогда
			Результат.Организация = Неопределено;
		КонецЕсли;
		Если РазныеКонтрагенты Тогда
			Результат.Контрагент = Неопределено;
		КонецЕсли;
		Если РазныеВалюты Тогда
			Результат.Валюта = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Ответственный = Пользователи.ТекущийПользователь();
	
	Если РазныеПодразделения Тогда
		Результат.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Результат.Ответственный, Результат.Подразделение);
	КонецЕсли;
	Если РазныеИдентификаторыГосКонтракта Тогда
		Результат.ИдентификаторГосКонтракта = "";
	КонецЕсли;
	
	Если ВыборкаИсходныхДанных <> Неопределено Тогда
		
		Если ВыборкаИсходныхДанных.Следующий() Тогда
			Результат.Исправление      = ВыборкаИсходныхДанных.Исправление;
			Результат.Корректировочный = ВыборкаИсходныхДанных.Корректировочный;
		КонецЕсли;
		
		ВыборкаПоИсходнымСчетамФактуры = ВыборкаИсходныхДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		РеквизитыСчетаФактурыОснования = Неопределено;
		
		Если Результат.Исправление Тогда
			
			ПерваяСтрока               = Истина;
			РазныеСчетФактураОснование = Ложь;
			
			Пока ВыборкаПоИсходнымСчетамФактуры.Следующий() Цикл
				
				ВыборкаПоДокументам = ВыборкаПоИсходнымСчетамФактуры.Выбрать();
				Если ВыборкаПоДокументам.Следующий() Тогда
					
					Если ПерваяСтрока Тогда
						ПерваяСтрока = Ложь;
						Результат.СчетФактураОснование = ВыборкаПоДокументам.ИсходныйДокумент;
					Иначе
						РазныеСчетФактураОснование = РазныеСчетФактураОснование
							Или Результат.СчетФактураОснование <> ВыборкаПоДокументам.ИсходныйДокумент;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если РазныеСчетФактураОснование Тогда
				Результат.Исправление = Ложь;
				Результат.Корректировочный = Истина;
			Иначе
				РеквизитыСчетаФактурыОснования = Документы.СчетФактураВыданный.ДанныеСчетаФактуры(Результат.СчетФактураОснование);
				Если Результат.Корректировочный И Не РеквизитыСчетаФактурыОснования.Корректировочный Тогда
					Результат.Исправление = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат.Корректировочный Тогда
			
			Если Результат.Исправление Тогда
				
				МассивКорректировок = Запрос.Параметры.ДокументОснование_КорректировкаРеализации;
				ИсходныеДанныеСчетаФактуры = РеквизитыСчетаФактурыОснования.ДокументыОснования;
				
				Для Каждого ОснованиеКорректировка Из МассивКорректировок Цикл
					Для Каждого СтрокаТаблицы Из ИсходныеДанныеСчетаФактуры Цикл
						СтрокаСРеквизитами = РеквизитыОснований.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСРеквизитами, СтрокаТаблицы);
						СтрокаСРеквизитами.ДокументОснование = ОснованиеКорректировка;
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				ВыборкаПоИсходнымСчетамФактуры.Сбросить();
				
				Пока ВыборкаПоИсходнымСчетамФактуры.Следующий() Цикл
					
					ВыборкаПоДокументам = ВыборкаПоИсходнымСчетамФактуры.Выбрать();
					Пока ВыборкаПоДокументам.Следующий() Цикл
						
						Если РеквизитыОснований.Найти(ВыборкаПоДокументам.ДокументОснование) = Неопределено Тогда
							СтрокаСРеквизитами = РеквизитыОснований.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаСРеквизитами, ВыборкаПоДокументам);
						КонецЕсли;
						
					КонецЦикла;
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДублиСчетФактуры(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Ссылка.Организация КАК Организация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка <> &Ссылка
	|	И ДанныеДокумента.ДокументОснование В (&МассивОснований)
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И НЕ ДанныеДокумента.Ссылка.ПометкаУдаления
	|	И НЕ ДанныеДокумента.Ссылка.Исправление
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МассивОснований", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Исправление Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 по организации %2 уже введен счет-фактура %3'"),
				Выборка.ДокументОснование,
				Выборка.Организация,
				Выборка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				,
				,
				Отказ);
			
		ИначеЕсли Исправление И СчетФактураОснование <> Выборка.Ссылка Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании документа %1 введен счет-фактура %2. Недопустимо исправление счета-фактуры %3.'"),
				Выборка.ДокументОснование,
				Выборка.Ссылка,
				СчетФактураОснование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				,
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьМассивОснованийДляПроверки()
	
	МассивОснований = Новый Массив;
	
	Если НЕ ЭтотОбъект.ДополнительныеСвойства.ЭтоНовый Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Основания.ДокументОснование КАК Основание
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК Основания
		|ГДЕ
		|	Основания.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = Запрос.Выполнить();
		МассивОснований = Результат.Выгрузить().ВыгрузитьКолонку("Основание");
		
	КонецЕсли;
	
	Если ЭтотОбъект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МассивОснованийОбъекта = ЭтотОбъект.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОснований, МассивОснованийОбъекта, Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(МассивОснований, Тип("ДокументСсылка.ОтчетКомиссионера"));
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивОснованийДляПроверки", Новый ФиксированныйМассив(МассивОснований));
	
КонецПроцедуры

Функция ПолучитьДатуПоследнегоДокументаОснования()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ВтДокументыОснования
	|ИЗ &ДокументыОснования КАК Таб
	|;
	|ВЫБРАТЬ МАКСИМУМ(ВтДокументыОснования.ДокументОснование.Дата) КАК Дата
	|ИЗ ВтДокументыОснования";
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования.Выгрузить());
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Дата(1,1,1);
	Иначе
		Возврат Результат.Выгрузить()[0].Дата;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
