
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборАмортизационнойГруппыОС" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		
		ОбработатьВыборКодаПоОКОФ(Параметр);
		
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаВыбора" Тогда
		Если ВыбранноеЗначение.Количество() > 0 Тогда
			КодыОбъектов = СоответствиеКодовПоОбъектамЭксплуатации(ВыбранноеЗначение);
			Для Каждого КлючИЗначение Из КодыОбъектов Цикл
				Строка = Объект.ОС.Добавить();
				Строка.ОсновноеСредство = КлючИЗначение.Ключ;
				Строка.ИнвентарныйНомер = КлючИЗначение.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПринятиеКУчетуОС", ПараметрыЗаписи, Объект.Ссылка);
	ОповеститьОбИзменении(Тип("СправочникСсылка.ОбъектыЭксплуатации"));
	
	Если Объект.ДокументНаОснованииИнвентаризации Тогда
		Оповестить("ЗаписьДокументаНаОснованииИнвентаризации",, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументНаОснованииПриИзменении(Элемент)
	
	Если Объект.ДокументНаОсновании Тогда
		Если СписокТиповДокументаОснования.Количество() > 0 Тогда
			СписокТиповДокументаОснования.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВыборТипаДокументаОснования", ЭтаФорма), НСтр("ru='Документ основание'"));
		Иначе
			ОткрытьФорму("Документ.ИнвентаризацияОС.ФормаВыбора", , ЭтаФорма, ЭтаФорма,,, Новый ОписаниеОповещения("ВыборДокументаОснования", ЭтаФорма));
		КонецЕсли;
	Иначе
		Объект.ДокументОснование = Неопределено;
		Объект.ДокументНаОснованииИнвентаризации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Объект.ДокументНаОсновании = Ложь;
	Иначе
		ОткрытьФорму(Результат.Значение, , ЭтаФорма, ЭтаФорма,,, Новый ОписаниеОповещения("ВыборДокументаОснования", ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ДокументОснование = Результат;
		Объект.ДокументНаОснованииИнвентаризации = (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияОС"));
		Если Объект.ДокументНаОснованииИнвентаризации Тогда
			Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.НеИспользуется");
		КонецЕсли;
	Иначе
		Объект.ДокументНаОсновании = Ложь;
		Объект.ДокументНаОснованииИнвентаризации = Ложь;
	КонецЕсли;
	
	ОбновитьСвойстваЭлементов("ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПримененияЦелевогоФинансированияПриИзменении(Элемент)
	
	ОбновляемыеРеквизиты = Новый Структура("ВариантПримененияЦелевогоФинансирования");
	
	Если (Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.Полное")
			Или Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.Частичное"))
		И Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена") Тогда
		
		Объект.ПорядокУчетаБУ = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
		Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
		ОбновляемыеРеквизиты.Вставить("ПорядокУчетаБУ");
		ОбновляемыеРеквизиты.Вставить("ПорядокУчетаНУ");
		
	ИначеЕсли Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.Полное")
		И Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		
		Объект.ПорядокУчетаНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
		ОбновляемыеРеквизиты.Вставить("ПорядокУчетаНУ");
		
	КонецЕсли;
	
	ОбновитьСвойстваЭлементов(ОбновляемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	Если НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности Или Объект.ОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ответы = Новый СписокЗначений;
	Ответы.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Продолжить'"));
	Ответы.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить'"));
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("НаправлениеДеятельностиПриИзмененииОбработкаОповещения", ЭтаФорма),
		НСтр("ru='При изменении направления деятельности табличная часть документа будет очищена'"),
		Ответы);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзмененииОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Объект.НаправлениеДеятельности = НаправлениеДеятельностиДоИзменения;
	Иначе
		НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности;
		Объект.ОС.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БУПорядокУчетаПриИзменении(Элемент)
	
	ПорядокУчетаНУ = СоответствиеПорядковУчета.Получить(Объект.ПорядокУчетаБУ);
	Объект.ПорядокУчетаНУ = ?(ПорядокУчетаНУ = Неопределено, Объект.ПорядокУчетаНУ, ПорядокУчетаНУ);
	
	ОбновитьСвойстваЭлементов("ПорядокУчетаБУ, ПорядокУчетаНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура БУНачислятьАмортизациюПриИзменении(Элемент)
	
	Если Объект.НачислятьАмортизациюБУ <> Объект.НачислятьАмортизациюНУ Тогда
		Объект.НачислятьАмортизациюНУ = Объект.НачислятьАмортизациюБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БУМетодНачисленияАмортизацииПриИзменении(Элемент)
	
	БУМетодНачисленияАмортизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура БУМетодНачисленияАмортизацииПриИзмененииНаСервере()
	
	ОбновитьСвойстваЭлементов("ПараметрыАмортизации");
	
	Если Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
		
		Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ШифрПоЕНАОФ, "НормаАмортизационныхОтчислений");
		Если ЗначениеЗаполнено(Коэффициент) Тогда
			Объект.ГодоваяНормаАмортизацииБУ = Коэффициент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
		Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ШифрПоЕНАОФ, "ПроцентОтСтоимостиМашины");
		Если ЗначениеЗаполнено(Коэффициент) Тогда
			Объект.ГодоваяНормаАмортизацииБУ = Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БУСрокИспользованияПриИзменении(Элемент)
	
	Если Объект.СрокИспользованияНУ = 0
		Или СрокИспользованияБУ = Объект.СрокИспользованияНУ Тогда
		
		Объект.СрокИспользованияНУ = Объект.СрокИспользованияБУ;
		НУСрокИспользованияРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияНУ);
		
	КонецЕсли;
	
	БУСрокИспользованияРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
		Объект.СрокИспользованияБУ);
	
	СрокИспользованияБУ = Объект.СрокИспользованияБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаздельногоУчетаНДСПриИзменении(Элемент)
	ОбновитьСвойстваЭлементов("НДС");
КонецПроцедуры

&НаКлиенте
Процедура НУПорядокУчетаПриИзменении(Элемент)
	ОбновитьСвойстваЭлементов("ПорядокУчетаНУ");
КонецПроцедуры

&НаКлиенте
Процедура НУСрокИспользованияПриИзменении(Элемент)
	
	НУСрокИспользованияРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
		Объект.СрокИспользованияНУ);
	
КонецПроцедуры

&НаКлиенте
Процедура НУВключитьАмортизационнуюПремиюВСоставРасходовПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементов("АмортизационнаяПремия");
	
	Если ЗначениеЗаполнено(Объект.АмортизационнаяГруппа)
		И Объект.АмортизационнаяГруппа <> ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа") Тогда
		
		Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 10;
		Если СписокАмортизационныхГрупп.НайтиПоЗначению(Объект.АмортизационнаяГруппа) <> Неопределено Тогда
			Объект.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 30;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияПриИзменении(Элемент)
	
	АдресМестонахожденияЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(
		Объект.АдресМестонахождения,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияОчистка(Элемент, СтандартнаяОбработка)
	
	АдресМестонахожденияЗначенияПолей = "";
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(
		УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"),
			АдресМестонахожденияЗначенияПолей),
		ЭтотОбъект,
		Новый ОписаниеОповещения("АдресМестонахожденияЗавершениеВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияЗавершениеВыбора(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы)<>Тип("Структура") Тогда
		// не было измнений в данных
		Возврат;
	КонецЕсли;
	
	АдресМестонахожденияЗначенияПолей = РезультатОткрытияФормы.КонтактнаяИнформация;
	Объект.АдресМестонахождения = РезультатОткрытияФормы.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		СтатьяРасходовПриИзмененииНаСервере();
	Иначе
		АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
	Если СтатьяРасходовДоИзменения = Объект.СтатьяРасходовАмортизационнойПремии Тогда
		
		Объект.СтатьяРасходовАмортизационнойПремии = Объект.СтатьяРасходов;
		Объект.АналитикаРасходовАмортизационнойПремии = Объект.АналитикаРасходов;
		
	КонецЕсли;
	
	СтатьяРасходовДоИзменения = Объект.СтатьяРасходов;
	АналитикаРасходовДоИзменения = Объект.АналитикаРасходов;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзмененииНаСервере()
	
	АналитикаРасходовОбязательна = 
		ЗначениеЗаполнено(Объект.СтатьяРасходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходов, "КонтролироватьЗаполнениеАналитики");
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовПриИзменении(Элемент)
	
	Если Объект.СтатьяРасходов = Объект.СтатьяРасходовАмортизационнойПремии
		И АналитикаРасходовДоИзменения = Объект.АналитикаРасходовАмортизационнойПремии Тогда
		
		Объект.АналитикаРасходовАмортизационнойПремии = Объект.АналитикаРасходов;
		
	КонецЕсли;
	
	АналитикаРасходовДоИзменения = Объект.АналитикаРасходов;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовАмортизационнойПремииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходовАмортизационнойПремии) Тогда
		СтатьяРасходовАмортизационнойПремииПриИзмененииНаСервере();
	Иначе
		АналитикаРасходовАмортизационнойПремииОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовАмортизационнойПремииПриИзмененииНаСервере()
	
	АналитикаРасходовАмортизационнойПремииОбязательна = 
		ЗначениеЗаполнено(Объект.СтатьяРасходовАмортизационнойПремии)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовАмортизационнойПремии, "КонтролироватьЗаполнениеАналитики");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	
	ГруппаОСПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ГруппаОСПриИзмененииСервер()
	
	ОбновитьСвойстваЭлементов("ГруппаОС");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОФПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.АмортизационнаяГруппа) И ЗначениеЗаполнено(Объект.КодПоОКОФ) Тогда
		КодОКОФПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("КодПоОКОФ", Объект.КодПоОКОФ);
	ПараметрыОткрытия.Вставить("АмортизационнаяГруппа", Объект.АмортизационнаяГруппа);
	
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.Форма.ФормаВыбораАмортизационнойГруппы", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаватьАмортизациюВДругуюОрганизациюПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементов("ПередаватьРасходыВДругуюОрганизацию");
	
	Если Не Объект.ПередаватьРасходыВДругуюОрганизацию Тогда
		Объект.ОрганизацияПолучательРасходов = Неопределено;
		Объект.СчетПередачиРасходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементов("Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяДоходов) Тогда
		СтатьяДоходовПриИзмененииНаСервере();
	Иначе
		АналитикаДоходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовПриИзмененииНаСервере()
	
	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПоступленияПриИзменении(Элемент)
	
	ОбновляемыеРеквизиты = Новый Структура("СпособПоступления");
	
	Если Объект.СпособПоступления = ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга")
		И (Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.Частичное") 
			ИЛИ Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.Полное")) Тогда
			
		Объект.ВариантПримененияЦелевогоФинансирования = ПредопределенноеЗначение("Перечисление.ВариантыПримененияЦелевогоФинансирования.НеИспользуется");
		ОбновляемыеРеквизиты.Вставить("ВариантПримененияЦелевогоФинансирования");
		
	КонецЕсли;
	
	ОбновитьСвойстваЭлементов(ОбновляемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиОС

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	СтоимостьБУ = ТекущиеДанные.СтоимостьБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ЭлементКоллекции = Элементы.ОС.ТекущиеДанные;
	Если ЗначениеЗаполнено(ЭлементКоллекции.ОсновноеСредство) Тогда
		ЭлементКоллекции.ИнвентарныйНомер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ЭлементКоллекции.ОсновноеСредство, "Код");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Если ТекущиеДанные.СтоимостьНУ = ОССтоимостьБУ Тогда
		ТекущиеДанные.СтоимостьНУ = ТекущиеДанные.СтоимостьБУ;
		ОССтоимостьБУ = ТекущиеДанные.СтоимостьБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	ТекущиеДанные.СтоимостьВР = ТекущиеДанные.СтоимостьБУ - ТекущиеДанные.СтоимостьНУ - ТекущиеДанные.СтоимостьПР;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьПРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	ТекущиеДанные.СтоимостьВР = ТекущиеДанные.СтоимостьБУ - ТекущиеДанные.СтоимостьНУ - ТекущиеДанные.СтоимостьПР;
	Если ТекущиеДанные.СтоимостьВР < 0 Тогда
		ТекущиеДанные.СтоимостьНУ = ТекущиеДанные.СтоимостьНУ + ТекущиеДанные.СтоимостьВР;
		ТекущиеДанные.СтоимостьВР = ТекущиеДанные.СтоимостьБУ - ТекущиеДанные.СтоимостьНУ - ТекущиеДанные.СтоимостьПР;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиЦелевоеФинансирование

&НаКлиенте
Процедура ЦелевоеФинансированиеСчетПриИзменении(Элемент)
	ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты(Элементы.ЦелевоеФинансирование.ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникиФинансирования(Команда)
	
	ЗаполнитьИсточникиФинансированияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникиФинансированияНаСервере()
	
	Объект.ЦелевоеФинансирование.Загрузить(УчетОСВызовСервера.ДанныеЗаполненияЦелевогоФинансирования(Объект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
	ПараметрыЗаполненияПоНаименованию(ЭтаФорма));
	
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОС.НеПринятоКУчету"));
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОС.СнятоСУчета"));
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету"));
	
	ПараметрыОтбор = Новый Структура;
	ПараметрыОтбор.Вставить("БУСостояние", МассивСостояний);
	ПараметрыОтбор.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контекст", "БУ, МФУ");
	ПараметрыФормы.Вставить("ДатаСведений", Объект.Дата);
	ПараметрыФормы.Вставить("ТекущийРегистратор", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбор);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#Область СтандартныеПодсистемы

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		"СтатьяРасходов, АналитикаРасходов,
		|СтатьяРасходовАмортизационнойПремии, АналитикаРасходовАмортизационнойПремии,
		|СтатьяРасходовНалог, АналитикаРасходовНалог");
	
	#Область ЦелевоеФинансирование
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто2.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто2.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто3.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто3.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	// Список амортизационных групп с 30% порогом амортизационной премии
	СписокАмортизационныхГрупп.Очистить();
	СписокАмортизационныхГрупп.Добавить(Перечисления.АмортизационныеГруппы.ТретьяГруппа);
	СписокАмортизационныхГрупп.Добавить(Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа);
	СписокАмортизационныхГрупп.Добавить(Перечисления.АмортизационныеГруппы.ПятаяГруппа);
	СписокАмортизационныхГрупп.Добавить(Перечисления.АмортизационныеГруппы.ШестаяГруппа);
	СписокАмортизационныхГрупп.Добавить(Перечисления.АмортизационныеГруппы.СедьмаяГруппа);
	
	// Соответствие порядков учета стоимости налогового учета от значений бухгалтерского
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(
		Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации,
		Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
	Соответствие.Вставить(
		Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается,
		Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы);
	Соответствие.Вставить(
		Перечисления.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена,
		Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.АмортизацияНачислена);
	СоответствиеПорядковУчета = Новый ФиксированноеСоответствие(Соответствие);
	
	АдресМестонахожденияЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(
		Объект.АдресМестонахождения,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	БУСрокИспользованияРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
		Объект.СрокИспользованияБУ);
	
	НУСрокИспользованияРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
		Объект.СрокИспользованияНУ);
	
	ОбновитьСвойстваЭлементов();
	
	СрокИспользованияБУ = Объект.СрокИспользованияБУ;
	
	СтатьяРасходовДоИзменения = Объект.СтатьяРасходов;
	АналитикаРасходовДоИзменения = Объект.АналитикаРасходов;
	
	ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты();
	
	ЗаполнитьСписокТиповДокументаОснования();
	
	АналитикаРасходовОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяРасходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходов, "КонтролироватьЗаполнениеАналитики");
	
	АналитикаРасходовАмортизационнойПремииОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяРасходовАмортизационнойПремии)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовАмортизационнойПремии, "КонтролироватьЗаполнениеАналитики");
	
	АналитикаДоходовОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
		
	ЗаполнитьПодсказкуКодОКОФ();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТиповДокументаОснования()
	
	СписокТиповДокументаОснования = Новый СписокЗначений;
	СписокТиповДокументаОснования.Добавить("Документ.ИнвентаризацияОС.ФормаВыбора", НСтр("ru='Инвентаризация ОС'"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛизинг") Тогда
		СписокТиповДокументаОснования.Добавить("Документ.ПоступлениеПредметовЛизинга.ФормаВыбора", НСтр("ru='Поступление предметов лизинга'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЭлементов(Параметры=Неопределено)
	
	ОбновитьВсе = (Параметры = Неопределено);
	Действия = ?(ТипЗнч(Параметры)=Тип("Структура"), Параметры, Новый Структура(Параметры));
	
	Если ОбновитьВсе Или Действия.Свойство("ПорядокУчетаБУ") Тогда
		
		Если Объект.ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			Или Объект.ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена Тогда
			Элементы.ГруппаБУАмортизация.Видимость = Истина;
			Элементы.СчетАмортизации.Видимость = Истина;
		Иначе
			Элементы.ГруппаБУАмортизация.Видимость = Ложь;
			Элементы.СчетАмортизации.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.НУПорядокУчета.ТолькоПросмотр = (Объект.ПорядокУчетаБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
		
		Действия.Вставить("СтоимостьЗаданаДокументом");
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ПорядокУчетаНУ") Тогда
		
		Элементы.НУПорядокУчета.РежимВыбораИзСписка = (Объект.ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
		
		Элементы.ГруппаНУАмортизация.Видимость =
			Объект.ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			Или Объект.ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.АмортизацияНачислена;
		Элементы.ГруппаНУАмортизацоннаяПремия.Видимость =
			Объект.ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
		
		Действия.Свойство("АмортизационнаяПремия");
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ПорядокУчетаБУ") Или Действия.Свойство("ПорядокУчетаНУ") Тогда
		Элементы.ГруппаОтражениеРасходовПоАмортизации.Видимость = (
			Объект.ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			Или Объект.ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена
			Или Объект.ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			Или Объект.ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.АмортизацияНачислена);
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ПараметрыАмортизации") Тогда
		
		Элементы.БУСрокИспользования.АвтоОтметкаНезаполненного = (
			Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования);
		
		Если Не Элементы.БУСрокИспользования.АвтоОтметкаНезаполненного Тогда
			Элементы.БУСрокИспользования.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Элементы.БУГрафикАмортизации.Видимость = (
			Объект.МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
			И Объект.МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
		
		Элементы.БУКоэффициентУскорения.Видимость =(
			Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
		
		Элементы.ОСПоказательНаработки.Видимость = (
			Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
		
		Элементы.ОСПоказательНаработкиЕдиницаИзмерения.Видимость = (
			Элементы.ОСПоказательНаработки.Видимость);
		
		Элементы.ОСОбъемНаработки.Видимость = (
			Элементы.ОСПоказательНаработки.Видимость);
		
		Элементы.БУГодоваяНормаАмортизации.Видимость = (
			Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
		
	КонецЕсли;
		
	Если ОбновитьВсе Или Действия.Свойство("НДС") Тогда
		
		ТребуетсяЗаполнение = (Объект.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента);
		Элементы.БУНалогообложениеНДС.ТолькоПросмотр = Не ТребуетсяЗаполнение;
		Элементы.БУНалогообложениеНДС.АвтоОтметкаНезаполненного = ТребуетсяЗаполнение;
		Элементы.БУНалогообложениеНДС.ОтметкаНезаполненного = ТребуетсяЗаполнение И Не ЗначениеЗаполнено(Объект.НалогообложениеНДС);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("АмортизационнаяПремия") Тогда
		
		АмортизацияВНУ = (Объект.ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
		Элементы.НУПроцентКапитальныхВложенийВключаемыхВРасходы.Видимость = (АмортизацияВНУ И Объект.ВключитьАмортизационнуюПремиюВСоставРасходов);
		Элементы.ГруппаОтражениеРасходовПоАмортизационнойПремии.Видимость = (АмортизацияВНУ И Объект.ВключитьАмортизационнуюПремиюВСоставРасходов);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ГруппаОС") Тогда
		
		ТребуетсяНастройка = ВнеоборотныеАктивыПовтИсп.ТребуетсяНастройкаОтраженияРасходовПоНалогам(Объект.ГруппаОС);
		Элементы.СтатьяРасходовНалог.АвтоОтметкаНезаполненного = ТребуетсяНастройка;
		
		ТребуетсяАмортизационнаяГруппа = (Объект.ГруппаОС <> Перечисления.ГруппыОС.ЗемельныеУчастки);
		Элементы.АмортизационнаяГруппа.АвтоОтметкаНезаполненного = ТребуетсяАмортизационнаяГруппа;
		Элементы.АмортизационнаяГруппа.ОтметкаНезаполненного = ТребуетсяАмортизационнаяГруппа И Не ЗначениеЗаполнено(Объект.АмортизационнаяГруппа);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ПередаватьРасходыВДругуюОрганизацию") Тогда
		
		Элементы.ОрганизацияПолучательРасходов.Доступность = Объект.ПередаватьРасходыВДругуюОрганизацию;
		Элементы.СчетПередачиРасходов.Доступность = Объект.ПередаватьРасходыВДругуюОрганизацию;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("Организация") Тогда
		
		ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация);
		
		Элементы.ПередаватьРасходыВДругуюОрганизацию.Видимость = ЕстьСвязанныеОрганизации;
		Элементы.ОрганизацияПолучательРасходов.Видимость = ЕстьСвязанныеОрганизации;
		Элементы.СчетПередачиРасходов.Видимость = ЕстьСвязанныеОрганизации;
		
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ВариантПримененияЦелевогоФинансирования") Тогда
		
		ТребуетсяЗаполнение = ЗначениеЗаполнено(Объект.ВариантПримененияЦелевогоФинансирования)
			И (Объект.ВариантПримененияЦелевогоФинансирования<>Перечисления.ВариантыПримененияЦелевогоФинансирования.НеИспользуется);
		Элементы.НаправлениеДеятельности.АвтоОтметкаНезаполненного = ТребуетсяЗаполнение;
		Элементы.НаправлениеДеятельности.ОтметкаНезаполненного = ТребуетсяЗаполнение И Не ЗначениеЗаполнено(Объект.НаправлениеДеятельности);
		
		Элементы.СтраницаЦелевоеФинансирование.Видимость = ТребуетсяЗаполнение;
		
		Элементы.ЦелевоеФинансированиеСумма.Видимость = (Объект.ВариантПримененияЦелевогоФинансирования=Перечисления.ВариантыПримененияЦелевогоФинансирования.Частичное);
		
		СписокВыбора = Элементы.БУПорядокУчета.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации);
		СписокВыбора.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается);
		Если Объект.ВариантПримененияЦелевогоФинансирования=Перечисления.ВариантыПримененияЦелевогоФинансирования.НеИспользуется Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена);
		КонецЕсли;
		
		СписокВыбора = Элементы.НУПорядокУчета.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
		Если Объект.ВариантПримененияЦелевогоФинансирования<>Перечисления.ВариантыПримененияЦелевогоФинансирования.Полное Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету);
		КонецЕсли;
		СписокВыбора.Добавить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы);
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ДокументОснование") Тогда
		
		Элементы.ВариантПримененияЦелевогоФинансирования.ТолькоПросмотр = Объект.ДокументНаОснованииИнвентаризации;
		
		Элементы.СтатьяДоходовПоИнвентаризации.Видимость = Объект.ДокументНаОснованииИнвентаризации;
		Элементы.АналитикаДоходовПоИнвентаризации.Видимость = Объект.ДокументНаОснованииИнвентаризации;
		
		Элементы.СтраницаОтражениеРасходов.Заголовок = ?(
			Объект.ДокументНаОснованииИнвентаризации,
			НСтр("ru='Отражение доходов и расходов'"),
			НСтр("ru='Отражение расходов'")
		);
		
		Действия.Вставить("СтоимостьЗаданаДокументом");
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("СтоимостьЗаданаДокументом") Тогда
		Если Объект.ДокументНаОснованииИнвентаризации 
			Или Объект.ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена Тогда
			
			Элементы.ОССтоимостьБУ.Видимость = Истина;
			Элементы.ОССтоимостьНУ.Видимость = Истина;
			Элементы.ОССтоимостьПР.Видимость = Истина;
			Элементы.ОССтоимостьВР.Видимость = Истина;
		Иначе
			Элементы.ОССтоимостьБУ.Видимость = Ложь;
			Элементы.ОССтоимостьНУ.Видимость = Ложь;
			Элементы.ОССтоимостьПР.Видимость = Ложь;
			Элементы.ОССтоимостьВР.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если ОбновитьВсе Или Действия.Свойство("СпособПоступления") Тогда
		
		Элементы.ВариантПримененияЦелевогоФинансирования.ТолькоПросмотр = 
			(Объект.СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)
	
	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
	Результат.Вставить("ИмяТабличнойЧасти", "ОС");
	Результат.Вставить("ПолучатьИнвентарныйНомерИзКода", Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)
	
	УчетОСВызовСервера.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма),
		ОсновноеСредство);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеКодовПоОбъектамЭксплуатации(МассивОбъектов)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектов, "Код");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАмортизационнуюГруппу(КодПоОКОФ)
	
	Возврат РегистрыСведений.АмортизационныеГруппыОКОФ.ПолучитьАмортизационнуюГруппу(КодПоОКОФ);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборКодаПоОКОФ(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйОКОФ = Объект.КодПоОКОФ;
	СтараяАмортизационнаяГруппа = Объект.АмортизационнаяГруппа;
	
	КодОКОФ = ВыбранноеЗначение.ОКОФ;
	АмортизационнаяГруппа = ВыбранноеЗначение.АмортизационнаяГруппа;
	
	Объект.КодПоОКОФ = КодОКОФ;
	Объект.АмортизационнаяГруппа = АмортизационнаяГруппа;
	
	ЭтаФорма.Модифицированность =
		ЭтаФорма.Модифицированность
		Или СтарыйОКОФ <> КодОКОФ
		Или СтараяАмортизационнаяГруппа <> АмортизационнаяГруппа;
		
	ЗаполнитьПодсказкуКодОКОФ(ВыбранноеЗначение.ОКОФНаименование);
	
КонецПроцедуры

&НаСервере
Процедура ЦелевоеФинансированиеЗаполнитьСлужебныеРеквизиты(Строка=Неопределено)
	УчетОСВызовСервера.ЗаполнитьСлужебныеРеквизитыВТаблицеЦелелевогоФинансирования(Объект, Строка);
КонецПроцедуры

&НаСервере
Процедура КодОКОФПриИзмененииНаСервере()

	Объект.АмортизационнаяГруппа = ПолучитьАмортизационнуюГруппу(Объект.КодПоОКОФ);
	
	ЗаполнитьПодсказкуКодОКОФ();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказкуКодОКОФ(ТекстПодсказки = Неопределено)

	Если ТекстПодсказки = Неопределено Тогда
		ТекстПодсказки = НСтр("ru = 'Код по классификатору основных фондов'");
		
		Если ЗначениеЗаполнено(Объект.КодПоОКОФ) Тогда
			ТекстПодсказки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодПоОКОФ, "Наименование");
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы.КодОКОФ.Подсказка = ТекстПодсказки;
	
КонецПроцедуры

#КонецОбласти