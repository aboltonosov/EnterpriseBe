#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("СправочникСсылка.ОбъектыЭксплуатации")
		Или ТипОснования = Тип("СправочникСсылка.УзлыОбъектовЭксплуатации") Тогда
		
		ЗаполнитьНаОснованииОбъектаЭксплуатации(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.УстановкаЗначенийНаработки.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Документы.РегистрацияНаработок.ОтразитьНаработкиОбъектовЭксплуатации(ДополнительныеСвойства, Движения, Отказ);
	ОбъектыЭксплуатации.ОтразитьПериодыАктуальностиОбъектовЭксплуатации(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("Наработки.ОбъектЭксплуатации");
	
	Документы.РегистрацияНаработок.ПроверкаТаблицыНаработок(ЭтотОбъект, Наработки, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Дата = ТекущаяДатаСеанса();
	ДатаРегистрации = Дата;
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Заполняет документ на основании объекта 
//
Процедура ЗаполнитьНаОснованииОбъектаЭксплуатации(ДанныеЗаполнения)
	
	Наработки.Очистить();
	
	ДоступныПраваНаДанныеБУ = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"
	//++ НЕ УТКА
	|ВЫБРАТЬ
	|	Объекты.Ссылка КАК ОбъектЭксплуатации,
	|	ЕСТЬNULL(ПоказателиНаработки.ПоказательНаработки, ЗНАЧЕНИЕ(Справочник.ПоказателиНаработки.ПустаяСсылка)) КАК ПоказательНаработки,
	|	Объекты.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА Объекты.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.Редактируется)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	Объекты.ПометкаУдаления КАК ЕстьОшибкиУдален,
	|	Объекты.ЭтоГруппа КАК ЕстьОшибкиГруппа
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК Объекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК ПоказателиНаработки
	|		ПО Объекты.Класс = ПоказателиНаработки.Ссылка
	|			И (НЕ ПоказателиНаработки.РегистрироватьОтИсточника)
	|ГДЕ
	|	Объекты.Ссылка = &ОбъектЭксплуатации И &ИспользоватьУправлениеРемонтами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//-- НЕ УТКА
	|ВЫБРАТЬ
	|	Объекты.Ссылка КАК ОбъектЭксплуатации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОС.ПоказательНаработки, ЗНАЧЕНИЕ(Справочник.ПоказателиНаработки.ПустаяСсылка)) КАК ПоказательНаработки,
	|	Объекты.Статус КАК Статус,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	Объекты.ПометкаУдаления КАК ЕстьОшибкиУдален,
	|	Объекты.ЭтоГруппа КАК ЕстьОшибкиГруппа
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК Объекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Дата, ОсновноеСредство В (&ОбъектЭксплуатации)) КАК ПервоначальныеСведенияОС
	|		ПО Объекты.Ссылка = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	Объекты.Ссылка = &ОбъектЭксплуатации И НЕ &ИспользоватьУправлениеРемонтами И &ДоступныПраваНаДанныеБУ
	//++ НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Узлы.Ссылка КАК ОбъектЭксплуатации,
	|	ЕСТЬNULL(ПоказателиНаработки.ПоказательНаработки, ЗНАЧЕНИЕ(Справочник.ПоказателиНаработки.ПустаяСсылка)) КАК ПоказательНаработки,
	|	Узлы.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА Узлы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ВЭксплуатации)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	Узлы.ПометкаУдаления КАК ЕстьОшибкиУдален
	|ИЗ
	|	Справочник.УзлыОбъектовЭксплуатации КАК Узлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК ПоказателиНаработки
	|		ПО Узлы.Класс = ПоказателиНаработки.Ссылка
	|			И (НЕ ПоказателиНаработки.РегистрироватьОтИсточника)
	|ГДЕ
	|	Узлы.Ссылка = &ОбъектЭксплуатации
	//-- НЕ УТКА
	|";
	
	Запрос.УстановитьПараметр("ДоступныПраваНаДанныеБУ", ДоступныПраваНаДанныеБУ);
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИспользоватьУправлениеРемонтами", ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами"));
	
	ТекстОшибкиГруппа = НСтр("ru='Элемент справочника ""%1"" является группой. Ввод на основании групп справочника запрещен.'");
	ТекстОшибкиУдален = НСтр("ru='%1 ""%2"" помечен на удаление. Ввод на основании помеченного на удаление элемента справочника запрещен.'");
	ТекстОшибкиСтатус = НСтр("ru='%1 ""%2"" находится в статусе ""%3"". Ввод на основании разрешен только в статусе ""Редактируется"".'");
	ТекстОшибкиПоказатель = НСтр("ru='Для %1 ""%2"" нет доступных для регистрации показателей наработки'");
	
	Пакет = Запрос.ВыполнитьПакет();
	Если Не Пакет[0].Пустой() Тогда
		
		Выборка = Пакет[0].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЕстьОшибкиГруппа Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиГруппа,
					Выборка.ОбъектЭксплуатации);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Выборка.ЕстьОшибкиУдален Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиУдален,
					НСтр("ru='Объект эксплуатации'"),
					Выборка.ОбъектЭксплуатации);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Выборка.ЕстьОшибкиСтатус Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиСтатус,
					НСтр("ru='Объект эксплуатации'"),
					Выборка.ОбъектЭксплуатации,
					Выборка.Статус);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Не ЗначениеЗаполнено(Выборка.ПоказательНаработки) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиПоказатель,
					НСтр("ru='объекта эксплуатации'"),
					Выборка.ОбъектЭксплуатации);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Наработки.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Если Не Пакет[1].Пустой() Тогда
		Выборка = Пакет[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЕстьОшибкиУдален Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиУдален,
					НСтр("ru='Узел объекта эксплуатации'"),
					Выборка.ОбъектЭксплуатации);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Выборка.ЕстьОшибкиСтатус Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиСтатус,
					НСтр("ru='Узел объекта эксплуатации'"),
					Выборка.ОбъектЭксплуатации,
					Выборка.Статус);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Не ЗначениеЗаполнено(Выборка.ПоказательНаработки) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиПоказатель,
					НСтр("ru='узла объекта эксплуатации'"),
					Выборка.ОбъектЭксплуатации);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Наработки.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
КонецПроцедуры

// Дополняет дополнительные свойства массивом регистров для контроля
//
Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
