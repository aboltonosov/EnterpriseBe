#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура заполняет табличную часть документа по правилу заполнения из различных источников
//
Процедура ЗаполнитьПоПравилуЗаполнения() Экспорт 
	
	Параметры = Новый Структура("Ссылка, Сценарий, КроссТаблица, ИзменитьРезультатНа, ЗаполненоАвтоматически, ТочностьОкругления, 
		|Подразделение, Склад, Партнер, Соглашение, Статус, Периодичность, НачалоПериода, ОкончаниеПериода, РаспределитьПоРабочимДням");
	
	ЗаполнитьЗначенияСвойств(Параметры, ЭтотОбъект);
	
	Параметры.Вставить("ЗаполнятьПоПравилу", Истина);
	Параметры.Вставить("ПравилоЗаполнения", ПравилоЗаполнения.Выгрузить());
	Параметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки.Получить());
	
	ЗаполняемаяТЧ = Товары.Выгрузить();
	Если ОбновитьДополнить = 0 Тогда
		ЗаполняемаяТЧ.Очистить();
	КонецЕсли;
	
	Параметры.Вставить("ЗаполняемаяТЧ", ЗаполняемаяТЧ);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	Документы.ПланПродаж.ЗаполнитьПоПравилуЗаполнения(Параметры, АдресХранилища);
	
	ЗаполняемаяТЧ = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Товары.Загрузить(ЗаполняемаяТЧ);
	
	ЗаполненоАвтоматически = Истина;
	
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПланов[НовыйСтатус];
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если КроссТаблица Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоУпаковок");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	Иначе
		ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
		ПараметрыПроверки.ПроверитьВозможностьОкругления = Ложь;
	    ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",                    "Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",          НСтр("ru='Товары'"));
	ПараметрыПроверки.Вставить("Периодичность",            Периодичность);
	ПараметрыПроверки.Вставить("ДатаНачала",               НачалоПериода);
	ПараметрыПроверки.Вставить("ДатаОкончания",            ОкончаниеПериода);
	ПараметрыПроверки.Вставить("ИмяПоляДатыПериода",       "ДатаОтгрузки");
	ПараметрыПроверки.Вставить("ПредставлениеДатыПериода", НСтр("ru='Дата отгрузки'"));
	
	ПланированиеКлиентСервер.ПроверитьДатуПериодаТЧ(ЭтотОбъект, Отказ, ПараметрыПроверки);
	
	Если КроссТаблица Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	Иначе
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	КонецЕсли;
	
	Планирование.ОбработкаПроверкиЗаполненияПоСценариюВидуПлана(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	Если НЕ ПланироватьПоСумме 
		ИЛИ НЕ ЗаполнятьПланОплат 
		ИЛИ НЕ ЗначениеЗаполнено(Соглашение) 
		ИЛИ НЕ ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	Если ЗаполнятьПланОплат Тогда
		
		Если СуммаДокумента > 0 И ПланОплаты.Количество() = 0 Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Необходимо заполнить план оплаты.'"),
				ЭтотОбъект,
				"ПланОплаты",
				, 
				Отказ);
			
		ИначеЕсли СуммаДокумента <> ПланОплаты.Итог("СуммаПлатежа") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Сумма отгрузок по документу не совпадает с суммой оплат. Необходимо обновить план оплаты.'"),
				ЭтотОбъект,
				"ПланОплаты",
				, 
				Отказ);
				
		КонецЕсли; 
		
	КонецЕсли;
	
	//++ НЕ УТ
	ПроверятьЗаполнениеПрогнозныхКурсовВалют = Ложь;
	ВалютыПроверкиКурсов = Новый Массив;
	
	Если Не ОтражаетсяВБюджетировании Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяБюджетов");
	КонецЕсли;
	
	Если Не ОтражаетсяВБюджетированииОплаты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяБюджетовОплат");
	КонецЕсли;
	
	Если Не ОтражаетсяВБюджетированииОплатыКредит Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяБюджетовОплатКредит");
	КонецЕсли;
	
	Если Не ОтражаетсяВБюджетировании И Не ОтражаетсяВБюджетированииОплаты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СценарийБюджетирования");
	КонецЕсли;
	
	Если ОтражаетсяВБюджетировании ИЛИ ОтражаетсяВБюджетированииОплаты Тогда
		
		Если ЗначениеЗаполнено(СценарийБюджетирования) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПроверятьЗаполнениеПрогнозныхКурсовВалют = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СценарийБюджетирования, "ТребоватьУказанияКурсовДляКаждогоПериода");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		
		ВалютыПроверкиКурсов = Новый Массив;
		Если Валюта <> ВалютаРегламентированногоУчета Тогда
			ВалютыПроверкиКурсов.Добавить(Валюта);
		КонецЕсли;
		Если ВалютаУправленческогоУчета <> ВалютаРегламентированногоУчета Тогда
			ВалютыПроверкиКурсов.Добавить(ВалютаУправленческогоУчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроверятьЗаполнениеПрогнозныхКурсовВалют И ВалютыПроверкиКурсов.Количество() <> 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаКурсов = Справочники.Сценарии.ТаблицаКурсовСценария(
			СценарийБюджетирования, ВалютыПроверкиКурсов, НачалоПериода, ОкончаниеПериода);
		УстановитьПривилегированныйРежим(Ложь);
		
		Периоды = БюджетнаяОтчетностьВыводСервер.ПолучитьМассивПериодов(НачалоПериода, ОкончаниеПериода, Периодичность);
		НеНайденныеКурсы = ТаблицаКурсов.СкопироватьКолонки("Период, Валюта");
		
		Для Каждого Период из Периоды Цикл
			Для Каждого ВалютаКурсов из ВалютыПроверкиКурсов Цикл
				СтруктураПоиска = Новый Структура("Валюта, Период", ВалютаКурсов, Период);
				Если Не ТаблицаКурсов.НайтиСтроки(СтруктураПоиска).Количество() Тогда
					НоваяСтрока = НеНайденныеКурсы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НеНайденныеКурсы.Количество() <> 0 Тогда
			ПравоПросмотраСценариевБюджетирования = ПравоДоступа("Просмотр", Метаданные.Справочники.Сценарии);
			УстановитьПривилегированныйРежим(Истина);
			НаименованиеСценанияБюджетирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СценарийБюджетирования, "Наименование");
			УстановитьПривилегированныйРежим(Ложь);

			НеНайденныеКурсы.Свернуть("Валюта");
			МассивВалют = НеНайденныеКурсы.ВыгрузитьКолонку("Валюта");
			ТекстСообщения = 
				НСтр("ru = 'План продаж отражается в бюджетировании. 
				|Необходимо установить прогнозные курсы валют %1 в сценарии бюджетирования ""%2"" для каждого периода плана%3.'");
			ТекстСообщения = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения, 
					СтрСоединить(МассивВалют, ", "), 
					НаименованиеСценанияБюджетирования, ?(ПравоПросмотраСценариевБюджетирования, "", НСтр("ru = ', обратитесь к администратору'")));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект.Сценарий", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТ
	
	Если Не КроссТаблица Тогда
		
		РеквизитыВидПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана,"ЗаполнятьНазначениеВТЧ, ЗаполнятьСоглашение, ЗаполнятьСклад, ЗаполнятьПартнера");
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Склад,
		|	ТаблицаТовары.Партнер,
		|	ТаблицаТовары.Соглашение,
		|	ТаблицаТовары.Назначение,
		|	ТаблицаТовары.Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Склад,
		|	Товары.Партнер,
		|	Товары.Соглашение,
		|	Товары.Назначение,
		|	СУММА(Товары.Количество) КАК Количество
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И (Не &ЗаполнятьСклад ИЛИ Товары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|	И (Не &ЗаполнятьПартнера ИЛИ Товары.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|	И (Не &ЗаполнятьСоглашение ИЛИ Товары.Соглашение <> ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Склад,
		|	Товары.Партнер,
		|	Товары.Соглашение,
		|	Товары.Назначение,
		|	Товары.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(Товары.Количество) = 0";
		Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить());
		Запрос.УстановитьПараметр("ЗаполнятьСоглашение", РеквизитыВидПлана.ЗаполнятьСоглашение);
		Запрос.УстановитьПараметр("ЗаполнятьСклад", РеквизитыВидПлана.ЗаполнятьСклад);
		Запрос.УстановитьПараметр("ЗаполнятьПартнера", РеквизитыВидПлана.ЗаполнятьПартнера);
		РеквизитыВидПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана,"ЗаполнятьНазначениеВТЧ, ЗаполнятьСоглашение, ЗаполнятьСклад, ЗаполнятьПартнера, ЗаполнятьСкладВТЧ, ЗаполнятьСоглашениеВТЧ, ЗаполнятьПартнераВТЧ");
		
		ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
		
		КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Назначение,Склад,Партнер,Соглашение");
		
		Для Каждого СтрокаОшибки Из ТаблицаОшибок Цикл
			
			ТекстСообщения = НСтр("ru='Для строк плана с номенклатурой %Номенклатура%%Характеристика%%Назначение%%Склад%%Партнер%%Соглашение% не запланировано количество ни в одном периоде планирования.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%", СтрокаОшибки.Номенклатура);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Характеристика%", ?(ЗначениеЗаполнено(СтрокаОшибки.Характеристика), НСтр("ru=', характеристикой '") + СтрокаОшибки.Характеристика, ""));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", ?(ЗначениеЗаполнено(СтрокаОшибки.Назначение)
				И РеквизитыВидПлана.ЗаполнятьНазначениеВТЧ,
				НСтр("ru=', назначением '") + СтрокаОшибки.Назначение, ""));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", ?(ЗначениеЗаполнено(СтрокаОшибки.Склад)
				И РеквизитыВидПлана.ЗаполнятьСкладВТЧ , НСтр("ru=', складом '") + СтрокаОшибки.Склад, ""));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Партнер%", ?(ЗначениеЗаполнено(СтрокаОшибки.Партнер)
				И РеквизитыВидПлана.ЗаполнятьПартнераВТЧ, НСтр("ru=', партнером '") + СтрокаОшибки.Партнер, ""));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Соглашение%", ?(ЗначениеЗаполнено(СтрокаОшибки.Соглашение)
				И РеквизитыВидПлана.ЗаполнятьСоглашениеВТЧ, НСтр("ru=', соглашением '") + СтрокаОшибки.Соглашение, ""));
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОшибки);
			СтрокаПоиска = Товары.НайтиСтроки(СтруктураПоиска)[0];
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаПоиска.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных, Поле,"Объект",Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		
		Возврат;

	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Планирование.ПроверитьСтатусУтвержден(ЭтотОбъект, Отказ, РежимЗаписи, Перечисления.ТипыПланов.ПланПродаж);
	
	СуммаДокумента = 0;
	
	Для каждого СтрокаТЧ Из Товары Цикл
		Если ПланироватьПоСумме Тогда
			
			Если НЕ СтрокаТЧ.Отменено Тогда
			
				СуммаДокумента = СуммаДокумента + СтрокаТЧ.Сумма;
			
			КонецЕсли; 
			
		Иначе
			
			СтрокаТЧ.Цена = 0;
			СтрокаТЧ.Сумма = 0;
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			СтрокаТЧ.Партнер = Партнер;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Соглашение) Тогда
			СтрокаТЧ.Соглашение = Соглашение;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ ПланироватьПоСумме Тогда
		ЗаполнятьПланОплат = Ложь;
	КонецЕсли;
	Если НЕ ЗаполнятьПланОплат Тогда
		
		ПланОплаты.Очистить();
		
	КонецЕсли; 
	
	//++ НЕ УТ
	Если НЕ ОтражаетсяВБюджетировании Тогда
		СтатьяБюджетов = Неопределено;
	КонецЕсли;
	
	Если НЕ ОтражаетсяВБюджетированииОплаты Тогда
		СтатьяБюджетовОплат = Неопределено;
	КонецЕсли;
	
	Если НЕ ОтражаетсяВБюджетированииОплатыКредит Тогда
		СтатьяБюджетовОплатКредит = Неопределено;
	КонецЕсли;
	
	Если НЕ ОтражаетсяВБюджетировании И НЕ ОтражаетсяВБюджетированииОплаты Тогда
		СценарийБюджетирования = Неопределено;
	КонецЕсли;
	//-- НЕ УТ
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	ЗаполнитьРеквизитыПланаПоСценариюВидуПлана();
	Для каждого СтрокаТовары из Товары Цикл

		СтрокаТовары.Отменено = Ложь;

	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ПланПродаж.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Планирование.ОтразитьПланыПродаж(ДополнительныеСвойства, Движения, Отказ);
	
	Планирование.ОтразитьПланыОплатКлиентов(ДополнительныеСвойства, Движения, Отказ);
	//++ НЕ УТ
	РегистрыНакопления.ОборотыБюджетов.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТ
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	ЗаполнитьДанныеПоУмолчанию();
	
	ЗаполнитьРеквизитыПланаПоСценариюВидуПлана();
	
КонецПроцедуры

// Процедура заполняет подразделение, сценарий, вид плана и признак кросс-таблицы в документе, значением по умолчанию.
//
Процедура ЗаполнитьДанныеПоУмолчанию()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ ДанныеДокумента.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СценарииТоварногоПланирования.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииТоварногоПланирования.ПустаяСсылка)
	|		ИНАЧЕ ДанныеДокумента.Сценарий
	|	КОНЕЦ КАК Сценарий,
	|	ВЫБОР
	|		КОГДА ВидыПланов.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|		ИНАЧЕ ДанныеДокумента.ВидПлана
	|	КОНЕЦ КАК ВидПлана,
	|	ДанныеДокумента.ЗаполнятьПоФормуле КАК ЗаполнятьПоФормуле,
	|	ДанныеДокумента.КроссТаблица КАК КроссТаблица,
	|	ЕСТЬNULL(ВидыПланов.ЗаполнятьПланОплат, ЛОЖЬ) КАК ЗаполнятьПланОплат
	|ИЗ
	|	Документ.ПланПродаж КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|		ПО ДанныеДокумента.ВидПлана = ВидыПланов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СценарииТоварногоПланирования КАК СценарииТоварногоПланирования
	|		ПО ДанныеДокумента.Сценарий = СценарииТоварногоПланирования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО ДанныеДокумента.Подразделение = СтруктураПредприятия.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ответственный = &Ответственный
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	КонецЕсли;
	
	Сценарий = ЗначениеНастроекПовтИсп.ПолучитьСценарийПоУмолчанию(Перечисления.ТипыПланов.ПланПродаж, Сценарий);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПланаПоСценариюВидуПлана()
	
	РеквизитыСценария = "Периодичность, Валюта, ПланПродажПланироватьПоСумме";
	//++ НЕ УТ
	РеквизитыСценария = РеквизитыСценария + ", СценарийБюджетирования";
	//-- НЕ УТ
	ПараметрыСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, РеквизитыСценария);
	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		ВидПлана = Планирование.ПолучитьВидПланаПоУмолчанию(Перечисления.ТипыПланов.ПланПродаж, Сценарий);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСценария);
	ПланироватьПоСумме = ПараметрыСценария.ПланПродажПланироватьПоСумме;
	
	//++ НЕ УТ
	Если ЗначениеЗаполнено(ВидПлана) Тогда
		РеквизитыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "ОтражаетсяВБюджетировании, СтатьяБюджетов");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыВидаПлана);
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли