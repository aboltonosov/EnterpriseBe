#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	Документы.ВыпускПродукции.ПроверитьСвязанныеОбъектыОбработаныОбработчикамиОбновления(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
		ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	КонецЕсли; 
	
	//++ НЕ УТКА
	ЗаполнитьФлагПередатьДавальцуВТабличнойЧасти();
	//-- НЕ УТКА
	
	Если Не ВыпускПоРаспоряжениям Тогда
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВыпускПродукции);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			Перечисления.ХозяйственныеОперации.ВыпускПродукции,
			Склад,
			Подразделение,
			НЕОПРЕДЕЛЕНО);
		
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		
		Если НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
			ИменаПолей.Вставить("Произвольный", "Склад");
		Иначе
			ИменаПолей.Вставить("Произвольный", "Подразделение");
			ИменаПолей.Вставить("Работа", "Подразделение");
		КонецЕсли;
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(
			Товары,
			МестаУчета,
			ИменаПолей);
		
		ЗаполнитьВидыЗапасовДокумента();
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		
	КонецЕсли;
	
	// Заполним распоряжение в табличной части
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		Для Каждого СтрокаТовары Из Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТовары.Распоряжение) Тогда
				СтрокаТовары.Распоряжение = Распоряжение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(Товары, "СтатьяРасходов");
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМ_УТ.ЕстьМаркируемаяПродукцияГИСМ(Товары);
	// Конец ИнтеграцияГИСМ	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Перем РеквизитыШапки;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказКлиента")
		Или ТипДанныхЗаполнения = Тип("Массив") И ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);
		
	//++ НЕ УТКА
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.МаршрутныйЛистПроизводства") Тогда
		
		ЗаполнитьПоРаспоряжению(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДанныеРаспоряжений") Тогда
		
		ДанныеЗаполнения.Свойство("РеквизитыШапки", РеквизитыШапки);
		
		ЗаполнитьПоРаспоряжению(ДанныеЗаполнения.ДанныеРаспоряжений, РеквизитыШапки);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказДавальца")
		Или (ТипДанныхЗаполнения = Тип("Массив") И ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ЗаказДавальца")) Тогда
		
		ЗаполнитьПоЗаказуДавальца(ДанныеЗаполнения);
		
	//-- НЕ УТКА
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ВыпускПоРаспоряжениям Тогда
		Документы.ВыпускПродукции.ЗаполнитьСерииПоМаршрутнымЛистам(ЭтотОбъект);
	КонецЕсли;
	//-- НЕ УТКА
	
	ЗаполнитьРеквизитыПоУмолчанию();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ПроверитьВозможностьОкругления = (НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад);
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВыпускПродукции),
												Отказ,
												МассивНепроверяемыхРеквизитов);
												
	Если ВыпускПоРаспоряжениям Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Спецификация");
		МассивНепроверяемыхРеквизитов.Добавить("ВыпускПодДеятельность");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Распоряжение");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ТипСтоимости");
	КонецЕсли;
	
	Если НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Подразделение");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Склад");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СтатьяРасходов");
	
	ПроверитьЗаполнениеТовары(Отказ);

	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,
		Новый Структура("Товары"),
		МассивНепроверяемыхРеквизитов,
		Отказ);
		
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект,Отказ);
		
	// Удалим не проверяемые реквизиты
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ВыпускПродукции.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Заполнение движений
	
	//++ НЕ УТКА
	ОперативныйУчетПроизводства.ОтразитьРаспоряженияНаВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.ТоварыКОформлениюПоступления.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);

	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПартииПроизводственныхЗатрат(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьРаспоряженияНаСписаниеПоНормативам(ДополнительныеСвойства, Движения, Отказ);
	
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	//++ НЕ УТКА
	ЗаказыСервер.ОтразитьУслугиДавальцуКОформлению(ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	// Завершение проведения
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	//++ НЕ УТКА
	Распоряжение = Документы.МаршрутныйЛистПроизводства.ПустаяСсылка();
	//-- НЕ УТКА
	ЕстьМаркируемаяПродукцияГИСМ = Ложь;
	
	МаксимальныйКодСтроки = 0;
	
	ВыпускПоРаспоряжениям = Ложь;
	
	Серии.Очистить();
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		СтрокаТовары.Распоряжение = Неопределено;
		СтрокаТовары.КодСтроки = 0;
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

// Заполняет реквизиты документа значениями по умолчанию.
//
Процедура ЗаполнитьРеквизитыПоУмолчанию()
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	ВидЦены = Справочники.ВидыЦен.ВидЦеныПлановойСтоимостиТМЦ(ВидЦены);
	Валюта = Константы.ВалютаПлановойСебестоимостиПродукции.Получить();
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Константы.ВалютаПлановойСебестоимостиПродукции.СоздатьМенеджерЗначения().СообщитьКонстантаНеЗаполненаИВызватьИсключение();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НаправлениеВыпуска) Тогда
		НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	КонецЕсли;
	
	Если НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
		ВидДеятельностиНДСОрганизации = Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
	Иначе
		ВидДеятельностиНДСОрганизации = Справочники.Организации.НалогообложениеНДС(Организация,, Дата);
	КонецЕсли; 
	
	УчетНДСУТ.ПроверитьКорректностьДеятельностиНДСПотребления(
		ВыпускПодДеятельность,
		Организация,
		Дата,
		Перечисления.ХозяйственныеОперации.ВыпускПродукции);
		
	Если Не ЗначениеЗаполнено(ВыпускПодДеятельность) Тогда
		ВыпускПодДеятельность = ВидДеятельностиНДСОрганизации;
	КонецЕсли;
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(Товары, "СтатьяРасходов");
	
КонецПроцедуры

//++ НЕ УТКА
Процедура ЗаполнитьПоРаспоряжению(ДанныеЗаполнения, РеквизитыШапки = Неопределено)
	
	ТипДанныеЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныеЗаполнения = Тип("Массив") Тогда
		
		// Передали массив структур, содержащих данные о распоряжении (Распоряжение, КодСтроки)
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыШапки);
		
	ИначеЕсли ТипДанныеЗаполнения = Тип("ДокументСсылка.МаршрутныйЛистПроизводства") Тогда
		
		Распоряжение = ДанныеЗаполнения;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВыходныеИзделия.Получатель ССЫЛКА Справочник.Склады
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииНаСклад)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииВПодразделение)
		|	КОНЕЦ КАК НаправлениеВыпуска
		|ПОМЕСТИТЬ ВТНаправленияВыпуска
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка = &Распоряжение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВозвратныеОтходы.Получатель ССЫЛКА Справочник.Склады
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииНаСклад)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииВПодразделение)
		|	КОНЕЦ
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ВозвратныеОтходы
		|ГДЕ
		|	ВозвратныеОтходы.Ссылка = &Распоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТНаправленияВыпуска.НаправлениеВыпуска) КАК НаправлениеВыпуска,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТНаправленияВыпуска.НаправлениеВыпуска) КАК КоличествоНаправленийВДокументе
		|ПОМЕСТИТЬ НаправленияВыпуска
		|ИЗ
		|	ВТНаправленияВыпуска КАК ВТНаправленияВыпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Распоряжение,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Подразделение КАК Подразделение,
		|	НЕ ТаблицаДокумента.Проведен КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ТаблицаДокумента.Статус КАК СтатусДокумента,
		|	НаправленияВыпуска.НаправлениеВыпуска КАК НаправлениеВыпуска,
		|	НаправленияВыпуска.КоличествоНаправленийВДокументе КАК КоличествоНаправленийВДокументе,
		|	ТаблицаДокумента.Распоряжение.НаправлениеДеятельности КАК НаправлениеДеятельности 
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства КАК ТаблицаДокумента,
		|	НаправленияВыпуска КАК НаправленияВыпуска
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Распоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыходныеИзделия.Получатель КАК Склад
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка = &Распоряжение
		|	И ВыходныеИзделия.Получатель ССЫЛКА Справочник.Склады
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратныеОтходы.Получатель
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ВозвратныеОтходы
		|ГДЕ
		|	ВозвратныеОтходы.Ссылка = &Распоряжение
		|	И ВозвратныеОтходы.Получатель ССЫЛКА Справочник.Склады");
		
		Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		РеквизитыРаспоряжения = Результаты[2].Выбрать();
		РеквизитыРаспоряжения.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен);
		
		Если РеквизитыРаспоряжения.КоличествоНаправленийВДокументе > 1 Тогда
			
			ТекстОшибки = НСтр("ru='Маршрутный лист содержит разные направления выпуска. 
									|Ввод одного документа на основании выбранного распоряжения невозможен.
									|Оформить выпуск можно в рабочем месте ""Выпуск продукции и выполнение работ"".'");
			ВызватьИсключение ТекстОшибки;
			
		ИначеЕсли РеквизитыРаспоряжения.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
			
			МассивСкладов = Результаты[3].Выгрузить().ВыгрузитьКолонку("Склад");
			
			СкладДляЗаполнения = Документы.ВыпускПродукции.СкладШапкиПоМассиву(МассивСкладов);
			
			Если СкладДляЗаполнения = Неопределено Тогда
				ТекстОшибки = НСтр("ru='В маршрутном листе определено поступление на разные склады.
										|Ввод одного документа на основании выбранного распоряжения невозможен.
										|Оформить выпуск можно в рабочем месте ""Выпуск продукции и выполнение работ"".'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ЭтотОбъект.Склад = СкладДляЗаполнения;
			
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыРаспоряжения.Распоряжение,
			РеквизитыРаспоряжения.СтатусДокумента,
			РеквизитыРаспоряжения.ЕстьОшибкиПроведен,
			РеквизитыРаспоряжения.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыРаспоряжения);
		
	КонецЕсли;
	
	МассивРаспоряжений = Новый Массив;
	Если ТипДанныеЗаполнения = Тип("Массив") Тогда
		// Передали массив структур, содержащих данные о распоряжении (Распоряжение, КодСтроки)
		ДанныеРаспоряжений = ДанныеЗаполнения;
		Для каждого СтруктураРаспоряжения Из ДанныеЗаполнения Цикл
			МассивРаспоряжений.Добавить(СтруктураРаспоряжения.Распоряжение);
		КонецЦикла; 
	Иначе	
		ДанныеРаспоряжений = Неопределено;
		МассивРаспоряжений.Добавить(Распоряжение);
	КонецЕсли;
	
	ВидЦены = Справочники.ВидыЦен.ВидЦеныПлановойСтоимостиТМЦ(ВидЦены);
	
	ДанныеОтбора = Новый Структура("Ссылка,Дата,Организация,Подразделение,НаправлениеВыпуска, ВидЦены");
	ЗаполнитьЗначенияСвойств(ДанныеОтбора, ЭтотОбъект);
	Если РеквизитыШапки <> Неопределено И РеквизитыШапки.Свойство("РабочийЦентр") Тогда
		ДанныеОтбора.Вставить("РабочийЦентр", РеквизитыШапки.РабочийЦентр);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда
		ДанныеОтбора.Вставить("Склад", ЭтотОбъект.Склад);
	КонецЕсли;
	
	ВыпускПоРаспоряжениям = Истина;
	
	Документы.ВыпускПродукции.ЗаполнитьПоОстаткамРаспоряжений(ДанныеОтбора, Товары, МассивРаспоряжений,, ДанныеРаспоряжений);
	
	ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(Распоряжение, Товары, "Распоряжение");
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуДавальца(ДанныеЗаполнения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗаказДавальца.Организация) КАК Организация,
	|	МАКСИМУМ(ЗаказДавальца.Подразделение) КАК Подразделение,
	|	МАКСИМУМ(ЗаказДавальца.НаправлениеДеятельности) КАК НаправлениеДеятельности,
	|	МАКСИМУМ(ЗаказДавальца.НалогообложениеНДС) КАК ВыпускПодДеятельность,
	|	МАКСИМУМ(НЕ ЗаказДавальца.Проведен) КАК ЕстьОшибкиПроведен,
	|	МИНИМУМ(ЗаказДавальца.Статус) КАК Статус,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаказДавальца.Статус В (&МассивДопустимыхСтатусов)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьОшибкиСтатус,
	|	МАКСИМУМ(ЗаказДавальца.Склад) КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииНаСклад) КАК НаправлениеВыпуска,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Организация) КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Подразделение) КАК КоличествоПодразделений,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Склад) КАК КоличествоСкладов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.НалогообложениеНДС) КАК КоличествоВариантовНалогообложения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.НаправлениеДеятельности) КАК КоличествоНаправленийДеятельности
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказДавальца
	|ГДЕ
	|	ЗаказДавальца.Ссылка В(&ЗаказыДавальца)
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Склад                 КАК Склад,
	|	Товары.Ссылка.Назначение     КАК Назначение,
	|	СУММА(Товары.Количество)     КАК Количество,
	|	МИНИМУМ(Товары.Спецификация) КАК Спецификация,
	|	МИНИМУМ(Товары.Упаковка)     КАК Упаковка,
	|	МИНИМУМ(Товары.НомерСтроки)  КАК НомерСтроки
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&ЗаказыДавальца)
	|	И НЕ Товары.Отменено
	|	И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура, Товары.Характеристика, Товары.Склад, Товары.Ссылка.Назначение
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Склад, Назначение
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Номенклатура   КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.Склад          КАК Склад,
	|	ТаблицаОстатки.Назначение     КАК Назначение,
	|	ТаблицаОстатки.КЗаказуОстаток КАК Количество
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
	|		(Номенклатура, Характеристика, Склад, Назначение) В(
	|			ВЫБРАТЬ
	|				Товары.Номенклатура   КАК Номенклатура,
	|				Товары.Характеристика КАК Характеристика,
	|				Товары.Склад          КАК Склад,
	|				Товары.Назначение     КАК Назначение
	|			ИЗ
	|				ВтТовары КАК Товары)) КАК ТаблицаОстатки
	|ГДЕ
	|	ТаблицаОстатки.КЗаказуОстаток > 0
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Номенклатура   КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.Склад          КАК Склад,
	|	ТаблицаОстатки.Назначение     КАК Назначение,
	|	
	|	ВЫБОР КОГДА ТаблицаОстатки.Количество < Товары.Количество ТОГДА
	|				ТаблицаОстатки.Количество
	|			ИНАЧЕ
	|				Товары.Количество
	|		КОНЕЦ                     КАК Количество,
	|	
	|	Товары.Упаковка               КАК Упаковка,
	|	Товары.НомерСтроки            КАК НомерСтроки,
	|	Товары.Спецификация           КАК Спецификация,
	|	
	|	ВЫБОР КОГДА ТаблицаОстатки.Количество < Товары.Количество ТОГДА
	|				ТаблицаОстатки.Количество
	|			ИНАЧЕ
	|				Товары.Количество
	|		КОНЕЦ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок
	|ИЗ
	|	ВтОстатки КАК ТаблицаОстатки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТовары КАК Товары
	|		ПО Товары.Номенклатура   = ТаблицаОстатки.Номенклатура
	|		 И Товары.Характеристика = ТаблицаОстатки.Характеристика
	|		 И Товары.Склад          = ТаблицаОстатки.Склад
	|		 И Товары.Назначение     = ТаблицаОстатки.Назначение
	|		
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	Запрос.УстановитьПараметр("ЗаказыДавальца", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("МассивДопустимыхСтатусов", МассивДопустимыхСтатусов);
	
	Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Товары.Упаковка", "Товары.Номенклатура");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки", Подстановка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Реквизиты = Результат[0].Выбрать();
	
	Если Не Реквизиты.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить выпуск продукции по разным организациям.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоСкладов > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. продукция должна быть выпущена на разные склады.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоПодразделений > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. продукцию выпускают разные подразделения.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.ЕстьОшибкиСтатус Тогда
		ТекстОшибки = НСтр("ru = 'Для оформления выпуска продукции заказ должен быть в статусе ""К производству"", ""К отгрузке"" или ""Закрыт"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Результат[3].Пустой() Тогда
		ТекстОшибки = НСтр("ru='Вся продукция уже  выпущена, ввод на основании не требуется.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоВариантовНалогообложения > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. выбранные заказы оформлены под разную деятельность по НДС.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоНаправленийДеятельности > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно оформить один документ, т.к. выбранные заказы оформлены под разные направления деятельности.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	Товары.Загрузить(Результат[3].Выгрузить());
	
	МассивДанных = Новый Массив;
	МассивСтрок = Новый Массив;
	
	Для Каждого Строка Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Спецификация) Тогда
			
			ДанныеОбИзделиях = Новый Структура;
			ДанныеОбИзделиях.Вставить("Подразделение", Подразделение);
			ДанныеОбИзделиях.Вставить("Номенклатура", Строка.Номенклатура);
			ДанныеОбИзделиях.Вставить("Характеристика", Строка.Характеристика);
			ДанныеОбИзделиях.Вставить("НачалоПроизводства", ТекущаяДатаСеанса());
			
			МассивДанных.Добавить(ДанныеОбИзделиях);
			МассивСтрок.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанных);
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыПоСпецификации(Товары, "ТипСтоимости");
	
КонецПроцедуры
//-- НЕ УТКА

Процедура ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения)
	
	ЗаказКлиента = ДанныеЗаполнения;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииНаСклад) КАК НаправлениеВыпуска,
	|	ЗаказКлиента.Организация,
	|	ЗаказКлиента.Подразделение,
	|	ЗаказКлиента.Ссылка,
	|	ЗаказКлиента.Склад,
	|	ЗаказКлиента.НалогообложениеНДС КАК ВыпускПодДеятельность,
	|	НЕ ЗаказКлиента.Проведен КАК ЕстьОшибкиПроведен,
	|	
	|	ВЫБОР КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат ТОГДА
	|			ЗаказКлиента.НаправлениеДеятельности
	|		КОНЕЦ КАК НаправлениеДеятельности,
	|	
	|	ЗаказКлиента.Статус
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.Статус,
		Реквизиты.ЕстьОшибкиПроведен,
		Истина);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	ТаблицаТовары = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента);
	
	Товары.Загрузить(ТаблицаТовары);
	
	МассивДанных = Новый Массив;
	МассивСтрок = Новый Массив;
	
	Для Каждого Строка Из Товары Цикл
		
		ДанныеОбИзделиях = Новый Структура;
		ДанныеОбИзделиях.Вставить("Подразделение", Подразделение);
		ДанныеОбИзделиях.Вставить("Номенклатура", Строка.Номенклатура);
		ДанныеОбИзделиях.Вставить("Характеристика", Строка.Характеристика);
		ДанныеОбИзделиях.Вставить("НачалоПроизводства", ТекущаяДатаСеанса());
		
		МассивДанных.Добавить(ДанныеОбИзделиях);
		МассивСтрок.Добавить(Строка);
		
		Строка.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанных);
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыПоСпецификации(Товары, "ТипСтоимости");
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасовДокумента()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаТоваров.Распоряжение КАК Распоряжение,
	|	ВЫРАЗИТЬ (ТаблицаТоваров.Назначение КАК Справочник.Назначения) КАК Назначение
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки									КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура									КАК Номенклатура,
	|	ЛОЖЬ														КАК ЭтоВозвратнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)			КАК Сделка,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)				КАК Менеджер,
	|	&Подразделение												КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)				КАК Назначение,
	|	&Организация												КАК Организация,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА НЕ ЗаказДавальца.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья) 
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции) 
	|	КОНЕЦ														КАК ХозяйственнаяОперация,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА НЕ ЗаказДавальца.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	КОНЕЦ														КАК ТипЗапасов, 
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА НЕ ЗаказДавальца.Партнер ЕСТЬ NULL
	|			ТОГДА ЗаказДавальца.Партнер
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|	КОНЕЦ														КАК Поставщик, 
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)	КАК Соглашение,
	//++ НЕ УТКА
	|	ЕСТЬNULL(ЗаказДавальца.Контрагент, 
	//-- НЕ УТКА
	|				ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//++ НЕ УТКА
	|			)													
	//-- НЕ УТКА
	|																КАК Контрагент,
	//++ НЕ УТКА
	|	ЕСТЬNULL(ЗаказДавальца.Договор, 
	//-- НЕ УТКА
	|				ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//++ НЕ УТКА
	|			)
	//-- НЕ УТКА
	|																КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)					КАК Валюта,
	|	(ВЫБОР КОГДА &ИспользоватьРаздельныйУчетПоНалогообложению И Не &ПартионныйУчетВерсии22 ТОГДА &ВыпускПодДеятельность
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КОНЕЦ) КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	(ВЫБОР
	|		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА &НаправлениеВыпуска = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
	|			ТОГДА СпрНоменклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ) КАК ГруппаПродукции
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	//++ НЕ УТКА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛист
	|	ПО
	|		ТаблицаТоваров.Распоряжение = МаршрутныйЛист.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаПроизводство.Продукция КАК Заказ
	|	ПО
	|		МаршрутныйЛист.Распоряжение = Заказ.Ссылка
	|		И МаршрутныйЛист.КодСтроки = Заказ.КодСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказДавальца КАК ЗаказДавальца
	|	ПО
	|		(ЗаказДавальца.Ссылка = Заказ.Назначение.Заказ
	|			ИЛИ ЗаказДавальца.Ссылка = ТаблицаТоваров.Назначение.Заказ)
	//-- НЕ УТКА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ТаблицаТоваров.ВидЗапасов = ВидыЗапасов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО
	|		СпрНоменклатура.Ссылка = ТаблицаТоваров.Номенклатура
	|
	|ГДЕ
	|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	ИЛИ ВидыЗапасов.Организация <> &Организация
	|	ИЛИ ВидыЗапасов.ТипЗапасов <> 
	|		ВЫБОР
	//++ НЕ УТКА
	|			КОГДА НЕ ЗаказДавальца.Ссылка ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	//-- НЕ УТКА
	|			КОГДА ИСТИНА
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		КОНЕЦ
	|	ИЛИ (&ИспользоватьРаздельныйУчетПоНалогообложению
	|		И ВидыЗапасов.НалогообложениеНДС <> &ВыпускПодДеятельность
	|		И &ВыпускПодДеятельность <> &НалогообложениеОрганизации
	|		И &ВыпускПодДеятельность <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И ВидыЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов, Распоряжение, Назначение"));
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Подразделение",  Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("НаправлениеВыпуска", НаправлениеВыпуска);
	Запрос.УстановитьПараметр("ВыпускПодДеятельность", ВыпускПодДеятельность);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации",	Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению", ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",	УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(Дата)));
	
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И ВыпускПоРаспоряжениям Тогда
		Массив.Добавить(Движения.РаспоряженияНаВыпускПродукции);
	КонецЕсли;
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.ЭтоНовый И Не ВыпускПоРаспоряжениям Тогда
		Массив.Добавить(Движения.РаспоряженияНаСписаниеПоНормативам);
	КонецЕсли;
	
	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТовары(Отказ)

	ПериодУчетнойПолитики = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	ПараметрыПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Организация, ПериодУчетнойПолитики);
	ИспользоватьДоходыРасходы	= ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	
	Если ПараметрыПолитики <> Неопределено Тогда
		ИспользоватьПлановуюСтоимость = ПараметрыПолитики.УчетГотовойПродукцииПоПлановойСтоимости;
	Иначе
		ИспользоватьПлановуюСтоимость = Ложь;
	КонецЕсли;
	
	Для Каждого ДанныеСтроки Из Товары Цикл
		
		// Цена, Сумма
		Если ИспользоватьПлановуюСтоимость 
			ИЛИ ДанныеСтроки.ТипСтоимости = Перечисления.ТипыСтоимостиВыходныхИзделий.Фиксированная Тогда
		
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Цена) Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Цена"" в строке %1 списка ""Товары и работы""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеСтроки.НомерСтроки),
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ДанныеСтроки.НомерСтроки, "Цена"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Сумма) Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Товары и работы""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеСтроки.НомерСтроки),
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ДанныеСтроки.НомерСтроки, "Сумма"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Статья расходов
		Если ДанныеСтроки.СписатьНаРасходы
			И НЕ ЗначениеЗаполнено(ДанныеСтроки.СтатьяРасходов) И ИспользоватьДоходыРасходы Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Статья расходов"" в строке %1 списка ""Товары и работы""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеСтроки.НомерСтроки),
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ДанныеСтроки.НомерСтроки, "СтатьяРасходов"),
				,
				Отказ);
				
		КонецЕсли; 
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	&НаправлениеВыпуска КАК НаправлениеВыпуска,
		|	Товары.НомерСтроки
		|ПОМЕСТИТЬ ВТНоменклатура
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНоменклатура.НомерСтроки
		|ИЗ
		|	ВТНоменклатура КАК ВТНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО СпрНоменклатура.Ссылка = ВТНоменклатура.Номенклатура
		|ГДЕ
		|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			И ВТНоменклатура.НаправлениеВыпуска = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад)";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	Запрос.УстановитьПараметр("НаправлениеВыпуска", НаправлениеВыпуска);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ТекстСообщения = НСтр("ru = 'В строке %1 списка ""Товары и работы"" указана работа для направления выпуска ""На склад"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтроки),
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ);
	
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА
Процедура ЗаполнитьФлагПередатьДавальцуВТабличнойЧасти()
	
	Если НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад
			И Не ВыпускПоРаспоряжениям Тогда
		
		УправлениеПроизводством.ЗаполнитьФлагПередатьДавальцуПоНазначениюВТабличнойЧасти(Товары);
		
	Иначе
		
		Для Каждого Строка Из Товары Цикл
			
			Строка.ПередатьДавальцу = Ложь;
			
		КонецЦикла;
		
		Если НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад И ВыпускПоРаспоряжениям Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Товары.НомерСтроки  КАК НомерСтроки,
				|	Товары.Распоряжение КАК Распоряжение,
				|	Товары.Назначение   КАК Назначение,
				|	Товары.КодСтроки    КАК КодСтроки
				|ПОМЕСТИТЬ ВтТовары
				|ИЗ
				|	&Товары КАК Товары
				|ГДЕ
				|	Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
				|;
				|
				|////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
				|ИЗ
				|	ВтТовары КАК ТаблицаТовары
				|		
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
				|		ПО ТаблицаТовары.Распоряжение.Распоряжение = ЗаказНаПроизводствоПродукция.Ссылка
				|		И ТаблицаТовары.Распоряжение.КодСтроки = ЗаказНаПроизводствоПродукция.КодСтроки
				|		
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ВыходныеИзделияМаршрутногоЛиста
				|		ПО ТаблицаТовары.Распоряжение = ВыходныеИзделияМаршрутногоЛиста.Ссылка
				|		И ТаблицаТовары.КодСтроки = ВыходныеИзделияМаршрутногоЛиста.КодСтроки
				|		И ВыходныеИзделияМаршрутногоЛиста.ПроизводитсяВПроцессе
				|		
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ВозвратныеОтходыМаршрутногоЛиста
				|		ПО ТаблицаТовары.Распоряжение = ВозвратныеОтходыМаршрутногоЛиста.Ссылка
				|		И ТаблицаТовары.КодСтроки = ВозвратныеОтходыМаршрутногоЛиста.КодСтроки
				|		И ВозвратныеОтходыМаршрутногоЛиста.ПроизводитсяВПроцессе
				|		
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
				|		ПО СпрНазначения.Ссылка = ТаблицаТовары.Назначение
				|ГДЕ
				|	СпрНазначения.Заказ ССЫЛКА Документ.ЗаказДавальца
				|	И ЗаказНаПроизводствоПродукция.КлючСвязиПродукция = &ПустойКлючСвязи
				|	И ВыходныеИзделияМаршрутногоЛиста.Ссылка ЕСТЬ NULL
				|	И ВозвратныеОтходыМаршрутногоЛиста.Ссылка ЕСТЬ NULL";
				
			Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(, "НомерСтроки, Распоряжение, Назначение, КодСтроки"));
			Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Товары[Выборка.НомерСтроки - 1].ПередатьДавальцу = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#КонецЕсли
