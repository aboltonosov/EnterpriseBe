&НаКлиенте
Перем ФлагЗакрытия;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Статус = Перечисления.СтатусыПроцессовПодготовкиБюджетов.Незапущен;
		Объект.Ответственный = Пользователи.АвторизованныйПользователь();
		Если Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
			Объект.ГруппаЭтапов = Параметры.Основание;
			Объект.МодельБюджетирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Основание, "Владелец");
			Если Не МодельБюджетированияДействует(Объект.МодельБюджетирования) Тогда
				ВызватьИсключение(НСтр("ru = 'Модель бюджетирования не действует.
											|Измените статус у модели для выбора в документе'"));
			КонецЕсли;
			ГруппаШаговПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	ЗаполнитьДеревоШагов();
	ОтобразитьПериод();
	ОбновитьСтатусыНаСервере();
	УправлениеФормой();
	
	АдресПередачиНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСтатусыНаСервере();
	УправлениеФормой();
	
	Идентификатор = НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 1));
	Если Идентификатор <> Неопределено Тогда
		Элементы.ДеревоШаговБюджетногоПроцесса.ТекущаяСтрока = Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Перем Ошибки;
	
	Если Объект.Статус = Перечисления.СтатусыПроцессовПодготовкиБюджетов.Незапущен Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПроверки = РеквизитФормыВЗначение("ДеревоШаговБюджетногоПроцесса");
	СтруктураПоиска = Новый Структура("ЭтоГруппа, ВыполнятьАвтоматически", Ложь, Ложь);
	
	СтруктураПоискаНезаполненных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПоиска);
	СтруктураПоискаНезаполненных.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	НайденныеСтроки = ДеревоПроверки.Строки.НайтиСтроки(СтруктураПоискаНезаполненных, Истина);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		ТекстСоообщения = НСтр("ru = 'Не заполнен ответственный для этапа %1 от %2'");
		ТекстСоообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСоообщения, 
								НайденнаяСтрока.Наименование, Формат(НайденнаяСтрока.Период, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ДеревоШаговБюджетногоПроцесса", ТекстСоообщения, "");
	КонецЦикла;
	
	СтруктураПоискаНезаполненных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПоиска);
	СтруктураПоискаНезаполненных.Вставить("Длительность", 0);
	НайденныеСтроки = ДеревоПроверки.Строки.НайтиСтроки(СтруктураПоискаНезаполненных, Истина);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		ТекстСоообщения = НСтр("ru = 'Не заполнена длительность для этапа %1 от %2'");
		ТекстСоообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСоообщения, 
								НайденнаяСтрока.Наименование, Формат(НайденнаяСтрока.Период, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ДеревоШаговБюджетногоПроцесса", ТекстСоообщения, "");
	КонецЦикла;
	
	СтруктураПоискаНезаполненных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПоиска);
	СтруктураПоискаНезаполненных.Вставить("ТипДлительности", Перечисления.ТипыСроковЭтаповПодготовкиБюджетов.ПустаяСсылка());
	НайденныеСтроки = ДеревоПроверки.Строки.НайтиСтроки(СтруктураПоискаНезаполненных, Истина);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		ТекстСоообщения = НСтр("ru = 'Не заполнен тип длительности для этапа %1 от %2'");
		ТекстСоообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСоообщения, 
								НайденнаяСтрока.Наименование, Формат(НайденнаяСтрока.Период, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ДеревоШаговБюджетногоПроцесса", ТекстСоообщения, "");
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьСтатусыЗадач", 15);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Статус = Перечисления.СтатусыПроцессовПодготовкиБюджетов.Отменен Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БюджетнаяЗадача.Ссылка
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	БюджетнаяЗадача.ПроцессПодготовкиБюджетов = &ПроцессПодготовкиБюджетов
		|	И НЕ БюджетнаяЗадача.Выполнена";
		
		Запрос.УстановитьПараметр("ПроцессПодготовкиБюджетов", ТекущийОбъект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектЗадача = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектЗадача.Выполнена = Истина;
			ОбъектЗадача.ДополнительныеСвойства.Вставить("РежимФормированияЗадач", Истина);
			ОбъектЗадача.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытияОповещения, Параметр, Источник)
		
	Если ИмяСобытияОповещения = "Запись_БюджетнаяЗадача" Тогда
		
		ИДСледующейСтроки = ОбработкаОповещенияЗадачиНаСервере();
		Если ИДСледующейСтроки <> Неопределено Тогда
			Элементы.ДеревоШаговБюджетногоПроцесса.ТекущаяСтрока = ИДСледующейСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ФлагЗакрытия = Истина Тогда
		Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Завершен")
			И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Отменен") Тогда
			Если ВсеЗадачиВыполнены() Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма), 
					НСтр("ru = 'Все задачи выполнены. Завершить процесс?'"), РежимДиалогаВопрос.ДаНет);
				Отказ = Истина;
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФлагЗакрытия = Истина;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Завершен");
		Записать();
		УправлениеФормой();
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаШаговПриИзменении(Элемент)
	
	ГруппаШаговПриИзмененииНаСервере();
	РазвернутьДеревоШагов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	ВидПериода = ОпределитьВидПериода(Объект.Периодичность);
	ОбщегоНазначенияУТКлиент.ВыбратьПериодИзСписка(
				ЭтаФорма,
				Элемент,
				ВидПериода,
				Объект.НачалоПериода,
				ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	ПривестиЗначениеПериода();
	РазвернутьДеревоШагов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеКОписаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.ДополнениеКОписанию");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы

&НаКлиенте
Процедура ДеревоШаговБюджетногоПроцессаНеВыполняетсяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущиеДанные;
	ТекущаяСтрока.ИндексСтатуса = ?(ТекущаяСтрока.НеВыполняется, -1, 0);
	
	УстановитьЗначениеТабличнойЧасти("НеВыполняется");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаговБюджетногоПроцессаОтветственныйПриИзменении(Элемент)
	
	УстановитьЗначениеТабличнойЧасти("Ответственный");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаговБюджетногоПроцессаДлительностьПриИзменении(Элемент)
	
	УстановитьЗначениеТабличнойЧасти("Длительность");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаговБюджетногоПроцессаТипДлительностиПриИзменении(Элемент)
	
	УстановитьЗначениеТабличнойЧасти("ТипДлительности");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаговБюджетногоПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущийЭлементПоля = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущийЭлемент;
	Если ТекущийЭлементПоля.ТолькоПросмотр Тогда
		ОткрытьЗадачу();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	
	ОбновитьСтатусыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	ОбновитьСтатусыНаСервере();
	ТекущиеДанные = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Установите курсор на этап подготовки бюджетов для создания задачи'"));
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Задача еще не началась'"));
	ИначеЕсли ТекущиеДанные.ИндексСтатуса = 2 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Задача уже выполнена'"));
	Иначе
		ПараметрыТекущейЗадачи = ПараметрыТекущейЗадачи(
										Объект.Ссылка, ТекущиеДанные.ЭтапПодготовкиБюджетов, 
										ТекущиеДанные.ЭтапПодготовкиБюджетовОснование, ТекущиеДанные.Период,
										АдресПередачиНастроек);
		Если ПараметрыТекущейЗадачи = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Задача еще не сформирована'"));
			Возврат;
		КонецЕсли;
		ВыполнитьДействиеКлиент(ПараметрыТекущейЗадачи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗаписатьИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Запустить(Команда)
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Выполняется");
	Если Не ПроверитьЗаполнение() Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Незапущен");
	КонецЕсли;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Прекратить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрекратитьЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Процесс будет прекращен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Отменен");
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБюджет(Команда)
	
	ТекущиеДанные = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекущейЗадачи = ПараметрыТекущейЗадачи(
										Объект.Ссылка, ТекущиеДанные.ЭтапПодготовкиБюджетов, 
										ТекущиеДанные.ЭтапПодготовкиБюджетовОснование, ТекущиеДанные.Период,
										АдресПередачиНастроек);
	
	Если Не ЗначениеЗаполнено(ПараметрыТекущейЗадачи) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Задача еще не создана'"));
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыТекущейЗадачи.ТекущийДокумент) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Бюджет в рамках задачи не создавался'"));
	Иначе
		ПоказатьЗначение(,ПараметрыТекущейЗадачи.ТекущийДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу()
	
	ТекущиеДанные = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТекущейЗадачи = ПараметрыТекущейЗадачи(
										Объект.Ссылка, ТекущиеДанные.ЭтапПодготовкиБюджетов, 
										ТекущиеДанные.ЭтапПодготовкиБюджетовОснование, ТекущиеДанные.Период,
										АдресПередачиНастроек);
	
	Если Не ЗначениеЗаполнено(ПараметрыТекущейЗадачи) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Задача еще не создана'"));
	Иначе
		ПоказатьЗначение(,ПараметрыТекущейЗадачи.Задача);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьДействиеКлиент(ПараметрыТекущейЗадачи)
	
	Если Модифицированность Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		Записать();
	КонецЕсли;
	
	Если ПараметрыТекущейЗадачи.Действие = 
			ПредопределенноеЗначение("Перечисление.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов")
		ИЛИ ПараметрыТекущейЗадачи.Действие = 
			ПредопределенноеЗначение("Перечисление.ТипыДействийЭтаповПодготовкиБюджетов.Прочее") Тогда
			
		ОткрытьФорму("Задача.БюджетнаяЗадача.ФормаОбъекта", Новый Структура("Ключ", ПараметрыТекущейЗадачи.Задача));
		
	Иначе
		Если Не БюджетнаяЗадачаСписком(ПараметрыТекущейЗадачи.Задача) Тогда
			Результат = ВыполнитьДействиеСервер(ПараметрыТекущейЗадачи);
			Если Результат <> Неопределено Тогда
				ДополнительныеПараметры = Новый Структура("Документа",Результат.ПараметрыФормы.Ключ);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуПоСобытию", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму(Результат.ИмяФормы, Результат.ПараметрыФормы, ЭтаФорма, Результат.Уникальность,,,ОписаниеОповещения);
			КонецЕсли;
		Иначе
			ПоказатьЗначение(,ПараметрыТекущейЗадачи.Задача);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийДокумент(СписокДокументов)
	
	Возврат ?(СписокДокументов.Количество(), СписокДокументов[СписокДокументов.Количество()-1].Документ, Неопределено);
	
КонецФункции

&НаСервере
Функция ВыполнитьДействиеСервер(ПараметрыТекущейЗадачи)
	
	ЗадачаОбъект = ПараметрыТекущейЗадачи.Задача.ПолучитьОбъект();
	
	Действие = ЗадачаОбъект.Действие;
	Документ = ТекущийДокумент(ЗадачаОбъект.СписокДокументов);
	
	Записывать = Ложь;
	Результат = Задачи.БюджетнаяЗадача.ВыполнитьДействие(ЗадачаОбъект, 
								ПолучитьИзВременногоХранилища(ПараметрыТекущейЗадачи.СсылкаНаНастройку), Записывать);
	
	Если Записывать Тогда
		ЗадачаОбъект.Записать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыТекущейЗадачи(Процесс, ЭтапПроцесса, ПовторяемыйЭтап, Период, АдресПередачиНастроек)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БюджетнаяЗадача.Ссылка,
		|	БюджетнаяЗадача.Действие,
		|	БюджетнаяЗадача.НастройкаДействия,
		|	БюджетнаяЗадача.СписокДокументов.(
		|		НомерСтроки КАК НомерСтроки,
		|		Документ
		|	)
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	БюджетнаяЗадача.ПроцессПодготовкиБюджетов = &ПроцессПодготовкиБюджетов
		|	И БюджетнаяЗадача.ЭтапПодготовкиБюджетов = &ЭтапПодготовкиБюджетов
		|	И БюджетнаяЗадача.ЭтапПодготовкиБюджетовОснование = &ЭтапПодготовкиБюджетовОснование
		|	И БюджетнаяЗадача.Период = &Период
		|	И НЕ БюджетнаяЗадача.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ЭтапПодготовкиБюджетовОснование", ПовторяемыйЭтап);
	Запрос.УстановитьПараметр("ПроцессПодготовкиБюджетов", Процесс);
	Запрос.УстановитьПараметр("ЭтапПодготовкиБюджетов", ЭтапПроцесса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Результат = Новый Структура();
		Результат.Вставить("Задача", ВыборкаДетальныеЗаписи.Ссылка); 
		Результат.Вставить("Действие", ВыборкаДетальныеЗаписи.Действие);
		Результат.Вставить("СсылкаНаНастройку", ПоместитьВоВременноеХранилище(ВыборкаДетальныеЗаписи.НастройкаДействия.Получить(), АдресПередачиНастроек)); 
		Результат.Вставить("ТекущийДокумент", ТекущийДокумент(ВыборкаДетальныеЗаписи.СписокДокументов.Выгрузить()) );
		
		Возврат Результат;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоШагов()
	
	ДеревоЭтапов = Документы.ПроцессПодготовкиБюджетов.ДеревоЭтаповПроцессаПоДокументу(Объект);
	ЗначениеВРеквизитФормы(ДеревоЭтапов, "ДеревоШаговБюджетногоПроцесса");
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.ФормаЗапустить.Видимость = Ложь;
	Элементы.ФормаПрекратить.Видимость = Ложь;
	Элементы.ФормаЗавершить.Видимость = Ложь;
	
	РазрешеноИзменениеНастроек = Ложь;
	Если Объект.Статус = Перечисления.СтатусыПроцессовПодготовкиБюджетов.Выполняется Тогда
		Если НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 2)) <> Неопределено
			И НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 1)) = Неопределено
			И НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 0)) = Неопределено Тогда
			Элементы.ФормаЗавершить.Видимость = Истина;
		Иначе
			Элементы.ФормаПрекратить.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыПроцессовПодготовкиБюджетов.Незапущен Тогда
		Элементы.ФормаЗапустить.Видимость = Истина;
		РазрешеноИзменениеНастроек = Истина;
	КонецЕсли;
	
	Элементы.МодельБюджетирования.ТолькоПросмотр = Не РазрешеноИзменениеНастроек;
	Элементы.ГруппаШагов.ТолькоПросмотр = Не РазрешеноИзменениеНастроек;
	Элементы.Периодичность.ТолькоПросмотр = Не РазрешеноИзменениеНастроек;
	Элементы.Период.ТолькоПросмотр = Не РазрешеноИзменениеНастроек;
	
КонецПроцедуры

&НаСервере
Процедура ГруппаШаговПриИзмененииНаСервере()
	
	УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
	ИндексДокумента = УпорядоченныеПериодичности.Найти(Объект.Периодичность);
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ГруппаЭтапов, "Периодичность, ЭтоГруппа, Родитель.Периодичность");
	Если СтруктураРеквизитов.ЭтоГруппа Тогда
		ПериодичностьШага = СтруктураРеквизитов.Периодичность;
	Иначе
		ПериодичностьШага = СтруктураРеквизитов.РодительПериодичность;
	КонецЕсли;
	ИндексШага = УпорядоченныеПериодичности.Найти(ПериодичностьШага);
	Если ИндексШага > ИндексДокумента Тогда
		Объект.Периодичность = ПериодичностьШага;
		Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
			Объект.НачалоПериода = ТекущаяДата();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
			Объект.КонецПериода = ТекущаяДата();
		КонецЕсли;
		ПривестиЗначениеПериода();
	Иначе
		ЗаполнитьШагиРасчетаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШагиРасчетаНаСервере(ПовторяемыйЭтапПроцесса = Неопределено, ГруппаПовторяемогоШага = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
		Объект.НастройкиРасчета.Очистить();
		Объект.НастройкиИерархии.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПодготовкиБюджетов.Ссылка КАК ЭтапПодготовкиБюджетов,
		|	ВЫБОР
		|		КОГДА ЭтапыПодготовкиБюджетов.Ссылка = &Родитель
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ЭтапыПодготовкиБюджетов.Родитель
		|	КОНЕЦ КАК ГруппаЭтапов,
		|	ЭтапыПодготовкиБюджетов.Длительность,
		|	ЭтапыПодготовкиБюджетов.ТипДлительности,
		|	ЭтапыПодготовкиБюджетов.Ответственный,
		|	ЭтапыПодготовкиБюджетов.НеВыполняется,
		|	ЭтапыПодготовкиБюджетов.Код,
		|	ЭтапыПодготовкиБюджетов.ЭтоГруппа,
		|	ЭтапыПодготовкиБюджетов.Периодичность,
		|	ЭтапыПодготовкиБюджетов.Родитель.Периодичность КАК ПериодичностьГруппы,
		|	ЭтапыПодготовкиБюджетов.Действие,
		|	ЭтапыПодготовкиБюджетов.ВыполнятьАвтоматически
		|ИЗ
		|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
		|ГДЕ
		|	ЭтапыПодготовкиБюджетов.Ссылка В ИЕРАРХИИ(&Родитель)";
		
	Если Не ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
		Запрос.УстановитьПараметр("Родитель", Объект.ГруппаЭтапов);
	Иначе
		Запрос.УстановитьПараметр("Родитель", ГруппаПовторяемогоШага);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
	ИндексДокумента = УпорядоченныеПериодичности.Найти(Объект.Периодичность);
	
	ВыборкаДетальныеЗаписи.Сбросить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ЭтапПодготовкиБюджетов = ГруппаПовторяемогоШага Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.ЭтоГруппа Тогда
			ИндексЗаполнения = УпорядоченныеПериодичности.Найти(ВыборкаДетальныеЗаписи.Периодичность);
		Иначе
			ИндексЗаполнения = УпорядоченныеПериодичности.Найти(ВыборкаДетальныеЗаписи.ПериодичностьГруппы);
		КонецЕсли;
		
		Если ИндексЗаполнения > ИндексДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ГруппаЭтапов, ЭтапПодготовкиБюджетов, ЭтапПодготовкиБюджетовОснование");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаДетальныеЗаписи);
		Если ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
			СтруктураПоиска.ЭтапПодготовкиБюджетовОснование = СтруктураПоиска.ЭтапПодготовкиБюджетов;
			СтруктураПоиска.ЭтапПодготовкиБюджетов = ПовторяемыйЭтапПроцесса;
		КонецЕсли;
		
		Если Не Объект.НастройкиИерархии.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			НоваяСтрока = Объект.НастройкиИерархии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
		КонецЕсли;
	
		Если ВыборкаДетальныеЗаписи.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Периодичность = ВыборкаДетальныеЗаписи.ПериодичностьГруппы;
		
		НоваяСтрока = Объект.НастройкиРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.Период = Объект.НачалоПериода;
		Если ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
			НоваяСтрока.ЭтапПодготовкиБюджетовОснование = НоваяСтрока.ЭтапПодготовкиБюджетов;
			НоваяСтрока.ЭтапПодготовкиБюджетов = ПовторяемыйЭтапПроцесса;
		КонецЕсли;
		
		СледующийПериод = БюджетированиеКлиентСервер.ДобавитьИнтервал(НоваяСтрока.Период, ВыборкаДетальныеЗаписи.ПериодичностьГруппы, 1);
		Пока СледующийПериод <= Объект.КонецПериода Цикл
			НоваяСтрокаПериода = Объект.НастройкиРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПериода, НоваяСтрока);
			НоваяСтрокаПериода.Период = СледующийПериод;
			СледующийПериод = БюджетированиеКлиентСервер.ДобавитьИнтервал(СледующийПериод, ВыборкаДетальныеЗаписи.ПериодичностьГруппы, 1);
		КонецЦикла;
		
		Если ВыборкаДетальныеЗаписи.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов Тогда
			Если Не ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
				НастройкаДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.ЭтапПодготовкиБюджетов, "НастройкаДействия");
				НайденнаяСтрока = НастройкаДействия.Получить().Найти("ГруппаШагов", "Имя");
				Если НайденнаяСтрока <> Неопределено Тогда
					ПовторяемаяГруппа = НайденнаяСтрока.Значение;
					ЗаполнитьШагиРасчетаНаСервере(ВыборкаДетальныеЗаписи.ЭтапПодготовкиБюджетов, ПовторяемаяГруппа);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПовторяемыйЭтапПроцесса) Тогда
		ЗаполнитьДеревоШагов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьВидПериода(Периодичность)
	
	Возврат Перечисления.ДоступныеПериодыОтчета[ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность)];
	
КонецФункции

&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйПериод <> Неопределено Тогда
		
		Период = ВыбранныйПериод.Представление;
		
		Объект.НачалоПериода = ВыбранныйПериод.Значение;
		Объект.КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ВыбранныйПериод.Значение, Объект.Периодичность);
		
		ЗаполнитьШагиРасчетаНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПериод()
	
	Если Не ЗначениеЗаполнено(Объект.Периодичность) Тогда
		Период = "";
		Элементы.Период.Доступность = Ложь;
		Возврат;
	Иначе
		Элементы.Период.Доступность = Истина;
	КонецЕсли;
	
	ВидПериода = ОпределитьВидПериода(Объект.Периодичность);
	СписокПериодов = ОбщегоНазначенияУТКлиентСервер.ПолучитьСписокПериодов(Объект.НачалоПериода, ВидПериода);
	ЭлементСписка = СписокПериодов.НайтиПоЗначению(Объект.НачалоПериода);
	
	Если ЭлементСписка = Неопределено Тогда
		Период = "";
	Иначе
		Период = ЭлементСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПривестиЗначениеПериода()
	
	Объект.НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(Объект.НачалоПериода, Объект.Периодичность);
	Объект.КонецПериода =  БюджетированиеКлиентСервер.ДатаКонцаПериода(Объект.НачалоПериода, Объект.Периодичность);
	
	ОтобразитьПериод();
	ЗаполнитьШагиРасчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоШагов()
	
	Для Каждого СтрокаДерева из ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы() Цикл
		Элементы.ДеревоШаговБюджетногоПроцесса.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеТабличнойЧасти(ИмяПоля)
	
	ТекущиеДанные = Элементы.ДеревоШаговБюджетногоПроцесса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Период, ЭтапПодготовкиБюджетов, ЭтапПодготовкиБюджетовОснование");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
	НайденнаяСтрока = Объект.НастройкиРасчета.НайтиСтроки(СтруктураПоиска)[0];
	НайденнаяСтрока[ИмяПоля] = ТекущиеДанные[ИмяПоля];
	
КонецПроцедуры

&НаСервере
Функция НайтиСтроки(СтрокиДерева, СтруктураПоиска)
	
	Возврат Документы.ПроцессПодготовкиБюджетов.НайтиСтроки(СтрокиДерева, СтруктураПоиска);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусыНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ПроцессПодготовкиБюджетов.ЗаполнитьСтатусыЗадачДерева(Объект, ДеревоШаговБюджетногоПроцесса);
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗадачаПоОбъекту(Документ, ПроцессПодготовкиБюджетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БюджетнаяЗадача.Ссылка,
		|	БюджетнаяЗадача.ПометкаУдаления,
		|	БюджетнаяЗадача.Выполнена
		|ПОМЕСТИТЬ БюджетныеЗадачи
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	БюджетнаяЗадача.ПроцессПодготовкиБюджетов = &ПроцессПодготовкиБюджетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БюджетнаяЗадачаСписокДокументов.Ссылка
		|ИЗ
		|	БюджетныеЗадачи КАК БюджетныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.БюджетнаяЗадача.СписокДокументов КАК БюджетнаяЗадачаСписокДокументов
		|		ПО БюджетныеЗадачи.Ссылка = БюджетнаяЗадачаСписокДокументов.Ссылка
		|ГДЕ
		|	НЕ БюджетныеЗадачи.ПометкаУдаления
		|	И БюджетнаяЗадачаСписокДокументов.Документ = &Документ
		|	И НЕ БюджетныеЗадачи.Выполнена";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПроцессПодготовкиБюджетов", ПроцессПодготовкиБюджетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтатусТекущегоДокументаУтвержден(Источник)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Статус, Проведен");
	Если РеквизитыДокумента.Статус = Перечисления.СтатусыПланов.ВПодготовке ИЛИ Не РеквизитыДокумента.Проведен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗадачуПоСобытию(Результат, ДополнительныеПараметры) Экспорт
	
	Документ = ДополнительныеПараметры.Документа;
	Задача = ЗадачаПоОбъекту(Документ, Объект.Ссылка);
	Если ЗначениеЗаполнено(Задача) Тогда
		Если  ТипЗнч(Результат) = Тип("ДокументСсылка.ЭкземплярБюджета")  
			И НЕ СтатусТекущегоДокументаУтвержден(Документ) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Для выполнения задачи документ должен быть в статусе ""На утверждении""'"));
			
		Иначе
			
			ИДСледующейСтроки = ВыполнитьЗадачуНаСервере(Задача);
			Если ИДСледующейСтроки <> Неопределено Тогда
				Элементы.ДеревоШаговБюджетногоПроцесса.ТекущаяСтрока = ИДСледующейСтроки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БюджетнаяЗадачаСписком(Задача)
	
	Возврат Задачи.БюджетнаяЗадача.БюджетнаяЗадачаСписком(Задача);
	
КонецФункции

&НаСервере
Функция ОбработкаОповещенияЗадачиНаСервере()
	
	ОбновитьСтатусыНаСервере();
	
	УправлениеФормой();
	
	Возврат НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 1));
	
КонецФункции

&НаСервере
Функция ВыполнитьЗадачуНаСервере(Задача)
	
	Попытка
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.Заблокировать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ЗадачаОбъект.Выполнена = Истина;
	ЗадачаОбъект.Записать();
	
	ОбновитьСтатусыНаСервере();
	
	УправлениеФормой();
	
	Возврат НайтиСтроки(ДеревоШаговБюджетногоПроцесса.ПолучитьЭлементы(), Новый Структура("ИндексСтатуса", 1));
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусыЗадач()
	
	ОбновитьСтатусыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроцессовПодготовкиБюджетов.Завершен");
	Записать();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельБюджетированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не МодельБюджетированияДействует(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(,НСтр("ru = 'Модель бюджетирования не действует.
									|Измените статус у модели для выбора в документе'"));
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция МодельБюджетированияДействует(Модель)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Модель, "Статус") = 
						Перечисления.СтатусыМоделейБюджетирования.Действует;
	
КонецФункции

&НаСервере
Функция ВсеЗадачиВыполнены()
	
	Возврат Документы.ПроцессПодготовкиБюджетов.ВДеревеЭтаповВсеЗадачиВыполнены(ДеревоШаговБюджетногоПроцесса);
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		Заголовок = Строка(Объект.Ссылка) + " (" + Строка(Объект.Статус) + ")";
	Иначе
		Заголовок = Метаданные.Документы.ПроцессПодготовкиБюджетов.Синоним + " (" + Строка(Объект.Статус) + ")";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти