#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИСотрудникам(ЭтотОбъект, Таблица, "Организация", "Сотрудники.Сотрудник");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ЗарплатаКадрыРасширенный.ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(Движения);
	
	ДанныеДляПроведения = ПолучитьДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.СотрудникиДаты, Ссылка);
	
	СтруктураПлановыхНачислений = Новый Структура;
	СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
	СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
	
	РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ЭтотОбъект, Движения, СтруктураПлановыхНачислений);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьДаты(Ссылка, ДатаИзменения, "Объект.ДатаИзменения", Отказ, НСтр("ru='Дата изменения'"), , , Ложь);
	
	Если ЗначениеЗаполнено(ДатаОкончания)
		И ДатаОкончания < ДатаИзменения Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Дата окончания должна быть больше даты изменения'"),
			Ссылка,
			"ДатаОкончания",
			"Объект",
			Отказ)
		
	КонецЕсли;
	
	ДатыИзмененияСотрудников = Новый Соответствие;
	ИндексСтроки = 0;
	Для каждого СтрокаСотрудника Из Сотрудники Цикл
		
		ДатыИзмененияСотрудников.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ДатаИзменения);
		
		Если ЗначениеЗаполнено(СтрокаСотрудника.ДатаОкончания)
		И СтрокаСотрудника.ДатаОкончания < СтрокаСотрудника.ДатаИзменения Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Дата окончания должна быть больше даты изменения'"),
				Ссылка,
				"Сотрудники[" + ИндексСтроки + "].ДатаОкончания",
				"Объект",
				Отказ)
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	Документы.ИзменениеПлановыхНачислений.ПроверитьПересечениеПериодовДействия(
		ЭтотОбъект, "Сотрудники", "Сотрудник", "ДатаИзменения", "ДатаОкончания", Отказ);
	
	СуществующиеНачисления = Новый Соответствие;
	Для каждого СтрокаНачисления Из Начисления Цикл
		
		Если ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
			
			Если СуществующиеНачисления.Получить(СтрокаНачисления.Начисление) = Неопределено Тогда
				СуществующиеНачисления.Вставить(СтрокаНачисления.Начисление, Истина);
			Иначе
				
				ТекстСообщения = НСтр("ru='Повторяющееся начисление'") + " """ + СтрокаНачисления.Начисление + """";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, Ссылка, "Объект.Начисления[" + (СтрокаНачисления.НомерСтроки - 1) + "].Начисление", , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка заполненности показателей
	ПроеритьЗаполненностьПоказателей(Отказ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	КадровыйУчетРасширенный.ПроверитьРаботающихСотрудников(ЭтотОбъект, Отказ, , "ДатаИзменения");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Подразделение");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений.
// Возвращает Структуру с полями.
//		ПлановыеНачисления - данные, необходимые для формирования истории плановых начислений.
//		(см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхНачислений)
//		ЗначенияПоказателей (см. там же).
//
Функция ПолучитьДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзменениеПлановыхНачисленийСотрудники.Ссылка,
		|	ИзменениеПлановыхНачисленийСотрудники.Ссылка.Организация КАК Организация,
		|	ИзменениеПлановыхНачисленийСотрудники.ДатаИзменения КАК ДатаСобытия,
		|	ИзменениеПлановыхНачисленийСотрудники.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ИзменениеПлановыхНачисленийСотрудники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИзменениеПлановыхНачисленийСотрудники.ДатаОкончания
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ИзменениеПлановыхНачисленийСотрудники.ДатаОкончания, ДЕНЬ, 1)
		|	КОНЕЦ КАК ДействуетДо,
		|	ИзменениеПлановыхНачисленийСотрудники.СовокупнаяТарифнаяСтавка,
		|	ИзменениеПлановыхНачисленийСотрудники.ВидТарифнойСтавки,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ИзменениеПлановыхНачисленийСотрудники.ИдентификаторСтрокиСотрудника
		|ПОМЕСТИТЬ ВТСотрудникиДокумента
		|ИЗ
		|	Документ.ИзменениеПлановыхНачислений.Сотрудники КАК ИзменениеПлановыхНачисленийСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ИзменениеПлановыхНачисленийСотрудники.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	ИзменениеПлановыхНачисленийСотрудники.Ссылка = &Ссылка";
	
	Запрос.Выполнить();
	
	// Подготовка данных для проведения.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзменениеПлановыхНачисленийСотрудники.ДатаСобытия,
		|	ИзменениеПлановыхНачисленийСотрудники.ДействуетДо,
		|	ИзменениеПлановыхНачисленийСотрудники.Сотрудник,
		|	ИзменениеПлановыхНачисленийСотрудники.ФизическоеЛицо,
		|	ИзменениеПлановыхНачисленийСотрудники.ГоловнаяОрганизация,
		|	НачисленияСотрудников.Начисление КАК Начисление,
		|	НачисленияСотрудников.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА НачисленияСотрудников.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	ВЫБОР
		|		КОГДА НачисленияСотрудников.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ИСТИНА
		|		КОГДА НачисленияСотрудников.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяПоОкончании,
		|	НачисленияСотрудников.Размер КАК Размер
		|ИЗ
		|	ВТСотрудникиДокумента КАК ИзменениеПлановыхНачисленийСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПлановыхНачислений.НачисленияСотрудников КАК НачисленияСотрудников
		|		ПО ИзменениеПлановыхНачисленийСотрудники.Ссылка = НачисленияСотрудников.Ссылка
		|			И ИзменениеПлановыхНачисленийСотрудники.ИдентификаторСтрокиСотрудника = НачисленияСотрудников.ИдентификаторСтрокиСотрудника";
	
	// Первый набор данных для проведения - таблица для формирования плановых начислений.
	ПлановыеНачисления = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзменениеПлановыхНачисленийСотрудники.Организация,
		|	ИзменениеПлановыхНачисленийСотрудники.Сотрудник,
		|	ИзменениеПлановыхНачисленийСотрудники.ДатаСобытия,
		|	ИзменениеПлановыхНачисленийСотрудники.ДействуетДо,
		|	ИзменениеПлановыхНачисленийСотрудники.ФизическоеЛицо,
		|	ПоказателиСотрудников.Показатель,
		|	ПоказателиСотрудников.ДокументОснование,
		|	МАКСИМУМ(ПоказателиСотрудников.Значение) КАК Значение
		|ИЗ
		|	ВТСотрудникиДокумента КАК ИзменениеПлановыхНачисленийСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПлановыхНачислений.ПоказателиСотрудников КАК ПоказателиСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
		|			ПО ПоказателиСотрудников.Показатель = Показатели.Ссылка
		|		ПО ИзменениеПлановыхНачисленийСотрудники.Ссылка = ПоказателиСотрудников.Ссылка
		|			И ИзменениеПлановыхНачисленийСотрудники.ИдентификаторСтрокиСотрудника = ПоказателиСотрудников.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	ПоказателиСотрудников.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|	И (ПоказателиСотрудников.Значение <> 0
		|			ИЛИ Показатели.ДопускаетсяНулевоеЗначение)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзменениеПлановыхНачисленийСотрудники.Организация,
		|	ИзменениеПлановыхНачисленийСотрудники.Сотрудник,
		|	ИзменениеПлановыхНачисленийСотрудники.ДатаСобытия,
		|	ИзменениеПлановыхНачисленийСотрудники.ДействуетДо,
		|	ИзменениеПлановыхНачисленийСотрудники.ФизическоеЛицо,
		|	ПоказателиСотрудников.Показатель,
		|	ПоказателиСотрудников.ДокументОснование";
	
	// Второй набор данных для проведения - таблица для формирования значений показателей.
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ЗначенияПоказателей", ЗначенияПоказателей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзменениеПлановыхНачисленийСотрудники.Сотрудник,
		|	ИзменениеПлановыхНачисленийСотрудники.ДатаСобытия,
		|	ИзменениеПлановыхНачисленийСотрудники.ДействуетДо,
		|	ИзменениеПлановыхНачисленийСотрудники.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ВЫБОР
		|		КОГДА ИзменениеПлановыхНачисленийСотрудники.СовокупнаяТарифнаяСтавка = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|		ИНАЧЕ ИзменениеПлановыхНачисленийСотрудники.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ИзменениеПлановыхНачисленийСотрудники.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудникиДокумента КАК ИзменениеПлановыхНачисленийСотрудники";
	
	// Третий набор данных для проведения - таблица для формирования значений совокупных тарифных ставок.
	ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзменениеПлановыхНачисленийСотрудники.ДатаСобытия,
		|	ИзменениеПлановыхНачисленийСотрудники.Сотрудник
		|ИЗ
		|	ВТСотрудникиДокумента КАК ИзменениеПлановыхНачисленийСотрудники";
	
	// Четвертый набор данных для проведения - таблица для формирования времени регистрации документа.
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#Область ЗаполнитьДокумент

Процедура ЗаполнитьДокументПоСпискуСотрудников(СписокСотрудников, ДатаИзменения) Экспорт
	
	ФильтрСотрудников = Документы.ИзменениеПлановыхНачислений.ФильтрСотрудниковПоПараметрам(СписокСотрудников, ДатаИзменения);
	ЗаполнитьДокумент(ФильтрСотрудников, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьДокумент(ФильтрСотрудников = Неопределено, ЗаполнитьСписокНачислений = Ложь, НачисленияПоказателиСотрудников = Неопределено) Экспорт
	
	ОчиститьДанные(ФильтрСотрудников);
	
	НачисленияПоказателиСотрудников = Документы.ИзменениеПлановыхНачислений.НачисленияПоказателиСотрудниковПоОбъекту(ЭтотОбъект, ФильтрСотрудников);
	Документы.ИзменениеПлановыхНачислений.ЗаполнитьСотрудников(ЭтотОбъект, НачисленияПоказателиСотрудников);
	
	Документы.ИзменениеПлановыхНачислений.ЗаполнитьНачисленияПоказатели(
		ЭтотОбъект, НачисленияПоказателиСотрудников.НачисленияСотрудников, НачисленияПоказателиСотрудников.ПоказателиСотрудников);
	
	Если ЗаполнитьСписокНачислений
		Или ЭтоОтражениеИзмененияШтатногоРасписания Тогда
		
		ЗаполнитьСписокИзменяемыхНачислений();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокИзменяемыхНачислений()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачисленияСотрудников", НачисленияСотрудников.Выгрузить());
	Запрос.УстановитьПараметр("ИзменяемыеНачисления", ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Начисление", Истина));
	Запрос.УстановитьПараметр("Показатели", ОбщегоНазначения.ВыгрузитьКолонку(ПоказателиСотрудников, "Показатель", Истина));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Начисление,
		|	НачисленияСотрудников.Действие
		|ПОМЕСТИТЬ ВТНачисленияСотрудников
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачисленияПоказатели.Ссылка КАК Начисление,
		|	НачисленияСотрудников.Действие
		|ИЗ
		|	ВТНачисленияСотрудников КАК НачисленияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО НачисленияСотрудников.Начисление = НачисленияПоказатели.Ссылка
		|ГДЕ
		|	НЕ НачисленияСотрудников.Начисление В (&ИзменяемыеНачисления)
		|	И НачисленияПоказатели.Показатель В(&Показатели)
		|	И НачисленияПоказатели.ЗапрашиватьПриВводе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДанные(ФильтрСотрудников)
	
	Если ФильтрСотрудников = Неопределено Тогда
		Сотрудники.Очистить();
		НачисленияСотрудников.Очистить();
		ПоказателиСотрудников.Очистить();
	Иначе
		Для каждого Строка Из ФильтрСотрудников Цикл  
			ОчиститьДанныеПоСотруднику(Строка.Сотрудник, Строка.ДатаИзменения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДанныеПоСотруднику(Сотрудник, ДатаИзменения)
	
	ОтборПоСотруднику = Новый Структура("Сотрудник, ДатаИзменения", Сотрудник, ДатаИзменения);
	
	СтрокиДляУдаления = Сотрудники.НайтиСтроки(ОтборПоСотруднику);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		
		СтрокиДляУдаления = НачисленияСотрудников.НайтиСтроки(Новый Структура("ИдентификаторСтрокиСотрудника", СтрокаДляУдаления.ИдентификаторСтрокиСотрудника));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			НачисленияСотрудников.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		СтрокиДляУдаления = ПоказателиСотрудников.НайтиСтроки(Новый Структура("ИдентификаторСтрокиСотрудника", СтрокаДляУдаления.ИдентификаторСтрокиСотрудника));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			ПоказателиСотрудников.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		Сотрудники.Удалить(СтрокаДляУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаСотрудникиДокумента.Сотрудник,
		|	ТаблицаСотрудникиДокумента.ДатаИзменения КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ИзменениеПлановыхНачислений.НачисленияСотрудников КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеПлановыхНачислений.Сотрудники КАК ТаблицаСотрудникиДокумента
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаСотрудникиДокумента.Ссылка
		|			И ТаблицаДокумента.ИдентификаторСтрокиСотрудника = ТаблицаСотрудникиДокумента.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаСотрудникиДокумента.Сотрудник,
		|	ТаблицаСотрудникиДокумента.ДатаОкончания,
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ИзменениеПлановыхНачислений.НачисленияСотрудников КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеПлановыхНачислений.Сотрудники КАК ТаблицаСотрудникиДокумента
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаСотрудникиДокумента.Ссылка
		|			И ТаблицаДокумента.ИдентификаторСтрокиСотрудника = ТаблицаСотрудникиДокумента.ИдентификаторСтрокиСотрудника
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаСотрудникиДокумента.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроеритьЗаполненностьПоказателей(Отказ)
	
	СтрокиНезаполненныхПокзателей = ПоказателиСотрудников.НайтиСтроки(Новый Структура("Значение", 0));
	Если СтрокиНезаполненныхПокзателей.Количество() > 0 Тогда
		
		ИдентификаторыСтрок = Новый Соответствие;
		Для каждого СтрокаПоказателя Из СтрокиНезаполненныхПокзателей Цикл
			ИдентификаторыСтрок.Вставить(СтрокаПоказателя.ИдентификаторСтрокиСотрудника);
		КонецЦикла;
		
		НачисленияДокумента = Начисления.Выгрузить();
		
		Для каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
			
			СтрокиНачислений = НачисленияСотрудников.НайтиСтроки(Новый Структура("ИдентификаторСтрокиСотрудника", ИдентификаторСтроки.Ключ));
			СтрокиПоказателей = ПоказателиСотрудников.Выгрузить(Новый Структура("ИдентификаторСтрокиСотрудника", ИдентификаторСтроки.Ключ));
			
			Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
				
				Если ЗначениеЗаполнено(СтрокаНачисления.Начисление)
					И СтрокаНачисления.Действие <> Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
					
					Если НачисленияДокумента.Количество() > 0 И НачисленияДокумента.Найти(СтрокаНачисления.Начисление, "Начисление") = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ОписаниеВидаРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачисления.Начисление);
					
					ПоказателиСотрудника = Неопределено;
					Для каждого ОписаниеПоказателяНачисления Из ОписаниеВидаРасчета.Показатели Цикл
						
						Если Не ОписаниеПоказателяНачисления.ЗапрашиватьПриВводе Тогда
							Продолжить;
						КонецЕсли;
						
						ОписаниеПоказателя = ЗарплатаКадрыРасширенныйПовтИсп.СведенияОПоказателеРасчетаЗарплаты(ОписаниеПоказателяНачисления.Показатель);
						
						Если ОписаниеПоказателя.ДопускаетсяНулевоеЗначение Тогда
							Продолжить;
						КонецЕсли;
						
						ПоказательЗадан = Ложь;
						
						СтрокиПоказателя = СтрокиПоказателей.НайтиСтроки(Новый Структура("Показатель,ДокументОснование", ОписаниеПоказателяНачисления.Показатель, СтрокаНачисления.ДокументОснование));
						Если СтрокиПоказателя.Количество() > 0 Тогда
							
							Для каждого СтрокаПоказателя Из СтрокиПоказателя Цикл
								
								Если СтрокаПоказателя.Значение <> 0 Тогда
									ПоказательЗадан = Истина;
									Прервать;
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
						Если Не ПоказательЗадан Тогда
							
							СтрокаСотрудника = Сотрудники.Найти(ИдентификаторСтроки.Ключ, "ИдентификаторСтрокиСотрудника");
							Если СтрокаСотрудника <> Неопределено Тогда
								
								ТекстСообщения = НСтр("ru='Сотруднику" + " " + СтрокаСотрудника.Сотрудник + " " + "не задано значение показателя'") + " """ + ОписаниеПоказателя.Наименование + """";
								
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка,
									"Объект.Сотрудники[" + (СтрокаСотрудника.НомерСтроки - 1) + "]." + ОписаниеПоказателя.Идентификатор, , Отказ);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
