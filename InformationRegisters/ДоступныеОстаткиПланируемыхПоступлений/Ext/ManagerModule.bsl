#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Производит расчет доступных остатков планируемых поступлений и записывает их в одноименный регистр сведений.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит таблицу "ВтТовары", содержащую товары
//  для которых необходимо рассчитать доступные остатки.
//
Процедура РассчитатьОстаткиГрафикаДвиженияТоваров(МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.Текст = ТекстРасчетаДоступныхОстатков();

	ПакетРезультатов = Запрос.ВыполнитьПакет();

	МенеджерВременныхТаблиц.Закрыть();

	ЗаписиРегистра = ПакетРезультатов[ПакетРезультатов.Количество() - 1].Выгрузить();
	ВсегоЗаписей = ЗаписиРегистра.Количество();
	Индекс = 0;

	ДоступныеОстатки = РегистрыНакопления.ГрафикПоступленияТоваров.ТаблицаДоступныеОстатки(
		ПакетРезультатов[ПакетРезультатов.Количество() - 2].Выбрать());

	КлючЗаписи = Новый Структура("Номенклатура, Характеристика, Склад");

	НаборЗаписей = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
	Для Каждого Запись Из ДоступныеОстатки Цикл

		Если КлючИзменился(КлючЗаписи, Запись) Тогда

			Пока Индекс < ВсегоЗаписей И Не КлючИзменился(КлючЗаписи, ЗаписиРегистра[Индекс]) Цикл

				ЗаписатьНаборВРегистрДоступныеОстатки(НаборЗаписей, ЗаписиРегистра[Индекс], "Удаление");
				Индекс = Индекс + 1;

			КонецЦикла;

			ЗаполнитьЗначенияСвойств(КлючЗаписи, Запись);

		КонецЕсли;

		Пока Индекс < ВсегоЗаписей И Не КлючИзменился(КлючЗаписи, ЗаписиРегистра[Индекс])
			И ЗаписиРегистра[Индекс].ДатаДоступности > Запись.ДатаДоступности Цикл

				ЗаписатьНаборВРегистрДоступныеОстатки(НаборЗаписей, ЗаписиРегистра[Индекс], "Удаление");
				Индекс = Индекс + 1;

			КонецЦикла;
		
		Если Индекс < ВсегоЗаписей И Не КлючИзменился(КлючЗаписи, ЗаписиРегистра[Индекс])
			И Запись.ДатаДоступности = ЗаписиРегистра[Индекс].ДатаДоступности Тогда

			Если Запись.Количество = ЗаписиРегистра[Индекс].Количество Тогда
					Индекс = Индекс + 1;
				Продолжить;
			Иначе
				ЗаписатьНаборВРегистрДоступныеОстатки(НаборЗаписей, Запись, "Запись");
				Индекс = Индекс + 1;
			КонецЕсли;

		Иначе

			ЗаписатьНаборВРегистрДоступныеОстатки(НаборЗаписей, Запись, "Запись");

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстРасчетаДоступныхОстатков()
	
	Текст =
		РегистрыНакопления.ГрафикПоступленияТоваров.ТекстЗапросаОборотов(Ложь)
		+ РегистрыНакопления.ГрафикПоступленияТоваров.ТекстЗапросаОстатков(Ложь)
		+ "ВЫБРАТЬ
		|	Т.Номенклатура                                КАК Номенклатура,
		|	Т.Характеристика                              КАК Характеристика,
		|	Т.Склад                                       КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)  КАК Назначение,
		|	ЕСТЬNULL(ОборотыГрафика.Период,
		|		ДАТАВРЕМЯ(1,1,1))                         КАК Период,
		|	ЕСТЬNULL(ОборотыГрафика.Количество,0)         КАК Оборот,
		|	ЕСТЬNULL(ОстаткиГрафика.Количество,0)         КАК Остаток
		|ИЗ
		|	ВтТовары КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиГрафика КАК ОстаткиГрафика
		|		ПО Т.Номенклатура   = ОстаткиГрафика.Номенклатура
		|		 И Т.Характеристика = ОстаткиГрафика.Характеристика
		|		 И Т.Склад          = ОстаткиГрафика.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОборотыГрафика КАК ОборотыГрафика
		|		ПО Т.Номенклатура   = ОборотыГрафика.Номенклатура
		|		 И Т.Характеристика = ОборотыГрафика.Характеристика
		|		 И Т.Склад          = ОборотыГрафика.Склад
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад,
		|	Период Убыв
		|;
		|
		|/////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Номенклатура                                КАК Номенклатура,
		|	Т.Характеристика                              КАК Характеристика,
		|	Т.Склад                                       КАК Склад,
		|	ДоступныеОстаткиДоИзменения.ДатаДоступности   КАК ДатаДоступности,
		|	ДоступныеОстаткиДоИзменения.Количество        КАК Количество
		|ИЗ
		|	ВтТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиДоИзменения
		|		ПО Т.Номенклатура   = ДоступныеОстаткиДоИзменения.Номенклатура
		|		 И Т.Характеристика = ДоступныеОстаткиДоИзменения.Характеристика
		|		 И Т.Склад          = ДоступныеОстаткиДоИзменения.Склад
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад,
		|	ДатаДоступности Убыв";
	
	Возврат Текст;
	
КонецФункции

Процедура ЗаписатьНаборВРегистрДоступныеОстатки(НаборЗаписей, ДанныеЗаполнения, Операция)

	НаборЗаписей.Отбор.Номенклатура.Значение    = ДанныеЗаполнения.Номенклатура;
	НаборЗаписей.Отбор.Характеристика.Значение  = ДанныеЗаполнения.Характеристика;
	НаборЗаписей.Отбор.Склад.Значение           = ДанныеЗаполнения.Склад;
	НаборЗаписей.Отбор.ДатаДоступности.Значение = ДанныеЗаполнения.ДатаДоступности;

	НаборЗаписей.Отбор.Номенклатура.Использование    = Истина;
	НаборЗаписей.Отбор.Характеристика.Использование  = Истина;
	НаборЗаписей.Отбор.Склад.Использование           = Истина;
	НаборЗаписей.Отбор.ДатаДоступности.Использование = Истина;

	НаборЗаписей.Очистить();

	Если Операция = "Запись" Тогда
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ДанныеЗаполнения);
	КонецЕсли;

	НаборЗаписей.Записать();

КонецПроцедуры

Функция КлючИзменился(Ключ, НовыйКлюч)

	Возврат Ключ.Номенклатура   <> НовыйКлюч.Номенклатура
		Или Ключ.Характеристика <> НовыйКлюч.Характеристика
		Или Ключ.Склад          <> НовыйКлюч.Склад;

КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Запрос = Новый Запрос();
	ТекстЗапроса =
	// Часть 1. Текст запроса регистрации из РН.ГрафикПоступленияТоваров для получения всех регистраторов к перепроведению.
	// Далее эти регистраторы будут использованы для получения записей с полями Номенклатура, Характеристика, Склад
	
	// Вычисление признаков по Заказу поставщику, для расчета какой документ
	// станет регистратором по РН ГрафикПоступленияТоваров в случае проведения Заказа поставщика.
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуТовары.Ссылка.Соглашение.ВариантПриемкиТоваров, ВариантПриемкиТоваров.Значение) В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПриемкаНеРазделенаПоНакладным,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуТовары.Ссылка.Соглашение.ВариантПриемкиТоваров, ВариантПриемкиТоваров.Значение) В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоглашениеИспользуетсяВПриемке,
	|	ЗаказПоставщикуТовары.Ссылка.Соглашение КАК Соглашение,
	|	МАКСИМУМ(ЗаказПоставщикуТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|			И ЗаказПоставщикуТовары.ДатаПоступления >= ЗаказПоставщикуТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении) КАК ИспользуетсяОрдерныйСклад
	|ПОМЕСТИТЬ ВТЗаказыПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка.Проведен
	|	И НЕ ЗаказПоставщикуТовары.Отменено
	|	И ЗаказПоставщикуТовары.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.УдалитьКПоступлению),
	|											 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован),
	|											 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|											 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщикуТовары.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуТовары.Ссылка.Соглашение.ВариантПриемкиТоваров, ВариантПриемкиТоваров.Значение) В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуТовары.Ссылка.Соглашение.ВариантПриемкиТоваров, ВариантПриемкиТоваров.Значение) В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЗаказПоставщикуТовары.Ссылка.Соглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Подмена регистратора. Движения могут быть как новыми, так и уже существовать.
	// Регистратор при проведении Заказа поставщику - Соглашение с поставщиком.
	|ВЫБРАТЬ
	|	МАКСИМУМ(Таблица.Ссылка) КАК Регистратор
	|ПОМЕСТИТЬ ВТЗаказыПоставщикуССоглашениями
	|ИЗ
	|	ВТЗаказыПоставщику КАК ВТЗаказыПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СоглашениеСПоставщиком КАК Таблица
	|		ПО (Таблица.Соглашение = ВТЗаказыПоставщику.Соглашение)
	|ГДЕ
	|	ВТЗаказыПоставщику.СоглашениеИспользуетсяВПриемке
	|	И ВТЗаказыПоставщику.ИспользуетсяОрдерныйСклад
	|	И НЕ Таблица.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗаказыПоставщику.Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Движения могут быть как новыми, так и уже существовать.
	// Регистратор при проведении Заказа поставщику - Заказ поставщику.
	|ВЫБРАТЬ
	|	ВТЗаказыПоставщику.Ссылка
	|ИЗ
	|	ВТЗаказыПоставщику КАК ВТЗаказыПоставщику
	|ГДЕ
	|	(НЕ ВТЗаказыПоставщику.СоглашениеИспользуетсяВПриемке
	|			ИЛИ (ВТЗаказыПоставщику.ПриемкаНеРазделенаПоНакладным И ВТЗаказыПоставщику.ИспользуетсяОрдерныйСклад)
	|			ИЛИ НЕ ВТЗаказыПоставщику.ИспользуетсяОрдерныйСклад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗаказыПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Заказы поставщику (в т.ч. те, по которым еще нет записей в РН ГрафикПоступленияТоваров).
	// Регистратор может быть подменен на Документ.СоглашениеСПоставщиком.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщику.Регистратор
	|ПОМЕСТИТЬ ВТРаспоряженияГрафикаПоступленияДляПересчета
	|ИЗ
	|	ВТЗаказыПоставщикуССоглашениями КАК ЗаказыПоставщику
	|
//++ НЕ УТКА
	// Производственные документы.
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказНаПроизводство2_2.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	|ГДЕ
	|	ЗаказНаПроизводство2_2.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапПроизводства2_2.Ссылка
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвижениеТоваров.Ссылка
	|ИЗ
	|	Документ.ДвижениеПродукцииИМатериалов КАК ДвижениеТоваров
	|ГДЕ
	|	ДвижениеТоваров.Проведен
//-- НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Все записи регистра, кроме Заказа поставщику
//++ НЕ УТКА
	// и производственных документов.
//-- НЕ УТКА
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикПоступления.Регистратор
	|ИЗ
	|	РегистрНакопления.ГрафикПоступленияТоваров КАК ГрафикПоступления
	|ГДЕ
	|	НЕ ГрафикПоступления.Регистратор ССЫЛКА Документ.ЗаказПоставщику
//++ НЕ УТКА
	|	И НЕ ГрафикПоступления.Регистратор ССЫЛКА Документ.ДвижениеПродукцииИМатериалов
	|	И НЕ ГрафикПоступления.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
	|	И НЕ ГрафикПоступления.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство2_2
//-- НЕ УТКА
	|	И (ГрафикПоступления.КоличествоИзЗаказовСНеподтвержденными = 0
	|			И ГрафикПоступления.КоличествоПодЗаказСНеподтвержденными = 0)
	//++ НЕ УТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ГрафикПоступленияТоваров КАК ДвиженияРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство КАК Операция
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство.Товары КАК Строки
	|			ПО Операция.Ссылка = Строки.Ссылка
	|				И Операция.Дата <> Строки.НачалоОтгрузки
	|				И (Строки.ОкончаниеПоступления = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		ПО ДвиженияРегистра.Регистратор = Операция.Ссылка
	|			И ДвиженияРегистра.Период = НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ)
	|			И (Операция.УправлениеПроизводством2_2)
	|			И ДвиженияРегистра.Период <> Строки.НачалоОтгрузки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ГрафикПоступленияТоваров КАК ДвиженияРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство КАК Операция
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство.Товары КАК Строки
	|			ПО Операция.Ссылка = Строки.Ссылка
	|				И Операция.Дата <> Строки.ОкончаниеПоступления
	|				И (Строки.ОкончаниеПоступления <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		ПО ДвиженияРегистра.Регистратор = Операция.Ссылка
	|			И ДвиженияРегистра.Период = НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ)
	|			И (Операция.УправлениеПроизводством2_2)
	|			И ДвиженияРегистра.Период <> Строки.ОкончаниеПоступления
	|
	//-- НЕ УТ
	|;
	|
	// Часть 2. Получение расхождений между РС ДоступныеОстаткиПланируемыхПоступлений
	// и регистрами по графикам поступления / отгрузки
	|
	|ВЫБРАТЬ
	|	НаборДанных.Номенклатура      КАК Номенклатура,
	|	НаборДанных.Характеристика    КАК Характеристика,
	|	НаборДанных.Склад             КАК Склад,
	|	СУММА(НаборДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтОстаткиГрафика
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура   КАК Номенклатура,
	|		Таблица.Характеристика КАК Характеристика,
	|		Таблица.Склад          КАК Склад,
	|		Таблица.КоличествоИзЗаказовОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ГрафикПоступленияТоваров.Остатки(,
	|			Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Таблица
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура   КАК Номенклатура,
	|		Таблица.Характеристика КАК Характеристика,
	|		Таблица.Склад          КАК Склад,
	|		-Таблица.КоличествоИзЗаказовОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ГрафикОтгрузкиТоваров.Остатки(,
	|			Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Таблица
	|
	|	) КАК НаборДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборДанных.Номенклатура,
	|	НаборДанных.Характеристика,
	|	НаборДанных.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(НаборДанных.Количество) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Таблица.Номенклатура      КАК Номенклатура,
	|	Таблица.Характеристика    КАК Характеристика,
	|	Таблица.Склад             КАК Склад,
	|	МАКСИМУМ(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтДоступныеОстаткиПланируемыхПоступлений
	|ИЗ
	|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Склад,
	|	Таблица.Характеристика
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Таблица.Количество) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Часть 3. Получение измерений для регистрации
	|
	|ВЫБРАТЬ
	|	НаборДанных.Номенклатура   КАК Номенклатура,
	|	НаборДанных.Характеристика КАК Характеристика,
	|	НаборДанных.Склад          КАК Склад
	|ПОМЕСТИТЬ ВТАналитикаРасхожденийРегистров
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура   КАК Номенклатура,
	|		Таблица.Характеристика КАК Характеристика,
	|		Таблица.Склад          КАК Склад,
	|		Таблица.Количество     КАК Количество
	|	ИЗ
	|		ВтОстаткиГрафика КАК Таблица
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура   КАК Номенклатура,
	|		Таблица.Характеристика КАК Характеристика,
	|		Таблица.Склад          КАК Склад,
	|		-Таблица.Количество     КАК Количество
	|	ИЗ
	|		ВтДоступныеОстаткиПланируемыхПоступлений КАК Таблица
	|	) КАК НаборДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборДанных.Номенклатура,
	|	НаборДанных.Склад,
	|	НаборДанных.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(НаборДанных.Количество) <> 0
	|
	|;
	|
	|ВЫБРАТЬ
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад
	|ПОМЕСТИТЬ ВТАналитикаГрафикаПоступленийТоваров
	|ИЗ
	|	РегистрНакопления.ГрафикПоступленияТоваров КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспоряженияГрафикаПоступленияДляПересчета КАК ТаблицаРегистраторы
	|	ПО Таблица.Регистратор = ТаблицаРегистраторы.Регистратор
	|ГДЕ
	|	Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Набор.Номенклатура   КАК Номенклатура,
	|	Набор.Характеристика КАК Характеристика,
	|	Набор.Склад          КАК Склад
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура   КАК Номенклатура,
	|		Таблица.Характеристика КАК Характеристика,
	|		Таблица.Склад          КАК Склад
	|	ИЗ
	|		ВТАналитикаРасхожденийРегистров КАК Таблица
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура   КАК Номенклатура,
	|		Таблица.Характеристика КАК Характеристика,
	|		Таблица.Склад          КАК Склад
	|	ИЗ
	|		ВТАналитикаГрафикаПоступленийТоваров КАК Таблица) КАК Набор";
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаНаборов = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ТаблицаНаборов, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений";
	ИмяРегистра = "ДоступныеОстаткиПланируемыхПоступлений";
	
	РегистрГрафикПоступленияТоваровОбновляется = ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, "РегистрНакопления.ГрафикПоступленияТоваров");
	РегистрГрафикОтгрузкиТоваровОбновляется = ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, "РегистрНакопления.ГрафикОтгрузкиТоваров");
	Если РегистрГрафикПоступленияТоваровОбновляется
		Или РегистрГрафикОтгрузкиТоваровОбновляется Тогда
		// Обработка РС ДоступныеОстаткиПланируемыхПоступлений возможна только если
		// завершена обработка по РН ГрафикПоступленияТоваров и РН ГрафикОтгрузкиТоваров
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВтТовары";

	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстРасчетаДоступныхОстатков();
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();

	МенеджерВременныхТаблиц.Закрыть();

	Индекс = 0;

	ДоступныеОстатки = РегистрыНакопления.ГрафикПоступленияТоваров.ТаблицаДоступныеОстатки(
		ПакетРезультатов[ПакетРезультатов.Количество() - 2].Выбрать());

	КлючЗаписи = Новый Структура("Номенклатура, Характеристика, Склад");

	НаборЗаписей = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
	
	ИндексовОстатков = ДоступныеОстатки.Количество() - 1;
	
	ЕстьОшибкаБлокировки = Ложь;
	
	Для Индекс = 0 По ИндексовОстатков Цикл
		
		Запись = ДоступныеОстатки[Индекс];
		
		Если КлючИзменился(КлючЗаписи, Запись) Тогда
			
			Если Не ЕстьОшибкаБлокировки
				И НаборЗаписей.Количество() > 0 Тогда
				Попытка
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(НаборЗаписей);
				КонецПопытки;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(КлючЗаписи, Запись);
			
			НачатьТранзакцию();
			
			ЕстьОшибкаБлокировки = Ложь;
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений");
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Запись.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Запись.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Запись.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ГрафикОтгрузкиТоваров");
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Запись.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Запись.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Запись.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ГрафикПоступленияТоваров");
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Запись.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Запись.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Запись.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Попытка
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(НаборЗаписей);
				
				// Блокировка не удалась, но в выборке еще могут быть записи по текущему ключу.
				// Необходимо оповестить последующие итерации о том что по текущему ключу нельзя ничего делать.
				ЕстьОшибкаБлокировки = Истина;
				Продолжить;
			КонецПопытки;
			
			НаборЗаписей = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Значение    = Запись.Номенклатура;
			НаборЗаписей.Отбор.Характеристика.Значение  = Запись.Характеристика;
			НаборЗаписей.Отбор.Склад.Значение           = Запись.Склад;
			
			НаборЗаписей.Отбор.Номенклатура.Использование    = Истина;
			НаборЗаписей.Отбор.Характеристика.Использование  = Истина;
			НаборЗаписей.Отбор.Склад.Использование           = Истина;
			
		КонецЕсли;
		
		Если Не ЕстьОшибкаБлокировки Тогда
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Запись);
			
			Если Индекс = ИндексовОстатков Тогда
				Попытка
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(НаборЗаписей);
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#КонецЕсли
