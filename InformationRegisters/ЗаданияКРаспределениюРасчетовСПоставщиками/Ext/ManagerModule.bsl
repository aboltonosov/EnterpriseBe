#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
//Метод выводит в табличный документ предупреждение,
//если отчет формируетя по неактуальным данным
//Параметры:
//	Макет - ТабличныйДокумент - Макет, в который выводится предупреждение
//	ПараметрыРасчета - Структура - Свойства, в которых указаны данные о границах расчета
Процедура ВывестиАктуальностьРасчета(Макет, ПараметрыРасчета) Экспорт
	Если  ЗначениеЗаполнено(ПараметрыРасчета) И ПараметрыРасчета.Свойство("ГраницаВзаиморасчетов") Тогда
		Если ЗначениеЗаполнено(ПараметрыРасчета.ГраницаВзаиморасчетов) Тогда
			ТаблицаПредупреждение = Новый ТабличныйДокумент;
			ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
			Если Константы.АктуализироватьВзаиморасчетыПриФормированииОтчетов.Получить() Тогда
				ТекстПредупреждения = НСтр("ru ='Распределение расчетов выполнено до %ДатаАктуальности. 
										|Запущено задание по распределению расчетов с %ДатаНачалаРаспределения (требуется распределить расчеты для %КоличествоДокументов). 
										|После распределения Вам будет предложено переформировать отчет.'");
			Иначе
				ТекстПредупреждения = НСтр("ru ='Распределение расчетов выполнено до %ДатаАктуальности. 
										|Необходимо восстановить взаиморасчеты из формы закрытия месяца (пункт ""Формирование движений по расчетам с партнерами (контрагентами)"",
										|либо запустить регламентное задание ""Выполнение отложенных движений по расчетам с клиентами\поставщиками"".'");
			КонецЕсли;
			ДатаАктуальности = КонецМесяца(ПараметрыРасчета.ГраницаВзаиморасчетов - 1);
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаАктуальности", Формат(ДатаАктуальности, "ДЛФ=D"));
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаНачалаРаспределения", Формат(ПараметрыРасчета.ГраницаВзаиморасчетов, "ДЛФ=D"));
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%КоличествоДокументов", ОбщегоНазначенияУТ.ЧислоДокументовПрописью(ПараметрыРасчета.КРасчету));
			ОбластьПредупреждение.Текст = ТекстПредупреждения;
			ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Макет.ВставитьОбласть(ОбластьПредупреждение, Макет.Область(1,1,1,1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		Иначе
			ПараметрыРасчета.Удалить("ГраницаВзаиморасчетов");
			ПараметрыРасчета.Удалить("НомерЗадания");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Метод возвращает значение константы "Номер задания",
//считанной при разделяемой блокировке
//
// Возвращаемое значение:
//	Число - Номер текущего задания из константы "Номер задания к распределению расчетов с поставщиками".
Функция ПолучитьНомерЗадания() Экспорт
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКРаспределениюРасчетовСПоставщиками");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить();
	
	ЗафиксироватьТранзакцию();
	
	Возврат НомерЗадания;
КонецФункции

// Метод создает запись регистра на указанный период по всем аналитикам за месяц.
//
// Параметры:
//	ПериодЗадания   - Дата - Начало периода, для которого необходимо зарегистрировать задание к расчету
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КРасчету.Организация КАК Организация,
	|	КРасчету.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Ключи.Организация
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = Ключи.Ссылка
	|	ГДЕ
	|		Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыОфлайн.АналитикаУчетаПоПартнерам,
	|		Ключи.Организация
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыОфлайн
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
	|		ПО РасчетыОфлайн.АналитикаУчетаПоПартнерам = Ключи.Ссылка
	|	ГДЕ
	|		РасчетыОфлайн.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|	) КАК КРасчету
	|");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодЗадания));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодЗадания));
	ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
	
	// Запишем задания
	НачатьТранзакцию();
	
	НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить();
	Для Каждого ТекущаяАналитика Из ТаблицаАналитик Цикл
		НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьМенеджерЗаписи();
		НаборЗаписей.Месяц = НачалоМесяца(ПериодЗадания);
		НаборЗаписей.Организация = ТекущаяАналитика.Организация;
		НаборЗаписей.АналитикаУчетаПоПартнерам = ТекущаяАналитика.АналитикаУчетаПоПартнерам;
		НаборЗаписей.НомерЗадания = НомерЗадания;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоличествоНеактуальныхДокументов(НачалоРасчета, КонецРасчета, АналитикиРасчета = Неопределено) Экспорт
	Запрос = Новый Запрос("
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КОЛИЧЕСТВО(Расчеты.Регистратор) КАК Количество
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ГДЕ
	|		Расчеты.Период МЕЖДУ &НачалоРасчета И &КонецРасчета
	|		И (Расчеты.АналитикаУчетаПоПартнерам В (&АналитикаУчетаПоПартнерам)
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|			ИЛИ &ПоВсемАналитикам)
	|");
	
	Запрос.УстановитьПараметр("НачалоРасчета", НачалоРасчета);
	Запрос.УстановитьПараметр("КонецРасчета", КонецРасчета);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикиРасчета.АналитикиУчетаПоПартнерам);
	Запрос.УстановитьПараметр("ПоВсемАналитикам", НЕ Значениезаполнено(АналитикиРасчета));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		КоличествоДокументов = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;
	Возврат КоличествоДокументов;
КонецФункции

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяРегистра()
	
	Возврат "РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками";
	
КонецФункции

// Обработчик обновления УТ 11.3.2
// В движениях регистра заполняет новый реквизит Организация.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерЗадания,
	|	Задания.АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов,
	|	Задания.Документ
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|ГДЕ
	|	Задания.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	ИЛИ Задания.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|");
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления УТ 11.3.2
// В движениях регистра заполняет новый реквизит Организация.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	
	ДанныеКОбработке = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяРегистра(),ДополнительныеПараметры);
	Пока ДанныеКОбработке.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра());
			ЭлементБлокировки.УстановитьЗначение("Месяц", ДанныеКОбработке.Месяц);
			ЭлементБлокировки.УстановитьЗначение("НомерЗадания", ДанныеКОбработке.НомерЗадания);
			ЭлементБлокировки.УстановитьЗначение("АналитикаУчетаПоПартнерам", ДанныеКОбработке.АналитикаУчетаПоПартнерам);
			ЭлементБлокировки.УстановитьЗначение("ОбъектРасчетов", ДанныеКОбработке.ОбъектРасчетов);
			ЭлементБлокировки.УстановитьЗначение("Документ", ДанныеКОбработке.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщиками");
			ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(НачалоМесяца(ДанныеКОбработке.Месяц), КонецМесяца(ДанныеКОбработке.Месяц)));
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КЗаписи.Месяц,
			|	КЗаписи.НомерЗадания,
			|	КЗаписи.Организация,
			|	КЗаписи.АналитикаУчетаПоПартнерам,
			|	КЗаписи.ОбъектРасчетов,
			|	КЗаписи.Документ
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		Задания.Месяц,
			|		Задания.НомерЗадания,
			|		Ключи.Организация,
			|		Задания.АналитикаУчетаПоПартнерам,
			|		Задания.ОбъектРасчетов,
			|		Задания.Документ
			|	ИЗ
			|		РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
			|		ПО Задания.АналитикаУчетаПоПартнерам = Ключи.Ссылка
			|	
			|	ГДЕ
			|		Задания.Месяц = &Месяц
			|		И Задания.НомерЗадания = &НомерЗадания
			|		И Задания.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
			|		И Задания.ОбъектРасчетов = &ОбъектРасчетов
			|		И Задания.Документ = &Документ
			|		И Задания.АналитикаУчетаПоПартнерам <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		Задания.Месяц,
			|		Задания.НомерЗадания,
			|		Ключи.Организация,
			|		Расчеты.АналитикаУчетаПоПартнерам,
			|		Задания.ОбъектРасчетов,
			|		Задания.Документ
			|	ИЗ
			|		РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
			|		ПО Расчеты.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
			|		ПО Расчеты.АналитикаУчетаПоПартнерам = Ключи.Ссылка
			|	
			|	ГДЕ
			|		Задания.Месяц = &Месяц
			|		И Задания.НомерЗадания = &НомерЗадания
			|		И Задания.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
			|		И Задания.ОбъектРасчетов = &ОбъектРасчетов
			|		И Задания.Документ = &Документ
			|		И Задания.АналитикаУчетаПоПартнерам = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
			|	) КАК КЗаписи
			|
			|");
			
			НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Месяц.Установить(ДанныеКОбработке.Месяц);
			НаборЗаписей.Отбор.НомерЗадания.Установить(ДанныеКОбработке.НомерЗадания);
			НаборЗаписей.Отбор.ОбъектРасчетов.Установить(ДанныеКОбработке.ОбъектРасчетов);
			НаборЗаписей.Отбор.Документ.Установить(ДанныеКОбработке.Документ);
			Если ЗначениеЗаполнено(ДанныеКОбработке.АналитикаУчетаПоПартнерам) Тогда
				НаборЗаписей.Отбор.АналитикаУчетаПоПартнерам.Установить(ДанныеКОбработке.АналитикаУчетаПоПартнерам);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Месяц", ДанныеКОбработке.Месяц);
			Запрос.УстановитьПараметр("НомерЗадания", ДанныеКОбработке.НомерЗадания);
			Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", ДанныеКОбработке.АналитикаУчетаПоПартнерам);
			Запрос.УстановитьПараметр("ОбъектРасчетов", ДанныеКОбработке.ОбъектРасчетов);
			Запрос.УстановитьПараметр("Документ", ДанныеКОбработке.Документ);
			Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ДанныеКОбработке.Месяц));
			Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ДанныеКОбработке.Месяц));
			
			НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
			ЗафиксироватьТранзакцию();
		
		Исключение
		
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра());
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками, Неопределено, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли