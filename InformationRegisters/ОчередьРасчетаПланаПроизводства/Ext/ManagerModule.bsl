#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Записывает данные в регистр.
//
// Параметры:
//  Очередь	- ТаблицаЗначений - данные для записи.
//  ПланПроизводства - ДокументСсылка.ПланПроизводства - документ, которому принадлежит очередь.
//
Процедура ЗаписатьОчередь(Очередь, ПланПроизводства) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
	
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаПланаПроизводства");
		ЭлементБлокировки.УстановитьЗначение("ПланПроизводства", ПланПроизводства);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Разделитель = РазделительОчереди(ПланПроизводства);
		
		Очередь.Колонки.Добавить("Разделитель");
		Очередь.ЗаполнитьЗначения(Разделитель, "Разделитель");
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПланПроизводства.Установить(ПланПроизводства);
		НаборЗаписей.Отбор.Разделитель.Установить(Разделитель);
		НаборЗаписей.Загрузить(Очередь);
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать очередь расчета плана: %Ссылка% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ПланПроизводства);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			НаборЗаписей.Метаданные(),
			,
			ТекстСообщения);
		
		ВызватьИсключение;
			
	КонецПопытки;
	
КонецПроцедуры

// Очищает данные регистра по заданным измерениям.
//
// Параметры:
//  Очередь	- ТаблицаЗначений - данные измерений для очистки.
//  ПланПроизводства - ДокументСсылка.ПланПроизводства - документ, которому принадлежит очередь.
//
Процедура ОчиститьОчередь(Очередь, ПланПроизводства) Экспорт
	
	Для каждого Строка Из Очередь Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
		
		Для каждого Колонка Из Очередь.Колонки Цикл
			
			НаборЗаписей.Отбор[Колонка.Имя].Установить(Строка[Колонка.Имя]);
			
		КонецЦикла;
		
		Попытка
			
			НаборЗаписей.Записать();
			
		Исключение
			
			НаборЗаписей = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
			
			ТекстСообщения = НСтр("ru = 'Не удалось очистить очередь расчета плана: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ПланПроизводства);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				НаборЗаписей.Метаданные(),
				,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Фиксирует в регистре факт возникновения ошибок в процессе расчета плана производства.
//
// Параметры:
//  ПланПроизводства - ДокументСсылка.ПланПроизводства - документ, в процессе расчета которого произошли ошибки.
//
Процедура ЗаписатьЕстьОшибкиРасчета(ПланПроизводства) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
	
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаПланаПроизводства");
		ЭлементБлокировки.УстановитьЗначение("ПланПроизводства", ПланПроизводства);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОчередьРасчетаПлановПроизводства.Разделитель КАК Разделитель
			|ИЗ
			|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
			|ГДЕ
			|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Разделитель УБЫВ");
		Запрос.УстановитьПараметр("Ссылка", ПланПроизводства);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НаборЗаписей = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПланПроизводства.Установить(ПланПроизводства);
			НаборЗаписей.Отбор.Разделитель.Установить(Выборка.Разделитель);
			
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.ЕстьОшибкиРасчета = Истина;
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать очередь расчета плана: %Ссылка% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ПланПроизводства);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			НаборЗаписей.Метаданные(),
			,
			ТекстСообщения);
			
		ВызватьИсключение;
			
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметрыОтметкиОбработки = ДополнительныеПараметрыОтметкиОбработки();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьРасчетаПланаПроизводства.ПланПроизводства,
		|	ОчередьРасчетаПланаПроизводства.Разделитель,
		|	ОчередьРасчетаПланаПроизводства.Номенклатура,
		|	ОчередьРасчетаПланаПроизводства.Характеристика,
		|	ОчередьРасчетаПланаПроизводства.Спецификация,
		|	ОчередьРасчетаПланаПроизводства.ДатаВыпуска,
		|	ОчередьРасчетаПланаПроизводства.Подразделение,
		|	ОчередьРасчетаПланаПроизводства.Сценарий,
		|	ОчередьРасчетаПланаПроизводства.Назначение,
		|	ОчередьРасчетаПланаПроизводства.ВыпускПолуфабрикатов,
		|	ОчередьРасчетаПланаПроизводства.ПланПроизводстваПересчет
		|ИЗ
		|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПланаПроизводства
		|ГДЕ
		|	ОчередьРасчетаПланаПроизводства.Сценарий = &ПустойСценарий
		|	И ОчередьРасчетаПланаПроизводства.УдалитьСценарий <> &ПустойСценарий");
		
	Запрос.УстановитьПараметр("ПустойСценарий", Справочники.СценарииТоварногоПланирования.ПустаяСсылка());
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметрыОтметкиОбработки);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаОбъектыДляОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, 
		ПолноеИмяРегистра(),
		МенеджерВременныхТаблиц);
	
	Если НЕ ТаблицаОбъектыДляОбработки.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ТаблицаОбъектыДляОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыДляОбработки.ПланПроизводства,
		|	ОбъектыДляОбработки.Разделитель,
		|	ОбъектыДляОбработки.Номенклатура,
		|	ОбъектыДляОбработки.Характеристика,
		|	ОбъектыДляОбработки.Спецификация,
		|	ОбъектыДляОбработки.ДатаВыпуска,
		|	ОбъектыДляОбработки.Подразделение,
		|	ЕСТЬNULL(ОчередьРасчетаПланаПроизводства.УдалитьСценарий, &ПустойСценарий) КАК Сценарий,
		|	ОбъектыДляОбработки.Назначение,
		|	ОбъектыДляОбработки.ВыпускПолуфабрикатов,
		|	ОбъектыДляОбработки.ПланПроизводстваПересчет,
		|	ЕСТЬNULL(ОчередьРасчетаПланаПроизводства.УдалитьКоличество, 0) КАК УдалитьКоличество
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПланаПроизводства
		|		ПО ОбъектыДляОбработки.ПланПроизводства = ОчередьРасчетаПланаПроизводства.ПланПроизводства
		|			И ОбъектыДляОбработки.Разделитель = ОчередьРасчетаПланаПроизводства.Разделитель
		|			И ОбъектыДляОбработки.Номенклатура = ОчередьРасчетаПланаПроизводства.Номенклатура
		|			И ОбъектыДляОбработки.Характеристика = ОчередьРасчетаПланаПроизводства.Характеристика
		|			И ОбъектыДляОбработки.Спецификация = ОчередьРасчетаПланаПроизводства.Спецификация
		|			И ОбъектыДляОбработки.ДатаВыпуска = ОчередьРасчетаПланаПроизводства.ДатаВыпуска
		|			И ОбъектыДляОбработки.Подразделение = ОчередьРасчетаПланаПроизводства.Подразделение
		|			И ОбъектыДляОбработки.Сценарий = ОчередьРасчетаПланаПроизводства.Сценарий
		|			И ОбъектыДляОбработки.Назначение = ОчередьРасчетаПланаПроизводства.Назначение
		|			И ОбъектыДляОбработки.ВыпускПолуфабрикатов = ОчередьРасчетаПланаПроизводства.ВыпускПолуфабрикатов
		|			И ОбъектыДляОбработки.ПланПроизводстваПересчет = ОчередьРасчетаПланаПроизводства.ПланПроизводстваПересчет";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", ТаблицаОбъектыДляОбработки.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустойСценарий", Справочники.СценарииТоварногоПланирования.ПустаяСсылка());
	
	Измерения = "ПланПроизводства,Разделитель,Номенклатура,Характеристика,Спецификация,ДатаВыпуска,Подразделение,Сценарий,Назначение,ВыпускПолуфабрикатов,ПланПроизводстваПересчет";
	Измерения = СтрРазделить(Измерения, ",");
	
	ДополнительныеПараметрыОтметкиОбработки = ДополнительныеПараметрыОтметкиОбработки();
	
	ТаблицаИзмерения = Новый ТаблицаЗначений;
	Для каждого Измерение Из Измерения Цикл
		ТаблицаИзмерения.Колонки.Добавить(Измерение);
	КонецЦикла;
	ТаблицаИзмерения.Добавить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра());
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("ПланПроизводства", Выборка.ПланПроизводства);
			
			Блокировка.Заблокировать();
			
			Если ЗначениеЗаполнено(Выборка.Сценарий) Тогда
				
				Набор = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
				
				Для каждого Измерение Из Измерения Цикл
					
					Если Измерение = "Сценарий" Тогда
						Продолжить;
					КонецЕсли;
					
					Набор.Отбор[Измерение].Установить(Выборка[Измерение]);
					
				КонецЦикла;
				
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				
			КонецЕсли;
				
			ЗаполнитьЗначенияСвойств(ТаблицаИзмерения[0], Выборка);
			ТаблицаИзмерения[0].Сценарий = Справочники.СценарииТоварногоПланирования.ПустаяСсылка();
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(
				ТаблицаИзмерения, ДополнительныеПараметрыОтметкиОбработки, Параметры.Очередь);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Набор = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обновить данные плана: %ПланПроизводства% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПланПроизводства%", Выборка.ПланПроизводства);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Набор.Метаданные(),
				,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
		Параметры.Очередь,
		ПолноеИмяРегистра());
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция РазделительОчереди(ПланПроизводства)
	
	Разделитель = 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПланПроизводства);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(МАКСИМУМ(ОчередьРасчетаПлановПроизводства.Разделитель), 0) КАК Разделитель
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаПланаПроизводства КАК ОчередьРасчетаПлановПроизводства
	|ГДЕ
	|	ОчередьРасчетаПлановПроизводства.ПланПроизводства = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Разделитель = ВыборкаДетальныеЗаписи.Разделитель + 1;
	КонецЕсли;
	
	Возврат Разделитель;
	
КонецФункции

Функция ДополнительныеПараметрыОтметкиОбработки()
	
	Результат = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	Результат.ЭтоНезависимыйРегистрСведений = Истина;
	Результат.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	Возврат Результат;
	
КонецФункции

Функция ПолноеИмяРегистра()
	
	Возврат "РегистрСведений.ОчередьРасчетаПланаПроизводства";
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Запись очереди расчета плана производства'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
