#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имя константы, хранящей номер задания для данного регистра.
//
// Возвращаемое значение:
//	Строка - Строковое предствление имени константы НомерЗаданияКПогашениюСтоимостиТМЦВЭксплуатации
Функция ИмяКонстантыНомераЗадания() Экспорт
	
	Возврат Метаданные.Константы.НомерЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Имя;
	
КонецФункции

// Увеличивает номер задания в константе.
// 
// Возвращаемое значение:
//  Число - Предыдущий номер задания.
//
Функция УвеличитьНомерЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	НомерДоРасчета = 0;
	Попытка
		
		НомерДоРасчета = ПолучитьНомерЗадания();
		Константы.НомерЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.Установить(НомерДоРасчета + 1);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + НСтр("ru = 'Значение константы'") + " = " + НомерДоРасчета;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗакрытиеМесяца'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,ИнформацияОбОшибке);
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НомерДоРасчета;
	
КонецФункции

// Возвращает номер задания из константы.
//
// Возвращаемое значение:
//	Число - Номер текущего задания из константы "Номер задания к закрытию месяца".
Функция ПолучитьНомерЗадания() Экспорт
	
	Возврат УниверсальныеМеханизмыПартийИСебестоимости.ПолучитьНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Блокирует регистр по указанным аналитикам.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Номер задания из константы "Номер задания к закрытию месяца".
//	Организации - Массив, СправочникСсылка.Организации - Перечень организаций к блокировке.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ИмяРегистра = "РегистрСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации";
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		КоличествоСтрок = Организации.Количество();
		Если КоличествоСтрок <> 0 Тогда
			Счетчик = 0;
			Пока Счетчик < КоличествоСтрок Цикл
				ИсточникБлокировки.Добавить();
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ИсточникБлокировки.ЗагрузитьКолонку(Организации, "Организация");
			ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
		// если массив пустой, то блокировка ставится по всем организациям.
	ИначеЕсли ТипЗнч(Организации) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Организации) Тогда
		СтрокаБлокировки = ИсточникБлокировки.Добавить();
		СтрокаБлокировки.Организация = Организации;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
КонецПроцедуры

// Считывает записи регистра во временную таблицу за указанный период по отборам.
//
// Параметры:
//	НачалоПериода - Период - Начало периода выборки данных.
//	ОкончаниеПериода - Период - Конец периода выборки данных.
//	Организации - Массив, СправочникСсылка.Организации - Фильтр по организации.
//
// Возвращаемое значение:
//	Структура:
//		* Организации - Массив - Массив организаций, который неактуальны в указанном периоде.
//		* ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит в себе временную таблицу КэшГраниц.
//
Функция ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗадания, Организации) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерПакета,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации КАК Задания
	|ГДЕ
	|	Задания.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.Организация В (&Организации) ИЛИ &ПоВсемОрганизациям)
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходныеДанные = Новый Структура();
	ИсходныеДанные.Вставить("Организация", Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	ИсходныеДанные.Вставить("ВременныеТаблицы", Запрос.МенеджерВременныхТаблиц);
	
	Возврат ИсходныеДанные;
КонецФункции

// Метод создает запись регистра с заданными параметрами.
//
// Параметры:
//  ПериодЗадания	 - Дата						 	- Начало периода, для которого необходимо зарегистрировать задание к расчету
//  ДокументЗадания	 - ДокументСсылка			 	- Документ регистратор создавший движение в зависимых регистрах
//  Организация		 - СправочникСсылка.Организации	- Организация, по которой необходим перерасчет
//  НомерПакета		 - Число					 	- Номер пакета партий ТМЦ
//  НомерЗадания	 - Число					 	- Номер задания; если не задано, то будет установлено значение из соответствующей константы
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания = Неопределено, Организация = Неопределено,
				НомерПакета = Неопределено, НомерЗадания = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументЗадания) И НЕ ЗначениеЗаполнено(Организация) Тогда
		
		// Создаем задание для каждой организации ИБ
		МассивОрганизаций = УниверсальныеМеханизмыПартийИСебестоимости.СвязиОрганизацийПоСхемеИнтеркампани();
		
	Иначе
		
		МассивОрганизаций = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			// Попытаемся определить организацию по умолчанию.
			// Если не удастся, то будет вызвано платформенное исключение при записи.
			МассивОрганизаций.Добавить(Справочники.Организации.ОрганизацияПоУмолчанию());
		Иначе
			МассивОрганизаций.Добавить(Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	// Запишем задания
	НачатьТранзакцию();
	
	Если НомерЗадания = Неопределено Тогда
		НомерЗадания = ПолучитьНомерЗадания();
	КонецЕсли;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		НаборЗаписей = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.СоздатьМенеджерЗаписи();
		НаборЗаписей.Месяц        = НачалоМесяца(ПериодЗадания);
		НаборЗаписей.НомерПакета  = НомерПакета;
		НаборЗаписей.Организация  = ТекущаяОрганизация;
		НаборЗаписей.Документ     = ДокументЗадания;
		НаборЗаписей.НомерЗадания = НомерЗадания;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПолей = Новый Структура("Месяц, Организация, НомерПакета, Документ");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			СоздатьЗаписьРегистра(СтруктураПолей.Месяц, СтруктураПолей.Документ, СтруктураПолей.Организация, СтруктураПолей.НомерПакета, НомерЗадания);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось сформировать задание к погашению стоимости ТМЦ за %1 в организации %2 по причине: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Закрытие месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Фиксирует удачный пересчет данных. Вызывается когда выполнен пересчет данных для очистки записей, указывавших на необходимость пересчета.
//
// Параметры:
//	НачалоПериода - Дата - Начало периода, за который был произведен пересчет;
//	ОкончаниеПериода - Дата - Конец периода, за который был произведен пересчет;
//	СледующийМесяц - Дата - указывает месяц на начало которого будет записана необходимость об актуализации данных расчета;
//	НомерЗаданияДоРасчета - Число - номер задания для которого производился расчет (см. ТекущийНомерЗадания()), если в процессе выполнения пересчета были опять изменены исходные данные,
//						запись об этом изменении была произведена под новым номером задания (см. УвеличитьНомерЗадания());
//	ДанныеКРаспределению - Структура - Формируется в методе ЗакрытиеМесяцаУТВызовСервера.ЗаданияКРасчетуЗаМесяц().
//
Процедура ЗафиксироватьРасчет(Организация, НачалоРасчета, ВыполненныеЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация,
	|	Задания.Период
	|ПОМЕСТИТЬ ЗаданияНаСледующийПериод
	|ИЗ
	|	&ЗаданияНаСледующийПериод КАК Задания
	|;
	|/////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерПакета,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ИЗ
	|	КэшГраниц КАК Задания
	|;
	|/////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация               КАК Организация,
	|	Задания.Период                    КАК Месяц,
	|	ВыполненныеЗадания.НомерПакета    КАК НомерПакета,
	|	&НомерЗадания                     КАК НомерЗадания
	|ИЗ
	|	ЗаданияНаСледующийПериод КАК Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ КэшГраниц КАК ВыполненныеЗадания
	|		ПО ВыполненныеЗадания.Организация = Задания.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ВыполненныеЗадания.ВременныеТаблицы;
	Запрос.УстановитьПараметр("НомерЗадания", ПолучитьНомерЗадания());
	
	ЗаданияНаСледующийПериод = ЗаданияНаСледующийПериод(Организация, КонецМесяца(НачалоРасчета) + 1);
	Запрос.УстановитьПараметр("ЗаданияНаСледующийПериод", ЗаданияНаСледующийПериод);
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Очистка записей по которым был выполнен расчет.
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.НомерПакета.Установить(Выборка.НомерПакета);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		Набор.Записать(); 
	КонецЦикла;
	
	// Добавление записей на следующий период
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает период с которого для данной операции закрытия месяца данные становятся неактуальными.
//
// Параметры:
//	КонецРасчета - Дата - Конец месяца, на который надо контролировать актуальность расчета.
//	СписокОрганизаций - Массив - Массив организаций, для которых контролируется актуальность.
//
// Возвращаемое значение:
//	Дата - Начало месяца на который неактуально закрытие месяца. Если последовательность актуальна в периоде КонецРасчета,
//			то будет возвращено начало следующего месяца за КонецРасчета.
Функция НачалоРасчета(КонецРасчета, СписокОрганизаций = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(Задания.Месяц) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецРасчета
	|	И (Задания.Организация В (&СписокОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	НЕ МИНИМУМ(Задания.Месяц) ЕСТЬ NULL";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КонецРасчета", КонецРасчета);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(СписокОрганизаций));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.НачалоРасчета, КонецМесяца(КонецРасчета) + 1);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаданияНаСледующийПериод(Организации, НачалоПериода)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартииТМЦ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПартииТМЦ
	|ИЗ
	|	Справочник.ПартииТМЦВЭксплуатации КАК ПартииТМЦ
	|ГДЕ
	|	ПартииТМЦ.СпособПогашенияСтоимостиБУ В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПоСроку), 
	|			ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПоНаработке))
	|	И (ПартииТМЦ.ДатаЗавершенияЭксплуатации >= &НачалоМесяца
	|			ИЛИ ПартииТМЦ.ДатаЗавершенияЭксплуатации = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация,
	|	&НачалоМесяца КАК Период
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТМЦВЭксплуатации.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ТМЦВЭксплуатации.Обороты(
	|				,
	|				&НачалоМесяца,
	|				,
	|				(Организация В (&Организация)
	|					ИЛИ &ПоВсемОрганизациям)
	|					И Партия В
	|						(ВЫБРАТЬ
	|							ПартииТМЦ.Ссылка
	|						ИЗ
	|							ПартииТМЦ КАК ПартииТМЦ)) КАК ТМЦВЭксплуатации
	|	ГДЕ
	|		ТМЦВЭксплуатации.КоличествоОборот > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВозвратИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПрочееОприходованиеТоваров КАК ВозвратИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров.Товары КАК ВозвратИзЭксплуатацииТовары
	|			ПО ВозвратИзЭксплуатации.Ссылка = ВозвратИзЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(ВозвратИзЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И ВозвратИзЭксплуатации.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзЭксплуатации))
	|		И ВозвратИзЭксплуатации.Проведен
	|		И НЕ ВозвратИзЭксплуатации.ПометкаУдаления
	|		И ВозвратИзЭксплуатации.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|		И НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатации.Дата, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВозвратИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПрочееОприходованиеТоваров КАК ВозвратИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров.Товары КАК ВозвратИзЭксплуатацииТовары
	|			ПО ВозвратИзЭксплуатации.Ссылка = ВозвратИзЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(ВозвратИзЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И ВозвратИзЭксплуатации.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзЭксплуатации))
	|		И ВозвратИзЭксплуатации.Проведен
	|		И НЕ ВозвратИзЭксплуатации.ПометкаУдаления
	|		И ВозвратИзЭксплуатации.Дата МЕЖДУ &НачалоПрошлогоМесяца И &НачалоМесяца
	|		И НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПеремещениеВЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПеремещениеВЭксплуатации КАК ПеремещениеВЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеВЭксплуатации.Товары КАК ПеремещениеВЭксплуатацииТовары
	|			ПО ПеремещениеВЭксплуатации.Ссылка = ПеремещениеВЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(ПеремещениеВЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И ПеремещениеВЭксплуатации.Проведен
	|		И НЕ ПеремещениеВЭксплуатации.ПометкаУдаления
	|		И ПеремещениеВЭксплуатации.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|		И НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПеремещениеВЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПеремещениеВЭксплуатации КАК ПеремещениеВЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеВЭксплуатации.Товары КАК ПеремещениеВЭксплуатацииТовары
	|			ПО ПеремещениеВЭксплуатации.Ссылка = ПеремещениеВЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(ПеремещениеВЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И ПеремещениеВЭксплуатации.Проведен
	|		И НЕ ПеремещениеВЭксплуатации.ПометкаУдаления
	|		И ПеремещениеВЭксплуатации.Дата МЕЖДУ &НачалоПрошлогоМесяца И &НачалоМесяца
	|		И НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СписаниеИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.СписаниеИзЭксплуатации КАК СписаниеИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК СписаниеИзЭксплуатацииТовары
	|			ПО СписаниеИзЭксплуатации.Ссылка = СписаниеИзЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(СписаниеИзЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И СписаниеИзЭксплуатации.Проведен
	|		И НЕ СписаниеИзЭксплуатации.ПометкаУдаления
	|		И СписаниеИзЭксплуатации.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|		И НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатации.Дата, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СписаниеИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.СписаниеИзЭксплуатации КАК СписаниеИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК СписаниеИзЭксплуатацииТовары
	|			ПО СписаниеИзЭксплуатации.Ссылка = СписаниеИзЭксплуатацииТовары.Ссылка
	|	ГДЕ
	|		(СписаниеИзЭксплуатации.Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|		И СписаниеИзЭксплуатации.Проведен
	|		И НЕ СписаниеИзЭксплуатации.ПометкаУдаления
	|		И СписаниеИзЭксплуатации.Дата МЕЖДУ &НачалоПрошлогоМесяца И &НачалоМесяца
	|		И НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)) КАК Задания";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПрошлогоМесяца", НачалоМесяца(НачалоМесяца(НачалоПериода)-1));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("Организация", Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Возврат; // Регистрация не требуется
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПогашениеСтоимостиТМЦВЭксплуатации.Дата, МЕСЯЦ, 1), МЕСЯЦ)) КАК Дата,
	|	ПогашениеСтоимостиТМЦВЭксплуатации.Организация КАК Организация
	|ПОМЕСТИТЬ РегламентныеДокументы
	|ИЗ
	|	Документ.ПогашениеСтоимостиТМЦВЭксплуатации КАК ПогашениеСтоимостиТМЦВЭксплуатации
	|ГДЕ
	|	ПогашениеСтоимостиТМЦВЭксплуатации.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеСтоимостиТМЦВЭксплуатации.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВложенныйЗапрос.Дата) КАК Дата,
	|	ВложенныйЗапрос.Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ЕСТЬNULL(РегламентныеДокументы.Дата, ТМЦВЭксплуатации.Период)) КАК Дата,
	|		ТМЦВЭксплуатации.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ТМЦВЭксплуатации КАК ТМЦВЭксплуатации
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегламентныеДокументы КАК РегламентныеДокументы
	|			ПО (РегламентныеДокументы.Организация = ТМЦВЭксплуатации.Организация)
	|	ГДЕ
	|		ТМЦВЭксплуатации.Партия.СпособПогашенияСтоимостиБУ В (ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПоСроку), ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПоНаработке))
	|		И (РегламентныеДокументы.Организация ЕСТЬ NULL
	|				ИЛИ ТМЦВЭксплуатации.Партия.ДатаЗавершенияЭксплуатации >= РегламентныеДокументы.Дата
	|				ИЛИ ТМЦВЭксплуатации.Партия.ДатаЗавершенияЭксплуатации = ДАТАВРЕМЯ(1, 1, 1))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТМЦВЭксплуатации.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МИНИМУМ(ВозвратИзЭксплуатации.Дата),
	|		ВозвратИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПрочееОприходованиеТоваров КАК ВозвратИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров.Товары КАК ВозвратИзЭксплуатацииТовары
	|			ПО ВозвратИзЭксплуатации.Ссылка = ВозвратИзЭксплуатацииТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегламентныеДокументы КАК РегламентныеДокументы
	|			ПО (РегламентныеДокументы.Организация = ВозвратИзЭксплуатации.Организация)
	|	ГДЕ
	|		(РегламентныеДокументы.Организация ЕСТЬ NULL
	|				ИЛИ ВозвратИзЭксплуатации.Дата >= РегламентныеДокументы.Дата)
	|		И ВозвратИзЭксплуатации.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзЭксплуатации))
	|		И ВозвратИзЭксплуатации.Проведен
	|		И НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатации.Дата, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВозвратИзЭксплуатации.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДОБАВИТЬКДАТЕ(ВозвратИзЭксплуатации.Дата, МЕСЯЦ, 1)),
	|		ВозвратИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПрочееОприходованиеТоваров КАК ВозвратИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров.Товары КАК ВозвратИзЭксплуатацииТовары
	|			ПО ВозвратИзЭксплуатации.Ссылка = ВозвратИзЭксплуатацииТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегламентныеДокументы КАК РегламентныеДокументы
	|			ПО (РегламентныеДокументы.Организация = ВозвратИзЭксплуатации.Организация)
	|	ГДЕ
	|		(РегламентныеДокументы.Организация ЕСТЬ NULL
	|				ИЛИ ВозвратИзЭксплуатации.Дата >= РегламентныеДокументы.Дата)
	|		И ВозвратИзЭксплуатации.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзЭксплуатации))
	|		И ВозвратИзЭксплуатации.Проведен
	|		И НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВозвратИзЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВозвратИзЭксплуатации.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МИНИМУМ(ПеремещениеВЭксплуатации.Дата),
	|		ПеремещениеВЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПеремещениеВЭксплуатации КАК ПеремещениеВЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеВЭксплуатации.Товары КАК ПеремещениеВЭксплуатацииТовары
	|			ПО ПеремещениеВЭксплуатации.Ссылка = ПеремещениеВЭксплуатацииТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегламентныеДокументы КАК РегламентныеДокументы
	|			ПО (РегламентныеДокументы.Организация = ПеремещениеВЭксплуатации.Организация)
	|	ГДЕ
	|		(РегламентныеДокументы.Организация ЕСТЬ NULL
	|				ИЛИ ПеремещениеВЭксплуатации.Дата >= РегламентныеДокументы.Дата)
	|		И ПеремещениеВЭксплуатации.Проведен
	|		И НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеВЭксплуатации.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДОБАВИТЬКДАТЕ(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ, 1)),
	|		ПеремещениеВЭксплуатации.Организация
	|	ИЗ
	|		Документ.ПеремещениеВЭксплуатации КАК ПеремещениеВЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеВЭксплуатации.Товары КАК ПеремещениеВЭксплуатацииТовары
	|			ПО ПеремещениеВЭксплуатации.Ссылка = ПеремещениеВЭксплуатацииТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегламентныеДокументы КАК РегламентныеДокументы
	|			ПО (РегламентныеДокументы.Организация = ПеремещениеВЭксплуатации.Организация)
	|	ГДЕ
	|		(РегламентныеДокументы.Организация ЕСТЬ NULL
	|				ИЛИ ПеремещениеВЭксплуатации.Дата >= РегламентныеДокументы.Дата)
	|		И ПеремещениеВЭксплуатации.Проведен
	|		И НЕ ПеремещениеВЭксплуатации.ПометкаУдаления
	|		И НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеВЭксплуатации.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МИНИМУМ(СписаниеИзЭксплуатации.Дата),
	|		СписаниеИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.СписаниеИзЭксплуатации КАК СписаниеИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК СписаниеИзЭксплуатацииТовары
	|			ПО СписаниеИзЭксплуатации.Ссылка = СписаниеИзЭксплуатацииТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегламентныеДокументы КАК РегламентныеДокументы
	|			ПО (РегламентныеДокументы.Организация = СписаниеИзЭксплуатации.Организация)
	|	ГДЕ
	|		(РегламентныеДокументы.Организация ЕСТЬ NULL
	|				ИЛИ СписаниеИзЭксплуатации.Дата >= РегламентныеДокументы.Дата)
	|		И СписаниеИзЭксплуатации.Проведен
	|		И НЕ СписаниеИзЭксплуатации.ПометкаУдаления
	|		И НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатации.Дата, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СписаниеИзЭксплуатации.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДОБАВИТЬКДАТЕ(СписаниеИзЭксплуатации.Дата, МЕСЯЦ, 1)),
	|		СписаниеИзЭксплуатации.Организация
	|	ИЗ
	|		Документ.СписаниеИзЭксплуатации КАК СписаниеИзЭксплуатации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации.Товары КАК СписаниеИзЭксплуатацииТовары
	|			ПО СписаниеИзЭксплуатации.Ссылка = СписаниеИзЭксплуатацииТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегламентныеДокументы КАК РегламентныеДокументы
	|			ПО (РегламентныеДокументы.Организация = СписаниеИзЭксплуатации.Организация)
	|	ГДЕ
	|		(РегламентныеДокументы.Организация ЕСТЬ NULL
	|				ИЛИ СписаниеИзЭксплуатации.Дата >= РегламентныеДокументы.Дата)
	|		И СписаниеИзЭксплуатации.Проведен
	|		И НЕ СписаниеИзЭксплуатации.ПометкаУдаления
	|		И НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатацииТовары.ПартияТМЦВЭксплуатации.Дата, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СписаниеИзЭксплуатации.Организация) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Месяц = Выборка.Дата;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.НомерЗадания = ПолучитьНомерЗадания();
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать задание к погашению стоимости ТМЦ по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации,
									,
									ТекстСообщения);
									
			Параметры.ОбработкаЗавершена = Ложь;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
