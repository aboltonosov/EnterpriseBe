#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имя константы, хранящей номер задания для данного регистра.
//
// Возвращаемое значение:
//	Строка - Строковое предствление имени константы НомерЗаданияКЗакрытиюМесяца
Функция ИмяКонстантыНомераЗадания() Экспорт
	
	Возврат Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	
КонецФункции

// Увеличивает номер задания в константе.
//
//
// Возвращаемое значение:
//	Число - Предыдущий номер задания из константы "Номер задания к закрытию месяца".
Функция УвеличитьНомерЗадания() Экспорт
	
	Возврат УниверсальныеМеханизмыПартийИСебестоимости.УвеличитьНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Возвращает номер задания из константы.
//
// Возвращаемое значение:
//	Число - Номер текущего задания из константы "Номер задания к закрытию месяца".
Функция ПолучитьНомерЗадания() Экспорт
	
	Возврат УниверсальныеМеханизмыПартийИСебестоимости.ПолучитьНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Метод создает запись регистра с заданными параметрами.
//
// Параметры:
//	ПериодЗадания   - Дата - Начало периода, для которого необходимо зарегистрировать задание к расчету
//	ДокументЗадания - ДокументСсылка - документ регистратор создавший движение в зависимых регистрах
//	Организация - СправочникСсылка.Организации - организация, по которой необходим перерасчет
//  Операция - Перечисление.ОперацииЗакрытияМесяца - регламентная операция 
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания = Неопределено, Организация = Неопределено,
				Операция = Неопределено, НомерЗадания = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументЗадания) И НЕ ЗначениеЗаполнено(Организация) Тогда
		
		// Создаем задание для каждой организации ИБ
		МассивОрганизаций = УниверсальныеМеханизмыПартийИСебестоимости.СвязиОрганизацийПоСхемеИнтеркампани();
		
	Иначе
		
		МассивОрганизаций = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			// Попытаемся определить организацию по умолчанию.
			// Если не удастся, то будет вызвано платформенное исключение при записи.
			МассивОрганизаций.Добавить(Справочники.Организации.ОрганизацияПоУмолчанию());
		Иначе
			МассивОрганизаций.Добавить(Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивОпераций = Новый Массив;
	
	Если Операция = Неопределено Тогда
		// Создадим задание для каждой возможной операции
		Для ИндексОперации = 0 По Перечисления.ОперацииЗакрытияМесяца.Количество() - 1 Цикл
			МассивОпераций.Добавить(Перечисления.ОперацииЗакрытияМесяца.Получить(ИндексОперации));
		КонецЦикла;
	Иначе
		МассивОпераций.Добавить(Операция);
	КонецЕсли;
	
	// Запишем задания
	НачатьТранзакцию();
	
	Если НомерЗадания = Неопределено Тогда
		НомерЗадания = ПолучитьНомерЗадания();
	КонецЕсли;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		Для Каждого ТекущаяОперация Из МассивОпераций Цикл
			
			Месяц = НачалоМесяца(ПериодЗадания);
			
			//++ НЕ УТ
			Если ТекущаяОперация = Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество 
					И НЕ РасчетИмущественныхНалогов.УплачиваютсяАвансыПоНалогуНаИмущество(ТекущаяОрганизация, Месяц)
				
				ИЛИ ТекущаяОперация = Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога 
					И НЕ РасчетИмущественныхНалогов.УплачиваютсяАвансыПоЗемельномуНалогу(ТекущаяОрганизация, Месяц)
					
				ИЛИ ТекущаяОперация = Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога 
					И НЕ РасчетИмущественныхНалогов.УплачиваютсяАвансыПоТранспортномуНалогу(ТекущаяОрганизация, Месяц) Тогда
				
				Месяц = НачалоМесяца(КонецГода(ПериодЗадания));
			КонецЕсли;
			//-- НЕ УТ
			
			НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
			НаборЗаписей.Месяц        = Месяц;
			НаборЗаписей.Операция     = ТекущаяОперация;
			НаборЗаписей.Организация  = ТекущаяОрганизация;
			НаборЗаписей.Документ     = ДокументЗадания;
			НаборЗаписей.НомерЗадания = НомерЗадания;
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПолей = Новый Структура("Месяц, Организация, Операция, Документ");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			СоздатьЗаписьРегистра(СтруктураПолей.Месяц, СтруктураПолей.Документ, СтруктураПолей.Организация, СтруктураПолей.Операция, НомерЗадания);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сформировать задание к закрытию месяца за %1 в организации %2 по причине: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Закрытие месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьЗаданияНаСледующийПериод(ДанныеКРасчетуЗаМесяц, СледующийМесяц) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задания.Операция,
	|	Задания.Организация,
	|	МАКСИМУМ(Задания.НомерЗадания) КАК НомерЗадания
	|ИЗ
	|	КэшГраниц КАК Задания
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Операция,
	|	Задания.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеКРасчетуЗаМесяц.ВременныеТаблицы;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СледующийПериод = СледующийМесяц;
		
		//++ НЕ УТ
		
		Если Выборка.Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество Тогда
			
			СледующийПериод = РегистрыСведений.ЗаданияКЗакрытиюМесяца.ПериодРасчетаНалогаНаИмущество(Выборка.Организация, СледующийМесяц);
			
		ИначеЕсли Выборка.Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога Тогда
			
			СледующийПериод = РегистрыСведений.ЗаданияКЗакрытиюМесяца.ПериодРасчетаЗемельногоНалога(Выборка.Организация, СледующийМесяц);
			
		ИначеЕсли Выборка.Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога Тогда
			
			СледующийПериод = РегистрыСведений.ЗаданияКЗакрытиюМесяца.ПериодРасчетаТранспортногоНалога(Выборка.Организация, СледующийМесяц);
			
		ИначеЕсли Выборка.Операция = Перечисления.ОперацииЗакрытияМесяца.ПризнаниеВНУЛизинговыхПлатежей Тогда
			
			СледующийПериод = УчетОСВызовСервера.СледующийПериодПризнанияВНУЛизинговыхПлатежей(Выборка.Организация, СледующийМесяц);
			
		КонецЕсли;
		
		//-- НЕ УТ
		
		Если ЗначениеЗаполнено(СледующийПериод) Тогда
			НоваяЗапись = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Месяц = СледующийПериод;
			НоваяЗапись.Записать(Истина);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры
 
//++ НЕ УТ

// Определяет период расчета налога на имущество начиная с указанной даты.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - Организация для которой требуется определить необходимость расчета налога на имущество.
//  НачалоПериода	 - Дата - Период начиная с которого нужно проверить необходимость расчета.
// 
// Возвращаемое значение:
//  Дата, неопределено - Дата расчета налога на имущество .
//
Функция ПериодРасчетаНалогаНаИмущество(Организация, НачалоПериода) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СпрУчетнаяПолитика.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОСНО
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|			&КонецКвартала,
	|			Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|		ПО Т.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
	|			И (СпрУчетнаяПолитика.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|				ИЛИ &КонецКвартала >= ДАТАВРЕМЯ(2015, 1, 1))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Организация КАК Организация
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПринятыеКУчету.Организация КАК Организация
	|	ИЗ
	|		РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|				&КонецКвартала,
	|				Организация В
	|					(ВЫБРАТЬ
	|						Организации.Ссылка
	|					ИЗ
	|						Организации
	|					ГДЕ
	|						Организации.ОСНО)) КАК ПринятыеКУчету
	|	ГДЕ
	|		ПринятыеКУчету.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СтавкиНалога.Организация
	|	ИЗ
	|		РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(
	|				&КонецКвартала,
	|				Организация В
	|					(ВЫБРАТЬ
	|						Организации.Ссылка
	|					ИЗ
	|						Организации)) КАК СтавкиНалога
	|	ГДЕ
	|		СтавкиНалога.НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)) КАК Организации";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КонецКвартала", КонецКвартала(НачалоПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организация));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		УплачиваютсяАвансы = РасчетИмущественныхНалогов.УплачиваютсяАвансыПоНалогуНаИмущество(
								Выборка.Организация, НачалоПериода);
		
		Если УплачиваютсяАвансы Тогда
			Возврат НачалоМесяца(КонецКвартала(НачалоПериода));
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат НачалоМесяца(КонецГода(НачалоПериода));

КонецФункции

Функция ПериодРасчетаЗемельногоНалога(Организация, НачалоПериода) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистрация.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(
	|			&КонецКвартала,
	|			(Организация В (&Организация)
	|				ИЛИ &ПоВсемОрганизациям)
	|				И ВключатьВНалоговуюБазу) КАК Регистрация";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КонецКвартала", КонецКвартала(НачалоПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организация));

	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		УплачиваютсяАвансы = РасчетИмущественныхНалогов.УплачиваютсяАвансыПоЗемельномуНалогу(
								Выборка.Организация, НачалоПериода);
		
		Если УплачиваютсяАвансы Тогда
			Возврат НачалоМесяца(КонецКвартала(НачалоПериода));
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат НачалоМесяца(КонецГода(НачалоПериода));
	
КонецФункции

Функция ПериодРасчетаТранспортногоНалога(Организация, НачалоПериода) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.Ссылка В (&Организация)
	|			ИЛИ &ПоВсемОрганизациям)
	|	И Организации.ЮридическоеФизическоеЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистрация.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(
	|			&КонецКвартала,
	|			Организация В
	|					(ВЫБРАТЬ
	|						Организации.Ссылка
	|					ИЗ
	|						Организации)
	|				И ВключатьВНалоговуюБазу) КАК Регистрация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КонецКвартала", КонецКвартала(НачалоПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организация));

	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		УплачиваютсяАвансы = РасчетИмущественныхНалогов.УплачиваютсяАвансыПоТранспортномуНалогу(
								Выборка.Организация, НачалоПериода);
		
		Если УплачиваютсяАвансы Тогда
			Возврат НачалоМесяца(КонецКвартала(НачалоПериода));
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат НачалоМесяца(КонецГода(НачалоПериода));

КонецФункции
 
//-- НЕ УТ

#КонецОбласти

//++ НЕ УТ

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Возврат; // Регистрация не требуется
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ЕстьОшибки = Ложь;
	
	#Область АмортизацияОС
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(АмортизацияОС.Дата, МЕСЯЦ, 1), МЕСЯЦ)) КАК Дата,
	|	АмортизацияОС.Организация
	|ИЗ
	|	Документ.АмортизацияОС КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	АмортизацияОС.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ УчетОСВызовСервера.ТребуетсяАмортизацияОС(Выборка.Организация, Выборка.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Операция.Установить(Перечисления.ОперацииЗакрытияМесяца.АмортизацияОС);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Месяц = Выборка.Дата;
			НоваяЗапись.Операция = Перечисления.ОперацииЗакрытияМесяца.АмортизацияОС;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.НомерЗадания = ПолучитьНомерЗадания();
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать задание к расчету амортизации ОС по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца,
									,
									ТекстСообщения);
			
			ЕстьОшибки = Истина;
			
		КонецПопытки;
			
	КонецЦикла;
	
	#КонецОбласти
	
	#Область АмортизацияНМА
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(АмортизацияНМА.Дата, МЕСЯЦ, 1), МЕСЯЦ)) КАК Дата,
	|	АмортизацияНМА.Организация
	|ИЗ
	|	Документ.АмортизацияНМА КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	АмортизацияНМА.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ УчетОСВызовСервера.ТребуетсяАмортизацияНМА(Выборка.Организация, Выборка.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Операция.Установить(Перечисления.ОперацииЗакрытияМесяца.АмортизацияНМА);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Месяц = Выборка.Дата;
			НоваяЗапись.Операция = Перечисления.ОперацииЗакрытияМесяца.АмортизацияНМА;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.НомерЗадания = ПолучитьНомерЗадания();
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать задание к закрытию месяца по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца,
									,
									ТекстСообщения);
			
			ЕстьОшибки = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
	#КонецОбласти

	#Область РасчетНалогаНаИмущество
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ)) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ РегламентныеДокументы
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Проведен
	|	И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетНалогаНаИмущество)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегламентнаяОперация.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|		ПО УчетнаяПолитикаОрганизаций.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
	|			И (СпрУчетнаяПолитика.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегламентныеДокументы КАК РегламентныеДокументы
	|		ПО (РегламентныеДокументы.Организация = УчетнаяПолитикаОрганизаций.Организация)
	|ГДЕ
	|	РегламентныеДокументы.Организация ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ПринятиеКУчетуОС.Дата) КАК Дата,
	|	ПринятиеКУчетуОС.Организация КАК Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегламентныеДокументы.Дата КАК Дата,
	|		РегламентныеДокументы.Организация КАК Организация
	|	ИЗ
	|		РегламентныеДокументы КАК РегламентныеДокументы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДОБАВИТЬКДАТЕ(ПринятиеКУчетуОС.Дата, МЕСЯЦ, 1),
	|		ПринятиеКУчетуОС.Организация
	|	ИЗ
	|		Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|	ГДЕ
	|		ПринятиеКУчетуОС.Проведен
	|		И НЕ ПринятиеКУчетуОС.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования))
	|		И ПринятиеКУчетуОС.Организация В
	|				(ВЫБРАТЬ
	|					Т.Организация
	|				ИЗ
	|					Организации КАК Т)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДОБАВИТЬКДАТЕ(ПринятиеКУчетуОС.Дата, МЕСЯЦ, 1),
	|		ПринятиеКУчетуОС.Организация
	|	ИЗ
	|		Документ.ВводОстатковВнеоборотныхАктивов КАК ПринятиеКУчетуОС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов.ОС КАК ТаблицаОС
	|			ПО (ТаблицаОС.Ссылка = ПринятиеКУчетуОС.Ссылка)
	|	ГДЕ
	|		ПринятиеКУчетуОС.Проведен
	|		И ПринятиеКУчетуОС.ТипОперации В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиОС),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПереданныхВАрендуОС),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПереданныхВАрендуПредметовЛизингаНаБалансе),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПредметовЛизингаНаБалансе))
	|
	|		И НЕ ТаблицаОС.ГруппаОС В (
	|				ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), 
	|				ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования))
	|
	|		И ПринятиеКУчетуОС.Организация В
	|				(ВЫБРАТЬ
	|					Т.Организация
	|				ИЗ
	|					Организации КАК Т)) КАК ПринятиеКУчетуОС
	|
	|СГРУППИРОВАТЬ ПО
	|	ПринятиеКУчетуОС.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Период = НачалоМесяца(КонецКвартала(КонецКвартала(Выборка.Дата)+1)); // Конец следующего квартала
		
		ПериодРасчета = ПериодРасчетаНалогаНаИмущество(Выборка.Организация, Период);
		Если ПериодРасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Операция.Установить(Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Месяц = ПериодРасчета;
			НоваяЗапись.Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетНалогаНаИмущество;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.НомерЗадания = ПолучитьНомерЗадания();
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать задание к расчету имущественного налога по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца,
									,
									ТекстСообщения);
			
			ЕстьОшибки = Истина;
			
		КонецПопытки;
			
	КонецЦикла;
	
	#КонецОбласти
	
	#Область РасчетЗемельногоНалога

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ)) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ РегламентныеДокументы
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Проведен
	|	И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетЗемельногоНалога)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегламентнаяОперация.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Организации.Дата) КАК Дата,
	|	Организации.Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегламентныеДокументы.Дата КАК Дата,
	|		РегламентныеДокументы.Организация КАК Организация
	|	ИЗ
	|		РегламентныеДокументы КАК РегламентныеДокументы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РегистрацияЗемельныхУчастков.Период,
	|		РегистрацияЗемельныхУчастков.Организация
	|	ИЗ
	|		РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
	|	ГДЕ
	|		РегистрацияЗемельныхУчастков.Активность
	|		И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
	|		И НЕ РегистрацияЗемельныхУчастков.Организация В
	|					(ВЫБРАТЬ
	|						РегламентныеДокументы.Организация
	|					ИЗ
	|						РегламентныеДокументы)) КАК Организации
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Период = НачалоМесяца(КонецКвартала(КонецКвартала(Выборка.Дата)+1)); // Конец следующего квартала
		
		ПериодРасчета = ПериодРасчетаЗемельногоНалога(Выборка.Организация, Период);
		Если ПериодРасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Операция.Установить(Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Месяц = ПериодРасчета;
			НоваяЗапись.Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетЗемельногоНалога;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.НомерЗадания = ПолучитьНомерЗадания();
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать задание к расчету замельного налога по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца,
									,
									ТекстСообщения);
			
			ЕстьОшибки = Истина;
			
		КонецПопытки;
		
	КонецЦикла; 
	
	#КонецОбласти
	
	#Область РасчетТранспортногоНалога

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ)) КАК Дата,
	|	РегламентнаяОперация.Организация КАК Организация
	|ПОМЕСТИТЬ РегламентныеДокументы
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Проведен
	|	И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетТранспортногоНалога)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегламентнаяОперация.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Организации.Дата) КАК Дата,
	|	Организации.Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегламентныеДокументы.Дата КАК Дата,
	|		РегламентныеДокументы.Организация КАК Организация
	|	ИЗ
	|		РегламентныеДокументы КАК РегламентныеДокументы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РегистрацияТранспортныхСредств.Период,
	|		РегистрацияТранспортныхСредств.Организация
	|	ИЗ
	|		РегистрСведений.РегистрацияТранспортныхСредств КАК РегистрацияТранспортныхСредств
	|	ГДЕ
	|		РегистрацияТранспортныхСредств.Активность
	|		И НЕ РегистрацияТранспортныхСредств.Организация В
	|					(ВЫБРАТЬ
	|						РегламентныеДокументы.Организация
	|					ИЗ
	|						РегламентныеДокументы)) КАК Организации
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Период = НачалоМесяца(КонецКвартала(КонецКвартала(Выборка.Дата)+1)); // Конец следующего квартала
		
		ПериодРасчета = ПериодРасчетаТранспортногоНалога(Выборка.Организация, Период);
		Если ПериодРасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Операция.Установить(Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Месяц = ПериодРасчета;
			НоваяЗапись.Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетТранспортногоНалога;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.НомерЗадания = ПолучитьНомерЗадания();
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать задание к расчетв транспортного налога по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца,
									,
									ТекстСообщения);
			
		КонецПопытки;
			
		
	КонецЦикла;
	
	#КонецОбласти
	
	Параметры.ОбработкаЗавершена = НЕ ЕстьОшибки;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТ

#КонецЕсли
