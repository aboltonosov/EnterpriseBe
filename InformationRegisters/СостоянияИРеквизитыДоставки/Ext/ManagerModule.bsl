#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

#Область Обработчики_2_2_2

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт 
	
	ПолноеИмяОбъекта = Метаданные.РегистрыСведений.СостоянияИРеквизитыДоставки.ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияИРеквизитыДоставки.Распоряжение КАК Распоряжение,
	|	СостоянияИРеквизитыДоставки.Склад КАК Склад,
	|	СостоянияИРеквизитыДоставки.ПолучательОтправитель КАК ПолучательОтправитель,
	|	СостоянияИРеквизитыДоставки.Перевозчик КАК Перевозчик,
	|	СостоянияИРеквизитыДоставки.СпособДоставки КАК СпособДоставки,
	|	СостоянияИРеквизитыДоставки.Зона КАК Зона
	|ИЗ
	|	РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
	|ГДЕ
	|	СостоянияИРеквизитыДоставки.УдалитьРазбиватьРасходныеОрдераПоРаспоряжениям
	|	И НЕ СостоянияИРеквизитыДоставки.РазбиватьРасходныеОрдераПоРаспоряжениям";		
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяОбъекта);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = Метаданные.РегистрыСведений.СостоянияИРеквизитыДоставки.ПолноеИмя();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", 			Выборка.Распоряжение);
			ЭлементБлокировки.УстановитьЗначение("Склад", 					Выборка.Склад);
			ЭлементБлокировки.УстановитьЗначение("ПолучательОтправитель", 	Выборка.ПолучательОтправитель);
			ЭлементБлокировки.УстановитьЗначение("Перевозчик", 				Выборка.Перевозчик);
			ЭлементБлокировки.УстановитьЗначение("СпособДоставки", 			Выборка.СпособДоставки);
			ЭлементБлокировки.УстановитьЗначение("Зона", 					Выборка.Зона);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.СостоянияИРеквизитыДоставки.СоздатьНаборЗаписей();
			Набор.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
			Набор.Отбор.Склад.Установить(Выборка.Склад);
			Набор.Отбор.ПолучательОтправитель.Установить(Выборка.ПолучательОтправитель);
			Набор.Отбор.Перевозчик.Установить(Выборка.Перевозчик);
			Набор.Отбор.СпособДоставки.Установить(Выборка.СпособДоставки);
			Набор.Отбор.Зона.Установить(Выборка.Зона);
			Набор.Прочитать();
			Если Набор.Количество() = 0 
				Или Набор[0].РазбиватьРасходныеОрдераПоРаспоряжениям 
				Или Не Набор[0].УдалитьРазбиватьРасходныеОрдераПоРаспоряжениям Тогда
				ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
				ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
				ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяОбъекта;
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор, ДополнительныеПараметры, Параметры.Очередь);
			Иначе
				Набор[0].РазбиватьРасходныеОрдераПоРаспоряжениям = Набор[0].УдалитьРазбиватьРасходныеОрдераПоРаспоряжениям;
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
				
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось перезаписать движения в регистр %ИмяРегистра% по группе измерений ""%ГруппаИзмерений%"" по причине: %Причина%'");
			ГруппаИзмерений = Новый Массив;
			ГруппаИзмерений.Добавить(НСтр("ru = 'Распоряжение:'") 			+ Символы.НПП + Выборка.Распоряжение);
			ГруппаИзмерений.Добавить(НСтр("ru = 'Склад:'") 					+ Символы.НПП + Выборка.Склад);
			ГруппаИзмерений.Добавить(НСтр("ru = 'ПолучательОтправитель:'") 	+ Символы.НПП + Выборка.ПолучательОтправитель);
			ГруппаИзмерений.Добавить(НСтр("ru = 'Перевозчик:'") 			+ Символы.НПП + Выборка.Перевозчик);
			ГруппаИзмерений.Добавить(НСтр("ru = 'СпособДоставки:'") 		+ Символы.НПП + Выборка.СпособДоставки);
			ГруппаИзмерений.Добавить(НСтр("ru = 'Зона:'") 					+ Символы.НПП + Выборка.Зона);
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ГруппаИзмерений%", СтрСоединить(ГруппаИзмерений, "; "));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.РегистрыСведений.СостоянияИРеквизитыДоставки,
									Выборка.Распоряжение,
									ТекстСообщения);
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли