#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подставляет в текст запроса соединения необходимые для получения настройки поддержания запасов
//
// Параметры:
//  ТекстЗапроса	 - Строка - текст запроса, в который нужно подставить соединение
//  ИмяПараметра	 - Строка - имя параметра на место которого будет подставлено соединение
//  ПоляСоединения	 - Строка - поля соединения в формате [ВедущаяТаблица].Номенклатура,[ВедущаяТаблица].Характеристика,[ВедущаяТаблица].Склад
//  ПсевдонимТаблицы - Строка - Псведоним таблицы, используемой в запросе в качестве источника данных для получения товарных ограничений
// 
// Возвращаемое значение:
//  Строка - новый тест запроса
//
Функция ПодставитьСоединение(ТекстЗапроса, ИмяПараметра, ПоляСоединения = Неопределено, ПсевдонимТаблицы = "ТоварныеОграничения") Экспорт
	
	РезультатПодстановки = ТекстЗапроса;
	Пока Истина Цикл
		
		НачалоПараметра = СтрНайти(РезультатПодстановки, ИмяПараметра, НаправлениеПоиска.СНачала);
		
		Если НачалоПараметра = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Замена ресурсов, измерений и реквизитов.
		Поля = Метаданные.РегистрыСведений.ТоварныеОграничения.Измерения;
		ПодставитьВыраженияПолейВыборки(РезультатПодстановки, Поля, ПсевдонимТаблицы);
		Поля = Метаданные.РегистрыСведений.ТоварныеОграничения.Ресурсы;
		ПодставитьВыраженияПолейВыборки(РезультатПодстановки, Поля, ПсевдонимТаблицы);
		Поля = Метаданные.РегистрыСведений.ТоварныеОграничения.Реквизиты;
		ПодставитьВыраженияПолейВыборки(РезультатПодстановки, Поля, ПсевдонимТаблицы);
		
		// Замена соединения.
		НачалоПараметра = СтрНайти(РезультатПодстановки, ИмяПараметра, НаправлениеПоиска.СНачала);
		
		ПоследнийСимвол = НачалоПараметра + СтрДлина(ИмяПараметра);
		НачалоСинонима = СтрНайти(РезультатПодстановки, "КАК", НаправлениеПоиска.СКонца, НачалоПараметра) + СтрДлина("КАК");
		ПревыйСимвол = СтрНайти(РезультатПодстановки, "СОЕДИНЕНИЕ", НаправлениеПоиска.СКонца, НачалоСинонима) + СтрДлина("СОЕДИНЕНИЕ");
		
		ПодстрокаПоиска = Сред(РезультатПодстановки, ПревыйСимвол, ПоследнийСимвол - ПревыйСимвол);
		ПодстрокаЗамены =
			" РегистрСведений.ТоварныеОграничения КАК НастройкаДетальная
			|		ПО НастройкаДетальная.Номенклатура   = Т.Номенклатура
			|		 И НастройкаДетальная.Характеристика = Т.Характеристика
			|		 И НастройкаДетальная.Склад          = Т.Склад
			|		 И НастройкаДетальная.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
			|		 И НастройкаДетальная.ЭтоДействующийПараметр
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ПринадлежностьГруппе
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|		 И ПринадлежностьГруппе.Номенклатура   = Т.Номенклатура
			|		 И ПринадлежностьГруппе.Характеристика = Т.Характеристика
			|		 И ПринадлежностьГруппе.Склад          = Т.Склад
			|		 И ПринадлежностьГруппе.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
			|		 И ПринадлежностьГруппе.ЭтоДействующийПараметр
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаГруппировки
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|		 И НастройкаГруппировки.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|		 И НастройкаГруппировки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаГруппировки.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|		 И НастройкаГруппировки.Группировка    = ПринадлежностьГруппе.Группировка
			|		 И НастройкаГруппировки.ЭтоДействующийПараметр
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаОбщая
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|		 И ПринадлежностьГруппе.Склад ЕСТЬ NULL
			|		 И Т.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаОбщая.Номенклатура   = Т.Номенклатура
			|		 И НастройкаОбщая.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаОбщая.Склад          = Т.Склад
			|		 И НастройкаОбщая.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
			|		 И НастройкаОбщая.ЭтоДействующийПараметр
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ПринадлежностьГруппеОбщейНастройки
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|		 И ПринадлежностьГруппе.Склад ЕСТЬ NULL
			|		 И НастройкаОбщая.Склад ЕСТЬ NULL
			|		 И Т.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И ПринадлежностьГруппеОбщейНастройки.Номенклатура   = Т.Номенклатура
			|		 И ПринадлежностьГруппеОбщейНастройки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И ПринадлежностьГруппеОбщейНастройки.Склад          = Т.Склад
			|		 И ПринадлежностьГруппеОбщейНастройки.Группировка    <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
			|		 И ПринадлежностьГруппеОбщейНастройки.ЭтоДействующийПараметр
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаГруппировкиОбщейНастройки
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|		 И ПринадлежностьГруппе.Склад ЕСТЬ NULL
			|		 И НастройкаОбщая.Склад ЕСТЬ NULL
			|		 И Т.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаГруппировкиОбщейНастройки.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|		 И НастройкаГруппировкиОбщейНастройки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И НастройкаГруппировкиОбщейНастройки.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|		 И НастройкаГруппировкиОбщейНастройки.Группировка    = ПринадлежностьГруппеОбщейНастройки.Группировка
			|		 И НастройкаГруппировкиОбщейНастройки.ЭтоДействующийПараметр";
			
		Если ПоляСоединения <> Неопределено Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляСоединения);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Номенклатура",   МассивПодстрок[0]);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Характеристика", МассивПодстрок[1]);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Склад",          МассивПодстрок[2]);
		КонецЕсли;
		
		РезультатПодстановки = СтрЗаменить(РезультатПодстановки, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
	
	Возврат РезультатПодстановки;
	
КонецФункции

// Подставляет в текст запроса соединения необходимые для получения упаковки заказа
//
// Параметры:
//  ТекстЗапроса	 - Строка - текст запроса, в который нужно подставить соединение
//  ИмяПараметра	 - Строка - имя параметра на место которого будет подставлено соединение
//  ПоляСоединения	 - Строка - поля соединения в формате [ВедущаяТаблица].Номенклатура,[ВедущаяТаблица].Характеристика,[ВедущаяТаблица].Склад
//  ПсевдонимТаблицы - Строка - Псведоним таблицы, используемой в запросе в качестве источника данных для получения товарных ограничений
// 
// Возвращаемое значение:
//  Строка - новый тест запроса
//
Функция ПодставитьСоединениеДляУпаковкиЗаказа(ТекстЗапроса, ИмяПараметра, ПоляСоединения = Неопределено, ПсевдонимТаблицы = "УпаковкиЗаказа") Экспорт
	
	РезультатПодстановки = ТекстЗапроса;
	Пока Истина Цикл
		
		НачалоПараметра = СтрНайти(РезультатПодстановки, ИмяПараметра, НаправлениеПоиска.СНачала);
		
		Если НачалоПараметра = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Замена ресурса.
		ПодстрокаПоиска = ПсевдонимТаблицы + ".УпаковкаЗаказа";
		ПодстрокаЗамены = "ЕСТЬNULL(УпаковкиЗаказаДетальные.УпаковкаЗаказа, УпаковкиЗаказаОбщие.УпаковкаЗаказа)";
		РезультатПодстановки = СтрЗаменить(РезультатПодстановки, ПодстрокаПоиска, ПодстрокаЗамены);
		
		// Замена соединения.
		НачалоПараметра = СтрНайти(РезультатПодстановки, ИмяПараметра, НаправлениеПоиска.СНачала);
		
		ПоследнийСимвол = НачалоПараметра + СтрДлина(ИмяПараметра);
		НачалоСинонима = СтрНайти(РезультатПодстановки, "КАК", НаправлениеПоиска.СКонца, НачалоПараметра) + СтрДлина("КАК");
		ПревыйСимвол = СтрНайти(РезультатПодстановки, "СОЕДИНЕНИЕ", НаправлениеПоиска.СКонца, НачалоСинонима) + СтрДлина("СОЕДИНЕНИЕ");
		
		ПодстрокаПоиска = Сред(РезультатПодстановки, ПревыйСимвол, ПоследнийСимвол - ПревыйСимвол);
		ПодстрокаЗамены =
			" РегистрСведений.ТоварныеОграничения КАК УпаковкиЗаказаДетальные
			|		ПО УпаковкиЗаказаДетальные.Номенклатура   = Т.Номенклатура
			|		 И УпаковкиЗаказаДетальные.Характеристика = Т.Характеристика
			|		 И УпаковкиЗаказаДетальные.Склад          = Т.Склад
			|		 И УпаковкиЗаказаДетальные.УпаковкаЗаказа <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК УпаковкиЗаказаОбщие
			|		ПО УпаковкиЗаказаДетальные.Склад ЕСТЬ NULL
			|		 И Т.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И УпаковкиЗаказаОбщие.Номенклатура   = Т.Номенклатура
			|		 И УпаковкиЗаказаОбщие.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		 И УпаковкиЗаказаОбщие.Склад          = Т.Склад";
			
		Если ПоляСоединения <> Неопределено Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляСоединения);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Номенклатура",   МассивПодстрок[0]);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Характеристика", МассивПодстрок[1]);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Склад",          МассивПодстрок[2]);
		КонецЕсли;
		
		РезультатПодстановки = СтрЗаменить(РезультатПодстановки, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
	
	Возврат РезультатПодстановки;
	
КонецФункции

//++ НЕ УТ

// Подставляет в текст запроса соединения необходимые для получения настройки поддержания запасов в цеховых кладовых
//
// Параметры:
//  ТекстЗапроса	 - Строка - текст запроса, в который нужно подставить соединение
//  ИмяПараметра	 - Строка - имя параметра на место которого будет подставлено соединение
//  ПоляСоединения	 - Строка - поля соединения в формате [ВедущаяТаблица].Номенклатура,[ВедущаяТаблица].Характеристика,[ВедущаяТаблица].Подразделение
// 
// Возвращаемое значение:
//  Строка - новый тест запроса
//
Функция ПодставитьСоединениеПоддержанияЗапасовВКладовых(ТекстЗапроса, ИмяПараметра, ПоляСоединения = Неопределено) Экспорт
	
	РезультатПодстановки = ТекстЗапроса;
	Пока Истина Цикл
		
		НачалоПараметра = СтрНайти(РезультатПодстановки, ИмяПараметра, НаправлениеПоиска.СНачала);
		
		Если НачалоПараметра = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПоследнийСимвол = НачалоПараметра + СтрДлина(ИмяПараметра);
		НачалоСинонима = СтрНайти(РезультатПодстановки, "КАК", НаправлениеПоиска.СКонца, НачалоПараметра) + СтрДлина("КАК");
		Синоним = СокрЛП(СтрЗаменить(Сред(РезультатПодстановки, НачалоСинонима, НачалоПараметра - НачалоСинонима - 1), "ПО", ""));
		ПревыйСимвол = СтрНайти(РезультатПодстановки, "СОЕДИНЕНИЕ", НаправлениеПоиска.СКонца, НачалоСинонима) + СтрДлина("СОЕДИНЕНИЕ");
		
		ПодстрокаПоиска = Сред(РезультатПодстановки, ПревыйСимвол, ПоследнийСимвол - ПревыйСимвол);
		ПодстрокаЗамены =
			" РегистрСведений.ТоварныеОграничения КАК НастройкаДетальная
			|		ПО НастройкаДетальная.Номенклатура     = Т.Номенклатура
			|			И НастройкаДетальная.Характеристика = Т.Характеристика
			|			И НастройкаДетальная.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
			|			И НастройкаДетальная.Склад.ЦеховаяКладовая
			|			И НастройкаДетальная.Склад.Подразделение = Т.Подразделение
			|			И НастройкаДетальная.РеквизитДопУпорядочивания = 1
			|			И НастройкаДетальная.ЭтоДействующийПараметр
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ПринадлежностьГруппе
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|			И ПринадлежностьГруппе.Номенклатура   = Т.Номенклатура
			|			И ПринадлежностьГруппе.Характеристика = Т.Характеристика
			|			И ПринадлежностьГруппе.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
			|			И ПринадлежностьГруппе.Склад.ЦеховаяКладовая
			|			И ПринадлежностьГруппе.Склад.Подразделение = Т.Подразделение
			|			И ПринадлежностьГруппе.РеквизитДопУпорядочивания = 1
			|			И ПринадлежностьГруппе.ЭтоДействующийПараметр
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаГруппировки
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|			И НастройкаГруппировки.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			И НастройкаГруппировки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			И НастройкаГруппировки.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			И НастройкаГруппировки.Группировка    = ПринадлежностьГруппе.Группировка
			|			И НастройкаГруппировки.ЭтоДействующийПараметр
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаОбщая
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|			И ПринадлежностьГруппе.Склад ЕСТЬ NULL
			|			И Т.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			И НастройкаОбщая.Номенклатура   = Т.Номенклатура
			|			И НастройкаОбщая.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			И НастройкаОбщая.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка) 
			|			И НастройкаОбщая.Склад.ЦеховаяКладовая
			|			И НастройкаОбщая.Склад.Подразделение = Т.Подразделение
			|			И НастройкаОбщая.РеквизитДопУпорядочивания = 1
			|			И НастройкаОбщая.ЭтоДействующийПараметр
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ПринадлежностьГруппеОбщейНастройки
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|			И ПринадлежностьГруппе.Склад ЕСТЬ NULL
			|			И НастройкаОбщая.Склад ЕСТЬ NULL
			|			И Т.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			И ПринадлежностьГруппеОбщейНастройки.Номенклатура   = Т.Номенклатура
			|			И ПринадлежностьГруппеОбщейНастройки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			И ПринадлежностьГруппеОбщейНастройки.Склад.ЦеховаяКладовая
			|			И ПринадлежностьГруппеОбщейНастройки.Склад.Подразделение = Т.Подразделение
			|			И ПринадлежностьГруппеОбщейНастройки.РеквизитДопУпорядочивания = 1
			|			И ПринадлежностьГруппеОбщейНастройки.Группировка    <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
			|			И ПринадлежностьГруппеОбщейНастройки.ЭтоДействующийПараметр
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаГруппировкиОбщейНастройки
			|		ПО НастройкаДетальная.Склад ЕСТЬ NULL
			|			И ПринадлежностьГруппе.Склад ЕСТЬ NULL
			|			И НастройкаОбщая.Склад ЕСТЬ NULL
			|			И Т.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			И НастройкаГруппировкиОбщейНастройки.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			И НастройкаГруппировкиОбщейНастройки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			И НастройкаГруппировкиОбщейНастройки.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			И НастройкаГруппировкиОбщейНастройки.Группировка    = ПринадлежностьГруппеОбщейНастройки.Группировка
			|			И НастройкаГруппировкиОбщейНастройки.ЭтоДействующийПараметр";
			
		Если ПоляСоединения <> Неопределено Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляСоединения);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Номенклатура",   МассивПодстрок[0]);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Характеристика", МассивПодстрок[1]);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Т.Подразделение",  МассивПодстрок[2]);
		КонецЕсли;
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "ТаблицаНастроек", Синоним);
		
		РезультатПодстановки = СтрЗаменить(РезультатПодстановки, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
	
	Возврат РезультатПодстановки;
	
КонецФункции

//-- НЕ УТ

// Формирует текст запроса временной таблицы, содержащую параметры поддержания запаса, установленные для товаров в РС "Товарные ограничения".
// На список товаров и складов может быть установлен отбор кеомпоновки данных.
// Параметры:
// 
// Возвращаемое значение:
//  Строка - тест запроса временной таблицы "ВтТоварыПоддерживаемогоЗапаса"
//
Функция ВременнаяТаблицаТоварыПоддерживаемогоЗапаса() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	
		|	ЕСТЬNULL(НастройкаГруппировки.СтраховоеКоличествоЗапаса, Таблица.СтраховоеКоличествоЗапаса)                           КАК СтраховоеКоличествоЗапаса,
		|	ЕСТЬNULL(НастройкаГруппировки.МинимальноеКоличествоЗапаса, Таблица.МинимальноеКоличествоЗапаса)                       КАК МинимальноеКоличествоЗапаса,
		|	ЕСТЬNULL(НастройкаГруппировки.МаксимальноеКоличествоЗапаса, Таблица.МаксимальноеКоличествоЗапаса)                     КАК МаксимальноеКоличествоЗапаса,
		|	ЕСТЬNULL(НастройкаГруппировки.НормаПотребления, Таблица.НормаПотребления)                                             КАК НормаПотребления,
		|	ЕСТЬNULL(НастройкаГруппировки.МетодОбеспеченияПотребностей, Таблица.МетодОбеспеченияПотребностей)                     КАК МетодОбеспеченияПотребностей,
		|	ЕСТЬNULL(НастройкаГруппировки.УпаковкаЗаказа, Таблица.УпаковкаЗаказа)                                                 КАК УпаковкаЗаказа,
		|	ЕСТЬNULL(НастройкаГруппировки.ОбеспечениеЗаказовПриПоддержанииЗапаса, Таблица.ОбеспечениеЗаказовПриПоддержанииЗапаса) КАК ОбеспечениеЗаказовПриПоддержанииЗапаса
		|	
		|ПОМЕСТИТЬ ВтТоварыПоддерживаемогоЗапаса
		|	
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаГруппировки
		|		ПО Таблица.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|			И НастройкаГруппировки.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			И НастройкаГруппировки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			И НастройкаГруппировки.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			И НастройкаГруппировки.Группировка    = Таблица.Группировка
		|			И НастройкаГруппировки.ЭтоДействующийПараметр
		|
		|ГДЕ
		|	ЕСТЬNULL(НастройкаГруппировки.МетодОбеспеченияПотребностей, Таблица.МетодОбеспеченияПотребностей) <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|	И Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И (Таблица.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|		ИЛИ Таблица.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|	И Таблица.ЭтоДействующийПараметр
		|{ГДЕ
		|	Таблица.Номенклатура.*   КАК Номенклатура,
		|	Таблица.Характеристика.* КАК Характеристика,
		|	Таблица.Склад.*          КАК Склад,
		|	ВЫРАЗИТЬ(NULL КАК Справочник.НаправленияДеятельности).* КАК НаправлениеДеятельности}
		|
		|{ГДЕ (Таблица.Номенклатура, Таблица.Характеристика) В(
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика КАК Характеристика
		|	ИЗ
		|		ОтборПоСегментам КАК ТаблицаОтбора
		|	ГДЕ
		|		&ИспользуетсяОтборПоСегментуНоменклатуры)}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура        КАК Номенклатура,
		|	ТаблицаХарактеристик.Ссылка КАК Характеристика,
		|	Таблица.Склад               КАК Склад,
		|	
		|	ЕСТЬNULL(НастройкаГруппировки.СтраховоеКоличествоЗапаса, Таблица.СтраховоеКоличествоЗапаса)                           КАК СтраховоеКоличествоЗапаса,
		|	ЕСТЬNULL(НастройкаГруппировки.МинимальноеКоличествоЗапаса, Таблица.МинимальноеКоличествоЗапаса)                       КАК МинимальноеКоличествоЗапаса,
		|	ЕСТЬNULL(НастройкаГруппировки.МаксимальноеКоличествоЗапаса, Таблица.МаксимальноеКоличествоЗапаса)                     КАК МаксимальноеКоличествоЗапаса,
		|	ЕСТЬNULL(НастройкаГруппировки.НормаПотребления, Таблица.НормаПотребления)                                             КАК НормаПотребления,
		|	ЕСТЬNULL(НастройкаГруппировки.МетодОбеспеченияПотребностей, Таблица.МетодОбеспеченияПотребностей)                     КАК МетодОбеспеченияПотребностей,
		|	ЕСТЬNULL(НастройкаГруппировки.УпаковкаЗаказа, Таблица.УпаковкаЗаказа)                                                 КАК УпаковкаЗаказа,
		|	ЕСТЬNULL(НастройкаГруппировки.ОбеспечениеЗаказовПриПоддержанииЗапаса, Таблица.ОбеспечениеЗаказовПриПоддержанииЗапаса) КАК ОбеспечениеЗаказовПриПоддержанииЗапаса
		|	
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|		ПО ТаблицаНоменклатуры.Ссылка = Таблица.Номенклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ТаблицаХарактеристик
		|		ПО ТаблицаХарактеристик.Владелец
		|			= ВЫБОР КОГДА ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры) ТОГДА
		|						ТаблицаНоменклатуры.Ссылка
		|					КОГДА ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры) ТОГДА
		|						ТаблицаНоменклатуры.ВидНоменклатуры
		|					КОГДА ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры) ТОГДА
		|						ТаблицаНоменклатуры.ВладелецХарактеристик
		|				КОНЕЦ
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаДетальная
		|		ПО НастройкаДетальная.Номенклатура      = Таблица.Номенклатура
		|			И НастройкаДетальная.Характеристика = ТаблицаХарактеристик.Ссылка
		|			И НастройкаДетальная.Склад          = Таблица.Склад
		|			И НастройкаДетальная.ЭтоДействующийПараметр
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК НастройкаГруппировки
		|		ПО Таблица.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|			И НастройкаГруппировки.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			И НастройкаГруппировки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			И НастройкаГруппировки.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			И НастройкаГруппировки.Группировка    = Таблица.Группировка
		|			И НастройкаГруппировки.ЭтоДействующийПараметр
		|		
		|ГДЕ
		|	ЕСТЬNULL(НастройкаГруппировки.МетодОбеспеченияПотребностей, Таблица.МетодОбеспеченияПотребностей) <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|	И Таблица.Номенклатура  <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И Таблица.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И Таблица.Номенклатура.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|	И Таблица.ЭтоДействующийПараметр
		|	И НастройкаДетальная.Склад ЕСТЬ NULL
		|	И НЕ ТаблицаХарактеристик.Ссылка ЕСТЬ NULL
		|{ГДЕ
		|	Таблица.Номенклатура.*   КАК Номенклатура,
		|	Таблица.Характеристика.* КАК Характеристика,
		|	Таблица.Склад.*          КАК Склад,
		|	ВЫРАЗИТЬ(NULL КАК Справочник.НаправленияДеятельности).* КАК НаправлениеДеятельности}
		|
		|{ГДЕ (Таблица.Номенклатура, Таблица.Характеристика) В(
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика КАК Характеристика
		|	ИЗ
		|		ОтборПоСегментам КАК ТаблицаОтбора
		|	ГДЕ
		|		&ИспользуетсяОтборПоСегментуНоменклатуры)}
		|
		|;
		|
		|///////////////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает значение настройки "Параметры поддержания запаса" для товарной позиции на складе или группировки.
// Параметры:
//    Ключ - Структура - Cтруктура с полями:
//                        Номенклатура - СправочникСсылка.Номенклатура - Позиция номенклатуры, для которой требуется получить значение настройки.
//                        Характеристика - СправочникСсылка.ХарактеристикаНоменклатуры - Характеристика номенклатуры, для которой требуется получить значение настройки.
//                        Склад - СправочникСсылка.Склады - Склад, для которого требуется получить значение настройки.
//                        Группировка - СправочникСсылка.ГруппировкиТоварныхОграничений - Группировка для которой требуется получить значение настройки
// Возвращаемое значение:
//    Структура - Структура с полями:
//                 СпособУказанияНастройки - Строка - Принимает одно из следующих значений: "ДЛЯ_ТОВАРА", "ДЛЯ_ХАРАКТЕРИСТИК_ТОВАРА", "ДЛЯ_ГРУППЫ_ТОВАРОВ", "НЕ_УКАЗАНА".
//                 Группировка - СправочникСсылка.ГруппировкиТоварныхОграничений - Группировка товарных ограничений, для которой установлена настройка.
//                 МетодОбеспеченияПотребностей - ПеречислениеСсылка.МетодОбеспеченияПотребностей - Значение параметра "Метод обеспечения потребностей".
//                 СтраховоеКоличествоЗапаса - Число - Значение параметра "Страховое количество запаса".
//                 МинимальноеКоличествоЗапаса- Число - Значение параметра "Минимальное количество запаса".
//                 МаксимальноеКоличествоЗапаса- Число - Значение параметра "Максимальное количество запаса".
//                 НормаПотребления - Число - Значение параметра "Норма потребления".
//                 УпаковкаЗаказа - СправочникСсылка.УпаковкиЕдиницыИзмерения - Значение параметра "Упаковка заказа".
//                 ОбеспечениеЗаказовПриПоддержанииЗапаса - ПеречислениеСсылка.ОбеспечениеЗаказовПриПоддержанииЗапаса - Значение параметра "Обеспечение заказов при поддержании запаса".
//
Функция ПараметрыПоддержанияЗапасаТовараНаСкладе(Ключ) Экспорт
	
	Если Ключ.Свойство("Группировка") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТоварныеОграничения.Группировка,
			|	ТоварныеОграничения.СтраховоеКоличествоЗапаса,
			|	ТоварныеОграничения.МинимальноеКоличествоЗапаса,
			|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса,
			|	ТоварныеОграничения.НормаПотребления,
			|	ТоварныеОграничения.МетодОбеспеченияПотребностей,
			|	ТоварныеОграничения.УпаковкаЗаказа,
			|	ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса,
			|	""ДЛЯ_ГРУППЫ_ТОВАРОВ"" КАК СпособУказанияНастройки
			|ИЗ
			|	РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
			|ГДЕ
			|	ТоварныеОграничения.Группировка = &Группировка
			|	И ТоварныеОграничения.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|	И ТоварныеОграничения.ЭтоДействующийПараметр";
		
		Запрос.УстановитьПараметр("Группировка", Ключ.Группировка);
		Выборка = Запрос.Выполнить().Выбрать();
	
	Иначе
	
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&Номенклатура   КАК Номенклатура,
		|	&Характеристика КАК Характеристика,
		|	&Склад          КАК Склад
		|ПОМЕСТИТЬ ВтКлючЗаписи
		|;
		|
		|////////////////////////////////////////
		|ВЫБРАТЬ
		|	&СпособУказанияНастройки                                   КАК СпособУказанияНастройки,
		|	ТоварныеОграничения.Группировка                            КАК Группировка,
		|	ТоварныеОграничения.СтраховоеКоличествоЗапаса              КАК СтраховоеКоличествоЗапаса,
		|	ТоварныеОграничения.МинимальноеКоличествоЗапаса            КАК МинимальноеКоличествоЗапаса,
		|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса           КАК МаксимальноеКоличествоЗапаса,
		|	ТоварныеОграничения.НормаПотребления                       КАК НормаПотребления,
		|	ТоварныеОграничения.МетодОбеспеченияПотребностей           КАК МетодОбеспеченияПотребностей,
		|	ТоварныеОграничения.УпаковкаЗаказа                         КАК УпаковкаЗаказа,
		|	ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса КАК ОбеспечениеЗаказовПриПоддержанииЗапаса
		|ИЗ
		|	ВтКлючЗаписи КАК КлючЗаписи
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|		ПО &ПодстановкаТоварногоОграничения";
		
		Запрос.Текст = ПодставитьСоединение(
			Запрос.Текст,
			"ПодстановкаТоварногоОграничения",
			"КлючЗаписи.Номенклатура,КлючЗаписи.Характеристика,КлючЗаписи.Склад");
			
		// Вычисление поля "Способ указания настройки", использует служебные таблицы функции ПодставитьСоединение(...).
		ПодстановкаСпособУказанияНастройки =
			"ВЫБОР КОГДА НЕ НастройкаДетальная.Номенклатура ЕСТЬ NULL ТОГДА
			|			ВЫБОР КОГДА НастройкаДетальная.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|					И НастройкаДетальная.Номенклатура.ИспользованиеХарактеристик 
			|					<> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать) ТОГДА
			|				""ДЛЯ_ХАРАКТЕРИСТИК_ТОВАРА""
			|			ИНАЧЕ
			|				""ДЛЯ_ТОВАРА""
			|			КОНЕЦ
			|		КОГДА НЕ ПринадлежностьГруппе.Номенклатура ЕСТЬ NULL
			|				ИЛИ НЕ НастройкаГруппировкиОбщейНастройки.Номенклатура ЕСТЬ NULL ТОГДА
			|			""ДЛЯ_ГРУППЫ_ТОВАРОВ""
			|		КОГДА НЕ НастройкаОбщая.Номенклатура ЕСТЬ NULL ТОГДА
			|			""ДЛЯ_ХАРАКТЕРИСТИК_ТОВАРА""
			|		ИНАЧЕ
			|			NULL
			|	КОНЕЦ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СпособУказанияНастройки", ПодстановкаСпособУказанияНастройки);
		
		Запрос.УстановитьПараметр("Номенклатура",   Ключ.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Ключ.Характеристика);
		Запрос.УстановитьПараметр("Склад",          Ключ.Склад);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	ЗначениеНастройки = Новый Структура();
	ЗначениеНастройки.Вставить("СпособУказанияНастройки", "НЕ_УКАЗАНА");
	ЗначениеНастройки.Вставить("Группировка", Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка());
	ЗначениеНастройки.Вставить("МетодОбеспеченияПотребностей", Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ);
	ЗначениеНастройки.Вставить("СтраховоеКоличествоЗапаса", 0.000);
	ЗначениеНастройки.Вставить("МинимальноеКоличествоЗапаса", 0.000);
	ЗначениеНастройки.Вставить("МаксимальноеКоличествоЗапаса", 0.000);
	ЗначениеНастройки.Вставить("НормаПотребления", 0.000);
	ЗначениеНастройки.Вставить("УпаковкаЗаказа", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ЗначениеНастройки.Вставить("ОбеспечениеЗаказовПриПоддержанииЗапаса", Перечисления.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов);
	
	Если Выборка.Следующий() И Выборка.СпособУказанияНастройки <> NULL Тогда
		
		ЗаполнитьЗначенияСвойств(ЗначениеНастройки, Выборка);
		
	КонецЕсли;
	
	Если ЗначениеНастройки.МетодОбеспеченияПотребностей <> Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме Тогда
		ЗначениеНастройки.НормаПотребления = 0.000;
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

// Функция-конструктор структуры, описывающей запись группировки в регистре.
//
// Параметры:
//		Группировка - СправочникСсылка.ГруппировкиТоварныхОграничений - Группировка которая определяет ключ записи.
//
// Возвращаемое значение:
//		Структура - Структура с полями:
//			ТипКлюча	- Строка - Служебный реквизит.
//			Группировка	- Справочник.ГруппировкиТоварныхограничений.
//
Функция КлючЗаписиГруппировки(Группировка = Неопределено) Экспорт
	Ключ = Новый Структура;
	Ключ.Вставить("ТипКлюча",		"Группировка");
	Ключ.Вставить("Группировка",	?(Группировка <> Неопределено, Группировка,
		Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка()));
	Возврат Ключ;
КонецФункции

// Функция-конструктор структуры, описывающей запись номенклатуры (общая настройка для всех характеристик) в регистре.
//
// Возвращаемое значение:
//		Структура - Структура с полями:
//			ТипКлюча		- Строка - Служебный реквизит.
//			Номенклатура	- СправочникСсылка.Номенклатура.
//			Склад			- СправочникСсылка.Склады.
//
Функция КлючЗаписиНоменклатуры() Экспорт
	Ключ = Новый Структура;
	Ключ.Вставить("ТипКлюча",		"ОбщаяНастройка");
	Ключ.Вставить("Номенклатура",	Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка());
	Ключ.Вставить("Склад",			Справочники.Склады.ПустаяСсылка());
	Возврат Ключ;
КонецФункции

// Функция-конструктор структуры, описывающей запись номенклатуры с характеристикой в регистре.
//
// Возвращаемое значение:
//		Структура - Структура с полями:
//			ТипКлюча		- Строка - Служебный реквизит.
//			Номенклатура	- СправочникСсылка.Номенклатура.
//			Характеристика	- СправочникСсылка.ХарактеристикиНоменклатуры.
//			Склад			- СправочникСсылка.Склады.
//
Функция КлючЗаписиХарактеристики() Экспорт
	Ключ = Новый Структура;
	Ключ.Вставить("ТипКлюча",		"ДетальнаяНастройка");
	Ключ.Вставить("Номенклатура",	Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка());
	Ключ.Вставить("Характеристика",	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Ключ.Вставить("Склад",			Справочники.Склады.ПустаяСсылка());
	Возврат Ключ;
КонецФункции

// Возвращает массив ключей записей номенклатуры и характеристик входящих в указанную группировку.
//
// Параметры:
//		Группировка		- СправочникСсылка.ГруппировкиТоварныхОграничений - Группировка по которой возвращаются ключи записей.
//		ОтборПоСкладу	- СправочникСсылка.Склады - Ограничение выборки по складу.
//
// Возвращаемое значение:
//		Массив - Содержит КлючЗаписи товаров (см. КлючЗаписиНоменклатуры(), КлючЗаписиХарактеристики())
//
Функция КлючиЗаписейТовараВГруппировке(Группировка, Склад = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварныеОграничения.Склад,
		|	ТоварныеОграничения.Номенклатура,
		|	ТоварныеОграничения.Характеристика
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|ГДЕ
		|	ТоварныеОграничения.Группировка = &Группировка
		|	И ТоварныеОграничения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Группировка", Группировка);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Запрос.Текст = Запрос.Текст + " И ТоварныеОграничения.Склад = &Склад";
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	КлючиЗаписей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			КлючЗаписиТовара = РегистрыСведений.ТоварныеОграничения.КлючЗаписиХарактеристики();
		Иначе
			КлючЗаписиТовара = РегистрыСведений.ТоварныеОграничения.КлючЗаписиНоменклатуры();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(КлючЗаписиТовара, Выборка);
		КлючиЗаписей.Добавить(КлючЗаписиТовара);
	КонецЦикла;
	
	Возврат КлючиЗаписей;
	
КонецФункции

// Функция-конструктор структуры, описывающей параметры поддержания запаса "Min-max".
//
// Возвращаемое значение:
//		Структура - Структура с полями:
//			МинимальноеКоличествоЗапаса				- Число.
//			МаксимальноеКоличествоЗапаса			- Число.
//			ОбеспечениеЗаказовПриПоддержанииЗапаса	- Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.
//
Функция ПараметрыМинМакс() Экспорт
	Параметры = Новый Структура();
	Параметры.Вставить("МинимальноеКоличествоЗапаса",	0);
	Параметры.Вставить("МаксимальноеКоличествоЗапаса",	0);
	Параметры.Вставить("ОбеспечениеЗаказовПриПоддержанииЗапаса",
		Перечисления.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов);
	Параметры.Вставить("ИмяПараметраЗаполнения",		Неопределено);
	Возврат Параметры;
КонецФункции

// Функция-конструктор структуры, описывающей параметры поддержания запаса "Расчет по норме".
//
// Возвращаемое значение:
//			НормаПотребления						- Число.
//			СтраховоеКоличествоЗапаса				- Число.
//			ОбеспечениеЗаказовПриПоддержанииЗапаса	- Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.
//
Функция ПараметрыРасчетПоНорме() Экспорт
	Параметры = Новый Структура();
	Параметры.Вставить("НормаПотребления",			0);
	Параметры.Вставить("СтраховоеКоличествоЗапаса",	0);
	Параметры.Вставить("ОбеспечениеЗаказовПриПоддержанииЗапаса",
		Перечисления.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов);
	Параметры.Вставить("ИмяПараметраЗаполнения",	Неопределено);
	Возврат Параметры;
КонецФункции

// Функция-конструктор структуры, описывающей параметры поддержания запаса "Расчет по статистике".
//
// Возвращаемое значение:
//		Структура - Структура с полями:
//			СтраховоеКоличествоЗапаса				- Число.
//			ОбеспечениеЗаказовПриПоддержанииЗапаса	- Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.
//
Функция ПараметрыРасчетПоСтатистике() Экспорт
	Параметры = Новый Структура();
	Параметры.Вставить("СтраховоеКоличествоЗапаса",	0);
	Параметры.Вставить("ОбеспечениеЗаказовПриПоддержанииЗапаса",
		Перечисления.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов);
	Параметры.Вставить("ИмяПараметраЗаполнения",	Неопределено);
	Возврат Параметры;
КонецФункции

// Добавляет поддержание запаса по методу "МинМакс" для товара на складе или группировки.
//
// Параметры:
//		КлючиЗаписи			- Массив, Структура - КлючЗаписи (см. КлючЗаписиГруппировки(), КлючЗаписиНоменклатуры(),
//								КлючЗаписиХарактеристики() ) или массив таких записей.
//		ПараметрыМинМакс	- Структура - Параметры поддержания запаса (см. ПараметрыМинМакс()).
//
Процедура ДобавитьПоддержаниеЗапасаМинМакс(КлючиЗаписи, ПараметрыМинМакс = Неопределено) Экспорт
	
	Если Тип(КлючиЗаписи) = Тип("Структура") Тогда
		Ключ = КлючиЗаписи;
		КлючиЗаписи = Новый Массив(1);
		КлючиЗаписи[0] = Ключ;
	КонецЕсли;
	
	Если ПараметрыМинМакс = Неопределено Тогда
		ПараметрыМинМакс = ПараметрыМинМакс();
	КонецЕсли;
	
	ПараметрыДляЗаписи = ПустыеПараметрыТоварногоОграничения();
	ЗаполнитьЗначенияСвойств(ПараметрыДляЗаписи, ПараметрыМинМакс, 
		"МинимальноеКоличествоЗапаса, МаксимальноеКоличествоЗапаса, ОбеспечениеЗаказовПриПоддержанииЗапаса");
	ПараметрыДляЗаписи.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс;
	
	ТаблицаТоваров		= ТаблицаТоваров();
	ТаблицаГруппировок	= ТаблицаГруппировок();
	Для каждого Ключ Из КлючиЗаписи Цикл
		Если Ключ.ТипКлюча = "ДетальнаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Характеристика	= Ключ.Характеристика;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "ОбщаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "Группировка" Тогда
			ЗаписьТаблицы = ТаблицаГруппировок.Добавить();
			ЗаписьТаблицы.Группировка		= Ключ.Группировка;
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимый тип ключа записи!'");;
		КонецЕсли;
	КонецЦикла;
	
	Записать(ТаблицаТоваров, ТаблицаГруппировок, ПараметрыДляЗаписи);
	
КонецПроцедуры

// Добавляет поддержание запаса по методу "Расчет по норме" для товара на складе или группировки.
//
// Параметры:
//		КлючиЗаписи			- Массив, Структура - КлючЗаписи (см. КлючЗаписиГруппировки(), КлючЗаписиНоменклатуры(),
//								КлючЗаписиХарактеристики() ) или массив таких записей.
//		ПараметрыМинМакс	- Структура - Параметры поддержания запаса (ПараметрыРасчетПоНорме()).
//
Процедура ДобавитьПоддержаниеЗапасаРасчетПоНорме(КлючиЗаписи, ПараметрыПоНорме) Экспорт
	
	Если Тип(КлючиЗаписи) = Тип("Структура") Тогда
		Ключ = КлючиЗаписи;
		КлючиЗаписи = Новый Массив(1);
		КлючиЗаписи[0] = Ключ;
	КонецЕсли;
	
	ПараметрыДляЗаписи = ПустыеПараметрыТоварногоОграничения();
	ЗаполнитьЗначенияСвойств(ПараметрыДляЗаписи, ПараметрыПоНорме,
		"НормаПотребления, СтраховоеКоличествоЗапаса, ОбеспечениеЗаказовПриПоддержанииЗапаса");
	ПараметрыДляЗаписи.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме;
	
	ТаблицаТоваров		= ТаблицаТоваров();
	ТаблицаГруппировок	= ТаблицаГруппировок();
	Для каждого Ключ Из КлючиЗаписи Цикл
		Если Ключ.ТипКлюча = "ДетальнаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Характеристика	= Ключ.Характеристика;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "ОбщаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "Группировка" Тогда
			ЗаписьТаблицы = ТаблицаГруппировок.Добавить();
			ЗаписьТаблицы.Группировка		= Ключ.Группировка;
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимый тип ключа записи!'");;
		КонецЕсли;
	КонецЦикла;
	
	Записать(ТаблицаТоваров, ТаблицаГруппировок, ПараметрыДляЗаписи);
	
КонецПроцедуры

// Добавляет поддержание запаса по методу "Расчет по статистике" для товара на складе или группировки.
//
// Параметры:
//		КлючиЗаписи			- Массив, Структура - КлючЗаписи (см. КлючЗаписиГруппировки(), КлючЗаписиНоменклатуры(),
//								КлючЗаписиХарактеристики() ) или массив таких записей.
//		ПараметрыМинМакс	- Структура - Параметры поддержания запаса (ПараметрыРасчетПоСтатистике()).
//
Процедура ДобавитьПоддержаниеЗапасаРасчетПоСтатистике(КлючиЗаписи, ПараметрыПоСтатистике) Экспорт
	
	Если Тип(КлючиЗаписи) = Тип("Структура") Тогда
		Ключ = КлючиЗаписи;
		КлючиЗаписи = Новый Массив(1);
		КлючиЗаписи[0] = Ключ;
	КонецЕсли;
	
	ПараметрыДляЗаписи = ПустыеПараметрыТоварногоОграничения();
	ЗаполнитьЗначенияСвойств(ПараметрыДляЗаписи, ПараметрыПоСтатистике,
		"СтраховоеКоличествоЗапаса, ОбеспечениеЗаказовПриПоддержанииЗапаса");
	ПараметрыДляЗаписи.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике;
	
	ТаблицаТоваров		= ТаблицаТоваров();
	ТаблицаГруппировок	= ТаблицаГруппировок();
	Для каждого Ключ Из КлючиЗаписи Цикл
		Если Ключ.ТипКлюча = "ДетальнаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Характеристика	= Ключ.Характеристика;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "ОбщаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "Группировка" Тогда
			ЗаписьТаблицы = ТаблицаГруппировок.Добавить();
			ЗаписьТаблицы.Группировка		= Ключ.Группировка;
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимый тип ключа записи!'");;
		КонецЕсли;
	КонецЦикла;
	
	Записать(ТаблицаТоваров, ТаблицаГруппировок, ПараметрыДляЗаписи);
	
КонецПроцедуры

// Добавляет поддержание запаса по параметрам группировки для товара на складе.
//
// Параметры:
//		КлючиЗаписи			- Массив, Структура - КлючЗаписи товара (см. КлючЗаписиНоменклатуры(), КлючЗаписиХарактеристики())
//								или массив таких записей.
//		КлючГруппировки		- Структура - КлючЗаписи группировки (см. КлючЗаписиГруппировки()).
//
Процедура ДобавитьПоддержаниеЗапасаГруппировкой(КлючиЗаписи, КлючГруппировки) Экспорт
	
	Если Тип(КлючиЗаписи) = Тип("Структура") Тогда
		Ключ = КлючиЗаписи;
		КлючиЗаписи = Новый Массив(1);
		КлючиЗаписи[0] = Ключ;
	КонецЕсли;
	
	Если КлючГруппировки.ТипКлюча = "Группировка" Тогда
		ПараметрыДляЗаписи = ПустыеПараметрыТоварногоОграничения();
		ПараметрыДляЗаписи.Вставить("Группировка", КлючГруппировки.Группировка);
	Иначе
		ВызватьИсключение НСтр("ru = 'Недопустимый тип ключа записи группировки!'");
	КонецЕсли;
	
	ТаблицаТоваров = ТаблицаТоваров();
	Для каждого Ключ Из КлючиЗаписи Цикл
		ЗаписьТаблицы = ТаблицаТоваров.Добавить();
		Если Ключ.ТипКлюча = "ДетальнаяНастройка" Тогда
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Характеристика	= Ключ.Характеристика;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "ОбщаяНастройка" Тогда
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимый тип ключа записи!'");
		КонецЕсли;
	КонецЦикла;
	
	// Если нет записи для данной группировки, то создадим её
	ТаблицаГруппировок = ТаблицаГруппировок();
	Если ЗначениеЗаполнено(КлючГруппировки.Группировка) Тогда
		ЗаписьТаблицы = ТаблицаГруппировок.Добавить();
		ЗаписьТаблицы.Группировка = КлючГруппировки.Группировка;
	КонецЕсли;
	
	Записать(ТаблицаТоваров, ТаблицаГруппировок, ПараметрыДляЗаписи);
	
КонецПроцедуры

// Удаляет поддержание запаса для товара на складе или группировки.
//
// Параметры:
//		КлючиЗаписи			- Массив, Структура - КлючЗаписи (см. КлючЗаписиГруппировки(), КлючЗаписиНоменклатуры(),
//								КлючЗаписиХарактеристики()) или массив таких записей.
//
Процедура УдалитьПоддержаниеЗапаса(КлючиЗаписи) Экспорт

	Если Тип(КлючиЗаписи) = Тип("Структура") Тогда
		Ключ = КлючиЗаписи;
		КлючиЗаписи = Новый Массив(1);
		КлючиЗаписи[0] = Ключ;
	КонецЕсли;
	
	ТаблицаТоваров		= ТаблицаТоваров();
	ТаблицаГруппировок	= ТаблицаГруппировок();
	Для каждого Ключ Из КлючиЗаписи Цикл
		Если Ключ.ТипКлюча = "ДетальнаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Характеристика	= Ключ.Характеристика;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "ОбщаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "Группировка" Тогда
			ЗаписьТаблицы = ТаблицаГруппировок.Добавить();
			ЗаписьТаблицы.Группировка		= Ключ.Группировка;
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимый тип ключа записи!'");;
		КонецЕсли;
	КонецЦикла;
	
	Удалить(ТаблицаТоваров, ТаблицаГруппировок);

КонецПроцедуры

// Устанавливает поддержание запаса для товара с характеристикой на складе согласно общей настройки номенклатуры.
//
// Параметры:
//		КлючиЗаписи			- Массив, Структура - КлючЗаписи характеристики (КлючЗаписиХарактеристики()) или массив таких записей.
//
Процедура УстановитьПоддержаниеЗапасаКакДляНоменклатуры(КлючиЗаписиХарактеристик) Экспорт

	Если Тип(КлючиЗаписиХарактеристик) = Тип("Структура") Тогда
		Ключ = КлючиЗаписиХарактеристик;
		КлючиЗаписиХарактеристик = Новый Массив(1);
		КлючиЗаписиХарактеристик[0] = Ключ;
	КонецЕсли;
	
	ТаблицаТоваров		= ТаблицаТоваров();
	Для каждого Ключ Из КлючиЗаписиХарактеристик Цикл
		Если Ключ.ТипКлюча = "ДетальнаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Характеристика	= Ключ.Характеристика;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимый тип ключа записи характеристики!'");;
		КонецЕсли;
	КонецЦикла;
	
	Удалить(ТаблицаТоваров, ТаблицаГруппировок(), Истина);

КонецПроцедуры

// Заполняет указанный параметр поддержания запаса для товаров на складе или группировк.
// Заполнение присходит только для тех записей, для которых это имеет смысл (исходя из метода обеспечения).
//
// Параметры:
//		КлючиЗаписи	- Массив, Структура - КлючЗаписи (см. КлючЗаписиГруппировки(), КлючЗаписиНоменклатуры(),
//						КлючЗаписиХарактеристики()) или массив таких записей.
//		ИмяПарметра	- Строка - Наименование параметра запонения.
//		Значение	- Число, Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса - Значение параметра заполнения.
// Возвращаемое значение:
//		Число - Количесто заполненных записей
//
Функция ЗаполнитьПараметрПоддержанияЗапаса(КлючиЗаписи, ИмяПараметра, Значение) Экспорт
	
	Если Тип(КлючиЗаписи) = Тип("Структура") Тогда
		Ключ = КлючиЗаписи;
		КлючиЗаписи = Новый Массив(1);
		КлючиЗаписи[0] = Ключ;
	КонецЕсли;
	
	МетодыДляОтбора = новый Массив;
	Если ИмяПараметра = "МинимальноеКоличествоЗапаса" ИЛИ ИмяПараметра = "МаксимальноеКоличествоЗапаса" Тогда
		МетодыДляОтбора.Добавить(Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс);
	ИначеЕсли ИмяПараметра = "НормаПотребления" Тогда
		МетодыДляОтбора.Добавить(Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме);
	ИначеЕсли ИмяПараметра = "СтраховоеКоличествоЗапаса" Тогда
		МетодыДляОтбора.Добавить(Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме);
		МетодыДляОтбора.Добавить(Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике);
	ИначеЕсли ИмяПараметра = "ОбеспечениеЗаказовПриПоддержанииЗапаса" Тогда
		МетодыДляОтбора.Добавить(Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс);
		МетодыДляОтбора.Добавить(Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме);
		МетодыДляОтбора.Добавить(Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике);
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректно задано имя параметра!'");
	КонецЕсли;
	
	ПараметрыДляЗаписи = Новый Структура;
	ПараметрыДляЗаписи.Вставить(ИмяПараметра, Значение);
	
	ТаблицаТоваров		= ТаблицаТоваров();
	ТаблицаГруппировок	= ТаблицаГруппировок();
	Для каждого Ключ Из КлючиЗаписи Цикл
		Если Ключ.ТипКлюча = "ДетальнаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Характеристика	= Ключ.Характеристика;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "ОбщаяНастройка" Тогда
			ЗаписьТаблицы = ТаблицаТоваров.Добавить();
			ЗаписьТаблицы.Номенклатура		= Ключ.Номенклатура;
			ЗаписьТаблицы.Склад				= Ключ.Склад;
		ИначеЕсли Ключ.ТипКлюча = "Группировка" Тогда
			ЗаписьТаблицы = ТаблицаГруппировок.Добавить();
			ЗаписьТаблицы.Группировка		= Ключ.Группировка;
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимый тип ключа записи!'");;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Записать(ТаблицаТоваров, ТаблицаГруппировок, ПараметрыДляЗаписи, МетодыДляОтбора);
	
КонецФункции


// Задает упаковку заказа для товара на складе.
//
// Параметры:
//  Номенклатура	- СправочникСсылка.Номенклатура - Номенклатура товара,
//  Характеристика	- СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика товара,
//  Склад			- СправочникСсылка.Склады - Склад.
//  Упаковка		- СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка заказа.
//
Процедура ЗадатьУпаковкуТовара(Номенклатура, Характеристика, Склад, УпаковкаЗаказа) Экспорт

	НаборЗаписей = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
	ЭлементБлокировки.УстановитьЗначение("Номенклатура",	Номенклатура);
	ЭлементБлокировки.УстановитьЗначение("Характеристика",	Характеристика);
	ЭлементБлокировки.УстановитьЗначение("Склад",			Склад);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		НаборЗаписей.Прочитать();
		
		ОчисткаУпаковки = НЕ ЗначениеЗаполнено(УпаковкаЗаказа);
		Записывать = Ложь;
		Если НаборЗаписей.Количество() = 0 Тогда
			Если Не ОчисткаУпаковки Тогда
				ЗаписьРегистра = НаборЗаписей.Добавить();
				ЗаписьРегистра.Номенклатура		= Номенклатура;
				ЗаписьРегистра.Характеристика	= Характеристика;
				ЗаписьРегистра.Склад			= Склад;
				ЗаписьРегистра.МетодОбеспеченияПотребностей	= Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
				ЗаписьРегистра.УпаковкаЗаказа = УпаковкаЗаказа;
				ЗаписьРегистра.ЭтоДействующийПараметр	= Ложь;
				Записывать = Истина;
			КонецЕсли;
		ИначеЕсли НЕ НаборЗаписей[0].ЭтоДействующийПараметр И ОчисткаУпаковки И
			НЕ НаборЗаписей[0].ЕстьРекомендацияПоИзменению Тогда
			НаборЗаписей.Очистить();
			Записывать = Истина;
		ИначеЕсли НаборЗаписей[0].УпаковкаЗаказа <> УпаковкаЗаказа Тогда
			НаборЗаписей[0].УпаковкаЗаказа = УпаковкаЗаказа;
			Записывать = Истина;
		КонецЕсли;
		Если Записывать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Задание упаковки заказа для товара на складе'"), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет данные статистики потребления для списка товаров на складах.
//
// Параметры:
//	МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц - менеджер с временной таблицей ТоварыСреднедневногоПотребления.
//
Процедура РассчитатьСтатистикуПотребленияТоваров(МенеджерВременныхТаблиц) Экспорт
	
	ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		ТекущаяДатаСеанса(), ПериодКлассификации, - КоличествоПериодовКлассификации);
	ПериодКлассификацииДатаНачала    = Период.ДатаНачала;
	ПериодКлассификацииДатаОкончания = Период.ДатаОкончания;
	
	АдресГрафикаБезКалендаря = Обработки.ОбеспечениеПотребностей.СоздатьГрафикВХранилище(
		ПериодКлассификацииДатаНачала, ПериодКлассификацииДатаОкончания);
	
	Курсор = Новый Структура("Номенклатура, Характеристика, Склад");
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаСтатистикиПотребления();
	Запрос.УстановитьПараметр("ДатаРасчетаРекомендаций", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ГрафикБезКалендаря",      ПолучитьИзВременногоХранилища(АдресГрафикаБезКалендаря));
	Запрос.УстановитьПараметр("ПериодКлассификацииДатаНачала",    ПериодКлассификацииДатаНачала);
	Запрос.УстановитьПараметр("ПериодКлассификацииДатаОкончания", КонецДня(ПериодКлассификацииДатаОкончания));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
		ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Истина Цикл
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	Т.Номенклатура КАК Номенклатура,
			|	Т.Характеристика КАК Характеристика,
			|	Т.Склад КАК Склад
			|ПОМЕСТИТЬ ТоварыПорция
			|ИЗ
			|	ТоварыСреднедневногоПотребления КАК Т
			|ГДЕ
			|	Т.Номенклатура >= &Номенклатура
			|	И (Т.Номенклатура > &Номенклатура ИЛИ Т.Характеристика >= &Характеристика)
			|	И (Т.Номенклатура > &Номенклатура ИЛИ Т.Характеристика > &Характеристика ИЛИ Т.Склад > &Склад)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Склад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|// Блокировка изменяемых записей
			|ВЫБРАТЬ
			|	ТоварыПорция.Номенклатура КАК Номенклатура,
			|	ТоварыПорция.Характеристика КАК Характеристика,
			|	ТоварыПорция.Склад КАК Склад
			|ИЗ
			|	ТоварыПорция КАК ТоварыПорция
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|// Блокировка записей общих настроек
			|ВЫБРАТЬ
			|	ТоварыПорция.Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
			|	ТоварыПорция.Склад
			|ИЗ
			|	ТоварыПорция КАК ТоварыПорция
			|ГДЕ
			|	ТоварыПорция.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|// Блокировка группировок
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|	ТоварыПорция.Склад КАК Склад,
			|	ТоварныеОграничения.Группировка КАК Группировка
			|ИЗ
			|	ТоварыПорция КАК ТоварыПорция
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
			|		ПО ТоварыПорция.Номенклатура = ТоварныеОграничения.Номенклатура
			|		И ТоварыПорция.Склад = ТоварныеОграничения.Склад
			|ГДЕ
			|	ТоварныеОграничения.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("Номенклатура",	Курсор.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика",	Курсор.Характеристика);
		Запрос.УстановитьПараметр("Склад",			Курсор.Склад);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатыЗапроса[1].Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
			ЭлементБлокировки.ИсточникДанных = РезультатыЗапроса[1];
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",		"Номенклатура");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика",	"Характеристика");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",			"Склад");
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
			ЭлементБлокировки.ИсточникДанных = РезультатыЗапроса[2];
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",		"Номенклатура");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",			"Склад");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Группировка",		"Группировка");
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
			ЭлементБлокировки.ИсточникДанных = РезультатыЗапроса[1];
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",		"Номенклатура");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",			"Склад");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
			ЭлементБлокировки.ИсточникДанных = РезультатыЗапроса[2];
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",			"Склад");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Группировка",		"Группировка");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Т.Номенклатура   КАК Номенклатура,
				|	Т.Характеристика КАК Характеристика,
				|	Т.Склад          КАК Склад,
				|
				|	ТоварныеОграничения.Группировка                            КАК Группировка,
				|	ТоварныеОграничения.МетодОбеспеченияПотребностей           КАК МетодОбеспеченияПотребностей,
				|	ТоварныеОграничения.МинимальноеКоличествоЗапаса            КАК МинимальноеКоличествоЗапаса,
				|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса           КАК МаксимальноеКоличествоЗапаса,
				|	ТоварныеОграничения.НормаПотребления                       КАК НормаПотребления,
				|	ТоварныеОграничения.СтраховоеКоличествоЗапаса              КАК СтраховоеКоличествоЗапаса,
				|	ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса КАК ОбеспечениеЗаказовПриПоддержанииЗапаса,
				|	ТоварныеОграничения.УпаковкаЗаказа                         КАК УпаковкаЗаказа,
				|
				|	ТоварныеОграничения.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
				|	ТоварныеОграничения.ЭтоДействующийПараметр    КАК ЭтоДействующийПараметр,
				|
				|	ЕСТЬNULL(Статистика.СреднедневноеПотребление, 0) КАК СреднедневноеПотребление,
				|	ЕСТЬNULL(Статистика.ДисперсияПотребления, 0)     КАК ДисперсияПотребления,
				|	&ДатаРасчетаРекомендаций                         КАК ДатаРасчетаРекомендаций,
				|
				|	ТоварныеОграничения.Номенклатура ЕСТЬ NULL КАК НоваяЗапись,
				|	НЕ ЕСТЬNULL(ТоварныеОграничения.ЭтоДействующийПараметр, ЛОЖЬ)
				|		И ЕСТЬNULL(Статистика.СреднедневноеПотребление, 0) = 0
				|		И ЕСТЬNULL(ТоварныеОграничения.УпаковкаЗаказа, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК УдалитьЗапись
				|ИЗ
				|	ТоварыПорция КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ СтатистикаПотребления КАК Статистика
				|		ПО Т.Номенклатура = Статистика.Номенклатура
				|			И Т.Характеристика = Статистика.Характеристика
				|			И Т.Склад = Статистика.Склад
				|			И Статистика.СреднедневноеПотребление > 0
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
				|		ПО Т.Номенклатура = ТоварныеОграничения.Номенклатура
				|			И Т.Характеристика = ТоварныеОграничения.Характеристика
				|			И Т.Склад = ТоварныеОграничения.Склад
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТоварыПорция";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ОбщиеНастройки = ТаблицаОбщихНастроек();
			Группировки = ТаблицаСлужебныхГруппировок();
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Курсор, Выборка);
				
				НаборЗаписей = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
				Если НЕ Выборка.УдалитьЗапись Тогда
					ЗаписьРегистра = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
					Если Выборка.НоваяЗапись Тогда
						ЗаписьРегистра.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
						ЗаписьРегистра.ЭтоДействующийПараметр = Ложь;
					КонецЕсли;
					ЗаписьРегистра.СреднееОтклонениеПотребления = Sqrt(Выборка.ДисперсияПотребления);
					
					ОбновитьРекомендациюПоИзменениюЗаписиРегистра(ЗаписьРегистра);
					Если НЕ ЗаписьРегистра.ЭтоДействующийПараметр И Не ЗаписьРегистра.ЕстьРекомендацияПоИзменению
						И НЕ ЗначениеЗаполнено(ЗаписьРегистра.УпаковкаЗаказа) Тогда
						НаборЗаписей.Удалить(ЗаписьРегистра);
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка.НоваяЗапись И НаборЗаписей.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Запоминаем для каких из группировычных записей нужно обновить реквизит ЕстьРекомендацияПоИзменению
				ЗапомнитьГруппировкуДляОбновления(Группировки, Выборка.Группировка, Выборка.Склад,
					?(НаборЗаписей.Количество() > 0, НаборЗаписей[0].ЕстьРекомендацияПоИзменению, Ложь));
				Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
					ЗапомнитьОбщуюНастройкуДляОбновления(ОбщиеНастройки, Выборка.Номенклатура, Выборка.Склад);
				КонецЕсли;
				
				НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
				НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
			// Проверка правильности заблокированных группировок
			ЗаблокированныеГруппировки = РезультатыЗапроса[2].Выгрузить();
			Отбор = Новый Структура("Группировка, Склад");
			Для каждого ЗаписьГруппировки Из Группировки Цикл
				ЗаполнитьЗначенияСвойств(Отбор, ЗаписьГруппировки);
				НайденныеСтроки = ЗаблокированныеГруппировки.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ВызватьИсключение НСтр("ru = 'Несоответствие в транзакции заблокированных и изменяемых группировок'");
				КонецЕсли;
			КонецЦикла;
			
			ОбновитьРекомендацииПоИзменениюОбщихНастроек(ОбщиеНастройки, Группировки);
			ОбновитьРекомендацииПоИзменениюГруппировок(Группировки);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Расчет статистики потребления товаров'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Функция-конструктор структуры, описывающей параметры товарных ограничений.
//
// Возвращаемое значение:
//		Структура - Структура с полями:
//			МетодОбеспеченияПотребностей			- Перечисление.МетодыОбеспеченияПотребностей.
//			МинимальноеКоличествоЗапаса				- Число.
//			МаксимальноеКоличествоЗапаса			- Число.
//			СтраховоеКоличествоЗапаса				- Число.
//			НормаПотребления						- Число.
//			ОбеспечениеЗаказовПриПоддержанииЗапаса	- Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.
//
Функция ПустыеПараметрыТоварногоОграничения()
	ПараметрыТоварногоОграничения = Новый Структура();
	ПараметрыТоварногоОграничения.Вставить("МетодОбеспеченияПотребностей",
		Перечисления.МетодыОбеспеченияПотребностей.ПустаяСсылка());
	ПараметрыТоварногоОграничения.Вставить("МинимальноеКоличествоЗапаса",	0);
	ПараметрыТоварногоОграничения.Вставить("МаксимальноеКоличествоЗапаса",	0);
	ПараметрыТоварногоОграничения.Вставить("СтраховоеКоличествоЗапаса",		0);
	ПараметрыТоварногоОграничения.Вставить("НормаПотребления",				0);
	ПараметрыТоварногоОграничения.Вставить("ОбеспечениеЗаказовПриПоддержанииЗапаса",
		Перечисления.ОбеспечениеЗаказовПриПоддержанииЗапаса.ПустаяСсылка());

	Возврат ПараметрыТоварногоОграничения;
КонецФункции

Функция ТаблицаТоваров()
	ТаблицаЗаписей = Новый ТаблицаЗначений;
	ТаблицаЗаписей.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗаписей.Колонки.Добавить("Характеристика",	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗаписей.Колонки.Добавить("Склад",			Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Возврат ТаблицаЗаписей;
КонецФункции

Функция ТаблицаГруппировок()
	ТаблицаЗаписей = Новый ТаблицаЗначений;
	ТаблицаЗаписей.Колонки.Добавить("Группировка", Новый ОписаниеТипов("СправочникСсылка.ГруппировкиТоварныхОграничений"));
	Возврат ТаблицаЗаписей;
КонецФункции

Функция ТаблицаСлужебныхГруппировок()
	СлужебныеГруппировки = Новый ТаблицаЗначений;
	СлужебныеГруппировки.Колонки.Добавить("Группировка",
		Новый ОписаниеТипов("СправочникСсылка.ГруппировкиТоварныхОграничений"));
	СлужебныеГруппировки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	СлужебныеГруппировки.Колонки.Добавить("ЕстьРекомендацияПоИзменению", Новый ОписаниеТипов("Булево"));
	Возврат СлужебныеГруппировки;
КонецФункции

Функция ТаблицаОбщихНастроек()
	ОбщиеНастройки = Новый ТаблицаЗначений;
	ОбщиеНастройки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОбщиеНастройки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОбщиеНастройки.Колонки.Добавить("ЕстьРекомендацияПоИзменению", Новый ОписаниеТипов("Булево"));
	Возврат ОбщиеНастройки;
КонецФункции

Процедура ЗапомнитьГруппировкуДляОбновления(ТаблицаСлужебныхГруппировок, Группировка, Склад,
											ЕстьРекомендацияПоИзменению)
	
	Если НЕ ЗначениеЗаполнено(Группировка) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Группировка, Склад", Группировка, Склад);
	НайденныеСтроки = ТаблицаСлужебныхГруппировок.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаГруппировки = НайденныеСтроки[0];
		СтрокаГруппировки.ЕстьРекомендацияПоИзменению	= СтрокаГруппировки.ЕстьРекомендацияПоИзменению
			ИЛИ ЕстьРекомендацияПоИзменению;
	Иначе
		СтрокаГруппировки = ТаблицаСлужебныхГруппировок.Добавить();
		СтрокаГруппировки.Группировка					= Группировка;
		СтрокаГруппировки.Склад							= Склад;
		СтрокаГруппировки.ЕстьРекомендацияПоИзменению	= ЕстьРекомендацияПоИзменению;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапомнитьОбщуюНастройкуДляОбновления(ТаблицаОбщихНастроек, Номенклатура, Склад)
	
	Отбор = Новый Структура("Номенклатура, Склад", Номенклатура, Склад);
	НайденныеСтроки = ТаблицаОбщихНастроек.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ОбщаяНастройка = ТаблицаОбщихНастроек.Добавить();
		ОбщаяНастройка.Номенклатура					= Номенклатура;
		ОбщаяНастройка.Склад						= Склад;
	КонецЕсли;

КонецПроцедуры

Функция Записать(ТаблицаТоваров, ТаблицаГруппировок, ПараметрыДляЗаписи, МетодыДляОтбора = Неопределено)
	
	ТаблицаТоваров.Свернуть("Номенклатура,Характеристика,Склад");
	ТаблицаГруппировок.Свернуть("Группировка");
	
	УстановкаГруппировки = ПараметрыДляЗаписи.Свойство("Группировка");
	ИсключениеИзГруппы = УстановкаГруппировки И ПараметрыДляЗаписи.Группировка.Пустая();
	
	НачатьТранзакцию();
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
		ЭлементБлокировки.ИсточникДанных = ТаблицаТоваров;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",		"Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика",	"Характеристика");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",			"Склад");
		
		Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",	Справочники.Номенклатура.ПустаяСсылка());
			ЭлементБлокировки.УстановитьЗначение("Склад",			Справочники.Склады.ПустаяСсылка());
			ЭлементБлокировки.УстановитьЗначение("Группировка",		СтрокаТаблицы.Группировка);
		КонецЦикла;
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура   КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.Склад          КАК Склад
			|ПОМЕСТИТЬ ВтТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаГруппировок.Группировка КАК Группировка
			|ПОМЕСТИТЬ ВтТаблицаГруппировок
			|ИЗ
			|	&ТаблицаГруппировок КАК ТаблицаГруппировок
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура     КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика   КАК Характеристика,
			|	ТаблицаТоваров.Склад            КАК Склад,
			|	ТоварныеОграничения.Группировка КАК Группировка,
			|
			|	ЕСТЬNULL(ТоварныеОграниченияГруппировки.МетодОбеспеченияПотребностей,
			|		ТоварныеОграничения.МетодОбеспеченияПотребностей)             КАК МетодОбеспеченияПотребностей,
			|	ЕСТЬNULL(ТоварныеОграниченияГруппировки.МинимальноеКоличествоЗапаса,
			|		ТоварныеОграничения.МинимальноеКоличествоЗапаса)              КАК МинимальноеКоличествоЗапаса,
			|	ЕСТЬNULL(ТоварныеОграниченияГруппировки.МаксимальноеКоличествоЗапаса,
			|		ТоварныеОграничения.МаксимальноеКоличествоЗапаса)             КАК МаксимальноеКоличествоЗапаса,
			|	ЕСТЬNULL(ТоварныеОграниченияГруппировки.НормаПотребления,
			|		ТоварныеОграничения.НормаПотребления)                         КАК НормаПотребления,
			|	ЕСТЬNULL(ТоварныеОграниченияГруппировки.СтраховоеКоличествоЗапаса,
			|		ТоварныеОграничения.СтраховоеКоличествоЗапаса)                КАК СтраховоеКоличествоЗапаса,
			|	ЕСТЬNULL(ТоварныеОграниченияГруппировки.ОбеспечениеЗаказовПриПоддержанииЗапаса,
			|		ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса)   КАК ОбеспечениеЗаказовПриПоддержанииЗапаса,
			|
			|	ТоварныеОграничения.УпаковкаЗаказа               КАК УпаковкаЗаказа,
			|	ТоварныеОграничения.СреднедневноеПотребление     КАК СреднедневноеПотребление,
			|	ТоварныеОграничения.СреднееОтклонениеПотребления КАК СреднееОтклонениеПотребления,
			|	ТоварныеОграничения.ЕстьРекомендацияПоИзменению  КАК ЕстьРекомендацияПоИзменению,
			|	ТоварныеОграничения.ДатаРасчетаРекомендаций      КАК ДатаРасчетаРекомендаций,
			|	ТоварныеОграничения.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
			|
			|	ТаблицаТоваров.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		ИЛИ ТаблицаТоваров.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать) КАК ЭтоДетальнаяЗапись,
			|	ЛОЖЬ КАК ЭтоГруппировка
			|ИЗ
			|	ВтТаблицаТоваров КАК ТаблицаТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
			|		ПО ТаблицаТоваров.Номенклатура = ТоварныеОграничения.Номенклатура
			|			И ТаблицаТоваров.Характеристика = ТоварныеОграничения.Характеристика
			|			И ТаблицаТоваров.Склад = ТоварныеОграничения.Склад
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграниченияГруппировки
			|		ПО (ТоварныеОграничения.Группировка = ТоварныеОграниченияГруппировки.Группировка)
			|			И (ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) = ТоварныеОграниченияГруппировки.Номенклатура)
			|			И (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) = ТоварныеОграниченияГруппировки.Склад)
			|ГДЕ
			|	(&БезОтбораПоМетодам
			|			ИЛИ ТоварныеОграничения.МетодОбеспеченияПотребностей В (&МетодыОбеспеченияПотребностей))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
			|	ТаблицаГруппировок.Группировка,
			|
			|	ТоварныеОграничения.МетодОбеспеченияПотребностей,
			|	ТоварныеОграничения.МинимальноеКоличествоЗапаса,
			|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса,
			|	ТоварныеОграничения.НормаПотребления,
			|	ТоварныеОграничения.СтраховоеКоличествоЗапаса,
			|	ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса,
			|
			|	ТоварныеОграничения.УпаковкаЗаказа,
			|	ТоварныеОграничения.СреднедневноеПотребление,
			|	ТоварныеОграничения.СреднееОтклонениеПотребления,
			|	ТоварныеОграничения.ЕстьРекомендацияПоИзменению,
			|	ТоварныеОграничения.ДатаРасчетаРекомендаций,
			|	ТоварныеОграничения.РеквизитДопУпорядочивания,
			|
			|	ЛОЖЬ,
			|	ИСТИНА
			|ИЗ
			|	ВтТаблицаГруппировок КАК ТаблицаГруппировок
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
			|		ПО ТаблицаГруппировок.Группировка = ТоварныеОграничения.Группировка
			|			И (ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) = ТоварныеОграничения.Номенклатура)
			|			И (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) = ТоварныеОграничения.Склад)
			|ГДЕ
			|	(&БезПропускаГруппировки
			|			ИЛИ ТоварныеОграничения.МетодОбеспеченияПотребностей ЕСТЬ NULL)
			|	И (&БезОтбораПоМетодам
			|			ИЛИ ТоварныеОграничения.МетодОбеспеченияПотребностей В (&МетодыОбеспеченияПотребностей))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура     КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика   КАК Характеристика
			|ИЗ
			|	ВтТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.Склад.ЦеховаяКладовая";
		
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		Запрос.УстановитьПараметр("ТаблицаГруппировок", ТаблицаГруппировок);
		
		Запрос.УстановитьПараметр("БезОтбораПоМетодам", МетодыДляОтбора = Неопределено);
		Запрос.УстановитьПараметр("МетодыОбеспеченияПотребностей", МетодыДляОтбора);
		
		// Если при установке группировки уже есть запись группировки, не трогаем её
		Запрос.УстановитьПараметр("БезПропускаГруппировки", НЕ УстановкаГруппировки);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		Выборка = Результат[2].Выбрать();
		ВыборкаДляОбновленияДопРеквизита = Результат[3].Выбрать();
		
		НаборЗаписей = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
		ЗаписьРегистра = НаборЗаписей.Добавить();
		КоличествоЗаписей = 0;
		
		ОбщиеНастройки = ТаблицаОбщихНастроек();
		Группировки = ТаблицаСлужебныхГруппировок();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
			
			Если НЕ ИсключениеИзГруппы Тогда // при исключении из группы берем параметры группировки
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ПараметрыДляЗаписи);
			Иначе
				ЗаписьРегистра.Группировка = Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка();
			КонецЕсли;
			
			Если УстановкаГруппировки И Выборка.ЭтоГруппировка Тогда // записи для группировки нет, заполним по умолчанию
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ПараметрыМинМакс());
				ЗаписьРегистра.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс;
			КонецЕсли;
			
			ЗаписьРегистра.ЭтоДействующийПараметр = ЗначениеЗаполнено(Выборка.Характеристика)
				ИЛИ ЗаписьРегистра.МетодОбеспеченияПотребностей <> Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
				
			Если Выборка.ЭтоДетальнаяЗапись Тогда
				ОбновитьРекомендациюПоИзменениюЗаписиРегистра(ЗаписьРегистра);
				
				Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
					ЗапомнитьОбщуюНастройкуДляОбновления(ОбщиеНастройки, Выборка.Номенклатура, Выборка.Склад);
				КонецЕсли;
			ИначеЕсли НЕ Выборка.ЭтоГруппировка Тогда // общая настройка для номенклатуры
				ЗапомнитьОбщуюНастройкуДляОбновления(ОбщиеНастройки, Выборка.Номенклатура, Выборка.Склад);
			КонецЕсли;
			
			// Запоминаем для каких записей группировки нужно обновить реквизит ЕстьРекомендацияПоИзменению
			Если УстановкаГруппировки И НЕ Выборка.ЭтоГруппировка Тогда
				ЗапомнитьГруппировкуДляОбновления(Группировки, Выборка.Группировка, Выборка.Склад, Ложь);
				ЗапомнитьГруппировкуДляОбновления(Группировки, ПараметрыДляЗаписи.Группировка, Выборка.Склад,
					ЗаписьРегистра.ЕстьРекомендацияПоИзменению);
			КонецЕсли;
			
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
			НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
			Если Выборка.ЭтоГруппировка Тогда
				НаборЗаписей.Отбор.Группировка.Установить(Выборка.Группировка);
			КонецЕсли;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Отбор.Группировка.Использование = Ложь;
			КоличествоЗаписей = КоличествоЗаписей + 1;
			
		КонецЦикла;
		
		ОбновитьРекомендацииПоИзменениюОбщихНастроек(ОбщиеНастройки, Группировки);
		ОбновитьРекомендацииПоИзменениюГруппировок(Группировки);
		
		Пока ВыборкаДляОбновленияДопРеквизита.Следующий() Цикл
			ОбновитьЗначенияРеквизитаДопУпорядочивания(ВыборкаДляОбновленияДопРеквизита.Номенклатура,
				ВыборкаДляОбновленияДопРеквизита.Характеристика);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись в регистр ""Товарные ограничения""'"), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат КоличествоЗаписей;

КонецФункции

Процедура Удалить(ТаблицаТоваров, ТаблицаГруппировок, УдалятьДетальные = Ложь)
	
	ТаблицаТоваров.Свернуть("Номенклатура,Характеристика,Склад");
	ТаблицаГруппировок.Свернуть("Группировка");
	
	НачатьТранзакцию();
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
		ЭлементБлокировки.ИсточникДанных = ТаблицаТоваров;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",		"Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика",	"Характеристика");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",			"Склад");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
		ЭлементБлокировки.ИсточникДанных = ТаблицаГруппировок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Группировка",		"Группировка");
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура   КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.Склад          КАК Склад
			|ПОМЕСТИТЬ ВтТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаГруппировок.Группировка КАК Группировка
			|ПОМЕСТИТЬ ВтТаблицаГруппировок
			|ИЗ
			|	&ТаблицаГруппировок КАК ТаблицаГруппировок
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаписиСУпаковками.Номенклатура             КАК Номенклатура,
			|	ЗаписиСУпаковками.Характеристика           КАК Характеристика,
			|	ЗаписиСУпаковками.Склад                    КАК Склад,
			|	ЗаписиСУпаковками.Группировка              КАК Группировка,
			|	МАКСИМУМ(ЗаписиСУпаковками.ЭтоГруппировка) КАК УдаляетсяВсяГруппировка,
			|	ЗаписиСУпаковками.УпаковкаЗаказа           КАК УпаковкаЗаказа
			|ПОМЕСТИТЬ ВтТаблицаЗаписейСУпаковками
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТоварныеОграничения.Номенклатура КАК Номенклатура,
			|		ТоварныеОграничения.Характеристика КАК Характеристика,
			|		ТоварныеОграничения.Склад КАК Склад,
			|		ТаблицаЗаписейГруппировки.Группировка КАК Группировка,
			|		ИСТИНА КАК ЭтоГруппировка,
			|		ТоварныеОграничения.УпаковкаЗаказа КАК УпаковкаЗаказа
			|	ИЗ
			|		ВтТаблицаГруппировок КАК ТаблицаЗаписейГруппировки
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
			|			ПО ТаблицаЗаписейГруппировки.Группировка = ТоварныеОграничения.Группировка
			|	ГДЕ
			|		(ТоварныеОграничения.УпаковкаЗаказа <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|				ИЛИ ТоварныеОграничения.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|				ИЛИ ТоварныеОграничения.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаЗаписейГруппировки.Номенклатура,
			|		ТаблицаЗаписейГруппировки.Характеристика,
			|		ТаблицаЗаписейГруппировки.Склад,
			|		ТоварныеОграничения.Группировка,
			|		ЛОЖЬ,
			|		ТоварныеОграничения.УпаковкаЗаказа
			|	ИЗ
			|		ВтТаблицаТоваров КАК ТаблицаЗаписейГруппировки
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
			|			ПО ТаблицаЗаписейГруппировки.Номенклатура = ТоварныеОграничения.Номенклатура
			|				И ТаблицаЗаписейГруппировки.Характеристика = ТоварныеОграничения.Характеристика
			|				И ТаблицаЗаписейГруппировки.Склад = ТоварныеОграничения.Склад) КАК ЗаписиСУпаковками
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаписиСУпаковками.Номенклатура,
			|	ЗаписиСУпаковками.Характеристика,
			|	ЗаписиСУпаковками.Склад,
			|	ЗаписиСУпаковками.Группировка,
			|	ЗаписиСУпаковками.УпаковкаЗаказа
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Склад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УдаляемыеЗаписи.Номенклатура                      КАК Номенклатура,
			|	УдаляемыеЗаписи.Характеристика                    КАК Характеристика,
			|	УдаляемыеЗаписи.Склад                             КАК Склад,
			|	УдаляемыеЗаписи.Группировка                       КАК Группировка,
			|	УдаляемыеЗаписи.УдаляетсяВсяГруппировка           КАК УдаляетсяВсяГруппировка,
			|	УдаляемыеЗаписи.УпаковкаЗаказа                    КАК УпаковкаЗаказа,
			|	НЕ ОбщиеНастройки.Номенклатура ЕСТЬ NULL          КАК ЕстьОбщаяНастройка,
			|	НЕ УдаляемыеОбщиеНастройки.Номенклатура ЕСТЬ NULL КАК ОбщаяНастройкаУдаляется
			|ИЗ
			|	ВтТаблицаЗаписейСУпаковками КАК УдаляемыеЗаписи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ОбщиеНастройки
			|		ПО УдаляемыеЗаписи.Номенклатура = ОбщиеНастройки.Номенклатура
			|			И УдаляемыеЗаписи.Склад = ОбщиеНастройки.Склад
			|			И (ОбщиеНастройки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|			И (УдаляемыеЗаписи.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаЗаписейСУпаковками КАК УдаляемыеОбщиеНастройки
			|		ПО УдаляемыеЗаписи.Номенклатура = УдаляемыеОбщиеНастройки.Номенклатура
			|			И УдаляемыеЗаписи.Склад = УдаляемыеОбщиеНастройки.Склад
			|			И (УдаляемыеОбщиеНастройки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|			И (УдаляемыеЗаписи.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|ИТОГИ
			|	МАКСИМУМ(УдаляетсяВсяГруппировка)
			|ПО
			|	Группировка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура     КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика   КАК Характеристика
			|ИЗ
			|	ВтТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.Склад.ЦеховаяКладовая
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ТоварныеОграничения.Номенклатура,
			|	ТоварныеОграничения.Характеристика
			|ИЗ
			|	ВтТаблицаГруппировок КАК ТаблицаЗаписейГруппировки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
			|		ПО ТаблицаЗаписейГруппировки.Группировка = ТоварныеОграничения.Группировка
			|			И ТоварныеОграничения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|ГДЕ
			|	ТоварныеОграничения.Склад.ЦеховаяКладовая";
		
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		Запрос.УстановитьПараметр("ТаблицаГруппировок", ТаблицаГруппировок);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		ВыборкаГруппировка = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДляОбновленияДопРеквизита = Результат[4].Выбрать();
		
		ОбщиеНастройки = ТаблицаОбщихНастроек();
		Группировки = ТаблицаСлужебныхГруппировок();
		
		Пока ВыборкаГруппировка.Следующий() Цикл
			
			Выборка = ВыборкаГруппировка.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
				
				ЗаписьУдаляется = НЕ (ЗначениеЗаполнено(Выборка.УпаковкаЗаказа) 
					ИЛИ (Выборка.ЕстьОбщаяНастройка И НЕ Выборка.ОбщаяНастройкаУдаляется И НЕ УдалятьДетальные));
			
				Если НЕ ЗаписьУдаляется Тогда
					ЗаписьРегистра = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка,, "Группировка");
					ЗаписьРегистра.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
					ЗаписьРегистра.ЭтоДействующийПараметр = Выборка.ЕстьОбщаяНастройка И НЕ УдалятьДетальные;
					ОбновитьРекомендациюПоИзменениюЗаписиРегистра(ЗаписьРегистра);
				КонецЕсли;
				
				// Запоминаем для каких из группировычных записей нужно обновить реквизит ЕстьРекомендацияПоИзменению
				ЕстьРекомендацияПоИзменению = ?(НаборЗаписей.Количество() > 0, ЗаписьРегистра.ЕстьРекомендацияПоИзменению, Ложь);
				Если НЕ Выборка.УдаляетсяВсяГруппировка И ЗначениеЗаполнено(Выборка.Группировка) Тогда
					ЗапомнитьГруппировкуДляОбновления(Группировки, Выборка.Группировка, Выборка.Склад,
						ЕстьРекомендацияПоИзменению);
				КонецЕсли;
				Если Выборка.ЕстьОбщаяНастройка И НЕ Выборка.ОбщаяНастройкаУдаляется Тогда
					ЗапомнитьОбщуюНастройкуДляОбновления(ОбщиеНастройки, Выборка.Номенклатура, Выборка.Склад);
				КонецЕсли;
				
				Если НЕ Выборка.УдаляетсяВсяГруппировка ИЛИ НЕ ЗаписьУдаляется Тогда
					НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
					НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
					НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
					НаборЗаписей.Записать();
				КонецЕсли;
			
			КонецЦикла;
			
			Если ВыборкаГруппировка.УдаляетсяВсяГруппировка Тогда
				НаборЗаписей = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Группировка.Установить(ВыборкаГруппировка.Группировка);
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьРекомендацииПоИзменениюОбщихНастроек(ОбщиеНастройки, Группировки);
		ОбновитьРекомендацииПоИзменениюГруппировок(Группировки);
		
		Пока ВыборкаДляОбновленияДопРеквизита.Следующий() Цикл
			ОбновитьЗначенияРеквизитаДопУпорядочивания(ВыборкаДляОбновленияДопРеквизита.Номенклатура,
				ВыборкаДляОбновленияДопРеквизита.Характеристика);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление записей в регистре ""Товарные ограничения""'"),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьРекомендацииПоИзменениюОбщихНастроек(ОбщиеНастройки, Группировки)
	
	Если ОбщиеНастройки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
	ЭлементБлокировки.ИсточникДанных = ОбщиеНастройки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбщиеНастройки.Номенклатура,
		|	ОбщиеНастройки.Склад
		|ПОМЕСТИТЬ ВтОбщиеНастройки
		|ИЗ
		|	&ОбщиеНастройки КАК ОбщиеНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЕСТЬNULL(ВЫБОР
		|				КОГДА ЕСТЬNULL(ГруппировкиДетальныхНастроек.МетодОбеспеченияПотребностей, ДетальныеНастройки.МетодОбеспеченияПотребностей) <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПустаяСсылка)
		|						И ЕСТЬNULL(ГруппировкиДетальныхНастроек.МетодОбеспеченияПотребностей, ДетальныеНастройки.МетодОбеспеченияПотребностей) <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|					ТОГДА ДетальныеНастройки.ЕстьРекомендацияПоИзменению
		|				ИНАЧЕ НЕ ДетальныеНастройки.ЕстьРекомендацияПоИзменению
		|			КОНЕЦ, ИСТИНА)) КАК ЕстьРекомендацияПоИзменению,
		|	ТоварныеОграничения.Склад,
		|	ТоварныеОграничения.Номенклатура,
		|	ТоварныеОграничения.Характеристика,
		|	ТоварныеОграничения.Группировка,
		|	ТоварныеОграничения.СтраховоеКоличествоЗапаса,
		|	ТоварныеОграничения.МинимальноеКоличествоЗапаса,
		|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса,
		|	ТоварныеОграничения.НормаПотребления,
		|	ТоварныеОграничения.МетодОбеспеченияПотребностей,
		|	ТоварныеОграничения.УпаковкаЗаказа,
		|	ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса,
		|	ТоварныеОграничения.СреднедневноеПотребление,
		|	ТоварныеОграничения.СреднееОтклонениеПотребления,
		|	ТоварныеОграничения.РеквизитДопУпорядочивания,
		|	ТоварныеОграничения.ДатаРасчетаРекомендаций,
		|	ТоварныеОграничения.ЭтоДействующийПараметр,
		|	ТоварныеОграничения.ЭтоГруппировка
		|ИЗ
		|	ВтОбщиеНастройки КАК ОбщиеНастройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ДетальныеНастройки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ГруппировкиДетальныхНастроек
		|			ПО ДетальныеНастройки.Группировка = ГруппировкиДетальныхНастроек.Группировка
		|				И (ДетальныеНастройки.Склад = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка))
		|		ПО ОбщиеНастройки.Номенклатура = ДетальныеНастройки.Номенклатура
		|			И ОбщиеНастройки.Склад = ДетальныеНастройки.Склад
		|			И (ДетальныеНастройки.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|		ПО ОбщиеНастройки.Номенклатура = ТоварныеОграничения.Номенклатура
		|			И ОбщиеНастройки.Склад = ТоварныеОграничения.Склад
		|			И (ТоварныеОграничения.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И ТоварныеОграничения.ЭтоДействующийПараметр
		|ГДЕ
		|	НЕ ТоварныеОграничения.Склад ЕСТЬ NULL
		|	И ОбщиеНастройки.Номенклатура.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварныеОграничения.Склад,
		|	ТоварныеОграничения.Номенклатура,
		|	ТоварныеОграничения.Характеристика,
		|	ТоварныеОграничения.Группировка,
		|	ТоварныеОграничения.СтраховоеКоличествоЗапаса,
		|	ТоварныеОграничения.МинимальноеКоличествоЗапаса,
		|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса,
		|	ТоварныеОграничения.НормаПотребления,
		|	ТоварныеОграничения.МетодОбеспеченияПотребностей,
		|	ТоварныеОграничения.УпаковкаЗаказа,
		|	ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса,
		|	ТоварныеОграничения.СреднедневноеПотребление,
		|	ТоварныеОграничения.СреднееОтклонениеПотребления,
		|	ТоварныеОграничения.РеквизитДопУпорядочивания,
		|	ТоварныеОграничения.ДатаРасчетаРекомендаций,
		|	ТоварныеОграничения.ЭтоДействующийПараметр,
		|	ТоварныеОграничения.ЭтоГруппировка,
		|	ТоварныеОграничения.ЕстьРекомендацияПоИзменению
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ЕСТЬNULL(ВЫБОР
		|				КОГДА ДетальныеНастройки.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПустаяСсылка)
		|						И ДетальныеНастройки.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|					ТОГДА ДетальныеНастройки.ЕстьРекомендацияПоИзменению
		|				ИНАЧЕ НЕ ДетальныеНастройки.ЕстьРекомендацияПоИзменению
		|			КОНЕЦ, ИСТИНА)) <> ТоварныеОграничения.ЕстьРекомендацияПоИзменению";
		
	Запрос.УстановитьПараметр("ОбщиеНастройки", ОбщиеНастройки);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",		"Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика",	"Характеристика");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",			"Склад");
	Блокировка.Заблокировать();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		
		ЗаписьРегистра = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
		
		Если ЗначениеЗаполнено(Выборка.Группировка) Тогда
			ЗапомнитьГруппировкуДляОбновления(Группировки, Выборка.Группировка, Выборка.Склад, Выборка.ЕстьРекомендацияПоИзменению);
		КонецЕсли;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРекомендацииПоИзменениюГруппировок(Группировки)
	
	Если Группировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("ЕстьРекомендацияПоИзменению", Ложь);
	БезРекомендаций = Группировки.Скопировать(Группировки.НайтиСтроки(ОтборСтрок));
	
	Группировки.Колонки.Добавить("КоличествоЗаписей", Новый ОписаниеТипов("Число"));
	
	Если БезРекомендаций.Количество() > 0 Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
		ЭлементБлокировки.ИсточникДанных = БезРекомендаций;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Группировка",	"Группировка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",		"Склад");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	БезРекомендаций.Группировка,
			|	БезРекомендаций.Склад
			|ПОМЕСТИТЬ ВтГруппировки
			|ИЗ
			|	&БезРекомендаций КАК БезРекомендаций
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Группировки.Группировка КАК Группировка,
			|	Группировки.Склад КАК Склад,
			|	МАКСИМУМ(ЕСТЬNULL(ТоварныеОграничения.ЕстьРекомендацияПоИзменению, ЛОЖЬ)) КАК ЕстьРекомендацияПоИзменению,
			|	КОЛИЧЕСТВО(ТоварныеОграничения.Номенклатура) КАК КоличествоЗаписей
			|ИЗ
			|	ВтГруппировки КАК Группировки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
			|		ПО Группировки.Группировка = ТоварныеОграничения.Группировка
			|			И Группировки.Склад = ТоварныеОграничения.Склад
			|			И (ТоварныеОграничения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.номенклатура.ПустаяСсылка))
			|
			|СГРУППИРОВАТЬ ПО
			|	Группировки.Группировка,
			|	Группировки.Склад";
			
		Запрос.УстановитьПараметр("БезРекомендаций", БезРекомендаций);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			ОтборСтрок = Новый Структура("Группировка, Склад", Выборка.Группировка, Выборка.Склад);
			ЗаполнитьЗначенияСвойств(Группировки.НайтиСтроки(ОтборСтрок)[0], Выборка);
		КонецЦикла;
	КонецЕсли;
	
	Группировки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТоварныеОграничения");
	ЭлементБлокировки.ИсточникДанных = Группировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",		"Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",			"Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Группировка",		"Группировка");
	Блокировка.Заблокировать();
	
	Для каждого Настройка Из Группировки Цикл
		Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
		Набор.Отбор.Номенклатура.Установить(Настройка.Номенклатура);
		Набор.Отбор.Склад.Установить(Настройка.Склад);
		Набор.Отбор.Группировка.Установить(Настройка.Группировка);
		Если НЕ Настройка.ЕстьРекомендацияПоИзменению И Настройка.КоличествоЗаписей = 0 Тогда 
			// По складу нет товаров в группировке, служебная запись не нужна
			Набор.Записать();
		Иначе
			Набор.Прочитать();
			Записывать = Ложь;
			Если Набор.Количество() = 0 Тогда
				// Первый товар по складу в группировке, добавим служебную запись
				ЗаписьРегистра = Набор.Добавить();
				ЗаписьРегистра.Склад					= Настройка.Склад;
				ЗаписьРегистра.Группировка				= Настройка.Группировка;
				ЗаписьРегистра.ЭтоДействующийПараметр	= Истина;
				ЗаписьРегистра.ЭтоГруппировка			= Истина;
				Записывать = Истина;
			КонецЕсли;
			Если Набор[0].ЕстьРекомендацияПоИзменению <> Настройка.ЕстьРекомендацияПоИзменению ИЛИ Записывать Тогда
				Набор[0].ЕстьРекомендацияПоИзменению = Настройка.ЕстьРекомендацияПоИзменению;
				Набор.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРекомендациюПоИзменениюЗаписиРегистра(ЗаписьРегистра)
	
	ПотреблениеСтабильно = ЗаписьРегистра.СреднедневноеПотребление > 0
		И ЗаписьРегистра.СреднееОтклонениеПотребления / ЗаписьРегистра.СреднедневноеПотребление < 0.05;
	ЗапасПоддерживается = ЗначениеЗаполнено(ЗаписьРегистра.Группировка)
		ИЛИ ЗначениеЗаполнено(ЗаписьРегистра.МетодОбеспеченияПотребностей)
			И ЗаписьРегистра.МетодОбеспеченияПотребностей <> Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
	ЗаписьРегистра.ЕстьРекомендацияПоИзменению = (ПотреблениеСтабильно И НЕ ЗапасПоддерживается)
		ИЛИ (НЕ ПотреблениеСтабильно И ЗапасПоддерживается);
	
КонецПроцедуры

Процедура ПодставитьВыраженияПолейВыборки(РезультатПодстановки, Поля, СинонимТаблицы)

	Для Каждого Поле Из Поля Цикл

		ПодстрокаПоиска = СинонимТаблицы + "." + Поле.Имя;
		ПодстрокаЗамены = "	ЕСТЬNULL(НастройкаДетальная.Имя, ЕСТЬNULL(НастройкаГруппировки.Имя, ЕСТЬNULL(НастройкаОбщая.Имя, НастройкаГруппировкиОбщейНастройки.Имя)))";
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "Имя", Поле.Имя);
		РезультатПодстановки = СтрЗаменить(РезультатПодстановки, ПодстрокаПоиска, ПодстрокаЗамены);

	КонецЦикла;

КонецПРоцедуры

Процедура ОбновитьЗначенияРеквизитаДопУпорядочивания(Номенклатура, Характеристика)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ТоварныеОграничения");
	ЭлементБлокировки.УстановитьЗначение("Номенклатура",	Номенклатура);
	ЭлементБлокировки.УстановитьЗначение("Характеристика",	Характеристика);
	
	БлокировкаДанных.Заблокировать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И Таблица.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И Таблица.Группировка = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И Таблица.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И Таблица.Группировка = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК НомерГруппы,
	|	Таблица.Склад,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Группировка,
	|	Таблица.СтраховоеКоличествоЗапаса,
	|	Таблица.МинимальноеКоличествоЗапаса,
	|	Таблица.МаксимальноеКоличествоЗапаса,
	|	Таблица.НормаПотребления,
	|	Таблица.МетодОбеспеченияПотребностей,
	|	Таблица.УпаковкаЗаказа,
	|	Таблица.ОбеспечениеЗаказовПриПоддержанииЗапаса,
	|	Таблица.СреднедневноеПотребление,
	|	Таблица.СреднееОтклонениеПотребления,
	|	Таблица.РеквизитДопУпорядочивания,
	|	Таблица.ДатаРасчетаРекомендаций,
	|	Таблица.ЭтоДействующийПараметр,
	|	Таблица.ЕстьРекомендацияПоИзменению,
	|	Таблица.ЭтоГруппировка,
	|	ЕСТЬNULL(Таблица.Склад.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ЕСТЬNULL(Таблица.Склад.ЦеховаяКладовая, ЛОЖЬ) КАК ЦеховаяКладовая
	|ИЗ
	|	РегистрСведений.ТоварныеОграничения КАК Таблица
	|ГДЕ
	|	Таблица.Номенклатура = &Номенклатура
	|	И Таблица.Характеристика = &Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерГруппы,
	|	Подразделение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Группировка,
	|	Таблица.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗаписей.Количество() = 0 
		ИЛИ ТаблицаЗаписей.Найти(Истина, "ЦеховаяКладовая") = Неопределено Тогда
		// Нет изменения записей по цеховым кладовым
		Возврат;
	КонецЕсли;
	
	ЗначениеРеквизитаДопУпорядочивания = 0;
	ПредыдущаяЗапись = Новый Структура("НомерГруппы, Подразделение, Номенклатура, Характеристика");
	
	// Создание набора записей
	НаборЗаписей = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
	
	// Нужно обработать следующие комбинации
	// Подразделение, Номенклатура, Характеристика, Группа не указана
	// Подразделение, Номенклатура, Характеристика не указана, Группа не указана
	// Подразделение, Номенклатура, Характеристика, Группа
	Для каждого Выборка Из ТаблицаЗаписей Цикл
		
		Если НЕ Выборка.ЦеховаяКладовая Тогда
			// Запись не относится к цеховой кладовой, поэтому записываем ее как есть
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.РеквизитДопУпорядочивания = 0;
			Продолжить;
		КонецЕсли;
			
		// Запись не отличается от предыдущей
		Если Выборка.НомерГруппы = ПредыдущаяЗапись.НомерГруппы 
			И Выборка.Подразделение = ПредыдущаяЗапись.Подразделение 
			И Выборка.Номенклатура = ПредыдущаяЗапись.Номенклатура 
			И Выборка.Характеристика = ПредыдущаяЗапись.Характеристика Тогда
			
			// Следующее значение упорядочивания
			ЗначениеРеквизитаДопУпорядочивания = ЗначениеРеквизитаДопУпорядочивания + 1;
			
		Иначе
			
			// Сохранение текущей записи
			ЗаполнитьЗначенияСвойств(ПредыдущаяЗапись, Выборка);
			ЗначениеРеквизитаДопУпорядочивания = 1;
			
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.РеквизитДопУпорядочивания = ЗначениеРеквизитаДопУпорядочивания;
			
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Регистрация данных к обработке при обновлении ИБ.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.ТоварныеОграничения.ПолноеИмя();
	
	// № | Ключ записи изменяемых данных                     | Ключ записи читаемых данных                       | № ключа читаемых данных |
	// 1 | <пусто>     - Номенклатура - Хар-ка     - Склад   | <пусто>     - Номенклатура - <пусто>    - Склад   | 2                       |
	// 2 | <пусто>     - Номенклатура - <пусто>    - Склад   | <пусто>     - Номенклатура - Хар-ка     - Склад   | 1                       |
	// 3 | Группировка - Номенклатура - <не важно> - Склад   | Группировка - <пусто>      - <пусто>    - <пусто> | 4                       |
	// 4 | Группировка - <пусто>      - <пусто>    - <пусто> | Группировка - Номенклатура - <не важно> - Склад   | 3                       |
	// 5 | Группировка - <пусто>      - <пусто>    - Склад   | Группировка - Номенклатура - <не важно> - Склад   | 3                       |
	//   |                                                   | Группировка - <пусто>      - <пусто>    - <пусто> | 4                       |
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		// №1.
		// ВАЖНО! Алгоритм обработки рассчитывает на то что читаемые данные (№2) еще не обрабатывались данным обработчиком.
		"ВЫБРАТЬ
		|	ИскомыеЗаписи.Группировка    КАК Группировка,
		|	ИскомыеЗаписи.Номенклатура   КАК Номенклатура,
		|	ИскомыеЗаписи.Характеристика КАК Характеристика,
		|	ИскомыеЗаписи.Склад          КАК Склад
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ИскомыеЗаписи
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ЧитаемаяЗапись
		|		ПО ЧитаемаяЗапись.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Номенклатура   = ИскомыеЗаписи.Номенклатура
		|		 И ЧитаемаяЗапись.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Склад          = ИскомыеЗаписи.Склад
		|		
		|ГДЕ
		|	ИскомыеЗаписи.Группировка      =  ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|	И ИскомыеЗаписи.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ИскомыеЗаписи.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ИскомыеЗаписи.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	И (
		|		// Условие регистрации 1.
		|		НЕ ИскомыеЗаписи.ЕстьРекомендацияПоИзменению
		|			И ИскомыеЗаписи.МетодОбеспеченияПотребностей = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И ИскомыеЗаписи.УпаковкаЗаказа               = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			И ЕСТЬNULL(ЧитаемаяЗапись.МетодОбеспеченияПотребностей, ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ))
		|				= ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|		
		|		// Условие регистрации 2.
		|		ИЛИ (ИскомыеЗаписи.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|				ИЛИ ЕСТЬNULL(ЧитаемаяЗапись.МетодОбеспеченияПотребностей, ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ))
		|						<> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ))
		|			И НЕ ИскомыеЗаписи.ЭтоДействующийПараметр
		|	)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// №2. ВАЖНО! Обработку можно выполнять, только если ранее обработаны все зарегистрированные записи №1.
		|ВЫБРАТЬ
		|	ИскомыеЗаписи.Группировка    КАК Группировка,
		|	ИскомыеЗаписи.Номенклатура   КАК Номенклатура,
		|	ИскомыеЗаписи.Характеристика КАК Характеристика,
		|	ИскомыеЗаписи.Склад          КАК Склад
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ИскомыеЗаписи
		|	
		|ГДЕ
		|	ИскомыеЗаписи.Группировка      =  ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|	И ИскомыеЗаписи.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ИскомыеЗаписи.Характеристика =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ИскомыеЗаписи.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	И (
		|		// Условие регистрации 1.
		|		НЕ ИскомыеЗаписи.ЕстьРекомендацияПоИзменению
		|			И ИскомыеЗаписи.МетодОбеспеченияПотребностей = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И ИскомыеЗаписи.УпаковкаЗаказа               = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		
		|		// Условие регистрации 2.
		|		ИЛИ ИскомыеЗаписи.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И НЕ ИскомыеЗаписи.ЭтоДействующийПараметр
		|	)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// №3.
		// ВАЖНО! Алгоритм обработки рассчитывает на то что читаемые данные (№4) еще не обрабатывались данным обработчиком.
		|ВЫБРАТЬ
		|	ИскомыеЗаписи.Группировка    КАК Группировка,
		|	ИскомыеЗаписи.Номенклатура   КАК Номенклатура,
		|	ИскомыеЗаписи.Характеристика КАК Характеристика,
		|	ИскомыеЗаписи.Склад          КАК Склад
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ИскомыеЗаписи
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ЧитаемаяЗапись
		|		ПО ЧитаемаяЗапись.Группировка    = ИскомыеЗаписи.Группировка
		|		 И ЧитаемаяЗапись.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ЧитаемаяЗаписьВнеГруппировки
		|		ПО ЧитаемаяЗапись.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Номенклатура   = ИскомыеЗаписи.Номенклатура
		|		 И ЧитаемаяЗапись.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Склад          = ИскомыеЗаписи.Склад
		|		
		|ГДЕ
		|	ИскомыеЗаписи.Группировка      <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|	И ИскомыеЗаписи.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ИскомыеЗаписи.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	И НЕ ЧитаемаяЗапись.Группировка ЕСТЬ NULL
		|	
		|	И (
		|		// Условие регистрации 1.
		|		НЕ ИскомыеЗаписи.ЕстьРекомендацияПоИзменению
		|			И ЧитаемаяЗапись.МетодОбеспеченияПотребностей  = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И (ЧитаемаяЗапись.УпаковкаЗаказа = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ИЛИ ВЫБОР
		|					КОГДА ИскомыеЗаписи.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|						ТОГДА ИскомыеЗаписи.Номенклатура
		|					ИНАЧЕ ИскомыеЗаписи.Номенклатура.НаборУпаковок
		|				КОНЕЦ <> ЧитаемаяЗапись.УпаковкаЗаказа.Владелец)
		|			И ЕСТЬNULL(ЧитаемаяЗаписьВнеГруппировки.МетодОбеспеченияПотребностей, ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ))
		|				= ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|		
		|		// Условие регистрации 2.
		|		ИЛИ ЧитаемаяЗапись.МетодОбеспеченияПотребностей  = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И ЧитаемаяЗапись.УпаковкаЗаказа <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			И ИскомыеЗаписи.УпаковкаЗаказа  <> ЧитаемаяЗапись.УпаковкаЗаказа
		|			И ВЫБОР
		|				КОГДА ИскомыеЗаписи.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры) ТОГДА
		|					ИскомыеЗаписи.Номенклатура
		|				Иначе
		|					ИскомыеЗаписи.Номенклатура.НаборУпаковок
		|			КОНЕЦ = ЧитаемаяЗапись.УпаковкаЗаказа.Владелец
		|
		|		// Условие регистрации 3.
		|		ИЛИ НЕ ИскомыеЗаписи.ЭтоДействующийПараметр
		|			И ЧитаемаяЗапись.МетодОбеспеченияПотребностей = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И ЕСТЬNULL(ЧитаемаяЗаписьВнеГруппировки.МетодОбеспеченияПотребностей, ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ))
		|				<> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|		
		|		// Условие регистрации 4.
		|		ИЛИ ЧитаемаяЗапись.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И ЧитаемаяЗапись.УпаковкаЗаказа <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			И ИскомыеЗаписи.УпаковкаЗаказа  <> ЧитаемаяЗапись.УпаковкаЗаказа
		|			И ВЫБОР
		|				КОГДА ИскомыеЗаписи.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры) ТОГДА
		|					ИскомыеЗаписи.Номенклатура
		|				Иначе
		|					ИскомыеЗаписи.Номенклатура.НаборУпаковок
		|			КОНЕЦ = ЧитаемаяЗапись.УпаковкаЗаказа.Владелец
		|		
		|		// Условие регистрации 5.
		|		ИЛИ НЕ ИскомыеЗаписи.ЭтоДействующийПараметр
		|			И ЧитаемаяЗапись.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|	)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Копия предыдущего запроса, кроме полей выбора
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка) КАК Группировка,
		|	ИскомыеЗаписи.Номенклатура                                       КАК Номенклатура,
		|	ИскомыеЗаписи.Характеристика                                     КАК Характеристика,
		|	ИскомыеЗаписи.Склад                                              КАК Склад
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ИскомыеЗаписи
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ЧитаемаяЗапись
		|		ПО ЧитаемаяЗапись.Группировка    = ИскомыеЗаписи.Группировка
		|		 И ЧитаемаяЗапись.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ЧитаемаяЗаписьВнеГруппировки
		|		ПО ЧитаемаяЗапись.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Номенклатура   = ИскомыеЗаписи.Номенклатура
		|		 И ЧитаемаяЗапись.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Склад          = ИскомыеЗаписи.Склад
		|		
		|ГДЕ
		|	ИскомыеЗаписи.Группировка      <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|	И ИскомыеЗаписи.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ИскомыеЗаписи.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	И НЕ ЧитаемаяЗапись.Группировка ЕСТЬ NULL
		|	
		|	И (
		|		// Условие регистрации 1.
		|		НЕ ИскомыеЗаписи.ЕстьРекомендацияПоИзменению
		|			И ЧитаемаяЗапись.МетодОбеспеченияПотребностей  = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И (ЧитаемаяЗапись.УпаковкаЗаказа = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ИЛИ ВЫБОР
		|					КОГДА ИскомыеЗаписи.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|						ТОГДА ИскомыеЗаписи.Номенклатура
		|					ИНАЧЕ ИскомыеЗаписи.Номенклатура.НаборУпаковок
		|				КОНЕЦ <> ЧитаемаяЗапись.УпаковкаЗаказа.Владелец)
		|			И ЕСТЬNULL(ЧитаемаяЗаписьВнеГруппировки.МетодОбеспеченияПотребностей, ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ))
		|				= ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|		
		|		// Условие регистрации 2.
		|		ИЛИ ЧитаемаяЗапись.МетодОбеспеченияПотребностей  = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И ЧитаемаяЗапись.УпаковкаЗаказа <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			И ИскомыеЗаписи.УпаковкаЗаказа  <> ЧитаемаяЗапись.УпаковкаЗаказа
		|			И ВЫБОР
		|				КОГДА ИскомыеЗаписи.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры) ТОГДА
		|					ИскомыеЗаписи.Номенклатура
		|				Иначе
		|					ИскомыеЗаписи.Номенклатура.НаборУпаковок
		|			КОНЕЦ = ЧитаемаяЗапись.УпаковкаЗаказа.Владелец
		|
		|		// Условие регистрации 3.
		|		ИЛИ НЕ ИскомыеЗаписи.ЭтоДействующийПараметр
		|			И ЧитаемаяЗапись.МетодОбеспеченияПотребностей = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И ЕСТЬNULL(ЧитаемаяЗаписьВнеГруппировки.МетодОбеспеченияПотребностей, ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ))
		|				<> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|		
		|		// Условие регистрации 4.
		|		ИЛИ ЧитаемаяЗапись.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|			И ЧитаемаяЗапись.УпаковкаЗаказа <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			И ИскомыеЗаписи.УпаковкаЗаказа  <> ЧитаемаяЗапись.УпаковкаЗаказа
		|			И ВЫБОР
		|				КОГДА ИскомыеЗаписи.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры) ТОГДА
		|					ИскомыеЗаписи.Номенклатура
		|				Иначе
		|					ИскомыеЗаписи.Номенклатура.НаборУпаковок
		|			КОНЕЦ = ЧитаемаяЗапись.УпаковкаЗаказа.Владелец
		|		
		|		// Условие регистрации 5.
		|		ИЛИ НЕ ИскомыеЗаписи.ЭтоДействующийПараметр
		|			И ЧитаемаяЗапись.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|	)
		|
		// №4. ВАЖНО! Обработку можно выполнять, только если ранее обработаны все зарегистрированные записи №3.
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИскомыеЗаписи.Группировка                                    КАК Группировка,
		|	ИскомыеЗаписи.Номенклатура                                   КАК Номенклатура,
		|	ИскомыеЗаписи.Характеристика                                 КАК Характеристика,
		|	ИскомыеЗаписи.Склад                                          КАК Склад
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ИскомыеЗаписи
		|ГДЕ
		|	ИскомыеЗаписи.Группировка      <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|	И ИскомыеЗаписи.Номенклатура   =  ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ИскомыеЗаписи.Характеристика =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ИскомыеЗаписи.Склад          =  ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	И (
		|		// Условие регистрации 1.
		|		ИскомыеЗаписи.МетодОбеспеченияПотребностей = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|		
		|		// Условие регистрации 2.
		|		ИЛИ НЕ ИскомыеЗаписи.ЭтоГруппировка ИЛИ НЕ ИскомыеЗаписи.ЭтоДействующийПараметр
		|		
		|		// Условие регистрации 3.
		|		ИЛИ ИскомыеЗаписи.УпаковкаЗаказа <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// №5. ВАЖНО! Обработку можно выполнять, только если ранее обработаны все зарегистрированные записи №3 И №4.
		|ВЫБРАТЬ
		|	Изменения.Группировка                                            КАК Группировка,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)                   КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)     КАК Характеристика,
		|	Изменения.Склад                                                  КАК Склад
		|ИЗ(
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ИскомыеЗаписи.Группировка                                    КАК Группировка,
		|		ИскомыеЗаписи.Склад                                          КАК Склад,
		|		
		|		1                                                            КАК ЗарегистрироватьКОбработке
		|	ИЗ
		|		РегистрСведений.ТоварныеОграничения КАК ИскомыеЗаписи
		|	ГДЕ
		|		ИскомыеЗаписи.Группировка    <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		И ИскомыеЗаписи.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И ИскомыеЗаписи.Склад        <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		СуществующиеЗаписи.Группировка                               КАК Группировка,
		|		СуществующиеЗаписи.Склад                                     КАК Склад,
		|		
		|		-1                                                           КАК ЗарегистрироватьКОбработке
		|	ИЗ
		|		РегистрСведений.ТоварныеОграничения КАК СуществующиеЗаписи
		|	ГДЕ
		|		СуществующиеЗаписи.Группировка      <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		И СуществующиеЗаписи.Номенклатура   =  ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И СуществующиеЗаписи.Характеристика =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И СуществующиеЗаписи.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	) КАК Изменения
		|СГРУППИРОВАТЬ ПО
		|	Изменения.Группировка, Изменения.Склад
		|ИМЕЮЩИЕ
		|	// Условие регистрации 1 и 2.
		|	СУММА(Изменения.ЗарегистрироватьКОбработке) <> 0";
	
	КлючиЗаписей = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, КлючиЗаписей, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработка данных при обновлении ИБ.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// № | Ключ записи изменяемых данных                     | Ключ записи читаемых данных                       | № ключа читаемых данных |
	// 1 | <пусто>     - Номенклатура - Хар-ка     - Склад   | <пусто>     - Номенклатура - <пусто>    - Склад   | 2,3                     |
	// 2 | <пусто>     - Номенклатура - <пусто>    - Склад   | <пусто>     - Номенклатура - Хар-ка     - Склад   | 1,3                     |
	// 3 | Группировка - Номенклатура - <не важно> - Склад   | Группировка - <пусто>      - <пусто>    - <пусто> | 4,2                     |
	// 4 | Группировка - <пусто>      - <пусто>    - <пусто> | Группировка - Номенклатура - <не важно> - Склад   | 3                       |
	// 5 | Группировка - <пусто>      - <пусто>    - Склад   | Группировка - Номенклатура - <не важно> - Склад   | 3                       |
	//   |                                                   | Группировка - <пусто>      - <пусто>    - <пусто> | 4                       |
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ТоварныеОграничения;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ПараметрыВыборки.ВыбиратьПорциями = Ложь; // Порционность обработки будет реализована средствами обработчика обновления.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗаписиДляОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ПараметрыВыборки);
	
	Если НЕ ЗаписиДляОбработки.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗаписиДляОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ЗаблокированныеЗаписи = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц);
	
	ЗаказПодЗаказ        = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
	ПустаяНоменклатура   = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустойСклад          = Справочники.Склады.ПустаяСсылка();
	ПустаяГруппировка    = Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка();
	ПустаяУпаковка       = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	
#Область Обработка1
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИскомыеЗаписи.Склад          КАК Склад,
		|	ИскомыеЗаписи.Номенклатура   КАК Номенклатура,
		|	ИскомыеЗаписи.Характеристика КАК Характеристика,
		|	ИскомыеЗаписи.Группировка    КАК Группировка
		|ИЗ
		|	ВтДляОбработки КАК ИскомыеЗаписи
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДляОбработки КАК ЧитаемаяЗаписьНеОбработаннаяВГруппировке //обрабатывается в 3 обработчике
		|		ПО ЧитаемаяЗаписьНеОбработаннаяВГруппировке.Группировка    <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьНеОбработаннаяВГруппировке.Номенклатура   = ИскомыеЗаписи.Номенклатура
		|		 И ЧитаемаяЗаписьНеОбработаннаяВГруппировке.Характеристика = ИскомыеЗаписи.Характеристика
		|		 И ЧитаемаяЗаписьНеОбработаннаяВГруппировке.Склад          = ИскомыеЗаписи.Склад
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокировано КАК ЧитаемаяЗапись
		|		ПО ЧитаемаяЗапись.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Номенклатура   = ИскомыеЗаписи.Номенклатура
		|		 И ЧитаемаяЗапись.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Склад          = ИскомыеЗаписи.Склад
		|	
		|ГДЕ
		|	ИскомыеЗаписи.Группировка      =  ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|	И ИскомыеЗаписи.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ИскомыеЗаписи.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ИскомыеЗаписи.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	И ЧитаемаяЗаписьНеОбработаннаяВГруппировке.Группировка ЕСТЬ NULL
		|	И ЧитаемаяЗапись.Группировка ЕСТЬ NULL";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтДляОбработки", ЗаписиДляОбработки.ИмяВременнойТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтЗаблокировано", ЗаблокированныеЗаписи.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Группировка",    Выборка.Группировка);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Выборка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Группировка",    Выборка.Группировка);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", ПустаяХарактеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Выборка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
			Набор.Отбор.Группировка.Установить(Выборка.Группировка);
			Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
			Набор.Отбор.Склад.Установить(Выборка.Склад);
			
			НаборЧитаемыхДанных = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
			НаборЧитаемыхДанных.Отбор.Группировка.Установить(Выборка.Группировка);
			НаборЧитаемыхДанных.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЧитаемыхДанных.Отбор.Характеристика.Установить(ПустаяХарактеристика);
			НаборЧитаемыхДанных.Отбор.Склад.Установить(Выборка.Склад);
			
			Блокировка.Заблокировать();
			Набор.Прочитать();
			НаборЧитаемыхДанных.Прочитать();
			
			Если Набор.Количество() = 0 Тогда // запись удалена
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			Запись = Набор[0];
			
			УсловиеРегистрации1Выполнено = Не Запись.ЕстьРекомендацияПоИзменению
			                                  И Запись.МетодОбеспеченияПотребностей = ЗаказПодЗаказ
			                                  И Запись.УпаковкаЗаказа.Пустая()
			                                  И (НаборЧитаемыхДанных.Количество() = 0 Или НаборЧитаемыхДанных[0].МетодОбеспеченияПотребностей = ЗаказПодЗаказ);
			
			УсловиеРегистрации2Выполнено = (Запись.МетодОбеспеченияПотребностей <> ЗаказПодЗаказ
			                                  Или НаборЧитаемыхДанных.Количество() > 0
			                                      И НаборЧитаемыхДанных[0].МетодОбеспеченияПотребностей <> ЗаказПодЗаказ)
			                                  И Не Запись.ЭтоДействующийПараметр;
			
			ТребуетсяОбработка = УсловиеРегистрации1Выполнено
			                         Или УсловиеРегистрации2Выполнено;
			
			Если Не ТребуетсяОбработка Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			// Обработка данных.
			Если УсловиеРегистрации1Выполнено Тогда
				
				Набор.Удалить(Запись);
				
			Иначе
				
				Если УсловиеРегистрации2Выполнено Тогда
					
					Запись.ЭтоДействующийПараметр = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Шаблон = НСтр("ru = 'Не удалось обработать запись. Группировка: %1, Номенклатура: %2, Характеристика: %3, Склад: %4 по причине: %5'");
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(Шаблон, Выборка.Группировка, Выборка.Номенклатура, Выборка.Характеристика, Выборка.Склад, ПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         Метаданные.РегистрыСведений.ТоварныеОграничения,
			                         Неопределено,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
#КонецОбласти

#Область Обработка2
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИскомыеЗаписи.Склад          КАК Склад,
		|	ИскомыеЗаписи.Номенклатура   КАК Номенклатура,
		|	ИскомыеЗаписи.Характеристика КАК Характеристика,
		|	ИскомыеЗаписи.Группировка    КАК Группировка
		|ИЗ
		|	ВтДляОбработки КАК ИскомыеЗаписи
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДляОбработки КАК ЧитаемаяЗаписьНеОбработанная
		|		ПО ЧитаемаяЗаписьНеОбработанная.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьНеОбработанная.Номенклатура   = ИскомыеЗаписи.Номенклатура
		|		 И ЧитаемаяЗаписьНеОбработанная.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьНеОбработанная.Склад          = ИскомыеЗаписи.Склад
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДляОбработки КАК ЧитаемаяЗаписьНеОбработаннаяВГруппировке //обрабатывается в 3 обработчике
		|		ПО ЧитаемаяЗаписьНеОбработаннаяВГруппировке.Группировка    <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьНеОбработаннаяВГруппировке.Номенклатура   = ИскомыеЗаписи.Номенклатура
		|		 И ЧитаемаяЗаписьНеОбработаннаяВГруппировке.Характеристика = ИскомыеЗаписи.Характеристика
		|		 И ЧитаемаяЗаписьНеОбработаннаяВГруппировке.Склад          = ИскомыеЗаписи.Склад
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокировано КАК ЧитаемаяЗапись
		|		ПО ЧитаемаяЗапись.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Номенклатура   = ИскомыеЗаписи.Номенклатура
		|		 И ЧитаемаяЗапись.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Склад          = ИскомыеЗаписи.Склад
		|	
		|ГДЕ
		|	ИскомыеЗаписи.Группировка      =  ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|	И ИскомыеЗаписи.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ИскомыеЗаписи.Характеристика =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ИскомыеЗаписи.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	И ЧитаемаяЗаписьНеОбработанная.Группировка ЕСТЬ NULL
		|	И ЧитаемаяЗаписьНеОбработаннаяВГруппировке.Группировка ЕСТЬ NULL
		|	И ЧитаемаяЗапись.Группировка ЕСТЬ NULL";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтДляОбработки", ЗаписиДляОбработки.ИмяВременнойТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтЗаблокировано", ЗаблокированныеЗаписи.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Группировка",    Выборка.Группировка);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Выборка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
			Набор.Отбор.Группировка.Установить(Выборка.Группировка);
			Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
			Набор.Отбор.Склад.Установить(Выборка.Склад);
			
			Блокировка.Заблокировать();
			Набор.Прочитать();
			
			Если Набор.Количество() = 0 Тогда // запись удалена
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			Запись = Набор[0];
			
			УсловиеРегистрации1Выполнено = Не Запись.ЕстьРекомендацияПоИзменению
			                                  И Запись.МетодОбеспеченияПотребностей = ЗаказПодЗаказ
			                                  И Запись.УпаковкаЗаказа.Пустая();
			
			УсловиеРегистрации2Выполнено = Запись.МетодОбеспеченияПотребностей <> ЗаказПодЗаказ
			                                  И Не Запись.ЭтоДействующийПараметр;
			
			ТребуетсяОбработка = УсловиеРегистрации1Выполнено
			                         Или УсловиеРегистрации2Выполнено;
			
			Если Не ТребуетсяОбработка Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			// Обработка данных.
			Если УсловиеРегистрации1Выполнено Тогда
				
				Набор.Удалить(Запись);
				
			Иначе
				
				Если УсловиеРегистрации2Выполнено Тогда
					
					Запись.ЭтоДействующийПараметр = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Шаблон = НСтр("ru = 'Не удалось обработать запись. Группировка: %1, Номенклатура: %2, Характеристика: %3, Склад: %4 по причине: %5'");
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(Шаблон, Выборка.Группировка, Выборка.Номенклатура, Выборка.Характеристика, Выборка.Склад, ПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         Метаданные.РегистрыСведений.ТоварныеОграничения,
			                         Неопределено,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
#КонецОбласти
	
#Область Обработка3
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИскомыеЗаписи.Склад          КАК Склад,
		|	ИскомыеЗаписи.Номенклатура   КАК Номенклатура,
		|	ИскомыеЗаписи.Характеристика КАК Характеристика,
		|	ИскомыеЗаписи.Группировка    КАК Группировка,
		|
		|	ВЫБОР
		|		КОГДА ИскомыеЗаписи.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры) ТОГДА
		|			ИскомыеЗаписи.Номенклатура
		|		Иначе
		|			ИскомыеЗаписи.Номенклатура.НаборУпаковок
		|	КОНЕЦ КАК ВладелецДляУпаковки
		|ИЗ
		|	ВтДляОбработки КАК ИскомыеЗаписи
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокировано КАК ЧитаемаяЗапись
		|		ПО ЧитаемаяЗапись.Группировка    = ИскомыеЗаписи.Группировка
		|		 И ЧитаемаяЗапись.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокировано КАК ЧитаемаяЗаписьВнеГруппировки
		|		ПО ЧитаемаяЗаписьВнеГруппировки.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьВнеГруппировки.Номенклатура   = ИскомыеЗаписи.Номенклатура
		|		 И ЧитаемаяЗаписьВнеГруппировки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьВнеГруппировки.Склад          = ИскомыеЗаписи.Склад
		|ГДЕ
		|	ИскомыеЗаписи.Группировка      <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|	И ИскомыеЗаписи.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ИскомыеЗаписи.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	И ЧитаемаяЗапись.Группировка ЕСТЬ NULL
		|	И ЧитаемаяЗаписьВнеГруппировки.Группировка ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтДляОбработки", ЗаписиДляОбработки.ИмяВременнойТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтЗаблокировано", ЗаблокированныеЗаписи.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Группировка",    Выборка.Группировка);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Выборка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Группировка",    Выборка.Группировка);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   ПустаяНоменклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", ПустаяХарактеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          ПустойСклад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Группировка",    ПустаяГруппировка);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", ПустаяХарактеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Выборка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
			Набор.Отбор.Группировка.Установить(Выборка.Группировка);
			Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
			Набор.Отбор.Склад.Установить(Выборка.Склад);
			
			НаборНовый = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
			НаборНовый.Отбор.Группировка.Установить(ПустаяГруппировка);
			НаборНовый.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборНовый.Отбор.Характеристика.Установить(Выборка.Характеристика);
			НаборНовый.Отбор.Склад.Установить(Выборка.Склад);
			
			НаборЧитаемыхДанных = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
			НаборЧитаемыхДанных.Отбор.Группировка.Установить(Выборка.Группировка);
			НаборЧитаемыхДанных.Отбор.Номенклатура.Установить(ПустаяНоменклатура);
			НаборЧитаемыхДанных.Отбор.Характеристика.Установить(ПустаяХарактеристика);
			НаборЧитаемыхДанных.Отбор.Склад.Установить(ПустойСклад);
			
			НаборЧитаемыхДанныхВнеГруппировки = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
			НаборЧитаемыхДанныхВнеГруппировки.Отбор.Группировка.Установить(ПустаяГруппировка);
			НаборЧитаемыхДанныхВнеГруппировки.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЧитаемыхДанныхВнеГруппировки.Отбор.Характеристика.Установить(ПустаяХарактеристика);
			НаборЧитаемыхДанныхВнеГруппировки.Отбор.Склад.Установить(Выборка.Склад);
			
			Блокировка.Заблокировать();
			Набор.Прочитать();
			НаборЧитаемыхДанных.Прочитать();
			НаборЧитаемыхДанныхВнеГруппировки.Прочитать();
			
			Если Набор.Количество() = 0 Или НаборЧитаемыхДанных.Количество() = 0 Тогда // запись удалена
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборНовый);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			Запись = Набор[0];
			ЧитаемыеДанные = НаборЧитаемыхДанных[0];
			ПоддержаниеЗапасаПоНоменклатуреВЦелом = НаборЧитаемыхДанныхВнеГруппировки.Количество() > 0
				И НаборЧитаемыхДанныхВнеГруппировки[0].МетодОбеспеченияПотребностей <> ЗаказПодЗаказ;
			ВладелецУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧитаемыеДанные.УпаковкаЗаказа, "Владелец");
			
			УсловиеРегистрации1Выполнено = Не Запись.ЕстьРекомендацияПоИзменению
			                                  И (ЧитаемыеДанные.УпаковкаЗаказа.Пустая()
			                                     ИЛИ Выборка.ВладелецДляУпаковки <> ВладелецУпаковки)
			                                  И ЧитаемыеДанные.МетодОбеспеченияПотребностей = ЗаказПодЗаказ
			                                  И Не ПоддержаниеЗапасаПоНоменклатуреВЦелом;
			
			УсловиеРегистрации2Выполнено = Не ЧитаемыеДанные.УпаковкаЗаказа.Пустая()
			                                  И ЧитаемыеДанные.УпаковкаЗаказа <> Запись.УпаковкаЗаказа
			                                  И ЧитаемыеДанные.МетодОбеспеченияПотребностей = ЗаказПодЗаказ
			                                  И Выборка.ВладелецДляУпаковки = ВладелецУпаковки;
			
			УсловиеРегистрации3Выполнено = Не Запись.ЭтоДействующийПараметр
			                                  И ЧитаемыеДанные.МетодОбеспеченияПотребностей = ЗаказПодЗаказ
			                                  И ПоддержаниеЗапасаПоНоменклатуреВЦелом;
			
			УсловиеРегистрации4Выполнено = Не ЧитаемыеДанные.УпаковкаЗаказа.Пустая()
			                                  И ЧитаемыеДанные.УпаковкаЗаказа <> Запись.УпаковкаЗаказа
			                                  И ЧитаемыеДанные.МетодОбеспеченияПотребностей <> ЗаказПодЗаказ
			                                  И Выборка.ВладелецДляУпаковки = ВладелецУпаковки;
			
			УсловиеРегистрации5Выполнено = Не Запись.ЭтоДействующийПараметр
			                                  И ЧитаемыеДанные.МетодОбеспеченияПотребностей <> ЗаказПодЗаказ;
			
			ТребуетсяОбработка = УсловиеРегистрации1Выполнено
			                         Или УсловиеРегистрации2Выполнено
			                         Или УсловиеРегистрации3Выполнено
			                         Или УсловиеРегистрации4Выполнено
			                         Или УсловиеРегистрации5Выполнено;
			
			Если Не ТребуетсяОбработка Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборНовый);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			// Обработка данных.
			Если УсловиеРегистрации1Выполнено Тогда
				
				Набор.Удалить(Запись);
				
			ИначеЕсли УсловиеРегистрации2Выполнено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборНовый.Добавить(), Запись,, "Группировка");
				НаборНовый[0].МетодОбеспеченияПотребностей = ЗаказПодЗаказ;
				НаборНовый[0].УпаковкаЗаказа = ЧитаемыеДанные.УпаковкаЗаказа;
				
				Набор.Удалить(Запись);
				
			ИначеЕсли УсловиеРегистрации3Выполнено Тогда
				
				ЗаполнитьЗначенияСвойств(НаборНовый.Добавить(), Запись,, "Группировка");
				НаборНовый[0].МетодОбеспеченияПотребностей = ЗаказПодЗаказ;
				НаборНовый[0].ЭтоДействующийПараметр = Истина;
				
				Набор.Удалить(Запись);
				
			Иначе
				
				Если УсловиеРегистрации4Выполнено Тогда
					
					Запись.УпаковкаЗаказа = ЧитаемыеДанные.УпаковкаЗаказа;
					
				КонецЕсли;
				
				Если УсловиеРегистрации5Выполнено Тогда
					
					Запись.ЭтоДействующийПараметр = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			Если НаборНовый.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборНовый);
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборНовый);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Шаблон = НСтр("ru = 'Не удалось обработать запись. Группировка: %1, Номенклатура: %2, Характеристика: %3, Склад: %4 по причине: %5'");
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(Шаблон, Выборка.Группировка, Выборка.Номенклатура, Выборка.Характеристика, Выборка.Склад, ПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         Метаданные.РегистрыСведений.ТоварныеОграничения,
			                         Неопределено,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
#КонецОбласти

#Область Обработка4
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИскомыеЗаписи.Склад          КАК Склад,
		|	ИскомыеЗаписи.Номенклатура   КАК Номенклатура,
		|	ИскомыеЗаписи.Характеристика КАК Характеристика,
		|	ИскомыеЗаписи.Группировка    КАК Группировка
		|ИЗ
		|	ВтДляОбработки КАК ИскомыеЗаписи
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДляОбработки КАК ЧитаемаяЗаписьНеОбработанная
		|		ПО ЧитаемаяЗаписьНеОбработанная.Группировка    =  ИскомыеЗаписи.Группировка
		|		 И ЧитаемаяЗаписьНеОбработанная.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьНеОбработанная.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокировано КАК ЧитаемаяЗапись
		|		ПО ЧитаемаяЗапись.Группировка    =  ИскомыеЗаписи.Группировка
		|		 И ЧитаемаяЗапись.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|ГДЕ
		|	ИскомыеЗаписи.Группировка      <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|	И ИскомыеЗаписи.Номенклатура   =  ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ИскомыеЗаписи.Характеристика =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ИскомыеЗаписи.Склад          =  ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	И ЧитаемаяЗаписьНеОбработанная.Группировка ЕСТЬ NULL
		|	И ЧитаемаяЗапись.Группировка ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтДляОбработки", ЗаписиДляОбработки.ИмяВременнойТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтЗаблокировано", ЗаблокированныеЗаписи.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Группировка",    Выборка.Группировка);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Выборка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
			Набор.Отбор.Группировка.Установить(Выборка.Группировка);
			Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
			Набор.Отбор.Склад.Установить(Выборка.Склад);
			
			Блокировка.Заблокировать();
			Набор.Прочитать();
			
			Если Набор.Количество() = 0 Тогда // запись удалена
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			Запись = Набор[0];
			
			УсловиеРегистрации1Выполнено = Запись.МетодОбеспеченияПотребностей = ЗаказПодЗаказ;
			
			УсловиеРегистрации2Выполнено = Не Запись.ЭтоГруппировка Или Не Запись.ЭтоДействующийПараметр;
			
			УсловиеРегистрации3Выполнено = Не Запись.УпаковкаЗаказа.Пустая();
			
			ТребуетсяОбработка = УсловиеРегистрации1Выполнено
			                         Или УсловиеРегистрации2Выполнено
			                         Или УсловиеРегистрации3Выполнено;
			
			Если Не ТребуетсяОбработка Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			// Обработка данных.
			Если УсловиеРегистрации1Выполнено Тогда
				
				Набор.Удалить(Запись);
				
			Иначе
				
				Если УсловиеРегистрации2Выполнено Тогда
					
					Запись.ЭтоГруппировка = Истина;
					Запись.ЭтоДействующийПараметр = Истина;
					
				КонецЕсли;
				
				Если УсловиеРегистрации3Выполнено Тогда
					
					Запись.УпаковкаЗаказа = ПустаяУпаковка;
					
				КонецЕсли;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			Шаблон = НСтр("ru = 'Не удалось обработать запись. Группировка: %1, Номенклатура: %2, Характеристика: %3, Склад: %4 по причине: %5'");
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(Шаблон, Выборка.Группировка, Выборка.Номенклатура, Выборка.Характеристика, Выборка.Склад, ПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         Метаданные.РегистрыСведений.ТоварныеОграничения,
			                         Неопределено,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
#КонецОбласти

#Область Обработка5
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	ИскомыеЗаписи.Склад          КАК Склад,
		|	ИскомыеЗаписи.Номенклатура   КАК Номенклатура,
		|	ИскомыеЗаписи.Характеристика КАК Характеристика,
		|	ИскомыеЗаписи.Группировка    КАК Группировка
		|ИЗ
		|	ВтДляОбработки КАК ИскомыеЗаписи
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДляОбработки КАК ЧитаемаяЗаписьНеОбработанная
		|		ПО ЧитаемаяЗаписьНеОбработанная.Группировка    =  ИскомыеЗаписи.Группировка
		|		 И ЧитаемаяЗаписьНеОбработанная.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьНеОбработанная.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокировано КАК ЧитаемаяЗапись
		|		ПО ЧитаемаяЗапись.Группировка    =  ИскомыеЗаписи.Группировка
		|		 И ЧитаемаяЗапись.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И ЧитаемаяЗапись.Склад          <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДляОбработки КАК ЧитаемаяЗаписьГруппыНеОбработанная
		|		ПО ЧитаемаяЗаписьГруппыНеОбработанная.Группировка    =  ИскомыеЗаписи.Группировка
		|		 И ЧитаемаяЗаписьГруппыНеОбработанная.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьГруппыНеОбработанная.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьГруппыНеОбработанная.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаблокировано КАК ЧитаемаяЗаписьГруппы
		|		ПО ЧитаемаяЗаписьГруппы.Группировка    =  ИскомыеЗаписи.Группировка
		|		 И ЧитаемаяЗаписьГруппы.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьГруппы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		 И ЧитаемаяЗаписьГруппы.Склад          = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		
		|ГДЕ
		|	ИскомыеЗаписи.Группировка      <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|	И ИскомыеЗаписи.Номенклатура   =  ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ИскомыеЗаписи.Характеристика =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ИскомыеЗаписи.Склад          <>  ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	
		|	И ЧитаемаяЗаписьНеОбработанная.Группировка ЕСТЬ NULL
		|	И ЧитаемаяЗапись.Группировка ЕСТЬ NULL
		|	И ЧитаемаяЗаписьГруппыНеОбработанная.Группировка ЕСТЬ NULL
		|	И ЧитаемаяЗаписьГруппы.Группировка ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтДляОбработки", ЗаписиДляОбработки.ИмяВременнойТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВтЗаблокировано", ЗаблокированныеЗаписи.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗапросЧитаемыхДанных = Новый Запрос();
	ЗапросЧитаемыхДанных.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ТоварныеОграничения КАК ЧитаемыеДанные
	|ГДЕ
	|	ЧитаемыеДанные.Группировка = &Группировка
	|	И ЧитаемыеДанные.Склад     = &Склад
	|	И ЧитаемыеДанные.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Группировка",    Выборка.Группировка);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Выборка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Группировка",    Выборка.Группировка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
			Набор.Отбор.Группировка.Установить(Выборка.Группировка);
			Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
			Набор.Отбор.Склад.Установить(Выборка.Склад);
			
			ЗапросЧитаемыхДанных.УстановитьПараметр("Группировка", Выборка.Группировка);
			ЗапросЧитаемыхДанных.УстановитьПараметр("Склад",       Выборка.Склад);
			
			Блокировка.Заблокировать();
			Набор.Прочитать();
			ЕстьЗаписиПоСкладу = Не ЗапросЧитаемыхДанных.Выполнить().Пустой();
			
			УсловиеРегистрации1Выполнено = Набор.Количество() > 0 И Не ЕстьЗаписиПоСкладу;
			УсловиеРегистрации2Выполнено = Набор.Количество() = 0 И ЕстьЗаписиПоСкладу;
			
			ТребуетсяОбработка = УсловиеРегистрации1Выполнено
			                         Или УсловиеРегистрации2Выполнено;
			
			Если Не ТребуетсяОбработка Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			// Обработка данных.
			Если УсловиеРегистрации1Выполнено Тогда
				
				Набор.Удалить(Запись);
				
			Иначе
				
				Если УсловиеРегистрации2Выполнено Тогда
					
					НоваяЗапись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
					НоваяЗапись.ЭтоГруппировка = Истина;
					НоваяЗапись.ЭтоДействующийПараметр = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Шаблон = НСтр("ru = 'Не удалось обработать запись. Группировка: %1, Номенклатура: %2, Характеристика: %3, Склад: %4 по причине: %5'");
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(Шаблон, Выборка.Группировка, Выборка.Номенклатура, Выборка.Характеристика, Выборка.Склад, ПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         Метаданные.РегистрыСведений.ТоварныеОграничения,
			                         Неопределено,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
#КонецОбласти
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
