#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Записывает данные документы в регистр сведений ДанныеВнутреннихДокументов
//
// Параметры:
//  Ссылка					 - ДокументСсылка - 
//  ДополнительныеСвойства	 - Структура - содержит по ключу ТаблицыДляДвижений структуру
//  										имеющую ключ ТаблицаРеестрДокументов (ТаблицаЗначений)
//  Отказ					 - Булево - 
//
Процедура ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.Ссылка.Установить(Ссылка);
	Набор.Загрузить(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеестрДокументов);
	Набор.Записать();
	
КонецПроцедуры

// Записывает в регистр данные по переданному разделителю записи.
//
// Параметры:
//  РазделительЗаписи		 - ОпределяемыйТип.РазделительЗаписиРеестраДокументов - измерение, по которому необходимо выполнить запись. 
//  ДополнительныеСвойства	 - Структура - содержит по ключу ТаблицыДляДвижений структуру
//  	имеющую ключ ТаблицаРеестрДокументов (ТаблицаЗначений)
// ЗамещатьЗаписи			 - Булево - определяет режим замещения существующих записей разделителя. Истина - перед записью существующие
//		записи будут удалены. Ложь - записи будут дописаны к уже существующим в информационной базе записям.
//
Процедура ЗаписатьДанныеРазделителя(РазделительЗаписи, ДополнительныеСвойства, ЗамещатьЗаписи = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.РазделительЗаписи.Установить(РазделительЗаписи);
	Набор.Загрузить(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРеестрДокументов);
	Набор.Записать(ЗамещатьЗаписи);
	
КонецПроцедуры

// Инициализирует и записывает данные документы в регистр сведений ДанныеВнутреннихДокументов
//
// Параметры:
//  Ссылка				 - 	 - 
//
Процедура ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	МенеджерДокумента.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, "РеестрДокументов");
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт 
	
	ЧастиЗапроса       = Новый Массив;
	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени("РегистрСведений.РеестрДокументов");
	ТипыИсточника      = МетаданныеРегистра.Измерения.Ссылка.Тип.Типы();
	
	ШаблонЗапросаРегистрируемыхДокументов = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	#ИмяДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
	|		ПО (ДанныеРеестра.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	(ДанныеРеестра.ТипСсылки = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)
	|			ИЛИ ДанныеРеестра.Ссылка ЕСТЬ NULL )";
	
	ШаблонЗапросаПерепроводимыхДокументов = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	#ИмяДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
	|		ПО (ДанныеРеестра.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	ДанныеРеестра.Сумма <> #ИмяРеквизитаСуммы";
	
	ШаблонЗапросаОбъединения = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Для Каждого ТипДокумента Из ТипыИсточника Цикл
		
		ТекстЗапроса = ШаблонЗапросаПерепроводимыхДокументов;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента", Метаданные.НайтиПоТипу(ТипДокумента).ПолноеИмя());
		
		РеквизитыДокумента = Метаданные.НайтиПоТипу(ТипДокумента).Реквизиты;
		
		ЧастиЗапроса.Добавить(СтрЗаменить(
				ШаблонЗапросаРегистрируемыхДокументов,
				"#ИмяДокумента",
				Метаданные.НайтиПоТипу(ТипДокумента).ПолноеИмя()));
		
		Если РеквизитыДокумента.Найти("Сумма") <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРеквизитаСуммы", "ДанныеДокумента.Сумма");
		ИначеЕсли РеквизитыДокумента.Найти("СуммаДокумента") <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРеквизитаСуммы", "ДанныеДокумента.СуммаДокумента");
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЧастиЗапроса.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	//++ НЕ УТКА
	ЧастиЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДвижениеПродукцииИМатериалов КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
		|		ПО (ДанныеРеестра.Ссылка = ДанныеДокумента.Ссылка)
		|ГДЕ
		|	ДанныеРеестра.ХозяйственнаяОперация В
		|		(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад),
		|		 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства),
		|		 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство))");
	
	ЧастиЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРеестра.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК ДанныеРеестра
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ДанныеРеестра.Ссылка) = ТИП(Документ.ЭтапПроизводства2_2)
		|	И ДанныеРеестра.ДополнительнаяЗапись");
	
	//-- НЕ УТКА
	//++ НЕ УТ
	ЧастиЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПередачаМатериаловВПроизводство КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
		|		ПО (ДанныеРеестра.Ссылка = ДанныеДокумента.Ссылка)
		|ГДЕ
		|	ДанныеРеестра.ХозяйственнаяОперация  = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство)");
	//-- НЕ УТ
	
	ТекстЗапроса = СтрСоединить(ЧастиЗапроса, ШаблонЗапросаОбъединения);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеестрДокументов.ТипСсылки               КАК ТипСсылки,
	|		РеестрДокументов.Организация             КАК Организация,
	|		РеестрДокументов.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|		РеестрДокументов.Партнер                 КАК Партнер,
	|		РеестрДокументов.Контрагент              КАК Контрагент,
	|		РеестрДокументов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		РеестрДокументов.Подразделение           КАК Подразделение,
	|		РеестрДокументов.МестоХранения           КАК МестоХранения,
	|		РеестрДокументов.ДатаДокументаИБ         КАК ДатаДокументаИБ,
	|		РеестрДокументов.Ссылка                  КАК Ссылка,
	|		РеестрДокументов.РазделительЗаписи       КАК РазделительЗаписи,
	|		СУММА(1) КАК Контроль
	|	ИЗ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеестрДокументов.ТипСсылки,
	|		РеестрДокументов.Организация,
	|		РеестрДокументов.ХозяйственнаяОперация,
	|		РеестрДокументов.Партнер,
	|		РеестрДокументов.Контрагент,
	|		РеестрДокументов.НаправлениеДеятельности,
	|		РеестрДокументов.Подразделение,
	|		РеестрДокументов.МестоХранения,
	|		РеестрДокументов.ДатаДокументаИБ,
	|		РеестрДокументов.Ссылка,
	|		РеестрДокументов.РазделительЗаписи
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(1) > 1) КАК ДанныеРегистра";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ИмяИзмеренияДляОтбора = "Ссылка";
	ПоляУпорядочивания = Новый Массив;
	ПоляУпорядочивания.Добавить("Ссылка.Дата УБЫВ");
	ДополнительныеПараметры.ПоляУпорядочивания = ПоляУпорядочивания;
	ВсеСделано = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Неопределено,
																			"РегистрСведений.РеестрДокументов",
																			Параметры.Очередь,
																			ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ВсеСделано;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
