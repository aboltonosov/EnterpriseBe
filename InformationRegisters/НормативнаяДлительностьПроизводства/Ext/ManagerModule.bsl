#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Рассчитывает нормативную длительность производства
//
// Параметры:
//  ОбъектРасчета - СправочникСсылка.РесурсныеСпецификации, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Календари, Массив - объект расчета или список объектов
//
Процедура Рассчитать(ОбъектРасчета) Экспорт
	
	КоличествоИтераций = 0;
	ЗамерВремени = Производительность.НачатьЗамерВремени("РегистрСведений.НормативнаяДлительностьПроизводства.МодульМенеджера.Рассчитать");
	
	РассчитатьВнутриЗамераВремени(ОбъектРасчета, КоличествоИтераций);
	
	Производительность.ЗакончитьЗамерВремени(ЗамерВремени, КоличествоИтераций);

КонецПроцедуры

// Возвращает длительность производства по спецификации
//
// Параметры:
//  Спецификация - СправочникСсылка.РесурсныеСпецификация, Массив - спецификации
// 
// Возвращаемое значение:
//   - Структура, Соответствие - длительность производства
//
Функция ПолучитьДлительность(Спецификация) Экспорт
	
	МассивСсылок = ПроизводствоСервер.МассивЗначений(Спецификация);
	ТекстЗапроса = ТекстЗапросаДлительностиПроизводстваПоСпецификации();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ТипЗнч(Спецификация) <> Тип("Массив") Тогда
		
		Результат = СтруктураДанныхЗаписиРегистра();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	Иначе
		
		Результат = Новый Соответствие;
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Данные = СтруктураДанныхЗаписиРегистра();
				ЗаполнитьЗначенияСвойств(Данные, Выборка);
				Результат.Вставить(Выборка.Спецификация, Данные);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Элемент Из Спецификация Цикл
			Если Результат.Получить(Элемент) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Данные = СтруктураДанныхЗаписиРегистра();
			Результат.Вставить(Элемент, Данные);
		КонецЦикла;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетДлительности

Процедура РассчитатьВнутриЗамераВремени(ОбъектыРасчета, КоличествоИтераций = 0)
	
	Очередь = СоздатьОчередь(ОбъектыРасчета);
	
	УстановитьПривилегированныйРежим(Истина);
	Пока Очередь.ВГраница() <> -1 Цикл
		
		ЕстьОшибки = Ложь;
		ЕстьИзменения = Ложь;
		
		ОбъектРасчета = Очередь[0];
		РасчетПоСпецификации = Ложь;
		
		Задание = РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ПолучитьЗадание(ОбъектРасчета);
		
		// расчет нормативной длительности производства по спецификации
		Если ТипЗнч(ОбъектРасчета) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда 
			
			Спецификация = ОбъектРасчета;
			РасчетПоСпецификации = Истина;
			
			Если Задание.РасчетДнейДоОкончания Тогда
				ЕстьОшибки = ЕстьОшибки ИЛИ Не РегистрыСведений.НормативнаяДлительностьЭтаповПроизводства.Рассчитать(Спецификация);
			КонецЕсли;
			
			Если Не ЕстьОшибки Тогда
				
				РезультатРасчета = ВычислитьДлительность(Спецификация);
				
				НачатьТранзакцию();
				Попытка
					
					Блокировка = Новый БлокировкаДанных;
					
					ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НормативнаяДлительностьПроизводства");
					ЭлементБлокировки.УстановитьЗначение("Спецификация", Спецификация);
					
					Блокировка.Заблокировать();
					
					ДлительностьДоИзменения = ПолучитьДлительность(Спецификация);
					
					ЕстьИзменения = Не ДлительностиРавны(РезультатРасчета, ДлительностьДоИзменения);
					Если ЕстьИзменения Тогда
						 ЗаписатьРезультатРасчета(Спецификация, РезультатРасчета);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					
					СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеРасчетНормативнойДлительности();
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать спецификацию: %1 по причине: %2'"),
										Спецификация,
										ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Спецификация.Метаданные(), Спецификация, ТекстСообщения);
					
					ЕстьОшибки = Истина;
					ЕстьИзменения = Ложь;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// добавление в очередь расчета зависимых объектов
		Если ЕстьИзменения Или Не РасчетПоСпецификации Тогда
			
			ЗависимыеОбъекты = ЗависимыеОбъектыРасчета(ОбъектРасчета);
			Если ЗначениеЗаполнено(ЗависимыеОбъекты) Тогда
				
				Если РасчетПоСпецификации Тогда
					ДлительностьЗависимых = ПолучитьДлительность(ЗависимыеОбъекты);
					Для каждого КлючИЗначение Из ДлительностьЗависимых Цикл
						Если КлючИЗначение.Значение.Предел > Макс(РезультатРасчета.ОбщаяДлительность, ДлительностьДоИзменения.ОбщаяДлительность) Тогда
							ЗависимыеОбъекты.Удалить(ЗависимыеОбъекты.Найти(КлючИЗначение.Ключ));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ПараметрыРасчета = РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ПараметрыРасчета(Не РасчетПоСпецификации);
				Для каждого ЗависимыйОбъект Из ЗависимыеОбъекты Цикл
					НомерЗадания = РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ДобавитьОтложенноеЗадание(ЗависимыйОбъект, ПараметрыРасчета);
					Если НомерЗадания <> 1 Тогда
						Продолжить;
					КонецЕсли;
					Очередь.Добавить(ЗависимыйОбъект);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьЗаданияКРасчету = Ложь;
		Если Не ЕстьОшибки Тогда
			ОсталосьВыполнить = 0;
			РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.УдалитьЗадание(Задание, ОсталосьВыполнить);
			ЕстьЗаданияКРасчету = ОсталосьВыполнить > 0;
		КонецЕсли;
		
		Если Не ЕстьЗаданияКРасчету Тогда
			Очередь.Удалить(0);
		КонецЕсли;
		КоличествоИтераций = КоличествоИтераций + 1;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаВтСпецификацииПолуфабрикатов()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Полуфабрикаты.Номенклатура                             КАК Номенклатура,
		|	Полуфабрикаты.Характеристика                           КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
		|	&НачалоПроизводства                                    КАК НачалоПроизводства
		|ПОМЕСТИТЬ ВтСписокКАвтоПодбору
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Полуфабрикаты
		|ГДЕ
		|	Полуфабрикаты.Ссылка = &Спецификация
		|	И Полуфабрикаты.СпособПолученияМатериала       = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
		|	И Полуфабрикаты.ИсточникПолученияПолуфабриката = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|;
		|
		|//////////////////////////////////////////////////
		|" 
		+ УправлениеДаннымиОбИзделиях.ТекстЗапросаСоздатьВТСпецификацииНоменклатурыПоУмолчанию("ВтСписокКАвтоПодбору", Истина) +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Полуфабрикаты.Ссылка                         КАК Ссылка,
		|	Полуфабрикаты.Этап                           КАК Этап,
		|	Полуфабрикаты.ИсточникПолученияПолуфабриката КАК СпецификацияПолуфабриката
		|ПОМЕСТИТЬ ВтСпецификацииПолуфабрикатов
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Полуфабрикаты
		|ГДЕ
		|	Полуфабрикаты.Ссылка = &Спецификация
		|	И Полуфабрикаты.СпособПолученияМатериала        = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
		|	И Полуфабрикаты.ИсточникПолученияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Полуфабрикаты.Ссылка,
		|	Полуфабрикаты.Этап,
		|	СпецификацииПоУмолчанию.Спецификация
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Полуфабрикаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпецификацииНоменклатурыПоУмолчанию КАК СпецификацииПоУмолчанию
		|		ПО Полуфабрикаты.Номенклатура      = СпецификацииПоУмолчанию.Номенклатура
		|			И Полуфабрикаты.Характеристика = СпецификацииПоУмолчанию.Характеристика
		|			И СпецификацииПоУмолчанию.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|ГДЕ
		|	Полуфабрикаты.Ссылка = &Спецификация
		|	И Полуфабрикаты.СпособПолученияМатериала       = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации)
		|	И Полуфабрикаты.ИсточникПолученияПолуфабриката = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтСписокКАвтоПодбору
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСпецификацииНоменклатурыПоУмолчанию
		|;
		|
		|////////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДлительностиПроизводстваПоСпецификации()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДлительностьПроизводства.Спецификация      КАК Спецификация,
		|	ДлительностьПроизводства.Длительность      КАК Длительность,
		|	ДлительностьПроизводства.ОбщаяДлительность КАК ОбщаяДлительность,
		|	ДлительностьПроизводства.Предел            КАК Предел
		|ИЗ
		|	РегистрСведений.НормативнаяДлительностьПроизводства КАК ДлительностьПроизводства
		|ГДЕ
		|	ДлительностьПроизводства.Спецификация В (&МассивСсылок)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетДлительностиПроизводстваПоСпецификации()
	
	ТекстЗапроса = ТекстЗапросаВтСпецификацииПолуфабрикатов() +
		"ВЫБРАТЬ
		|	ДлительностьЭтапов.Спецификация КАК Спецификация,
		|
		|	МАКСИМУМ(ДлительностьЭтапов.ДнейДоОкончания)                                                        КАК Длительность,
		|	МАКСИМУМ(ДлительностьЭтапов.ДнейДоОкончания + isnull(ДлительностьСпецификаций.ОбщаяДлительность,0)) КАК ОбщаяДлительность,
		|
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДлительностьЭтапов.Этап) > 1
		|			ТОГДА 0
		|		ИНАЧЕ МАКСИМУМ(isnull(ДлительностьСпецификаций.ОбщаяДлительность,0))
		|	КОНЕЦ                                                                                  КАК Предел
		|
		|ИЗ
		|	РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК ДлительностьЭтапов
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпецификацииПолуфабрикатов КАК Полуфабрикаты
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативнаяДлительностьПроизводства КАК ДлительностьСпецификаций
		|			ПО Полуфабрикаты.СпецификацияПолуфабриката = ДлительностьСпецификаций.Спецификация
		|
		|		ПО ДлительностьЭтапов.Этап = Полуфабрикаты.Этап
		|			И ДлительностьЭтапов.Спецификация = Полуфабрикаты.Ссылка
		|ГДЕ
		|	ДлительностьЭтапов.Спецификация = &Спецификация
		|
		|СГРУППИРОВАТЬ ПО
		|	ДлительностьЭтапов.Спецификация";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВычислитьДлительность(Спецификация)
	
	ТекстЗапроса = ТекстЗапросаРасчетДлительностиПроизводстваПоСпецификации();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("НачалоПроизводства", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Результат = СтруктураДанныхЗаписиРегистра();
		
	Иначе
		
		Результат = СтруктураДанныхЗаписиРегистра();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьРезультатРасчета(Спецификация, РезультатРасчета, ВызовИзОбработчикаОбновления = Ложь)
	
	Набор = РегистрыСведений.НормативнаяДлительностьПроизводства.СоздатьНаборЗаписей();
	
	Набор.Отбор.Спецификация.Установить(Спецификация);
	
	НоваяЗапись = Набор.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись, РезультатРасчета);
	НоваяЗапись.Спецификация = Спецификация;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВызовИзОбработчикаОбновления Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	Иначе
		Набор.Записать(Истина);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЗависимыеОбъектыРасчета

Функция ЗависимыеОбъектыРасчета(ОбъектРасчета)
	
	ТипИсточника = ТипЗнч(ОбъектРасчета);
	
	Если ТипИсточника <> Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Владелец КАК Спецификация
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК Таблица
		|	//ТекстСоединение
		|ГДЕ
		|	Таблица.Владелец.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
		|	И НЕ Таблица.ПометкаУдаления
		|	И НЕ Таблица.Владелец.ПометкаУдаления
		|	И //ТекстОтбор";
		
		ТекстСоединение = "";
		Если ТипИсточника = Тип("СправочникСсылка.Календари") Тогда
			ТекстСоединение = "
			|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
			|ПО ИСТИНА";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстСоединение", ТекстСоединение);
		
		ТекстОтбор = "ЛОЖЬ";
		Если ТипИсточника = Тип("СправочникСсылка.Календари") Тогда
			ТекстОтбор = "
			|ВЫБОР
			|	КОГДА Таблица.Подразделение.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
			|		ТОГДА ОсновнойКалендарьПредприятия.Значение
			|	ИНАЧЕ Таблица.Подразделение.ГрафикРаботы
			|КОНЕЦ = &ОбъектРасчета";
		ИначеЕсли ТипИсточника = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ТекстОтбор = "Таблица.Подразделение = &ОбъектРасчета";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстОтбор", ТекстОтбор);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ОбъектРасчета", ОбъектРасчета);
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
	Иначе
		
		Возврат Справочники.РесурсныеСпецификации.ЗависимыеСпецификации(ОбъектРасчета);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СоздатьОчередь(ОбъектыРасчета)
	
	Возврат ПроизводствоСервер.МассивЗначений(ОбъектыРасчета, Истина);

КонецФункции

Функция СтруктураДанныхЗаписиРегистра()
	
	Возврат Новый Структура("Длительность,ОбщаяДлительность,Предел",0,0,-1);
	
КонецФункции

Функция ДлительностиРавны(Длительность1, Длительность2)
	
	Для Каждого Свойство Из Длительность1 Цикл
		
		Если Длительность1[Свойство.Ключ] <> Длительность2[Свойство.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПредшественникиКОбработке(Спецификация, НачалоПроизводства, Исключения)
	
	ТекстЗапроса = ТекстЗапросаВтСпецификацииПолуфабрикатов();
	ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Полуфабрикаты.СпецификацияПолуфабриката
		|ИЗ
		|	ВтСпецификацииПолуфабрикатов КАК Полуфабрикаты
		|ГДЕ
		|	НЕ ИСТИНА В
		|				(ВЫБРАТЬ
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.НормативнаяДлительностьПроизводства КАК Т
		|				ГДЕ
		|					Т.Спецификация = Полуфабрикаты.СпецификацияПолуфабриката)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	ОбщегоНазначенияКлиентСервер.СократитьМассив(Результат, Исключения);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РесурсныеСпецификации.Ссылка КАК Спецификация
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|ГДЕ
		|	РесурсныеСпецификации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
		|	И НЕ ИСТИНА В
		|				(ВЫБРАТЬ
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.НормативнаяДлительностьПроизводства КАК Т
		|				ГДЕ
		|					Т.Спецификация = РесурсныеСпецификации.Ссылка)
		|	И НЕ РесурсныеСпецификации.ПометкаУдаления");
	
	ДанныеКОбработке = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ДополнительныеПараметры.ПолноеИмяРегистра             = "РегистрСведений.НормативнаяДлительностьПроизводства";
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		ДанныеКОбработке,
		ДополнительныеПараметры);

КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.НормативнаяДлительностьПроизводства";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыВыборкиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ПараметрыВыборкиДанных.ВыбиратьПорциями = Ложь;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц,
		ПараметрыВыборкиДанных);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыДляОбработки.Спецификация КАК Спецификация
		|ИЗ
		|	" + Результат.ИмяВременнойТаблицы + " КАК ОбъектыДляОбработки");
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	НачалоПроизводства = НачалоДня(ТекущаяДатаСеанса());
	Стек = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	ОшибкиРасчета = Новый Массив;
	
	Пока Стек.ВГраница() <> -1 Цикл
		
		Спецификация = Стек[0];
		
		Предшественники = ПредшественникиКОбработке(Спецификация, НачалоПроизводства, ОшибкиРасчета);
		Если Предшественники.Количество() > 0 Тогда
			
			Для каждого Предшественник Из Предшественники Цикл
				Индекс = Стек.Найти(Предшественник);
				Если Индекс <> Неопределено Тогда
					Стек.Удалить(Индекс);
				КонецЕсли;
				Стек.Вставить(0,Предшественник);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Спецификация", Спецификация);
			
			Блокировка.Заблокировать();
			
			РезультатРасчета = ВычислитьДлительность(Спецификация);
			ЗаписатьРезультатРасчета(Спецификация, РезультатРасчета, Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОшибкиРасчета.Добавить(Спецификация);
			
			ТекстСообщения = НСтр("ru = 'Не удалось рассчитать нормативную длительность производства спецификации: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Спецификация);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				Спецификация.Метаданные(), Спецификация, ТекстСообщения);
			
		КонецПопытки;
		
		Стек.Удалить(0)
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли