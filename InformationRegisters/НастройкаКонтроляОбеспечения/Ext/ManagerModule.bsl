#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает настройку контроля обеспечения склада
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, для которого необходимо получить настройку контроля обеспечения
//	Возвращаемое значение:
//		Булево - настройка контроля обеспечения склада. Неопределено, если настройка отсутствует.
//
Функция НастройкаСклада(Склад) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Настройка.Контролировать КАК Контролировать
	|ИЗ
	|	РегистрСведений.НастройкаКонтроляОбеспечения КАК Настройка
	|ГДЕ
	|	Настройка.Склад = &Склад
	|	И Настройка.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Настройка.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");

	Запрос.УстановитьПараметр("Склад", Склад);

	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Контролировать;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Сохраняет настройку контроля обеспечения склада
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, для которого необходимо сохранить настройку контроля обеспечения
//		Контролировать - Булево - необходимость контроля обеспечения по складу, сохраняемое значение.
//
Процедура УстановитьНастройку(Склад, Контролировать) Экспорт

	НастройкаКонтроляОбеспечения = НастройкаСклада(Склад);

	Если НастройкаКонтроляОбеспечения <> Контролировать Тогда

		МенеджерЗаписи = РегистрыСведений.НастройкаКонтроляОбеспечения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Склад = Склад;
		МенеджерЗаписи.Контролировать = Контролировать;

		МенеджерЗаписи.Записать();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяРегистра()
	
	Возврат "РегистрСведений.НастройкаКонтроляОбеспечения";
	
КонецФункции

// Регистрация данных к обработке при обновлении ИБ.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НастройкаКонтроляОбеспечения.Склад          КАК Склад,
		|	НастройкаКонтроляОбеспечения.Номенклатура   КАК Номенклатура,
		|	НастройкаКонтроляОбеспечения.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспечения
		|ГДЕ
		|	НастройкаКонтроляОбеспечения.Номенклатура.ЭтоГруппа";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	КлючиЗаписей = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, КлючиЗаписей, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработка данных при обновлении ИБ.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкаКонтроляОбеспечения.СоздатьНаборЗаписей();
	
	ДанныеКОбработке = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяРегистра());
	
	Пока ДанныеКОбработке.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра());
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Склад",          ДанныеКОбработке.Склад);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   ДанныеКОбработке.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", ДанныеКОбработке.Характеристика);
			
			Блокировка.Заблокировать();
			
		Исключение
			
			ЗафиксироватьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		Попытка
			
			НаборЗаписей.Отбор.Склад.Установить(ДанныеКОбработке.Склад);
			НаборЗаписей.Отбор.Номенклатура.Установить(ДанныеКОбработке.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ДанныеКОбработке.Характеристика);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра());
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.НастройкаКонтроляОбеспечения,
				Неопределено,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли