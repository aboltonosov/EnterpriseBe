#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Выполняет анализ всех неотраженных операций,
//	ищет для них ненастроенные счета учета и заносит эти данные в регистр ненастроенных счетов учета.
//
//	Параметры:
//		СтруктураПараметров - Структура - содержит следующие значения:
//			* МассивАнализируемыхТаблиц - Массив - массив строк, каждое значение которого является именем регистра сведений порядка отражения,
//				в модуле менеджера которого размещается метод "ЗаполнитьРегистрТребующихНастройкиНаОснованииАнализаНеотраженныхОпераций".
//			* МассивОрганизаций - Массив - СправочникСсылка.Организации - отбор по организациям, операции которых будут анализироваться;
//			* ДатаОкончанияПериода - СтандартнаяДатаНачала - конец периода определяется на основании этой даты
//				(см. метод "Обработки.НастройкаОтраженияДокументовВРеглУчете.ПериодКОтражениюВРеглУчете");
//
Процедура АнализСчетовТребующихНастройки(СтруктураПараметров) Экспорт
	
	ПараметрыАнализа = Новый Структура("МассивОрганизаций, ДатаОкончанияПериода");
	ЗаполнитьЗначенияСвойств(ПараметрыАнализа, СтруктураПараметров);
	ПараметрыАнализа.Вставить("РежимАнализа", "ПоНеотраженным");
	
	Для каждого Таблица из СтруктураПараметров.МассивАнализируемыхТаблиц Цикл
		
		МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений."+Таблица);
		МенеджерРегистра.ЗаполнитьРегистрТребующихНастройкиНаОснованииАнализаНеотраженныхОпераций(ПараметрыАнализа);
		
	КонецЦикла;
	
КонецПроцедуры

// При записи аналитики учета (см. тип значения соответствующего измерения регистра), проверяется заполненность счетов
//		и по каждому заполненному очищаются соответствующие этому счету и аналитике записи в регистре счетов, требующих настройки.
//
//	Параметры:
//		Аналитика учета - СправочникСсылка.(КатегорииЭксплуатации, БанковскиеСчетаОрганизаций, Кассы, ВидыПодарочныхСертификатов,
//											ГруппыФинансовогоУчетаРасчетов, ГруппыФинансовогоУчетаНоменклатуры),
//						ПланВидовХарактеристикСсылка.(СтатьиДоходов, СтатьиРасходов) - аналитика учета, записи которой очищаются;
//		ВидыСчета - Массив - ПеречислениеСсылка.ВидыСчетовРеглУчета - массив счетов, записи по которым очищаются;
//		Организация - СправочникСсылка.Организации - организация, записи по которой очищаются (если задана);
//		МестоУчета - СправочникСсылка.(СтруктураПредприятия, Партнеры, Склады)- место учета, записи по которому очищаются (если задано).
//
Процедура ОчиститьПриЗаписиАналитикиУчета(АналитикаУчета, ВидыСчета, Организация = Неопределено, МестоУчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("АналитикаУчета", АналитикаУчета);
	СтруктураИзмерений.Вставить("Организация", Организация);
	СтруктураИзмерений.Вставить("МестоУчета", МестоУчета);
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СчетаРеглУчетаТребующиеНастройки");
		Для каждого ЭлементИзмерения из СтруктураИзмерений Цикл
			Если ЗначениеЗаполнено(ЭлементИзмерения.Значение) Тогда
				ЭлементБлокировкиДанных.УстановитьЗначение(ЭлементИзмерения.Ключ, ЭлементИзмерения.Значение);
			КонецЕсли;
		КонецЦикла;
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|ГДЕ
		|	(&Организация = Неопределено ИЛИ СчетаРеглУчетаТребующиеНастройки.Организация = &Организация)
		|	И СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = &АналитикаУчета
		|	И (&МестоУчета = Неопределено ИЛИ СчетаРеглУчетаТребующиеНастройки.МестоУчета = &МестоУчета)
		|	И СчетаРеглУчетаТребующиеНастройки.ВидСчета В(&ВидыСчета)";
		Для каждого ЭлементИзмерения из СтруктураИзмерений Цикл
			Запрос.УстановитьПараметр(ЭлементИзмерения.Ключ, ЭлементИзмерения.Значение);
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыСчета", ВидыСчета);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
	
			НаборЗаписей = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			Для каждого ЭлементИзмерения из СтруктураИзмерений Цикл
				НаборЗаписей.Отбор[ЭлементИзмерения.Ключ].Установить(Выборка[ЭлементИзмерения.Ключ]);
			КонецЦикла;
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Очистка записей регистра счетов регл. учета, требующих настройки'");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, НаборЗаписей.Метаданные(), , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

// При записи регистра порядка отражения счетов учета, проверяется заполненность счетов
//		и по каждому заполненному очищаются соответствующие этому счету, аналитике, организации и месту учета записи в регистре счетов, требующих настройки.
//
//	Параметры:
//		ВременнаяТаблицаНовыхДанныхРегистра - МенеджерВременныхТаблиц, содержит таблицу:
//			* ДанныеЗаполненныхСчетовРегистра со следующими данными:
//				** Организация - СправочникСсылка.Организации - организация, записи по которой очищаются;
//				** МестоУчета - СправочникСсылка.(СтруктураПредприятия, Партнеры, Склады) - место учета, записи по которому очищаются;
//				** АналитикаУчета - СправочникСсылка.(КатегорииЭксплуатации, БанковскиеСчетаОрганизаций, Кассы, ВидыПодарочныхСертификатов,
//											ГруппыФинансовогоУчетаРасчетов, ГруппыФинансовогоУчетаНоменклатуры),
//						ПланВидовХарактеристикСсылка.(СтатьиДоходов, СтатьиРасходов) - аналитика учета, записи которой очищаются;
//				** ВидСчета - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета, записи по которому очищаются;
//
Процедура ОчиститьПриЗаписиРегистра(ВременнаяТаблицаНовыхДанныхРегистра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаНовыхДанныхРегистра;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаполненныхСчетовРегистра КАК ДанныеЗаполненныхСчетовРегистра
		|		ПО СчетаРеглУчетаТребующиеНастройки.Организация = ДанныеЗаполненныхСчетовРегистра.Организация
		|			И СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = ДанныеЗаполненныхСчетовРегистра.АналитикаУчета
		|			И СчетаРеглУчетаТребующиеНастройки.МестоУчета = ДанныеЗаполненныхСчетовРегистра.МестоУчета
		|			И СчетаРеглУчетаТребующиеНастройки.ВидСчета = ДанныеЗаполненныхСчетовРегистра.ВидСчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаполненныхСчетовРегистра КАК ДанныеЗаполненныхСчетовРегистра
		|		ПО СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = ДанныеЗаполненныхСчетовРегистра.АналитикаУчета
		|			И СчетаРеглУчетаТребующиеНастройки.ВидСчета = ДанныеЗаполненныхСчетовРегистра.ВидСчета
		|			И ДанныеЗаполненныхСчетовРегистра.ЭтоОбщаяНастройка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СчетаРеглУчетаТребующиеНастройки");
			ЭлементБлокировкиДанных.УстановитьЗначение("АналитикаУчета", Выборка.АналитикаУчета);
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидСчета", Выборка.ВидСчета);
			ЭлементБлокировкиДанных.УстановитьЗначение("Организация", Выборка.Организация);
			ЭлементБлокировкиДанных.УстановитьЗначение("МестоУчета", Выборка.МестоУчета);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
	
			НаборЗаписей = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.АналитикаУчета.Установить(Выборка.АналитикаУчета);
			НаборЗаписей.Отбор.ВидСчета.Установить(Выборка.ВидСчета);
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.МестоУчета.Установить(Выборка.МестоУчета);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Очистка записей регистра счетов регл. учета, требующих настройки'");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, НаборЗаписей.Метаданные(), , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Для каждого из вида счета соответствия, очищает текущие записи регистра по данному счету и записывает новые, находящиеся в соответствующем значении соответствия.
//
//	Параметры:
//		СоответствиеВидовСчетовИРезультатовЗапроса - Соответствие, со следующими значениями:
//			* Ключ - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета, записи которого будут очищаться;
//			* Значение - РезультатЗапроса - записи, которыми будет заполняться набор с отбором по виду счета (колонки должны соответствовать измерениям регистра);
//		ИмяСобытия - Строка - если в процессе заполнения возникнет ошибка, в журнал регистрации она запишется с этим именем события.
//
Процедура ЗаполнитьЗаписиРегистраПоВидамСчетов(СоответствиеВидовСчетовИРезультатовЗапроса, ИмяСобытия = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого ДанныеДляЗаполнения из СоответствиеВидовСчетовИРезультатовЗапроса Цикл
			
			Результат = ДанныеДляЗаполнения.Значение;
			ВидТекущегоСчета = ДанныеДляЗаполнения.Ключ;
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СчетаРеглУчетаТребующиеНастройки");
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидСчета", ВидТекущегоСчета);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписейРегистра = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.ВидСчета.Установить(ВидТекущегоСчета);
			
			Выборка = Результат.Выбрать();
				
			Пока Выборка.Следующий() Цикл
				
				НоваяЗапись = НаборЗаписейРегистра.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				
			КонецЦикла;
			
			НаборЗаписейРегистра.Записать();
			
		КонецЦикла;
			
			ЗафиксироватьТранзакцию();			
	
	Исключение
	
		ОтменитьТранзакцию();
		Если ИмяСобытия = Неопределено Тогда
			ИмяСобытия = НСтр("ru = 'Заполнение записей регистра счетами регл. учета, требующих настройки'");
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	
	КонецПопытки;
	
КонецПроцедуры

// Возвращает список требующихся измерений регистра для указанного вида счета
// (некоторые виды счетов не зависят от места учета или от аналитиики)
//	Параметры:
//		ВидСчета - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета для которого необходимо получить список измерений.
//	ВозвращаемоеЗначение:
//		Массив - массив с типом значений "Строка" - список имен измерений.
//
Функция СписокИзмеренийРегистраПоВидуСчета(ВидСчета, ТолькоОбязательные = Ложь) Экспорт
	
	ВидыСчетовНеЗависящиеОтОрганизации = Новый Массив;
	
	ВидыСчетовНеЗависящиеОтАналитики = Перечисления.ВидыСчетовРеглУчета.ВидыСчетовПроизводства();
	
	ВидыСчетовСОбязательнойАналитикой = Новый Массив;	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСчетовСОбязательнойАналитикой, Перечисления.ВидыСчетовРеглУчета.ВидыСчетовПодарочныхСертификатов());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСчетовСОбязательнойАналитикой, Перечисления.ВидыСчетовРеглУчета.ВидыСчетовДоходов());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСчетовСОбязательнойАналитикой, Перечисления.ВидыСчетовРеглУчета.ВидыСчетовРасходов());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСчетовСОбязательнойАналитикой, Перечисления.ВидыСчетовРеглУчета.ВидыСчетовДенежныхСредств());
	
	ВидыСчетовНеЗависящиеОтМестаУчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСчетовНеЗависящиеОтМестаУчета, Перечисления.ВидыСчетовРеглУчета.ВидыСчетовДенежныхСредств());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСчетовНеЗависящиеОтМестаУчета, Перечисления.ВидыСчетовРеглУчета.ВидыСчетовНоменклатурыПереданнойНаКомиссию());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСчетовНеЗависящиеОтМестаУчета, Перечисления.ВидыСчетовРеглУчета.ВидыСчетовПодарочныхСертификатов());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСчетовНеЗависящиеОтМестаУчета, Перечисления.ВидыСчетовРеглУчета.ВидыСчетовРасчетовСПартнерами());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСчетовНеЗависящиеОтМестаУчета, Перечисления.ВидыСчетовРеглУчета.ВидыСчетовТМЦВЭксплуатации());
	
	МассивВозврата = Новый Массив;
	
	Если ВидыСчетовНеЗависящиеОтОрганизации.Найти(ВидСчета) = Неопределено Тогда
		МассивВозврата.Добавить("Организация");
	КонецЕсли;
	
	Если ВидыСчетовНеЗависящиеОтАналитики.Найти(ВидСчета) = Неопределено
		И (Не ТолькоОбязательные ИЛИ ВидыСчетовСОбязательнойАналитикой.Найти(ВидСчета) <> Неопределено) Тогда
		МассивВозврата.Добавить("АналитикаУчета");
	КонецЕсли;
	
	Если ВидыСчетовНеЗависящиеОтМестаУчета.Найти(ВидСчета) = Неопределено И Не ТолькоОбязательные Тогда
		МассивВозврата.Добавить("МестоУчета");
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает тип измерения "МестоУчета" для каждого из видов счетов
//	Параметры:
//		ВидСчета - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета для которого необходимо получить ограничение измерения.
//	ВозвращаемоеЗначение:
//		ОграничениеТипа - ограничение типа до которого ограничивается измерения при данном виде счета.
//			Если для данного вида счета измерение не используется (является не обязательным) - возвращается Неопределено.
//
Функция ОграничениеТипаМестаУчетаПоВидуСчета(ВидСчета) Экспорт
	
	ЗначениеВозврата = Неопределено;
	
	Если Перечисления.ВидыСчетовРеглУчета.ВидыСчетовДоходов().Найти(ВидСчета) <> Неопределено
		ИЛИ Перечисления.ВидыСчетовРеглУчета.ВидыСчетовРасходов().Найти(ВидСчета) <> Неопределено Тогда
		ЗначениеВозврата = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	КонецЕсли;
	
	Если Перечисления.ВидыСчетовРеглУчета.ВидыСчетовПроизводства().Найти(ВидСчета) <> Неопределено Тогда
		ЗначениеВозврата = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Партнеры");
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

// Возвращает тип измерения "АналитикаУчета" для каждого из видов счетов
//	Параметры:
//		ВидСчета - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета для которого необходимо получить ограничение измерения.
//	ВозвращаемоеЗначение:
//		ОграничениеТипа - ограничение типа до которого ограничивается измерения при данном виде счета.
//			Если для данного вида счета измерение не используется (является не обязательным) - возвращается Неопределено.
//
Функция ОграничениеТипаАналитикаУчетаПоВидуСчета(ВидСчета) Экспорт
	
	ЗначениеВозврата = Неопределено;
	
	Если Перечисления.ВидыСчетовРеглУчета.ВидыСчетовНоменклатуры().Найти(ВидСчета) <> Неопределено
		ИЛИ Перечисления.ВидыСчетовРеглУчета.ВидыСчетовНоменклатурыПереданнойНаКомиссию().Найти(ВидСчета) <> Неопределено Тогда
		ЗначениеВозврата = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
	КонецЕсли;
	
	Если Перечисления.ВидыСчетовРеглУчета.ВидыСчетовРасчетовСПартнерами().Найти(ВидСчета) <> Неопределено Тогда
		ЗначениеВозврата = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
	КонецЕсли;
	
	Если Перечисления.ВидыСчетовРеглУчета.ВидыСчетовДоходов().Найти(ВидСчета) <> Неопределено Тогда
		ЗначениеВозврата = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов");
	КонецЕсли;
	
	Если Перечисления.ВидыСчетовРеглУчета.ВидыСчетовРасходов().Найти(ВидСчета) <> Неопределено Тогда
		ЗначениеВозврата = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов");
	КонецЕсли;
	
	Если Перечисления.ВидыСчетовРеглУчета.ВидыСчетовДенежныхСредств().Найти(ВидСчета) <> Неопределено Тогда
		ЗначениеВозврата = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций, СправочникСсылка.Кассы");
	КонецЕсли;
	
	Если Перечисления.ВидыСчетовРеглУчета.ВидыСчетовПодарочныхСертификатов().Найти(ВидСчета) <> Неопределено Тогда
		ЗначениеВозврата = Новый ОписаниеТипов("СправочникСсылка.ВидыПодарочныхСертификатов");
	КонецЕсли;
	
	Если Перечисления.ВидыСчетовРеглУчета.ВидыСчетовТМЦВЭксплуатации().Найти(ВидСчета) <> Неопределено Тогда
		ЗначениеВозврата = Новый ОписаниеТипов("СправочникСсылка.КатегорииЭксплуатации");
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

#КонецОбласти

#КонецЕсли