#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Рассчитывает нормативную длительность этапов производства
//
// Параметры:
//  Спецификация - СправочникСсылка.РесурсныеСпецификация - объект расчета
// 
// Возвращаемое значение:
//  Булево - результат расчета (Истина, если расчет выполнен успешно)
//
Функция Рассчитать(Спецификация) Экспорт
	
	ЕстьОшибки = Ложь;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НормативнаяДлительностьЭтаповПроизводства");
		ЭлементБлокировки.УстановитьЗначение("Спецификация", Спецификация);
		
		Блокировка.Заблокировать();
		
		РезультатРасчета = РассчитатьПоСпецификации(Спецификация);
		ЗаписатьРезультатРасчета(Спецификация, РезультатРасчета);
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеРасчетНормативнойДлительности();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось рассчитать длительность этапов производства по спецификации: %1 по причине: %2'"),
							Спецификация,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Спецификация.Метаданные(), Спецификация, ТекстСообщения);
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетДлительности

Функция РассчитатьПоСпецификации(Спецификация)
	
	ДанныеДляРасчета = ДанныеДляРасчета(Спецификация);
	
	Отбор = Новый Структура("НомерСледующегоЭтапа", 0);
	РезультатРасчета = ДанныеДляРасчета.СписокЭтапов;
	
	Очередь = РезультатРасчета.НайтиСтроки(Отбор);
	
	Пока Очередь.Количество() > 0 Цикл
		
		Вершина = Очередь[0];
		
		Если Вершина.НомерСледующегоЭтапа = 0 Тогда
			
			РассчитатьРесурсы(Вершина,, ДанныеДляРасчета);
			
		КонецЕсли;
		
		Отбор = Новый Структура("НомерСледующегоЭтапа", Вершина.НомерЭтапа);
		
		Для каждого Узел Из РезультатРасчета.НайтиСтроки(Отбор) Цикл
			
			РассчитатьРесурсы(Узел, Вершина, ДанныеДляРасчета);
			
			Очередь.Добавить(Узел);
			
		КонецЦикла;
		
		Очередь.Удалить(0);
		
	КонецЦикла;
	
	Возврат РезультатРасчета;
	
КонецФункции

Функция ЗаписатьРезультатРасчета(Спецификация, РезультатРасчета, ВызовИзОбработчикаОбновления = Ложь)
	
	Набор = РегистрыСведений.НормативнаяДлительностьЭтаповПроизводства.СоздатьНаборЗаписей();
	
	Набор.Отбор.Спецификация.Установить(Спецификация);
	
	Набор.Загрузить(РезультатРасчета);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВызовИзОбработчикаОбновления Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	Иначе
		Набор.Записать(Истина);
	КонецЕсли;
	
КонецФункции

Функция ДанныеДляРасчета(Спецификация)
	
	//СписокЭтапов
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.Ссылка   КАК Этап,
	|	Таблица.Владелец КАК Спецификация,
	|
	|	Таблица.НомерЭтапа           КАК НомерЭтапа,
	|	Таблица.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|
	|	ВЫБОР
	|		КОГДА Таблица.Подразделение.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА ОсновнойКалендарьПредприятия.Значение
	|		ИНАЧЕ Таблица.Подразделение.ГрафикРаботы
	|	
	|	КОНЕЦ                                     КАК ГрафикРаботы,
	|	Таблица.Подразделение                     КАК Подразделение,
	|
	|	Таблица.ДлительностьЭтапа                 КАК Длительность,
	|	Таблица.ЕдиницаИзмеренияДлительностиЭтапа КАК ЕдиницаИзмерения
	|
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО ИСТИНА
	|ГДЕ
	|	Таблица.Владелец = &Спецификация И НЕ Таблица.ПометкаУдаления
	|");
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	СписокЭтапов = Запрос.Выполнить().Выгрузить();
	
	ОписаниеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	СписокЭтапов.Колонки.Добавить("ДлительностьВДнях", ОписаниеТипа);
	СписокЭтапов.Колонки.Добавить("ДнейДоОкончания", ОписаниеТипа);
	
	ОписаниеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3, ДопустимыйЗнак.Неотрицательный));
	СписокЭтапов.Колонки.Добавить("ДлительностьВЧасах", ОписаниеТипа);
	СписокЭтапов.Колонки.Добавить("ОстатокВЧасах", ОписаниеТипа); // переходящий остаток (в часах)
	
	СписокЭтапов.Индексы.Добавить("НомерСледующегоЭтапа");
	
	//СредняяНормаЧасов
	НаборГрафиков = СписокЭтапов.Скопировать(, "ГрафикРаботы");
	НаборГрафиков.Свернуть("ГрафикРаботы");
	
	СредняяНормаЧасов = УправлениеДаннымиОбИзделиях.СредняяНормаЧасовПоГрафикамРаботы(НаборГрафиков.ВыгрузитьКолонку(0));
	
	ДанныеДляРасчета = Новый Структура("СписокЭтапов,СредняяНормаЧасов",СписокЭтапов,СредняяНормаЧасов);
	Возврат ДанныеДляРасчета;
	
КонецФункции

Функция РассчитатьРесурсы(ОбъектРасчета, Вершина = Неопределено, ДанныеДляРасчета)
	
	СредняяНормаЧасов = ДанныеДляРасчета.СредняяНормаЧасов[ОбъектРасчета.ГрафикРаботы];
	
	Если (ОбъектРасчета.Длительность > 0 
			И ОбъектРасчета.ДлительностьВДнях = 0
			И ОбъектРасчета.ДлительностьВЧасах = 0
		) Тогда
		ДлительностьВДнях = 0;
		ДлительностьВЧасах = 0;
		Если ОбъектРасчета.ЕдиницаИзмерения <> Перечисления.ЕдиницыИзмеренияВремени.День Тогда
		
			Если ( ОбъектРасчета.ЕдиницаИзмерения = Перечисления.ЕдиницыИзмеренияВремени.Час
					ИЛИ ОбъектРасчета.ЕдиницаИзмерения = Перечисления.ЕдиницыИзмеренияВремени.Минута
					ИЛИ ОбъектРасчета.ЕдиницаИзмерения = Перечисления.ЕдиницыИзмеренияВремени.Секунда
				) Тогда
				
				ДлительностьВЧасах = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
					ОбъектРасчета.Длительность,
					ОбъектРасчета.ЕдиницаИзмерения) / 3600;
				
				ДлительностьВДнях = Цел(ДлительностьВЧасах/СредняяНормаЧасов) + ?(ДлительностьВЧасах % СредняяНормаЧасов > 0,1,0);
				
			Иначе
				
				ДлительностьВДнях = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
													ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
																ОбъектРасчета.Длительность,
																ОбъектРасчета.ЕдиницаИзмерения),
													Перечисления.ЕдиницыИзмеренияВремени.День);
			КонецЕсли;
			
		Иначе
			
			ДлительностьВДнях = ОбъектРасчета.Длительность;
			
		КонецЕсли;
		ОбъектРасчета.ДлительностьВДнях = ДлительностьВДнях;
		ОбъектРасчета.ДлительностьВЧасах = ДлительностьВЧасах;
	КонецЕсли;
	
	ДнейДоОкончания = 0;
	Если Вершина <> Неопределено Тогда
		Если (Вершина.ОстатокВЧасах > 0
				И ОбъектРасчета.ДлительностьВЧасах > 0
				И ОбъектРасчета.Подразделение = Вершина.Подразделение
			) Тогда
			СуммарнаяДлительностьВЧасах = Макс(ОбъектРасчета.ДлительностьВЧасах - Вершина.ОстатокВЧасах, 0);
			СуммарнаяДлительностьВДнях = Цел(СуммарнаяДлительностьВЧасах/СредняяНормаЧасов) + ?(СуммарнаяДлительностьВЧасах % СредняяНормаЧасов > 0,1,0);
		Иначе
			СуммарнаяДлительностьВДнях = ОбъектРасчета.ДлительностьВДнях;
		КонецЕсли;
		ДнейДоОкончания = Макс(ОбъектРасчета.ДнейДоОкончания, СуммарнаяДлительностьВДнях + Вершина.ДнейДоОкончания);
	Иначе
		ДнейДоОкончания = ОбъектРасчета.ДлительностьВДнях;
	КонецЕсли;
	ОбъектРасчета.ДнейДоОкончания = ДнейДоОкончания;
	
	ОстатокВЧасах = 0;
	Если ОбъектРасчета.ДлительностьВЧасах > 0 Тогда
		Если (Вершина <> Неопределено 
				И Вершина.ОстатокВЧасах > 0
				И Вершина.Подразделение = ОбъектРасчета.Подразделение
			) Тогда
			Если ОбъектРасчета.ДлительностьВЧасах > Вершина.ОстатокВЧасах Тогда
				ОстатокВЧасах = (ОбъектРасчета.ДнейДоОкончания - Вершина.ДнейДоОкончания) * СредняяНормаЧасов - (ОбъектРасчета.ДлительностьВЧасах - Вершина.ОстатокВЧасах);
			Иначе
				ОстатокВЧасах = Вершина.ОстатокВЧасах - ОбъектРасчета.ДлительностьВЧасах;
			КонецЕсли;
		Иначе
			ОстатокВЧасах = (ОбъектРасчета.ДлительностьВДнях * СредняяНормаЧасов) - ОбъектРасчета.ДлительностьВЧасах;
		КонецЕсли;
	КонецЕсли;
	ОбъектРасчета.ОстатокВЧасах = ОстатокВЧасах;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РесурсныеСпецификации.Ссылка КАК Спецификация
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|ГДЕ
		|	РесурсныеСпецификации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
		|	И НЕ ИСТИНА В
		|				(ВЫБРАТЬ
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК Т
		|				ГДЕ
		|					Т.Спецификация = РесурсныеСпецификации.Ссылка)
		|	И НЕ РесурсныеСпецификации.ПометкаУдаления");
	
	ДанныеКОбработке = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ДополнительныеПараметры.ПолноеИмяРегистра             = "РегистрСведений.НормативнаяДлительностьЭтаповПроизводства";
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		ДанныеКОбработке,
		ДополнительныеПараметры);

КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.НормативнаяДлительностьЭтаповПроизводства";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаблокированныеОбъекты.Ссылка.Владелец КАК Спецификация
		|ПОМЕСТИТЬ ВТЗаблокированныеСпецификации
		|ИЗ
		|	#ЗаблокированныеОбъекты КАК ЗаблокированныеОбъекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыДляОбработки.Спецификация КАК Спецификация
		|ИЗ
		|	#ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированныеСпецификации КАК ЗаблокированныеСпецификации
		|		ПО ОбъектыДляОбработки.Спецификация = ЗаблокированныеСпецификации.Спецификация
		|ГДЕ
		|	ЗаблокированныеСпецификации.Спецификация ЕСТЬ NULL");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗаблокированныеОбъекты = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь,
		"Справочник.ЭтапыПроизводства", 
		МенеджерВременныхТаблиц);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ЗаблокированныеОбъекты", ЗаблокированныеОбъекты.ИмяВременнойТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТОбъектыДляОбработки",  Результат.ИмяВременнойТаблицы);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Спецификация = Выборка.Спецификация;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Спецификация", Спецификация);
			
			Блокировка.Заблокировать();
			
			РезультатРасчета = РассчитатьПоСпецификации(Спецификация);
			ЗаписатьРезультатРасчета(Спецификация, РезультатРасчета, Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось рассчитать нормативную длительность этапов производства спецификации: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Спецификация);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				Спецификация.Метаданные(), Спецификация, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли