#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УТ 11.3.1
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.СтоимостьТоваров.ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.СтоимостьТоваров КАК Данные
	|ГДЕ
	|	Данные.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|	И (Данные.Стоимость <> 0 ИЛИ Данные.СтоимостьБезНДС <> 0 ИЛИ Данные.СтоимостьРегл <> 0)
	|";
	
	Если ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|";
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Данные.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрСведений.СтоимостьТоваров КАК Данные
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
		|		ПО Данные.ВидЗапасов = ВидыЗапасов.Ссылка
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
		|		ПО Данные.АналитикаУчетаНоменклатуры = Ключи.Ссылка
		|ГДЕ
		|	ВидыЗапасов.УдалитьНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И ВидыЗапасов.УдалитьНазначение <> Ключи.Назначение
		|";
		
	КонецЕсли;
	
	УстановитьПараметрЗапросаОбработчикаОбновления(Запрос);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления УТ 11.3.1
// - заполняет новый реквизит "Назначение" в справочнике "Ключи аналитики учета номенклатуры" из вида запасов
// - выделяет забалансовую стоимость в новые ресурсы регистра
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыСведений.СтоимостьТоваров.ПолноеИмя();
	МетаданныеРегистра = Метаданные.РегистрыСведений.СтоимостьТоваров;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор               								КАК Регистратор,
	|	Движения.Период                    								КАК Период,
	|	ВЫБОР КОГДА &ИспользоватьВидыЗапасов
	|		И НЕ Аналитика.КлючАналитики ЕСТЬ NULL
	|		И НЕ ВидыЗапасов.Ссылка ЕСТЬ NULL
	|		И ВидыЗапасов.УдалитьНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ВидыЗапасов.УдалитьНазначение <> Ключи.Назначение
	|		ТОГДА Аналитика.КлючАналитики
	|		ИНАЧЕ Движения.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                  							КАК АналитикаУчетаНоменклатуры,
	|	Движения.ВидЗапасов                								КАК ВидЗапасов,
	|	Движения.Организация               								КАК Организация,
	|	Движения.РазделУчета               								КАК РазделУчета,
	|
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|		ТОГДА 0
	|		ИНАЧЕ Движения.Стоимость
	|	КОНЕЦ 															КАК Стоимость,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|	 И Движения.Стоимость <> 0
	|		ТОГДА Движения.Стоимость
	|		ИНАЧЕ Движения.СтоимостьЗабалансовая
	|	КОНЕЦ 															КАК СтоимостьЗабалансовая,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|		ТОГДА 0
	|		ИНАЧЕ Движения.СтоимостьБезНДС
	|	КОНЕЦ 															КАК СтоимостьБезНДС,
	|	Движения.СтоимостьДопРасходы       								КАК СтоимостьДопРасходы,
	|	Движения.СтоимостьДопРасходыБезНДС 								КАК СтоимостьДопРасходыБезНДС,
	|	Движения.Трудозатраты 											КАК Трудозатраты,
	|	Движения.ПостатейныеСНДС 										КАК ПостатейныеСНДС,
	|	Движения.ПостатейныеБезНДС 										КАК ПостатейныеБезНДС,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|		ТОГДА 0
	|		ИНАЧЕ Движения.СтоимостьРегл
	|	КОНЕЦ 															КАК СтоимостьРегл,
	|	ВЫБОР КОГДА Движения.РазделУчета В (&ЗабалансовыеРазделыУчета)
	|	 И Движения.СтоимостьРегл <> 0
	|		ТОГДА Движения.СтоимостьРегл
	|		ИНАЧЕ Движения.СтоимостьЗабалансоваяРегл
	|	КОНЕЦ 															КАК СтоимостьЗабалансоваяРегл,
	|	Движения.ДопРасходыРегл             							КАК ДопРасходыРегл,
	|	Движения.ТрудозатратыРегл             							КАК ТрудозатратыРегл,
	|	Движения.ПостатейныеРегл             							КАК ПостатейныеРегл,
	|	Движения.ПостояннаяРазница         								КАК ПостояннаяРазница,
	|	Движения.ВременнаяРазница          								КАК ВременнаяРазница,
	|
	|	ВЫБОР КОГДА Аналитика.КлючАналитики ЕСТЬ NULL И &ИспользоватьВидыЗапасов
	|	И НЕ ВидыЗапасов.Ссылка ЕСТЬ NULL
	|	И ВидыЗапасов.УдалитьНазначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ВидыЗапасов.УдалитьНазначение <> Ключи.Назначение
	|		ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КлючиИнициализированы
	|ИЗ
	|	РегистрСведений.СтоимостьТоваров КАК Движения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО Движения.ВидЗапасов = ВидыЗапасов.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.КлючАналитики = Движения.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
	|		И Ключи.Склад = Аналитика.Склад
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|		И ЕСТЬNULL(ВидыЗапасов.УдалитьНазначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) = Аналитика.Назначение
	|
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|УПОРЯДОЧИТЬ ПО
	|	КлючиИнициализированы
	|";
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			УстановитьПараметрЗапросаОбработчикаОбновления(Запрос);
			
			Набор = РегистрыСведений.СтоимостьТоваров.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			ИначеЕсли Результат[0].КлючиИнициализированы = 0 Тогда
				ТекстСообщения = НСтр("ru = 'есть необновленные ключи. Необходимо перепровести документ вручную.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаОбработчикаОбновления(Запрос)
	
	ЗабалансовыеРазделыУчета = Новый Массив;
	ЗабалансовыеРазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию);
	ЗабалансовыеРазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку);
	
	Запрос.УстановитьПараметр("ЗабалансовыеРазделыУчета", ЗабалансовыеРазделыУчета);
	Запрос.УстановитьПараметр("ИспользоватьВидыЗапасов",  ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
