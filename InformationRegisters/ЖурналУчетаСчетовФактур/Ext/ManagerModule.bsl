#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Переносит данные из ресурса УдалитьСчетФактураВыданныйПокупателю в измерение СчетФактураВыданныйПокупателю.
//
Процедура ЗаполнитьИзмерениеСчетФактураВыданныйПокупателю(Параметры) Экспорт

	ТипыИзмерения = Метаданные.РегистрыСведений.ЖурналУчетаСчетовФактур.Измерения.СчетФактураВыданныйПокупателю.Тип.Типы();
	МассивПустыхСсылок = ОбщегоНазначенияБП.ПустыеСсылки(ТипыИзмерения);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.Период
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	НЕ ЖурналУчетаСчетовФактур.УдалитьСчетФактураВыданныйПокупателю В (&МассивПустыхСсылок)
	|	И ЖурналУчетаСчетовФактур.СчетФактураВыданныйПокупателю В(&МассивПустыхСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналУчетаСчетовФактур.Период УБЫВ,
	|	ЖурналУчетаСчетовФактур.Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
	
		Попытка
	
			НаборЗаписей = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(Запись.УдалитьСчетФактураВыданныйПокупателю) Тогда 
					Запись.СчетФактураВыданныйПокупателю = Запись.УдалитьСчетФактураВыданныйПокупателю;
					Запись.УдалитьСчетФактураВыданныйПокупателю = Неопределено;
				КонецЕсли;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();

			ОбъектовОбработано = ОбъектовОбработано + 1;
		
		Исключение
			ИнфоПоОшибке = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
		
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать записи регистра сведений ""Журнал учета счетов-фактур"": %1 по причине:
					|%2'"),
					Выборка.Регистратор,
					ПодробноеПредставлениеОшибки(ИнфоПоОшибке));

			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ЖурналУчетаСчетовФактур,
				Выборка.Регистратор,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;

	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗаполнитьИзмерениеСчетФактураВыданныйПокупателю
				|не удалось обработать некоторые записи регистра ""Журнал учета счетов-фактур"" (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.РегистрыСведений.ЖурналУчетаСчетовФактур,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура ЗаполнитьИзмерениеСчетФактураВыданныйПокупателю
					|обработала очередную порцию записей регистра ""Журнал учета счетов-фактур"": %1 документов'"),
				ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли