#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СтатусГрафикаКонстанты

// Возвращает код статуса рабочего графика.
// 
// 
// Возвращаемое значение:
//  Число - статус графика.
//
Функция СтатусРабочийГрафик() Экспорт
	
	Возврат 0;
	
КонецФункции

// Возвращает код статуса предварительного графика. Предварительный график - это рассчитанный,
// но еще не записанный пользователем график производства заказа. После записи график переходит
// в статус "Рабочий" (см. функцию СтатусРабочийГрафик).
// 
// 
// Возвращаемое значение:
//  Число - статус графика.
//
Функция СтатусПредварительныйГрафик() Экспорт
	
	Возврат 1;
	
КонецФункции

// Возвращает код статуса модели графика. Модель графика рассчитывается без учета одного или нескольких
// ограничений и не может быть сохранена как рабочий график.
// 
// 
// Возвращаемое значение:
//  Число - статус графика.
//
Функция СтатусМодельГрафика() Экспорт
	
	Возврат 2;
	
КонецФункции

#КонецОбласти

#Область Запись

// Записывает результаты планирования графика распоряжения в регистр.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ, график производства которого необходимо записать.
//  СтатусГрафика - Число - статус графика.
//  ГрафикПроизводства - ТаблицаЗначений - данные графика для записи. Состав колонок соответствует
//		составу измерений/ресурсов/реквизитов регистра.
//
Процедура ЗаписатьРезультатыПланирования(Распоряжение, СтатусГрафика, ГрафикПроизводства) Экспорт
	
	Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
	Набор.Отбор.Распоряжение.Установить(Распоряжение);
	Набор.Отбор.СтатусГрафика.Установить(СтатусГрафика);
	
	Если СтатусГрафика = СтатусРабочийГрафик() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГрафикЭтаповПроизводства2_2.*
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
		|ГДЕ
		|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
		|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусГрафика
		|	И НЕ ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В (&Этапы)");
		Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
		Запрос.УстановитьПараметр("СтатусГрафика", СтатусГрафика);
		Запрос.УстановитьПараметр("Этапы", ГрафикПроизводства.ВыгрузитьКолонку("ЭтапПроизводства"));
		
		Набор.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Для каждого Строка Из ГрафикПроизводства Цикл
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		Запись.Распоряжение = Распоряжение;
		Запись.СтатусГрафика = СтатусГрафика;
		
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

// Изменяет статус предварительного графика на рабочий. Вместе с записью рабочего графика
// происходит очистка данных предварительного графика и модели.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - распоряжение, график которого необходимо записать.
//
Процедура ЗаписатьПредварительныйГрафикВРабочий(Распоряжение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение,
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства,
	|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеПредварительногоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоЗавершающегоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоСледующегоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.НаКритическомПути,
	|	ГрафикЭтаповПроизводства2_2.ОграничиваетСрокВыпуска,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоМатериалам,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоОборудованию,
	|	ГрафикЭтаповПроизводства2_2.РазмещениеВыпуска
	|ПОМЕСТИТЬ ПредварительныйГрафик
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусПредварительныйГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительныйГрафик.Распоряжение,
	|	ПредварительныйГрафик.ЭтапПроизводства,
	|	&СтатусРабочийГрафик КАК СтатусГрафика,
	|	ПредварительныйГрафик.НачалоЭтапа,
	|	ПредварительныйГрафик.ОкончаниеЭтапа,
	|	ПредварительныйГрафик.ОкончаниеПредварительногоБуфера,
	|	ПредварительныйГрафик.НачалоЗавершающегоБуфера,
	|	ПредварительныйГрафик.НачалоСледующегоЭтапа,
	|	ПредварительныйГрафик.НаКритическомПути,
	|	ПредварительныйГрафик.ОграничиваетСрокВыпуска,
	|	ПредварительныйГрафик.ОграниченПоМатериалам,
	|	ПредварительныйГрафик.ОграниченПоОборудованию,
	|	ПредварительныйГрафик.РазмещениеВыпуска
	|ИЗ
	|	ПредварительныйГрафик КАК ПредварительныйГрафик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение,
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства,
	|	ГрафикЭтаповПроизводства2_2.СтатусГрафика,
	|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа,
	|	ГрафикЭтаповПроизводства2_2.ОкончаниеПредварительногоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоЗавершающегоБуфера,
	|	ГрафикЭтаповПроизводства2_2.НачалоСледующегоЭтапа,
	|	ГрафикЭтаповПроизводства2_2.НаКритическомПути,
	|	ГрафикЭтаповПроизводства2_2.ОграничиваетСрокВыпуска,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоМатериалам,
	|	ГрафикЭтаповПроизводства2_2.ОграниченПоОборудованию,
	|	ГрафикЭтаповПроизводства2_2.РазмещениеВыпуска
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусРабочийГрафик
	|	И НЕ ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В
	|				(ВЫБРАТЬ
	|					ПредварительныйГрафик.ЭтапПроизводства
	|				ИЗ
	|					ПредварительныйГрафик)");
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("СтатусПредварительныйГрафик", СтатусПредварительныйГрафик());
	Запрос.УстановитьПараметр("СтатусРабочийГрафик", СтатусРабочийГрафик());
	
	ДанныеГрафика = Запрос.Выполнить().Выгрузить();
	
	Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
	Набор.Отбор.Распоряжение.Установить(Распоряжение);
	Набор.Загрузить(ДанныеГрафика);
	Набор.Записать();
	
КонецПроцедуры

// Очищает предварительный график распоряжения.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - распоряжение, график которого необходимо очистить.
//
Процедура ОчиститьПредварительныйГрафик(Распоряжение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|		ГДЕ
	|			ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|			И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусПредварительныйГрафик) КАК ОчиститьПредварительныйГрафик,
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|		ГДЕ
	|			ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
	|			И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусМодельГрафика) КАК ОчиститьМодель");
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	СтатусПредварительныйГрафик = СтатусПредварительныйГрафик();
	Запрос.УстановитьПараметр("СтатусПредварительныйГрафик", СтатусПредварительныйГрафик);
	
	СтатусМодельГрафика = СтатусМодельГрафика();
	Запрос.УстановитьПараметр("СтатусМодельГрафика", СтатусМодельГрафика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ОчиститьПредварительныйГрафик Тогда
		Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
		Набор.Отбор.Распоряжение.Установить(Распоряжение);
		Набор.Отбор.СтатусГрафика.Установить(СтатусПредварительныйГрафик);
		Набор.Записать();
	КонецЕсли;
	
	Если Выборка.ОчиститьМодель Тогда
		Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
		Набор.Отбор.Распоряжение.Установить(Распоряжение);
		Набор.Отбор.СтатусГрафика.Установить(СтатусМодельГрафика);
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Записывает заданное вручную размещение этапа в графике
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - Заказ на производство.
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//  ГрафикПроизводства - Структура - см. УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике()
//
Процедура ЗаписатьРучноеРазмещениеЭтапаВГрафике(Распоряжение, ЭтапПроизводства, ГрафикПроизводства) Экспорт
	
	СтатусГрафика = СтатусРабочийГрафик();
	
	Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
	
	Набор.Отбор.Распоряжение.Установить(Распоряжение);
	Набор.Отбор.СтатусГрафика.Установить(СтатусГрафика);
	Набор.Отбор.ЭтапПроизводства.Установить(ЭтапПроизводства);
	
	Набор.Прочитать();
	
	Если Набор.Количество() > 0 Тогда
		Запись = Набор[0];
	Иначе
		Запись = Набор.Добавить();
	КонецЕсли;
	
	Запись.Распоряжение     = Распоряжение;
	Запись.СтатусГрафика    = СтатусГрафика;
	Запись.ЭтапПроизводства = ЭтапПроизводства;
	
	ЗаполнитьЗначенияСвойств(
		Запись,
		ГрафикПроизводства, 
		"НачалоЭтапа,
		|ОкончаниеПредварительногоБуфера,
		|НачалоЗавершающегоБуфера,
		|ОкончаниеЭтапа");
	
	Набор.Записать();
	
КонецПроцедуры

// Очищает график производства заданного массива этапов.
//
// Параметры:
//  Этапы - Массив - содержит ссылки на этапы производства, график которых необходимо очистить.
//
Процедура ОчиститьГрафикЭтапов(Этапы) Экспорт
	
	Для каждого Этап Из Этапы Цикл
		
		Набор = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьНаборЗаписей();
		Набор.Отбор.ЭтапПроизводства.Установить(Этап);
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Снимает флаги "НаКритическомПути" и "ОграничиваетСрокВыпуска" в графике этапа производства.
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//
Процедура ОчиститьПризнакЭтапНаКритическомПути(ЭтапПроизводства) Экспорт
	
	Менеджер = РегистрыСведений.ГрафикЭтаповПроизводства2_2.СоздатьМенеджерЗаписи();
	Менеджер.Распоряжение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтапПроизводства, "Распоряжение");
	Менеджер.ЭтапПроизводства = ЭтапПроизводства;
	Менеджер.СтатусГрафика = СтатусРабочийГрафик();
	Менеджер.Прочитать();
	
	Если Менеджер.Выбран() И Менеджер.НаКритическомПути Тогда
		
		Менеджер.НаКритическомПути = Ложь;
		Менеджер.ОграничиваетСрокВыпуска = Ложь;
		Менеджер.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Чтение

// Возвращает график производства этапов
//
// Параметры:
//  Этапы - Массив - Этапы производства.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - график производства этапов
//
Функция ГрафикПроизводства(Этапы) Экспорт
	
	МассивСсылок = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				МассивСсылок, 
				Этапы, 
				Истина);
	
	ГрафикПроизводства = УправлениеПроизводством.СтруктураДанныхГрафикПроизводства();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.ЭтапПроизводства                КАК Этап,
		|	ИСТИНА                                  КАК Рассчитан,
		|	Таблица.НачалоЭтапа                     КАК НачалоЭтапа,
		|	Таблица.ОкончаниеЭтапа                  КАК ОкончаниеЭтапа,
		|	Таблица.ОкончаниеПредварительногоБуфера КАК ОкончаниеПредварительногоБуфера,
		|	Таблица.НачалоЗавершающегоБуфера        КАК НачалоЗавершающегоБуфера,
		|	Таблица.НаКритическомПути        		КАК НаКритическомПути,
		|	Таблица.ОграничиваетСрокВыпуска	        КАК ОграничиваетСрокВыпуска
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.ЭтапПроизводства В (&МассивСсылок)
		|	И Таблица.СтатусГрафика  = &СтатусГрафика");
		
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("СтатусГрафика", СтатусРабочийГрафик());

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ГрафикПроизводства.Добавить(), Выборка);
			
			МассивСсылок.Удалить(МассивСсылок.Найти(Выборка.Этап));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСсылок.Количество() > 0 Тогда
		
		Для Каждого Ссылка Из МассивСсылок Цикл
			
			ГрафикПроизводства.Добавить().Этап = Ссылка;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ГрафикПроизводства;
	
КонецФункции

// Возвращает текст запроса, который получает даты начала и окончания этапов по данным графика
//  (для не начатых этапов) и данным самого этапа (если этап начат или завершен).
//  При использовании функции запрос должен содержать параметр "СтатусГрафика" для выборки
//  графика с заданным статусом.
//
// Параметры:
//  ТаблицаЭтапы - Строка	 - имя временной таблицы, содержащей этапы для отбора данных.
//  ПолеЭтап	 - Строка	 - имя поля таблицы.
// 
// Возвращаемое значение:
//   - Строка - текст запроса создания временной таблицы ВТСрокиВыполненияЭтапов
//
Функция ТекстЗапросаВТСрокиВыполненияЭтапов(ТаблицаЭтапы, ПолеЭтап) Экспорт
	
	Результат =
	"ВЫБРАТЬ
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства КАК ЭтапПроизводства,
	|	ВЫБОР
	|		КОГДА ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат), ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				И ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.ФактическоеНачалоЭтапа <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.ФактическоеНачалоЭтапа
	|		ИНАЧЕ ГрафикЭтаповПроизводства2_2.НачалоЭтапа
	|	КОНЕЦ КАК НачалоЭтапа,
	|	ВЫБОР
	|		КОГДА ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат), ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|				И ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.ФактическоеОкончаниеЭтапа <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.ФактическоеОкончаниеЭтапа
	|		ИНАЧЕ ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа
	|	КОНЕЦ КАК ОкончаниеЭтапа
	|ПОМЕСТИТЬ ВТСрокиВыполненияЭтапов
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
	|ГДЕ
	|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В
	|			(ВЫБРАТЬ
	|				&ПолеЭтап
	|			ИЗ
	|				&ТаблицаЭтапы КАК Т)
	|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусГрафика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства";
	
	Результат = СтрЗаменить(Результат, "&ТаблицаЭтапы", ТаблицаЭтапы);
	Результат = СтрЗаменить(Результат, "&ПолеЭтап", ПолеЭтап);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// По данным графика производства проверяет соблюдение условия: этап-последователь
// начинаяется после этапа-предшественника. Под последователями/предшественниками понимаются
// как этапы одной цепочки, находящиеся в непосредстенной связи, так и этапы различных цепочек,
// связанные через назначения. Этапы, для которых условие не соблюдается, помечаются как требующие пересчета.
//
// Параметры:
//  Этапы - ДокументСсылка.ЭтапПроизводства2_2, Массив - этапы которые необходимо проверить.
//
Процедура ПроверитьСоблюдениеУсловийПредшествования(Этапы) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТипЗнч(Этапы) = Тип("Массив") Тогда
		МассивЭтапов = Этапы;
	Иначе
		МассивЭтапов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Этапы);
	КонецЕсли;
	Документы.ЭтапПроизводства2_2.СоздатьВТСвязиЭтапов(МенеджерВременныхТаблиц, МассивЭтапов, Ложь);
	
	ТекстыЗапросовПакета = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТСвязиЭтапов.Этап КАК ЭтапПроизводства
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТСвязиЭтапов.СледующийЭтап
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов";
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	ТекстыЗапросовПакета.Добавить(
		ТекстЗапросаВТСрокиВыполненияЭтапов("ВТЭтапы", "ЭтапПроизводства"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТСвязиЭтапов.Этап,
	|	ВТСвязиЭтапов.СледующийЭтап
	|ПОМЕСТИТЬ ВТСвязиСНарушением
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокиВыполненияЭтапов КАК ГрафикЭтапа
	|		ПО ВТСвязиЭтапов.Этап = ГрафикЭтапа.ЭтапПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСрокиВыполненияЭтапов КАК ГрафикСледующегоЭтапа
	|		ПО ВТСвязиЭтапов.СледующийЭтап = ГрафикСледующегоЭтапа.ЭтапПроизводства
	|ГДЕ
	|	ГрафикЭтапа.ЭтапПроизводства ЕСТЬ НЕ NULL 
	|	И ГрафикСледующегоЭтапа.ЭтапПроизводства ЕСТЬ НЕ NULL 
	|	И ГрафикЭтапа.ОкончаниеЭтапа > ГрафикСледующегоЭтапа.НачалоЭтапа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Этап
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСвязиСНарушением.СледующийЭтап КАК Этап
	|	ИЗ
	|		ВТСвязиСНарушением КАК ВТСвязиСНарушением
	|	ГДЕ
	|		ВТСвязиСНарушением.Этап В(&Этапы)
	|		И ВЫРАЗИТЬ(ВТСвязиСНарушением.Этап КАК Документ.ЭтапПроизводства2_2).Распоряжение.РазмещениеВыпуска = &КНачалу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТСвязиСНарушением.Этап
	|	ИЗ
	|		ВТСвязиСНарушением КАК ВТСвязиСНарушением
	|	ГДЕ
	|		ВТСвязиСНарушением.СледующийЭтап В(&Этапы)
	|		И ВЫРАЗИТЬ(ВТСвязиСНарушением.СледующийЭтап КАК Документ.ЭтапПроизводства2_2).Распоряжение.РазмещениеВыпуска = &КОкончанию) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Этап КАК Документ.ЭтапПроизводства2_2).Статус В (&СтатусыЭтапа)";
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Этапы", МассивЭтапов);
	Запрос.УстановитьПараметр("СтатусГрафика", СтатусРабочийГрафик());
	Запрос.УстановитьПараметр("СтатусыЭтапа", Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован());
	Запрос.УстановитьПараметр("КНачалу", Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу);
	Запрос.УстановитьПараметр("КОкончанию", Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию);
	
	НеактуальныеЭтапы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Этап");
	
	Если ЗначениеЗаполнено(НеактуальныеЭтапы) Тогда
		РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(НеактуальныеЭтапы);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет содержит ли график производства изменения
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - Этап производства.
//  ГрафикПроизводства - Структура - см. УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике()
// 
// Возвращаемое значение:
//   - Булево - Истина, если график производства содержит изменения
//
Функция ИзменилосьРазмещениеЭтапаВГрафике(ЭтапПроизводства, ГрафикПроизводства) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА                                  КАК Рассчитан,
		|	Таблица.НачалоЭтапа                     КАК НачалоЭтапа,
		|	Таблица.ОкончаниеПредварительногоБуфера КАК ОкончаниеПредварительногоБуфера,
		|	Таблица.НачалоЗавершающегоБуфера        КАК НачалоЗавершающегоБуфера,
		|	Таблица.ОкончаниеЭтапа                  КАК ОкончаниеЭтапа
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.ЭтапПроизводства = &ЭтапПроизводства
		|	И Таблица.СтатусГрафика  = &СтатусГрафика");
	
	СтатусГрафика = СтатусРабочийГрафик();
	
	Запрос.УстановитьПараметр("ЭтапПроизводства", ЭтапПроизводства);
	Запрос.УстановитьПараметр("СтатусГрафика", СтатусРабочийГрафик());
	
	РазмещениеВГрафике = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(РазмещениеВГрафике, Выборка);
		
	КонецЕсли;
	
	Возврат НЕ ОбщегоНазначения.ДанныеСовпадают(РазмещениеВГрафике, ГрафикПроизводства);
	
КонецФункции

// Проверяет соблюдение условия: дата обеспечения материалов находится раньше даты начала этапов по графику.
// Этапы для которых условие не соблюдается помечаются как требующие пересчета.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы, дата обеспечения которых могла измениться.
//
Процедура ПроверитьАктуальностьГрафикаПриИзмененииСроковОбеспечения(МассивСсылок) Экспорт
	
	Если МассивСсылок.Количество() = 0 
		ИЛИ НЕ УправлениеПроизводством.ИспользуетсяГрафикПроизводства() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	График = ГрафикПроизводства(МассивСсылок);
	
	ДатыОбеспечения = Документы.ЭтапПроизводства2_2.ДатыОбеспеченияЭтапов(МассивСсылок, Ложь);
	ДатыОбеспечения.Индексы.Добавить("ЭтапПроизводства");
	
	НеактуальныеЭтапы = Новый Массив;
	Для каждого ЗаписьГрафика Из График Цикл
		
		Если ЗаписьГрафика.Рассчитан Тогда
			
			СтрокаОбеспечение = ДатыОбеспечения.Найти(ЗаписьГрафика.Этап, "ЭтапПроизводства");
			Если НЕ СтрокаОбеспечение = Неопределено
				И ЗаписьГрафика.НачалоЭтапа < СтрокаОбеспечение.ДатаОбеспечения Тогда
				
				НеактуальныеЭтапы.Добавить(ЗаписьГрафика.Этап);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НеактуальныеЭтапы.Количество() > 0 Тогда
		РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(НеактуальныеЭтапы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли