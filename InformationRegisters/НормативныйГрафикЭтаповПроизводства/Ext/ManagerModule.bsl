
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает нормативный график производства этапов
//
// Параметры:
//  Этапы - Массив - Этапы производства.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - нормативный график производства этапов
//
Функция ГрафикПроизводства(Знач Этапы) Экспорт
	
	ГрафикПроизводства = УправлениеПроизводством.СтруктураДанныхГрафикПроизводства();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.ЭтапПроизводства КАК Этап,
		|	ИСТИНА                   КАК Рассчитан,
		|	ДОБАВИТЬКДАТЕ(Таблица.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(Таблица.ДлительностьДоЗапуска, 0))                          КАК НачалоЭтапа,
		|	ДОБАВИТЬКДАТЕ(Таблица.Распоряжение.НачатьНеРанее, СЕКУНДА, ЕСТЬNULL(Таблица.ДлительностьДоЗапуска + Таблица.Ресурсоемкость, 0)) КАК ОкончаниеЭтапа
		|ИЗ
		|	РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК Таблица
		|ГДЕ
		|	Таблица.ЭтапПроизводства В(&Этапы)");
		
	Запрос.УстановитьПараметр("Этапы", Этапы);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ГрафикПроизводства.Добавить(), Выборка);
			
			Этапы.Удалить(Этапы.Найти(Выборка.Этап));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Этапы.Количество() > 0 Тогда
		
		Для Каждого Ссылка Из Этапы Цикл
			
			ГрафикПроизводства.Добавить().Этап = Ссылка;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ГрафикПроизводства;
	
КонецФункции

// Выполняет рассчет нормативного графика производства.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ, график которого необходимо рассчитать.
//
Процедура РассчитатьГрафикВФоне(Распоряжение) Экспорт
	
	ОтменитьАктивныйРасчетГрафика(Распоряжение);
	
	ИмяМетода = "РегистрыСведений.НормативныйГрафикЭтаповПроизводства.РассчитатьГрафик";
	
	ПараметрыПроцедуры = Новый Массив();
	ПараметрыПроцедуры.Добавить(Распоряжение);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяМетода);
	ПараметрыЗадания.Добавить(ПараметрыПроцедуры);
	
	КлючЗадания = КлючФоновогоЗадания(Распоряжение);
	
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Расчет нормативного графика этапов распоряжения ""%1""'"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Представление"));
	
	ФоновыеЗадания.Выполнить(
		"РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации",
		ПараметрыЗадания,
		КлючЗадания,
		НаименованиеЗадания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РассчетГрафика

Процедура РассчитатьГрафик(Распоряжение) Экспорт
	
	ОжидатьЗавершениеТранзакцийЗаписиЭтапов(Распоряжение);
	
	ЭтапыИЗависимости = ЭтапыПроизводстваСЗависимостями(Распоряжение);
	
	РассчитатьДлительностьДоЗапускаВыпуска(ЭтапыИЗависимости.Этапы, ЭтапыИЗависимости.Зависимости);
	
	ЗаписатьРезультатыРасчетаГрафика(Распоряжение, ЭтапыИЗависимости.Этапы);
	
КонецПроцедуры

Процедура ОтменитьАктивныйРасчетГрафика(Распоряжение)
	
	Задания = АктивныеЗаданияНаРасчетГрафика(Распоряжение);
	
	Для каждого Задание Из Задания Цикл
		
		Попытка
			Задание.Отменить();
		Исключение
			
			// Возможно задание как раз в этот момент закончилось и ошибки нет.
			
			СобытиеЖурналаРегистрации = НСтр(
				"ru = 'Нормативный график этапов производства.Отмена фонового задания'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
			Набор = РегистрыСведений.НормативныйГрафикЭтаповПроизводства.СоздатьНаборЗаписей();
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Набор.Метаданные(),
				Распоряжение,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АктивныеЗаданияНаРасчетГрафика(Распоряжение)
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Ключ", КлючФоновогоЗадания(Распоряжение));
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Возврат ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
	
КонецФункции

Функция КлючФоновогоЗадания(Распоряжение)
	
	Возврат Строка(Распоряжение.УникальныйИдентификатор());
	
КонецФункции

Функция ЭтапыПроизводстваСЗависимостями(Распоряжение) Экспорт
	
	Запрос = ИнициализироватьЗапросЭтапыПроизводстваСЗависимостями(Распоряжение);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Этапы = МассивРезультатов[МассивРезультатов.ВГраница()-1].Выгрузить();
	
	Этапы.Колонки.Добавить("ДлительностьДоВыпуска", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 4)));
	Этапы.Колонки.Добавить("ДлительностьДоЗапуска", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 4)));
	
	Этапы.Индексы.Добавить("ЭтапПроизводства");
	Этапы.Индексы.Добавить("ПервыйЭтап");
	Этапы.Индексы.Добавить("ПоследнийЭтап");
	
	Зависимости = МассивРезультатов[МассивРезультатов.ВГраница()].Выгрузить();
	
	Зависимости.Индексы.Добавить("Этап");
	Зависимости.Индексы.Добавить("СледующийЭтап");
	
	Результат = Новый Структура("Этапы, Зависимости", Этапы, Зависимости);
	
	Возврат Результат;
	
КонецФункции

Процедура ОжидатьЗавершениеТранзакцийЗаписиЭтапов(Распоряжение)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("Распоряжение", Распоряжение);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Блокировка.Заблокировать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СобытиеЖурналаРегистрации = НСтр(
			"ru = 'Нормативный график этапов производства.Ожидание завершения записи этапов'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
		Набор = РегистрыСведений.НормативныйГрафикЭтаповПроизводства.СоздатьНаборЗаписей();
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Набор.Метаданные(),
			Распоряжение,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ИнициализироватьЗапросЭтапыПроизводстваСЗависимостями(Распоряжение)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Ссылка КАК ЭтапПроизводства,
	|	&Распоряжение КАК Распоряжение,
	|	ВЫБОР ЭтапПроизводства2_2.ЕдиницаИзмеренияДлительностиЭтапа
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА 60
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА 3600
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
	|			ТОГДА 86400
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА 86400
	|		ИНАЧЕ 1
	|	КОНЕЦ * ЭтапПроизводства2_2.ДлительностьЭтапа КАК Ресурсоемкость
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.Распоряжение = &Распоряжение
	|	И ЭтапПроизводства2_2.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтапПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Этапы.ЭтапПроизводства
	|ПОМЕСТИТЬ ВТПервыеЭтапы
	|ИЗ
	|	ВТЭтапы КАК Этапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвязиЭтапов КАК Связи
	|		ПО Этапы.ЭтапПроизводства = Связи.СледующийЭтап
	|ГДЕ
	|	Связи.Этап ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Этапы.ЭтапПроизводства
	|ПОМЕСТИТЬ ВТПоследниеЭтапы
	|ИЗ
	|	ВТЭтапы КАК Этапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвязиЭтапов КАК Связи
	|		ПО Этапы.ЭтапПроизводства = Связи.Этап
	|ГДЕ
	|	Связи.СледующийЭтап ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЭтапы.ЭтапПроизводства КАК ЭтапПроизводства,
	|	ВТЭтапы.Распоряжение КАК Распоряжение,
	|	ВТЭтапы.Ресурсоемкость КАК Ресурсоемкость,
	|	ВЫБОР
	|		КОГДА ПервыеЭтапы.ЭтапПроизводства ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПервыйЭтап,
	|	ВЫБОР
	|		КОГДА ПоследниеЭтапы.ЭтапПроизводства ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоследнийЭтап
	|ИЗ
	|	ВТЭтапы КАК ВТЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервыеЭтапы КАК ПервыеЭтапы
	|		ПО ВТЭтапы.ЭтапПроизводства = ПервыеЭтапы.ЭтапПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеЭтапы КАК ПоследниеЭтапы
	|		ПО ВТЭтапы.ЭтапПроизводства = ПоследниеЭтапы.ЭтапПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСвязиЭтапов.Этап,
	|	ВТСвязиЭтапов.СледующийЭтап
	|ИЗ
	|	ВТСвязиЭтапов КАК ВТСвязиЭтапов");
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.ЭтапПроизводства2_2.СоздатьВТСвязиЭтаповПоРаспоряжению(
		МенеджерВременныхТаблиц, Распоряжение, Истина);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос;
	
КонецФункции

Процедура РассчитатьДлительностьДоЗапускаВыпуска(Этапы, Зависимости) Экспорт
	
	Этапы.Индексы.Добавить("ЭтапПроизводства");
	
	Зависимости.Индексы.Добавить("Этап");
	Зависимости.Индексы.Добавить("СледующийЭтап");
	
	РассчитатьДлительностьДоЗапуска(Этапы, Зависимости);
	РассчитатьДлительностьДоВыпуска(Этапы, Зависимости);
	
КонецПроцедуры

Процедура РассчитатьДлительностьДоЗапуска(Этапы, Зависимости)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПервыйЭтап", Истина);
	
	НайденныеСтроки = Этапы.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Этап Из НайденныеСтроки Цикл
		
		ЗаполнитьДлительностьРекурсивно(Этапы, Зависимости, Этап, "ДлительностьДоЗапуска", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьДлительностьДоВыпуска(Этапы, Зависимости)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПоследнийЭтап", Истина);
	
	НайденныеСтроки = Этапы.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Этап Из НайденныеСтроки Цикл
		
		ЗаполнитьДлительностьРекурсивно(Этапы, Зависимости, Этап, "ДлительностьДоВыпуска", Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДлительностьРекурсивно(Этапы, Зависимости, ЭтапРодитель, ИмяКолонки, ОбходКОкончанию)
	
	Если ЭтапРодитель.Ресурсоемкость = 0 Тогда
		
		Длительность = ЭтапРодитель[ИмяКолонки] + 0.0001;
		
	Иначе
		
		Длительность = Цел(ЭтапРодитель[ИмяКолонки]) + ЭтапРодитель.Ресурсоемкость;
		
	КонецЕсли;
	
	ПоследующиеЭтапы = СвязанныеЭтапы(Этапы, Зависимости, ЭтапРодитель.ЭтапПроизводства, ОбходКОкончанию);
	
	Для каждого Этап Из ПоследующиеЭтапы Цикл
		
		Если Длительность > Этап[ИмяКолонки] Тогда
			
			Этап[ИмяКолонки] = Длительность;
			
			ЗаполнитьДлительностьРекурсивно(Этапы, Зависимости, Этап, ИмяКолонки, ОбходКОкончанию);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СвязанныеЭтапы(Этапы, Зависимости, ЭтапПроизводства, ОбходКОкончанию)
	
	Результат = Новый Массив;
	
	Если ОбходКОкончанию Тогда
		
		СтруктураПоиска = Новый Структура("Этап", ЭтапПроизводства);
		НайденныеСтроки = Зависимости.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			ПоследующийЭтап = Этапы.Найти(Строка.СледующийЭтап, "ЭтапПроизводства");
			Если НЕ ПоследующийЭтап = Неопределено Тогда
				Результат.Добавить(ПоследующийЭтап);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СтруктураПоиска = Новый Структура("СледующийЭтап", ЭтапПроизводства);
		НайденныеСтроки = Зависимости.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			ПоследующийЭтап = Этапы.Найти(Строка.Этап, "ЭтапПроизводства");
			Если НЕ ПоследующийЭтап = Неопределено Тогда
				Результат.Добавить(ПоследующийЭтап);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьРезультатыРасчетаГрафика(Распоряжение, Этапы) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ПараметрыБлокировки	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрСведений", "НормативныйГрафикЭтаповПроизводства");
		ЗначенияБлокировки	= Новый Структура("Распоряжение", Распоряжение);
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
		
		Набор = РегистрыСведений.НормативныйГрафикЭтаповПроизводства.СоздатьНаборЗаписей();
		Набор.Отбор.Распоряжение.Установить(Распоряжение);
		Набор.Загрузить(Этапы);
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СобытиеЖурналаРегистрации = НСтр(
			"ru = 'Нормативный график этапов производства.Запись результатов расчета'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
		Набор = РегистрыСведений.НормативныйГрафикЭтаповПроизводства.СоздатьНаборЗаписей();
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Набор.Метаданные(),
			Распоряжение,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
  		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОжидатьЗавершенияРасчетаГрафика(Распоряжение) Экспорт
	
	Задания = АктивныеЗаданияНаРасчетГрафика(Распоряжение);
	
	Если ЗначениеЗаполнено(Задания) Тогда
		
		ФоновыеЗадания.ОжидатьЗавершения(Задания);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НормативныйГрафикЭтаповПроизводства.Распоряжение
		|ИЗ
		|	РегистрСведений.НормативныйГрафикЭтаповПроизводства КАК НормативныйГрафикЭтаповПроизводства
		|ГДЕ
		|	НормативныйГрафикЭтаповПроизводства.Ресурсоемкость = 0
		|	И НормативныйГрафикЭтаповПроизводства.ЭтапыСНулевойДлительностьюУпорядочены = ЛОЖЬ");
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.НормативныйГрафикЭтаповПроизводства";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.НормативныйГрафикЭтаповПроизводства";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВТОбъектыДляОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если НЕ ВТОбъектыДляОбработки.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ВТОбъектыДляОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаЗаблокированных.Ссылка.Распоряжение КАК Распоряжение
		|ПОМЕСТИТЬ ВТЗаблокированныеРаспоряжения
		|ИЗ
		|	#ТаблицаЗаблокированных КАК ТаблицаЗаблокированных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыДляОбработки.Распоряжение КАК Распоряжение
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированныеРаспоряжения КАК ЗаблокированныеРаспоряжения
		|		ПО ОбъектыДляОбработки.Распоряжение = ЗаблокированныеРаспоряжения.Распоряжение
		|ГДЕ
		|	ЗаблокированныеРаспоряжения.Распоряжение ЕСТЬ NULL";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", ВТОбъектыДляОбработки.ИмяВременнойТаблицы);
	
	ВТЗаблокированныеЭтапы = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
		Параметры.Очередь, "Документ.ЭтапПроизводства2_2", МенеджерВременныхТаблиц);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаЗаблокированных", ВТЗаблокированныеЭтапы.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НормативныйГрафикЭтаповПроизводства");
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Выборка.Распоряжение);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Выборка.Распоряжение);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			ЭтапыИЗависимости = ЭтапыПроизводстваСЗависимостями(Выборка.Распоряжение);
	        РассчитатьДлительностьДоЗапускаВыпуска(ЭтапыИЗависимости.Этапы, ЭтапыИЗависимости.Зависимости);
			
			Набор = РегистрыСведений.НормативныйГрафикЭтаповПроизводства.СоздатьНаборЗаписей();
			Набор.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
			Набор.Загрузить(ЭтапыИЗависимости.Этапы);
			
			Для каждого Запись Из Набор Цикл
				Запись.ЭтапыСНулевойДлительностьюУпорядочены = Истина;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			
			Набор = РегистрыСведений.НормативныйГрафикЭтаповПроизводства.СоздатьНаборЗаписей();
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обновить нормативный график распоряжения: %1 по причине: %2'"),
				Выборка.Распоряжение,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Предупреждение,
				Набор.Метаданные(),
				Выборка.Распоряжение,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли