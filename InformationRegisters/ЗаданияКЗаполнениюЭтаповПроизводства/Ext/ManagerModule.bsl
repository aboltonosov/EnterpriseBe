#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет записи в регистр.
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2	 - этап, для которого необходимо добавить задание.
// 
// Возвращаемое значение:
//   - Число - номер нового задания
//
Функция ДобавитьЗадание(ЭтапПроизводства) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерЗадания = НовыйНомерЗадания(ЭтапПроизводства);
	
	Набор = РегистрыСведений.ЗаданияКЗаполнениюЭтаповПроизводства.СоздатьНаборЗаписей();
	
	Набор.Отбор.ЭтапПроизводства.Установить(ЭтапПроизводства);
	Набор.Отбор.НомерЗадания.Установить(НомерЗадания);
	
	Попытка
		
		НовоеЗадание = Набор.Добавить();
		
		НовоеЗадание.ЭтапПроизводства = ЭтапПроизводства;
		НовоеЗадание.НомерЗадания = НомерЗадания;
		
		Набор.Записать(Истина);
		
	Исключение
		
		СобытиеЖурналаРегистрации = НСтр("ru = 'Этап производства.Ошибка добавления задания к заполнению этапов производства'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации, 
			УровеньЖурналаРегистрации.Ошибка,
			ЭтапПроизводства.Метаданные(),
			ЭтапПроизводства,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат -1;
		
	КонецПопытки;
	
	Возврат НомерЗадания;
	
КонецФункции

// Удаляет записи из регистра.
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - этап,
//		записи по которым необходимо удалить.
//  НомерЗадания - Число - при очистке будут удалены записи с номерами заданий, меньше либо равными
//		значению параметра. Если параметр не задан, то будут удалены все записи.
//
Процедура УдалитьЗадания(ЭтапПроизводства, НомерЗадания = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = НовыйНомерЗадания(ЭтапПроизводства);
		КонецЕсли;
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЗаданияКЗаполнениюЭтаповПроизводства");
		ЭлементБлокировки.УстановитьЗначение("ЭтапПроизводства", ЭтапПроизводства);
		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Задания.ЭтапПроизводства КАК ЭтапПроизводства,
			|	Задания.НомерЗадания     КАК НомерЗадания
			|ПОМЕСТИТЬ ВТВсеЗадания
			|ИЗ
			|	РегистрСведений.ЗаданияКЗаполнениюЭтаповПроизводства КАК Задания
			|ГДЕ
			|	Задания.ЭтапПроизводства = &ЭтапПроизводства
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЭтапПроизводства,
			|	НомерЗадания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТВсеЗадания.ЭтапПроизводства КАК ЭтапПроизводства,
			|	ВТВсеЗадания.НомерЗадания     КАК НомерЗадания
			|ПОМЕСТИТЬ ВТЗаданияУдалить
			|ИЗ
			|	ВТВсеЗадания КАК ВТВсеЗадания
			|ГДЕ
			|	ВТВсеЗадания.ЭтапПроизводства В (&ЭтапПроизводства)
			|	И ВТВсеЗадания.НомерЗадания <= &НомерЗадания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЭтапПроизводства,
			|	НомерЗадания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТВсеЗадания.ЭтапПроизводства,
			|	ВТВсеЗадания.НомерЗадания
			|ИЗ
			|	ВТВсеЗадания КАК ВТВсеЗадания
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаданияУдалить КАК ВТЗаданияУдалить
			|		ПО ВТВсеЗадания.ЭтапПроизводства = ВТЗаданияУдалить.ЭтапПроизводства
			|			И ВТВсеЗадания.НомерЗадания = ВТЗаданияУдалить.НомерЗадания
			|ГДЕ
			|	ВТЗаданияУдалить.ЭтапПроизводства ЕСТЬ NULL");
		
		Запрос.УстановитьПараметр("ЭтапПроизводства", ЭтапПроизводства);
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
		
		Набор = РегистрыСведений.ЗаданияКЗаполнениюЭтаповПроизводства.СоздатьНаборЗаписей();
		
		Набор.Отбор.ЭтапПроизводства.Установить(ЭтапПроизводства);
		
		Задания = Запрос.Выполнить().Выгрузить();
		Набор.Загрузить(Задания);
		
		Набор.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СобытиеЖурналаРегистрации = НСтр("ru = 'Этап производства.Ошибка удаления задания к заполнению этапов производства'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации, 
			УровеньЖурналаРегистрации.Ошибка,
			ЭтапПроизводства.Метаданные(),
			ЭтапПроизводства,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Запускает в фоновом режиме задание заполнения этапа по производственным операциям
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2	 - этап производства.
//  НомерЗадания	 - Число								 - номер текущего задания
//
Процедура ЗапуститьЗаданиеКЗаполнениюЭтаповПроизводства(ЭтапПроизводства, НомерЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = ЭтапПроизводства.УникальныйИдентификатор();
	
	ОтменитьАктивныеФоновыеЗадания(Ключ);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДокументСсылка", ЭтапПроизводства);
	ПараметрыЗаполнения.Вставить("НомерЗадания", НомерЗадания);
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа: %Ссылка%'");
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, "%Ссылка%", ЭтапПроизводства);
	
	ИмяЭкспортнойПроцедуры = "Документы.ЭтапПроизводства2_2.ЗаполнитьПоПроизводственнымОперациям";
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыЗаполнения);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Проверить наличие заданий к заполнению этапа по производственным операциям
//  не выполненные задания запускаются в фоновом режиме
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2	 - этап производства.
//
Процедура ПроверитьНаличиеЗаданийКЗаполнениюПоОперациям(ЭтапПроизводства) Экспорт
	
	// в текущей конфигурации действий не предусмотрено
	
КонецПроцедуры

// Максимальный номер задания к заполнению этапов производства
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2	 - этап производства.
// 
// Возвращаемое значение:
//   - Число - максимальный номер задания
//
Функция ТекущийНомерЗаданияПоЭтапу(ЭтапПроизводства) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Задания.НомерЗадания), 0) КАК НомерЗадания
		|ИЗ
		|	РегистрСведений.ЗаданияКЗаполнениюЭтаповПроизводства КАК Задания
		|ГДЕ
		|	Задания.ЭтапПроизводства = &ЭтапПроизводства");
	
	Запрос.УстановитьПараметр("ЭтапПроизводства", ЭтапПроизводства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НомерЗадания;

КонецФункции

// Проверяет, требуется ли заполнение этапа по операциям
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2	 - этап производства.
// 
// Возвращаемое значение:
//   - Булево - требуется заполнение по операциям
//
Функция ТребуетсяЗаполнениеПоОперациям(ЭтапПроизводства) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ЗаданияКЗаполнениюЭтаповПроизводства КАК Задания
		|ГДЕ
		|	Задания.ЭтапПроизводства = &ЭтапПроизводства");
	
	Запрос.УстановитьПараметр("ЭтапПроизводства", ЭтапПроизводства);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

// Функция проверяет завершение транзакции записи очереди заданий по этапу производства
//  
//  Пояснение:
//  Фоновое задание запускается в транзакции записи производственной операции,
//   возможна ситуация, когда фоновое задание запущено, а транзакция еще не завершена.
//
// Параметры:
//  ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2	 - этап производства
//  НомерЗадания	 - Число								 - номер текущего задания
//  ОписаниеОшибки	 - Строка								 - содержит информацию об ошибке (возвращаемое значение).
// 
// Возвращаемое значение:
//  Истина - транзакция записи по источнику завершена
//
Функция ПроверитьОжидатьЗавершениеЗаписиИсточника(ЭтапПроизводства, НомерЗадания, ОписаниеОшибки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьОшибки = Ложь;
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЗаданияКЗаполнениюЭтаповПроизводства");
		ЭлементБлокировки.УстановитьЗначение("ЭтапПроизводства", ЭтапПроизводства);
		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ЗаданияКЗаполнениюЭтаповПроизводства КАК Задания
		|ГДЕ
		|	Задания.ЭтапПроизводства = &ЭтапПроизводства
		|	И Задания.НомерЗадания <= &НомерЗадания");
		Запрос.УстановитьПараметр("ЭтапПроизводства", ЭтапПроизводства);
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
		
		ЕстьОшибки = Запрос.Выполнить().Пустой();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЕстьОшибки = Истина;
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		
	КонецПопытки;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйНомерЗадания(ЭтапПроизводства)
	
	Возврат ТекущийНомерЗаданияПоЭтапу(ЭтапПроизводства) + 1;
	
КонецФункции

Процедура ОтменитьАктивныеФоновыеЗадания(Ключ)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Для каждого Задание Из Задания Цикл
		
		Попытка
			Задание.Отменить();
		Исключение
			
			СобытиеЖурналаРегистрации = НСтр("ru = 'Этап производства.Отмена выполнения фонового задания'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли