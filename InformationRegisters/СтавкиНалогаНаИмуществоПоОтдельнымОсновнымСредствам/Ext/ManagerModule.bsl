#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает параметры выбора кода
//
// Параметры:
// 		НазваниеМакета - Строка - Наименование макета данного объекта метаданных
// 		ТекущийПериод - Дата - Дата ограничения выбора кодов
//
// Возвращаемое значение:
// 		Структура - структура параметров формы выбора кода
//
Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	
	КодыЛьгот = Новый ТаблицаЗначений;
	
	КодыЛьгот.Колонки.Добавить("Код");
	КодыЛьгот.Колонки.Добавить("Наименование");
	КодыЛьгот.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет	= ПолучитьМакет(НазваниеМакета);
	
	НазваниеОбласти = "";
	СписокОбластей = Новый СписокЗначений;
	ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей);
	
	ТекущаяОбласть = Макет.Области.Найти("Область" + НазваниеОбласти);
	
	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыЛьгот.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов"           , КодыЛьгот);
	Параметры.Вставить("СписокПериодовДействия", СписокОбластей);
	Параметры.Вставить("ТекущийПериод"         , НазваниеОбласти);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьПараметрыСпискаКодов(Макет, ТекущийПериод, НазваниеОбласти, СписокОбластей)
	
	Области = Макет.Области;
	Если Области.Количество() = 0 Тогда
		НазваниеОбласти = "";
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбласть Из Области Цикл
		СписокОбластей.Добавить(Прав(ТекОбласть.Имя,4));
	КонецЦикла;
	
	ТекущаяОбласть = СписокОбластей[0].Значение;
	Для Каждого ТекОбласть Из СписокОбластей Цикл
		Если Год(ТекущийПериод) < Число(ТекОбласть.Значение) Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяОбласть = ТекОбласть.Значение;
	КонецЦикла;
	
	НазваниеОбласти = ТекущаяОбласть;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдаляемыйРегистр.Период КАК Период,
	|	УдаляемыйРегистр.Организация КАК Организация,
	|	УдаляемыйРегистр.ОсновноеСредство КАК ОсновноеСредство,
	|	УдаляемыйРегистр.КодПоОКАТО КАК КодПоОКАТО,
	|	УдаляемыйРегистр.КодПоОКТМО КАК КодПоОКТМО
	|ИЗ
	|	РегистрСведений.УдалитьСтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК УдаляемыйРегистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК НовыйРегистр
	|		ПО УдаляемыйРегистр.Организация = НовыйРегистр.Организация
	|			И (ВЫБОР
	|				КОГДА ГОД(УдаляемыйРегистр.Период) >= 2014
	|					ТОГДА """"
	|				ИНАЧЕ УдаляемыйРегистр.КодПоОКАТО
	|			КОНЕЦ = НовыйРегистр.КодПоОКАТО)
	|			И УдаляемыйРегистр.КодПоОКТМО = НовыйРегистр.КодПоОКТМО
	|			И (НАЧАЛОПЕРИОДА(УдаляемыйРегистр.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(НовыйРегистр.Период, ДЕНЬ))
	|			И УдаляемыйРегистр.ОсновноеСредство = НовыйРегистр.ОсновноеСредство
	|ГДЕ
	|	НовыйРегистр.ОсновноеСредство ЕСТЬ NULL ";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.УдалитьСтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Таблица, ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.УдалитьВидИмущества <> ЗНАЧЕНИЕ(Перечисление.УдалитьВидыИмущества.ПустаяСсылка)
	|";
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	СозданиеЗавершено = СоздатьСтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам(Параметры);
	ОбновлениеЗавершено = ОбновитьСтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам(Параметры);
	
	Параметры.ОбработкаЗавершена = СозданиеЗавершено И ОбновлениеЗавершено;
	
КонецПроцедуры

Функция СоздатьСтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам(Параметры)
	
	ПолноеИмяОбъекта = "РегистрСведений.УдалитьСтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам";
	МетаданныеОбъекта = Метаданные.РегистрыСведений.УдалитьСтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам;
	
	ДополнительныеПараметрыВыборкиДанныхДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдаляемыйРегистр.Период КАК Период,
	|	УдаляемыйРегистр.Период КАК Дата,
	|	УдаляемыйРегистр.Организация,
	|	УдаляемыйРегистр.ОсновноеСредство КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ГОД(УдаляемыйРегистр.Период) >= 2014
	|			ТОГДА """"
	|		ИНАЧЕ УдаляемыйРегистр.КодПоОКАТО
	|	КОНЕЦ КАК КодПоОКАТО,
	|	УдаляемыйРегистр.КодПоОКТМО,
	|	УдаляемыйРегистр.ПостановкаНаУчетВНалоговомОргане,
	|	УдаляемыйРегистр.НалоговыйОрган,
	|	УдаляемыйРегистр.ПорядокНалогообложения,
	|	УдаляемыйРегистр.НалоговаяСтавка,
	|	УдаляемыйРегистр.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	УдаляемыйРегистр.СниженнаяНалоговаяСтавка,
	|	ВЫБОР
	|		КОГДА УдаляемыйРегистр.НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)
	|			ТОГДА ""11""
	|		КОГДА УдаляемыйРегистр.ВидИмущества = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыИмущества.ВходитВСоставЕСГС)
	|			ТОГДА ""01""
	|		КОГДА УдаляемыйРегистр.ВидИмущества = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыИмущества.НаходитсяНаТерриторииДругогоГосударства)
	|			ТОГДА ""04""
	|		КОГДА УдаляемыйРегистр.ВидИмущества = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыИмущества.ИспользуетсяВОЭЗКалининградскойОбласти)
	|			ТОГДА ""05""
	|		ИНАЧЕ ""03""
	|	КОНЕЦ КАК КодВидаИмущества,
	|	УдаляемыйРегистр.ДоляСтоимостиЧислитель,
	|	УдаляемыйРегистр.ДоляСтоимостиЗнаменатель,
	|	УдаляемыйРегистр.НалоговаяБаза,
	|	УдаляемыйРегистр.КадастроваяСтоимость,
	|	УдаляемыйРегистр.НеоблагаемаяКадастроваяСтоимость,
	|	УдаляемыйРегистр.КадастровыйНомер,
	|	УдаляемыйРегистр.КадастровыйНомерПомещения,
	|	УдаляемыйРегистр.ДатаРегистрацииПраваСобственности,
	|	УдаляемыйРегистр.ДатаПрекращенияПраваСобственности,
	|	УдаляемыйРегистр.ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД,
	|	УдаляемыйРегистр.ДвижимоеИмуществоПодлежащееНалогообложению,
	|	УдаляемыйРегистр.Комментарий,
	|	ВЫБОР
	|		КОГДА УдаляемыйРегистр.ВариантНастройки = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНалогаНаИмущество.ДвижимоеИмуществоПринятоеС2013)
	|		КОГДА УдаляемыйРегистр.ВариантНастройки = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНалогаНаИмущество.ДвижимоеИмуществоПринятоеДо2013)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНалогаНаИмущество.НедвижимоеИмущество)
	|	КОНЕЦ КАК ВидОбъектаНалогаНаИмущество
	|ИЗ
	|	РегистрСведений.УдалитьСтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК УдаляемыйРегистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмеренийРегистра КАК ВТИзмеренийРегистра
	|		ПО УдаляемыйРегистр.Организация = ВТИзмеренийРегистра.Организация
	|			И УдаляемыйРегистр.ОсновноеСредство = ВТИзмеренийРегистра.ОсновноеСредство
	|			И УдаляемыйРегистр.КодПоОКАТО = ВТИзмеренийРегистра.КодПоОКАТО
	|			И УдаляемыйРегистр.КодПоОКТМО = ВТИзмеренийРегистра.КодПоОКТМО
	|			И УдаляемыйРегистр.Период = ВТИзмеренийРегистра.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	#КонецОбласти
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, Запрос.МенеджерВременныхТаблиц, ДополнительныеПараметрыВыборкиДанныхДляОбработки);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИзмеренийРегистра", Результат.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	ДополнительныеПараметрыОтметкиОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметкиОбработки.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметрыОтметкиОбработки.ПолноеИмяРегистра = ПолноеИмяОбъекта;
	
	ТаблицаЗначенийОтметкиОбработки = Новый ТаблицаЗначений;
	ТаблицаЗначенийОтметкиОбработки.Колонки.Добавить("Период");
	ТаблицаЗначенийОтметкиОбработки.Колонки.Добавить("Организация");
	ТаблицаЗначенийОтметкиОбработки.Колонки.Добавить("ОсновноеСредство");
	ТаблицаЗначенийОтметкиОбработки.Колонки.Добавить("КодПоОКАТО");
	ТаблицаЗначенийОтметкиОбработки.Колонки.Добавить("КодПоОКТМО");
	
	ТаблицаЗначенийОтметкиОбработки.Добавить();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("Период", Выборка.Период);
			ЭлементБлокировки.УстановитьЗначение("Организация", Выборка.Организация);
			ЭлементБлокировки.УстановитьЗначение("ОсновноеСредство", Выборка.ОсновноеСредство);
			ЭлементБлокировки.УстановитьЗначение("КодПоОКАТО", Выборка.КодПоОКАТО);
			ЭлементБлокировки.УстановитьЗначение("КодПоОКТМО", Выборка.КодПоОКТМО);
			
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать записи регистраций особого порядка налогообложения по налогу на имущество для ""%1"" по причине: %2'");
			ТекстСообщения = СтрШаблон(
				ТекстСообщения,
				Выборка.ОсновноеСредство,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		ДокументОбъект = Документы.РегистрацияПорядкаНалогообложенияПоНалогуНаИмущество.СоздатьДокумент();
		
		ДокументОбъект.Движения.СпособыОтраженияРасходовПоИмущественнымНалогам.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Ложь);
		
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		ЗаполнитьЗначенияСвойств(ДокументОбъект.ОС.Добавить(), Выборка);
		
		ОбработаноОбъектов = ОбработаноОбъектов + 1;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗаполнитьЗначенияСвойств(ТаблицаЗначенийОтметкиОбработки[0], Выборка);
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаЗначенийОтметкиОбработки, ДополнительныеПараметрыОтметкиОбработки, Параметры.Очередь);
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов - 1;
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = НСтр("ru = 'Не удалось создать документ регистрации особого порядка налогообложения по налогу на имущество от ""%1"" в организации ""%2"" для объекта ""%3"" по причине: %4'");
			ТекстСообщения = СтрШаблон(
				ТекстСообщения,
				Выборка.Период,
				Выборка.Организация,
				Выборка.ОсновноеСредство,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,,
				ТекстСообщения);
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выполнено создание документов регистрации особого порядка налогообложения по налогу на имущество для некоторых записей удаляемого регистра (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Возврат Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецФункции

Функция ОбновитьСтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам(Параметры)
	
	ПолноеИмяРегистра = "РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам";
	МетаданныеРегистра = Метаданные.РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
				Параметры.Очередь, 
				Неопределено, 
				ПолноеИмяРегистра);
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			Если Набор.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			Иначе
				Для каждого Запись Из Набор Цикл
					Если ЗначениеЗаполнено(Запись.УдалитьВидИмущества) Тогда
						Если Запись.НалоговаяБаза = Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость Тогда
							Запись.КодВидаИмущества = "11";
						ИначеЕсли Запись.УдалитьВидИмущества = Перечисления.УдалитьВидыИмущества.ВходитВСоставЕСГС Тогда
							Запись.КодВидаИмущества = "01";
						ИначеЕсли Запись.УдалитьВидИмущества = Перечисления.УдалитьВидыИмущества.НаходитсяНаТерриторииДругогоГосударства Тогда
							Запись.КодВидаИмущества = "04";
						ИначеЕсли Запись.УдалитьВидИмущества = Перечисления.УдалитьВидыИмущества.ИспользуетсяВОЭЗКалининградскойОбласти Тогда
							Запись.КодВидаИмущества = "05";
						Иначе 
							Запись.КодВидаИмущества = "03";
						КонецЕсли;
						Запись.УдалитьВидИмущества = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Возврат Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

