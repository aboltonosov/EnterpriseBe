#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Синхронизация регл.сумм в учетных регистрах по данным СуммыДокументовВВалютеРегл
// Параметры:
// 	РегистраторыСумм - ДокументСсылка, Массив - одиночный ДокументСсылка или массив типов ДокументСсылка.
Процедура ОбновитьДвиженияДокументов(РегистраторыСумм) Экспорт
	
	СоставОбновления = Новый Структура();
	// регистры НДС к синхронизации регл.сумм
	СоставОбновления.Вставить("НДСЗаписиКнигиПродаж", РегистрыНакопления.НДСЗаписиКнигиПродаж);
	СоставОбновления.Вставить("НДСЗаписиКнигиПокупок", РегистрыНакопления.НДСЗаписиКнигиПокупок);
	СоставОбновления.Вставить("НДСПредъявленный", РегистрыНакопления.НДСПредъявленный);
	СоставОбновления.Вставить("ЖурналУчетаСчетовФактур", РегистрыСведений.ЖурналУчетаСчетовФактур);
	// регистры партий к синхронизации регл.сумм
	СоставОбновления.Вставить("ПартииТоваровОрганизаций", РегистрыНакопления.ПартииТоваровОрганизаций);
	СоставОбновления.Вставить("ПартииПроизводственныхЗатрат", РегистрыНакопления.ПартииПроизводственныхЗатрат);
	СоставОбновления.Вставить("ПрочиеРасходы", РегистрыНакопления.ПрочиеРасходы);
	СоставОбновления.Вставить("ПартииПрочихРасходов", РегистрыНакопления.ПартииПрочихРасходов);
	// регистры себестоимости к синхронизации регл.сумм
	СоставОбновления.Вставить("СебестоимостьТоваров", РегистрыНакопления.СебестоимостьТоваров);
	СоставОбновления.Вставить("ВыручкаИСебестоимостьПродаж", РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
	СоставОбновления.Вставить("Закупки", РегистрыНакопления.Закупки);
	
	Регистраторы = ОбщегоНазначенияУТКлиентСервер.Массив(РегистраторыСумм);
	Для Каждого Ссылка Из Регистраторы Цикл
		ОбновитьДвиженияДокумента(Ссылка, СоставОбновления);
	КонецЦикла;
	
	СоставОбновления.Удалить("ПартииТоваровОрганизаций");
	СоставОбновления.Удалить("ПартииПроизводственныхЗатрат");
	СоставОбновления.Удалить("ПрочиеРасходы");
	СоставОбновления.Удалить("ПартииПрочихРасходов");
	СоставОбновления.Удалить("СебестоимостьТоваров");
	СоставОбновления.Удалить("ВыручкаИСебестоимостьПродаж");
	СоставОбновления.Удалить("Закупки");
	
	Для Каждого СФ Из СчетаФактурыВыданные(Регистраторы) Цикл
		ОбновитьДвиженияДокумента(СФ.Ссылка, СоставОбновления);
	КонецЦикла;
	
	Для Каждого СФ Из СчетаФактурыПолученные(Регистраторы) Цикл
		ОбновитьДвиженияДокумента(СФ.Ссылка, СоставОбновления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьДвиженияДокумента(Ссылка, СоставОбновления)
	Перем Таблица;
	ДопСвойства = Новый Структура("ЭтоНовый, РежимЗаписи", Ложь, РежимЗаписиДокумента.Проведение);
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДопСвойства, РежимПроведенияДокумента.Неоперативный);
	Документы[ДопСвойства.ДляПроведения.МетаданныеДокумента.Имя].ИнициализироватьДанныеДокумента(Ссылка, ДопСвойства, СоставОбновления);
	Таблицы = ДопСвойства.ТаблицыДляДвижений;
	
	ДопСвойства.Вставить("ДатаРегистратора", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Дата"));
	ДопСвойства.Вставить("ПартионныйУчетВключен",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(ДопСвойства.ДатаРегистратора)));
	
	НачатьТранзакцию();
	
	Для Каждого ОписаниеОбновления Из СоставОбновления Цикл
		Если Таблицы.Свойство("Таблица" + ОписаниеОбновления.Ключ, Таблица) Тогда
			ЗаписатьДвиженияВБазу(ОписаниеОбновления.Значение, Таблица, Ссылка, ДопСвойства);
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ЗаписатьДвиженияВБазу(МенеджерДвижений, Таблица, Ссылка, ДопСвойства)
	Набор = МенеджерДвижений.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Ссылка);
	
	Набор.ДополнительныеСвойства.Вставить("ЭтоНовый", ДопСвойства.ЭтоНовый);
	Набор.ДополнительныеСвойства.Вставить("РежимЗаписи", ДопСвойства.РежимЗаписи);
	Набор.ДополнительныеСвойства.Вставить("ДатаРегистратора", ДопСвойства.ДатаРегистратора);
	Набор.ДополнительныеСвойства.Вставить("СтруктураОтраженияРеглПроводок", Новый Структура);
	Набор.ДополнительныеСвойства.Вставить("ДляПроведения", 
		Новый Структура("СтруктураВременныеТаблицы, ПартионныйУчетВключен",
			// Структура для передачи данных в модули наборов записей.
			ДопСвойства.ДляПроведения.СтруктураВременныеТаблицы,
			ДопСвойства.ПартионныйУчетВключен));
	
	Если Таблица.Количество() > 0 Тогда
		Набор.Загрузить(Таблица);
		Набор.УстановитьАктивность(Истина);
		Набор.Записать(Истина);

	КонецЕсли;
КонецПроцедуры

Функция СчетаФактурыВыданные(РегистраторыСумм)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СФ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СФ
		|ГДЕ
		|	СФ.ДокументОснование В (&РегистраторыСумм) И СФ.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	СФ.Дата ВОЗР
		|");
	Запрос.УстановитьПараметр("РегистраторыСумм", РегистраторыСумм);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция СчетаФактурыПолученные(РегистраторыСумм)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СФ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СФ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК Основания
		|		ПО Основания.Ссылка = СФ.Ссылка
		|ГДЕ
		|	Основания.ДокументОснование В (&РегистраторыСумм) И СФ.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	СФ.ДатаСоставления ВОЗР, СФ.ДатаИсправления ВОЗР
		|");
	Запрос.УстановитьПараметр("РегистраторыСумм", РегистраторыСумм);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Регистрирует данные для обработчика обновления УТ 11.3.2:
// копирует данные из ресурса "СуммаБезНДСРегл" в новый ресурс "БазаНДСРегл".
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл.ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютеРегл КАК Данные
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Данные.Регистратор) В (&Типы)
	|	И Данные.БазаНДСРегл = 0
	|	И Данные.СуммаБезНДСРегл <> 0";
		
	УстановитьПараметрЗапросаОбработчикаОбновления(Запрос);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Копирует данные из ресурса "СуммаБезНДСРегл" в новый ресурс "БазаНДСРегл".
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Данные.Период,
			|	Данные.Регистратор,
			|	Данные.Активность,
			|	Данные.ИдентификаторСтроки,
			|	Данные.СуммаБезНДС,
			|	Данные.СуммаНДС,
			|	Данные.СуммаБезНДСРегл,
			|	Данные.СуммаНДСРегл,
			|	ВЫБОР
			|		КОГДА Данные.БазаНДСРегл = 0
			|		ТОГДА Данные.СуммаБезНДСРегл
			|		ИНАЧЕ Данные.БазаНДСРегл 
			|	КОНЕЦ КАК БазаНДСРегл,
			|	Данные.Валюта,
			|	Данные.СтавкаНДС,
			|	Данные.ТипРасчетов,
			|	Данные.АналитикаУчетаПоПартнерам
			|ИЗ
			|	РегистрСведений.СуммыДокументовВВалютеРегл КАК Данные
			|ГДЕ
			|	Данные.Регистратор = &Регистратор";
			
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				
				НаборЗаписей = РегистрыСведений.СуммыДокументовВВалютеРегл.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			    			
				НаборЗаписей.Загрузить(Результат.Выгрузить());			
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра%, с регистратором по документу %Регистратор%, по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, Регистратор, ТекстСообщения);
			
		КонецПопытки;
			
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаОбработчикаОбновления(Запрос)
	
	ТипыРегистраторовДляОбновления = Новый Массив;
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыУПоставщика"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
	//++ НЕ УТКА
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ОтчетДавальцу"));
	//-- НЕ УТКА
	//++ НЕ УТ
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ПоступлениеПредметовЛизинга"));
	ТипыРегистраторовДляОбновления.Добавить(Тип("ДокументСсылка.ПоступлениеУслугПоЛизингу"));
	//-- НЕ УТ
	Запрос.УстановитьПараметр("Типы", ТипыРегистраторовДляОбновления);
	
КонецПроцедуры

Функция СоставРегистраторов(Регистры, ПропускаемыеИмена = Неопределено, ВключаемыеИмена = Неопределено)
	Состав = Новый Соответствие();
	
	Для Каждого Регистр Из Регистры Цикл
		Регистраторы = Регистр.СтандартныеРеквизиты.Регистратор.Тип.Типы();
		Для Каждого Регистратор ИЗ Регистраторы Цикл
			МетаОбъект = Метаданные.НайтиПоТипу(Регистратор);
			ИмяМетаОбъекта = МетаОбъект.Имя;
			
			Если Неопределено <> ПропускаемыеИмена И ПропускаемыеИмена.Свойство(ИмяМетаОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Неопределено <> ВключаемыеИмена И Не ВключаемыеИмена.Свойство(ИмяМетаОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			Состав.Вставить(ИмяМетаОбъекта, МетаОбъект);
		КонецЦикла;
	КонецЦикла;

	Возврат Состав;
КонецФункции

Процедура ОписатьПоляВалюты(ОбъектМетаданных, ТаблицаВыборкиИмя, ВалютаПоле)
	// 1. Используем реквизит Валюта
	// 2. Если нет реквизита Валюта, используем реквизиты табчасти ВалютаВзаиморасчетов и ИдентификаторСтроки
	// 3. Если валюты не обнаружено, считаем что для документа определена валюта упр. учета
	// ---
	// Если есть реквизит типа валюты, то в обработке валютных документов контролируем его равенство валюте регл.
	// Во всех случаях в обработке валютных документов проверяем наличие записей регистра сумм регл.
	// ТаблицаВыборкиИмя, ВалютаПоле
	ТаблицаВыборкиИмя = ОбъектМетаданных.Имя;
	ВалютаПоле = "";
	
	Если Неопределено <> ОбъектМетаданных.Реквизиты.Найти("Валюта") Тогда
		ВалютаПоле = "Валюта";
	Иначе
		Для Каждого Табчасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
			Если Неопределено <> Табчасть.Реквизиты.Найти("ВалютаВзаиморасчетов")
				И Неопределено <> Табчасть.Реквизиты.Найти("ИдентификаторСтроки")
			Тогда
				ТаблицаВыборкиИмя = ТаблицаВыборкиИмя + "." + Табчасть.Имя;
				ВалютаПоле = "ВалютаВзаиморасчетов";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#Область ТекстыЗапросовОбработчиковОбновления

Функция ТекстЗапросаСуммыВВалютеРегл()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка                КАК Ссылка,
	|	Операция.Ссылка.МоментВремени  КАК МоментВремени,
	|	""РегистрСведений""            КАК ТипМетаданных,
	|	""СуммыДокументовВВалютеРегл"" КАК ИмяМетаданных
	|ИЗ
	|	ИмяДокумента КАК Операция
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|		ПО Операция.Ссылка = Суммы.Регистратор
	|ГДЕ
	|	Операция.Ссылка.Проведен 
	|	И &ВалютаОперации <> &ВалютаРеглУчета
	|	И &ВалютаОперации <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И (Суммы.Регистратор ЕСТЬ NULL ИЛИ НЕ Суммы.Активность)
	|	И Операция.Ссылка.МоментВремени < &МоментВремени
	|	И &ИсключаемыеХозоперации
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстОбработчиковОбновления() Экспорт
	
	Перем ТаблицаВыборкиИмя, ВалютаПоле;
	
	ВалютныеРегистры = Новый Массив;
	ВалютныеРегистры.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл);
	
	ВалютныеРегистраторы = СоставРегистраторов(ВалютныеРегистры);
	ТекстЗапроса = "";
	Для Каждого Регистратор Из ВалютныеРегистраторы Цикл
		
		ОписатьПоляВалюты(Регистратор.Значение, ТаблицаВыборкиИмя, ВалютаПоле);
		ИмяДокумента = "Документ." + ТаблицаВыборкиИмя;
		ШаблонТекста = ТекстЗапросаСуммыВВалютеРегл();
		ШаблонТекста = СтрЗаменить(ШаблонТекста, "ИмяДокумента", ИмяДокумента);
		
		Если Неопределено <> Регистратор.Значение.Реквизиты.Найти("ХозяйственнаяОперация") Тогда
			ШаблонТекста = СтрЗаменить(ШаблонТекста, "&ИсключаемыеХозоперации",
				"НЕ Операция.Ссылка.ХозяйственнаяОперация В (
				|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию),
				|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию),
				|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту))");
		Иначе
			ШаблонТекста = СтрЗаменить(ШаблонТекста, "&ИсключаемыеХозоперации", "ИСТИНА");
		КонецЕсли;

		Если ЗначениеЗаполнено(ВалютаПоле) Тогда
			ШаблонТекста = СтрЗаменить(ШаблонТекста, "&ВалютаОперации", "Операция." + ВалютаПоле);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ШаблонТекста;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + ШаблонТекста;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли