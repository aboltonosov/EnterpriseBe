#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Рассчитывает и записывает очередь производственных операций.
//
// Параметры:
//  Этап				 - ДокументСсылка.ЭтапПроизводство2_2	 - этап производства.
//  УдалениеПроведения	 - Булево								 - признак обработки удаления проведения.
//  Отказ				 - Булево								 - признак прерывания обработки проведения.
//
Процедура РассчитатьОчередь(Этап, УдалениеПроведения, Отказ = Ложь) Экспорт
	
	ЗаблокироватьДанныеДляРасчетаОчереди(Этап, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Этап,
		"Ссылка,Статус,Распоряжение,Подразделение,МаршрутнаяКарта,КоэффициентМаршрутнойКарты");
	
	ВыполнитьКонтрольПередРасчетомОчереди(ДанныеЭтапа, УдалениеПроведения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЭтапа.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ УдалениеПроведения Тогда
		ОчиститьОчередь(Этап);
		Возврат;
	КонецЕсли;
	
	Очередь = ОчередьОпераций(Этап,ДанныеЭтапа);
	ЗаписатьОчередь(Этап,Очередь,Отказ);
	
КонецПроцедуры

// Очищает очередь производственных операций по этапу.
//
// Параметры:
//  Этап - ДокументСсылка.ЭтапПроизводство2_2 - этап производства.
//
Процедура ОчиститьОчередь(Этап) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей();
	Набор.Отбор.Этап.Установить(Этап);
	
	Набор.Записать(Истина);

КонецПроцедуры

// Пересчитывает очередь по указанной технологической операции.
//
// Параметры:
//  КлючОперации - Структура - см. УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации()
//  Отказ		 - Булево	 - признак прерывания обработки проведения.
//
Процедура ПересчитатьОчередь(КлючОперации, Отказ = Ложь) Экспорт
	
	ЗаблокироватьОчередьДляЗаписиПоКлючу(КлючОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОкружениеОперации = ОкружениеОперацииВОчереди(КлючОперации);
	
	ДанныеОперации = НайтиОперациюПоКлючу(ОкружениеОперации, КлючОперации);
	Если ДанныеОперации = Неопределено Тогда
		СообщитьПользователюОбОшибкеРасчетаОчереди(Отказ);
		Возврат;
	КонецЕсли;
	
	Этап = КлючОперации.Этап;
	
	ЗаблокироватьДанныеДляРасчетаОчередиПоОперации(Этап, ДанныеОперации, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьОчередьПоОперации(Этап, ДанныеОперации, Отказ);
	
КонецПроцедуры

// Возвращает данные операции из очереди
//
// Параметры:
//  КлючОперации - Структура - см. УправлениеПроизводствомКлиентСервер.КлючПроизводственнойОперации()
// 
// Возвращаемое значение:
//   - Структура - данные операции из очереди
//
Функция ДанныеОперацииИзОчереди(КлючОперации) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Очередь.Подразделение             КАК Подразделение,
		|	Очередь.МаршрутнаяКарта           КАК МаршрутнаяКарта,
		//
		|	Очередь.Операция                  КАК Операция,
		|	Очередь.ИдентификаторОперации     КАК ИдентификаторОперации,
		//
		|	ВЫБОР
		|		КОГДА Очередь.Операция.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
		|			ТОГДА Очередь.Операция.РабочийЦентр
		|		ИНАЧЕ Очередь.Операция.РабочийЦентр.ВидРабочегоЦентра
		|	КОНЕЦ КАК ВидРабочегоЦентра,
		|	
		|	ВЫБОР
		|		КОГДА Очередь.Операция.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
		|			ТОГДА Очередь.Операция.РабочийЦентр
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|	КОНЕЦ КАК РабочийЦентр,
		|
		|	Очередь.Операция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		//
		|	Очередь.Этап                      КАК Этап,
		//
		|	Очередь.Запланировано          КАК Запланировано,
		|	ВЫБОР
		|		КОГДА Очередь.Запланировано > Очередь.Создано
		|			ТОГДА Очередь.Запланировано - Очередь.Создано
		|		ИНАЧЕ 0
		|	КОНЕЦ                          КАК ОжиданиеСоздания,
		|	Очередь.ОжиданиеПредшествующих КАК ОжиданиеПредшествующих,
		|	Очередь.НачатыПредшествующие   КАК НачатыПредшествующие,
		|	Очередь.МожноВыполнять         КАК МожноВыполнять,
		|	Очередь.Выполняется            КАК Выполняется,
		|	Очередь.Выполнено              КАК Выполнено
		|ИЗ
		|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
		|ГДЕ
		|	Очередь.Этап = &Этап
		|	И Очередь.Операция = &Операция
		|	И Очередь.ИдентификаторОперации = &ИдентификаторОперации");
	
	Запрос.УстановитьПараметр("Этап", КлючОперации.Этап);
	Запрос.УстановитьПараметр("Операция", КлючОперации.Операция);
	Запрос.УстановитьПараметр("ИдентификаторОперации", КлючОперации.ИдентификаторОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОперации = Новый Структура();
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеОперации.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеОперации, Выборка);
	
	Возврат ДанныеОперации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетПоЭтапу

Процедура ЗаблокироватьДанныеДляРасчетаОчереди(Этап, Отказ)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПроизводственнаяОперация2_2");
	ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьПроизводственныхОпераций");
	ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать очередь производственных операций: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				, 
				Отказ); 
			
	КонецПопытки;
	
КонецПроцедуры

Функция ОчередьОпераций(Этап, ДанныеЭтапа)
	
	КлючеваяОперация = "МежцеховоеУправление2_2.РасчетОчередиПроизводственныхОпераций";
	ОписаниеЗамера = Производительность.НачатьЗамерВремени(КлючеваяОперация);
	
	ОчередьОпераций = ОчередьОперацийВнутриЗамераВремени(Этап, ДанныеЭтапа);
	
	КоличествоДанных = ОчередьОпераций.Количество();
	Производительность.ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоДанных);
	
	Возврат ОчередьОпераций;
	
КонецФункции

Функция ОчередьОперацийВнутриЗамераВремени(Этап, ДанныеЭтапа)
	
	ОчередьОпераций = ОчередьОперацийКонструктор();
	
	ДанныеМаршрутнойКарты = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКарты(
		ДанныеЭтапа.МаршрутнаяКарта, 
		ДанныеЭтапа.КоэффициентМаршрутнойКарты,
		,
		,
		"Операции");

	СписокОпераций = СписокОперацийДляРасчета(Этап, ДанныеМаршрутнойКарты);
	
	Для каждого ТекущаяСтрока Из СписокОпераций Цикл
		
		НоваяОперация = ОчередьОпераций.Добавить();
		
		НоваяОперация.Этап = Этап;
		
		ЗаполнитьЗначенияСвойств(
			НоваяОперация,
			ТекущаяСтрока,
			"Операция,
			|ИдентификаторОперации,
			|НомерОперации,
			|НомерСледующейОперации");

		ЗаполнитьЗначенияСвойств(
			НоваяОперация,
			ДанныеЭтапа,
			"Распоряжение,
			|Подразделение,
			|МаршрутнаяКарта,
			|КоэффициентМаршрутнойКарты");
		
		НоваяОперация.Запланировано = ТекущаяСтрока.КоличествоНаПартию;
		РассчитатьПоказателиВыполненияОперации(НоваяОперация, ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат ОчередьОпераций;
	
КонецФункции

Процедура ЗаписатьОчередь(Этап, Очередь, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей();
	Набор.Отбор.Этап.Установить(Этап);
	
	Набор.Загрузить(Очередь);
	
	Попытка
		Набор.Записать(Истина);
	Исключение
		СообщитьПользователюОбОшибкеРасчетаОчереди(Отказ);
		Возврат;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ПересчетПоОперации

Процедура ЗаблокироватьОчередьДляЗаписиПоКлючу(КлючОперации, Отказ = Ложь) Экспорт
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьПроизводственныхОпераций");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки.УстановитьЗначение("Этап", КлючОперации.Этап);
	ЭлементБлокировки.УстановитьЗначение("Операция", КлючОперации.Операция);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторОперации", КлючОперации.ИдентификаторОперации);

	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать очередь производственных операций: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				, 
				Отказ); 
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаблокироватьДанныеДляРасчетаОчередиПоОперации(Этап, ДанныеОперации, Отказ)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	Последовательность = ДанныеОперации.Владелец();
	
	Для каждого ТекущаяСтрока Из Последовательность Цикл
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ПроизводственнаяОперация2_2");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
		
		ЭлементБлокировки.УстановитьЗначение("Операция", ТекущаяСтрока.Операция);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторОперации", ТекущаяСтрока.ИдентификаторОперации);
		
		Если ТекущаяСтрока.НомерОперации = ДанныеОперации.НомерСледующейОперации 
			ИЛИ ТекущаяСтрока = ДанныеОперации Тогда
		
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьПроизводственныхОпераций");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
			
			ЭлементБлокировки.УстановитьЗначение("Операция", ТекущаяСтрока.Операция);
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторОперации", ТекущаяСтрока.ИдентификаторОперации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		БлокировкаДанных.Заблокировать();
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать очередь производственных операций: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				, 
				Отказ); 
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ПересчитатьОчередьПоОперации(Этап, ДанныеОперации, Отказ)
	
	ДополнитьОперацииРезультатомВыполнения(Этап, ДанныеОперации.Владелец());
	
	Последовательность = СледующиеОперации(ДанныеОперации);
	Последовательность.Вставить(0, ДанныеОперации);
	
	Набор = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей();
	
	Для каждого ТекущаяСтрока Из Последовательность Цикл
		
		Набор.Отбор.Этап.Установить(Этап);
		Набор.Отбор.Операция.Установить(ТекущаяСтрока.Операция);
		Набор.Отбор.ИдентификаторОперации.Установить(ТекущаяСтрока.ИдентификаторОперации);
		
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			СообщитьПользователюОбОшибкеРасчетаОчереди(Отказ);
			Возврат;
		КонецЕсли;
		
		РассчитатьПоказателиВыполненияОперации(Набор[0], ТекущаяСтрока);
		
		Попытка
			Набор.Записать(Истина);
		Исключение
			СообщитьПользователюОбОшибкеРасчетаОчереди(Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Последовательность

Функция ПредыдущиеОперации(Курсор)
	
	Отбор = Новый Структура("НомерСледующейОперации", Курсор.НомерОперации);
	
	Возврат Курсор.Владелец().НайтиСтроки(Отбор);
	
КонецФункции

Функция СледующиеОперации(Курсор)
	
	Отбор = Новый Структура("НомерОперации", Курсор.НомерСледующейОперации);
	
	Возврат Курсор.Владелец().НайтиСтроки(Отбор);
	
КонецФункции

Функция ОкружениеОперацииВОчереди(КлючОперации)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ТекущаяОперация.Операция КАК Операция,
		|	ТекущаяОперация.ИдентификаторОперации КАК ИдентификаторОперации,
		|	ТекущаяОперация.НомерОперации КАК НомерОперации,
		|	ТекущаяОперация.НомерСледующейОперации КАК НомерСледующейОперации,
		|	ТекущаяОперация.Запланировано КАК КоличествоНаПартию,
		|	ТекущаяОперация.ВремяВыполненияЕдИзм КАК ВремяВыполненияЕдИзм
		|ПОМЕСТИТЬ ВТТекущаяОперация
		|ИЗ
		|	РегистрСведений.ОчередьПроизводственныхОпераций КАК ТекущаяОперация
		|ГДЕ
		|	ТекущаяОперация.Этап = &Этап
		|	И ТекущаяОперация.Операция = &Операция
		|	И ТекущаяОперация.ИдентификаторОперации = &ИдентификаторОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СледующиеОперации.Операция КАК Операция,
		|	СледующиеОперации.ИдентификаторОперации КАК ИдентификаторОперации,
		|	СледующиеОперации.НомерОперации КАК НомерОперации,
		|	СледующиеОперации.НомерСледующейОперации КАК НомерСледующейОперации,
		|	СледующиеОперации.Запланировано КАК КоличествоНаПартию,
		|	СледующиеОперации.ВремяВыполненияЕдИзм КАК ВремяВыполненияЕдИзм
		|ПОМЕСТИТЬ ВТСледующиеОперации
		|ИЗ
		|	РегистрСведений.ОчередьПроизводственныхОпераций КАК СледующиеОперации
		|ГДЕ
		|	СледующиеОперации.Этап = &Этап
		|	И СледующиеОперации.НомерОперации В
		|			(ВЫБРАТЬ
		|				ТекущаяОперация.НомерСледующейОперации
		|			ИЗ
		|				ВТТекущаяОперация КАК ТекущаяОперация)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Операции.Операция                   КАК Операция,
		|	Операции.ИдентификаторОперации      КАК ИдентификаторОперации,
		|	Операции.НомерОперации              КАК НомерОперации,
		|	Операции.НомерСледующейОперации     КАК НомерСледующейОперации,
		|	Операции.КоличествоНаПартию         КАК КоличествоНаПартию,
		|	Операции.Операция.Количество        КАК Количество,
		|	Операции.ВремяВыполненияЕдИзм       КАК ВремяВыполненияЕдИзм,
		|
		|	&ТекстРеквизитыИсполнителяОперации,
		|	&ТекстРеквизитыРасчетаВремениВыполненияОперации
		|ИЗ
		|	(ВЫБРАТЬ
		|		СледующиеОперации.Операция КАК Операция,
		|		СледующиеОперации.ИдентификаторОперации КАК ИдентификаторОперации,
		|		СледующиеОперации.НомерОперации КАК НомерОперации,
		|		СледующиеОперации.НомерСледующейОперации КАК НомерСледующейОперации,
		|		СледующиеОперации.КоличествоНаПартию КАК КоличествоНаПартию,
		|		СледующиеОперации.ВремяВыполненияЕдИзм КАК ВремяВыполненияЕдИзм
		|	ИЗ
		|		ВТСледующиеОперации КАК СледующиеОперации
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПредыдущиеОперации.Операция,
		|		ПредыдущиеОперации.ИдентификаторОперации,
		|		ПредыдущиеОперации.НомерОперации,
		|		ПредыдущиеОперации.НомерСледующейОперации,
		|		ПредыдущиеОперации.Запланировано,
		|		ПредыдущиеОперации.ВремяВыполненияЕдИзм
		|	ИЗ
		|		РегистрСведений.ОчередьПроизводственныхОпераций КАК ПредыдущиеОперации
		|	ГДЕ
		|		ПредыдущиеОперации.Этап = &Этап
		|		И ПредыдущиеОперации.НомерСледующейОперации В
		|				(ВЫБРАТЬ
		|					ТекущаяОперация.НомерОперации
		|				ИЗ
		|					ВТТекущаяОперация КАК ТекущаяОперация
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					СледующиеОперации.НомерОперации
		|				ИЗ
		|					ВТСледующиеОперации КАК СледующиеОперации)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТекущаяОперация.Операция,
		|		ТекущаяОперация.ИдентификаторОперации,
		|		ТекущаяОперация.НомерОперации,
		|		ТекущаяОперация.НомерСледующейОперации,
		|		ТекущаяОперация.КоличествоНаПартию,
		|		ТекущаяОперация.ВремяВыполненияЕдИзм
		|	ИЗ
		|		ВТТекущаяОперация КАК ТекущаяОперация) КАК Операции");
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстРеквизитыИсполнителяОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыИсполнителяОперации("Операции.Операция"));
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстРеквизитыРасчетаВремениВыполненияОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации("Операции.Операция"));
		
	Запрос.УстановитьПараметр("Этап", КлючОперации.Этап);
	Запрос.УстановитьПараметр("Операция", КлючОперации.Операция);
	Запрос.УстановитьПараметр("ИдентификаторОперации", КлючОперации.ИдентификаторОперации);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ОчередьОперацийКонструктор()
	
	НаборЗаписей = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей();
	
	Возврат НаборЗаписей.ВыгрузитьКолонки();
	
КонецФункции

Функция НайтиОперациюПоКлючу(СписокОпераций, КлючОперации)
	
	ОтборОперация = Новый Структура("Операция,ИдентификаторОперации");
	ЗаполнитьЗначенияСвойств(ОтборОперация, КлючОперации);
	
	НайденныеСтроки = СписокОпераций.НайтиСтроки(ОтборОперация);
	Если НайденныеСтроки.ВГраница() <> -1 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	Возврат Неопределено;

КонецФункции

Процедура ВыполнитьКонтрольПередРасчетомОчереди(ДанныеЭтапа, УдалениеПроведения, Отказ)
	
	Если ДанныеЭтапа.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ УдалениеПроведения Тогда
		
		ПроверяемыеСтатусы = Новый Массив;
		
		ПроверяемыеСтатусы.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Создана);
		ПроверяемыеСтатусы.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
		
		Если ДанныеЭтапа.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
			ПроверяемыеСтатусы.Добавить(Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК Операции
			|ГДЕ
			|	Операции.Этап = &Этап
			|	И Операции.Статус В (&ПроверяемыеСтатусы)
			|	И НЕ Операции.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("Этап", ДанныеЭтапа.Ссылка);
		Запрос.УстановитьПараметр("ПроверяемыеСтатусы", ПроверяемыеСтатусы);
		
		ТекстСообщения = НСтр("ru = 'По этапу созданы операции.'");
		
	Иначе
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
			|ГДЕ
			|	Очередь.Этап = &Этап
			|
			|ИМЕЮЩИЕ
			|	СУММА(Очередь.Создано) > 0 И
			|	(МАКСИМУМ(ВЫБОР
			|				КОГДА Очередь.МаршрутнаяКарта <> &МаршрутнаяКарта
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ) = ИСТИНА
			|		ИЛИ МАКСИМУМ(ВЫБОР
			|				КОГДА Очередь.КоэффициентМаршрутнойКарты <> &КоэффициентМаршрутнойКарты
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ) = ИСТИНА)");
		
		Запрос.УстановитьПараметр("Этап", ДанныеЭтапа.Ссылка);
		Запрос.УстановитьПараметр("МаршрутнаяКарта", ДанныеЭтапа.МаршрутнаяКарта);
		Запрос.УстановитьПараметр("КоэффициентМаршрутнойКарты", ДанныеЭтапа.КоэффициентМаршрутнойКарты);
		
		ТекстСообщения = НСтр("ru = 'Запрещено изменять маршрутную карту и коэффициент после создания производственных операций.'");
		
	КонецЕсли;
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Ошибка расчета очереди операций.'") + " " + ТекстСообщения,
				,
				,
				, 
				Отказ); 
		
	КонецЕсли;

КонецПроцедуры

Функция СписокОперацийДляРасчета(Этап, ДанныеМаршрутнойКарты)
	
	ДополнитьОперацииРезультатомВыполнения(Этап, ДанныеМаршрутнойКарты.Операции);
	Возврат ДанныеМаршрутнойКарты.Операции;
	
КонецФункции

Процедура ДополнитьОперацииРезультатомВыполнения(Этап, Операции)
	
	ВыполнениеОпераций = РезультатВыполненияОпераций(
		Этап, 
		Операции.Скопировать(,"Операция,ИдентификаторОперации"));
	
	ОписаниеТипов = Новый ОписаниеТипов(
		"Число", 
		Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	Операции.Колонки.Добавить("Создано",     ОписаниеТипов);
	Операции.Колонки.Добавить("Выполняется", ОписаниеТипов);
	Операции.Колонки.Добавить("Выполнено",   ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов(
		"Число", 
		Новый КвалификаторыЧисла(10, 1, ДопустимыйЗнак.Неотрицательный));
	
	Операции.Колонки.Добавить("ВремяВыполненияСозданныхОпераций", ОписаниеТипов);
	
	ОтборОперация = Новый Структура("Операция,ИдентификаторОперации");
	
	Для каждого ДанныеОперации Из Операции Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборОперация, ДанныеОперации);
		НайденныеСтроки = ВыполнениеОпераций.НайтиСтроки(ОтборОперация);
		
		Если НайденныеСтроки.ВГраница() <> -1 Тогда
			
			ЗаполнитьЗначенияСвойств(
				ДанныеОперации,
				НайденныеСтроки[0],
				"Создано,
				|Выполняется,
				|Выполнено");
			
			ДанныеОперации.ВремяВыполненияСозданныхОпераций = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
				НайденныеСтроки[0].ВремяВыполнения, 
				ДанныеОперации.ВремяВыполненияЕдИзм); 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатВыполненияОпераций(Этап, Операции = Неопределено)
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить("
		|ВЫБРАТЬ
		|	ПроизводственнаяОперация.Операция КАК Операция,
		|	ПроизводственнаяОперация.ИдентификаторОперации КАК ИдентификаторОперации,
		|	СУММА(ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус В (&СтатусСоздана, &СтатусВыполняется, &СтатусВыполнена)
		|				ТОГДА ПроизводственнаяОперация.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Создано,
		|	СУММА(ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус = &СтатусВыполняется
		|				ТОГДА ПроизводственнаяОперация.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Выполняется,
		|	СУММА(ВЫБОР
		|			КОГДА ПроизводственнаяОперация.Статус = &СтатусВыполнена
		|				ТОГДА ПроизводственнаяОперация.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Выполнено,
		|	СУММА(ВЫБОР ПроизводственнаяОперация.ВремяВыполненияЕдИзм
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
		|				ТОГДА 60
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
		|				ТОГДА 3600
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.День)
		|				ТОГДА 86400
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
		|				ТОГДА 86400
		|			ИНАЧЕ 1
		|		КОНЕЦ * ПроизводственнаяОперация.ВремяВыполнения) КАК ВремяВыполнения
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК ПроизводственнаяОперация
		|ГДЕ
		|	ПроизводственнаяОперация.Этап = &Этап
		|	И &ТекстОтборОперации
		|	И ПроизводственнаяОперация.Статус <> &СтатусНеВыполнена
		|	И ПроизводственнаяОперация.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроизводственнаяОперация.Операция,ПроизводственнаяОперация.ИдентификаторОперации");
	
	Если Операции <> Неопределено Тогда
		ТекстыЗапроса.Вставить(0,
			"ВЫБРАТЬ
			|	ОтборОперации.Операция,
			|	ОтборОперации.ИдентификаторОперации
			|ПОМЕСТИТЬ ВтОтборОперации
			|ИЗ
			|	&ОтборОперации КАК ОтборОперации");
	КонецЕсли;
	
	ТекстЗапроса = УправлениеПроизводством.ОбъединитьТекстыЗапросаВПакет(ТекстыЗапроса);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Запрос.УстановитьПараметр("СтатусСоздана", Перечисления.СтатусыПроизводственныхОпераций.Создана);
	Запрос.УстановитьПараметр("СтатусВыполняется", Перечисления.СтатусыПроизводственныхОпераций.Выполняется);
	Запрос.УстановитьПараметр("СтатусВыполнена", Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
	Запрос.УстановитьПараметр("СтатусНеВыполнена", Перечисления.СтатусыПроизводственныхОпераций.НеВыполнена);
	
	Если Операции <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтборОперации", "
			|(ПроизводственнаяОперация.Операция,ПроизводственнаяОперация.ИдентификаторОперации) 
			|	В (ВЫБРАТЬ Т.Операция,Т.ИдентификаторОперации Из ВтОтборОперации КАК Т)");
		Запрос.УстановитьПараметр("ОтборОперации", Операции);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтборОперации", "Истина");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Операция,ИдентификаторОперации");
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьПоказателиВыполненияОперации(Операция, ДанныеОперации)
	
	Операция.Создано                = ДанныеОперации.Создано;
	Операция.ОжиданиеПредшествующих = 0;
	Операция.НачатыПредшествующие   = 0;
	Операция.МожноВыполнять         = 0;
	Операция.Выполняется            = ДанныеОперации.Выполняется;
	Операция.Выполнено              = ДанныеОперации.Выполнено;
	
	ПредыдущиеОперации = ПредыдущиеОперации(ДанныеОперации);
	
	Если ПредыдущиеОперации.ВГраница() <> -1 Тогда
		
		МожноВыполнятьРасчетное       = -1;
		НачатыПредшествующиеРасчетное = -1;
		
		Если Операция.Запланировано > 0 Тогда
		
			Для каждого ПредыдущаяОперация Из ПредыдущиеОперации Цикл
				
				РасчетноеКоличество = ПредыдущаяОперация.Выполнено
										/(ПредыдущаяОперация.КоличествоНаПартию/Операция.Запланировано);
				
				МожноВыполнятьРасчетное = ?(МожноВыполнятьРасчетное > -1,
													Мин(МожноВыполнятьРасчетное,
														РасчетноеКоличество),
													РасчетноеКоличество);
			КонецЦикла;
			
			Для каждого ПредыдущаяОперация Из ПредыдущиеОперации Цикл
				
				РасчетноеКоличество = ПредыдущаяОперация.Выполняется
										/(ПредыдущаяОперация.КоличествоНаПартию/Операция.Запланировано)
									+ Макс(ПредыдущаяОперация.Выполнено
											/(ПредыдущаяОперация.КоличествоНаПартию/Операция.Запланировано) 
										- МожноВыполнятьРасчетное, 0);
				
				НачатыПредшествующиеРасчетное = ?(НачатыПредшествующиеРасчетное > -1,
														Мин(НачатыПредшествующиеРасчетное,
															РасчетноеКоличество), 
														РасчетноеКоличество);
				
			КонецЦикла;
		
		КонецЕсли;
		
		НачатыПредшествующиеРасчетное = Макс(НачатыПредшествующиеРасчетное, 0);
		МожноВыполнятьРасчетное       = Макс(МожноВыполнятьРасчетное, 0);
		
		ОжидаетВыполнения = Макс(Операция.Запланировано, Операция.Создано) - (Операция.Выполняется + Операция.Выполнено);
		
		Операция.МожноВыполнять = Мин(МожноВыполнятьРасчетное, Макс(Операция.Запланировано, Операция.Создано)) - (Операция.Выполняется + Операция.Выполнено);
		Операция.НачатыПредшествующие = Мин(НачатыПредшествующиеРасчетное, ОжидаетВыполнения);
		Операция.ОжиданиеПредшествующих = ОжидаетВыполнения - Операция.МожноВыполнять - Операция.НачатыПредшествующие;
		
	Иначе
		
		Операция.МожноВыполнять = Макс(Операция.Запланировано, Операция.Создано) - (Операция.Выполняется + Операция.Выполнено);
		
	КонецЕсли;
	
	Если ДанныеОперации.ВремяВыполненияСозданныхОпераций > 0 Тогда
		
		Если Операция.Запланировано > Операция.Создано
			И ДанныеОперации.Количество > 0 Тогда
		
			ОбщееВремяВыполнения = ОперативныйУчетПроизводстваКлиентСервер.СтруктураРасчетаОбщегоВремениВыполнения();
			ЗаполнитьЗначенияСвойств(ОбщееВремяВыполнения, ДанныеОперации);
			
			ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
					ОбщееВремяВыполнения,
					(Операция.Запланировано - Операция.Создано) / ДанныеОперации.Количество);
			
			Операция.ВремяВыполнения      = ОбщееВремяВыполнения.ВремяВыполнения + ДанныеОперации.ВремяВыполненияСозданныхОпераций;
			Операция.ВремяВыполненияЕдИзм = ОбщееВремяВыполнения.ВремяВыполненияЕдИзм;
			
		Иначе
			
			Операция.ВремяВыполнения      = ДанныеОперации.ВремяВыполненияСозданныхОпераций;
			Операция.ВремяВыполненияЕдИзм = ДанныеОперации.ВремяВыполненияЕдИзм;
			
		КонецЕсли;
		
	Иначе
		
		ОбщееВремяВыполнения = ОперативныйУчетПроизводстваКлиентСервер.СтруктураРасчетаОбщегоВремениВыполнения();
		ЗаполнитьЗначенияСвойств(ОбщееВремяВыполнения, ДанныеОперации);
		
		ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
				ОбщееВремяВыполнения, 
				Операция.КоэффициентМаршрутнойКарты);
		
		Операция.ВремяВыполнения      = ОбщееВремяВыполнения.ВремяВыполнения;
		Операция.ВремяВыполненияЕдИзм = ОбщееВремяВыполнения.ВремяВыполненияЕдИзм;
		
	КонецЕсли;
	
	Операция.Порядок = ?(Операция.Выполнено > 0, 5, 
						?(Операция.Выполняется > 0, 4,
						?(Операция.МожноВыполнять > 0, 3,
						?(Операция.НачатыПредшествующие > 0, 2,
						?(Операция.ОжиданиеПредшествующих > 0, 1, 0)))));
	
КонецФункции

Процедура СообщитьПользователюОбОшибкеРасчетаОчереди(Отказ)
	
	ТекстСообщения = НСтр("ru = 'Не удалось рассчитать очередь производственных операций.'");
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			,
			, 
			Отказ);

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Очередь.Подразделение,
		|	Очередь.Этап,
		|	Очередь.Операция,
		|	Очередь.ИдентификаторОперации
		|ИЗ
		|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
		|ГДЕ
		|	Очередь.ИдентификаторОперации = 0");
	
	ДанныеКОбработке = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ДополнительныеПараметры.ПолноеИмяРегистра             = "РегистрСведений.ОчередьПроизводственныхОпераций";
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
				Параметры,
				ДанныеКОбработке,
				ДополнительныеПараметры);

КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.ОчередьПроизводственныхОпераций";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыДляОбработки.Подразделение         КАК Подразделение,
		|	ОбъектыДляОбработки.Этап                  КАК Этап,
		|	ОбъектыДляОбработки.Операция              КАК Операция,
		|	ОбъектыДляОбработки.ИдентификаторОперации КАК ИдентификаторОперации
		|ИЗ
		|	" + Результат.ИмяВременнойТаблицы + " КАК ОбъектыДляОбработки");
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	КешированныеЗначения = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИзменен = Ложь;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьПроизводственныхОпераций");
			ЭлементБлокировки.УстановитьЗначение("Подразделение", Выборка.Подразделение);
			ЭлементБлокировки.УстановитьЗначение("Этап", Выборка.Этап);
			ЭлементБлокировки.УстановитьЗначение("Операция", Выборка.Операция);
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторОперации", Выборка.ИдентификаторОперации);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей();
			Набор.Отбор.Подразделение.Установить(Выборка.Подразделение);
			Набор.Отбор.Этап.Установить(Выборка.Этап);
			Набор.Отбор.Операция.Установить(Выборка.Операция);
			
			Набор.Прочитать();
			
			Если Набор.Количество() > 0 
				И Набор[0].ИдентификаторОперации = 0 Тогда
				
				ТекущаяОперация = Набор[0];
				
				ДанныеМаршрутнойКарты = КешированныеЗначения[ТекущаяОперация.МаршрутнаяКарта];
				Если ДанныеМаршрутнойКарты = Неопределено Тогда
					
					ДанныеМаршрутнойКарты = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКарты(
						ТекущаяОперация.МаршрутнаяКарта, 
						1,
						,
						,
						"Операции");
						
					КешированныеЗначения.Вставить(ТекущаяОперация.МаршрутнаяКарта, ДанныеМаршрутнойКарты);
					
				КонецЕсли;
				
				Если ДанныеМаршрутнойКарты <> Неопределено Тогда
					
					ОтборОперация = Новый Структура("Операция", Выборка.Операция);
					Операции = ДанныеМаршрутнойКарты.Операции;
					НайденныеСтроки = Операции.НайтиСтроки(ОтборОперация);
					Если НайденныеСтроки.ВГраница() <> -1 Тогда
						ТекущаяОперация.ИдентификаторОперации = НайденныеСтроки[0].ИдентификаторОперации;
						ОбъектИзменен = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние этапа: %Ссылка% по причине: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Этап);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Этап.Метаданные(), Выборка.Этап, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;

	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
