
#Область ОписаниеПеременных

&НаСервере
Перем ОбъектЭтогоОтчета; // Объект метаданных отчета, из которого открыта форма записи.

&НаКлиенте
Перем УправляемаяФормаВладелец; // Форма отчета, из которого открыта форма записи.

&НаКлиенте
Перем УникальностьФормы; // Уникальный идентификатор формы отчета.

&НаКлиенте
Перем ПоказыватьПредупреждениеПослеПереходаПоСсылке; // Флаг необходимости показа предупреждения.

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеВидимостью(Ложь, Ложь);
	
	ЦветСтиляНезаполненныйРеквизит 	= ЦветаСтиля["ЦветНезаполненныйРеквизитБРО"];
	ЦветСтиляЦветГиперссылкиБРО		= ЦветаСтиля["ЦветГиперссылкиБРО"];
	ФормированиеПредставленияПродукцииНаСервере(Запись.П000020000301, Запись.П000020000302);
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЦветСтиляНезаполненныйРеквизит 	= ЦветаСтиля["ЦветНезаполненныйРеквизитБРО"];
	ЦветСтиляЦветГиперссылкиБРО		= ЦветаСтиля["ЦветГиперссылкиБРО"];
	
	
	// Определим текст запроса динамического списка.
	СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции = "";
	РегламентированнаяОтчетностьПереопределяемый.СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции(
														СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции);
	СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво = "";
	РегламентированнаяОтчетностьПереопределяемый.СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво(
														СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво);
	СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции = "";
	РегламентированнаяОтчетностьПереопределяемый.СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции(
														СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции);
			
			
	МетаданныеНоменклатуры = Метаданные.Справочники.Номенклатура;
	ЕстьПроизводитель = ОбщегоНазначения.ЕстьРеквизитОбъекта("Производитель", МетаданныеНоменклатуры);
	ЕстьИмпортер = ОбщегоНазначения.ЕстьРеквизитОбъекта("Импортер", МетаданныеНоменклатуры);
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	ЕстьСтранаРегистрации = ОбщегоНазначения.ЕстьРеквизитОбъекта("СтранаРегистрации", МетаданныеКонтрагенты);
	ЕстьНалоговыйНомер = ОбщегоНазначения.ЕстьРеквизитОбъекта("НалоговыйНомер", МетаданныеКонтрагенты);
		
	ВставитьКодПродукции = Ложь;
	
	Если (НЕ ПустаяСтрока(СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции)) 
	    И (НЕ ПустаяСтрока(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво))
		И ЕстьПроизводитель И ЕстьИмпортер И ЕстьНалоговыйНомер И ЕстьСтранаРегистрации Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|
				|	ПроизводителиИмпортеры.ПроизводительИмпортер.НаименованиеПолное КАК НаименованиеПолное,
				|	ВЫБОР
				|		КОГДА ПроизводителиИмпортеры.ПроизводительИмпортер.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
				|			ТОГДА ПроизводителиИмпортеры.ПроизводительИмпортер.ИНН
				|		ИНАЧЕ ПроизводителиИмпортеры.ПроизводительИмпортер.НалоговыйНомер
				|	КОНЕЦ КАК ИНН,
				|	ВЫБОР
				|		КОГДА ПроизводителиИмпортеры.ПроизводительИмпортер.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
				|			ТОГДА ПроизводителиИмпортеры.ПроизводительИмпортер.КПП
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК КПП,
				|	ПроизводителиИмпортеры.ПроизводительИмпортер.СтранаРегистрации КАК СтранаРегистрации
				|ИЗ
				|	(ВЫБРАТЬ
				|		ВЫБОР
				|			КОГДА СправочникНоменклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				|				ТОГДА СправочникНоменклатура.Производитель
				|			ИНАЧЕ СправочникНоменклатура.Импортер
				|		КОНЕЦ КАК ПроизводительИмпортер
				|	ИЗ
				|		" + СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции + " КАК СведенияОбАлкогольнойПродукции
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
				|			ПО СведенияОбАлкогольнойПродукции.Номенклатура = СправочникНоменклатура.Ссылка
				|	ГДЕ
				|		СведенияОбАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(" 
				+ СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво + ")
				|		И СведенияОбАлкогольнойПродукции.КодВида169 = &КодПродукции) КАК ПроизводителиИмпортеры
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
				|		ПО ПроизводителиИмпортеры.ПроизводительИмпортер = Контрагенты.Ссылка";
				
		ВставитьКодПродукции = Истина;
		
	ИначеЕсли ЕстьПроизводитель И ЕстьИмпортер И ЕстьНалоговыйНомер И ЕстьСтранаРегистрации Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|
				|	ПроизводителиИмпортеры.ПроизводительИмпортер.НаименованиеПолное КАК НаименованиеПолное,
				|	ВЫБОР
				|		КОГДА ПроизводителиИмпортеры.ПроизводительИмпортер.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
				|			ТОГДА ПроизводителиИмпортеры.ПроизводительИмпортер.ИНН
				|		ИНАЧЕ ПроизводителиИмпортеры.ПроизводительИмпортер.НалоговыйНомер
				|	КОНЕЦ КАК ИНН,
				|	ВЫБОР
				|		КОГДА ПроизводителиИмпортеры.ПроизводительИмпортер.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
				|			ТОГДА ПроизводителиИмпортеры.ПроизводительИмпортер.КПП
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК КПП,
				|	ПроизводителиИмпортеры.ПроизводительИмпортер.СтранаРегистрации КАК СтранаРегистрации
				|ИЗ
				|	(ВЫБРАТЬ
				|		ВЫБОР
				|			КОГДА СправочникНоменклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				|				ТОГДА СправочникНоменклатура.Производитель
				|			ИНАЧЕ СправочникНоменклатура.Импортер
				|		КОНЕЦ КАК ПроизводительИмпортер
				|	ИЗ
				|		Справочник.Номенклатура КАК СправочникНоменклатура) КАК ПроизводителиИмпортеры
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
				|		ПО ПроизводителиИмпортеры.ПроизводительИмпортер = Контрагенты.Ссылка";
		
	ИначеЕсли ЕстьНалоговыйНомер И ЕстьСтранаРегистрации Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|
				|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
				|	ВЫБОР
				|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
				|			ТОГДА Контрагенты.ИНН
				|		ИНАЧЕ Контрагенты.НалоговыйНомер
				|	КОНЕЦ КАК ИНН,
				|	ВЫБОР
				|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
				|			ТОГДА Контрагенты.КПП
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК КПП,
				|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации				
				|ИЗ
				|Справочник.Контрагенты КАК Контрагенты
				|ГДЕ Контрагенты.НаименованиеПолное ЕСТЬ НЕ NULL";
				
	Иначе
				
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|
				|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
				|	Контрагенты.ИНН КАК ИНН,
				|	Контрагенты.КПП КАК КПП,
				|	"""" КАК СтранаРегистрации				
				|ИЗ
				|Справочник.Контрагенты КАК Контрагенты
				|ГДЕ Контрагенты.НаименованиеПолное ЕСТЬ НЕ NULL";
				
	КонецЕсли;
	    
	ДинСписокПроизводителяИмпортера.ТекстЗапроса = ТекстЗапроса;
	ДинСписокПроизводителяИмпортера.ОсновнаяТаблица = "Справочник.Контрагенты";
	ДинСписокПроизводителяИмпортера.ДинамическоеСчитываниеДанных = Истина;
	
	ИзмерениеПоставщик = "";
	Если СтрНайти(ВРег(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции), 
					  ВРег("РегистрСведений.")) > 0 Тогда
		ИзмерениеПоставщик = "Поставщик";
		
	ИначеЕсли СтрНайти(ВРег(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции), 
					  ВРег("Справочник.")) > 0 Тогда
		ИзмерениеПоставщик = "Владелец";
	Иначе
		// Непонятная ситуация, на всякий случай упростим запрос.
		СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции = "";
	КонецЕсли;
	
	Если (НЕ ПустаяСтрока(СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции)) 
	    И (НЕ ПустаяСтрока(СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво)) 
		И ЕстьНалоговыйНомер И ЕстьСтранаРегистрации Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	
			|ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".НаименованиеПолное КАК НаименованиеПолное,
			|ВЫБОР
			|	КОГДА ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|		ТОГДА ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".ИНН
			|	ИНАЧЕ ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".НалоговыйНомер
			|КОНЕЦ КАК ИНН,
			|ВЫБОР
			|	КОГДА ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|		ТОГДА ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".КПП
			|	ИНАЧЕ """"
			|КОНЕЦ КАК КПП,
			|ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + ".СтранаРегистрации КАК СтранаРегистрации
			|ИЗ
			|" + СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции + " КАК ЛицензииПоставщиковАлкогольнойПродукции
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|	ПО ЛицензииПоставщиковАлкогольнойПродукции." + ИзмерениеПоставщик + " = Контрагенты.Ссылка
			|ГДЕ
			|ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(" 
			+ СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво + ")";
					
	ИначеЕсли ЕстьНалоговыйНомер И ЕстьСтранаРегистрации Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	
			|Поставщик.НаименованиеПолное КАК НаименованиеПолное,
			|ВЫБОР
			|	КОГДА Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|		ТОГДА Поставщик.ИНН
			|	ИНАЧЕ Поставщик.НалоговыйНомер
			|КОНЕЦ КАК ИНН,
			|ВЫБОР
			|	КОГДА Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
			|		ТОГДА Поставщик.КПП
			|	ИНАЧЕ """"
			|КОНЕЦ КАК КПП,
			|Поставщик.СтранаРегистрации КАК СтранаРегистрации
			|ИЗ Справочник.Контрагенты КАК Поставщик
			|ГДЕ Поставщик.НаименованиеПолное ЕСТЬ НЕ NULL";
			
	Иначе
			
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	
			|Поставщик.НаименованиеПолное КАК НаименованиеПолное,
			|Поставщик.ИНН КАК ИНН,
			|Поставщик.КПП КАК КПП,
			|"""" КАК СтранаРегистрации
			|ИЗ Справочник.Контрагенты КАК Поставщик
			|ГДЕ Поставщик.НаименованиеПолное ЕСТЬ НЕ NULL";
			
	КонецЕсли;
			
	ДинСписокПоставщика.ТекстЗапроса = ТекстЗапроса;
	ДинСписокПоставщика.ОсновнаяТаблица = "Справочник.Контрагенты";		
	ДинСписокПоставщика.ДинамическоеСчитываниеДанных = Истина;
	
	Элементы.ТаблицаПоставщиков.Обновить();
	Элементы.ТаблицаПроизводителей.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// Ищем управляемую форму, откуда открыли.
	Если ВладелецФормы = Неопределено Тогда
	    Отказ = Истина;
		ТекстПредупреждения = НСтр("ru='Данная форма вспомогательная, предназначена для редактирования данных
										|из форм регламентированных отчетов!'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;	
	КонецЕсли;
	
	ТекущийРодитель = ВладелецФормы;
	 
	Пока ТипЗнч(ТекущийРодитель) <> Тип("УправляемаяФорма") Цикл
	    ТекущийРодитель = ТекущийРодитель.Родитель;		
	КонецЦикла; 
			
	УправляемаяФормаВладелец		= ТекущийРодитель;
	ИмяФормыВладельца 	= УправляемаяФормаВладелец.ИмяФормы;
	
	УникальностьФормы   = УправляемаяФормаВладелец.УникальностьФормы;
	Оповестить("ОткрытаФормаЗаписиРегистра", ЭтаФорма, УникальностьФормы);
	
	ТекущееСостояниеВладельца = УправляемаяФормаВладелец.ТекущееСостояние;
	
    ДокументЗаписи = 		УправляемаяФормаВладелец.СтруктураРеквизитовФормы.мСохраненныйДок;
	ИндексСтраницыЗаписи = 	УправляемаяФормаВладелец.ИндексАктивнойСтраницыВРегистре;
	ИндексСтраницы = 		УправляемаяФормаВладелец.НомерАктивнойСтраницыМногострочногоРаздела;
	НомерПоследнейЗаписи = 	УправляемаяФормаВладелец.КоличествоСтрок;
	МаксИндексСтраницы = 	УправляемаяФормаВладелец.МаксИндексСтраницы;
	
	ПоказыватьПредупреждениеПослеПереходаПоссылке = УправляемаяФормаВладелец.ПоказыватьПредупреждениеПослеПереходаПоссылке;
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
				
		// Заполним измерения, их нет на форме.
	    Запись.Активно = Истина;
		
		Запись.Документ = ДокументЗаписи;
		Запись.ИндексСтраницы = ИндексСтраницыЗаписи;
		НомерПоследнейЗаписи = НомерПоследнейЗаписи + 1;
	    Запись.ИндексСтроки = НомерПоследнейЗаписи;
		
		// При копировании документ заполнения не копируем,
		// поскольку по факту строка создается вручную, а не в процессе заполнения.
		Запись.ДокументПоступления = Неопределено;
		
		Модифицированность = Истина;
			
	КонецЕсли;
		
	Заголовок = "Поступление слабоалкогольной продукции";
	
	ФлажокОтклАвтоРасчет 	= УправляемаяФормаВладелец.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ФлажокОтклАвтоВыборКодов	= УправляемаяФормаВладелец.СтруктураРеквизитовФормы.мАвтоВыборКодов;
	ДатаПериодаОтчета = УправляемаяФормаВладелец.СтруктураРеквизитовФормы.мДатаКонцапериодаОтчета;
	
	ПодготовкаНаСервере();

	Если НЕ ВладелецФормы.ТекущийЭлемент = Неопределено Тогда
		
		ИмяАктивногоПоля = ВладелецФормы.ТекущийЭлемент.Имя;
		
		// Если активное поле Наименование продукции - перекинем на код.
		Если ИмяАктивногоПоля = "П000020000301" Тогда
		    ИмяАктивногоПоля = "П000020000302";			
		КонецЕсли; 
		
	    АктивноеПоле = Элементы.Найти(ИмяАктивногоПоля);
		Если НЕ АктивноеПоле = Неопределено Тогда
		    ТекущийЭлемент = АктивноеПоле;		
		КонецЕсли;
	
	КонецЕсли;
			
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить("ЗакрытаФормаЗаписиРегистра", , УникальностьФормы);
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
				
	ВнесеныИзменения = Модифицированность;

КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоПервоеРедактирование = Ложь;
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ТекущийОбъект.Документ, ИмяРегистра,
									ТекущийОбъект.ИндексСтраницы, ТекущийОбъект.ИндексСтроки, "ДобавлениеСтроки");
									
	ИначеЕсли ВнесеныИзменения Тогда
			
		// Нужно записать первоначальные данные Записи регистра в журнал.
		// Но сделать это надо только для случая первого изменения Записи после последнего сохранения отчета,
		// чтобы была информация о данных до изменения в случае отката внесенных изменений, если
		// отказался пользователь от сохранения отчета.
		
		ЭтоПервоеРедактирование = РегламентированнаяОтчетностьАЛКО.ЭтоПервоеРедактированиеЗаписиРегистра(ТекущийОбъект.Документ, ИмяРегистра, 
															ТекущийОбъект.ИндексСтраницы, ТекущийОбъект.ИндексСтроки);
				
	КонецЕсли;
	
	Если ЭтоПервоеРедактирование Тогда
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("НачальноеЗначение", НачальноеЗначение);
		Ресурсы.Вставить("КоличествоСтрок", НомерПоследнейЗаписи);
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		// Нужно сохранить первоначальные данные.
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ТекущийОбъект.Документ, ИмяРегистра,
									ТекущийОбъект.ИндексСтраницы, ТекущийОбъект.ИндексСтроки, "Редактирование", Ресурсы);
	Иначе
									
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НомерПоследнейЗаписи);		
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ТекущийОбъект.Документ, ИмяРегистра,
									ТекущийОбъект.ИндексСтраницы, 0, "Сервис", Ресурсы);							
	КонецЕсли;

	Если ВнесеныИзменения Тогда
		РегламентированнаяОтчетностьАЛКО.ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(
											Запись, ИмяРегистра, КонечноеЗначениеСтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Оповещаем о необходимости пересчета итогов форму-владелец для активных записей.
	Если ВнесеныИзменения и Запись.Активно Тогда
	 
		// Оповещаем форму-владелец о изменениях.
		ИнформацияДляПересчетаИтогов = Новый Структура;
		ИнформацияДляПересчетаИтогов.Вставить("ИмяРегистра", 		ИмяРегистра);
		ИнформацияДляПересчетаИтогов.Вставить("ИндексСтраницы", 	ИндексСтраницы);
		ИнформацияДляПересчетаИтогов.Вставить("ИндексСтроки", 		Запись.ИндексСтроки);
		ИнформацияДляПересчетаИтогов.Вставить("НачальноеЗначение", 	НачальноеЗначениеСтруктураДанных);
		ИнформацияДляПересчетаИтогов.Вставить("КонечноеЗначение", 	КонечноеЗначениеСтруктураДанных);
		
		Оповестить("ПересчетИтогов", ИнформацияДляПересчетаИтогов, УникальностьФормы);
	
	КонецЕсли;
	
	ВнесеныИзменения = Ложь;
		
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если (НЕ ЗавершениеРаботы = Неопределено) и ЗавершениеРаботы Тогда
		// Идет завершение работы системы.
	Иначе
		// Обычное закрытие.
	    Если Элементы.ГруппаВыборПроизводителя.Видимость или Элементы.ГруппаВыборПоставщика.Видимость Тогда
		    // Щелкнули на крестик при выборе производителя.
			Отказ = Истина;
		    УправлениеВидимостью(Ложь, Ложь);
			
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = УникальностьФормы Тогда
		
		Если НРег(ИмяСобытия) = НРег("ЗакрытьОткрытыеФормыЗаписи") Тогда			
		    Модифицированность = Ложь;
			Закрыть();			
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборВидаПродукции();
	
КонецПроцедуры


&НаКлиенте
Процедура П000020000302НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборВидаПродукции();
	
КонецПроцедуры


&НаКлиенте
Процедура ПолеПриИзменении(Элемент)
		
	ОбработкаПослеИзменения();
		
КонецПроцедуры


&НаКлиенте
Процедура ДокументПоступленияНажатие(Элемент, СтандартнаяОбработка)
	
	НажатиеГиперссылки(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура ПроизводительИмпортерПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	НажатиеГиперссылки(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура ПоставщикПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	НажатиеГиперссылки(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПроизводителей

&НаКлиенте
Процедура ТаблицаПроизводителейВыбор(Элемент, ВыбраннаяСтрока = Неопределено, Поле = Неопределено, СтандартнаяОбработка = Истина)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
	
	Производитель 		= Элемент.ТекущиеДанные.НаименованиеПолное;
	
	ПроизводительИНН	= Элемент.ТекущиеДанные.ИНН;
	ПроизводительКПП	= Элемент.ТекущиеДанные.КПП;	
	
	ТаблицаПроизводителейВыборНаСервере(Производитель, ПроизводительИНН, ПроизводительКПП);
			
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаПроизводителейПриАктивизацииСтроки(Элемент)
	
	Если НЕ ПроверялиНеобходимостьПоказаПредупреждения Тогда	
		
		Элементы.ГруппаИнфоВыбораПроизводителя.Видимость = (Элемент.ТекущиеДанные = Неопределено);			
		
		ПроверялиНеобходимостьПоказаПредупреждения = Истина;
		
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПоставщиков

&НаКлиенте
Процедура ТаблицаПоставщиковВыбор(Элемент, ВыбраннаяСтрока = Неопределено, Поле = Неопределено, СтандартнаяОбработка = Истина)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
	
	НаименованиеПолное = Элемент.ТекущиеДанные.НаименованиеПолное;
	ИНН = Элемент.ТекущиеДанные.ИНН;
	КПП = Элемент.ТекущиеДанные.КПП;
		
	ТаблицаПоставщиковВыборНаСервере(НаименованиеПолное, ИНН, КПП);
			
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаПоставщиковПриАктивизацииСтроки(Элемент)
	
	Если НЕ ПроверялиНеобходимостьПоказаПредупреждения Тогда	
		
		Элементы.ГруппаИнфоВыбораПоставщика.Видимость = (Элемент.ТекущиеДанные = Неопределено);			
		
		ПроверялиНеобходимостьПоказаПредупреждения = Истина;
		
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьИЗакрыть(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ Модифицированность Тогда
	    Закрыть();
	Иначе	
	    Записать();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьПроизводителяИмпортера(Команда)
	
	УправлениеВидимостью(Истина, Ложь);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьПоставщика(Команда)
	
	УправлениеВидимостью(Ложь, Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыборПроизводителя(Команда)
	
	ТаблицаПроизводителейВыбор(Элементы.ТаблицаПроизводителей);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыборПоставщика(Команда)
	
	ТаблицаПоставщиковВыбор(Элементы.ТаблицаПоставщиков);
	
КонецПроцедуры


&НаКлиенте
Процедура ВернутьсяНазад(Команда)
	
	УправлениеВидимостью(Ложь, Ложь);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовкаНаСервере()
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
		Запись.ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(Запись.Документ, Запись.ИндексСтраницы);
	КонецЕсли;
	
	УправлениеВидимостью(Ложь, Ложь);
	
	ДоступностьПолейНаСервере();	
	СформироватьСпискиВыбораНаСервере();
	ФормированиеПредставленияПродукцииНаСервере(Запись.П000020000301, Запись.П000020000302);
	
	// Заполним начальное значение всех полей записи во внутреннем формате.
	ИмяРегистра = РегламентированнаяОтчетностьАЛКО.ПолучитьИмяОбъектаМетаданныхПоИмениФормы(ИмяФормы);
	
	Если ТекущееСостояниеВладельца = "Добавление" или ТекущееСостояниеВладельца = "Копирование" Тогда
		
		// Начальные данные в этих случаях всегда пустые.
		НачальноеЗначениеСтруктураДанных = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруДанныхЗаписиРегистраСведений(ИмяРегистра);
		НачальноеЗначение = ЗначениеВСтрокуВнутр(НачальноеЗначениеСтруктураДанных);
		
	Иначе
		НачальноеЗначение = РегламентированнаяОтчетностьАЛКО.ПолучитьВнутреннееПредставлениеСтруктурыДанныхЗаписи(
															Запись, ИмяРегистра, НачальноеЗначениеСтруктураДанных);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ДоступностьПолейНаСервере()

	// Доступность полей формы в зависимости от флажка Авторасчет в отчете-владельце.
	// Для раздела 2 Алко приложения 11 нет авторасчета.
	
	Возврат;
	
КонецПроцедуры


&НаСервере
Функция ОбъектОтчета(ИмяФормыОбъекта)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ОбъектОтчетаАЛКО(ИмяФормыОбъекта, ОбъектЭтогоОтчета);
	
КонецФункции


&НаСервере
Процедура ОбработкаМодифицированности(НачальноеЗначениеПолей, СтруктураМодифицированности)
	
	МодифицированностьКлючевыхПолей = Ложь;
	Для Каждого ЭлСтруктуры Из СтруктураМодифицированности Цикл
	
		ИмяПоля = ЭлСтруктуры.Ключ;
		Если Лев(ИмяПоля, 2) <> "П0" Тогда
		    // Это не ресурс.
			Продолжить;			
		КонецЕсли;
					
		Если ЭлСтруктуры.Значение Тогда
		    МодифицированностьКлючевыхПолей = Истина;
			Прервать;			
		КонецЕсли; 
	
	КонецЦикла;
			
	Если НЕ МодифицированностьКлючевыхПолей Тогда
		
		// Принудительно записываем начальные данные, включая всю
		// вспомогательную информацию.
		ЗаполнитьЗначенияСвойств(Запись, НачальноеЗначениеПолей);
		
	Иначе
		
		// Что то изменилось, значит уже не по документу.
		Запись.ДокументПоступления = Неопределено;
		
		// Анализ изменений Производителя.
		ИНН = СокрЛП(Запись.П000020000304);
		КПП = СокрЛП(Запись.П000020000305);
		НаименованиеПолное = СокрЛП(Запись.П000020000303);
		КодПродукции = Запись.П000020000302;
		
		Запись.ПроизводительИмпортер = ОбъектОтчета(ИмяФормыВладельца).ОпределитьПроизводителяИмпортера(
																ИНН, КПП, НаименованиеПолное, КодПродукции);
		
		// Анализ изменений Поставщика.
		ИНН = СокрЛП(Запись.П000020000307);
		КПП = СокрЛП(Запись.П000020000308);
		НаименованиеПолное = СокрЛП(Запись.П000020000306);
		
		Запись.Поставщик = ОбъектОтчета(ИмяФормыВладельца).ОпределитьПоставщика(ИНН, КПП, НаименованиеПолное);
				
	КонецЕсли; 
	
	Модифицированность = МодифицированностьКлючевыхПолей;
	
КонецПроцедуры


&НаСервере
Процедура ОбработкаПослеИзменения()
	
	ОбъектОтчета(ИмяФормыВладельца).ОбработкаЗаписи(ИмяРегистра, Запись);
	
	СтруктураМодифицированности = "";
	РегламентированнаяОтчетностьАЛКО.ЗаписьИзменилась(Запись, НачальноеЗначениеСтруктураДанных, 
														Ложь, СтруктураМодифицированности);
	ОбработкаМодифицированности(НачальноеЗначениеСтруктураДанных, СтруктураМодифицированности);
	
	ФормированиеЗаголовковСвернутогоОтображения();
	
КонецПроцедуры


&НаСервере
Процедура ФормированиеЗаголовковСвернутогоОтображения()
	
	Элементы.ДокументПоступления.Видимость = ЗначениеЗаполнено(Запись.ДокументПоступления);
	
	// ГруппаПроизводительИмпортер.
	Элементы.ПроизводительИмпортерПредставление.Видимость = ЗначениеЗаполнено(Запись.ПроизводительИмпортер);
	
	Если ЗначениеЗаполнено(Запись.П000020000303) 
		или ЗначениеЗаполнено(Запись.П000020000304)
		или ЗначениеЗаполнено(Запись.П000020000305)
		Тогда
	    Элементы.ГруппаПроизводительИмпортер.ЗаголовокСвернутогоОтображения = "Производитель или импортер: " + 
			?(ЗначениеЗаполнено(Запись.П000020000303),Запись.П000020000303, "наименование не заполнено") 
			+ ?(ЗначениеЗаполнено(Запись.П000020000304),", ИНН " + Запись.П000020000304, ", ИНН не заполнено")
			+ ?(ЗначениеЗаполнено(Запись.П000020000305),", КПП " + Запись.П000020000305, 
											?(СтрДлина(Запись.П000020000304) = 10,", КПП не заполнено", "") );
	Иначе	
	    Элементы.ГруппаПроизводительИмпортер.ЗаголовокСвернутогоОтображения = 
							Элементы.ГруппаПроизводительИмпортер.Заголовок + " не заполнены!";							
	КонецЕсли;
	
	// Доступ к КПП только если введен 10 значный ИНН.
	Если СтрДлина(Запись.П000020000304) = 10 Тогда
	    Элементы.П000020000305.ТолькоПросмотр = Ложь;
		Элементы.П000020000305.ПропускатьПриВводе = Ложь;
	Иначе
		
	    Элементы.П000020000305.ТолькоПросмотр = Истина;
		Элементы.П000020000305.ПропускатьПриВводе = Истина;
		Если НЕ СокрЛП(Запись.П000020000305) = "" Тогда
		    Запись.П000020000305 = "";
			Модифицированность = Истина;		
		КонецЕсли; 
		
	КонецЕсли; 
	
	// ГруппаПоставщика.
	Элементы.ПоставщикПредставление.Видимость = ЗначениеЗаполнено(Запись.Поставщик);
	
	Если ЗначениеЗаполнено(Запись.П000020000307) 
		или ЗначениеЗаполнено(Запись.П000020000308)
		или ЗначениеЗаполнено(Запись.П000020000306)
		Тогда
		
	    Элементы.ГруппаПоставщика.ЗаголовокСвернутогоОтображения = "Поставщик: " + 
			?(ЗначениеЗаполнено(Запись.П000020000306),Запись.П000020000306, "наименование не заполнено") 
			+ ?(ЗначениеЗаполнено(Запись.П000020000307),", ИНН " + Запись.П000020000307, ", ИНН не заполнено")
			+ ?(ЗначениеЗаполнено(Запись.П000020000308),", КПП " + Запись.П000020000308, 
											?(СтрДлина(Запись.П000020000307) = 10,", КПП не заполнено", "") );
					
	Иначе	
	    Элементы.ГруппаПоставщика.ЗаголовокСвернутогоОтображения = 
							Элементы.ГруппаПоставщика.Заголовок + " не заполнены!";							
	КонецЕсли;
						
	// Доступ к КПП только если введен 10 значный ИНН.
	Если СтрДлина(Запись.П000020000307) = 10 Тогда
		
	    Элементы.П000020000308.ТолькоПросмотр = Ложь;
		Элементы.П000020000308.ПропускатьПриВводе = Ложь;
		
	Иначе
		
	    Элементы.П000020000308.ТолькоПросмотр = Истина;
		Элементы.П000020000308.ПропускатьПриВводе = Истина;
		Если НЕ СокрЛП(Запись.П000020000308) = "" Тогда
		    Запись.П000020000308 = "";
			Модифицированность = Истина;		
		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры


&НаСервере
Процедура ФормированиеПредставленияПродукцииНаСервере(ВидПродукции = Неопределено, КодВида = Неопределено)
	
	Если ВидПродукции = Неопределено Тогда
	    ВидПродукции = Запись.П000020000301;	
	КонецЕсли;
	
	Если КодВида = Неопределено Тогда
	    КодВида = Запись.П000020000302;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодВида) Тогда
	    ПредставлениеПродукции = "Код " + КодВида + ", " + ВидПродукции;
	Иначе	
	    ПредставлениеПродукции = "Заполнить";
	КонецЕсли; 
	
	Если ПредставлениеПродукции = "Заполнить" Тогда		
		Элементы.Представление.ЦветТекста = ЦветСтиляНезаполненныйРеквизит;
	Иначе
		Элементы.Представление.ЦветТекста = ЦветСтиляЦветГиперссылкиБРО;
	КонецЕсли;
		
	ФормированиеЗаголовковСвернутогоОтображения();
		
КонецПроцедуры


&НаКлиенте
Процедура ВыборВидаПродукции()
		
	ИсходноеЗначение = СокрЛП(Запись.П000020000302);
	ИсходноеЗначениеНазвания = СокрЛП(Запись.П000020000301);
	КолонкаПоиска = "Код";
	ИмяКолонкиКодПродукции = "П000020000302";
	ИмяКолонкиНаименованияПродукции = "П000020000301";
	
	Если НЕ ФлажокОтклАвтоВыборКодов Тогда
		
		ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяКолонкиКодПродукции));
		Если ПараметрВводаПоля.Количество() = 0 Тогда
			
			ПараметрВводаПоля = Неопределено;
			
			Для Каждого Стр из СвойстваПоказателей Цикл
				Если Лев(ИмяКолонкиКодПродукции, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
					ПараметрВводаПоля = Стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ПараметрВводаПоля = ПараметрВводаПоля[0];
		КонецЕсли;
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			ТекстВыбора   = ПараметрВводаПоля.ТекстПриВыборе;
			ТаблицаВыбора = ПараметрВводаПоля.ТаблицаЗначений;
		Иначе
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
		ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
		
		ДополнительныеПараметры = Новый Структура(" ИмяКолонкиНаименованияПродукции, ИмяКолонкиКодПродукции, ИсходноеЗначение",
												 ИмяКолонкиНаименованияПродукции, ИмяКолонкиКодПродукции, ИсходноеЗначение);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
						
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы",          		"Ввод вида продукции");
		ПараметрыФормы.Вставить("Код",          				ИсходноеЗначение);
		ПараметрыФормы.Вставить("Название",          			ИсходноеЗначениеНазвания);
		ПараметрыФормы.Вставить("ИмяПоляЗначение",          	"Вид продукции");
		ПараметрыФормы.Вставить("ИмяПоляКод",          			"Код");
		ПараметрыФормы.Вставить("МногострочныйРежимЗначения",	Истина);
		ПараметрыФормы.Вставить("ДлинаПоляКода",          		4);
		ПараметрыФормы.Вставить("ДлинаПоляЗначения",       		40);
		ПараметрыФормы.Вставить("УникальностьФормы",       		УникальностьФормы);
		
		ДополнительныеПараметры = Новый Структура("ИсходноеЗначение, ИмяКолонкиКодПродукции, ИмяКолонкиНаименованияПродукции", 
									ИсходноеЗначение, ИмяКолонкиКодПродукции, ИмяКолонкиНаименованияПродукции);

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.АЛКОФормаВводаПарыСвязанныхЗначений", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыборЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
	
	// Поскольку всегда "выбираем" код.
	ИсходноеЗначение 				 = Параметры.ИсходноеЗначение;
	ИмяКолонкиНаименованияПродукции  = Параметры.ИмяКолонкиНаименованияПродукции;
	ИмяКолонкиКодПродукции           = Параметры.ИмяКолонкиКодПродукции;
		
	КодИзменился = (СокрЛП(ИсходноеЗначение) <> СокрЛП(РезультатВыбора.Код));
	
	// Присваиваем на случай смены режима выбора из списка,
	// если вручную были изменения не соответствующие списку выбора,
	// то после включения выбора из списка - вернем соответствие при выборе
	// даже того же кода.
	Запись[ИмяКолонкиКодПродукции] = СокрЛП(РезультатВыбора.Код);
	
	ИсходноеЗначениеНаименования = Строка(Запись[ИмяКолонкиНаименованияПродукции]);
	Запись[ИмяКолонкиНаименованияПродукции] = ?(СокрЛП(РезультатВыбора.Код) = "",
																"", СокрЛП(РезультатВыбора.Название)); 
	НаименованиеИзменилось = (СокрЛП(ИсходноеЗначениеНаименования) <> СокрЛП(Запись[ИмяКолонкиНаименованияПродукции]));	
	
	Модифицированность = Модифицированность или КодИзменился или НаименованиеИзменилось;
	
	ФормированиеПредставленияПродукцииНаСервере();	
	ОбработкаПослеИзменения(); 
	
КонецПроцедуры


&НаСервере
Процедура СформироватьСпискиВыбораНаСервере()
	
	// С 3-го квартала 2015 года действует новый список.
	// Отчет квартальный, поэтому можно указать 01.09 как границу.
	ИмяМакета = ?(ДатаПериодаОтчета < '20150901', "Списки2014Кв1", "Списки2015Кв3");
	
	КоллекцияСписковВыбора = РегламентированнаяОтчетностьАЛКО.СчитатьКоллекциюСписковВыбораАЛКО(
														ИмяМакета, ИмяФормыВладельца, ОбъектЭтогоОтчета);
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000301", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000302", 3, , "Выбор вида продукции", КоллекцияСписковВыбора["ВидыПродукции"]);
	
КонецПроцедуры


&НаСервере
Процедура УправлениеВидимостью(ПоказатьВыборПроизводителей = Ложь, ПоказатьВыборПоставщиков = Ложь)
	
	Если ПоказатьВыборПроизводителей Тогда
		
		ПроверялиНеобходимостьПоказаПредупреждения = Ложь;
		
		Если ВставитьКодПродукции Тогда
			ДинСписокПроизводителяИмпортера.Параметры.УстановитьЗначениеПараметра("КодПродукции", Запись.П000020000302);
		КонецЕсли;
		
		Элементы.ОК.Видимость = Ложь;
		Элементы.Отмена.Видимость = Ложь;
		Элементы.ГруппаЗапись.Видимость = Ложь;
		Элементы.ГруппаВыборПоставщика.Видимость = Ложь;
		
		Элементы.ГруппаВыборПроизводителя.Видимость = Истина;
		
		Если ЗначениеЗаполнено(Запись.ПроизводительИмпортер) Тогда
		
			Элементы.ТаблицаПроизводителей.ТекущаяСтрока = Запись.ПроизводительИмпортер;
		
		КонецЕсли; 
		
	ИначеЕсли ПоказатьВыборПоставщиков Тогда
		
		ПроверялиНеобходимостьПоказаПредупреждения = Ложь;
				
		Элементы.ОК.Видимость = Ложь;
		Элементы.Отмена.Видимость = Ложь;
		Элементы.ГруппаЗапись.Видимость = Ложь;
		Элементы.ГруппаВыборПроизводителя.Видимость = Ложь;
		
		Элементы.ГруппаВыборПоставщика.Видимость = Истина;
		
		Если ЗначениеЗаполнено(Запись.Поставщик) Тогда
						
			Элементы.ТаблицаПоставщиков.ТекущаяСтрока = Запись.Поставщик;
			
		КонецЕсли;
		
	Иначе
				
		Элементы.ГруппаИнфоВыбораПроизводителя.Видимость = Ложь;
		Элементы.ГруппаИнфоВыбораПоставщика.Видимость = Ложь;
		
		Элементы.ГруппаВыборПоставщика.Видимость = Ложь;
		Элементы.ГруппаВыборПроизводителя.Видимость = Ложь;
		
		Элементы.ГруппаЗапись.Видимость = Истина;	
		Элементы.Отмена.Видимость = Истина;
		Элементы.ОК.Видимость = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры


&НаСервере
Функция ПолучитьИмяФормыОбъектаЭлементаСсылки(ИмяЭлементаСсылки, ЗначениеСсылка = Неопределено)
	
	ЗначениеСсылка = РегламентированнаяОтчетностьАЛКО.ПолучитьЗначениеЭлементаФормы(ЭтаФорма, ИмяЭлементаСсылки);	
	ИмяФормыОбъекта = РегламентированнаяОтчетностьАЛКО.ПолучитьИмяФормыОбъекта(ЗначениеСсылка);
	
	Возврат ИмяФормыОбъекта;
	
КонецФункции


&НаКлиенте
Процедура НажатиеГиперссылки(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ИмяЭлементаСсылки = Элемент.Имя;
	
	ЗначениеСсылка = Неопределено;
	ИмяФормыОбъекта = ПолучитьИмяФормыОбъектаЭлементаСсылки(ИмяЭлементаСсылки, ЗначениеСсылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НажатиеГиперссылкиЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗначениеСсылка);
	ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура НажатиеГиперссылкиЗавершение(Результат, ДопПараметры) Экспорт
	
	Если ПоказыватьПредупреждениеПослеПереходаПоссылке = Неопределено Тогда
	    ПоказыватьПредупреждениеПослеПереходаПоссылке = Истина;	
	КонецЕсли;
	
	Если ПоказыватьПредупреждениеПослеПереходаПоссылке Тогда
	    // Открываем форму предупреждения.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Внимание!'"));
		ПараметрыФормы.Вставить("ТекстПредупреждения", НСтр("ru='"
				+ "Если Вы внесли изменения в элемент справочника или документ,"
				+ " для внесения изменений в строки отчета, заполняемых на основании"
				+ " измененной информации, необходимо перезаполнить Отчет.
				|
				|Для этого в основной форме отчета нужно нажать кнопку ""Заполнить"".
				|
				|Не обязательно это делать прямо сейчас, это можно сделать после внесения"
				+ " всех необходимых правок по разным документам и справочникам.'"));
		ПараметрыФормы.Вставить("ТекстЗаголовкаФлажка", НСтр("ru='Больше не показывать в этом сеансе редактирования'"));
		ПараметрыФормы.Вставить("УникальностьФормы",       		УникальностьФормы);
		
		ИмяФормыПредупреждения = "ОбщаяФорма.АЛКОФормаПредупрежденияСФлажком";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСостояниеФлажкаФормыПредупреждения", ЭтотОбъект);
		ОткрытьФорму(ИмяФормыПредупреждения, ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьСостояниеФлажкаФормыПредупреждения(Результат, ДопПараметры) Экспорт
	
	Если (НЕ Результат = Неопределено) и Результат Тогда
		// Оповещаем форму отчета владельца о том, что больше показывать
		// предупреждение не надо.
		ПоказыватьПредупреждениеПослеПереходаПоссылке = Ложь;
		Оповестить("ПоказыватьПредупреждениеПослеПереходаПоСсылке", , УникальностьФормы);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ТаблицаПроизводителейВыборНаСервере(Производитель, ПроизводительИНН, ПроизводительКПП)
	
	Запись.П000020000304 = СокрЛП(ПроизводительИНН);
	Запись.П000020000305 = СокрЛП(ПроизводительКПП);
	Запись.П000020000303 = СокрЛП(Производитель);
	
	УправлениеВидимостью(Ложь, Ложь);
	
	ОбработкаПослеИзменения();
	
КонецПроцедуры


&НаСервере
Процедура ТаблицаПоставщиковВыборНаСервере(НаименованиеПолное, ИНН, КПП)
		
	Запись.П000020000307 = СокрЛП(ИНН);
	Запись.П000020000308 = СокрЛП(КПП);	
	Запись.П000020000306 = СокрЛП(НаименованиеПолное);
		
	УправлениеВидимостью(Ложь, Ложь);
	
	ОбработкаПослеИзменения();
	
КонецПроцедуры

#КонецОбласти
