// 4D:ERP для Беларуси
// {
// Форма изменена
// }
// 4D

&НаКлиенте
Перем ТаблицаРедактируется;

&НаКлиенте
Перем ТекущееЗначение;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// "Распаковываем" параметры
	Сотрудник = Параметры.Сотрудник;
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	Организация = Параметры.Организация;
	ДатаНачалаСобытия = Параметры.ДатаНачалаСобытия;
	Начисление = Параметры.Начисление;
	РасчетПремии = Параметры.РасчетПремии;
	ПорядокРасчета = Параметры.ПорядокРасчета;
	ПереноситьДанныеВДругойУчетСреднегоЗаработка = Параметры.ПереноситьДанныеВДругойУчетСреднегоЗаработка;
	ДокументСсылка = Параметры.ДокументСсылка;
	ДокументВладелецДанныеАдрес = Параметры.ДокументВладелецДанныеАдрес;
	ЧасовойСреднийЗаработок = Параметры.РасчетПремии = ПредопределенноеЗначение("Перечисление.ВидыУчетаВремени.ПоЧасам"); 
		
	
	Если Параметры.СпособыРасчета <> Неопределено Тогда
		СпособыРасчета = Новый ФиксированныйМассив(Параметры.СпособыРасчета);
	КонецЕсли;
	
	// Получаем статью финансирования по умолчанию.
	СтатьяФинансированияПоУмолчанию = УчетСреднегоЗаработка.СтатьяФинансированияПоУмолчанию(Сотрудник, ДатаНачалаСобытия, Начисление);
	
	// Заполним дату приема на работу для ограничения ввода данных о среднем заработке.
	УчетСреднегоЗаработка.ЗаполнитьДатуПриемаНаРаботуСотрудника(ДатаПриемаНаРаботуСотрудника, Сотрудник, ДатаНачалаСобытия, Отказ);
	
	Если Отказ Тогда
		// Проблемы с датой приема на работу.
		Возврат;
	КонецЕсли;
	
	// Заполняем период расчета среднего заработка.
	НачалоПериодаРасчета = Параметры.НачалоПериодаРасчета;
	ОкончаниеПериодаРасчета = Параметры.ОкончаниеПериодаРасчета;
	
	Если Не Параметры.Свойство("ФиксПериодРасчета") Тогда
		// Если признак фикс периода не определен, то и изменение его нельзя оставлять доступным.
		ФиксПериодРасчета = Ложь;
		Элементы.ГруппаВыборПериода.Доступность = Ложь;
	Иначе
		ФиксПериодРасчета = Параметры.ФиксПериодРасчета;
	КонецЕсли;
	ФиксПериодРасчетаЧислом = Число(ФиксПериодРасчета);
	
	СоздатьРеквизитыСреднегоЗаработка();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "НачалоПериодаРасчета", "НачалоПериодаРасчетаСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "ОкончаниеПериодаРасчета", "ОкончаниеПериодаРасчетаСтрокой");
	
	// Инициализируем соответствие по умолчанию.
	МесяцыРасчета = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	// Заполняем период расчета среднего заработка, если он не заполнен "снаружи".
	Если Не ЗначениеЗаполнено(НачалоПериодаРасчета) Или Не ЗначениеЗаполнено(ОкончаниеПериодаРасчета) Тогда
		ЗаполнитьПериодРасчетаПоУмолчанию();
	Иначе
		// Заполним соответствие месяца и номера его колонки.
		ЗаполнитьМесяцыРасчета(ЭтаФорма);
	КонецЕсли;
	
	СоздатьСтроки();
	СоздатьКолонки();
	
	// Высоту таблицы установим по количеству строк.
	Элементы.СреднийЗаработок.ВысотаВСтрокахТаблицы = СреднийЗаработок.Количество() + 1;
	
	УстановитьЗаголовокФормы();
	УстановитьДоступностьРедактированияПериодаРасчета(ЭтаФорма);
	
	Если Параметры.ДанныеОНачислениях <> Неопределено Тогда
		ТаблицаНачислений = ПолучитьИзВременногоХранилища(Параметры.ДанныеОНачислениях);
	КонецЕсли;
	Если Параметры.ДанныеОВремени <> Неопределено Тогда
		ТаблицаВремени = ПолучитьИзВременногоХранилища(Параметры.ДанныеОВремени);
	КонецЕсли;
	Если Параметры.ПредельныеВеличины <> Неопределено Тогда
		ПредельныеВеличины = ПолучитьИзВременногоХранилища(Параметры.ПредельныеВеличины);	
	КонецЕсли;

	Если Параметры.ДанныеОбИндексации <> Неопределено Тогда
		ТаблицаИндексации = ПолучитьИзВременногоХранилища(Параметры.ДанныеОбИндексации);
	КонецЕсли;
	
	Если Параметры.ДанныеОНачислениях = Неопределено Тогда
		// Используется режим непосредственного редактирования данных учета для расчета среднего заработка
		// в этом режиме непосредственно из учета получаем данные по всем месяцам
		// по окончании редактирования изменения записываем непосредственно в учет.
		ТаблицаНачислений	= Новый ТаблицаЗначений;
		ТаблицаВремени		= Новый ТаблицаЗначений;
		ТаблицаИндексации	= Новый ТаблицаЗначений;
		
		// Признак того, что при закрытии формы необходимо записать изменения в учет.
		ЗаписыватьИзменения = Истина;
	КонецЕсли;
	
	Если ЗаписыватьИзменения Тогда
		ПрочитатьДанныеУчетаСреднегоЗаработка();
	Иначе
		ЗаполнитьФорму(ТаблицаНачислений, ТаблицаВремени, ТаблицаИндексации, ПредельныеВеличины);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы,, ТекстПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура OK(Команда) 
	
	ВыбратьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодробныеДанные(Команда)
	
	ОткрытьФормуРасшифровки(Элементы.СреднийЗаработок.ТекущийЭлемент.Имя, Элементы.СреднийЗаработок.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьДанныеСреднегоЗаработка(Команда)

	ДополнитьПредположительно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДанныеУчета(Команда)
	
	ПеречитатьДанныеУчетаНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФиксПериодРасчетаАвтоматическиПриИзменении(Элемент)
	ФиксПериодРасчетаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ФиксПериодРасчетаВручнуюПриИзменении(Элемент)
	ФиксПериодРасчетаПриИзменении();
КонецПроцедуры

#КонецОбласти

#Область ТаблицаСреднийзаработок

&НаКлиенте
Процедура Подключаемый_СреднийЗаработокЗначениеПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.СреднийЗаработок.ТекущиеДанные;
	
	Если ДанныеСтроки.Идентификатор = "ОтработаноДней" Тогда
		ОбработкаИзмененияОтработанныхДней();
	КонецЕсли;
	
	Если ИдентификаторыСтрокСоставныхЧастей(ПорядокРасчета)[ДанныеСтроки.СоставнаяЧасть] <> Неопределено Тогда
		НайденныеСтроки = СреднийЗаработок.НайтиСтроки(Новый Структура("СоставнаяЧасть", ДанныеСтроки.СоставнаяЧасть));
		ПостфиксКолонки = ПостфиксПоИмениЯчейки(Элементы.СреднийЗаработок.ТекущийЭлемент.Имя);
		// Определяем суммы по "родственным" строкам.
		Сумма = 0;
		СуммаНеИндексируется = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если Найти(НайденнаяСтрока.Идентификатор, "НеИндексируется") > 0 Тогда
				СуммаНеИндексируется = НайденнаяСтрока["Значение" + ПостфиксКолонки];
			Иначе
				Сумма = НайденнаяСтрока["Значение" + ПостфиксКолонки];
			КонецЕсли;
		КонецЦикла;
		// Заполняем корректирующие суммы, пропуская отредактированную строку.
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока = ДанныеСтроки Тогда
				Продолжить;
			КонецЕсли;
			Если Найти(НайденнаяСтрока.Идентификатор, "НеИндексируется") > 0 Тогда
				НайденнаяСтрока["Значение" + ПостфиксКолонки] = Мин(Сумма, СуммаНеИндексируется);
			Иначе
				НайденнаяСтрока["Значение" + ПостфиксКолонки] = Макс(Сумма, СуммаНеИндексируется);
			КонецЕсли;
		КонецЦикла;
		Если ДанныеСтроки.ЕстьРасшифровка Тогда
			ПеренестиИзмененияВРасшифровку(ДанныеСтроки.СоставнаяЧасть, МесяцПоПостфиксу(ПостфиксКолонки), Сумма, СуммаНеИндексируется);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьИтоги(ЭтаФорма);
	РассчитатьСреднийЗаработок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СреднийЗаработокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Поле.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Откроем форму для редактирования расшифровки, если она установлена.
	ДанныеСтроки = Элементы.СреднийЗаработок.ТекущиеДанные;
	Если ДанныеСтроки.ЕстьРасшифровка Тогда 
		ОткрытьФормуРасшифровки(Элементы.СреднийЗаработок.ТекущийЭлемент.Имя, ДанныеСтроки);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СреднийЗаработокПриАктивизацииЯчейки(Элемент)
	
	// Устанавливаем доступность команды просмотра расшифровываемых значений.
	ТекущиеДанные = Элементы.СреднийЗаработок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РасширенноеРедактированиеЗначения.Доступность = ТекущиеДанные.ЕстьРасшифровка;
	
	Если ТипЗнч(Элемент.ТекущийЭлемент) <> Тип("ПолеФормы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеВвода Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущийЭлемент.ФорматРедактирования = ТекущиеДанные.ФорматЗначения;
	Элемент.ТекущийЭлемент.МаксимальноеЗначение = Неопределено;
	
	МаксимальноеЗначение = ТекущиеДанные.МаксимальноеЗначение;
	Если ЗначениеЗаполнено(МаксимальноеЗначение) Тогда
		// Уточняем ограничение значения.
		ПостфиксКолонки = ПостфиксПоИмениЯчейки(Элементы.СреднийЗаработок.ТекущийЭлемент.Имя);
		Если ЗначениеЗаполнено(ПостфиксКолонки) Тогда
			МаксимальноеЗначение = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(МесяцПоПостфиксу(ПостфиксКолонки))
		КонецЕсли;
		Элемент.ТекущийЭлемент.МаксимальноеЗначение = МаксимальноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеПериодаРасчета

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойПриИзменении(Элемент)
	
	ДатаДоИзменения = НачалоПериодаРасчета;
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "НачалоПериодаРасчета", "НачалоПериодаРасчетаСтрокой", Модифицированность);
	ПриИзмененииПериодаРасчета(ДатаДоИзменения, "НачалоПериодаРасчета");
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДополнительныеПараметры = Новый Структура("ДатаДоИзменения", НачалоПериодаРасчета);
	Оповещение = Новый ОписаниеОповещения("НачалоПериодаРасчетаСтрокойНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "НачалоПериодаРасчета", "НачалоПериодаРасчетаСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииПериодаРасчета(ДополнительныеПараметры.ДатаДоИзменения, "НачалоПериодаРасчета");
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ДатаДоИзменения = НачалоПериодаРасчета;
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "НачалоПериодаРасчета", "НачалоПериодаРасчетаСтрокой", Направление, Модифицированность);
	ПриИзмененииПериодаРасчета(ДатаДоИзменения, "НачалоПериодаРасчета");
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРасчетаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойПриИзменении(Элемент)
	ДатаДоИзменения = ОкончаниеПериодаРасчета;
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "ОкончаниеПериодаРасчета", "ОкончаниеПериодаРасчетаСтрокой", Модифицированность);
	ПриИзмененииПериодаРасчета(ДатаДоИзменения, "ОкончаниеПериодаРасчета");
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ДатаДоИзменения", ОкончаниеПериодаРасчета);
	Оповещение = Новый ОписаниеОповещения("ОкончаниеПериодаРасчетаСтрокойНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "ОкончаниеПериодаРасчета", "ОкончаниеПериодаРасчетаСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииПериодаРасчета(ДополнительныеПараметры.ДатаДоИзменения, "ОкончаниеПериодаРасчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ДатаДоИзменения = ОкончаниеПериодаРасчета;
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "ОкончаниеПериодаРасчета", "ОкончаниеПериодаРасчетаСтрокой", Направление, Модифицированность);
	ПриИзмененииПериодаРасчета(ДатаДоИзменения, "ОкончаниеПериодаРасчета");
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаРасчетаСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТолькоПросмотр Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ДанныеДляРасчета = ДанныеДляРасчетаСреднего();
	
	Если ЗаписыватьИзменения Тогда
		// Записать корректировки в регистр.
		ЗаписатьКорректировки(ДанныеДляРасчета);
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть(ДанныеДляРасчета);
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанныеУчетаНаСервере()
	
	// В том случае, если увольнение происходит в последний день месяца, 
	// оплата труда за последний месяц работы, рассчитанная в документе Увольнение, 
	// должна быть включена в данные среднего заработка.
	// В такой ситуации, прежде чем перечитать данные среднего заработка из учета, 
	// нужно провести документ-владелец.
	
	Если Не ЗначениеЗаполнено(ДокументВладелецДанныеАдрес) Тогда
		ПрочитатьДанныеУчетаСреднегоЗаработка();
	Иначе
		НачатьТранзакцию();
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Получаем данные документа из временного хранилища.
		ДанныеДляПроведения = ПолучитьИзВременногоХранилища(ДокументВладелецДанныеАдрес);
		// Регистрируем данные документа в учете.
		Отказ = Ложь;
		// Смоделируем коллекцию движений документа.
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.Увольнение, ДанныеДляПроведения.ДокументСсылка);
		// Регистрация начислений
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(
			НаборыЗаписей, Отказ, Организация, КонецМесяца(ДанныеДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
		// Регистрация отработанного времени в учете начислений и удержаний.
		УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(
			НаборыЗаписей, Отказ, Организация, ДанныеДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);
		// Определяем исключаемый регистратор, который будет использоваться при обновлении корректировок.	
		НаборыЗаписей.ДанныеОВремениДляРасчетаСреднегоОбщий.ДополнительныеСвойства.Вставить("ИсключаемыйРегистратор", ДокументСсылка);
		// Учет среднего заработка
		УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(НаборыЗаписей, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка, Истина);
		// Читаем данные из учета 	
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ПрочитатьДанныеУчетаСреднегоЗаработка();
		ОтменитьТранзакцию();
	КонецЕсли;
	
	// Если форма в режиме непосредственной записи изменений, 
	// то ее исходное состояние соответствует учету.
	Модифицированность = Ложь;
	
КонецПроцедуры

#Область ФормированиеРезультатаРаботыФормы

&НаСервере
Функция ДанныеДляРасчетаСреднего()
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Сотрудник", Сотрудник);
	СтруктураДанных.Вставить("ПорядокРасчета", ПорядокРасчета);
	
	СтруктураДанных.Вставить("НачалоПериодаРасчета", НачалоПериодаРасчета);
	СтруктураДанных.Вставить("ОкончаниеПериодаРасчета", ОкончаниеПериодаРасчета);
	СтруктураДанных.Вставить("ФиксПериодРасчета", ФиксПериодРасчета);
	
	СтруктураДанных.Вставить("ДанныеОНачислениях", ПоместитьВоВременноеХранилище(РезультатРедактированияНачислений(ЭтаФорма)));
	СтруктураДанных.Вставить("ДанныеОВремени", ПоместитьВоВременноеХранилище(РезультатРедактированияВремени(ЭтаФорма)));
	
	СтруктураДанных.Вставить("ДанныеОбИндексации", ПоместитьВоВременноеХранилище(ДанныеОбИндексации(ЭтаФорма)));
	
	СтруктураДанных.Вставить("ПереноситьДанныеВДругойУчетСреднегоЗаработка", ПереноситьДанныеВДругойУчетСреднегоЗаработка);
	
	Если СпособыРасчета = Неопределено Тогда
		// Если в форме средний заработок только один, помещаем его «как есть»...
		СтруктураДанных.Вставить("СреднийЗаработок", СреднийЗаработокИтог);
	Иначе
		// ...Если несколько - то составляем соответствие по способу расчета.
		СреднийЗаработокЗначения = Новый Соответствие;
		Для Каждого КлючИЗначение Из СреднийЗаработокПоСпособамРасчета Цикл
			СпособРасчета = КлючИЗначение.Ключ;
			ИмяРеквизита = КлючИЗначение.Значение;
			СреднийЗаработокЗначения.Вставить(СпособРасчета, ЭтаФорма[ИмяРеквизита]);
		КонецЦикла;
		СтруктураДанных.Вставить("СреднийЗаработок", СреднийЗаработокЗначения);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция РезультатРедактированияНачислений(Форма)
	
	Сотрудник						= Форма.Сотрудник;
	ФизическоеЛицо					= Форма.ФизическоеЛицо;
	ПорядокРасчета					= Форма.ПорядокРасчета;
	СреднийЗаработок				= Форма.СреднийЗаработок;
	РасшифровкаСреднегоЗаработка	= Форма.РасшифровкаСреднегоЗаработка;
	МесяцыКорректировки				= Форма.МесяцыКорректировки;
	
	ИдентификаторыСтрок = ИдентификаторыСтрокСоставныхЧастей(ПорядокРасчета);
	
	ДанныеНачислений = Новый Массив;
	
	Для Каждого КлючИЗначениеСтрок Из ИдентификаторыСтрок Цикл
		СоставнаяЧасть = КлючИЗначениеСтрок.Ключ;
		Идентификатор = КлючИЗначениеСтрок.Значение;
		// Находим все строки, относящиеся к составной части (в т.ч. не индексируемые)
		// 1. "Основная" строка.
		СтрокаТаблицы = УчетСреднегоЗаработкаКлиентСервер.СтрокаСреднегоЗаработка(СреднийЗаработок, Идентификатор);
		СтрокаНеУчитывать = УчетСреднегоЗаработкаКлиентСервер.СтрокаСреднегоЗаработка(СреднийЗаработок, "НеУчитывать");

		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.ЕстьРасшифровка Тогда
			// Расшифровку перенесем отдельно.
			Продолжить;
		КонецЕсли;
		// 2. Строка с не индексируемой суммой.
		СтрокаТаблицыВтчНеИндексируется = УчетСреднегоЗаработкаКлиентСервер.СтрокаСреднегоЗаработка(СреднийЗаработок, Идентификатор + "НеИндексируется");
		Для Каждого КлючИЗначениеМесяцев Из Форма.МесяцыРасчета Цикл
			// Обходим по колонкам-периодам.
			Месяц = КлючИЗначениеМесяцев.Ключ;
			ПостфиксКолонки = КлючИЗначениеМесяцев.Значение;
			Если СтрокаТаблицы["Значение" + ПостфиксКолонки] = 0 Тогда
				// Строки с нулевыми суммами пропускаем.
				Продолжить;
			КонецЕсли; 		
						
			ОписаниеСтроки = УчетСреднегоЗаработкаКлиентСервер.ОписаниеСтрокиДанныхОНачисленияхОбщегоСреднегоЗаработка();
			ОписаниеСтроки.Сотрудник = Сотрудник;
			ОписаниеСтроки.ФизическоеЛицо = ФизическоеЛицо;
			ОписаниеСтроки.ПорядокРасчета = ПорядокРасчета;
			ОписаниеСтроки.СоставнаяЧасть = СоставнаяЧасть;
			ОписаниеСтроки.Период = Месяц;
			ОписаниеСтроки.Индексируется = Истина;
			ОписаниеСтроки.Корректировка = Не СтрокаТаблицы["ТолькоПросмотр" + ПостфиксКолонки];
			ОписаниеСтроки.Сумма = СтрокаТаблицы["Значение" + ПостфиксКолонки];
			Если СтрокаНеУчитывать <> Неопределено Тогда
				Если  СтрокаНеУчитывать["Значение" + ПостфиксКолонки] <> Неопределено  И СтрокаНеУчитывать["Значение" + ПостфиксКолонки] Тогда
					ОписаниеСтроки.НеУчитывать = Истина;
				Иначе
					ОписаниеСтроки.НеУчитывать = Ложь;		
				КонецЕсли;
			КонецЕсли;

			ДанныеНачислений.Добавить(ОписаниеСтроки);
			Если СтрокаТаблицыВтчНеИндексируется <> Неопределено Тогда
				// Уменьшаем индексируемую сумму на сумму без индексации.
				Если СтрокаТаблицыВтчНеИндексируется["Значение" + ПостфиксКолонки] = 0 Тогда
					// Строки с нулевыми суммами пропускаем.
					Продолжить;
				КонецЕсли;
				ОписаниеСтроки.Сумма = СтрокаТаблицы["Значение" + ПостфиксКолонки] - СтрокаТаблицыВтчНеИндексируется["Значение" + ПостфиксКолонки];
				// Копируем описание строки для добавлении строки без индексации.
				ОписаниеСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписаниеСтроки);
				ОписаниеСтроки.Индексируется = Ложь;
				ОписаниеСтроки.Сумма = СтрокаТаблицыВтчНеИндексируется["Значение" + ПостфиксКолонки];
				ДанныеНачислений.Добавить(ОписаниеСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Переносим данные расшифровки "как есть".
	Для Каждого СтрокаРасшифровки Из РасшифровкаСреднегоЗаработка Цикл
		ПостфиксКолонки = Форма.МесяцыРасчета.Получить(СтрокаРасшифровки.Период); 
		Если ПостфиксКолонки = Неопределено Тогда
			// Скрытые данные
			Продолжить;
		КонецЕсли;
		ОписаниеСтроки = УчетСреднегоЗаработкаКлиентСервер.ОписаниеСтрокиДанныхОНачисленияхОбщегоСреднегоЗаработка();
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаРасшифровки);
		ОписаниеСтроки.ПорядокРасчета = ПорядокРасчета;
		ОписаниеСтроки.Сотрудник = Сотрудник;
		ОписаниеСтроки.ФизическоеЛицо = ФизическоеЛицо;
		ОписаниеСтроки.Корректировка = Истина;
		Если СтрокаНеУчитывать <> Неопределено Тогда
			Если  СтрокаНеУчитывать["Значение" + ПостфиксКолонки] <> Неопределено  И СтрокаНеУчитывать["Значение" + ПостфиксКолонки] Тогда
				ОписаниеСтроки.НеУчитывать = Истина;
			Иначе
				ОписаниеСтроки.НеУчитывать = Ложь;		
			КонецЕсли;
		КонецЕсли;
		ДанныеНачислений.Добавить(ОписаниеСтроки);
	КонецЦикла;
	
	Возврат ДанныеНачислений;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция РезультатРедактированияПредельныхВеличин(Форма)

	ПредельныеВелечины = Новый Соответствие;
	
	ИдентификаторыСтрок = ИдентификаторыСтрокПредельныеВеличины();
	
	Для Каждого КлючИЗначениеМесяцев Из Форма.МесяцыРасчета Цикл
		// Обходим по колонкам-периодам.
		Месяц = КлючИЗначениеМесяцев.Ключ;
		ПостфиксКолонки = КлючИЗначениеМесяцев.Значение;
		ЗначенияЗаполнены = Ложь;
		Для Каждого КлючИЗначениеСтрок Из ИдентификаторыСтрок Цикл
			Идентификатор = КлючИЗначениеСтрок.Ключ;
			СтрокаТаблицы = УчетСреднегоЗаработкаКлиентСервер.СтрокаСреднегоЗаработка(Форма.СреднийЗаработок, Идентификатор);
			Если СтрокаТаблицы <> Неопределено Тогда
				Размер = СтрокаТаблицы["Значение" + ПостфиксКолонки];
				Если СтрокаТаблицы["Значение" + ПостфиксКолонки] > 0 Тогда
					ЗначенияЗаполнены = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияЗаполнены Тогда
			ПредельныеВелечины.Вставить(Месяц, Размер);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПредельныеВелечины;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция РезультатРедактированияВремени(Форма)

	ДанныеВремени = Новый Массив;
	
	ИдентификаторыСтрок = ИдентификаторыСтрокДанныхВремени();
	СтрокаНеУчитывать = УчетСреднегоЗаработкаКлиентСервер.СтрокаСреднегоЗаработка(Форма.СреднийЗаработок, "НеУчитывать");

	Для Каждого КлючИЗначениеМесяцев Из Форма.МесяцыРасчета Цикл
		// Обходим по колонкам-периодам.
		Месяц = КлючИЗначениеМесяцев.Ключ;
		ПостфиксКолонки = КлючИЗначениеМесяцев.Значение;
		ОписаниеСтроки = ОписаниеСтрокиДанныхОВремени();
		ОписаниеСтроки.Сотрудник = Форма.Сотрудник;
		ОписаниеСтроки.ФизическоеЛицо = Форма.ФизическоеЛицо;

		ОписаниеСтроки.ПорядокРасчета = Форма.ПорядокРасчета;
		ОписаниеСтроки.Период = Месяц;
		ЗначенияЗаполнены = Ложь;
		Если СтрокаНеУчитывать <> Неопределено Тогда  
			Если СтрокаНеУчитывать["Значение" + ПостфиксКолонки] <> Неопределено И СтрокаНеУчитывать["Значение" + ПостфиксКолонки] Тогда
				ОписаниеСтроки.НеУчитывать = Истина;
			Иначе
				ОписаниеСтроки.НеУчитывать = Ложь;		
			КонецЕсли;  
		КонецЕсли;
		Для Каждого КлючИЗначениеСтрок Из ИдентификаторыСтрок Цикл
			Идентификатор = КлючИЗначениеСтрок.Ключ;
			СтрокаТаблицы = УчетСреднегоЗаработкаКлиентСервер.СтрокаСреднегоЗаработка(Форма.СреднийЗаработок, Идентификатор);
			

			Если СтрокаТаблицы <> Неопределено Тогда
				ОписаниеСтроки[Идентификатор] = СтрокаТаблицы["Значение" + ПостфиксКолонки];
				ОписаниеСтроки.Корректировка = Не СтрокаТаблицы["ТолькоПросмотр" + ПостфиксКолонки];
				Если СтрокаТаблицы["Значение" + ПостфиксКолонки] > 0 Тогда
					ЗначенияЗаполнены = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияЗаполнены Тогда
			ДанныеВремени.Добавить(ОписаниеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВремени;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеОбИндексации(Форма)

	ДанныеИндексации = Новый Массив;
	
	Для Каждого СтрокаИндексации Из Форма.ДанныеОбИндексации Цикл
		ОписаниеИндексации = Новый Структура("Сотрудник, Период, КоэффициентИндексации");
		ЗаполнитьЗначенияСвойств(ОписаниеИндексации, СтрокаИндексации);
		ДанныеИндексации.Добавить(ОписаниеИндексации);
	КонецЦикла;
	
	Возврат ДанныеИндексации;
	
КонецФункции	

#КонецОбласти

#Область ЗаполнениеФормы

&НаСервере
Процедура ЗаполнитьФорму(ДанныеОНачислениях, ДанныеОВремени, ИндексацияСреднегоЗаработка = Неопределено, ПредельныеВеличины = Неопределено)
	
	// Перед заполнением очищаем ячейки за тот период, который сейчас будет заполняться.
	Месяцы = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Месяцы, ОбщегоНазначения.ВыгрузитьКолонку(ДанныеОНачислениях, "Период", Истина));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Месяцы, ОбщегоНазначения.ВыгрузитьКолонку(ДанныеОВремени, "Период", Истина), Истина);
	
	Для Каждого Месяц Из Месяцы Цикл
		Для Каждого СтрокаТаблицы Из СреднийЗаработок Цикл
			СтрокаТаблицы["Значение" + ПостфиксКолонки(Месяц)] = 0;
		КонецЦикла;
		// Очищаем также данные расшифровки.
		УдаляемыеСтроки = РасшифровкаСреднегоЗаработка.НайтиСтроки(Новый Структура("Период", Месяц));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			РасшифровкаСреднегоЗаработка.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Если ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Локализация Тогда  
		ЗаполнитьНачисления(ДанныеОНачислениях);
		ЗаполнитьВремя(ДанныеОВремени);
		Если ИндексацияСреднегоЗаработка <> Неопределено Тогда
			ЗаполнитьИндексацию(ИндексацияСреднегоЗаработка);
		КонецЕсли;	
		
	ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация Тогда
		ЗаполнитьНачисленияФСЗН(ДанныеОНачислениях);
		ЗаполнитьВремяФСЗН(ДанныеОВремени);
		ЗаполнитьПредельныеВеличины(ПредельныеВеличины);

	ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОтпуск.Локализация Тогда
		ЗаполнитьНачисления(ДанныеОНачислениях);
		ЗаполнитьВремя(ДанныеОВремени);
		Если ИндексацияСреднегоЗаработка <> Неопределено Тогда
			ЗаполнитьИндексацию(ИндексацияСреднегоЗаработка);
		КонецЕсли;
	
	КонецЕсли;
	
	ЗаполнитьИтоги(ЭтаФорма);
	РассчитатьСреднийЗаработок(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексацию(ИндексацияСреднегоЗаработка)
	
	ДанныеОбИндексации.Очистить();
	Для Каждого Индексация Из ИндексацияСреднегоЗаработка Цикл
		ЗаполнитьЗначенияСвойств(ДанныеОбИндексации.Добавить(), Индексация);
	КонецЦикла;
	
	ЗаполнитьИнформациюОбИндексации();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНачисления(ДанныеОНачислениях)
	
	ИдентификаторыСтрок = ИдентификаторыСтрокСоставныхЧастей(ПорядокРасчета);
	
	Для Каждого СтрокаНачислений Из ДанныеОНачислениях Цикл
		ИдентификаторСтроки = ИдентификаторыСтрок[СтрокаНачислений.СоставнаяЧасть];	
		
		СтрокаТаблицы = УчетСреднегоЗаработка.СтрокаСреднегоЗаработка(СреднийЗаработок, ИдентификаторСтроки);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПостфиксКолонки = МесяцыРасчета.Получить(НачалоМесяца(СтрокаНачислений.Период));
		Если ПостфиксКолонки = Неопределено Тогда
			// Для периода, указанного в данных не оказалось колонки.
			Продолжить;
		КонецЕсли;	
		
		СтрокаТаблицы["Значение" + ПостфиксКолонки] = СтрокаТаблицы["Значение" + ПостфиксКолонки] + СтрокаНачислений.Сумма;
		СтрокаТаблицы["Корректировка" + ПостфиксКолонки] = СтрокаНачислений.Корректировка;
		
		//Если СтрокаТаблицы.ЕстьРасшифровка Тогда
		Если СтрокаНачислений.СоставнаяЧасть = Перечисления.УчетНачисленийВСреднемЗаработкеОтпуск.ПремияГодовая Тогда 
			ЗаполнитьЗначенияСвойств(РасшифровкаСреднегоЗаработка.Добавить(), СтрокаНачислений);
			СтрокаТаблицы.ЕстьРасшифровка = Истина;
		КонецЕсли;
		//КонецЕсли;	
		
		СтрокаТаблицы = УчетСреднегоЗаработка.СтрокаСреднегоЗаработка(СреднийЗаработок, "НеУчитывать");
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы["Значение" + ПостфиксКолонки] = СтрокаНачислений.НеУчитывать;
		КонецЕсли;
		
		
		Если СтрокаНачислений.Индексируется Тогда 
			Продолжить;
		КонецЕсли;
		// Для неиндексируемых начислений.
		СтрокаТаблицы = УчетСреднегоЗаработка.СтрокаСреднегоЗаработка(СреднийЗаработок, ИдентификаторСтроки + "НеИндексируется");
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы["Значение" + ПостфиксКолонки] = СтрокаТаблицы["Значение" + ПостфиксКолонки] + СтрокаНачислений.Сумма;
			СтрокаТаблицы["Корректировка" + ПостфиксКолонки] = СтрокаНачислений.Корректировка;
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВремя(ДанныеВремени)
	
	ИдентификаторыСтрок = ИдентификаторыСтрокДанныхВремени();
	
	Для Каждого СтрокаДанныхВремени Из ДанныеВремени Цикл
		ПостфиксКолонки = МесяцыРасчета.Получить(НачалоМесяца(СтрокаДанныхВремени.Период));
		Если ПостфиксКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		Для Каждого КлючЗначение Из ИдентификаторыСтрок Цикл
			СтрокаТаблицы = УчетСреднегоЗаработка.СтрокаСреднегоЗаработка(СреднийЗаработок, КлючЗначение.Ключ);
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы["Значение" + ПостфиксКолонки] = СтрокаДанныхВремени[КлючЗначение.Значение];
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияФСЗН(ДанныеОНачислениях)
	
	ИдентификаторыСтрок = ИдентификаторыСтрокСоставныхЧастей(ПорядокРасчета);
	
	Для Каждого СтрокаНачислений Из ДанныеОНачислениях Цикл
		ИдентификаторСтроки = ИдентификаторыСтрок[СтрокаНачислений.СоставнаяЧасть];	
		
		СтрокаТаблицы = УчетСреднегоЗаработка.СтрокаСреднегоЗаработка(СреднийЗаработок, ИдентификаторСтроки);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//
		ПостфиксКолонки = МесяцыРасчета.Получить(НачалоМесяца(СтрокаНачислений.Период));
		Если ПостфиксКолонки = Неопределено Тогда
			// Для периода, указанного в данных не оказалось колонки.
			Продолжить;
		КонецЕсли;	
		
		СтрокаТаблицы["Значение" + ПостфиксКолонки] = СтрокаТаблицы["Значение" + ПостфиксКолонки] + СтрокаНачислений.Сумма;
	
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВремяФСЗН(ДанныеВремени)
	
	ИдентификаторыСтрок = ИдентификаторыСтрокДанныхВремени();
	
	Для Каждого СтрокаДанныхВремени Из ДанныеВремени Цикл
		ПостфиксКолонки = МесяцыРасчета.Получить(НачалоМесяца(СтрокаДанныхВремени.Период));
		Если ПостфиксКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		Для Каждого КлючЗначение Из ИдентификаторыСтрок Цикл
			СтрокаТаблицы = УчетСреднегоЗаработка.СтрокаСреднегоЗаработка(СреднийЗаработок, КлючЗначение.Ключ);
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы["Значение" + ПостфиксКолонки] = СтрокаДанныхВремени[КлючЗначение.Значение];
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредельныеВеличины(ПредельныеВеличины)
	
	ИдентификаторыСтрок = ИдентификаторыСтрокПредельныеВеличины();
	
	Для Каждого СтрокаДанных Из ПредельныеВеличины Цикл
		ПостфиксКолонки = МесяцыРасчета.Получить(НачалоМесяца(СтрокаДанных.Ключ));
		Если ПостфиксКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		Для Каждого КлючЗначение Из ИдентификаторыСтрок Цикл
			СтрокаТаблицы = УчетСреднегоЗаработка.СтрокаСреднегоЗаработка(СреднийЗаработок, КлючЗначение.Ключ);
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы["Значение" + ПостфиксКолонки] = ПредельныеВеличины[СтрокаДанных.Ключ];
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры


&НаСервере
Процедура УстановитьДоступностьКорректировок()
	
	МесяцыКорректировки = УчетСреднегоЗаработка.МесяцыКорректировкиСреднегоЗаработка(Сотрудник, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДатаПриемаНаРаботуСотрудника, ДатаНачалаСобытия);
	
	МесяцОбхода = НачалоПериодаРасчета;
	Пока МесяцОбхода < ОкончаниеПериодаРасчета Цикл
		// Обходим период расчета, начиная с месяца, 
		// в котором были расчеты, устанавливаем доступность только на просмотр.
		Если МесяцыКорректировки.Найти(МесяцОбхода) = Неопределено Тогда
			ПостфиксКолонки = МесяцыРасчета[МесяцОбхода];
			Элементы["СреднийЗаработокЗначение" + ПостфиксКолонки].ТолькоПросмотр = Истина;
			Для Каждого СтрокаТаблицы Из СреднийЗаработок Цикл
				СтрокаТаблицы["ТолькоПросмотр" + ПостфиксКолонки] = Истина;
			КонецЦикла;
		КонецЕсли;
		МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
	КонецЦикла;
	
	// Если есть месяцы доступные для корректировки, то можно использовать данные ФОТ для предположительного заполнения.
	Элементы.ДополнитьДанныеСреднегоЗаработка.Доступность = МесяцыКорректировки.Количество() > 0;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСреднийЗаработок(Форма)
	
	ДанныеНачислений = РезультатРедактированияНачислений(Форма);
	ДанныеВремени = РезультатРедактированияВремени(Форма);
	ПредельныеВеличины = РезультатРедактированияПредельныхВеличин(Форма);
	
	Если Форма.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация") Тогда
						
		ПараметрыРасчета = УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСЗН();
		ПараметрыРасчета.ДатаНачалаСобытия = Форма.ДатаНачалаСобытия;
		ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало = Форма.НачалоПериодаРасчета;
		ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание = Форма.ОкончаниеПериодаРасчета;
		ПараметрыРасчета.РасчетПремии = Форма.РасчетПремии;
		ПараметрыРасчета.ПериодыРасчета = ПериодыРасчетаСреднего(Форма);	
		ПараметрыРасчета.ДанныеНачислений = ДанныеНачислений;
		ПараметрыРасчета.ДанныеВремени = ДанныеВремени;
		ПараметрыРасчета.ПрименятьПредельнуюВеличину = Истина;
		ПараметрыРасчета.ПорядокРасчета = Форма.ПорядокРасчета;
		ПараметрыРасчета.Сотрудник = Форма.Сотрудник;  		                                      
		ПараметрыРасчета.ПредельныеВеличины = ПредельныеВеличины;  
		
		Форма.СреднийЗаработокИтог = УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.СреднийЗаработокФСС(ПараметрыРасчета);   
		
	ИначеЕсли Форма.ПорядокРасчета =  ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Локализация") Тогда
		
		Если Форма.СпособыРасчета = Неопределено Тогда
			// Если способ расчета - единственный.
			Форма.СреднийЗаработокИтог = УчетСреднегоЗаработкаКлиентСервер.РассчитатьСреднийЗаработокОбщий(
											ДанныеНачислений, 
											ДанныеВремени, 
											ДанныеОбИндексации(Форма), 
											Форма.НачалоПериодаРасчета, 
											Форма.ОкончаниеПериодаРасчета, 
											Форма.ЧасовойСреднийЗаработок);
			Возврат;
		КонецЕсли;
		
		// Если способов расчета несколько.
		Для Каждого СпособРасчета Из Форма.СпособыРасчета Цикл
			ИмяРеквизита = Форма.СреднийЗаработокПоСпособамРасчета.Получить(СпособРасчета);
			Форма[ИмяРеквизита] = УчетСреднегоЗаработкаКлиентСервер.РассчитатьСреднийЗаработокОбщий(
											ДанныеНачислений, 
											ДанныеВремени, 
											ДанныеОбИндексации(Форма), 
											Форма.НачалоПериодаРасчета, 
											Форма.ОкончаниеПериодаРасчета, 
											Форма.ЧасовойСреднийЗаработок,
											Новый Структура("СпособРасчетаОтпуска, ДатаНачалаСобытия", СпособРасчета, Форма.ДатаНачалаСобытия));
		КонецЦикла;
		
	ИначеЕсли Форма.ПорядокРасчета =  ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОтпуск.Локализация") Тогда
		
		Если Форма.СпособыРасчета = Неопределено Тогда
			// Если способ расчета - единственный.
			Форма.СреднийЗаработокИтог = УчетСреднегоЗаработкаКлиентСервер.РассчитатьСреднийЗаработокОтпуск(
											ДанныеНачислений, 
											ДанныеВремени, 
											ДанныеОбИндексации(Форма), 
											Форма.НачалоПериодаРасчета, 
											Форма.ОкончаниеПериодаРасчета, 
											Форма.ЧасовойСреднийЗаработок);
			Возврат;
		КонецЕсли;
		
		// Если способов расчета несколько.
		Для Каждого СпособРасчета Из Форма.СпособыРасчета Цикл
			ИмяРеквизита = Форма.СреднийЗаработокПоСпособамРасчета.Получить(СпособРасчета);
			Форма[ИмяРеквизита] = УчетСреднегоЗаработкаКлиентСервер.РассчитатьСреднийЗаработокОтпуск(
											ДанныеНачислений, 
											ДанныеВремени, 
											ДанныеОбИндексации(Форма), 
											Форма.НачалоПериодаРасчета, 
											Форма.ОкончаниеПериодаРасчета, 
											Форма.ЧасовойСреднийЗаработок,
											Новый Структура("СпособРасчетаОтпуска, ДатаНачалаСобытия", СпособРасчета, Форма.ДатаНачалаСобытия));
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ПериодыРасчетаСреднего(Форма)
	
	Периоды = Новый Массив;
	Месяц = Форма.НачалоПериодаРасчета;
	
	Пока Месяц <= НачалоМесяца(Форма.ОкончаниеПериодаРасчета) Цикл
		
		Периоды.Добавить(Месяц);
		Месяц = КонецМесяца(Месяц) + 1;
	КонецЦикла;
			
	Возврат Периоды;
	
КонецФункции

#КонецОбласти

#Область ЧтениеДанныхУчетаСреднегоЗаработка

&НаСервере
Процедура ПрочитатьДанныеУчетаСреднегоЗаработка(ОтборМесяцев = Неопределено)
	
	// Очистим данные за "заказанный" период.
	Для Каждого СтрокаТаблицы Из СреднийЗаработок Цикл
		Для Каждого КлючИЗначение Из МесяцыРасчета Цикл
			Месяц = КлючИЗначение.Ключ;
			ПостфиксКолонки = КлючИЗначение.Значение;
			Если ОтборМесяцев <> Неопределено И ОтборМесяцев.Найти(Месяц) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы["Значение" + ПостфиксКолонки] = 0;
		КонецЦикла;
	КонецЦикла;
	ПредельныеВеличины = Новый Соответствие;
	Если ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Локализация Тогда  
		ДанныеДляРасчета = УчетСреднегоЗаработка.ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудника(
		Сотрудник, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ПорядокРасчета, ОтборМесяцев, ДокументСсылка);
		
	    	// Преобразовываем данные для ввода в форме.
		ЗаполнитьФорму(ДанныеДляРасчета.ДанныеОНачислениях, ДанныеДляРасчета.ДанныеОВремени,ДанныеДляРасчета.ДанныеОбИндексации);

	ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация Тогда
		
		ДополнительныеПараметры = УчетПособийСоциальногоСтрахованияРасширенный.ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
		ДополнительныеПараметры.НачалоПериода = НачалоПериодаРасчета;
		ДополнительныеПараметры.ОкончаниеПериода = ОкончаниеПериодаРасчета;
		ДополнительныеПараметры.ПорядокРасчета = ПорядокРасчета;
		ДополнительныеПараметры.ДокументСсылка = ДокументСсылка;
		//ДополнительныеПараметры.ОтборМесяцев = ОтборМесяцев;
		//ДополнительныеПараметры.УчитыватьКорректировки = УчитыватьКорректировки;

		ДанныеДляРасчета = УчетПособийСоциальногоСтрахованияРасширенный.ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаЛокализация(Сотрудник, ДополнительныеПараметры);
		ПредельныеВеличины = УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносовЛокализация(НачалоПериодаРасчета,ОкончаниеПериодаРасчета);
		// Преобразовываем данные для ввода в форме.
		ЗаполнитьФорму(ДанныеДляРасчета.ДанныеОНачислениях, ДанныеДляРасчета.ДанныеОВремени,,ПредельныеВеличины);
	
	ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОтпуск.Локализация Тогда
		ДанныеДляРасчета = УчетСреднегоЗаработка.ДанныеДляРасчетаСреднегоЗаработкаОтпускаСотрудника(
		Сотрудник, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ПорядокРасчета, ОтборМесяцев, ДокументСсылка);

	    ЗаполнитьФорму(ДанныеДляРасчета.ДанныеОНачислениях, ДанныеДляРасчета.ДанныеОВремени,ДанныеДляРасчета.ДанныеОбИндексации);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПредположительно()
	
	// За период, когда сотрудник уже работал, но нет никаких начислений, 
	// дополняем данные по графику работы и ФОТ.
	
	// Определяем период, доступный для предположения и корректировок.
	Начало = Неопределено;
	Окончание = Неопределено;
	МассивМесяцев = Новый Массив;
	МесяцОбхода = НачалоПериодаРасчета;
	Пока МесяцОбхода < ОкончаниеПериодаРасчета Цикл
		ПостфиксКолонки = МесяцыРасчета[МесяцОбхода];
		Если СреднийЗаработок[0]["ТолькоПросмотр" + ПостфиксКолонки] = Истина Тогда
			Если Начало = Неопределено Тогда
				МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
				Продолжить;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Если Начало = Неопределено Тогда
			Начало = МесяцОбхода;
		КонецЕсли;
		Окончание = КонецМесяца(МесяцОбхода);
		МассивМесяцев.Добавить(МесяцОбхода);
		МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
	КонецЦикла;
	
	Если Начало = Неопределено Тогда
		// Нет периодов для предположения, на все месяцы существуют учетные данные.
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Готовим исходные данные для подсистемы учета времени.
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачалаПериода", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ДатаОкончанияПериода", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Месяц Из МассивМесяцев Цикл
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ДатаНачалаПериода = НачалоМесяца(Месяц);
		НоваяСтрока.ДатаОкончанияПериода = КонецМесяца(Месяц);
	КонецЦикла;
	
	// Получаем предположительные данные у подсистемы учета времени.
	УчетРабочегоВремениРасширенный.СоздатьВТВремяПоГрафикамСотрудников(ИсходныеДанные, МенеджерВременныхТаблиц);
	//УчетРабочегоВремени.СоздатьВТВремяПоГрафикамСотрудников(ИсходныеДанные, МенеджерВременныхТаблиц);
	
	// Определяем размер ФОТ по месяцам
	// месяцы в ВТПериоды.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Начало, Окончание);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК Период,
	|	&Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТПериоды КАК Периоды";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.Выполнить();
	
	// Получаем ФОТ по данным плановых начислений.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПервых(
		"ПлановыеНачисления",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"));
			
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"));
			
	ПредельныеВеличины = Неопределено;		
	Если ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Локализация Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ) КАК Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер КАК Размер
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСрезы
		|ИЗ
		|	ВТПлановыеНачисленияСрезПервых КАК ПлановыеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ) КАК Период,
		|	ПлановыеНачисления.Сотрудник,
		|	НастройкаСреднегоЗаработка.Значение КАК СоставнаяЧасть,
		|	СУММА(ПлановыеНачисления.Размер) КАК Сумма
		|ПОМЕСТИТЬ ВТДанныеФОТ
		|ИЗ
		|	ВТПлановыеНачисленияСрезы КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкаСреднегоЗаработка
		|		ПО (НастройкаСреднегоЗаработка.Ссылка = ПлановыеНачисления.Начисление)
		|			И (НастройкаСреднегоЗаработка.Индексируется)
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ),
		|	ПлановыеНачисления.Сотрудник,
		|	НастройкаСреднегоЗаработка.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеФОТ.Период,
		|	ДанныеФОТ.Сотрудник,
		|	ДанныеФОТ.СоставнаяЧасть,
		|	&СтатьяФинансированияПоУмолчанию КАК СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА ДанныеУчетаВремени.НормаДней <> 0
		|			ТОГДА ДанныеФОТ.Сумма * ДанныеУчетаВремени.ОтработаноДней / ДанныеУчетаВремени.НормаДней
		|		ИНАЧЕ ДанныеФОТ.Сумма
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	ВТДанныеФОТ КАК ДанныеФОТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикамСотрудников КАК ДанныеУчетаВремени
		|		ПО (ДанныеУчетаВремени.Сотрудник = ДанныеФОТ.Сотрудник)
		|			И (НАЧАЛОПЕРИОДА(ДанныеУчетаВремени.ДатаНачалаПериода, МЕСЯЦ) = ДанныеФОТ.Период)";
		
		Запрос.УстановитьПараметр("СтатьяФинансированияПоУмолчанию", СтатьяФинансированияПоУмолчанию);
		
		ДанныеНачислений = УчетСреднегоЗаработка.ПустаяТаблицаНачисленийСреднийЗаработокОбщий();
		
	ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОтпуск.Локализация Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ) КАК Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер КАК Размер
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСрезы
		|ИЗ
		|	ВТПлановыеНачисленияСрезПервых КАК ПлановыеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ) КАК Период,
		|	ПлановыеНачисления.Сотрудник,
		|	НастройкаСреднегоЗаработка.Значение КАК СоставнаяЧасть,
		|	СУММА(ПлановыеНачисления.Размер) КАК Сумма
		|ПОМЕСТИТЬ ВТДанныеФОТ
		|ИЗ
		|	ВТПлановыеНачисленияСрезы КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.СреднийЗаработокОтпуск КАК НастройкаСреднегоЗаработка
		|		ПО (НастройкаСреднегоЗаработка.Ссылка = ПлановыеНачисления.Начисление)
		//|			И (НастройкаСреднегоЗаработка.Индексируется)
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ),
		|	ПлановыеНачисления.Сотрудник,
		|	НастройкаСреднегоЗаработка.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеФОТ.Период,
		|	ДанныеФОТ.Сотрудник,
		|	ДанныеФОТ.СоставнаяЧасть,
		|	&СтатьяФинансированияПоУмолчанию КАК СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА ДанныеУчетаВремени.НормаДней <> 0
		|			ТОГДА ДанныеФОТ.Сумма * ДанныеУчетаВремени.ОтработаноДней / ДанныеУчетаВремени.НормаДней
		|		ИНАЧЕ ДанныеФОТ.Сумма
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	ВТДанныеФОТ КАК ДанныеФОТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикамСотрудников КАК ДанныеУчетаВремени
		|		ПО (ДанныеУчетаВремени.Сотрудник = ДанныеФОТ.Сотрудник)
		|			И (НАЧАЛОПЕРИОДА(ДанныеУчетаВремени.ДатаНачалаПериода, МЕСЯЦ) = ДанныеФОТ.Период)";
		
		Запрос.УстановитьПараметр("СтатьяФинансированияПоУмолчанию", СтатьяФинансированияПоУмолчанию);
		
		ДанныеНачислений = УчетСреднегоЗаработка.ПустаяТаблицаНачисленийСреднийЗаработокОтпуск();

	ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ) КАК Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер КАК Размер
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСрезы
		|ИЗ
		|	ВТПлановыеНачисленияСрезПервых КАК ПлановыеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ) КАК Период,
		|	ПлановыеНачисления.Сотрудник,
		|	НастройкаСреднегоЗаработка.Значение КАК СоставнаяЧасть,
		|	СУММА(ПлановыеНачисления.Размер) КАК Сумма
		|ПОМЕСТИТЬ ВТДанныеФОТ
		|ИЗ
		|	ВТПлановыеНачисленияСрезы КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК НастройкаСреднегоЗаработка
		|		ПО (НастройкаСреднегоЗаработка.Ссылка = ПлановыеНачисления.Начисление)
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ),
		|	ПлановыеНачисления.Сотрудник,
		|	НастройкаСреднегоЗаработка.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеФОТ.Период,
		|	ДанныеФОТ.Сотрудник,
		|	ДанныеФОТ.СоставнаяЧасть,
		|	&СтатьяФинансированияПоУмолчанию КАК СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА ДанныеУчетаВремени.НормаДней <> 0
		|			ТОГДА ДанныеФОТ.Сумма * ДанныеУчетаВремени.ОтработаноДней / ДанныеУчетаВремени.НормаДней
		|		ИНАЧЕ ДанныеФОТ.Сумма
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	ВТДанныеФОТ КАК ДанныеФОТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикамСотрудников КАК ДанныеУчетаВремени
		|		ПО (ДанныеУчетаВремени.Сотрудник = ДанныеФОТ.Сотрудник)
		|			И (НАЧАЛОПЕРИОДА(ДанныеУчетаВремени.ДатаНачалаПериода, МЕСЯЦ) = ДанныеФОТ.Период)";
		
		Запрос.УстановитьПараметр("СтатьяФинансированияПоУмолчанию", СтатьяФинансированияПоУмолчанию);
		
		ДанныеНачислений = УчетПособийСоциальногоСтрахованияРасширенный.ПустаяТаблицаНачисленийСреднийЗаработокФСС();
	   	ПредельныеВеличины = УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносовЛокализация(НачалоПериодаРасчета,ОкончаниеПериодаРасчета);

	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеНачислений.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеУчетаВремени.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ДанныеУчетаВремени.ДатаНачалаПериода, МЕСЯЦ) КАК Период,
	|	ДанныеУчетаВремени.ОтработаноДней,
	|	ДанныеУчетаВремени.ОтработаноЧасов,
	|	ДанныеУчетаВремени.ОтработаноДнейПятидневка,
	|	ДанныеУчетаВремени.ОтработаноЧасовПоПроизводственномуКалендарю КАК ОтработаноЧасовПятидневка,
	|	ДанныеУчетаВремени.ОтработаноДнейШестидневка,
	|	ДанныеУчетаВремени.ОтработаноДнейКалендарных,
	|	ДанныеУчетаВремени.НормаДней КАК НормаДнейПроизводственныйКалендарь,
	|	ДанныеУчетаВремени.ПроизводственныйКалендарьПятидневкаЧасы КАК НормаЧасовПроизводственныйКалендарь,
	|	ДанныеУчетаВремени.НормаДней,
	|	ДанныеУчетаВремени.НормаЧасов
	|ИЗ
	|	ВТВремяПоГрафикамСотрудников КАК ДанныеУчетаВремени";
	
	Если ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Локализация Тогда
		ДанныеВремени = УчетСреднегоЗаработка.ПустаяТаблицаОтработанноеВремяСреднийЗаработокОбщий();
	ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОтпуск.Локализация Тогда
		ДанныеВремени = УчетСреднегоЗаработка.ПустаяТаблицаОтработанноеВремяСреднийЗаработокОтпуск();
	ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация Тогда
		ДанныеВремени = УчетПособийСоциальногоСтрахованияРасширенный.ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС();	
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеВремени.Добавить(), Выборка);
	КонецЦикла;
	
	ЗаполнитьФорму(ДанныеНачислений, ДанныеВремени,,ПредельныеВеличины);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьКорректировки(ДанныеДляРасчета)
	
	КорректировкиНачислений = УчетСреднегоЗаработка.ПустаяТаблицаНачисленийСреднийЗаработокОбщий();
	
	РедактируемыеНачисления = ПолучитьИзВременногоХранилища(ДанныеДляРасчета.ДанныеОНачислениях);
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	Для Каждого СтрокаНачислений Из РедактируемыеНачисления Цикл
		Если СтрокаНачислений.Корректировка Тогда
			НоваяСтрока = КорректировкиНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		КонецЕсли;
	КонецЦикла;
	
	КорректировкиВремени = УчетСреднегоЗаработка.ПустаяТаблицаОтработанноеВремяСреднийЗаработокОбщий();
	РедактируемоеВремя = ПолучитьИзВременногоХранилища(ДанныеДляРасчета.ДанныеОВремени);
	Для Каждого СтрокаВремени Из РедактируемоеВремя Цикл
		Если СтрокаВремени.Корректировка Тогда
			ЗаполнитьЗначенияСвойств(КорректировкиВремени.Добавить(), СтрокаВремени);
		КонецЕсли;
	КонецЦикла;
	
	Корректировки = Новый Структура;
	Корректировки.Вставить("КорректировкиНачислений", КорректировкиНачислений);
	Корректировки.Вставить("КорректировкиВремени", КорректировкиВремени);
	
	ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка();
	ДополнительныеПараметры.Организация = Организация;
	ДополнительныеПараметры.ФизическоеЛицо = ФизическоеЛицо;
	ДополнительныеПараметры.ПереноситьДанныеВДругойУчетСреднегоЗаработка = ПереноситьДанныеВДругойУчетСреднегоЗаработка;
	
	УчетСреднегоЗаработка.ЗаписатьКорректировкиОбщегоСреднегоЗаработка(Корректировки, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияИНастройкаФормыПриСозданииНаСервере

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьМесяцыРасчета(Форма)
	
	СоответствиеМесяцев = Новый Соответствие;
	МесяцОбхода = Форма.НачалоПериодаРасчета;
	Пока МесяцОбхода <= Форма.ОкончаниеПериодаРасчета Цикл
		СоответствиеМесяцев.Вставить(МесяцОбхода, ПостфиксКолонки(МесяцОбхода));
		МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
	КонецЦикла;
	Форма.МесяцыРасчета = Новый ФиксированноеСоответствие(СоответствиеМесяцев);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавленныеМесяцы(Форма)
	
	// Выявляет месяцы периода расчета, отсутствующие в соответствии месяцев.
	ДобавленныеМесяцы = Новый Массив;
	
	МесяцОбхода = Форма.НачалоПериодаРасчета;
	Пока МесяцОбхода <= Форма.ОкончаниеПериодаРасчета Цикл
		Если Форма.МесяцыРасчета.Получить(МесяцОбхода) = Неопределено Тогда
			ДобавленныеМесяцы.Добавить(МесяцОбхода);
		КонецЕсли;
		МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
	КонецЦикла;
	
	Возврат ДобавленныеМесяцы;
	
КонецФункции

&НаСервере
Процедура СоздатьСтроку(Идентификатор, ЗаголовокСтроки, СоставнаяЧасть = Неопределено, Точность = 2, МаксимальноеЗначение = 0)
	
	НоваяСтрока = СреднийЗаработок.Добавить();
	НоваяСтрока.Идентификатор	= Идентификатор;
	НоваяСтрока.ЗаголовокСтроки	= ЗаголовокСтроки;
	НоваяСтрока.СоставнаяЧасть	= СоставнаяЧасть;
	Если СоставнаяЧасть <> Неопределено Тогда
		// Заполнение расшифровки имеет смысл только для строк начислений.
		НоваяСтрока.ЕстьРасшифровка = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Или СоставнаяЧастьТребуетРасшифровки(СоставнаяЧасть);
	КонецЕсли;
	НоваяСтрока.ФорматЗначения	= "ЧДЦ=" + Точность + ";БЛ=Учитывать; БИ='Не учитывать'";
	НоваяСтрока.МаксимальноеЗначение = МаксимальноеЗначение;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСтроки()	
		
	Если ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Локализация Тогда  
		СоздатьСтрокиСреднийОбщий();  
	ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация Тогда
		СоздатьСтрокиСреднийФСЗН();
	ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОтпуск.Локализация Тогда
		СоздатьСтрокиСреднийОтпуск()
	КонецЕсли;
		
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтрокиСреднийОбщий()

	СоздатьСтроку("ОсновныеНачисления", НСтр("ru = 'Общий заработок'"), Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок);
	СоздатьСтроку("ПремияМесячная", НСтр("ru = 'Премия месячная учитываемая полностью'"), Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияМесячная);
	СоздатьСтроку("ПремияМесячнаяПропорциональноОтработанномуВремени", НСтр("ru = 'Премия месячная учитываемая пропорционально отработанному времени'"), Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияМесячнаяПропорциональноОтработанномуВремени);
	СоздатьСтроку("ПремияГодовая", НСтр("ru = 'Годовая премия'"), Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодовая);
	
	СоздатьСтроку("ОтработаноДнейКалендарных", НСтр("ru = 'Календарных дней'"), , 0, 31);
	
	Если ЧасовойСреднийЗаработок Тогда
		СоздатьСтроку("ОтработаноЧасов", НСтр("ru = 'Отработано часов'"));
		СоздатьСтроку("НормаЧасов", НСтр("ru = 'Норма часов'"));
	Иначе	
		СоздатьСтроку("ОтработаноДней", НСтр("ru = 'Отработано дней'"), , 0, 31);
		СоздатьСтроку("НормаДней", НСтр("ru = 'Норма дней'"), , 0, 31); 
	КонецЕсли; 
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтрокиСреднийОтпуск()
	
	СоздатьСтроку("ОсновныеНачисления", НСтр("ru = 'Общий заработок'"), Перечисления.УчетНачисленийВСреднемЗаработкеОтпуск.ОбщийЗаработок,2);
	//СоздатьСтроку("Премия", НСтр("ru = 'Премия'"), Перечисления.УчетНачисленийВСреднемЗаработкеОтпсук.ПремияМесячная);
	СоздатьСтроку("ПремияГодовая", НСтр("ru = 'Годовая премия'"), Перечисления.УчетНачисленийВСреднемЗаработкеОтпуск.ПремияГодовая,2);
	
	СоздатьСтроку("ОтработаноДнейКалендарных", НСтр("ru = 'Календарных дней'"), , 1);
	
	Если ЧасовойСреднийЗаработок Тогда
		СоздатьСтроку("ОтработаноЧасов", НСтр("ru = 'Отработано часов'"));
		СоздатьСтроку("НормаЧасов", НСтр("ru = 'Норма часов'"));
	Иначе	
		СоздатьСтроку("ОтработаноДней", НСтр("ru = 'Отработано дней'"), , 0, 31);
		СоздатьСтроку("НормаДней", НСтр("ru = 'Норма дней'"), , 0, 31); 
	КонецЕсли;
	
	СоздатьСтроку("КоэффициентИндексации", НСтр("ru = 'Коэффициент индексации'"),,4);  	
	СоздатьСтроку("НеУчитывать", НСтр("ru = 'Не Учитывать'") , 0); 
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьСтрокиСреднийФСЗН()
	
	
	СоздатьСтроку("ОсновныеНачисления", НСтр("ru = 'Общий заработок'"), Перечисления.УчетНачисленийВСреднемЗаработкеФСС.ОбщийЗаработок);
	СоздатьСтроку("Премия", НСтр("ru = 'Премия'"), Перечисления.УчетНачисленийВСреднемЗаработкеФСС.ПремияМесячная);
	СоздатьСтроку("ОтработаноДнейКалендарных", НСтр("ru = 'Календарных дней'"), , 0, 31);
	Если ЧасовойСреднийЗаработок Тогда
		СоздатьСтроку("ОтработаноЧасов", НСтр("ru = 'Отработано часов'"));
		СоздатьСтроку("НормаЧасов", НСтр("ru = 'Норма часов'"));
	Иначе	
		СоздатьСтроку("ОтработаноДней", НСтр("ru = 'Отработано дней'"), , 0, 31);
		СоздатьСтроку("НормаДней", НСтр("ru = 'Норма дней'"), , 0, 31); 
	КонецЕсли; 	
	СоздатьСтроку("ПредельнаяВеличина", НСтр("ru = 'Предельная величина'"));

	
КонецПроцедуры	

&НаСервере
Процедура СоздатьКолонки(ДобавляемыеМесяцы = Неопределено)
	
	// Составляем массив существующих реквизитов.
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы,  "СреднийЗаработок");
	
	Если ДобавляемыеМесяцы = Неопределено Тогда
		// Выявляем добавленные месяцы.
		ДобавляемыеМесяцы = Новый Массив;
		Для Каждого КлючИЗначение Из МесяцыРасчета Цикл
			Месяц = КлючИЗначение.Ключ;
			ПостфиксКолонки = ПостфиксКолонки(Месяц);
			// Запоминаем месяцы, колонки для которых нужно добавить.
			Если МассивИменРеквизитовФормы.Найти("СреднийЗаработок.Значение" + ПостфиксКолонки) = Неопределено Тогда
				ДобавляемыеМесяцы.Добавить(Месяц);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Создаем реквизиты по количеству месяцев.
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Месяц Из ДобавляемыеМесяцы Цикл
		ПостфиксКолонки = ПостфиксКолонки(Месяц);
		Если МассивИменРеквизитовФормы.Найти("СреднийЗаработок.Значение" + ПостфиксКолонки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокТипов = Новый Массив;
	    СписокТипов.Добавить("Число");
	    СписокТипов.Добавить("Булево");
		
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы("Значение" + ПостфиксКолонки, Новый ОписаниеТипов(СписокТипов), "СреднийЗаработок"));
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы("Корректировка" + ПостфиксКолонки, Новый ОписаниеТипов("Булево"), "СреднийЗаработок"));
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы("ТолькоПросмотр" + ПостфиксКолонки, Новый ОписаниеТипов("Булево"), "СреднийЗаработок"));
		//ДобавляемыеРеквизиты.Добавить(
		//	Новый РеквизитФормы("НеИспользовать" + ПостфиксКолонки, Новый ОписаниеТипов("Булево"), "СреднийЗаработок"));

	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляем недостающие элементы формы.
	Для Каждого Месяц Из ДобавляемыеМесяцы Цикл
		// Колонки вставляются рекурсивно для того, чтобы восстановить последовательность.
		ДобавитьКолонку(Месяц);
	КонецЦикла;
	
	// Скрываем колонки, которые не используются, и наоборот показываем, которые теперь используются.
	Колонки = Элементы.СреднийЗаработокЗначения.ПодчиненныеЭлементы;
	Для Каждого ПолеФормы Из Колонки Цикл
		ПостфиксКолонки = ПостфиксПоИмениЯчейки(ПолеФормы.Имя);
		Месяц = МесяцПоПостфиксу(ПостфиксКолонки);
		ПолеФормы.Видимость = МесяцыРасчета.Получить(Месяц) <> Неопределено;
	КонецЦикла;
	
	// Добавляем условное оформление для вновь добавленных колонок.
	
	// Поля, имеющие расшифровку, выделяются цветом.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// оформляемые поля
	Для Каждого Месяц Из ДобавляемыеМесяцы Цикл
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СреднийЗаработокЗначение" + ПостфиксКолонки(Месяц));
		ОформляемоеПоле.Использование = Истина;
	КонецЦикла;
	// условие оформления
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "СреднийЗаработок.ЕстьРасшифровка", Истина);
	// параметры оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	//Для Каждого Месяц Из ДобавляемыеМесяцы Цикл
	//	
	//	ПостфиксКолонки = ПостфиксКолонки(Месяц);
	//	// Только просмотр
	//	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	//	// оформляемые поля
	//	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	//	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СреднийЗаработокЗначение" + ПостфиксКолонки);
	//	ОформляемоеПоле.Использование = Истина;
	//	// условие оформления
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "СреднийЗаработок.ТолькоПросмотр" + ПостфиксКолонки, Истина);
	//	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//
	//	// Добавляем формат значений в виде условного оформления.
	//	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	//	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СреднийЗаработокЗначение" + ПостфиксКолонки);
	//	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", Новый ПолеКомпоновкиДанных("СреднийЗаработок.ФорматЗначения")); 


	//КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Функция ДобавитьКолонку(Месяц)
	
	Если МесяцыРасчета.Получить(Месяц) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПостфиксКолонки = ПостфиксКолонки(Месяц);
	ИмяЭлемента = "СреднийЗаработокЗначение" + ПостфиксКолонки;
	ИмяЭлемента2 = "СреднийЗаработокНеУчитывать" + ПостфиксКолонки;

	ПолеФормы = Элементы.Найти(ИмяЭлемента);
	Если ПолеФормы <> Неопределено Тогда
		Возврат ПолеФормы;
	КонецЕсли;
	
	СледующийМесяц = ДобавитьМесяц(Месяц, 1);
	ПолеСледующего = Элементы.Найти("СреднийЗаработокЗначение" + ПостфиксКолонки(СледующийМесяц));
	Если ПолеСледующего = Неопределено Тогда
		ПолеСледующего = ДобавитьКолонку(СледующийМесяц);
	КонецЕсли;
	
	ПолеФормы = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Элементы.СреднийЗаработокЗначения, ПолеСледующего);
	ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
	ПолеФормы.Ширина = 10;
	ПолеФормы.РастягиватьПоГоризонтали = Ложь;
	ПолеФормы.Формат = "БЛ=Учитывать; БИ='Не учитывать'";
	ПолеФормы.ФорматРедактирования = "БЛ=Учитывать; БИ='Не учитывать'";
	ПолеФормы.КнопкаВыбора = Ложь;
	ПолеФормы.ПутьКДанным = "СреднийЗаработок.Значение" + ПостфиксКолонки;
	ПолеФормы.Заголовок = Формат(Месяц, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ДФ='ММММ%1гггг'", Символы.ПС));
	ПолеФормы.УстановитьДействие("ПриИзменении", "Подключаемый_СреднийЗаработокЗначениеПриИзменении");
	ПолеФормы.ВыбиратьТип = Ложь;	
	Возврат ПолеФормы;
	
КонецФункции

&НаСервере
Процедура СоздатьРеквизитыСреднегоЗаработка()
	
	// Метод предназначен для создания реквизитов для показателя среднего заработка,
	// и используется в том случае, если указано несколько способов расчета.
	// Тогда для каждого способа расчета создается отдельный реквизит.
	
	Если СпособыРасчета = Неопределено Тогда
		Элементы.СреднийЗаработокСтраницы.ТекущаяСтраница = Элементы.СреднийЗаработокЕдинственныйСпособ;
		Возврат;
	КонецЕсли;
	
	Элементы.СреднийЗаработокСтраницы.ТекущаяСтраница = Элементы.СреднийЗаработокПоСпособамРасчета;
	
	СоответствиеРеквизитов = Новый Соответствие;
	
	// Добавляем реквизиты
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого СпособРасчета Из СпособыРасчета Цикл
		ИмяРеквизита = "СреднийЗаработок_" + ЗарплатаКадрыРасширенныйКлиентСервер.УникальноеИмяРеквизита();
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), , 
			ЗаголовокПоляСреднегоЗаработкаПоСпособуРасчета(СпособРасчета)));
		СоответствиеРеквизитов.Вставить(СпособРасчета, ИмяРеквизита);
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляем элементы формы
	Для Каждого СпособРасчета Из СпособыРасчета Цикл
		ИмяРеквизита = СоответствиеРеквизитов[СпособРасчета];
		Поле = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.СреднийЗаработокПоСпособамРасчета);
		Поле.Вид = ВидПоляФормы.ПолеНадписи;
		Поле.ПутьКДанным = ИмяРеквизита;
		Поле.Формат = "ЧДЦ=2; ЧН='<недостаточно данных>'";
		Поле.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		Поле.Шрифт = Новый Шрифт(, , Истина);
	КонецЦикла;
	
	СреднийЗаработокПоСпособамРасчета = Новый ФиксированноеСоответствие(СоответствиеРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ТолькоПросмотр Тогда
		Заголовок = НСтр("ru = 'Данные для расчета среднего заработка (только просмотр)'");
	Иначе
		Заголовок = НСтр("ru = 'Ввод данных для расчета среднего заработка'"); 
	КонецЕсли;
							
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОбИндексации()
	
	// Формирует поясняющую надпись об индексации.
	
	ПредыдущийКоэффициент = 1;
	ИнфоНадписьКоэффициентыИндексации = "";
	ИндексСтроки = ДанныеОбИндексации.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		СтрокаИндексации = ДанныеОбИндексации[ИндексСтроки];
		Если СтрокаИндексации.КоэффициентИндексации <> ПредыдущийКоэффициент Тогда
			ТекстИндексации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '%1 года c коэффициентом %2'"), 
								Формат(НачалоМесяца(СтрокаИндексации.Период), "ДФ='д ММММ гггг'"), 
								Формат(СтрокаИндексации.КоэффициентИндексации, "ЧДЦ=4"));
			ИнфоНадписьКоэффициентыИндексации = ТекстИндексации + Символы.ПС + ИнфоНадписьКоэффициентыИндексации;
			ПредыдущийКоэффициент = СтрокаИндексации.КоэффициентИндексации;
		КонецЕсли;	
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИнфоНадписьКоэффициентыИндексации, 1);
	
	Элементы.СведенияОбИндексацииГруппа.Заголовок = ?(ЗначениеЗаполнено(ИнфоНадписьКоэффициентыИндексации), 
														НСтр("ru = 'Индексация заработка сотрудника выполнялась:'"), 
														НСтр("ru = 'Индексация заработка сотрудника не выполнялась'"));
														
	Элементы.КоэффициентыИндексацииИнформационныйТекст.Заголовок = ИнфоНадписьКоэффициентыИндексации;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПерейтиКДокументамИндексации", "Видимость", ЗначениеЗаполнено(ИнфоНадписьКоэффициентыИндексации));
	
		
	ИдентификаторыСтрок = ИдентификаторыСтрокИнексации();
	
	Для Каждого СтрокаИндексации Из ДанныеОбИндексации Цикл
		ПостфиксКолонки = МесяцыРасчета.Получить(НачалоМесяца(СтрокаИндексации.Период));
		Если ПостфиксКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		Для Каждого КлючЗначение Из ИдентификаторыСтрок Цикл
			СтрокаТаблицы = УчетСреднегоЗаработка.СтрокаСреднегоЗаработка(СреднийЗаработок, КлючЗначение.Ключ);
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы["Значение" + ПостфиксКолонки] = СтрокаИндексации[КлючЗначение.Значение];
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	

	
КонецПроцедуры	

&НаСервере
Функция ЗаголовокПоляСреднегоЗаработкаПоСпособуРасчета(СпособРасчета)
	
	ЗаголовкиПолей = Новый Соответствие;
	ЗаголовкиПолей.Вставить(Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням, НСтр("ru = 'Средний заработок (по календ. дням)'"));
	ЗаголовкиПолей.Вставить(Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке, НСтр("ru = 'Средний заработок (по шестидневке)'"));
	
	Возврат ЗаголовкиПолей[СпособРасчета];
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыСтрокСоставныхЧастей(ПорядокРасчета)
	
	ИдентификаторыСтрок = Новый Соответствие;		
			
	Если ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Локализация") Тогда  
		
		ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок"), "ОсновныеНачисления");
		ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияМесячная"), "ПремияМесячная");
		ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияМесячнаяПропорциональноОтработанномуВремени"), "ПремияМесячнаяПропорциональноОтработанномуВремени");
		ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодовая"), "ПремияГодовая");

  
	ИначеЕсли ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Локализация") Тогда
		
		ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеФСС.ОбщийЗаработок"), "ОсновныеНачисления");
		ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеФСС.ПремияМесячная"), "Премия");
	
	ИначеЕсли ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОтпуск.Локализация") Тогда
		
		ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОтпуск.ОбщийЗаработок"), "ОсновныеНачисления");
		//ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОтпсук.ПремияМесячная"), "Премия");
		ИдентификаторыСтрок.Вставить(ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОтпуск.ПремияГодовая"), "ПремияГодовая");
	
	КонецЕсли; 	
		
	Возврат ИдентификаторыСтрок;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыСтрокДанныхВремени()
	
	Соответствие = Новый Соответствие;	
	Соответствие.Вставить("ОтработаноДней", "ОтработаноДней");
	Соответствие.Вставить("ОтработаноЧасов", "ОтработаноЧасов");
	Соответствие.Вставить("НормаДней", "НормаДней");
	Соответствие.Вставить("НормаЧасов", "НормаЧасов");
	Соответствие.Вставить("ОтработаноДнейКалендарных", "ОтработаноДнейКалендарных");
	
	Возврат Соответствие;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыСтрокИнексации()
	
	Соответствие = Новый Соответствие;	
	Соответствие.Вставить("КоэффициентИндексации", "КоэффициентИндексации");
	
	Возврат Соответствие;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыСтрокПредельныеВеличины()
	
	Соответствие = Новый Соответствие;	
	Соответствие.Вставить("ПредельнаяВеличина", "ПредельнаяВеличина");
	
	Возврат Соответствие;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСтрокиДанныхОВремени()
	
	// Функция конструирует структуру, описывающую данные о времени 
	// для расчета среднего заработка за один месяц расчетного периода.
	// Поля структуры заполнены пустыми значениями соответствующих типов.
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПоляОписания.Вставить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));  
	ПоляОписания.Вставить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	ПоляОписания.Вставить("Период", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("Корректировка", Новый ОписаниеТипов("Булево"));
	ПоляОписания.Вставить("ОтработаноДней", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ОтработаноЧасов", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("НормаДней", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("НормаЧасов", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("НеУчитывать", Новый ОписаниеТипов("Булево"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксПоИмениЯчейки(ИмяЯчейки)
	
	Если Найти(ИмяЯчейки, "Значение") > 0 Тогда 
		Возврат СтрЗаменить(ИмяЯчейки, "СреднийЗаработокЗначение", "");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МесяцПоПостфиксу(ПостфиксКолонки)
	Возврат Дата(Лев(ПостфиксКолонки, 4), Прав(ПостфиксКолонки, 2), 1);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПостфиксКолонки(Месяц)
	Возврат Формат(Месяц, "ДФ=ггггММ")
КонецФункции

&НаСервере
Функция СоставнаяЧастьТребуетРасшифровки(СоставнаяЧасть)
	
	// Премии содержат данные, которые требуется расшифровывать (кроме премии фикс. суммой).
	СоставныеЧастиТребуютРасшифровки = Новый Массив;
	СоставныеЧастиТребуютРасшифровки.Добавить(Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом);
	СоставныеЧастиТребуютРасшифровки.Добавить(Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом);
	СоставныеЧастиТребуютРасшифровки.Добавить(Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой);
	
	Возврат СоставныеЧастиТребуютРасшифровки.Найти(СоставнаяЧасть) <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаИзмененияОтработанныхДней()
	
	ДанныеСтроки = Элементы.СреднийЗаработок.ТекущиеДанные;
	
	ПостфиксКолонки = СтрЗаменить(Элементы.СреднийЗаработок.ТекущийЭлемент.Имя, "СреднийЗаработокЗначение", "");

	НовоеЗначение = ДанныеСтроки["Значение" + ПостфиксКолонки];
	
	Если Не ЗначениеЗаполнено(ТекущееЗначение) Тогда
		// Если значения не было до редактирования, то не можем сказать как оно изменилось.
		ТекущееЗначение = НовоеЗначение;
		Возврат;
	КонецЕсли;
	
	Коэффициент = НовоеЗначение / ТекущееЗначение;
	
	ПересчитываемыеСтроки = Новый Массив;
	ПересчитываемыеСтроки.Добавить("ОтработаноЧасов");
	ПересчитываемыеСтроки.Добавить("ОтработаноДнейПятидневка");
	ПересчитываемыеСтроки.Добавить("ОтработаноЧасовПятидневка");
	ПересчитываемыеСтроки.Добавить("ОтработаноДнейШестидневка");
	ПересчитываемыеСтроки.Добавить("ОтработаноДнейКалендарных");
	
	КоличествоДнейВМесяце = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Дата(Лев(ПостфиксКолонки, 4), Прав(ПостфиксКолонки, 2), 1));
	КоличествоЧасовВМесяце = КоличествоДнейВМесяце * 24;
	
	Для Каждого СтрокаТаблицы Из СреднийЗаработок Цикл
		Если ПересчитываемыеСтроки.Найти(СтрокаТаблицы.Идентификатор) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТочностьОкругления = 0;
		Ограничение = КоличествоДнейВМесяце;
		Если СтрокаТаблицы.Идентификатор = "ОтработаноЧасов"
			Или СтрокаТаблицы.Идентификатор = "ОтработаноЧасовПятидневка" Тогда
			// часы округляем до десятых
			ТочностьОкругления = 1;
			Ограничение = КоличествоЧасовВМесяце;
		КонецЕсли;
		СтрокаТаблицы["Значение" + ПостфиксКолонки] = Мин(Окр(СтрокаТаблицы["Значение" + ПостфиксКолонки] * Коэффициент, ТочностьОкругления), Ограничение);
	КонецЦикла;
	
	ТекущееЗначение = НовоеЗначение;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПеренестиИзмененияВРасшифровку(СоставнаяЧасть, Месяц, Сумма, СуммаНеИндексируется)
	
	СуммаИндексируется = Сумма - СуммаНеИндексируется;
	
	// Получим данные расшифровки, если их пока нет, функция добавит строки по умолчанию.
	СтрокиРасшифровки = РасшифровкаСреднегоЗаработка.НайтиСтроки(Новый Структура("СоставнаяЧасть, Период", СоставнаяЧасть, Месяц));
	
	// Индексируемую сумму распределяем по строкам с индексацией, не индексируемую - по строкам без.
	СтрокиСИндексацией = Новый Массив;
	СуммыСИндексацией = Новый Массив;
	СтрокиБезИндексации = Новый Массив;
	СуммыБезИндексации = Новый Массив;
	Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
		Если СтрокаРасшифровки.Индексируется Тогда
			СтрокиСИндексацией.Добавить(СтрокаРасшифровки);
			СуммыСИндексацией.Добавить(СтрокаРасшифровки.Сумма);
		Иначе
			СтрокиБезИндексации.Добавить(СтрокаРасшифровки);
			СуммыБезИндексации.Добавить(СтрокаРасшифровки.Сумма);
		КонецЕсли;
	КонецЦикла;
	Если СуммаИндексируется = 0 Тогда 
		// Если сумму "занулили", удаляем соответствующие строки расшифровки.
		Для Каждого СтрокаРасшифровки Из СтрокиСИндексацией Цикл
			РасшифровкаСреднегоЗаработка.Удалить(СтрокаРасшифровки);
		КонецЦикла;
	Иначе
		// Если сумма не пустая, то ее следует распределить по всем строкам
		// а если пустая, попытаться распределить по строкам без индексации, 
		// если и их не окажется, то просто добавить единственную строку.
		Если СтрокиСИндексацией.Количество() = 0 Тогда
			Если СтрокиБезИндексации.Количество() = 0 Тогда
				СтрокаРасшифровки = РасшифровкаСреднегоЗаработка.Добавить();
				СтрокаРасшифровки.СоставнаяЧасть = СоставнаяЧасть;
				СтрокаРасшифровки.Период = Месяц;
				СтрокаРасшифровки.Индексируется = Истина;
				СтрокаРасшифровки.Сумма = СуммаИндексируется;
				СтрокаРасшифровки.СтатьяФинансирования = СтатьяФинансированияПоУмолчанию;
			Иначе
				// Распределяем сумму с (!) индексацией по строкам без (!) индексации.
				СуммыСИндексацией = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаИндексируется, СуммыБезИндексации);
				Индекс = 0;
				Пока Индекс < СтрокиБезИндексации.Количество() Цикл
					СтрокаРасшифровки = РасшифровкаСреднегоЗаработка.Добавить();
					// Заполняем по строки с индексацией.
					ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокиБезИндексации[Индекс]);
					СтрокаРасшифровки.Индексируется = Истина;
					СтрокаРасшифровки.Сумма = СуммыСИндексацией[Индекс];
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			СуммыСИндексацией = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаИндексируется, СуммыСИндексацией);
			Индекс = 0;
			Пока Индекс < СтрокиСИндексацией.Количество() Цикл
				СтрокиСИндексацией[Индекс].Сумма = СуммыСИндексацией[Индекс];
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// То же делаем с суммой без индексации.
	Если СуммаНеИндексируется = 0 Тогда 
		// Если сумму "занулили", удаляем соответствующие строки расшифровки.
		Для Каждого СтрокаРасшифровки Из СтрокиБезИндексации Цикл
			РасшифровкаСреднегоЗаработка.Удалить(СтрокаРасшифровки);
		КонецЦикла;
	Иначе
		// Если сумма не пустая, то ее следует распределить по всем строкам
		// а если пустая, попытаться распределить по строкам с индексацией, 
		// если и их не окажется, то просто добавить единственную строку.
		Если СтрокиБезИндексации.Количество() = 0 Тогда
			Если СтрокиСИндексацией.Количество() = 0 Тогда
				СтрокаРасшифровки = РасшифровкаСреднегоЗаработка.Добавить();
				СтрокаРасшифровки.СоставнаяЧасть = СоставнаяЧасть;
				СтрокаРасшифровки.Период = Месяц;
				СтрокаРасшифровки.Индексируется = Ложь;
				СтрокаРасшифровки.Сумма = СуммаНеИндексируется;
				СтрокаРасшифровки.СтатьяФинансирования = СтатьяФинансированияПоУмолчанию;
			Иначе
				// Распределяем сумму без индексации по строкам с индексацией.
				СуммыБезИндексации = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНеИндексируется, СуммыСИндексацией);
				Индекс = 0;
				Пока Индекс < СтрокиСИндексацией.Количество() Цикл
					СтрокаРасшифровки = РасшифровкаСреднегоЗаработка.Добавить();
					// Заполняем по строки с индексацией.
					ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокиСИндексацией[Индекс]);
					СтрокаРасшифровки.Индексируется = Ложь;
					СтрокаРасшифровки.Сумма = СуммыБезИндексации[Индекс];
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			СуммыБезИндексации = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНеИндексируется, СуммыБезИндексации);
			Индекс = 0;
			Пока Индекс < СтрокиБезИндексации.Количество() Цикл
				СтрокиБезИндексации[Индекс].Сумма = СуммыБезИндексации[Индекс];
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровки(ИмяЯчейки, ДанныеСтроки)
	
	ПостфиксКолонки = ПостфиксПоИмениЯчейки(ИмяЯчейки);
	Если ПостфиксКолонки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Месяц = МесяцПоПостфиксу(ПостфиксКолонки);
	
	ДанныеРасшифровки = ДанныеРасшифровки(ДанныеСтроки.СоставнаяЧасть, Месяц);
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("СоставнаяЧасть", ДанныеСтроки.СоставнаяЧасть);
	ПараметрыРасшифровки.Вставить("Сотрудник", Сотрудник);
	ПараметрыРасшифровки.Вставить("Месяц", Месяц);
	ПараметрыРасшифровки.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
	ПараметрыРасшифровки.Вставить("ТолькоПросмотр", ДанныеСтроки["ТолькоПросмотр" + ПостфиксКолонки]);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеСтроки", ДанныеСтроки);
	ДополнительныеПараметры.Вставить("ПостфиксКолонки", ПостфиксКолонки);
	ДополнительныеПараметры.Вставить("Месяц", Месяц);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуРасшифровкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ВводДанныхДляРасчетаСреднегоЗаработкаПодробно", ПараметрыРасшифровки, Элементы.СреднийЗаработок, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт 

	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;
	ПостфиксКолонки = ДополнительныеПараметры.ПостфиксКолонки;
	Месяц = ДополнительныеПараметры.Месяц;
	
	ЗаполнитьДанныеРасшифровки(РезультатРедактирования, ДанныеСтроки.СоставнаяЧасть, Месяц);
	
	// Корректируем сумму в ячейках.
	Сумма = 0;
	СуммаНеИндексируется = 0;
	Для Каждого СтрокаРасшифровки Из РезультатРедактирования Цикл
		Сумма = Сумма + СтрокаРасшифровки.Сумма;
		Если Не СтрокаРасшифровки.Индексируется Тогда
			СуммаНеИндексируется = СуммаНеИндексируется + СтрокаРасшифровки.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	НайденныеСтроки = СреднийЗаработок.НайтиСтроки(Новый Структура("СоставнаяЧасть", ДанныеСтроки.СоставнаяЧасть));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Найти(НайденнаяСтрока.Идентификатор, "НеИндексируется") > 0 Тогда
			НайденнаяСтрока["Значение" + ПостфиксКолонки] = СуммаНеИндексируется;
		Иначе
			НайденнаяСтрока["Значение" + ПостфиксКолонки] = Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	ЗаполнитьИтоги(ЭтаФорма);
	РассчитатьСреднийЗаработок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеРасшифровки(СоставнаяЧасть, Месяц)
	
	// Отбирает данные расшифровки среднего заработка за указанный месяц по строкам составной части.
	
	НайденныеСтроки = РасшифровкаСреднегоЗаработка.НайтиСтроки(
		Новый Структура("СоставнаяЧасть, Период", СоставнаяЧасть, Месяц));
		
	ДанныеРасшифровки = Новый Массив;	
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл	
		ОписаниеСтроки = УчетСреднегоЗаработкаКлиентСервер.ОписаниеСтрокиДанныхОНачисленияхОбщегоСреднегоЗаработка();
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, НайденнаяСтрока);
		ДанныеРасшифровки.Добавить(ОписаниеСтроки);
	КонецЦикла;
	
	// Если данных для расшифровки не нашлось, но вообще значение расшифровываемое и сумма не пуста, 
	// то добавим строку как значение по умолчанию.
	Если ДанныеРасшифровки.Количество() = 0 Тогда
		НайденныеСтроки = СреднийЗаработок.НайтиСтроки(Новый Структура("СоставнаяЧасть", СоставнаяЧасть));
		Сумма = 0;
		СуммаНеИндексируется = 0;
		ПостфиксКолонки = ПостфиксКолонки(Месяц);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если Найти(НайденнаяСтрока.Идентификатор, "НеИндексируется") > 0 Тогда
				СуммаНеИндексируется = НайденнаяСтрока["Значение" + ПостфиксКолонки];
			Иначе
				Сумма = НайденнаяСтрока["Значение" + ПостфиксКолонки];
			КонецЕсли;
		КонецЦикла;
		Если Сумма > 0 Тогда
			ОписаниеСтроки = УчетСреднегоЗаработкаКлиентСервер.ОписаниеСтрокиДанныхОНачисленияхОбщегоСреднегоЗаработка();
			ОписаниеСтроки.Сотрудник = Сотрудник;
			ОписаниеСтроки.ПорядокРасчета = ПорядокРасчета;
			ОписаниеСтроки.СоставнаяЧасть = СоставнаяЧасть;
			ОписаниеСтроки.Период = Месяц;
			ОписаниеСтроки.Индексируется = Истина;
			ОписаниеСтроки.Сумма = Сумма - СуммаНеИндексируется;
			ОписаниеСтроки.СтатьяФинансирования = СтатьяФинансированияПоУмолчанию;
			ДанныеРасшифровки.Добавить(ОписаниеСтроки);
			Если СуммаНеИндексируется > 0 Тогда
				ОписаниеСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписаниеСтроки);
				ОписаниеСтроки.Индексируется = Ложь;
				ОписаниеСтроки.Сумма = СуммаНеИндексируется;
				ДанныеРасшифровки.Добавить(ОписаниеСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеРасшифровки;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеРасшифровки(ДанныеРасшифровки, СоставнаяЧасть, Месяц)
	
	// Помещает в данные формы результат редактирования расшифровки.
	
	ОтборСтрок = Новый Структура("СоставнаяЧасть, Период", СоставнаяЧасть, Месяц);
	
	// Сначала удаляем все строки расшифровки этой составной части за месяц.
	НайденныеСтроки = РасшифровкаСреднегоЗаработка.НайтиСтроки(ОтборСтрок);
	Для Каждого УдаляемаяСтрока Из НайденныеСтроки Цикл
		РасшифровкаСреднегоЗаработка.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	// Переносим новые строки
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеРасшифровки, РасшифровкаСреднегоЗаработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ФиксПериодРасчетаПриИзменении()
	
	ФиксПериодРасчета = ФиксПериодРасчетаЧислом = 1;
	
	УстановитьДоступностьРедактированияПериодаРасчета(ЭтаФорма);
	
	Если Не ФиксПериодРасчета Тогда
		ЗаполнитьПериодРасчетаПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРедактированияПериодаРасчета(Форма)
	
	Форма.Элементы.НачалоПериодаРасчетаСтрокой.Доступность = Форма.ФиксПериодРасчета;
	Форма.Элементы.ОкончаниеПериодаРасчетаСтрокой.Доступность = Форма.ФиксПериодРасчета;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодРасчетаПоУмолчанию()
	
	ПериодРасчета = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(ДатаНачалаСобытия, Сотрудник, Начисление);
	НачалоПериодаРасчета = ПериодРасчета.ДатаНачала;
	ОкончаниеПериодаРасчета = ПериодРасчета.ДатаОкончания;
	
	ПриИзмененииПериодаРасчетаНаСервере();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "НачалоПериодаРасчета", "НачалоПериодаРасчетаСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "ОкончаниеПериодаРасчета", "ОкончаниеПериодаРасчетаСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериодаРасчета(ДатаДоИзменения, ИмяРеквизита)
	
	Отказ = Ложь;
	
	Если НачалоПериодаРасчета > ОкончаниеПериодаРасчета Тогда
		// Ошибка настройки периода
		Отказ = Истина;
	КонецЕсли;
	
	Если НачалоМесяца(ДатаПриемаНаРаботуСотрудника) = НачалоМесяца(ДатаНачалаСобытия) Тогда
		// Если сотрудник принят в месяце начала события, то период может включать месяц начала события.
		Если ОкончаниеПериодаРасчета > КонецМесяца(ДатаНачалаСобытия) Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если ОкончаниеПериодаРасчета > КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1)) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ЭтаФорма[ИмяРеквизита] = ДатаДоИзменения;
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, ИмяРеквизита, ИмяРеквизита + "Строкой");
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПериодаРасчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаРасчетаНаСервере()
	
	// Изменить состав колонок
	// - если колонок стало меньше, не удаляем (и не очищаем), а просто скрываем лишние колонки
	// - если стало больше - добавляем
	ДобавленныеМесяцы = ДобавленныеМесяцы(ЭтаФорма);
	ЗаполнитьМесяцыРасчета(ЭтаФорма);
	
	СоздатьКолонки(ДобавленныеМесяцы);
	ПрочитатьДанныеУчетаСреднегоЗаработка(ДобавленныеМесяцы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИтоги(Форма, ИдентификаторСтроки = Неопределено)
	
	СтрокаНеУчитывать = УчетСреднегоЗаработкаКлиентСервер.СтрокаСреднегоЗаработка(Форма.СреднийЗаработок, "НеУчитывать");

	Для Каждого СтрокаТаблицы Из Форма.СреднийЗаработок Цикл
		Если ИдентификаторСтроки <> Неопределено И СтрокаТаблицы.Идентификатор <> ИдентификаторСтроки Тогда
			// Если отбор задан, обрабатываем только конкретную строку.
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.Идентификатор = "КоэффициентИндексации" ИЛИ СтрокаТаблицы.Идентификатор = "НеУчитывать" Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТаблицы.Итого = 0;
		// Обход по динамическому составу колонок по месяцам.
		Для Каждого КлючИЗначение Из Форма.МесяцыРасчета Цикл
			Если СтрокаТаблицы["Значение" + ПостфиксКолонки(КлючИЗначение.Ключ)] = Неопределено Тогда
				СтрокаТаблицы["Значение" + ПостфиксКолонки(КлючИЗначение.Ключ)] = 0;
			КонецЕсли;
			Если СтрокаНеУчитывать <> Неопределено Тогда
				Если  СтрокаНеУчитывать["Значение" + ПостфиксКолонки(КлючИЗначение.Ключ)] <> Неопределено  И СтрокаНеУчитывать["Значение" + ПостфиксКолонки(КлючИЗначение.Ключ)] Тогда
					Продолжить;
				КонецЕсли;  
			КонецЕсли;
			СтрокаТаблицы.Итого = СтрокаТаблицы.Итого + СтрокаТаблицы["Значение" + ПостфиксКолонки(КлючИЗначение.Ключ)];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
