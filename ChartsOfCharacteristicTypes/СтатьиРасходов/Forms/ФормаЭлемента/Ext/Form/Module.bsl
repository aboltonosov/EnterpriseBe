
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Подсистема запрета редактирования ключевых реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.ГруппаСтраницаРеглУчет.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		СписокВыбора = Элементы.ТипЗначенияНаРасходыБудущихПериодов.СписокВыбора;
		ЗначениеОбъектЭксплуатации = СписокВыбора.НайтиПоЗначению("СправочникСсылка.ОбъектыЭксплуатации");
		Если ЗначениеОбъектЭксплуатации <> Неопределено Тогда
			СписокВыбора.Удалить(ЗначениеОбъектЭксплуатации);
		КонецЕсли;
		ЗначениеНМА = СписокВыбора.НайтиПоЗначению("СправочникСсылка.НематериальныеАктивы");
		Если ЗначениеНМА <> Неопределено Тогда
			СписокВыбора.Удалить(ЗначениеНМА);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		СписокВыбора = Элементы.ТипЗначенияНаПроизводственныеЗатраты.СписокВыбора;
		ЗначениеЗаказНаПроизводство = СписокВыбора.НайтиПоЗначению("ДокументСсылка.ЗаказНаПроизводство");
		Если ЗначениеЗаказНаПроизводство <> Неопределено Тогда
			СписокВыбора.Удалить(ЗначениеЗаказНаПроизводство);
		КонецЕсли;
		ЗначениеЗаказНаПроизводство = СписокВыбора.НайтиПоЗначению("ДокументСсылка.ЗаказНаПроизводство2_2");
		Если ЗначениеЗаказНаПроизводство <> Неопределено Тогда
			СписокВыбора.Удалить(ЗначениеЗаказНаПроизводство);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		СписокВыбора = Элементы.ТипЗначенияНаПроизводственныеЗатраты.СписокВыбора;
		ЗначениеЗаказНаПроизводство = СписокВыбора.НайтиПоЗначению("ДокументСсылка.ЗаказНаПроизводство2_2");
		Если ЗначениеЗаказНаПроизводство <> Неопределено Тогда
			СписокВыбора.Удалить(ЗначениеЗаказНаПроизводство);
		КонецЕсли;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяТолькоУправлениеПроизводством22") Тогда
		СписокВыбора = Элементы.ТипЗначенияНаПроизводственныеЗатраты.СписокВыбора;
		ЗначениеЗаказНаПроизводство = СписокВыбора.НайтиПоЗначению("ДокументСсылка.ЗаказНаПроизводство");
		Если ЗначениеЗаказНаПроизводство <> Неопределено Тогда
			СписокВыбора.Удалить(ЗначениеЗаказНаПроизводство);
		КонецЕсли;
		ЗначениеЗаказНаПроизводство = СписокВыбора.НайтиПоЗначению("ДокументСсылка.ЗаказНаПроизводство2_2");
		ЗначениеЗаказНаПроизводство.Представление = НСтр("ru = 'Заказ на производство'");
	КонецЕсли;
	//-- НЕ УТКА
	
	ЭлементСписокРБП = Элементы.ТипЗначенияНаРасходыБудущихПериодовПоУмолчанию;
	//++ НЕ УТ
	ЭлементСписокРБП.СписокВыбора.Добавить("СправочникСсылка.ОбъектыЭксплуатации", НСтр("ru = 'ОС / Объекты строительства'"));
	ЭлементСписокРБП.СписокВыбора.Добавить("СправочникСсылка.НематериальныеАктивы", НСтр("ru = 'НМА / НИОКР'"));
	//-- НЕ УТ
	ЭлементСписокРБП.СписокВыбора.Добавить("СправочникСсылка.ПрочиеАктивыПассивы", НСтр("ru = 'Прочие активы'"));
	
	Если НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Элементы.КорреспондирующийСчет.Видимость = Ложь;
		Элементы.КорреспондирующийСчетПрочиеАктивы.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		ЭлементСписка = Элементы.ВидДеятельностиРасходов.СписокВыбора.НайтиПоЗначению(Перечисления.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность); 
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВидДеятельностиРасходов.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
	
	УстановитьВидимостьТиповЗначенийАналитики();
	
	Если Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы Тогда
		Элементы.КонтролироватьЗаполнениеАналитики.Видимость = Ложь;
	КонецЕсли;
	
	//++ НЕ УТ
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Элементы.СпособРаспределенияНаПроизводственныеЗатраты.СписокВыбора.Очистить();
		Элементы.СпособРаспределенияНаПроизводственныеЗатраты.СписокВыбора.Добавить(Перечисления.СпособыРаспределенияСтатейРасходов.ПоПодразделениямИЭтапамПоПравилам,
																		НСтр("ru = 'По подразделениям и выпускам по правилам'"));
		Элементы.СпособРаспределенияНаПроизводственныеЗатраты.СписокВыбора.Добавить(Перечисления.СпособыРаспределенияСтатейРасходов.ПоПодразделениямВручнуюПоЭтапамПоПравилу,
																		НСтр("ru = 'По подразделениям вручную, по выпускам по правилам'"));
		Элементы.СпособРаспределенияНаПроизводственныеЗатраты.СписокВыбора.Добавить(Перечисления.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуВДанномПодразделении,
																		НСтр("ru = 'По выпускам по правилу (в данном подразделении)'"));
		Элементы.СпособРаспределенияНаПроизводственныеЗатраты.СписокВыбора.Добавить(Перечисления.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуПоВсемПодразделениям,
																		НСтр("ru = 'По выпускам по правилу (по всем подразделениям)'"));
		Элементы.СпособРаспределенияНаПроизводственныеЗатраты.СписокВыбора.Добавить(Перечисления.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям,
																		НСтр("ru = 'По выпускам вручную (по всем подразделениям)'"));
		Элементы.ПравилоРаспределенияПоЭтапамПроизводства.Заголовок = НСтр("ru = 'По выпускам'");
	КонецЕсли;
	//-- НЕ УТ
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	//++ НЕ УТ
	ПолучитьСостояниеНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям();
	//-- НЕ УТ
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
// Конец СтандартныеПодсистемы.Свойства
//++ НЕ УТ
	УстановитьВидимостьПравилРаспределения();
//-- НЕ УТ
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	Если ТекущийОбъект.ВариантРаспределенияРасходов <> ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов") Тогда
		ТекущийОбъект.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	КонецЕсли;
	Если Не ПустаяСтрока(ТипЗначения) Тогда
		Если ТипЗначения = "ДокументСсылка.ЗаказКлиента"
			ИЛИ ТипЗначения = "ДокументСсылка.РеализацияТоваровУслуг"
		Тогда
			ТекущийОбъект.АналитикаРасходовЗаказРеализация = Истина;
			ТекущийОбъект.ТипЗначения = Новый ОписаниеТипов("
				|ДокументСсылка.АктВыполненныхРабот,
				|ДокументСсылка.РеализацияТоваровУслуг,
				|ДокументСсылка.РеализацияУслугПрочихАктивов,
				|ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента,
				//++ НЕ УТКА
				|ДокументСсылка.ЗаказДавальца,
				//-- НЕ УТКА
				|ДокументСсылка.ЗаказКлиента
				|");
		Иначе
			ТекущийОбъект.АналитикаРасходовЗаказРеализация = Ложь;
			ТекущийОбъект.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
		КонецЕсли;
	КонецЕсли;
	Если ТекущийОбъект.ВидЦенностиНДС.Пустая() Тогда
		Если ТекущийОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
			ТекущийОбъект.ВидЦенностиНДС = Перечисления.ВидыЦенностей.Товары;
		Иначе
			ТекущийОбъект.ВидЦенностиНДС = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийОбъект.ДоступныеХозяйственныеОперации.Очистить();
	Для Каждого ЭлементСписка Из ДоступныеХозяйственныеОперации Цикл
		Если ЭлементСписка.Пометка Тогда
			НоваяСтрока = ТекущийОбъект.ДоступныеХозяйственныеОперации.Добавить();
			НоваяСтрока.ХозяйственнаяОперация = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПолеТипЗначения = Неопределено;
	Если Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
		ПолеТипЗначения = Элементы.ТипЗначенияНаНаправленияДеятельности;
	ИначеЕсли Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
		ПолеТипЗначения = Элементы.ТипЗначенияНаПроизводственныеЗатраты;
	ИначеЕсли Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда
		ПолеТипЗначения = Элементы.ТипЗначенияНаРасходыБудущихПериодов;
	ИначеЕсли Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
		ПолеТипЗначения = Элементы.ТипЗначенияНаСебестоимостьТоваров;
	ИначеЕсли Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять Тогда
		ПолеТипЗначения = Элементы.ТипЗначенияНеРаспределять;
	КонецЕсли;
	
	Если ПолеТипЗначения <> Неопределено И ПолеТипЗначения.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'В поле ""Аналитика расходов"" не выбрано ни одного вида аналитики'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			, // Ключ данных
			"ТипЗначения",
			, // Путь к данным
			Отказ);
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если НЕ Объект.ОграничитьИспользование Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоступныеХозяйственныеОперации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_СтатьяРасходов", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантРаспределенияРасходовПриИзменении(Элемент)
	
	ДоступностьКонтроляЗаполненияАналитик = Истина;
	Если Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров") Тогда
		ИмяВидимойГруппы = "ГруппаНаСебестоимостьТоваров";
		Если Элементы.ТипЗначенияНаСебестоимостьТоваров.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
			ТипЗначения = "СправочникСсылка.Склады";
		КонецЕсли;
		Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.Товары");
		Объект.ВариантРаздельногоУчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента");
		//++ НЕ УТ
		Объект.ПризнаватьРасходамиПриУСН = Истина;
		//-- НЕ УТ
	ИначеЕсли Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов") Тогда
		ИмяВидимойГруппы = "ГруппаНаРасходыБудущихПериодов";
		Если ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
			УстановитьТипЗначенияПоСтатьеРасходовСписания();
		КонецЕсли;
		Если Элементы.ТипЗначенияНаРасходыБудущихПериодов.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
			ТипЗначения = "СправочникСсылка.ПрочиеРасходы";
		КонецЕсли;
		Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
//++ НЕ УТ
	ИначеЕсли Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты") Тогда
		ИмяВидимойГруппы = "ГруппаНаПроизводственныеЗатраты";
		ТипЗначения = "СправочникСсылка.СтруктураПредприятия";
		Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
		
		
	ИначеЕсли Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы") Тогда
		
		ИмяВидимойГруппы = "ГруппаНаВнеоборотныеАктивы";
		Если Элементы.ВидЦенностиНДС.СписокВыбора.НайтиПоЗначению(Объект.ВидЦенностиНДС) = Неопределено Тогда
			Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОС");
		КонецЕсли;
		
		Объект.КонтролироватьЗаполнениеАналитики = Истина;
		ДоступностьКонтроляЗаполненияАналитик = Ложь;
//-- НЕ УТ
	ИначеЕсли Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы") Тогда
		
		ИмяВидимойГруппы = "ГруппаНаПрочиеАктивы";
		
		Если Элементы.ВидЦенностиНДС.СписокВыбора.НайтиПоЗначению(Объект.ВидЦенностиНДС) = Неопределено Тогда
			Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
		КонецЕсли;
		
	ИначеЕсли Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НеРаспределять") Тогда
		ИмяВидимойГруппы = "ГруппаНеРаспределять";
		Если Элементы.ТипЗначенияНеРаспределять.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
			ТипЗначения = "СправочникСсылка.ПрочиеРасходы";
		КонецЕсли;
		Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
		Объект.ВариантРаздельногоУчетаНДС = ПредопределенноеЗначение("Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента");
	Иначе
		ИмяВидимойГруппы = "ГруппаНаНаправленияДеятельности";
		Если Элементы.ТипЗначенияНаНаправленияДеятельности.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
			ТипЗначения = "СправочникСсылка.Склады";
		КонецЕсли;
		Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
	КонецЕсли;
	
	Элементы.КонтролироватьЗаполнениеАналитики.Видимость = ДоступностьКонтроляЗаполненияАналитик;
	ГруппыЗависящиеОтВариантаРаспределенияРасходов = МассивГруппЗависящихОтВариантаРаспределенияРасходов();
	Для каждого ТекущаяГруппа из ГруппыЗависящиеОтВариантаРаспределенияРасходов Цикл
		Элементы[ТекущаяГруппа].Видимость = (ИмяВидимойГруппы = ТекущаяГруппа);
	КонецЦикла;

	Если Объект.ДоступныеХозяйственныеОперации.Количество() > 0 Тогда
		ОчиститьНедоступныеХозяйственныеОперации();
	КонецЕсли;
	
//++ НЕ УТ
	УстановитьЗначенияПоУмолчаниюВидовРасходов(Элемент.Имя);
	УстановитьПараметрыВыбораСчетаУчета(ЭтаФорма);
	ПроверитьКорректностьУказанияСчетовУчета(ЭтаФорма);
//-- НЕ УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияНаСебестоимостьТоваровПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	СтатьяРасходовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьИспользованиеПриИзменении(Элемент)
	
	Элементы.ДоступныеХозяйственныеОперации.Доступность = Объект.ОграничитьИспользование;
	
	Если Не Объект.ОграничитьИспользование Тогда
		Для каждого ЭлементСписка Из ДоступныеХозяйственныеОперации Цикл
			Если ЭлементСписка.Пометка Тогда
				ЭлементСписка.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенностиНДСПриИзменении(Элемент)
	
	ВидЦенностиНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрямыеКосвенныеНУПриИзменении(Элемент)
	
	//++ НЕ УТ
	Объект.КосвенныеЗатратыНУ = ?(ПрямыеКосвенныеЗатратыНУ = 1, Истина, Ложь);
	//-- НЕ УТ
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияНаПроизводственныеЗатратыПриИзменении(Элемент)
	
	//++ НЕ УТ
	УстановитьВидимостьПравилРаспределения();
	
	Если Объект.СпособРаспределенияНаПроизводственныеЗатраты = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям")
		ИЛИ Объект.СпособРаспределенияНаПроизводственныеЗатраты = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.НаДругиеСтатьиРасходов") Тогда
		Объект.ПравилоРаспределенияПоЭтапамПроизводства = Неопределено;
	КонецЕсли;
	
	//-- НЕ УТ
	
	Возврат; // в УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияНаПроизводственныеЗатратыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиДляНалоговогоУчетаЗатратПриИзменении(Элемент)
	
	//++ НЕ УТ
	ВидДеятельностиДляНалоговогоУчетаЗатратПриИзмененииСервер();
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиРасходовПриИзменении(Элемент)
	
	ВидДеятельностиРасходовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	//++ НЕ УТ
	СчетУчетаПриИзмененииСервер();
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятиеКналоговомуУчетуПоПрочимРасходамПриИзменении(Элемент)
	
	//++ НЕ УТ
	ПринятиеКналоговомуУчетуПоПрочимРасходамПриИзмененииСервер();
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасходовПриИзменении(Элемент)
	
	//++ НЕ УТ
	ВидРасходовПриИзмененииСервер();
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСчетаРеглУчетаПоОрганизациямИПодразделениям(Команда)
	
	//++ НЕ УТ
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОписаниеОповещения = новый ОписаниеОповещения("ОбработкаВопросЗаписиОбъекта", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать объект. Записать?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		Возврат;
	КонецЕсли;
	ОткрытьФормуНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям();
	//-- НЕ УТ
	
	Возврат; // Чтобы в УТ был не пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВариантРаспределенияРасходов", Объект.ВариантРаспределенияРасходов);
		ПараметрыФормы.Вставить("ЗаполненаСтатьяРасходовСписания", ЗначениеЗаполнено(Объект.СтатьяРасходов));
		Результат = Неопределено;

		ОткрытьФорму("ПланВидовХарактеристик.СтатьиРасходов.Форма.РазблокированиеРеквизитов", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура СтатьяРасходовПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		
		ЗаполнитьСписокВыбораТипаЗначенияПоСтатьеРасходовСписания();
		Реквизиты = ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьРеквизитыСтатьиРасходов(Объект.СтатьяРасходов);
		УстановитьТипЗначения(Реквизиты.ТипЗначения);
		
	Иначе
		
		ЭлементСписокРБП = Элементы.ТипЗначенияНаРасходыБудущихПериодов;
		ЭлементСписокРБППоУмолчанию = Элементы.ТипЗначенияНаРасходыБудущихПериодовПоУмолчанию;
		
		ЭлементСписокРБП.СписокВыбора.Очистить();
		Для Каждого Элемент Из ЭлементСписокРБППоУмолчанию.СписокВыбора Цикл
			ЭлементСписокРБП.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		ТипЗначения = "СправочникСсылка.Организации";
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиРасходовПриИзмененииСервер()
	
	Если Объект.ВидДеятельностиРасходов <> Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность 
		И Объект.ВариантРаспределенияРасходов <> Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
		Объект.ВариантРаспределенияРасходов = Неопределено;
	КонецЕсли;
	
	//++ НЕ УТ
	УстановитьПараметрыВыбораСчетаУчета(ЭтаФорма);
	ПроверитьКорректностьУказанияСчетовУчета(ЭтаФорма);
	//-- НЕ УТ
	ЗаполнитьСписокВыбораКорСчета();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура ПринятиеКналоговомуУчетуПоПрочимРасходамПриИзмененииСервер()
	
	Если Не Объект.ПринятиеКналоговомуУчету Тогда
		Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	КонецЕсли;
	
	Если Объект.ПринятиеКналоговомуУчету 
		  И Объект.ВидРасходов = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
		Объект.ВидРасходов = Неопределено;
		
	ИначеЕсли НЕ Объект.ПринятиеКналоговомуУчету 
		  И Объект.ВидРасходов <> Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
		Объект.ВидРасходов = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
	КонецЕсли;

	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиДляНалоговогоУчетаЗатратПриИзмененииСервер()
	
	Если Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
		Объект.ПризнаватьРасходамиПриУСН = Ложь;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ВидРасходовПриИзмененииСервер()
	
	НормируемыеРасходы = Перечисления.ВидыРасходовНУ.НормируемыеРасходы();
	Если НормируемыеРасходы.Найти(Объект.ВидРасходов) <> Неопределено Тогда
		Объект.КосвенныеЗатратыНУ = Истина;
		ПрямыеКосвенныеЗатратыНУ = 1;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьКорректностьУказанияСчетовУчета(Форма)
	
	Счета = Новый Структура;
	Счета.Вставить("СчетУчета");
	Счета.Вставить("СчетСписанияОСНО");
	Счета.Вставить("СчетСписанияЕНВД");
	
	Для каждого КлючИЗначение Из Счета Цикл
		Счет = КлючИЗначение.Ключ;
		Если Форма.Элементы[Счет].ПараметрыВыбора.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СписокДоступных = Форма.Элементы[Счет].ПараметрыВыбора[0].Значение;
		Если СписокДоступных.Найти(Форма.Объект[Счет]) = Неопределено Тогда
			Форма.Объект[Счет] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТ

&НаСервере
Процедура ВидЦенностиНДСПриИзмененииСервер()
	
	Если Не Объект.ВидЦенностиНДС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги") Тогда
		Объект.КонтролироватьЗаполнениеАналитики = Истина;
		Элементы.КонтролироватьЗаполнениеАналитики.Доступность = Ложь;
	Иначе
		Элементы.КонтролироватьЗаполнениеАналитики.Доступность = Истина;
	КонецЕсли;

	//++ НЕ УТ
	УстановитьПараметрыВыбораСчетаУчета(ЭтаФорма);
	ПроверитьКорректностьУказанияСчетовУчета(ЭтаФорма);
	//-- НЕ УТ
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ВариантРаспределения = Объект.ВариантРаспределенияРасходов;
	
	Если Объект.Ссылка = ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж Тогда
		Элементы.СпособРаспределенияПоНаправлениямДеятельности.Видимость = Ложь;
	КонецЕсли;
	
	Если ВариантРаспределения = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов
	 И ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		Элементы.ТипЗначенияНаРасходыБудущихПериодов.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ТипЗначенияНаРасходыБудущихПериодов.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Элементы.ДоступныеХозяйственныеОперации.Доступность = (Объект.ОграничитьИспользование И Не ТолькоПросмотр);
	
	НаПрочиеАктивы = (ВариантРаспределения = Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы);
	
	Элементы.ГруппаОтражениеВРеглУчете.Видимость = НЕ НаПрочиеАктивы И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	Элементы.ГруппаКлассификацияРасходовДляНалоговогоУчета.Видимость = НЕ НаПрочиеАктивы И ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	Элементы.ГруппаДоступностьДляВыбораВДокументах.Видимость = НЕ НаПрочиеАктивы;
	
	//++ НЕ УТ
	
	ПрочаяДеятельность = Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность;
	
	НаВнеоборотныеАктивы = (ВариантРаспределения = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы);
	НаСебестоимостьТоваров = (ВариантРаспределения = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	НаНаправленияДеятельности = (ВариантРаспределения = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	НаРасходыБудущихПериодов = (ВариантРаспределения = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	НаПроизводственныеЗатраты = (ВариантРаспределения = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	НеРаспределять = (ВариантРаспределения = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	
	ИспользуетсяВидРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ВидРасходовИспользуется(Объект);
	ИспользуетсяВидПрочихРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ВидПрочихРасходовИспользуется(Объект);
	Элементы.ВидРасходов.Видимость = ИспользуетсяВидРасходов;
	Элементы.ВидПрочихРасходов.Видимость = ИспользуетсяВидПрочихРасходов;
	Элементы.НадписьПодсказкаВидРасходов.Видимость = ИспользуетсяВидРасходов ИЛИ ИспользуетсяВидПрочихРасходов;
	
	Элементы.ВидРасходов.Доступность                        = Объект.ПринятиеКналоговомуУчету;
	Элементы.КонтролироватьЗаполнениеАналитики.Видимость	= Не НаВнеоборотныеАктивы;
	Элементы.ВидРБП.Доступность                             = Объект.ПринятиеКналоговомуУчету И НаРасходыБудущихПериодов;
	
	НормируемыеРасходы = Перечисления.ВидыРасходовНУ.НормируемыеРасходы();
	ЭтоНормируемыеРасходы = (НормируемыеРасходы.Найти(Объект.ВидРасходов) <> Неопределено);
	Элементы.ПрямыеКосвенныеНУ.Доступность = НЕ ЭтоНормируемыеРасходы;
	
	Элементы.СтраницыРасходыНУ.ТекущаяСтраница = ?(НаРасходыБудущихПериодов, Элементы.СтраницаВидыРБП, Элементы.СтраницаВидыРасходовНУ);
	Элементы.ГруппаВидАктиваРБП.Видимость      = НаРасходыБудущихПериодов;
	Элементы.ГруппаПрямыеКосвенные.Видимость   = НаПроизводственныеЗатраты;
	Если Элементы.ГруппаПрямыеКосвенные.Видимость Тогда
		Элементы.ГруппаПрямыеКосвенные.Доступность = Объект.ПринятиеКналоговомуУчету;
	КонецЕсли;
	
	Элементы.ГруппаКлассификацияРасходовДляУСН.Видимость = ПолучитьФункциональнуюОпцию("ПрименяетсяУСНДоходыМинусРасходы") И НЕ НаВнеоборотныеАктивы;
	
	ИспользуетсяЕНВД = ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД");
	РасходыПоОСНО = (Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
	РасходыПоЕНВД = (Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
	РасходыПоОСНОиЕНВД = (Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	
	Элементы.ГруппаВидДеятельностиДляНалоговогоУчетаЗатрат.Видимость =
			(НаПроизводственныеЗатраты ИЛИ  НаНаправленияДеятельности ИЛИ НеРаспределять) 
			И (ИспользуетсяЕНВД ИЛИ РасходыПоЕНВД ИЛИ РасходыПоОСНОиЕНВД);
	
	Элементы.ВидДеятельностиДляНалоговогоУчетаЗатратЕНВД.Видимость = ИспользуетсяЕНВД;
	Элементы.ВидДеятельностиДляНалоговогоУчетаЗатратОСНОиЕНВД.Видимость = ИспользуетсяЕНВД И НаНаправленияДеятельности;
	
	Элементы.ВидДеятельностиДляНалоговогоУчетаЗатратОСНО.Доступность = Объект.ПринятиеКналоговомуУчету;
	Элементы.ВидДеятельностиДляНалоговогоУчетаЗатратЕНВД.Доступность = Объект.ПринятиеКналоговомуУчету;
	Элементы.ВидДеятельностиДляНалоговогоУчетаЗатратОСНОиЕНВД.Доступность = Объект.ПринятиеКналоговомуУчету;
	
	Элементы.ГруппаСчетаСписания.Видимость = 
		НЕ ПрочаяДеятельность И (НаНаправленияДеятельности ИЛИ (НаПроизводственныеЗатраты И Объект.КосвенныеЗатратыНУ));
	
	Элементы.СчетСписанияОСНО.Заголовок = ?(ИспользуетсяЕНВД, НСтр("ru = 'Счет списания (ОСНО)'"), НСтр("ru = 'Счет списания'"));
	Элементы.ГруппаСчетСписанияЕНВД.Видимость = ИспользуетсяЕНВД;
	
	Элементы.СчетСписанияОСНО.Доступность = (РасходыПоОСНО ИЛИ РасходыПоОСНОиЕНВД) И ДоступныеСчетаУчетаПрочихРасходов.Найти(Объект.СчетУчета) = Неопределено;
	Элементы.СчетСписанияЕНВД.Доступность = (РасходыПоЕНВД ИЛИ РасходыПоОСНОиЕНВД) И ДоступныеСчетаУчетаПрочихРасходов.Найти(Объект.СчетУчета) = Неопределено;
	
	Элементы.ПризнаватьРасходамиПриУСН.Доступность = Не РасходыПоЕНВД И Не НаСебестоимостьТоваров;
	Если РасходыПоЕНВД Тогда
		НадписьПодсказкаПризнаватьРасходамиПриУСН = 
			НСтр("ru = 'Расходы, относящиеся только к деятельности облагаемой ЕНВД, не могут быть признаны для целей УСН.'");
	ИначеЕсли НаСебестоимостьТоваров Тогда
		НадписьПодсказкаПризнаватьРасходамиПриУСН = 
			НСтр("ru = 'Расходы, распределяющиеся на себестоимость товаров, всегда признаются для целей УСН.'");
	Иначе
		НадписьПодсказкаПризнаватьРасходамиПриУСН =
			НСтр("ru = 'Определяет, должен ли заноситься расход в Книгу учета доходов и расходов для целей УСН при объекте налогооблажения ""Доходы минус расходы"".'");
	КонецЕсли;
	//-- НЕ УТ
	
	Элементы.ГруппаРаздельныйУчетНДС_ОС.Видимость = (Объект.ВидЦенностиНДС = Перечисления.ВидыЦенностей.ОС);
	Элементы.ГруппаРаздельныйУчетНДС_ОбъектыСтроительства.Видимость = (Объект.ВидЦенностиНДС = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства);
		
	Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок = 
		НСтр("ru = 'Данный вариант распределения устарел, вместо статей с таким вариантом распределения в документах следует использовать статьи активов/пассивов.'");
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок = Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок 
			+ " " 
			+ НСтр("ru = 'Для использования статей активов/пассивов включите опцию ""Учитывать прочие активы и пассивы"" (раздел Администрирование - Финансовый результат).'")
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьТиповЗначенийАналитики()
	
	МассивИсключаемыхТипов = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказКлиента");
	Иначе
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	КонецЕсли;
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказПоставщику");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаПеремещение");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.СделкиСКлиентами");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ЭквайринговыеТерминалы");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФиксироватьПретензииКлиентов") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ПретензииКлиентов");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.МаркетинговыеМероприятия");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ПеремещениеТоваров");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.НаправленияДеятельности");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроекты") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.Проекты");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.НематериальныеАктивы");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ОбъектыЭксплуатации");
		МассивИсключаемыхТипов.Добавить("ПеречислениеСсылка.ВидыОперацийПоЗарплате");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		МассивИсключаемыхТипов.Добавить("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.СтруктураПредприятия");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.Организации");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.Кассы");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаСборку");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.СборкаТоваров");
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Элементы.ТипЗначенияНаНаправленияДеятельности);
	МассивПолей.Добавить(Элементы.ТипЗначенияНаРасходыБудущихПериодов);
	МассивПолей.Добавить(Элементы.ТипЗначенияНаСебестоимостьТоваров);
	МассивПолей.Добавить(Элементы.ТипЗначенияНаПроизводственныеЗатраты);
	МассивПолей.Добавить(Элементы.ТипЗначенияНеРаспределять);
	
	Для Каждого ИсключаемыйТип Из МассивИсключаемыхТипов Цикл
		Для Каждого Поле Из МассивПолей Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ИсключаемыйТип);
			Если ЭлементСписка <> Неопределено И ТипЗначения <> ИсключаемыйТип Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()

	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности, "ГруппаНаНаправленияДеятельности");
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров, "ГруппаНаСебестоимостьТоваров");
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов, "ГруппаНаРасходыБудущихПериодов");
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы, "ГруппаНаПрочиеАктивы");
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять, "ГруппаНеРаспределять");
//++ НЕ УТ
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты, "ГруппаНаПроизводственныеЗатраты");
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы, "ГруппаНаВнеоборотныеАктивы");
//-- НЕ УТ

	ИмяВидимойГруппы = Соответствие.Получить(Объект.ВариантРаспределенияРасходов);
	
	ГруппыЗависящиеОтВариантаРаспределенияРасходов = МассивГруппЗависящихОтВариантаРаспределенияРасходов();
	Для каждого ТекущаяГруппа из ГруппыЗависящиеОтВариантаРаспределенияРасходов Цикл
		Элементы[ТекущаяГруппа].Видимость = (ИмяВидимойГруппы = ТекущаяГруппа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивГруппЗависящихОтВариантаРаспределенияРасходов()
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить("ГруппаНаНаправленияДеятельности");
	МассивВозврата.Добавить("ГруппаНаСебестоимостьТоваров");
	МассивВозврата.Добавить("ГруппаНаРасходыБудущихПериодов");
	МассивВозврата.Добавить("ГруппаНаПрочиеАктивы");
	МассивВозврата.Добавить("ГруппаНеРаспределять");
	//++ НЕ УТ
	МассивВозврата.Добавить("ГруппаНаПроизводственныеЗатраты");
	МассивВозврата.Добавить("ГруппаНаВнеоборотныеАктивы");
	//-- НЕ УТ
	Возврат МассивВозврата;
КонецФункции

//++ НЕ УТ
&НаКлиенте
Процедура УстановитьВидимостьПравилРаспределения()
	
	Если Объект.СпособРаспределенияНаПроизводственныеЗатраты = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям") Тогда
		Элементы.ГруппаПравилоПоПодразделениям.Видимость = Ложь;
		Элементы.ГруппаПравилоПоЭтапам.Видимость = Ложь;
	ИначеЕсли Объект.СпособРаспределенияНаПроизводственныеЗатраты = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоПодразделениямИЭтапамПоПравилам") Тогда
		Элементы.ГруппаПравилоПоПодразделениям.Видимость = Истина;
		Элементы.ГруппаПравилоПоЭтапам.Видимость = Истина;
	ИначеЕсли Объект.СпособРаспределенияНаПроизводственныеЗатраты = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоПодразделениямВручнуюПоЭтапамПоПравилу")
		ИЛИ Объект.СпособРаспределенияНаПроизводственныеЗатраты = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуВДанномПодразделении")
		ИЛИ Объект.СпособРаспределенияНаПроизводственныеЗатраты = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуПоВсемПодразделениям") Тогда
		Элементы.ГруппаПравилоПоПодразделениям.Видимость = Ложь;
		Элементы.ГруппаПравилоПоЭтапам.Видимость = Истина;
	Иначе
		Элементы.ГруппаПравилоПоПодразделениям.Видимость = Ложь;
		Элементы.ГруппаПравилоПоЭтапам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСписокВыбораТипаЗначенияПоСтатьеРасходовСписания();
	УстановитьТипЗначения(Объект.ТипЗначения);
	УстановитьТекущуюСтраницу();
	//++ НЕ УТ
	ПолучитьДоступныеСчетаУчета();
	УстановитьПараметрыВыбораСчетаУчета(ЭтаФорма);
	ПрямыеКосвенныеЗатратыНУ = ?(Объект.КосвенныеЗатратыНУ, 1, 0);
	//-- НЕ УТ
	ЗаполнитьСписокВыбораКорСчета();
	УправлениеЭлементамиФормы();
	ЗаполнитьСписокДоступныхХозяйственныхОпераций();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТипаЗначенияПоСтатьеРасходовСписания()
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		
		ЭлементСписокРБП = Элементы.ТипЗначенияНаРасходыБудущихПериодов;
		ЭлементСписокРБП.СписокВыбора.Очистить();
		Варианты = Перечисления.ВариантыРаспределенияРасходов;
		
		Если Объект.СтатьяРасходов.ВариантРаспределенияРасходов = Варианты.НаПрочиеАктивы Тогда
			
			ЭлементСписокРБП.СписокВыбора.Добавить("СправочникСсылка.ПрочиеАктивыПассивы", НСтр("ru = 'Прочие активы'"));
			
		//++ НЕ УТ
		ИначеЕсли Объект.СтатьяРасходов.ВариантРаспределенияРасходов = Варианты.НаВнеоборотныеАктивы Тогда
			ЭлементСписокРБП.СписокВыбора.Добавить("СправочникСсылка.ОбъектыЭксплуатации", НСтр("ru = 'ОС / Объекты строительства'"));
			ЭлементСписокРБП.СписокВыбора.Добавить("СправочникСсылка.НематериальныеАктивы", НСтр("ru = 'НМА / НИОКР'"));			
		//-- НЕ УТ
		Иначе
			
			Списки = Новый Соответствие;
			Списки.Вставить(Варианты.НаНаправленияДеятельности, Элементы.ТипЗначенияНаНаправленияДеятельности.СписокВыбора);
			Списки.Вставить(Варианты.НаПроизводственныеЗатраты, Элементы.ТипЗначенияНаПроизводственныеЗатраты.СписокВыбора);
			Списки.Вставить(Варианты.НаСебестоимостьТоваров, Элементы.ТипЗначенияНаСебестоимостьТоваров.СписокВыбора);
			
			СписокТипов = Списки.Получить(Объект.СтатьяРасходов.ВариантРаспределенияРасходов);
			Если Не СписокТипов = Неопределено Тогда
				Для Каждого Элемент Из СписокТипов Цикл
					ЭлементСписокРБП.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.АналитикаРасходовЗаказРеализация Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
			Объект.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента");
		Иначе
			Объект.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначенияПоСтатьеРасходовСписания()
	
	УстановитьТипЗначения(ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьРеквизитыСтатьиРасходов(Объект.СтатьяРасходов).ТипЗначения)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначения(ВыбранныйТипЗначения)
	
	Если ВыбранныйТипЗначения = Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
			ВыбранныйТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Иначе
			ВыбранныйТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
		КонецЕсли;
	КонецЕсли;
	
	СписокТиповЗначений = Новый СписокЗначений;
	СписокТиповЗначений.Добавить("СправочникСсылка.МаркетинговыеМероприятия");
	СписокТиповЗначений.Добавить("СправочникСсылка.НаправленияДеятельности");
	СписокТиповЗначений.Добавить("СправочникСсылка.СделкиСКлиентами");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказКлиента");
	СписокТиповЗначений.Добавить("СправочникСсылка.Склады");
	СписокТиповЗначений.Добавить("СправочникСсылка.Кассы");
	СписокТиповЗначений.Добавить("СправочникСсылка.Номенклатура");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказПоставщику");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПоступлениеТоваровУслуг");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаПеремещение");
	СписокТиповЗначений.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПеремещениеТоваров");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	СписокТиповЗначений.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПрочиеРасходы");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПрочиеАктивыПассивы");
	СписокТиповЗначений.Добавить("СправочникСсылка.Партнеры");
	СписокТиповЗначений.Добавить("СправочникСсылка.Организации");
	СписокТиповЗначений.Добавить("СправочникСсылка.ФизическиеЛица");
	СписокТиповЗначений.Добавить("СправочникСсылка.СтруктураПредприятия");
	СписокТиповЗначений.Добавить("СправочникСсылка.Проекты");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПретензииКлиентов");
	СписокТиповЗначений.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов");
	//++ НЕ УТКА
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаПроизводство");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаПроизводство2_2");
	//-- НЕ УТКА
	//++ НЕ УТ
	СписокТиповЗначений.Добавить("СправочникСсылка.ОбъектыЭксплуатации");
	СписокТиповЗначений.Добавить("СправочникСсылка.НематериальныеАктивы");
	СписокТиповЗначений.Добавить("ПеречислениеСсылка.ВидыОперацийПоЗарплате");
	//-- НЕ УТ
	СписокТиповЗначений.Добавить("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаСборку");
	СписокТиповЗначений.Добавить("ДокументСсылка.СборкаТоваров");
	СписокТиповЗначений.Добавить("ДокументСсылка.ВводОстатков");
	Для Каждого ЭлементСписка Из СписокТиповЗначений Цикл
		Если ВыбранныйТипЗначения.СодержитТип(Тип(ЭлементСписка.Значение)) Тогда
			ТипЗначения = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНедоступныеХозяйственныеОперации()
	
	ТекущиеДоступныеХозяйственныеОперации = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(ДоступныеХозяйственныеОперации);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСписокХозяйственныхОпераций(
		ДоступныеХозяйственныеОперации,
		Объект.ВариантРаспределенияРасходов);
		
	Для Каждого ТекущийЭлементСписка Из ТекущиеДоступныеХозяйственныеОперации Цикл
		ЭлементСписка = ДоступныеХозяйственныеОперации.НайтиПоЗначению(ТекущийЭлементСписка.Значение);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораКорСчета()
	
	СписокВыбора = Элементы.КорреспондирующийСчет.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность Тогда
		СписокВыбора.Добавить("20", НСтр("ru='Основное производство (20)'"));
		СписокВыбора.Добавить("23", НСтр("ru='Вспомогательные производства (23)'"));
		СписокВыбора.Добавить("25", НСтр("ru='Общепроизводственные расходы (25)'"));
		СписокВыбора.Добавить("26", НСтр("ru='Общехозяйственные расходы (26)'"));
		СписокВыбора.Добавить("44.01", НСтр("ru='Издержки обращения (44.01)'"));
		СписокВыбора.Добавить("44.02", НСтр("ru='Коммерческие расходы (44.02)'"));
	КонецЕсли;
	Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность Тогда
		СписокВыбора.Добавить("91.02", НСтр("ru='Прочие расходы (91.02)'"));
	КонецЕсли;
	
	СписокВыбора = Элементы.КорреспондирующийСчетПрочиеАктивы.СписокВыбора;
	СписокВыбора.Очистить();
	Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность Тогда
		СписокВыбора.Добавить("20", НСтр("ru='Основное производство (20)'"));
		СписокВыбора.Добавить("23", НСтр("ru='Вспомогательные производства (23)'"));
		СписокВыбора.Добавить("25", НСтр("ru='Общепроизводственные расходы (25)'"));
		СписокВыбора.Добавить("26", НСтр("ru='Общехозяйственные расходы (26)'"));
		СписокВыбора.Добавить("44.01", НСтр("ru='Издержки обращения (44.01)'"));
		СписокВыбора.Добавить("44.02", НСтр("ru='Коммерческие расходы (44.02)'"));
	КонецЕсли;
	Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность Тогда
		СписокВыбора.Добавить("91.02", НСтр("ru='Прочие расходы (91.02)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхХозяйственныхОпераций()
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСписокХозяйственныхОпераций(
		ДоступныеХозяйственныеОперации,
		Объект.ВариантРаспределенияРасходов);
	
	Для Каждого СтрокаТаблицы Из Объект.ДоступныеХозяйственныеОперации Цикл
		ЭлементСписка = ДоступныеХозяйственныеОперации.НайтиПоЗначению(СтрокаТаблицы.ХозяйственнаяОперация);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура СчетУчетаПриИзмененииСервер()
	
	Если ДоступныеСчетаУчетаПрочихРасходов.Найти(Объект.СчетУчета) <> Неопределено Тогда
		Объект.СчетСписанияЕНВД = Неопределено;
		Объект.СчетСписанияОСНО = Неопределено;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчаниюВидовРасходов(Элемент)
	
	Если Элемент = "ВидРасходов" Тогда
		УстановитьПринадлежностьСтатьиРасходовКналоговомуУчету();
	КонецЕсли;
	
	// Предопределенные значения.
	ВидРасходовПустой        = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	ВидРасходовНеУчитываемые = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
	ВидПрочихРасходовПустой  = Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка();
	ВидРБППустой             = Перечисления.ВидыРБП.ПустаяСсылка();
	
	// Вариант распределения влияет на возможность отнесения статьи к 91 счету или счетам затрат.
	ДоступностьВидаПрочихРасходов = (Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	ДоступностьВидаРасходов       = (Не Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	ДоступностьВидаРБП            = (Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	
	// Вид расходов должен соответствовать флагу принятия к НУ.
	Если Не Объект.ПринятиеКналоговомуУчету И Не Объект.ВидРасходов = ВидРасходовНеУчитываемые Тогда
		Объект.ВидРасходов = ВидРасходовНеУчитываемые;
		
	ИначеЕсли Объект.ПринятиеКналоговомуУчету
		   И (Объект.ВидРасходов = ВидРасходовНеУчитываемые ИЛИ Не ДоступностьВидаРасходов) Тогда
		Объект.ВидРасходов = ВидРасходовПустой;
		
	КонецЕсли;
	
	// Если вариант распределения не позволяет учитывать прочие расходы, то очищаем поле.
	Если Не ДоступностьВидаПрочихРасходов И НЕ Объект.ВидПрочихРасходов = ВидПрочихРасходовПустой Тогда
		Объект.ВидПрочихРасходов = ВидПрочихРасходовПустой;
	КонецЕсли;
	
	Если (НЕ ДоступностьВидаРБП ИЛИ НЕ Объект.ПринятиеКналоговомуУчету) И Объект.ВидРБП <> ВидРБППустой Тогда
		Объект.ВидРБП = ВидРБППустой;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПринадлежностьСтатьиРасходовКналоговомуУчету()
	
	ВидРасходовНеУчитываемые = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
	
	Если Объект.ВидРасходов = ВидРасходовНеУчитываемые и Объект.ПринятиеКналоговомуУчету Тогда
		Объект.ПринятиеКналоговомуУчету = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоступныеСчетаУчета()
	
	ДоступныеСчетаУчетаРасходов = Новый ФиксированныйМассив(Новый Массив);
	ДоступныеСчетаУчетаПрочихРасходов = Новый ФиксированныйМассив(Новый Массив);
	ДоступныеСчетаУчетаОС = Новый ФиксированныйМассив(Новый Массив);
	ДоступныеСчетаУчетаНМА = Новый ФиксированныйМассив(Новый Массив);
	ДоступныеСчетаСписанияРасходов = Новый ФиксированныйМассив(Новый Массив);
	
	Если НЕ ПравоДоступа("Просмотр",  Метаданные.ПланыСчетов.Хозрасчетный) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаРасходов();
	
	ДоступныеСчетаУчетаРасходов = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасходов);
	ДоступныеСчетаУчетаПрочихРасходов = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаПрочихРасходов);
	ДоступныеСчетаУчетаОС = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаОС);
	ДоступныеСчетаУчетаНМА = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаНМА);
	ДоступныеСчетаСписанияРасходов = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаСписания);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСчетаУчета(Форма)
	
	ВидЦенностиНДС = Форма.Объект.ВидЦенностиНДС;
	ВидДеятельностиРасходов = Форма.Объект.ВидДеятельностиРасходов;
	
	ОС  = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОС");
	ОбС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства");
	НМА = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НМА");
	
	ОснонаяДеятельность = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиРасходов.ОсновнаяДеятельность");
	ПрочаяДеятельность = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиРасходов.ПрочаяДеятельность");
	ОснонаяИПрочаяДеятельность = ПредопределенноеЗначение("Перечисление.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность");
	
	ПараметрыВыбора = Новый Массив;
	Если ВидЦенностиНДС = ОС Или ВидЦенностиНДС = ОбС Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаУчетаОС));
	ИначеЕсли ВидЦенностиНДС = НМА Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаУчетаНМА));
	ИначеЕсли ВидДеятельностиРасходов = ОснонаяДеятельность Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаУчетаРасходов));
	ИначеЕсли ВидДеятельностиРасходов = ПрочаяДеятельность Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаУчетаПрочихРасходов));
	Иначе
		СчетаУчетаРасходовИПрочихРасходов = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаРасходовИПрочихРасходов, Форма.ДоступныеСчетаУчетаРасходов);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаРасходовИПрочихРасходов, Форма.ДоступныеСчетаУчетаПрочихРасходов);
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаУчетаРасходовИПрочихРасходов)));
	КонецЕсли;
	
	Форма.Элементы.СчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	ПараметрыВыбораСчетаСписания = Новый Массив;
	ПараметрыВыбораСчетаСписания.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ДоступныеСчетаСписанияРасходов));
	
	Форма.Элементы.СчетСписанияОСНО.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСчетаСписания);
	Форма.Элементы.СчетСписанияЕНВД.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСчетаСписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросЗаписиОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		ОткрытьФормуНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтатьяРасходов", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ПорядокОтраженияРасходов.Форма.ФормаНастройки", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям(Результат, ДополнительныеПараметры) Экспорт
	
	ПолучитьСостояниеНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеНастройкиСчетовРеглУчетаПоОрганизациямИПодразделениям()
	
	ЗаголовокКоманды = НСтр("ru = 'Посмотреть настройки счетов учета по организациям и подразделениям'");
	
	Если ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ПорядокОтраженияРасходов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Количество
		|ИЗ
		|	РегистрСведений.ПорядокОтраженияРасходов КАК ПорядокОтражения
		|ГДЕ
		|	ПорядокОтражения.СтатьяРасходов = &СтатьяРасходов";
		Запрос.УстановитьПараметр("СтатьяРасходов", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ЗаголовокКоманды = НСтр("ru = 'Настроить счета учета по организациям и подразделениям'");
		Иначе
			ЗаголовокКоманды = НСтр("ru = 'Изменить настройку счетов учета по организациям и подразделениям'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НастроитьСчетаРеглУчетаПоОрганизациямИПодразделениям.Заголовок = ЗаголовокКоманды; 
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти
