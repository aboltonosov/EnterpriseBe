#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает сторнирующие проводки документа(ов).
//
// Параметры:
//  Регистраторы - ДокументСсылка - документы (массив документов) для которых необходимо получить сторнирующие проводки.
//  ПериодРегистратора - Булево - признак заполнения даты проводки датой сторнируемого документа если не указан, то дата не заполнена.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица проводок переданных регистраторов с обратным знаком сумм и типом проводки "Реверс".
//
Функция ПроводкиСторно(Регистраторы, ПериодРегистратора = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПроводокСторно();
	Запрос.УстановитьПараметр("СписокДокументов", Регистраторы);
	Запрос.УстановитьПараметр("Ссылка", Документы.ОперацияМеждународный.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("ПериодРегистратора", ПериодРегистратора);
	
	Результа = Запрос.Выполнить().Выгрузить();
	
	Возврат Результа;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаПроводокСторно()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПериодРегистратора
	|			ТОГДА Проводки.Период
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
	|			ТОГДА Проводки.Регистратор
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК Регистратор,
	|	Проводки.Организация,
	|	Проводки.СчетДт,
	|	Проводки.ПодразделениеДт,
	|	Проводки.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	Проводки.СубконтоДт1,
	|	Проводки.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	Проводки.СубконтоДт2,
	|	Проводки.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	Проводки.СубконтоДт3,
	|	Проводки.СчетКт,
	|	Проводки.ПодразделениеКт,
	|	Проводки.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	Проводки.СубконтоКт1,
	|	Проводки.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	Проводки.СубконтоКт2,
	|	Проводки.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	Проводки.СубконтоКт3,
	|	Проводки.ВалютаДт,
	|	-Проводки.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	Проводки.ВалютаКт,
	|	-Проводки.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	-Проводки.Сумма КАК Сумма,
	|	-Проводки.СуммаПредставления КАК СуммаПредставления,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПроводокМеждународныйУчет.Реверс) КАК ТипПроводки,
	|	Проводки.Содержание КАК Содержание
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(, , Регистратор В (&СписокДокументов), , ) КАК Проводки";
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Регистрирует к последующей обработке документы, отраженные в международном учете для переноса значений измерения УдалитьПодразделение.
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Международный.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Международный КАК Международный
	|ГДЕ
	|	(Международный.УдалитьПодразделениеДт <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ИЛИ Международный.УдалитьПодразделениеКт <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И НЕ ТИПЗНАЧЕНИЯ(Международный.Регистратор) В (
	|		ТИП(Документ.ВнесениеДенежныхСредствВКассуККМ),
	|		ТИП(Документ.ВыемкаДенежныхСредствИзКассыККМ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Международный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Международный КАК Международный
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Международный.Регистратор) В (
	|		ТИП(Документ.ВнесениеДенежныхСредствВКассуККМ),
	|		ТИП(Документ.ВыемкаДенежныхСредствИзКассыККМ))";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрБухгалтерии.Международный";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

// Переносит значение измерения в РБ "Международный".
// Переносит проводоки МФУ удаляемых документов ВнесениеДенежныхСредствВКассуККМ, ВыемкаДенежныхСредствИзКассыККМ
// под специально созданный документ ОперацияМеждународный
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
					Параметры.Очередь, "ПланСчетов.Международный", МенеджерВТ);
	Если Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяРегистра = "РегистрБухгалтерии.Международный";
	ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
								Параметры.Очередь,
								Неопределено,
								ПолноеИмяРегистра);
	
	ПустаяОперацияМФУ = Документы.ОперацияМеждународный.ПустаяСсылка();
	ПереносПроводокМФУ = Новый Соответствие;
	ПереносПроводокМФУ.Вставить(Тип("ДокументСсылка.ВнесениеДенежныхСредствВКассуККМ"), ПустаяОперацияМФУ);
	ПереносПроводокМФУ.Вставить(Тип("ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ"),ПустаяОперацияМФУ);
	
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаПоРегистраторам.Регистратор);
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
			НаборЗаписей.Прочитать();
			
			#Область ПодготовкаПереносаПроводок
			ОперацияМФУ = Неопределено;
			НаборПриемник = Неопределено;
			Если ПереносПроводокМФУ[ТипЗнч(ВыборкаПоРегистраторам.Регистратор)] = ПустаяОперацияМФУ Тогда
				ОперацияМФУ = СоздатьОперациюМФУ(ВыборкаПоРегистраторам.Регистратор);
			КонецЕсли;
			Если ОперацияМФУ <> Неопределено Тогда
				НаборПриемник = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
				НаборПриемник.Отбор.Регистратор.Установить(ОперацияМФУ);
				НаборПриемник.ОбменДанными.Загрузка = Истина;
				НаборПриемник.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				НаборПриемник.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", Неопределено);
			КонецЕсли;
			#КонецОбласти
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(Запись.УдалитьПодразделениеДт) И НЕ ЗначениеЗаполнено(Запись.ПодразделениеДт) Тогда
					Запись.ПодразделениеДт = Запись.УдалитьПодразделениеДт; 
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.УдалитьПодразделениеКт) И НЕ ЗначениеЗаполнено(Запись.ПодразделениеКт) Тогда
					Запись.ПодразделениеКт = Запись.УдалитьПодразделениеКт; 
				КонецЕсли;
				Если НаборПриемник <> Неопределено Тогда
					НаборПриемник.ДобавитьПроводоку(Запись);
				КонецЕсли;
			КонецЦикла;
			
			Если НаборПриемник <> Неопределено Тогда
				НаборПриемник.Записать();
				НаборЗаписей.Очистить();
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ВыборкаПоРегистраторам.Регистратор);
				
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция СоздатьОперациюМФУ(Регистратор)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор,"Дата,Организация");
	ОперацияМФУ = Документы.ОперацияМеждународный.СоздатьДокумент();
	ОперацияМФУ.Дата = Реквизиты.Дата;
	ОперацияМФУ.Организация = Реквизиты.Организация;
	ОперацияМФУ.Ответственный = Пользователи.ТекущийПользователь();
	ОперацияМФУ.СодержаниеОперации = СтрШаблон(НСтр("ru = '###Перенос проводок### ""%1""'"),Строка(Регистратор));
	ОперацияМФУ.Комментарий = НСтр("ru = '###Создан при обновлении### 
										|После обновления перенесенные проводки формируются в документах ПКО и РКО.
										|Распровести в случае задвоения проводок.'");
	ОперацияМФУ.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ОперацияМФУ.Ссылка;
	
КонецФункции

#КонецОбласти

#КонецЕсли